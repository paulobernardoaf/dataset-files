<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\libtomcrypt-analysis\_cppstats\libtomcrypt\src\ciphers\twofish\twofish.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tomcrypt_private.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_TWOFISH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_TWOFISH_ALL_TABLES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LTC_TWOFISH_TABLES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LTC_TWOFISH_TABLES</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ltc_cipher_descriptor</name></name></type> <name>twofish_desc</name> <init>=

<expr><block>{

<expr><literal type="string">"twofish"</literal></expr>,

<expr><literal type="number">7</literal></expr>,

<expr><literal type="number">16</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">16</literal></expr>,

<expr><operator>&amp;</operator><name>twofish_setup</name></expr>,

<expr><operator>&amp;</operator><name>twofish_ecb_encrypt</name></expr>,

<expr><operator>&amp;</operator><name>twofish_ecb_decrypt</name></expr>,

<expr><operator>&amp;</operator><name>twofish_test</name></expr>,

<expr><operator>&amp;</operator><name>twofish_done</name></expr>,

<expr><operator>&amp;</operator><name>twofish_keysize</name></expr>,

<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LTC_TWOFISH_TABLES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MDS_POLY</name></cpp:macro> <cpp:value>0x169</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LTC_TWOFISH_ALL_TABLES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RS_POLY</name></cpp:macro> <cpp:value>0x14D</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>RS</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0xA4</literal></expr>, <expr><literal type="number">0x55</literal></expr>, <expr><literal type="number">0x87</literal></expr>, <expr><literal type="number">0x5A</literal></expr>, <expr><literal type="number">0x58</literal></expr>, <expr><literal type="number">0xDB</literal></expr>, <expr><literal type="number">0x9E</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0xA4</literal></expr>, <expr><literal type="number">0x56</literal></expr>, <expr><literal type="number">0x82</literal></expr>, <expr><literal type="number">0xF3</literal></expr>, <expr><literal type="number">0X1E</literal></expr>, <expr><literal type="number">0XC6</literal></expr>, <expr><literal type="number">0X68</literal></expr>, <expr><literal type="number">0XE5</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0X02</literal></expr>, <expr><literal type="number">0XA1</literal></expr>, <expr><literal type="number">0XFC</literal></expr>, <expr><literal type="number">0XC1</literal></expr>, <expr><literal type="number">0X47</literal></expr>, <expr><literal type="number">0XAE</literal></expr>, <expr><literal type="number">0X3D</literal></expr>, <expr><literal type="number">0X19</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0XA4</literal></expr>, <expr><literal type="number">0X55</literal></expr>, <expr><literal type="number">0X87</literal></expr>, <expr><literal type="number">0X5A</literal></expr>, <expr><literal type="number">0X58</literal></expr>, <expr><literal type="number">0XDB</literal></expr>, <expr><literal type="number">0X9E</literal></expr>, <expr><literal type="number">0X03</literal></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_TWOFISH_SMALL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>qord</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">5</literal></expr>]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_TWOFISH_TABLES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__LTC_TWOFISH_TAB_C__</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"twofish_tab.c"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sbox</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((ulong32)SBOX[i][(x)&amp;255])</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>qbox</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">16</literal></expr>]</index></name> <init>= <expr><block>{

<expr><block>{

<expr><block>{ <expr><literal type="number">0x8</literal></expr>, <expr><literal type="number">0x1</literal></expr>, <expr><literal type="number">0x7</literal></expr>, <expr><literal type="number">0xD</literal></expr>, <expr><literal type="number">0x6</literal></expr>, <expr><literal type="number">0xF</literal></expr>, <expr><literal type="number">0x3</literal></expr>, <expr><literal type="number">0x2</literal></expr>, <expr><literal type="number">0x0</literal></expr>, <expr><literal type="number">0xB</literal></expr>, <expr><literal type="number">0x5</literal></expr>, <expr><literal type="number">0x9</literal></expr>, <expr><literal type="number">0xE</literal></expr>, <expr><literal type="number">0xC</literal></expr>, <expr><literal type="number">0xA</literal></expr>, <expr><literal type="number">0x4</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0xE</literal></expr>, <expr><literal type="number">0XC</literal></expr>, <expr><literal type="number">0XB</literal></expr>, <expr><literal type="number">0X8</literal></expr>, <expr><literal type="number">0X1</literal></expr>, <expr><literal type="number">0X2</literal></expr>, <expr><literal type="number">0X3</literal></expr>, <expr><literal type="number">0X5</literal></expr>, <expr><literal type="number">0XF</literal></expr>, <expr><literal type="number">0X4</literal></expr>, <expr><literal type="number">0XA</literal></expr>, <expr><literal type="number">0X6</literal></expr>, <expr><literal type="number">0X7</literal></expr>, <expr><literal type="number">0X0</literal></expr>, <expr><literal type="number">0X9</literal></expr>, <expr><literal type="number">0XD</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0XB</literal></expr>, <expr><literal type="number">0XA</literal></expr>, <expr><literal type="number">0X5</literal></expr>, <expr><literal type="number">0XE</literal></expr>, <expr><literal type="number">0X6</literal></expr>, <expr><literal type="number">0XD</literal></expr>, <expr><literal type="number">0X9</literal></expr>, <expr><literal type="number">0X0</literal></expr>, <expr><literal type="number">0XC</literal></expr>, <expr><literal type="number">0X8</literal></expr>, <expr><literal type="number">0XF</literal></expr>, <expr><literal type="number">0X3</literal></expr>, <expr><literal type="number">0X2</literal></expr>, <expr><literal type="number">0X4</literal></expr>, <expr><literal type="number">0X7</literal></expr>, <expr><literal type="number">0X1</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0XD</literal></expr>, <expr><literal type="number">0X7</literal></expr>, <expr><literal type="number">0XF</literal></expr>, <expr><literal type="number">0X4</literal></expr>, <expr><literal type="number">0X1</literal></expr>, <expr><literal type="number">0X2</literal></expr>, <expr><literal type="number">0X6</literal></expr>, <expr><literal type="number">0XE</literal></expr>, <expr><literal type="number">0X9</literal></expr>, <expr><literal type="number">0XB</literal></expr>, <expr><literal type="number">0X3</literal></expr>, <expr><literal type="number">0X0</literal></expr>, <expr><literal type="number">0X8</literal></expr>, <expr><literal type="number">0X5</literal></expr>, <expr><literal type="number">0XC</literal></expr>, <expr><literal type="number">0XA</literal></expr> }</block></expr>

}</block></expr>,

<expr><block>{

<expr><block>{ <expr><literal type="number">0X2</literal></expr>, <expr><literal type="number">0X8</literal></expr>, <expr><literal type="number">0XB</literal></expr>, <expr><literal type="number">0XD</literal></expr>, <expr><literal type="number">0XF</literal></expr>, <expr><literal type="number">0X7</literal></expr>, <expr><literal type="number">0X6</literal></expr>, <expr><literal type="number">0XE</literal></expr>, <expr><literal type="number">0X3</literal></expr>, <expr><literal type="number">0X1</literal></expr>, <expr><literal type="number">0X9</literal></expr>, <expr><literal type="number">0X4</literal></expr>, <expr><literal type="number">0X0</literal></expr>, <expr><literal type="number">0XA</literal></expr>, <expr><literal type="number">0XC</literal></expr>, <expr><literal type="number">0X5</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0X1</literal></expr>, <expr><literal type="number">0XE</literal></expr>, <expr><literal type="number">0X2</literal></expr>, <expr><literal type="number">0XB</literal></expr>, <expr><literal type="number">0X4</literal></expr>, <expr><literal type="number">0XC</literal></expr>, <expr><literal type="number">0X3</literal></expr>, <expr><literal type="number">0X7</literal></expr>, <expr><literal type="number">0X6</literal></expr>, <expr><literal type="number">0XD</literal></expr>, <expr><literal type="number">0XA</literal></expr>, <expr><literal type="number">0X5</literal></expr>, <expr><literal type="number">0XF</literal></expr>, <expr><literal type="number">0X9</literal></expr>, <expr><literal type="number">0X0</literal></expr>, <expr><literal type="number">0X8</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0X4</literal></expr>, <expr><literal type="number">0XC</literal></expr>, <expr><literal type="number">0X7</literal></expr>, <expr><literal type="number">0X5</literal></expr>, <expr><literal type="number">0X1</literal></expr>, <expr><literal type="number">0X6</literal></expr>, <expr><literal type="number">0X9</literal></expr>, <expr><literal type="number">0XA</literal></expr>, <expr><literal type="number">0X0</literal></expr>, <expr><literal type="number">0XE</literal></expr>, <expr><literal type="number">0XD</literal></expr>, <expr><literal type="number">0X8</literal></expr>, <expr><literal type="number">0X2</literal></expr>, <expr><literal type="number">0XB</literal></expr>, <expr><literal type="number">0X3</literal></expr>, <expr><literal type="number">0XF</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0xB</literal></expr>, <expr><literal type="number">0X9</literal></expr>, <expr><literal type="number">0X5</literal></expr>, <expr><literal type="number">0X1</literal></expr>, <expr><literal type="number">0XC</literal></expr>, <expr><literal type="number">0X3</literal></expr>, <expr><literal type="number">0XD</literal></expr>, <expr><literal type="number">0XE</literal></expr>, <expr><literal type="number">0X6</literal></expr>, <expr><literal type="number">0X4</literal></expr>, <expr><literal type="number">0X7</literal></expr>, <expr><literal type="number">0XF</literal></expr>, <expr><literal type="number">0X2</literal></expr>, <expr><literal type="number">0X0</literal></expr>, <expr><literal type="number">0X8</literal></expr>, <expr><literal type="number">0XA</literal></expr> }</block></expr>

}</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_CLEAN_STACK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>ulong32</name></type> <name>_sbox</name><argument_list>(<argument><expr><name>int</name> <name>i</name></expr></argument>, <argument><expr><name>ulong32</name> <name>x</name></expr></argument>)</argument_list>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

static <name>ulong32</name> <name>sbox</name><argument_list>(<argument><expr><name>int</name> <name>i</name></expr></argument>, <argument><expr><name>ulong32</name> <name>x</name></expr></argument>)</argument_list>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>a0</name></decl>,<decl><type ref="prev"/><name>b0</name></decl>,<decl><type ref="prev"/><name>a1</name></decl>,<decl><type ref="prev"/><name>b1</name></decl>,<decl><type ref="prev"/><name>a2</name></decl>,<decl><type ref="prev"/><name>b2</name></decl>,<decl><type ref="prev"/><name>a3</name></decl>,<decl><type ref="prev"/><name>b3</name></decl>,<decl><type ref="prev"/><name>a4</name></decl>,<decl><type ref="prev"/><name>b4</name></decl>,<decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<expr_stmt><expr><name>a0</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><operator>(</operator><name>x</name><operator>&gt;&gt;</operator><literal type="number">4</literal><operator>)</operator><operator>&amp;</operator><literal type="number">15</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>b0</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><operator>(</operator><name>x</name><operator>)</operator><operator>&amp;</operator><literal type="number">15</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>a1</name> <operator>=</operator> <name>a0</name> <operator>^</operator> <name>b0</name></expr>;</expr_stmt>

<expr_stmt><expr><name>b1</name> <operator>=</operator> <operator>(</operator><name>a0</name> <operator>^</operator> <operator>(</operator><operator>(</operator><name>b0</name><operator>&lt;&lt;</operator><literal type="number">3</literal><operator>)</operator><operator>|</operator><operator>(</operator><name>b0</name><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>^</operator> <operator>(</operator><name>a0</name><operator>&lt;&lt;</operator><literal type="number">3</literal><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">15</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>a2</name> <operator>=</operator> <name><name>qbox</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><operator>(</operator><name>int</name><operator>)</operator><name>a1</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>b2</name> <operator>=</operator> <name><name>qbox</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><operator>(</operator><name>int</name><operator>)</operator><name>b1</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>a3</name> <operator>=</operator> <name>a2</name> <operator>^</operator> <name>b2</name></expr>;</expr_stmt>

<expr_stmt><expr><name>b3</name> <operator>=</operator> <operator>(</operator><name>a2</name> <operator>^</operator> <operator>(</operator><operator>(</operator><name>b2</name><operator>&lt;&lt;</operator><literal type="number">3</literal><operator>)</operator><operator>|</operator><operator>(</operator><name>b2</name><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>^</operator> <operator>(</operator><name>a2</name><operator>&lt;&lt;</operator><literal type="number">3</literal><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">15</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>a4</name> <operator>=</operator> <name><name>qbox</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><operator>(</operator><name>int</name><operator>)</operator><name>a3</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>b4</name> <operator>=</operator> <name><name>qbox</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><operator>(</operator><name>int</name><operator>)</operator><name>b3</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <operator>(</operator><name>b4</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>+</operator> <name>a4</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>ulong32</name><operator>)</operator><name>y</name></expr>;</return>

</block_content>}</block></decl></decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_CLEAN_STACK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>ulong32</name></type> <name>sbox</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>ulong32</name></type> <name>x</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ulong32</name></type> <name>y</name></decl>;</decl_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>_sbox</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>burn_stack</name><argument_list>(<argument><expr>sizeof<operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>*</operator> <literal type="number">11</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>y</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><specifier>static</specifier> <name>ulong32</name></type> <name>gf_mult</name><parameter_list>(<parameter><decl><type><name>ulong32</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>ulong32</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>ulong32</name></type> <name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ulong32</name></type> <name>result</name></decl>, <decl><type ref="prev"/><name><name>B</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>P</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>P</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>B</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name><name>P</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>B</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>^=</operator> <name><name>B</name><index>[<expr><name>a</name><operator>&amp;</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name>a</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>B</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>P</name><index>[<expr><name><name>B</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>&gt;&gt;</operator><literal type="number">7</literal></expr>]</index></name> <operator>^</operator> <operator>(</operator><name><name>B</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>^=</operator> <name><name>B</name><index>[<expr><name>a</name><operator>&amp;</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name>a</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>B</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>P</name><index>[<expr><name><name>B</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>&gt;&gt;</operator><literal type="number">7</literal></expr>]</index></name> <operator>^</operator> <operator>(</operator><name><name>B</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>^=</operator> <name><name>B</name><index>[<expr><name>a</name><operator>&amp;</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name>a</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>B</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>P</name><index>[<expr><name><name>B</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>&gt;&gt;</operator><literal type="number">7</literal></expr>]</index></name> <operator>^</operator> <operator>(</operator><name><name>B</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>^=</operator> <name><name>B</name><index>[<expr><name>a</name><operator>&amp;</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name>a</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>B</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>P</name><index>[<expr><name><name>B</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>&gt;&gt;</operator><literal type="number">7</literal></expr>]</index></name> <operator>^</operator> <operator>(</operator><name><name>B</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>^=</operator> <name><name>B</name><index>[<expr><name>a</name><operator>&amp;</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name>a</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>B</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>P</name><index>[<expr><name><name>B</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>&gt;&gt;</operator><literal type="number">7</literal></expr>]</index></name> <operator>^</operator> <operator>(</operator><name><name>B</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>^=</operator> <name><name>B</name><index>[<expr><name>a</name><operator>&amp;</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name>a</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>B</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>P</name><index>[<expr><name><name>B</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>&gt;&gt;</operator><literal type="number">7</literal></expr>]</index></name> <operator>^</operator> <operator>(</operator><name><name>B</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>^=</operator> <name><name>B</name><index>[<expr><name>a</name><operator>&amp;</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name>a</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>B</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>P</name><index>[<expr><name><name>B</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>&gt;&gt;</operator><literal type="number">7</literal></expr>]</index></name> <operator>^</operator> <operator>(</operator><name><name>B</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>^=</operator> <name><name>B</name><index>[<expr><name>a</name><operator>&amp;</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LTC_TWOFISH_TABLES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>ulong32</name></type> <name>mds_column_mult</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>in</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>col</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ulong32</name></type> <name>x01</name></decl>, <decl><type ref="prev"/><name>x5B</name></decl>, <decl><type ref="prev"/><name>xEF</name></decl>;</decl_stmt>

<expr_stmt><expr><name>x01</name> <operator>=</operator> <name>in</name></expr>;</expr_stmt>

<expr_stmt><expr><name>x5B</name> <operator>=</operator> <call><name>gf_mult</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><literal type="number">0x5B</literal></expr></argument>, <argument><expr><name>MDS_POLY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>xEF</name> <operator>=</operator> <call><name>gf_mult</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><literal type="number">0xEF</literal></expr></argument>, <argument><expr><name>MDS_POLY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>col</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case>

<return>return <expr><operator>(</operator><name>x01</name> <operator>&lt;&lt;</operator> <literal type="number">0</literal> <operator>)</operator> <operator>|</operator>

<operator>(</operator><name>x5B</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal> <operator>)</operator> <operator>|</operator>

<operator>(</operator><name>xEF</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator>

<operator>(</operator><name>xEF</name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator></expr>;</return>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<return>return <expr><operator>(</operator><name>xEF</name> <operator>&lt;&lt;</operator> <literal type="number">0</literal> <operator>)</operator> <operator>|</operator>

<operator>(</operator><name>xEF</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal> <operator>)</operator> <operator>|</operator>

<operator>(</operator><name>x5B</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator>

<operator>(</operator><name>x01</name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator></expr>;</return>

<case>case <expr><literal type="number">2</literal></expr>:</case>

<return>return <expr><operator>(</operator><name>x5B</name> <operator>&lt;&lt;</operator> <literal type="number">0</literal> <operator>)</operator> <operator>|</operator>

<operator>(</operator><name>xEF</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal> <operator>)</operator> <operator>|</operator>

<operator>(</operator><name>x01</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator>

<operator>(</operator><name>xEF</name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator></expr>;</return>

<case>case <expr><literal type="number">3</literal></expr>:</case>

<return>return <expr><operator>(</operator><name>x5B</name> <operator>&lt;&lt;</operator> <literal type="number">0</literal> <operator>)</operator> <operator>|</operator>

<operator>(</operator><name>x01</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal> <operator>)</operator> <operator>|</operator>

<operator>(</operator><name>xEF</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator>

<operator>(</operator><name>x5B</name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mds_column_mult</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>mds_tab[i][x]</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><specifier>static</specifier> <name>void</name></type> <name>mds_mult</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ulong32</name></type> <name>tmp</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>tmp</name> <operator>=</operator> <name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>tmp</name> <operator>^=</operator> <call><name>mds_column_mult</name><argument_list>(<argument><expr><name><name>in</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>STORE32L</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_TWOFISH_ALL_TABLES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type> <name>rs_mult</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ulong32</name></type> <name>tmp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>rs_tab0</name><index>[<expr><name><name>in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name> <operator>^</operator> <name><name>rs_tab1</name><index>[<expr><name><name>in</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name> <operator>^</operator> <name><name>rs_tab2</name><index>[<expr><name><name>in</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>]</index></name> <operator>^</operator> <name><name>rs_tab3</name><index>[<expr><name><name>in</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>]</index></name> <operator>^</operator>

<name><name>rs_tab4</name><index>[<expr><name><name>in</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>]</index></name> <operator>^</operator> <name><name>rs_tab5</name><index>[<expr><name><name>in</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>]</index></name> <operator>^</operator> <name><name>rs_tab6</name><index>[<expr><name><name>in</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr>]</index></name> <operator>^</operator> <name><name>rs_tab7</name><index>[<expr><name><name>in</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STORE32L</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 

<function><type><specifier>static</specifier> <name>void</name></type> <name>rs_mult</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>x</name></expr>]</index></name> <operator>^=</operator> <call><name>gf_mult</name><argument_list>(<argument><expr><name><name>in</name><index>[<expr><name>y</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>RS</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>y</name></expr>]</index></name></expr></argument>, <argument><expr><name>RS_POLY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type> <name>h_func</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>M</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>k</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>y</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>y</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name><name>in</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<switch>switch <condition>(<expr><name>k</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">4</literal></expr>:</case>

<expr_stmt><expr><name><name>y</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><call><name>sbox</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>ulong32</name><operator>)</operator><name><name>y</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>^</operator> <name><name>M</name><index>[<expr><literal type="number">4</literal> <operator>*</operator> <operator>(</operator><literal type="number">6</literal> <operator>+</operator> <name>offset</name><operator>)</operator> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>y</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><call><name>sbox</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>ulong32</name><operator>)</operator><name><name>y</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>^</operator> <name><name>M</name><index>[<expr><literal type="number">4</literal> <operator>*</operator> <operator>(</operator><literal type="number">6</literal> <operator>+</operator> <name>offset</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>y</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><call><name>sbox</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>ulong32</name><operator>)</operator><name><name>y</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>^</operator> <name><name>M</name><index>[<expr><literal type="number">4</literal> <operator>*</operator> <operator>(</operator><literal type="number">6</literal> <operator>+</operator> <name>offset</name><operator>)</operator> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>y</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><call><name>sbox</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>ulong32</name><operator>)</operator><name><name>y</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>^</operator> <name><name>M</name><index>[<expr><literal type="number">4</literal> <operator>*</operator> <operator>(</operator><literal type="number">6</literal> <operator>+</operator> <name>offset</name><operator>)</operator> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

<case>case <expr><literal type="number">3</literal></expr>:</case>

<expr_stmt><expr><name><name>y</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><call><name>sbox</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>ulong32</name><operator>)</operator><name><name>y</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>^</operator> <name><name>M</name><index>[<expr><literal type="number">4</literal> <operator>*</operator> <operator>(</operator><literal type="number">4</literal> <operator>+</operator> <name>offset</name><operator>)</operator> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>y</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><call><name>sbox</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>ulong32</name><operator>)</operator><name><name>y</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>^</operator> <name><name>M</name><index>[<expr><literal type="number">4</literal> <operator>*</operator> <operator>(</operator><literal type="number">4</literal> <operator>+</operator> <name>offset</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>y</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><call><name>sbox</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>ulong32</name><operator>)</operator><name><name>y</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>^</operator> <name><name>M</name><index>[<expr><literal type="number">4</literal> <operator>*</operator> <operator>(</operator><literal type="number">4</literal> <operator>+</operator> <name>offset</name><operator>)</operator> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>y</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><call><name>sbox</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>ulong32</name><operator>)</operator><name><name>y</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>^</operator> <name><name>M</name><index>[<expr><literal type="number">4</literal> <operator>*</operator> <operator>(</operator><literal type="number">4</literal> <operator>+</operator> <name>offset</name><operator>)</operator> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

<case>case <expr><literal type="number">2</literal></expr>:</case>

<expr_stmt><expr><name><name>y</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><call><name>sbox</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>sbox</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>sbox</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>ulong32</name><operator>)</operator><name><name>y</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>^</operator> <name><name>M</name><index>[<expr><literal type="number">4</literal> <operator>*</operator> <operator>(</operator><literal type="number">2</literal> <operator>+</operator> <name>offset</name><operator>)</operator> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>^</operator> <name><name>M</name><index>[<expr><literal type="number">4</literal> <operator>*</operator> <operator>(</operator><literal type="number">0</literal> <operator>+</operator> <name>offset</name><operator>)</operator> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>y</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><call><name>sbox</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>sbox</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>sbox</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>ulong32</name><operator>)</operator><name><name>y</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>^</operator> <name><name>M</name><index>[<expr><literal type="number">4</literal> <operator>*</operator> <operator>(</operator><literal type="number">2</literal> <operator>+</operator> <name>offset</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>^</operator> <name><name>M</name><index>[<expr><literal type="number">4</literal> <operator>*</operator> <operator>(</operator><literal type="number">0</literal> <operator>+</operator> <name>offset</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>y</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><call><name>sbox</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>sbox</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>sbox</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>ulong32</name><operator>)</operator><name><name>y</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>^</operator> <name><name>M</name><index>[<expr><literal type="number">4</literal> <operator>*</operator> <operator>(</operator><literal type="number">2</literal> <operator>+</operator> <name>offset</name><operator>)</operator> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>^</operator> <name><name>M</name><index>[<expr><literal type="number">4</literal> <operator>*</operator> <operator>(</operator><literal type="number">0</literal> <operator>+</operator> <name>offset</name><operator>)</operator> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>y</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><call><name>sbox</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>sbox</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>sbox</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>ulong32</name><operator>)</operator><name><name>y</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>^</operator> <name><name>M</name><index>[<expr><literal type="number">4</literal> <operator>*</operator> <operator>(</operator><literal type="number">2</literal> <operator>+</operator> <name>offset</name><operator>)</operator> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>^</operator> <name><name>M</name><index>[<expr><literal type="number">4</literal> <operator>*</operator> <operator>(</operator><literal type="number">0</literal> <operator>+</operator> <name>offset</name><operator>)</operator> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>mds_mult</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LTC_TWOFISH_SMALL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S1</name></cpp:macro> <cpp:value>skey-&gt;twofish.S[0]</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S2</name></cpp:macro> <cpp:value>skey-&gt;twofish.S[1]</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S3</name></cpp:macro> <cpp:value>skey-&gt;twofish.S[2]</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S4</name></cpp:macro> <cpp:value>skey-&gt;twofish.S[3]</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>g_func</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>dum</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(S1[LTC_BYTE(x,0)] ^ S2[LTC_BYTE(x,1)] ^ S3[LTC_BYTE(x,2)] ^ S4[LTC_BYTE(x,3)])</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>g1_func</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>dum</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(S2[LTC_BYTE(x,0)] ^ S3[LTC_BYTE(x,1)] ^ S4[LTC_BYTE(x,2)] ^ S1[LTC_BYTE(x,3)])</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_CLEAN_STACK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>ulong32</name></type> <name>_g_func</name><argument_list>(<argument><expr><name>ulong32</name> <name>x</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>symmetric_key</name> <operator>*</operator><name>key</name></expr></argument>)</argument_list>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

static <name>ulong32</name> <name>g_func</name><argument_list>(<argument><expr><name>ulong32</name> <name>x</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>symmetric_key</name> <operator>*</operator><name>key</name></expr></argument>)</argument_list>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>g</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>z</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ulong32</name></type> <name>res</name></decl>;</decl_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>z</name> <operator>=</operator> <name><name>key</name><operator>-&gt;</operator><name>twofish</name><operator>.</operator><name>start</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>g</name> <operator>=</operator> <call><name>sbox</name><argument_list>(<argument><expr><name><name>qord</name><index>[<expr><name>y</name></expr>]</index><index>[<expr><name>z</name><operator>++</operator></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>x</name> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">8</literal><operator>*</operator><name>y</name><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">255</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name>z</name> <operator>!=</operator> <literal type="number">5</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>g</name> <operator>=</operator> <name>g</name> <operator>^</operator> <name><name>key</name><operator>-&gt;</operator><name>twofish</name><operator>.</operator><name>S</name><index>[<expr><literal type="number">4</literal><operator>*</operator><name>i</name><operator>++</operator> <operator>+</operator> <name>y</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>g</name> <operator>=</operator> <call><name>sbox</name><argument_list>(<argument><expr><name><name>qord</name><index>[<expr><name>y</name></expr>]</index><index>[<expr><name>z</name><operator>++</operator></expr>]</index></name></expr></argument>, <argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>res</name> <operator>^=</operator> <call><name>mds_column_mult</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></decl></decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>g1_func</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>key</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>g_func(ROLc(x, 8), key)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_CLEAN_STACK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>ulong32</name></type> <name>g_func</name><parameter_list>(<parameter><decl><type><name>ulong32</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>symmetric_key</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ulong32</name></type> <name>y</name></decl>;</decl_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>_g_func</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>burn_stack</name><argument_list>(<argument><expr>sizeof<operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ulong32</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>y</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_CLEAN_STACK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>_twofish_setup</name><argument_list>(<argument><expr><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><name>key</name></expr></argument>, <argument><expr><name>int</name> <name>keylen</name></expr></argument>, <argument><expr><name>int</name> <name>num_rounds</name></expr></argument>, <argument><expr><name>symmetric_key</name> <operator>*</operator><name>skey</name></expr></argument>)</argument_list>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<name>int</name> <name>twofish_setup</name><argument_list>(<argument><expr><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><name>key</name></expr></argument>, <argument><expr><name>int</name> <name>keylen</name></expr></argument>, <argument><expr><name>int</name> <name>num_rounds</name></expr></argument>, <argument><expr><name>symmetric_key</name> <operator>*</operator><name>skey</name></expr></argument>)</argument_list>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LTC_TWOFISH_SMALL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>S</name><index>[<expr><literal type="number">4</literal><operator>*</operator><literal type="number">4</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name>tmpx0</name></decl>, <decl><type ref="prev"/><name>tmpx1</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>int</name></type> <name>k</name></decl>, <decl><type ref="prev"/><name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>tmp</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>tmp2</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>M</name><index>[<expr><literal type="number">8</literal><operator>*</operator><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ulong32</name></type> <name>A</name></decl>, <decl><type ref="prev"/><name>B</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>key</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>skey</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>num_rounds</name> <operator>!=</operator> <literal type="number">16</literal> <operator>&amp;&amp;</operator> <name>num_rounds</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>CRYPT_INVALID_ROUNDS</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>keylen</name> <operator>!=</operator> <literal type="number">16</literal> <operator>&amp;&amp;</operator> <name>keylen</name> <operator>!=</operator> <literal type="number">24</literal> <operator>&amp;&amp;</operator> <name>keylen</name> <operator>!=</operator> <literal type="number">32</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>CRYPT_INVALID_KEYSIZE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>k</name> <operator>=</operator> <name>keylen</name> <operator>/</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>keylen</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>M</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name><name>key</name><index>[<expr><name>x</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">255</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LTC_TWOFISH_SMALL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>k</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>rs_mult</name><argument_list>(<argument><expr><name>M</name><operator>+</operator><operator>(</operator><name>x</name><operator>*</operator><literal type="number">8</literal><operator>)</operator></expr></argument>, <argument><expr><name>S</name><operator>+</operator><operator>(</operator><name>x</name><operator>*</operator><literal type="number">4</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>k</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>rs_mult</name><argument_list>(<argument><expr><name>M</name><operator>+</operator><operator>(</operator><name>x</name><operator>*</operator><literal type="number">8</literal><operator>)</operator></expr></argument>, <argument><expr><name><name>skey</name><operator>-&gt;</operator><name>twofish</name><operator>.</operator><name>S</name></name><operator>+</operator><operator>(</operator><name>x</name><operator>*</operator><literal type="number">4</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">20</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>tmp</name><index>[<expr><name>y</name></expr>]</index></name> <operator>=</operator> <name>x</name><operator>+</operator><name>x</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>h_func</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>tmp2</name></expr></argument>, <argument><expr><name>M</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOAD32L</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>tmp</name><index>[<expr><name>y</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><name>x</name><operator>+</operator><name>x</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>h_func</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>tmp2</name></expr></argument>, <argument><expr><name>M</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOAD32L</name><argument_list>(<argument><expr><name>B</name></expr></argument>, <argument><expr><name>tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>B</name> <operator>=</operator> <call><name>ROLc</name><argument_list>(<argument><expr><name>B</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>skey</name><operator>-&gt;</operator><name>twofish</name><operator>.</operator><name>K</name><index>[<expr><name>x</name><operator>+</operator><name>x</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>A</name> <operator>+</operator> <name>B</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFFFFFFFFUL</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>skey</name><operator>-&gt;</operator><name>twofish</name><operator>.</operator><name>K</name><index>[<expr><name>x</name><operator>+</operator><name>x</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>ROLc</name><argument_list>(<argument><expr><name>B</name> <operator>+</operator> <name>B</name> <operator>+</operator> <name>A</name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LTC_TWOFISH_SMALL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>k</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>tmpx0</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><call><name>sbox</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmpx1</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><call><name>sbox</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>skey</name><operator>-&gt;</operator><name>twofish</name><operator>.</operator><name>S</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>mds_column_mult</name><argument_list>(<argument><expr><call><name>sbox</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><call><name>sbox</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>tmpx0</name> <operator>^</operator> <name><name>S</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>^</operator> <name><name>S</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>skey</name><operator>-&gt;</operator><name>twofish</name><operator>.</operator><name>S</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>mds_column_mult</name><argument_list>(<argument><expr><call><name>sbox</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><call><name>sbox</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>tmpx1</name> <operator>^</operator> <name><name>S</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>^</operator> <name><name>S</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>skey</name><operator>-&gt;</operator><name>twofish</name><operator>.</operator><name>S</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>mds_column_mult</name><argument_list>(<argument><expr><call><name>sbox</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><call><name>sbox</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>tmpx0</name> <operator>^</operator> <name><name>S</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>^</operator> <name><name>S</name><index>[<expr><literal type="number">6</literal></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>skey</name><operator>-&gt;</operator><name>twofish</name><operator>.</operator><name>S</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>mds_column_mult</name><argument_list>(<argument><expr><call><name>sbox</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><call><name>sbox</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>tmpx1</name> <operator>^</operator> <name><name>S</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>^</operator> <name><name>S</name><index>[<expr><literal type="number">7</literal></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>k</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>tmpx0</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><call><name>sbox</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmpx1</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><call><name>sbox</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>skey</name><operator>-&gt;</operator><name>twofish</name><operator>.</operator><name>S</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>mds_column_mult</name><argument_list>(<argument><expr><call><name>sbox</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><call><name>sbox</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>sbox</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>tmpx1</name> <operator>^</operator> <name><name>S</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>^</operator> <name><name>S</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>^</operator> <name><name>S</name><index>[<expr><literal type="number">8</literal></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>skey</name><operator>-&gt;</operator><name>twofish</name><operator>.</operator><name>S</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>mds_column_mult</name><argument_list>(<argument><expr><call><name>sbox</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><call><name>sbox</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>sbox</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>tmpx1</name> <operator>^</operator> <name><name>S</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>^</operator> <name><name>S</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>^</operator> <name><name>S</name><index>[<expr><literal type="number">9</literal></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>skey</name><operator>-&gt;</operator><name>twofish</name><operator>.</operator><name>S</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>mds_column_mult</name><argument_list>(<argument><expr><call><name>sbox</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><call><name>sbox</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>sbox</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>tmpx0</name> <operator>^</operator> <name><name>S</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>^</operator> <name><name>S</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>^</operator> <name><name>S</name><index>[<expr><literal type="number">10</literal></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>skey</name><operator>-&gt;</operator><name>twofish</name><operator>.</operator><name>S</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>mds_column_mult</name><argument_list>(<argument><expr><call><name>sbox</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><call><name>sbox</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>sbox</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>tmpx0</name> <operator>^</operator> <name><name>S</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>^</operator> <name><name>S</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>^</operator> <name><name>S</name><index>[<expr><literal type="number">11</literal></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>tmpx0</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><call><name>sbox</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmpx1</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><call><name>sbox</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>skey</name><operator>-&gt;</operator><name>twofish</name><operator>.</operator><name>S</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>mds_column_mult</name><argument_list>(<argument><expr><call><name>sbox</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><call><name>sbox</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>sbox</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>sbox</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>tmpx1</name> <operator>^</operator> <name><name>S</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>^</operator> <name><name>S</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>^</operator> <name><name>S</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>^</operator> <name><name>S</name><index>[<expr><literal type="number">12</literal></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>skey</name><operator>-&gt;</operator><name>twofish</name><operator>.</operator><name>S</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>mds_column_mult</name><argument_list>(<argument><expr><call><name>sbox</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><call><name>sbox</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>sbox</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>sbox</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>tmpx0</name> <operator>^</operator> <name><name>S</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>^</operator> <name><name>S</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>^</operator> <name><name>S</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>^</operator> <name><name>S</name><index>[<expr><literal type="number">13</literal></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>skey</name><operator>-&gt;</operator><name>twofish</name><operator>.</operator><name>S</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>mds_column_mult</name><argument_list>(<argument><expr><call><name>sbox</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><call><name>sbox</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>sbox</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>sbox</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>tmpx0</name> <operator>^</operator> <name><name>S</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>^</operator> <name><name>S</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>^</operator> <name><name>S</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>^</operator> <name><name>S</name><index>[<expr><literal type="number">14</literal></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>skey</name><operator>-&gt;</operator><name>twofish</name><operator>.</operator><name>S</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>mds_column_mult</name><argument_list>(<argument><expr><call><name>sbox</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><call><name>sbox</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>sbox</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>sbox</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>tmpx1</name> <operator>^</operator> <name><name>S</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>^</operator> <name><name>S</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>^</operator> <name><name>S</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>^</operator> <name><name>S</name><index>[<expr><literal type="number">15</literal></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<switch>switch <condition>(<expr><name>k</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">4</literal></expr> :</case> <expr_stmt><expr><name><name>skey</name><operator>-&gt;</operator><name>twofish</name><operator>.</operator><name>start</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">3</literal></expr> :</case> <expr_stmt><expr><name><name>skey</name><operator>-&gt;</operator><name>twofish</name><operator>.</operator><name>start</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <break>break;</break>

<default>default:</default> <expr_stmt><expr><name><name>skey</name><operator>-&gt;</operator><name>twofish</name><operator>.</operator><name>start</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt> <break>break;</break>

</block_content>}</block></switch>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>CRYPT_OK</name></expr>;</return>

</block_content>}</block></decl></decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_CLEAN_STACK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>int</name></type> <name>twofish_setup</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>keylen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_rounds</name></decl></parameter>, <parameter><decl><type><name>symmetric_key</name> <modifier>*</modifier></type><name>skey</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>_twofish_setup</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>, <argument><expr><name>num_rounds</name></expr></argument>, <argument><expr><name>skey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>burn_stack</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">7</literal> <operator>+</operator> sizeof<operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>*</operator> <literal type="number">56</literal> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ulong32</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>x</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_CLEAN_STACK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>_twofish_ecb_encrypt</name><argument_list>(<argument><expr><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><name>pt</name></expr></argument>, <argument><expr><name>unsigned</name> <name>char</name> <operator>*</operator><name>ct</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>symmetric_key</name> <operator>*</operator><name>skey</name></expr></argument>)</argument_list>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<name>int</name> <name>twofish_ecb_encrypt</name><argument_list>(<argument><expr><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><name>pt</name></expr></argument>, <argument><expr><name>unsigned</name> <name>char</name> <operator>*</operator><name>ct</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>symmetric_key</name> <operator>*</operator><name>skey</name></expr></argument>)</argument_list>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<block>{<block_content>

<decl_stmt><decl><type><name>ulong32</name></type> <name>a</name></decl>,<decl><type ref="prev"/><name>b</name></decl>,<decl><type ref="prev"/><name>c</name></decl>,<decl><type ref="prev"/><name>d</name></decl>,<decl><type ref="prev"/><name>ta</name></decl>,<decl><type ref="prev"/><name>tb</name></decl>,<decl><type ref="prev"/><name>tc</name></decl>,<decl><type ref="prev"/><name>td</name></decl>,<decl><type ref="prev"/><name>t1</name></decl>,<decl><type ref="prev"/><name>t2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>ulong32</name> <modifier>*</modifier></type><name>k</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LTC_TWOFISH_SMALL</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><specifier>const</specifier> <name>ulong32</name> <modifier>*</modifier></type><name>S1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>S2</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>S3</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>S4</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>pt</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>ct</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>skey</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LTC_TWOFISH_SMALL</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><name>S1</name> <operator>=</operator> <name><name>skey</name><operator>-&gt;</operator><name>twofish</name><operator>.</operator><name>S</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>S2</name> <operator>=</operator> <name><name>skey</name><operator>-&gt;</operator><name>twofish</name><operator>.</operator><name>S</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>S3</name> <operator>=</operator> <name><name>skey</name><operator>-&gt;</operator><name>twofish</name><operator>.</operator><name>S</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>S4</name> <operator>=</operator> <name><name>skey</name><operator>-&gt;</operator><name>twofish</name><operator>.</operator><name>S</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>LOAD32L</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>pt</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>LOAD32L</name><argument_list>(<argument><expr><name>b</name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>pt</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOAD32L</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>pt</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>LOAD32L</name><argument_list>(<argument><expr><name>d</name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>pt</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>a</name> <operator>^=</operator> <name><name>skey</name><operator>-&gt;</operator><name>twofish</name><operator>.</operator><name>K</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>b</name> <operator>^=</operator> <name><name>skey</name><operator>-&gt;</operator><name>twofish</name><operator>.</operator><name>K</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>^=</operator> <name><name>skey</name><operator>-&gt;</operator><name>twofish</name><operator>.</operator><name>K</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>d</name> <operator>^=</operator> <name><name>skey</name><operator>-&gt;</operator><name>twofish</name><operator>.</operator><name>K</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>k</name> <operator>=</operator> <name><name>skey</name><operator>-&gt;</operator><name>twofish</name><operator>.</operator><name>K</name></name> <operator>+</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>r</name> <operator>=</operator> <literal type="number">8</literal></expr>;</init> <condition><expr><name>r</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>--</operator><name>r</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>t2</name> <operator>=</operator> <call><name>g1_func</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>skey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>t1</name> <operator>=</operator> <call><name>g_func</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>skey</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>t2</name></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>RORc</name><argument_list>(<argument><expr><name>c</name> <operator>^</operator> <operator>(</operator><name>t1</name> <operator>+</operator> <name><name>k</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>ROLc</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>^</operator> <operator>(</operator><name>t2</name> <operator>+</operator> <name>t1</name> <operator>+</operator> <name><name>k</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>t2</name> <operator>=</operator> <call><name>g1_func</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>skey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>t1</name> <operator>=</operator> <call><name>g_func</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>skey</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>t2</name></expr>;</expr_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>RORc</name><argument_list>(<argument><expr><name>a</name> <operator>^</operator> <operator>(</operator><name>t1</name> <operator>+</operator> <name><name>k</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>ROLc</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>^</operator> <operator>(</operator><name>t2</name> <operator>+</operator> <name>t1</name> <operator>+</operator> <name><name>k</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>k</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>ta</name> <operator>=</operator> <name>c</name> <operator>^</operator> <name><name>skey</name><operator>-&gt;</operator><name>twofish</name><operator>.</operator><name>K</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>tb</name> <operator>=</operator> <name>d</name> <operator>^</operator> <name><name>skey</name><operator>-&gt;</operator><name>twofish</name><operator>.</operator><name>K</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>tc</name> <operator>=</operator> <name>a</name> <operator>^</operator> <name><name>skey</name><operator>-&gt;</operator><name>twofish</name><operator>.</operator><name>K</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>td</name> <operator>=</operator> <name>b</name> <operator>^</operator> <name><name>skey</name><operator>-&gt;</operator><name>twofish</name><operator>.</operator><name>K</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STORE32L</name><argument_list>(<argument><expr><name>ta</name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>ct</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>STORE32L</name><argument_list>(<argument><expr><name>tb</name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>ct</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STORE32L</name><argument_list>(<argument><expr><name>tc</name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>ct</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>STORE32L</name><argument_list>(<argument><expr><name>td</name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>ct</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CRYPT_OK</name></expr>;</return>

</block_content>}</block></decl></decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_CLEAN_STACK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>int</name></type> <name>twofish_ecb_encrypt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pt</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ct</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>symmetric_key</name> <modifier>*</modifier></type><name>skey</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><call><name>_twofish_ecb_encrypt</name><argument_list>(<argument><expr><name>pt</name></expr></argument>, <argument><expr><name>ct</name></expr></argument>, <argument><expr><name>skey</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>burn_stack</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ulong32</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">10</literal> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_CLEAN_STACK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>_twofish_ecb_decrypt</name><argument_list>(<argument><expr><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><name>ct</name></expr></argument>, <argument><expr><name>unsigned</name> <name>char</name> <operator>*</operator><name>pt</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>symmetric_key</name> <operator>*</operator><name>skey</name></expr></argument>)</argument_list>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<name>int</name> <name>twofish_ecb_decrypt</name><argument_list>(<argument><expr><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><name>ct</name></expr></argument>, <argument><expr><name>unsigned</name> <name>char</name> <operator>*</operator><name>pt</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>symmetric_key</name> <operator>*</operator><name>skey</name></expr></argument>)</argument_list>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<block>{<block_content>

<decl_stmt><decl><type><name>ulong32</name></type> <name>a</name></decl>,<decl><type ref="prev"/><name>b</name></decl>,<decl><type ref="prev"/><name>c</name></decl>,<decl><type ref="prev"/><name>d</name></decl>,<decl><type ref="prev"/><name>ta</name></decl>,<decl><type ref="prev"/><name>tb</name></decl>,<decl><type ref="prev"/><name>tc</name></decl>,<decl><type ref="prev"/><name>td</name></decl>,<decl><type ref="prev"/><name>t1</name></decl>,<decl><type ref="prev"/><name>t2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>ulong32</name> <modifier>*</modifier></type><name>k</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LTC_TWOFISH_SMALL</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><specifier>const</specifier> <name>ulong32</name> <modifier>*</modifier></type><name>S1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>S2</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>S3</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>S4</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>pt</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>ct</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>skey</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LTC_TWOFISH_SMALL</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><name>S1</name> <operator>=</operator> <name><name>skey</name><operator>-&gt;</operator><name>twofish</name><operator>.</operator><name>S</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>S2</name> <operator>=</operator> <name><name>skey</name><operator>-&gt;</operator><name>twofish</name><operator>.</operator><name>S</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>S3</name> <operator>=</operator> <name><name>skey</name><operator>-&gt;</operator><name>twofish</name><operator>.</operator><name>S</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>S4</name> <operator>=</operator> <name><name>skey</name><operator>-&gt;</operator><name>twofish</name><operator>.</operator><name>S</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>LOAD32L</name><argument_list>(<argument><expr><name>ta</name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>ct</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>LOAD32L</name><argument_list>(<argument><expr><name>tb</name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>ct</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOAD32L</name><argument_list>(<argument><expr><name>tc</name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>ct</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>LOAD32L</name><argument_list>(<argument><expr><name>td</name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>ct</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <name>tc</name> <operator>^</operator> <name><name>skey</name><operator>-&gt;</operator><name>twofish</name><operator>.</operator><name>K</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <name>td</name> <operator>^</operator> <name><name>skey</name><operator>-&gt;</operator><name>twofish</name><operator>.</operator><name>K</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <name>ta</name> <operator>^</operator> <name><name>skey</name><operator>-&gt;</operator><name>twofish</name><operator>.</operator><name>K</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>d</name> <operator>=</operator> <name>tb</name> <operator>^</operator> <name><name>skey</name><operator>-&gt;</operator><name>twofish</name><operator>.</operator><name>K</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>k</name> <operator>=</operator> <name><name>skey</name><operator>-&gt;</operator><name>twofish</name><operator>.</operator><name>K</name></name> <operator>+</operator> <literal type="number">36</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>r</name> <operator>=</operator> <literal type="number">8</literal></expr>;</init> <condition><expr><name>r</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>--</operator><name>r</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>t2</name> <operator>=</operator> <call><name>g1_func</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>skey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>t1</name> <operator>=</operator> <call><name>g_func</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>skey</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>t2</name></expr>;</expr_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>ROLc</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>^</operator> <operator>(</operator><name>t1</name> <operator>+</operator> <name><name>k</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>RORc</name><argument_list>(<argument><expr><name>b</name> <operator>^</operator> <operator>(</operator><name>t2</name> <operator>+</operator> <name>t1</name> <operator>+</operator> <name><name>k</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>t2</name> <operator>=</operator> <call><name>g1_func</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>skey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>t1</name> <operator>=</operator> <call><name>g_func</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>skey</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>t2</name></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>ROLc</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>^</operator> <operator>(</operator><name>t1</name> <operator>+</operator> <name><name>k</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>RORc</name><argument_list>(<argument><expr><name>d</name> <operator>^</operator> <operator>(</operator><name>t2</name> <operator>+</operator> <name>t1</name> <operator>+</operator> <name><name>k</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>k</name> <operator>-=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>a</name> <operator>^=</operator> <name><name>skey</name><operator>-&gt;</operator><name>twofish</name><operator>.</operator><name>K</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>b</name> <operator>^=</operator> <name><name>skey</name><operator>-&gt;</operator><name>twofish</name><operator>.</operator><name>K</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>^=</operator> <name><name>skey</name><operator>-&gt;</operator><name>twofish</name><operator>.</operator><name>K</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>d</name> <operator>^=</operator> <name><name>skey</name><operator>-&gt;</operator><name>twofish</name><operator>.</operator><name>K</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STORE32L</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pt</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>STORE32L</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pt</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STORE32L</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pt</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>STORE32L</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pt</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CRYPT_OK</name></expr>;</return>

</block_content>}</block></decl></decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_CLEAN_STACK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>int</name></type> <name>twofish_ecb_decrypt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ct</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>symmetric_key</name> <modifier>*</modifier></type><name>skey</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>=<expr><call><name>_twofish_ecb_decrypt</name><argument_list>(<argument><expr><name>ct</name></expr></argument>, <argument><expr><name>pt</name></expr></argument>, <argument><expr><name>skey</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>burn_stack</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ulong32</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">10</literal> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>int</name></type> <name>twofish_test</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LTC_TEST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><name>CRYPT_NOP</name></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<struct><specifier>static</specifier> <specifier>const</specifier> struct <block>{

<decl_stmt><decl><type><name>int</name></type> <name>keylen</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>key</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>pt</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>ct</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

}</block> <decl><name><name>tests</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="number">16</literal></expr>,

<expr><block>{ <expr><literal type="number">0x9F</literal></expr>, <expr><literal type="number">0x58</literal></expr>, <expr><literal type="number">0x9F</literal></expr>, <expr><literal type="number">0x5C</literal></expr>, <expr><literal type="number">0xF6</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0x2C</literal></expr>, <expr><literal type="number">0x32</literal></expr>,

<expr><literal type="number">0xB6</literal></expr>, <expr><literal type="number">0xBF</literal></expr>, <expr><literal type="number">0xEC</literal></expr>, <expr><literal type="number">0x2F</literal></expr>, <expr><literal type="number">0x2A</literal></expr>, <expr><literal type="number">0xE8</literal></expr>, <expr><literal type="number">0xC3</literal></expr>, <expr><literal type="number">0x5A</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0xD4</literal></expr>, <expr><literal type="number">0x91</literal></expr>, <expr><literal type="number">0xDB</literal></expr>, <expr><literal type="number">0x16</literal></expr>, <expr><literal type="number">0xE7</literal></expr>, <expr><literal type="number">0xB1</literal></expr>, <expr><literal type="number">0xC3</literal></expr>, <expr><literal type="number">0x9E</literal></expr>,

<expr><literal type="number">0x86</literal></expr>, <expr><literal type="number">0xCB</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x6B</literal></expr>, <expr><literal type="number">0x78</literal></expr>, <expr><literal type="number">0x9F</literal></expr>, <expr><literal type="number">0x54</literal></expr>, <expr><literal type="number">0x19</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x9F</literal></expr>, <expr><literal type="number">0x98</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0xDE</literal></expr>, <expr><literal type="number">0x17</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x85</literal></expr>,

<expr><literal type="number">0x8F</literal></expr>, <expr><literal type="number">0xAA</literal></expr>, <expr><literal type="number">0xC3</literal></expr>, <expr><literal type="number">0xA3</literal></expr>, <expr><literal type="number">0xBA</literal></expr>, <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0xFB</literal></expr>, <expr><literal type="number">0xC3</literal></expr> }</block></expr>

}</block></expr>, <expr><block>{

<expr><literal type="number">24</literal></expr>,

<expr><block>{ <expr><literal type="number">0x88</literal></expr>, <expr><literal type="number">0xB2</literal></expr>, <expr><literal type="number">0xB2</literal></expr>, <expr><literal type="number">0x70</literal></expr>, <expr><literal type="number">0x6B</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x5E</literal></expr>, <expr><literal type="number">0x36</literal></expr>,

<expr><literal type="number">0xB4</literal></expr>, <expr><literal type="number">0x46</literal></expr>, <expr><literal type="number">0xBB</literal></expr>, <expr><literal type="number">0x6D</literal></expr>, <expr><literal type="number">0x73</literal></expr>, <expr><literal type="number">0x1A</literal></expr>, <expr><literal type="number">0x1E</literal></expr>, <expr><literal type="number">0x88</literal></expr>,

<expr><literal type="number">0xEF</literal></expr>, <expr><literal type="number">0xA7</literal></expr>, <expr><literal type="number">0x1F</literal></expr>, <expr><literal type="number">0x78</literal></expr>, <expr><literal type="number">0x89</literal></expr>, <expr><literal type="number">0x65</literal></expr>, <expr><literal type="number">0xBD</literal></expr>, <expr><literal type="number">0x44</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0x39</literal></expr>, <expr><literal type="number">0xDA</literal></expr>, <expr><literal type="number">0x69</literal></expr>, <expr><literal type="number">0xD6</literal></expr>, <expr><literal type="number">0xBA</literal></expr>, <expr><literal type="number">0x49</literal></expr>, <expr><literal type="number">0x97</literal></expr>, <expr><literal type="number">0xD5</literal></expr>,

<expr><literal type="number">0x85</literal></expr>, <expr><literal type="number">0xB6</literal></expr>, <expr><literal type="number">0xDC</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0x3C</literal></expr>, <expr><literal type="number">0xA3</literal></expr>, <expr><literal type="number">0x41</literal></expr>, <expr><literal type="number">0xB2</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0x18</literal></expr>, <expr><literal type="number">0x2B</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0xD8</literal></expr>, <expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0x97</literal></expr>, <expr><literal type="number">0xEA</literal></expr>, <expr><literal type="number">0x45</literal></expr>,

<expr><literal type="number">0xF9</literal></expr>, <expr><literal type="number">0xDA</literal></expr>, <expr><literal type="number">0xAC</literal></expr>, <expr><literal type="number">0xDC</literal></expr>, <expr><literal type="number">0x29</literal></expr>, <expr><literal type="number">0x19</literal></expr>, <expr><literal type="number">0x3A</literal></expr>, <expr><literal type="number">0x65</literal></expr> }</block></expr>

}</block></expr>, <expr><block>{

<expr><literal type="number">32</literal></expr>,

<expr><block>{ <expr><literal type="number">0xD4</literal></expr>, <expr><literal type="number">0x3B</literal></expr>, <expr><literal type="number">0xB7</literal></expr>, <expr><literal type="number">0x55</literal></expr>, <expr><literal type="number">0x6E</literal></expr>, <expr><literal type="number">0xA3</literal></expr>, <expr><literal type="number">0x2E</literal></expr>, <expr><literal type="number">0x46</literal></expr>,

<expr><literal type="number">0xF2</literal></expr>, <expr><literal type="number">0xA2</literal></expr>, <expr><literal type="number">0x82</literal></expr>, <expr><literal type="number">0xB7</literal></expr>, <expr><literal type="number">0xD4</literal></expr>, <expr><literal type="number">0x5B</literal></expr>, <expr><literal type="number">0x4E</literal></expr>, <expr><literal type="number">0x0D</literal></expr>,

<expr><literal type="number">0x57</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0x73</literal></expr>, <expr><literal type="number">0x9D</literal></expr>, <expr><literal type="number">0x4D</literal></expr>, <expr><literal type="number">0xC9</literal></expr>, <expr><literal type="number">0x2C</literal></expr>, <expr><literal type="number">0x1B</literal></expr>,

<expr><literal type="number">0xD7</literal></expr>, <expr><literal type="number">0xFC</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x70</literal></expr>, <expr><literal type="number">0x0C</literal></expr>, <expr><literal type="number">0xC8</literal></expr>, <expr><literal type="number">0x21</literal></expr>, <expr><literal type="number">0x6F</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0x90</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0xE9</literal></expr>, <expr><literal type="number">0x1B</literal></expr>, <expr><literal type="number">0xB2</literal></expr>, <expr><literal type="number">0x88</literal></expr>, <expr><literal type="number">0x54</literal></expr>, <expr><literal type="number">0x4F</literal></expr>,

<expr><literal type="number">0x2C</literal></expr>, <expr><literal type="number">0x32</literal></expr>, <expr><literal type="number">0xDC</literal></expr>, <expr><literal type="number">0x23</literal></expr>, <expr><literal type="number">0x9B</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x35</literal></expr>, <expr><literal type="number">0xE6</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0x6C</literal></expr>, <expr><literal type="number">0xB4</literal></expr>, <expr><literal type="number">0x56</literal></expr>, <expr><literal type="number">0x1C</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0xBF</literal></expr>, <expr><literal type="number">0x0A</literal></expr>, <expr><literal type="number">0x97</literal></expr>,

<expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x93</literal></expr>, <expr><literal type="number">0x1C</literal></expr>, <expr><literal type="number">0xB6</literal></expr>, <expr><literal type="number">0xD4</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0xE7</literal></expr>, <expr><literal type="number">0xFA</literal></expr> }</block></expr>

}</block></expr>

}</block></expr></init></decl>;</struct>

<decl_stmt><decl><type><name>symmetric_key</name></type> <name>key</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>tmp</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>tests</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>tests</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>twofish_setup</name><argument_list>(<argument><expr><name><name>tests</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>key</name></expr></argument>, <argument><expr><name><name>tests</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>keylen</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>twofish_ecb_encrypt</name><argument_list>(<argument><expr><name><name>tests</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pt</name></expr></argument>, <argument><expr><name><name>tmp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>twofish_ecb_decrypt</name><argument_list>(<argument><expr><name><name>tmp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>tmp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>compare_testvector</name><argument_list>(<argument><expr><name><name>tmp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name><name>tests</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ct</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="string">"Twofish Encrypt"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator>

<call><name>compare_testvector</name><argument_list>(<argument><expr><name><name>tmp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name><name>tests</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pt</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="string">"Twofish Decrypt"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>CRYPT_FAIL_TESTVECTOR</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>tmp</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>y</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">1000</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>twofish_ecb_encrypt</name><argument_list>(<argument><expr><name><name>tmp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>tmp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">1000</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>twofish_ecb_decrypt</name><argument_list>(<argument><expr><name><name>tmp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>tmp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <if_stmt><if>if <condition>(<expr><name><name>tmp</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>y</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>CRYPT_FAIL_TESTVECTOR</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

</block_content>}</block></for>

<return>return <expr><name>CRYPT_OK</name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>twofish_done</name><parameter_list>(<parameter><decl><type><name>symmetric_key</name> <modifier>*</modifier></type><name>skey</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LTC_UNUSED_PARAM</name><argument_list>(<argument><expr><name>skey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>twofish_keysize</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>keysize</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>keysize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>keysize</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>CRYPT_INVALID_KEYSIZE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>keysize</name> <operator>&lt;</operator> <literal type="number">24</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>keysize</name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<return>return <expr><name>CRYPT_OK</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>keysize</name> <operator>&lt;</operator> <literal type="number">32</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>keysize</name> <operator>=</operator> <literal type="number">24</literal></expr>;</expr_stmt>

<return>return <expr><name>CRYPT_OK</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>keysize</name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt>

<return>return <expr><name>CRYPT_OK</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
