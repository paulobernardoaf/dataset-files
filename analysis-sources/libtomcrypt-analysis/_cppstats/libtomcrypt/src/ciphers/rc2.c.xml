<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\libtomcrypt-analysis\_cppstats\libtomcrypt\src\ciphers\rc2.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tomcrypt_private.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_RC2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ltc_cipher_descriptor</name></name></type> <name>rc2_desc</name> <init>= <expr><block>{

<expr><literal type="string">"rc2"</literal></expr>,

<expr><literal type="number">12</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">128</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">16</literal></expr>,

<expr><operator>&amp;</operator><name>rc2_setup</name></expr>,

<expr><operator>&amp;</operator><name>rc2_ecb_encrypt</name></expr>,

<expr><operator>&amp;</operator><name>rc2_ecb_decrypt</name></expr>,

<expr><operator>&amp;</operator><name>rc2_test</name></expr>,

<expr><operator>&amp;</operator><name>rc2_done</name></expr>,

<expr><operator>&amp;</operator><name>rc2_keysize</name></expr>,

<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>permute</name><index>[<expr><literal type="number">256</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="number">217</literal></expr>,<expr><literal type="number">120</literal></expr>,<expr><literal type="number">249</literal></expr>,<expr><literal type="number">196</literal></expr>, <expr><literal type="number">25</literal></expr>,<expr><literal type="number">221</literal></expr>,<expr><literal type="number">181</literal></expr>,<expr><literal type="number">237</literal></expr>, <expr><literal type="number">40</literal></expr>,<expr><literal type="number">233</literal></expr>,<expr><literal type="number">253</literal></expr>,<expr><literal type="number">121</literal></expr>, <expr><literal type="number">74</literal></expr>,<expr><literal type="number">160</literal></expr>,<expr><literal type="number">216</literal></expr>,<expr><literal type="number">157</literal></expr>,

<expr><literal type="number">198</literal></expr>,<expr><literal type="number">126</literal></expr>, <expr><literal type="number">55</literal></expr>,<expr><literal type="number">131</literal></expr>, <expr><literal type="number">43</literal></expr>,<expr><literal type="number">118</literal></expr>, <expr><literal type="number">83</literal></expr>,<expr><literal type="number">142</literal></expr>, <expr><literal type="number">98</literal></expr>, <expr><literal type="number">76</literal></expr>,<expr><literal type="number">100</literal></expr>,<expr><literal type="number">136</literal></expr>, <expr><literal type="number">68</literal></expr>,<expr><literal type="number">139</literal></expr>,<expr><literal type="number">251</literal></expr>,<expr><literal type="number">162</literal></expr>,

<expr><literal type="number">23</literal></expr>,<expr><literal type="number">154</literal></expr>, <expr><literal type="number">89</literal></expr>,<expr><literal type="number">245</literal></expr>,<expr><literal type="number">135</literal></expr>,<expr><literal type="number">179</literal></expr>, <expr><literal type="number">79</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">97</literal></expr>, <expr><literal type="number">69</literal></expr>,<expr><literal type="number">109</literal></expr>,<expr><literal type="number">141</literal></expr>, <expr><literal type="number">9</literal></expr>,<expr><literal type="number">129</literal></expr>,<expr><literal type="number">125</literal></expr>, <expr><literal type="number">50</literal></expr>,

<expr><literal type="number">189</literal></expr>,<expr><literal type="number">143</literal></expr>, <expr><literal type="number">64</literal></expr>,<expr><literal type="number">235</literal></expr>,<expr><literal type="number">134</literal></expr>,<expr><literal type="number">183</literal></expr>,<expr><literal type="number">123</literal></expr>, <expr><literal type="number">11</literal></expr>,<expr><literal type="number">240</literal></expr>,<expr><literal type="number">149</literal></expr>, <expr><literal type="number">33</literal></expr>, <expr><literal type="number">34</literal></expr>, <expr><literal type="number">92</literal></expr>,<expr><literal type="number">107</literal></expr>, <expr><literal type="number">78</literal></expr>,<expr><literal type="number">130</literal></expr>,

<expr><literal type="number">84</literal></expr>,<expr><literal type="number">214</literal></expr>,<expr><literal type="number">101</literal></expr>,<expr><literal type="number">147</literal></expr>,<expr><literal type="number">206</literal></expr>, <expr><literal type="number">96</literal></expr>,<expr><literal type="number">178</literal></expr>, <expr><literal type="number">28</literal></expr>,<expr><literal type="number">115</literal></expr>, <expr><literal type="number">86</literal></expr>,<expr><literal type="number">192</literal></expr>, <expr><literal type="number">20</literal></expr>,<expr><literal type="number">167</literal></expr>,<expr><literal type="number">140</literal></expr>,<expr><literal type="number">241</literal></expr>,<expr><literal type="number">220</literal></expr>,

<expr><literal type="number">18</literal></expr>,<expr><literal type="number">117</literal></expr>,<expr><literal type="number">202</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">59</literal></expr>,<expr><literal type="number">190</literal></expr>,<expr><literal type="number">228</literal></expr>,<expr><literal type="number">209</literal></expr>, <expr><literal type="number">66</literal></expr>, <expr><literal type="number">61</literal></expr>,<expr><literal type="number">212</literal></expr>, <expr><literal type="number">48</literal></expr>,<expr><literal type="number">163</literal></expr>, <expr><literal type="number">60</literal></expr>,<expr><literal type="number">182</literal></expr>, <expr><literal type="number">38</literal></expr>,

<expr><literal type="number">111</literal></expr>,<expr><literal type="number">191</literal></expr>, <expr><literal type="number">14</literal></expr>,<expr><literal type="number">218</literal></expr>, <expr><literal type="number">70</literal></expr>,<expr><literal type="number">105</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">87</literal></expr>, <expr><literal type="number">39</literal></expr>,<expr><literal type="number">242</literal></expr>, <expr><literal type="number">29</literal></expr>,<expr><literal type="number">155</literal></expr>,<expr><literal type="number">188</literal></expr>,<expr><literal type="number">148</literal></expr>, <expr><literal type="number">67</literal></expr>, <expr><literal type="number">3</literal></expr>,

<expr><literal type="number">248</literal></expr>, <expr><literal type="number">17</literal></expr>,<expr><literal type="number">199</literal></expr>,<expr><literal type="number">246</literal></expr>,<expr><literal type="number">144</literal></expr>,<expr><literal type="number">239</literal></expr>, <expr><literal type="number">62</literal></expr>,<expr><literal type="number">231</literal></expr>, <expr><literal type="number">6</literal></expr>,<expr><literal type="number">195</literal></expr>,<expr><literal type="number">213</literal></expr>, <expr><literal type="number">47</literal></expr>,<expr><literal type="number">200</literal></expr>,<expr><literal type="number">102</literal></expr>, <expr><literal type="number">30</literal></expr>,<expr><literal type="number">215</literal></expr>,

<expr><literal type="number">8</literal></expr>,<expr><literal type="number">232</literal></expr>,<expr><literal type="number">234</literal></expr>,<expr><literal type="number">222</literal></expr>,<expr><literal type="number">128</literal></expr>, <expr><literal type="number">82</literal></expr>,<expr><literal type="number">238</literal></expr>,<expr><literal type="number">247</literal></expr>,<expr><literal type="number">132</literal></expr>,<expr><literal type="number">170</literal></expr>,<expr><literal type="number">114</literal></expr>,<expr><literal type="number">172</literal></expr>, <expr><literal type="number">53</literal></expr>, <expr><literal type="number">77</literal></expr>,<expr><literal type="number">106</literal></expr>, <expr><literal type="number">42</literal></expr>,

<expr><literal type="number">150</literal></expr>, <expr><literal type="number">26</literal></expr>,<expr><literal type="number">210</literal></expr>,<expr><literal type="number">113</literal></expr>, <expr><literal type="number">90</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">73</literal></expr>,<expr><literal type="number">116</literal></expr>, <expr><literal type="number">75</literal></expr>,<expr><literal type="number">159</literal></expr>,<expr><literal type="number">208</literal></expr>, <expr><literal type="number">94</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">24</literal></expr>,<expr><literal type="number">164</literal></expr>,<expr><literal type="number">236</literal></expr>,

<expr><literal type="number">194</literal></expr>,<expr><literal type="number">224</literal></expr>, <expr><literal type="number">65</literal></expr>,<expr><literal type="number">110</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">81</literal></expr>,<expr><literal type="number">203</literal></expr>,<expr><literal type="number">204</literal></expr>, <expr><literal type="number">36</literal></expr>,<expr><literal type="number">145</literal></expr>,<expr><literal type="number">175</literal></expr>, <expr><literal type="number">80</literal></expr>,<expr><literal type="number">161</literal></expr>,<expr><literal type="number">244</literal></expr>,<expr><literal type="number">112</literal></expr>, <expr><literal type="number">57</literal></expr>,

<expr><literal type="number">153</literal></expr>,<expr><literal type="number">124</literal></expr>, <expr><literal type="number">58</literal></expr>,<expr><literal type="number">133</literal></expr>, <expr><literal type="number">35</literal></expr>,<expr><literal type="number">184</literal></expr>,<expr><literal type="number">180</literal></expr>,<expr><literal type="number">122</literal></expr>,<expr><literal type="number">252</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">54</literal></expr>, <expr><literal type="number">91</literal></expr>, <expr><literal type="number">37</literal></expr>, <expr><literal type="number">85</literal></expr>,<expr><literal type="number">151</literal></expr>, <expr><literal type="number">49</literal></expr>,

<expr><literal type="number">45</literal></expr>, <expr><literal type="number">93</literal></expr>,<expr><literal type="number">250</literal></expr>,<expr><literal type="number">152</literal></expr>,<expr><literal type="number">227</literal></expr>,<expr><literal type="number">138</literal></expr>,<expr><literal type="number">146</literal></expr>,<expr><literal type="number">174</literal></expr>, <expr><literal type="number">5</literal></expr>,<expr><literal type="number">223</literal></expr>, <expr><literal type="number">41</literal></expr>, <expr><literal type="number">16</literal></expr>,<expr><literal type="number">103</literal></expr>,<expr><literal type="number">108</literal></expr>,<expr><literal type="number">186</literal></expr>,<expr><literal type="number">201</literal></expr>,

<expr><literal type="number">211</literal></expr>, <expr><literal type="number">0</literal></expr>,<expr><literal type="number">230</literal></expr>,<expr><literal type="number">207</literal></expr>,<expr><literal type="number">225</literal></expr>,<expr><literal type="number">158</literal></expr>,<expr><literal type="number">168</literal></expr>, <expr><literal type="number">44</literal></expr>, <expr><literal type="number">99</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">63</literal></expr>, <expr><literal type="number">88</literal></expr>,<expr><literal type="number">226</literal></expr>,<expr><literal type="number">137</literal></expr>,<expr><literal type="number">169</literal></expr>,

<expr><literal type="number">13</literal></expr>, <expr><literal type="number">56</literal></expr>, <expr><literal type="number">52</literal></expr>, <expr><literal type="number">27</literal></expr>,<expr><literal type="number">171</literal></expr>, <expr><literal type="number">51</literal></expr>,<expr><literal type="number">255</literal></expr>,<expr><literal type="number">176</literal></expr>,<expr><literal type="number">187</literal></expr>, <expr><literal type="number">72</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">95</literal></expr>,<expr><literal type="number">185</literal></expr>,<expr><literal type="number">177</literal></expr>,<expr><literal type="number">205</literal></expr>, <expr><literal type="number">46</literal></expr>,

<expr><literal type="number">197</literal></expr>,<expr><literal type="number">243</literal></expr>,<expr><literal type="number">219</literal></expr>, <expr><literal type="number">71</literal></expr>,<expr><literal type="number">229</literal></expr>,<expr><literal type="number">165</literal></expr>,<expr><literal type="number">156</literal></expr>,<expr><literal type="number">119</literal></expr>, <expr><literal type="number">10</literal></expr>,<expr><literal type="number">166</literal></expr>, <expr><literal type="number">32</literal></expr>,<expr><literal type="number">104</literal></expr>,<expr><literal type="number">254</literal></expr>,<expr><literal type="number">127</literal></expr>,<expr><literal type="number">193</literal></expr>,<expr><literal type="number">173</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>rc2_setup_ex</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>keylen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bits</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_rounds</name></decl></parameter>, <parameter><decl><type><name>symmetric_key</name> <modifier>*</modifier></type><name>skey</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>xkey</name> <init>= <expr><name><name>skey</name><operator>-&gt;</operator><name>rc2</name><operator>.</operator><name>xkey</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>tmp</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>T8</name></decl>, <decl><type ref="prev"/><name>TM</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>key</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>skey</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>keylen</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>keylen</name> <operator>&gt;</operator> <literal type="number">128</literal> <operator>||</operator> <name>bits</name> <operator>&gt;</operator> <literal type="number">1024</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>CRYPT_INVALID_KEYSIZE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>bits</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>bits</name> <operator>=</operator> <literal type="number">1024</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>num_rounds</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>num_rounds</name> <operator>!=</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>CRYPT_INVALID_ROUNDS</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>keylen</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>tmp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>key</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">255</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>keylen</name> <operator>&lt;</operator> <literal type="number">128</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>keylen</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">128</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>tmp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>permute</name><index>[<expr><operator>(</operator><name><name>tmp</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>tmp</name><index>[<expr><name>i</name> <operator>-</operator> <name>keylen</name></expr>]</index></name><operator>)</operator> <operator>&amp;</operator> <literal type="number">255</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>T8</name> <operator>=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><name>bits</name><operator>+</operator><literal type="number">7</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>TM</name> <operator>=</operator> <operator>(</operator><literal type="number">255</literal> <operator>&gt;&gt;</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><literal type="number">7</literal> <operator>&amp;</operator> <operator>-</operator><name>bits</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tmp</name><index>[<expr><literal type="number">128</literal> <operator>-</operator> <name>T8</name></expr>]</index></name> <operator>=</operator> <name><name>permute</name><index>[<expr><name><name>tmp</name><index>[<expr><literal type="number">128</literal> <operator>-</operator> <name>T8</name></expr>]</index></name> <operator>&amp;</operator> <name>TM</name></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">127</literal> <operator>-</operator> <name>T8</name></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>tmp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>permute</name><index>[<expr><name><name>tmp</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>^</operator> <name><name>tmp</name><index>[<expr><name>i</name> <operator>+</operator> <name>T8</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>xkey</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name><name>tmp</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>i</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><name><name>tmp</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_CLEAN_STACK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>zeromem</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>CRYPT_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>rc2_setup</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>keylen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_rounds</name></decl></parameter>, <parameter><decl><type><name>symmetric_key</name> <modifier>*</modifier></type><name>skey</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>rc2_setup_ex</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>, <argument><expr><name>keylen</name> <operator>*</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>num_rounds</name></expr></argument>, <argument><expr><name>skey</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_CLEAN_STACK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>_rc2_ecb_encrypt</name><argument_list>( <argument><expr><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><name>pt</name></expr></argument>,

<argument><expr><name>unsigned</name> <name>char</name> <operator>*</operator><name>ct</name></expr></argument>,

<argument><expr><specifier>const</specifier> <name>symmetric_key</name> <operator>*</operator><name>skey</name></expr></argument>)</argument_list>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<name>int</name> <name>rc2_ecb_encrypt</name><argument_list>( <argument><expr><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><name>pt</name></expr></argument>,

<argument><expr><name>unsigned</name> <name>char</name> <operator>*</operator><name>ct</name></expr></argument>,

<argument><expr><specifier>const</specifier> <name>symmetric_key</name> <operator>*</operator><name>skey</name></expr></argument>)</argument_list>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <modifier>*</modifier></type><name>xkey</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>x76</name></decl>, <decl><type ref="prev"/><name>x54</name></decl>, <decl><type ref="prev"/><name>x32</name></decl>, <decl><type ref="prev"/><name>x10</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>pt</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>ct</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>skey</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>xkey</name> <operator>=</operator> <name><name>skey</name><operator>-&gt;</operator><name>rc2</name><operator>.</operator><name>xkey</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>x76</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><name><name>pt</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name><name>pt</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>x54</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><name><name>pt</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name><name>pt</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>x32</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><name><name>pt</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name><name>pt</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>x10</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><name><name>pt</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name><name>pt</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>x10</name> <operator>=</operator> <operator>(</operator><name>x10</name> <operator>+</operator> <operator>(</operator><name>x32</name> <operator>&amp;</operator> <operator>~</operator><name>x76</name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>x54</name> <operator>&amp;</operator> <name>x76</name><operator>)</operator> <operator>+</operator> <name><name>xkey</name><index>[<expr><literal type="number">4</literal><operator>*</operator><name>i</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFFFF</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>x10</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>x10</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>x10</name> <operator>&gt;&gt;</operator> <literal type="number">15</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>x32</name> <operator>=</operator> <operator>(</operator><name>x32</name> <operator>+</operator> <operator>(</operator><name>x54</name> <operator>&amp;</operator> <operator>~</operator><name>x10</name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>x76</name> <operator>&amp;</operator> <name>x10</name><operator>)</operator> <operator>+</operator> <name><name>xkey</name><index>[<expr><literal type="number">4</literal><operator>*</operator><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFFFF</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>x32</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>x32</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>x32</name> <operator>&gt;&gt;</operator> <literal type="number">14</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>x54</name> <operator>=</operator> <operator>(</operator><name>x54</name> <operator>+</operator> <operator>(</operator><name>x76</name> <operator>&amp;</operator> <operator>~</operator><name>x32</name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>x10</name> <operator>&amp;</operator> <name>x32</name><operator>)</operator> <operator>+</operator> <name><name>xkey</name><index>[<expr><literal type="number">4</literal><operator>*</operator><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFFFF</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>x54</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>x54</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>x54</name> <operator>&gt;&gt;</operator> <literal type="number">13</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>x76</name> <operator>=</operator> <operator>(</operator><name>x76</name> <operator>+</operator> <operator>(</operator><name>x10</name> <operator>&amp;</operator> <operator>~</operator><name>x54</name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>x32</name> <operator>&amp;</operator> <name>x54</name><operator>)</operator> <operator>+</operator> <name><name>xkey</name><index>[<expr><literal type="number">4</literal><operator>*</operator><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFFFF</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>x76</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>x76</name> <operator>&lt;&lt;</operator> <literal type="number">5</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>x76</name> <operator>&gt;&gt;</operator> <literal type="number">11</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">4</literal> <operator>||</operator> <name>i</name> <operator>==</operator> <literal type="number">10</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>x10</name> <operator>=</operator> <operator>(</operator><name>x10</name> <operator>+</operator> <name><name>xkey</name><index>[<expr><name>x76</name> <operator>&amp;</operator> <literal type="number">63</literal></expr>]</index></name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFFFF</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>x32</name> <operator>=</operator> <operator>(</operator><name>x32</name> <operator>+</operator> <name><name>xkey</name><index>[<expr><name>x10</name> <operator>&amp;</operator> <literal type="number">63</literal></expr>]</index></name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFFFF</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>x54</name> <operator>=</operator> <operator>(</operator><name>x54</name> <operator>+</operator> <name><name>xkey</name><index>[<expr><name>x32</name> <operator>&amp;</operator> <literal type="number">63</literal></expr>]</index></name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFFFF</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>x76</name> <operator>=</operator> <operator>(</operator><name>x76</name> <operator>+</operator> <name><name>xkey</name><index>[<expr><name>x54</name> <operator>&amp;</operator> <literal type="number">63</literal></expr>]</index></name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFFFF</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>ct</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name>x10</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ct</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><name>x10</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ct</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name>x32</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ct</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><name>x32</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ct</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name>x54</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ct</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><name>x54</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ct</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name>x76</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ct</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><name>x76</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>

<return>return <expr><name>CRYPT_OK</name></expr>;</return>

</block_content>}</block></decl></decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_CLEAN_STACK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>int</name></type> <name>rc2_ecb_encrypt</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pt</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ct</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>symmetric_key</name> <modifier>*</modifier></type><name>skey</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><call><name>_rc2_ecb_encrypt</name><argument_list>(<argument><expr><name>pt</name></expr></argument>, <argument><expr><name>ct</name></expr></argument>, <argument><expr><name>skey</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>burn_stack</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>unsigned</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>unsigned</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_CLEAN_STACK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>_rc2_ecb_decrypt</name><argument_list>( <argument><expr><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><name>ct</name></expr></argument>,

<argument><expr><name>unsigned</name> <name>char</name> <operator>*</operator><name>pt</name></expr></argument>,

<argument><expr><specifier>const</specifier> <name>symmetric_key</name> <operator>*</operator><name>skey</name></expr></argument>)</argument_list>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<name>int</name> <name>rc2_ecb_decrypt</name><argument_list>( <argument><expr><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><name>ct</name></expr></argument>,

<argument><expr><name>unsigned</name> <name>char</name> <operator>*</operator><name>pt</name></expr></argument>,

<argument><expr><specifier>const</specifier> <name>symmetric_key</name> <operator>*</operator><name>skey</name></expr></argument>)</argument_list>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>x76</name></decl>, <decl><type ref="prev"/><name>x54</name></decl>, <decl><type ref="prev"/><name>x32</name></decl>, <decl><type ref="prev"/><name>x10</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <modifier>*</modifier></type><name>xkey</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>pt</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>ct</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>skey</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>xkey</name> <operator>=</operator> <name><name>skey</name><operator>-&gt;</operator><name>rc2</name><operator>.</operator><name>xkey</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>x76</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><name><name>ct</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name><name>ct</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>x54</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><name><name>ct</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name><name>ct</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>x32</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><name><name>ct</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name><name>ct</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>x10</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><name><name>ct</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name><name>ct</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">15</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">4</literal> <operator>||</operator> <name>i</name> <operator>==</operator> <literal type="number">10</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>x76</name> <operator>=</operator> <operator>(</operator><name>x76</name> <operator>-</operator> <name><name>xkey</name><index>[<expr><name>x54</name> <operator>&amp;</operator> <literal type="number">63</literal></expr>]</index></name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFFFF</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>x54</name> <operator>=</operator> <operator>(</operator><name>x54</name> <operator>-</operator> <name><name>xkey</name><index>[<expr><name>x32</name> <operator>&amp;</operator> <literal type="number">63</literal></expr>]</index></name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFFFF</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>x32</name> <operator>=</operator> <operator>(</operator><name>x32</name> <operator>-</operator> <name><name>xkey</name><index>[<expr><name>x10</name> <operator>&amp;</operator> <literal type="number">63</literal></expr>]</index></name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFFFF</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>x10</name> <operator>=</operator> <operator>(</operator><name>x10</name> <operator>-</operator> <name><name>xkey</name><index>[<expr><name>x76</name> <operator>&amp;</operator> <literal type="number">63</literal></expr>]</index></name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFFFF</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>x76</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>x76</name> <operator>&lt;&lt;</operator> <literal type="number">11</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>x76</name> <operator>&gt;&gt;</operator> <literal type="number">5</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>x76</name> <operator>=</operator> <operator>(</operator><name>x76</name> <operator>-</operator> <operator>(</operator><operator>(</operator><name>x10</name> <operator>&amp;</operator> <operator>~</operator><name>x54</name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>x32</name> <operator>&amp;</operator> <name>x54</name><operator>)</operator> <operator>+</operator> <name><name>xkey</name><index>[<expr><literal type="number">4</literal><operator>*</operator><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFFFF</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>x54</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>x54</name> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>x54</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>x54</name> <operator>=</operator> <operator>(</operator><name>x54</name> <operator>-</operator> <operator>(</operator><operator>(</operator><name>x76</name> <operator>&amp;</operator> <operator>~</operator><name>x32</name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>x10</name> <operator>&amp;</operator> <name>x32</name><operator>)</operator> <operator>+</operator> <name><name>xkey</name><index>[<expr><literal type="number">4</literal><operator>*</operator><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFFFF</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>x32</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>x32</name> <operator>&lt;&lt;</operator> <literal type="number">14</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>x32</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>x32</name> <operator>=</operator> <operator>(</operator><name>x32</name> <operator>-</operator> <operator>(</operator><operator>(</operator><name>x54</name> <operator>&amp;</operator> <operator>~</operator><name>x10</name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>x76</name> <operator>&amp;</operator> <name>x10</name><operator>)</operator> <operator>+</operator> <name><name>xkey</name><index>[<expr><literal type="number">4</literal><operator>*</operator><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFFFF</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>x10</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>x10</name> <operator>&lt;&lt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>x10</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>x10</name> <operator>=</operator> <operator>(</operator><name>x10</name> <operator>-</operator> <operator>(</operator><operator>(</operator><name>x32</name> <operator>&amp;</operator> <operator>~</operator><name>x76</name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>x54</name> <operator>&amp;</operator> <name>x76</name><operator>)</operator> <operator>+</operator> <name><name>xkey</name><index>[<expr><literal type="number">4</literal><operator>*</operator><name>i</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFFFF</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>pt</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name>x10</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pt</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><name>x10</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pt</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name>x32</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pt</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><name>x32</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pt</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name>x54</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pt</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><name>x54</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pt</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name>x76</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pt</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><name>x76</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>

<return>return <expr><name>CRYPT_OK</name></expr>;</return>

</block_content>}</block></decl></decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_CLEAN_STACK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>int</name></type> <name>rc2_ecb_decrypt</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ct</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pt</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>symmetric_key</name> <modifier>*</modifier></type><name>skey</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><call><name>_rc2_ecb_decrypt</name><argument_list>(<argument><expr><name>ct</name></expr></argument>, <argument><expr><name>pt</name></expr></argument>, <argument><expr><name>skey</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>burn_stack</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>unsigned</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>unsigned</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>int</name></type> <name>rc2_test</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LTC_TEST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><name>CRYPT_NOP</name></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<struct><specifier>static</specifier> <specifier>const</specifier> struct <block>{

<decl_stmt><decl><type><name>int</name></type> <name>keylen</name></decl>, <decl><type ref="prev"/><name>bits</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>key</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>pt</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>ct</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>

}</block> <decl><name><name>tests</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="number">8</literal></expr>, <expr><literal type="number">63</literal></expr>,

<expr><block>{ <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>,

<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0xeb</literal></expr>, <expr><literal type="number">0xb7</literal></expr>, <expr><literal type="number">0x73</literal></expr>, <expr><literal type="number">0xf9</literal></expr>, <expr><literal type="number">0x93</literal></expr>, <expr><literal type="number">0x27</literal></expr>, <expr><literal type="number">0x8e</literal></expr>, <expr><literal type="number">0xff</literal></expr> }</block></expr>

}</block></expr>,

<expr><block>{ <expr><literal type="number">8</literal></expr>, <expr><literal type="number">64</literal></expr>,

<expr><block>{ <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>,

<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0x27</literal></expr>, <expr><literal type="number">0x8b</literal></expr>, <expr><literal type="number">0x27</literal></expr>, <expr><literal type="number">0xe4</literal></expr>, <expr><literal type="number">0x2e</literal></expr>, <expr><literal type="number">0x2f</literal></expr>, <expr><literal type="number">0x0d</literal></expr>, <expr><literal type="number">0x49</literal></expr> }</block></expr>

}</block></expr>,

<expr><block>{ <expr><literal type="number">8</literal></expr>, <expr><literal type="number">64</literal></expr>,

<expr><block>{ <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>,

<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x64</literal></expr>, <expr><literal type="number">0x9e</literal></expr>, <expr><literal type="number">0xdf</literal></expr>, <expr><literal type="number">0x9b</literal></expr>, <expr><literal type="number">0xe7</literal></expr>, <expr><literal type="number">0xd2</literal></expr>, <expr><literal type="number">0xc2</literal></expr> }</block></expr>

}</block></expr>,

<expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">64</literal></expr>,

<expr><block>{ <expr><literal type="number">0x88</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>,

<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0x61</literal></expr>, <expr><literal type="number">0xa8</literal></expr>, <expr><literal type="number">0xa2</literal></expr>, <expr><literal type="number">0x44</literal></expr>, <expr><literal type="number">0xad</literal></expr>, <expr><literal type="number">0xac</literal></expr>, <expr><literal type="number">0xcc</literal></expr>, <expr><literal type="number">0xf0</literal></expr> }</block></expr>

}</block></expr>,

<expr><block>{ <expr><literal type="number">7</literal></expr>, <expr><literal type="number">64</literal></expr>,

<expr><block>{ <expr><literal type="number">0x88</literal></expr>, <expr><literal type="number">0xbc</literal></expr>, <expr><literal type="number">0xa9</literal></expr>, <expr><literal type="number">0x0e</literal></expr>, <expr><literal type="number">0x90</literal></expr>, <expr><literal type="number">0x87</literal></expr>, <expr><literal type="number">0x5a</literal></expr>, <expr><literal type="number">0x00</literal></expr>,

<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0x6c</literal></expr>, <expr><literal type="number">0xcf</literal></expr>, <expr><literal type="number">0x43</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x97</literal></expr>, <expr><literal type="number">0x4c</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x7f</literal></expr> }</block></expr>

}</block></expr>,

<expr><block>{ <expr><literal type="number">16</literal></expr>, <expr><literal type="number">64</literal></expr>,

<expr><block>{ <expr><literal type="number">0x88</literal></expr>, <expr><literal type="number">0xbc</literal></expr>, <expr><literal type="number">0xa9</literal></expr>, <expr><literal type="number">0x0e</literal></expr>, <expr><literal type="number">0x90</literal></expr>, <expr><literal type="number">0x87</literal></expr>, <expr><literal type="number">0x5a</literal></expr>, <expr><literal type="number">0x7f</literal></expr>,

<expr><literal type="number">0x0f</literal></expr>, <expr><literal type="number">0x79</literal></expr>, <expr><literal type="number">0xc3</literal></expr>, <expr><literal type="number">0x84</literal></expr>, <expr><literal type="number">0x62</literal></expr>, <expr><literal type="number">0x7b</literal></expr>, <expr><literal type="number">0xaf</literal></expr>, <expr><literal type="number">0xb2</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0x1a</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x7d</literal></expr>, <expr><literal type="number">0x27</literal></expr>, <expr><literal type="number">0x2b</literal></expr>, <expr><literal type="number">0xbe</literal></expr>, <expr><literal type="number">0x5d</literal></expr>, <expr><literal type="number">0xb1</literal></expr> }</block></expr>

}</block></expr>,

<expr><block>{ <expr><literal type="number">16</literal></expr>, <expr><literal type="number">128</literal></expr>,

<expr><block>{ <expr><literal type="number">0x88</literal></expr>, <expr><literal type="number">0xbc</literal></expr>, <expr><literal type="number">0xa9</literal></expr>, <expr><literal type="number">0x0e</literal></expr>, <expr><literal type="number">0x90</literal></expr>, <expr><literal type="number">0x87</literal></expr>, <expr><literal type="number">0x5a</literal></expr>, <expr><literal type="number">0x7f</literal></expr>,

<expr><literal type="number">0x0f</literal></expr>, <expr><literal type="number">0x79</literal></expr>, <expr><literal type="number">0xc3</literal></expr>, <expr><literal type="number">0x84</literal></expr>, <expr><literal type="number">0x62</literal></expr>, <expr><literal type="number">0x7b</literal></expr>, <expr><literal type="number">0xaf</literal></expr>, <expr><literal type="number">0xb2</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0x22</literal></expr>, <expr><literal type="number">0x69</literal></expr>, <expr><literal type="number">0x55</literal></expr>, <expr><literal type="number">0x2a</literal></expr>, <expr><literal type="number">0xb0</literal></expr>, <expr><literal type="number">0xf8</literal></expr>, <expr><literal type="number">0x5c</literal></expr>, <expr><literal type="number">0xa6</literal></expr> }</block></expr>

}</block></expr>

}</block></expr></init></decl>;</struct>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>err</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>symmetric_key</name></type> <name>skey</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>tmp</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>tests</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>tests</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>zeromem</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tests</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>bits</name> <operator>==</operator> <operator>(</operator><name><name>tests</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>keylen</name> <operator>*</operator> <literal type="number">8</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>rc2_setup</name><argument_list>(<argument><expr><name><name>tests</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>key</name></expr></argument>, <argument><expr><name><name>tests</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>keylen</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>skey</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>rc2_setup_ex</name><argument_list>(<argument><expr><name><name>tests</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>key</name></expr></argument>, <argument><expr><name><name>tests</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>keylen</name></expr></argument>, <argument><expr><name><name>tests</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>skey</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>rc2_ecb_encrypt</name><argument_list>(<argument><expr><name><name>tests</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>pt</name></expr></argument>, <argument><expr><name><name>tmp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>skey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rc2_ecb_decrypt</name><argument_list>(<argument><expr><name><name>tmp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>tmp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>skey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>compare_testvector</name><argument_list>(<argument><expr><name><name>tmp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name><name>tests</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>ct</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="string">"RC2 CT"</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> <operator>||</operator>

<call><name>compare_testvector</name><argument_list>(<argument><expr><name><name>tmp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name><name>tests</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>pt</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="string">"RC2 PT"</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>CRYPT_FAIL_TESTVECTOR</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>tmp</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>y</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">1000</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>rc2_ecb_encrypt</name><argument_list>(<argument><expr><name><name>tmp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>tmp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>skey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">1000</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>rc2_ecb_decrypt</name><argument_list>(<argument><expr><name><name>tmp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>tmp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>skey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <if_stmt><if>if <condition>(<expr><name><name>tmp</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>y</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>CRYPT_FAIL_TESTVECTOR</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

</block_content>}</block></for>

<return>return <expr><name>CRYPT_OK</name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>rc2_done</name><parameter_list>(<parameter><decl><type><name>symmetric_key</name> <modifier>*</modifier></type><name>skey</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LTC_UNUSED_PARAM</name><argument_list>(<argument><expr><name>skey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>rc2_keysize</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>keysize</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>keysize</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>keysize</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>CRYPT_INVALID_KEYSIZE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>keysize</name> <operator>&gt;</operator> <literal type="number">128</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>keysize</name> <operator>=</operator> <literal type="number">128</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>CRYPT_OK</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
