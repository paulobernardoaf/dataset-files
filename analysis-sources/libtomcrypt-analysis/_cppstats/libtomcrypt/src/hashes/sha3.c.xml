<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\libtomcrypt-analysis\_cppstats\libtomcrypt\src\hashes\sha3.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tomcrypt_private.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_SHA3</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ltc_hash_descriptor</name></name></type> <name>sha3_224_desc</name> <init>=

<expr><block>{

<expr><literal type="string">"sha3-224"</literal></expr>, 

<expr><literal type="number">17</literal></expr>, 

<expr><literal type="number">28</literal></expr>, 

<expr><literal type="number">144</literal></expr>, 

<expr><block>{ <expr><literal type="number">2</literal></expr>,<expr><literal type="number">16</literal></expr>,<expr><literal type="number">840</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">101</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">7</literal></expr> }</block></expr>, 

<expr><literal type="number">9</literal></expr>, 

<expr><operator>&amp;</operator><name>sha3_224_init</name></expr>,

<expr><operator>&amp;</operator><name>sha3_process</name></expr>,

<expr><operator>&amp;</operator><name>sha3_done</name></expr>,

<expr><operator>&amp;</operator><name>sha3_224_test</name></expr>,

<expr><name>NULL</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ltc_hash_descriptor</name></name></type> <name>sha3_256_desc</name> <init>=

<expr><block>{

<expr><literal type="string">"sha3-256"</literal></expr>, 

<expr><literal type="number">18</literal></expr>, 

<expr><literal type="number">32</literal></expr>, 

<expr><literal type="number">136</literal></expr>, 

<expr><block>{ <expr><literal type="number">2</literal></expr>,<expr><literal type="number">16</literal></expr>,<expr><literal type="number">840</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">101</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">8</literal></expr> }</block></expr>, 

<expr><literal type="number">9</literal></expr>, 

<expr><operator>&amp;</operator><name>sha3_256_init</name></expr>,

<expr><operator>&amp;</operator><name>sha3_process</name></expr>,

<expr><operator>&amp;</operator><name>sha3_done</name></expr>,

<expr><operator>&amp;</operator><name>sha3_256_test</name></expr>,

<expr><name>NULL</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ltc_hash_descriptor</name></name></type> <name>sha3_384_desc</name> <init>=

<expr><block>{

<expr><literal type="string">"sha3-384"</literal></expr>, 

<expr><literal type="number">19</literal></expr>, 

<expr><literal type="number">48</literal></expr>, 

<expr><literal type="number">104</literal></expr>, 

<expr><block>{ <expr><literal type="number">2</literal></expr>,<expr><literal type="number">16</literal></expr>,<expr><literal type="number">840</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">101</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">9</literal></expr> }</block></expr>, 

<expr><literal type="number">9</literal></expr>, 

<expr><operator>&amp;</operator><name>sha3_384_init</name></expr>,

<expr><operator>&amp;</operator><name>sha3_process</name></expr>,

<expr><operator>&amp;</operator><name>sha3_done</name></expr>,

<expr><operator>&amp;</operator><name>sha3_384_test</name></expr>,

<expr><name>NULL</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ltc_hash_descriptor</name></name></type> <name>sha3_512_desc</name> <init>=

<expr><block>{

<expr><literal type="string">"sha3-512"</literal></expr>, 

<expr><literal type="number">20</literal></expr>, 

<expr><literal type="number">64</literal></expr>, 

<expr><literal type="number">72</literal></expr>, 

<expr><block>{ <expr><literal type="number">2</literal></expr>,<expr><literal type="number">16</literal></expr>,<expr><literal type="number">840</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">101</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">10</literal></expr> }</block></expr>, 

<expr><literal type="number">9</literal></expr>, 

<expr><operator>&amp;</operator><name>sha3_512_init</name></expr>,

<expr><operator>&amp;</operator><name>sha3_process</name></expr>,

<expr><operator>&amp;</operator><name>sha3_done</name></expr>,

<expr><operator>&amp;</operator><name>sha3_512_test</name></expr>,

<expr><name>NULL</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_KECCAK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ltc_hash_descriptor</name></name></type> <name>keccak_224_desc</name> <init>=

<expr><block>{

<expr><literal type="string">"keccak224"</literal></expr>, 

<expr><literal type="number">29</literal></expr>, 

<expr><literal type="number">28</literal></expr>, 

<expr><literal type="number">144</literal></expr>, 

<expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, 

<expr><operator>&amp;</operator><name>sha3_224_init</name></expr>,

<expr><operator>&amp;</operator><name>sha3_process</name></expr>,

<expr><operator>&amp;</operator><name>keccak_done</name></expr>,

<expr><operator>&amp;</operator><name>keccak_224_test</name></expr>,

<expr><name>NULL</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ltc_hash_descriptor</name></name></type> <name>keccak_256_desc</name> <init>=

<expr><block>{

<expr><literal type="string">"keccak256"</literal></expr>, 

<expr><literal type="number">30</literal></expr>, 

<expr><literal type="number">32</literal></expr>, 

<expr><literal type="number">136</literal></expr>, 

<expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, 

<expr><operator>&amp;</operator><name>sha3_256_init</name></expr>,

<expr><operator>&amp;</operator><name>sha3_process</name></expr>,

<expr><operator>&amp;</operator><name>keccak_done</name></expr>,

<expr><operator>&amp;</operator><name>keccak_256_test</name></expr>,

<expr><name>NULL</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ltc_hash_descriptor</name></name></type> <name>keccak_384_desc</name> <init>=

<expr><block>{

<expr><literal type="string">"keccak384"</literal></expr>, 

<expr><literal type="number">31</literal></expr>, 

<expr><literal type="number">48</literal></expr>, 

<expr><literal type="number">104</literal></expr>, 

<expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, 

<expr><operator>&amp;</operator><name>sha3_384_init</name></expr>,

<expr><operator>&amp;</operator><name>sha3_process</name></expr>,

<expr><operator>&amp;</operator><name>keccak_done</name></expr>,

<expr><operator>&amp;</operator><name>keccak_384_test</name></expr>,

<expr><name>NULL</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ltc_hash_descriptor</name></name></type> <name>keccak_512_desc</name> <init>=

<expr><block>{

<expr><literal type="string">"keccak512"</literal></expr>, 

<expr><literal type="number">32</literal></expr>, 

<expr><literal type="number">64</literal></expr>, 

<expr><literal type="number">72</literal></expr>, 

<expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, 

<expr><operator>&amp;</operator><name>sha3_512_init</name></expr>,

<expr><operator>&amp;</operator><name>sha3_process</name></expr>,

<expr><operator>&amp;</operator><name>keccak_done</name></expr>,

<expr><operator>&amp;</operator><name>keccak_512_test</name></expr>,

<expr><name>NULL</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_SHA3</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>LTC_KECCAK</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHA3_KECCAK_SPONGE_WORDS</name></cpp:macro> <cpp:value>25</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHA3_KECCAK_ROUNDS</name></cpp:macro> <cpp:value>24</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>ulong64</name></type> <name><name>keccakf_rndc</name><index>[<expr><literal type="number">24</literal></expr>]</index></name> <init>= <expr><block>{

<expr><call><name>CONST64</name><argument_list>(<argument><expr><literal type="number">0x0000000000000001</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>CONST64</name><argument_list>(<argument><expr><literal type="number">0x0000000000008082</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>CONST64</name><argument_list>(<argument><expr><literal type="number">0x800000000000808a</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>CONST64</name><argument_list>(<argument><expr><literal type="number">0x8000000080008000</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>CONST64</name><argument_list>(<argument><expr><literal type="number">0x000000000000808b</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>CONST64</name><argument_list>(<argument><expr><literal type="number">0x0000000080000001</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>CONST64</name><argument_list>(<argument><expr><literal type="number">0x8000000080008081</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>CONST64</name><argument_list>(<argument><expr><literal type="number">0x8000000000008009</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>CONST64</name><argument_list>(<argument><expr><literal type="number">0x000000000000008a</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>CONST64</name><argument_list>(<argument><expr><literal type="number">0x0000000000000088</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>CONST64</name><argument_list>(<argument><expr><literal type="number">0x0000000080008009</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>CONST64</name><argument_list>(<argument><expr><literal type="number">0x000000008000000a</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>CONST64</name><argument_list>(<argument><expr><literal type="number">0x000000008000808b</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>CONST64</name><argument_list>(<argument><expr><literal type="number">0x800000000000008b</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>CONST64</name><argument_list>(<argument><expr><literal type="number">0x8000000000008089</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>CONST64</name><argument_list>(<argument><expr><literal type="number">0x8000000000008003</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>CONST64</name><argument_list>(<argument><expr><literal type="number">0x8000000000008002</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>CONST64</name><argument_list>(<argument><expr><literal type="number">0x8000000000000080</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>CONST64</name><argument_list>(<argument><expr><literal type="number">0x000000000000800a</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>CONST64</name><argument_list>(<argument><expr><literal type="number">0x800000008000000a</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>CONST64</name><argument_list>(<argument><expr><literal type="number">0x8000000080008081</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>CONST64</name><argument_list>(<argument><expr><literal type="number">0x8000000000008080</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>CONST64</name><argument_list>(<argument><expr><literal type="number">0x0000000080000001</literal></expr></argument>)</argument_list></call></expr>, <macro><name>CONST64</name><argument_list>(<argument><literal type="number">0x8000000080008008</literal></argument>)</argument_list></macro>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name></type> <name><name>keccakf_rotc</name><index>[<expr><literal type="number">24</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">36</literal></expr>, <expr><literal type="number">45</literal></expr>, <expr><literal type="number">55</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">41</literal></expr>, <expr><literal type="number">56</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><literal type="number">43</literal></expr>, <expr><literal type="number">62</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">39</literal></expr>, <expr><literal type="number">61</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">44</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name></type> <name><name>keccakf_piln</name><index>[<expr><literal type="number">24</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="number">10</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">23</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">1</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>keccakf</name><parameter_list>(<parameter><decl><type><name>ulong64</name></type> <name><name>s</name><index>[<expr><literal type="number">25</literal></expr>]</index></name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>round</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ulong64</name></type> <name>t</name></decl>, <decl><type ref="prev"/><name><name>bc</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>round</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>round</name> <operator>&lt;</operator> <name>SHA3_KECCAK_ROUNDS</name></expr>;</condition> <incr><expr><name>round</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">5</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>bc</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>^</operator> <name><name>s</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">5</literal></expr>]</index></name> <operator>^</operator> <name><name>s</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">10</literal></expr>]</index></name> <operator>^</operator> <name><name>s</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">15</literal></expr>]</index></name> <operator>^</operator> <name><name>s</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">20</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">5</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>t</name> <operator>=</operator> <name><name>bc</name><index>[<expr><operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator> <operator>%</operator> <literal type="number">5</literal></expr>]</index></name> <operator>^</operator> <call><name>ROL64</name><argument_list>(<argument><expr><name><name>bc</name><index>[<expr><operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">25</literal></expr>;</condition> <incr><expr><name>j</name> <operator>+=</operator> <literal type="number">5</literal></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><index>[<expr><name>j</name> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>^=</operator> <name>t</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><name>t</name> <operator>=</operator> <name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">24</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>j</name> <operator>=</operator> <name><name>keccakf_piln</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name><name>keccakf_rotc</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <name><name>bc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for<control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">25</literal></expr>;</condition> <incr><expr><name>j</name> <operator>+=</operator> <literal type="number">5</literal></expr></incr>)</control> <block>{<block_content>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">5</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>bc</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><index>[<expr><name>j</name> <operator>+</operator> <name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">5</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><index>[<expr><name>j</name> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>^=</operator> <operator>(</operator><operator>~</operator><name><name>bc</name><index>[<expr><operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <literal type="number">5</literal></expr>]</index></name><operator>)</operator> <operator>&amp;</operator> <name><name>bc</name><index>[<expr><operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>%</operator> <literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>^=</operator> <name><name>keccakf_rndc</name><index>[<expr><name>round</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>LTC_INLINE</name> <name>int</name></type> <name>_done</name><parameter_list>(<parameter><decl><type><name>hash_state</name> <modifier>*</modifier></type><name>md</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>hash</name></decl></parameter>, <parameter><decl><type><name>ulong64</name></type> <name>pad</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>md</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>hash</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>md</name><operator>-&gt;</operator><name>sha3</name><operator>.</operator><name>s</name><index>[<expr><name><name>md</name><operator>-&gt;</operator><name>sha3</name><operator>.</operator><name>word_index</name></name></expr>]</index></name> <operator>^=</operator> <operator>(</operator><name><name>md</name><operator>-&gt;</operator><name>sha3</name><operator>.</operator><name>saved</name></name> <operator>^</operator> <operator>(</operator><name>pad</name> <operator>&lt;&lt;</operator> <operator>(</operator><name><name>md</name><operator>-&gt;</operator><name>sha3</name><operator>.</operator><name>byte_index</name></name> <operator>*</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>md</name><operator>-&gt;</operator><name>sha3</name><operator>.</operator><name>s</name><index>[<expr><name>SHA3_KECCAK_SPONGE_WORDS</name> <operator>-</operator> <name><name>md</name><operator>-&gt;</operator><name>sha3</name><operator>.</operator><name>capacity_words</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>^=</operator> <call><name>CONST64</name><argument_list>(<argument><expr><literal type="number">0x8000000000000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>keccakf</name><argument_list>(<argument><expr><name><name>md</name><operator>-&gt;</operator><name>sha3</name><operator>.</operator><name>s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>SHA3_KECCAK_SPONGE_WORDS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>STORE64L</name><argument_list>(<argument><expr><name><name>md</name><operator>-&gt;</operator><name>sha3</name><operator>.</operator><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>md</name><operator>-&gt;</operator><name>sha3</name><operator>.</operator><name>sb</name></name> <operator>+</operator> <name>i</name> <operator>*</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>XMEMCPY</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><name><name>md</name><operator>-&gt;</operator><name>sha3</name><operator>.</operator><name>sb</name></name></expr></argument>, <argument><expr><name><name>md</name><operator>-&gt;</operator><name>sha3</name><operator>.</operator><name>capacity_words</name></name> <operator>*</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CRYPT_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>sha3_224_init</name><parameter_list>(<parameter><decl><type><name>hash_state</name> <modifier>*</modifier></type><name>md</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>md</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XMEMSET</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>md</name><operator>-&gt;</operator><name>sha3</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>md</name><operator>-&gt;</operator><name>sha3</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>md</name><operator>-&gt;</operator><name>sha3</name><operator>.</operator><name>capacity_words</name></name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <literal type="number">224</literal> <operator>/</operator> <operator>(</operator><literal type="number">8</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ulong64</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</expr_stmt>

<return>return <expr><name>CRYPT_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>sha3_256_init</name><parameter_list>(<parameter><decl><type><name>hash_state</name> <modifier>*</modifier></type><name>md</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>md</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XMEMSET</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>md</name><operator>-&gt;</operator><name>sha3</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>md</name><operator>-&gt;</operator><name>sha3</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>md</name><operator>-&gt;</operator><name>sha3</name><operator>.</operator><name>capacity_words</name></name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <literal type="number">256</literal> <operator>/</operator> <operator>(</operator><literal type="number">8</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ulong64</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</expr_stmt>

<return>return <expr><name>CRYPT_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>sha3_384_init</name><parameter_list>(<parameter><decl><type><name>hash_state</name> <modifier>*</modifier></type><name>md</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>md</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XMEMSET</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>md</name><operator>-&gt;</operator><name>sha3</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>md</name><operator>-&gt;</operator><name>sha3</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>md</name><operator>-&gt;</operator><name>sha3</name><operator>.</operator><name>capacity_words</name></name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <literal type="number">384</literal> <operator>/</operator> <operator>(</operator><literal type="number">8</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ulong64</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</expr_stmt>

<return>return <expr><name>CRYPT_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>sha3_512_init</name><parameter_list>(<parameter><decl><type><name>hash_state</name> <modifier>*</modifier></type><name>md</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>md</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XMEMSET</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>md</name><operator>-&gt;</operator><name>sha3</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>md</name><operator>-&gt;</operator><name>sha3</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>md</name><operator>-&gt;</operator><name>sha3</name><operator>.</operator><name>capacity_words</name></name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <literal type="number">512</literal> <operator>/</operator> <operator>(</operator><literal type="number">8</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ulong64</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</expr_stmt>

<return>return <expr><name>CRYPT_OK</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_SHA3</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>int</name></type> <name>sha3_shake_init</name><parameter_list>(<parameter><decl><type><name>hash_state</name> <modifier>*</modifier></type><name>md</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>md</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>num</name> <operator>!=</operator> <literal type="number">128</literal> <operator>&amp;&amp;</operator> <name>num</name> <operator>!=</operator> <literal type="number">256</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>CRYPT_INVALID_ARG</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>XMEMSET</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>md</name><operator>-&gt;</operator><name>sha3</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>md</name><operator>-&gt;</operator><name>sha3</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>md</name><operator>-&gt;</operator><name>sha3</name><operator>.</operator><name>capacity_words</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>short</name><operator>)</operator><operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>num</name> <operator>/</operator> <operator>(</operator><literal type="number">8</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ulong64</name></expr></argument>)</argument_list></sizeof><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<return>return <expr><name>CRYPT_OK</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>int</name></type> <name>sha3_process</name><parameter_list>(<parameter><decl><type><name>hash_state</name> <modifier>*</modifier></type><name>md</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>inlen</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>old_tail</name> <init>= <expr><operator>(</operator><literal type="number">8</literal> <operator>-</operator> <name><name>md</name><operator>-&gt;</operator><name>sha3</name><operator>.</operator><name>byte_index</name></name><operator>)</operator> <operator>&amp;</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>words</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>tail</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>inlen</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>CRYPT_OK</name></expr>;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>md</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>in</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>inlen</name> <operator>&lt;</operator> <name>old_tail</name></expr>)</condition> <block>{<block_content> 

<while>while <condition>(<expr><name>inlen</name><operator>--</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>md</name><operator>-&gt;</operator><name>sha3</name><operator>.</operator><name>saved</name></name> <operator>|=</operator> <operator>(</operator><name>ulong64</name><operator>)</operator> <operator>(</operator><operator>*</operator><operator>(</operator><name>in</name><operator>++</operator><operator>)</operator><operator>)</operator> <operator>&lt;&lt;</operator> <operator>(</operator><operator>(</operator><name><name>md</name><operator>-&gt;</operator><name>sha3</name><operator>.</operator><name>byte_index</name></name><operator>++</operator><operator>)</operator> <operator>*</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></while>

<return>return <expr><name>CRYPT_OK</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>old_tail</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>inlen</name> <operator>-=</operator> <name>old_tail</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>old_tail</name><operator>--</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>md</name><operator>-&gt;</operator><name>sha3</name><operator>.</operator><name>saved</name></name> <operator>|=</operator> <operator>(</operator><name>ulong64</name><operator>)</operator> <operator>(</operator><operator>*</operator><operator>(</operator><name>in</name><operator>++</operator><operator>)</operator><operator>)</operator> <operator>&lt;&lt;</operator> <operator>(</operator><operator>(</operator><name><name>md</name><operator>-&gt;</operator><name>sha3</name><operator>.</operator><name>byte_index</name></name><operator>++</operator><operator>)</operator> <operator>*</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name><name>md</name><operator>-&gt;</operator><name>sha3</name><operator>.</operator><name>s</name><index>[<expr><name><name>md</name><operator>-&gt;</operator><name>sha3</name><operator>.</operator><name>word_index</name></name></expr>]</index></name> <operator>^=</operator> <name><name>md</name><operator>-&gt;</operator><name>sha3</name><operator>.</operator><name>saved</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>md</name><operator>-&gt;</operator><name>sha3</name><operator>.</operator><name>byte_index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>md</name><operator>-&gt;</operator><name>sha3</name><operator>.</operator><name>saved</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>++</operator><name><name>md</name><operator>-&gt;</operator><name>sha3</name><operator>.</operator><name>word_index</name></name> <operator>==</operator> <operator>(</operator><name>SHA3_KECCAK_SPONGE_WORDS</name> <operator>-</operator> <name><name>md</name><operator>-&gt;</operator><name>sha3</name><operator>.</operator><name>capacity_words</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>keccakf</name><argument_list>(<argument><expr><name><name>md</name><operator>-&gt;</operator><name>sha3</name><operator>.</operator><name>s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>md</name><operator>-&gt;</operator><name>sha3</name><operator>.</operator><name>word_index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>words</name> <operator>=</operator> <name>inlen</name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ulong64</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name>tail</name> <operator>=</operator> <name>inlen</name> <operator>-</operator> <name>words</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ulong64</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>words</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>in</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ulong64</name></expr></argument>)</argument_list></sizeof></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>ulong64</name></type> <name>t</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LOAD64L</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>md</name><operator>-&gt;</operator><name>sha3</name><operator>.</operator><name>s</name><index>[<expr><name><name>md</name><operator>-&gt;</operator><name>sha3</name><operator>.</operator><name>word_index</name></name></expr>]</index></name> <operator>^=</operator> <name>t</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>++</operator><name><name>md</name><operator>-&gt;</operator><name>sha3</name><operator>.</operator><name>word_index</name></name> <operator>==</operator> <operator>(</operator><name>SHA3_KECCAK_SPONGE_WORDS</name> <operator>-</operator> <name><name>md</name><operator>-&gt;</operator><name>sha3</name><operator>.</operator><name>capacity_words</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>keccakf</name><argument_list>(<argument><expr><name><name>md</name><operator>-&gt;</operator><name>sha3</name><operator>.</operator><name>s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>md</name><operator>-&gt;</operator><name>sha3</name><operator>.</operator><name>word_index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<while>while <condition>(<expr><name>tail</name><operator>--</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>md</name><operator>-&gt;</operator><name>sha3</name><operator>.</operator><name>saved</name></name> <operator>|=</operator> <operator>(</operator><name>ulong64</name><operator>)</operator> <operator>(</operator><operator>*</operator><operator>(</operator><name>in</name><operator>++</operator><operator>)</operator><operator>)</operator> <operator>&lt;&lt;</operator> <operator>(</operator><operator>(</operator><name><name>md</name><operator>-&gt;</operator><name>sha3</name><operator>.</operator><name>byte_index</name></name><operator>++</operator><operator>)</operator> <operator>*</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>CRYPT_OK</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_SHA3</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>int</name></type> <name>sha3_done</name><parameter_list>(<parameter><decl><type><name>hash_state</name> <modifier>*</modifier></type><name>md</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>_done</name><argument_list>(<argument><expr><name>md</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><call><name>CONST64</name><argument_list>(<argument><expr><literal type="number">0x06</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_KECCAK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>int</name></type> <name>keccak_done</name><parameter_list>(<parameter><decl><type><name>hash_state</name> <modifier>*</modifier></type><name>md</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>_done</name><argument_list>(<argument><expr><name>md</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><call><name>CONST64</name><argument_list>(<argument><expr><literal type="number">0x01</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_SHA3</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>int</name></type> <name>sha3_shake_done</name><parameter_list>(<parameter><decl><type><name>hash_state</name> <modifier>*</modifier></type><name>md</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>outlen</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>idx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>outlen</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>CRYPT_OK</name></expr>;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>md</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>out</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>md</name><operator>-&gt;</operator><name>sha3</name><operator>.</operator><name>xof_flag</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>md</name><operator>-&gt;</operator><name>sha3</name><operator>.</operator><name>s</name><index>[<expr><name><name>md</name><operator>-&gt;</operator><name>sha3</name><operator>.</operator><name>word_index</name></name></expr>]</index></name> <operator>^=</operator> <operator>(</operator><name><name>md</name><operator>-&gt;</operator><name>sha3</name><operator>.</operator><name>saved</name></name> <operator>^</operator> <operator>(</operator><call><name>CONST64</name><argument_list>(<argument><expr><literal type="number">0x1F</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <operator>(</operator><name><name>md</name><operator>-&gt;</operator><name>sha3</name><operator>.</operator><name>byte_index</name></name> <operator>*</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>md</name><operator>-&gt;</operator><name>sha3</name><operator>.</operator><name>s</name><index>[<expr><name>SHA3_KECCAK_SPONGE_WORDS</name> <operator>-</operator> <name><name>md</name><operator>-&gt;</operator><name>sha3</name><operator>.</operator><name>capacity_words</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>^=</operator> <call><name>CONST64</name><argument_list>(<argument><expr><literal type="number">0x8000000000000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>keccakf</name><argument_list>(<argument><expr><name><name>md</name><operator>-&gt;</operator><name>sha3</name><operator>.</operator><name>s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>SHA3_KECCAK_SPONGE_WORDS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>STORE64L</name><argument_list>(<argument><expr><name><name>md</name><operator>-&gt;</operator><name>sha3</name><operator>.</operator><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>md</name><operator>-&gt;</operator><name>sha3</name><operator>.</operator><name>sb</name></name> <operator>+</operator> <name>i</name> <operator>*</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>md</name><operator>-&gt;</operator><name>sha3</name><operator>.</operator><name>byte_index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>md</name><operator>-&gt;</operator><name>sha3</name><operator>.</operator><name>xof_flag</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>idx</name> <operator>&lt;</operator> <name>outlen</name></expr>;</condition> <incr><expr><name>idx</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>md</name><operator>-&gt;</operator><name>sha3</name><operator>.</operator><name>byte_index</name></name> <operator>&gt;=</operator> <operator>(</operator><name>SHA3_KECCAK_SPONGE_WORDS</name> <operator>-</operator> <name><name>md</name><operator>-&gt;</operator><name>sha3</name><operator>.</operator><name>capacity_words</name></name><operator>)</operator> <operator>*</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>keccakf</name><argument_list>(<argument><expr><name><name>md</name><operator>-&gt;</operator><name>sha3</name><operator>.</operator><name>s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>SHA3_KECCAK_SPONGE_WORDS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>STORE64L</name><argument_list>(<argument><expr><name><name>md</name><operator>-&gt;</operator><name>sha3</name><operator>.</operator><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>md</name><operator>-&gt;</operator><name>sha3</name><operator>.</operator><name>sb</name></name> <operator>+</operator> <name>i</name> <operator>*</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>md</name><operator>-&gt;</operator><name>sha3</name><operator>.</operator><name>byte_index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>=</operator> <name><name>md</name><operator>-&gt;</operator><name>sha3</name><operator>.</operator><name>sb</name><index>[<expr><name><name>md</name><operator>-&gt;</operator><name>sha3</name><operator>.</operator><name>byte_index</name></name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>CRYPT_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>sha3_shake_memory</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>num</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>inlen</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>outlen</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>hash_state</name></type> <name>md</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>in</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>out</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>outlen</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>sha3_shake_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>md</name></expr></argument>, <argument><expr><name>num</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>sha3_shake_process</name><argument_list>(<argument><expr><operator>&amp;</operator><name>md</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>inlen</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>sha3_shake_done</name><argument_list>(<argument><expr><operator>&amp;</operator><name>md</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><operator>*</operator><name>outlen</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>CRYPT_OK</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
