<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\libtomcrypt-analysis\_cppstats\libtomcrypt\src\hashes\blake2s.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tomcrypt_private.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_BLAKE2S</name></expr></argument>)</argument_list></call></expr></cpp:if>
<enum>enum <name>blake2s_constant</name> <block>{

<decl><name>BLAKE2S_BLOCKBYTES</name> <init>= <expr><literal type="number">64</literal></expr></init></decl>,

<decl><name>BLAKE2S_OUTBYTES</name> <init>= <expr><literal type="number">32</literal></expr></init></decl>,

<decl><name>BLAKE2S_KEYBYTES</name> <init>= <expr><literal type="number">32</literal></expr></init></decl>,

<decl><name>BLAKE2S_SALTBYTES</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>,

<decl><name>BLAKE2S_PERSONALBYTES</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>,

<decl><name>BLAKE2S_PARAM_SIZE</name> <init>= <expr><literal type="number">32</literal></expr></init></decl>

}</block>;</enum>

<enum>enum <block>{

<decl><name>O_DIGEST_LENGTH</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>O_KEY_LENGTH</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,

<decl><name>O_FANOUT</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,

<decl><name>O_DEPTH</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,

<decl><name>O_LEAF_LENGTH</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,

<decl><name>O_NODE_OFFSET</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>,

<decl><name>O_XOF_LENGTH</name> <init>= <expr><literal type="number">12</literal></expr></init></decl>,

<decl><name>O_NODE_DEPTH</name> <init>= <expr><literal type="number">14</literal></expr></init></decl>,

<decl><name>O_INNER_LENGTH</name> <init>= <expr><literal type="number">15</literal></expr></init></decl>,

<decl><name>O_SALT</name> <init>= <expr><literal type="number">16</literal></expr></init></decl>,

<decl><name>O_PERSONAL</name> <init>= <expr><literal type="number">24</literal></expr></init></decl>

}</block>;</enum>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ltc_hash_descriptor</name></name></type> <name>blake2s_128_desc</name> <init>=

<expr><block>{

<expr><literal type="string">"blake2s-128"</literal></expr>,

<expr><literal type="number">21</literal></expr>,

<expr><literal type="number">16</literal></expr>,

<expr><literal type="number">64</literal></expr>,

<expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1722</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">4</literal></expr> }</block></expr>,

<expr><literal type="number">11</literal></expr>,

<expr><operator>&amp;</operator><name>blake2s_128_init</name></expr>,

<expr><operator>&amp;</operator><name>blake2s_process</name></expr>,

<expr><operator>&amp;</operator><name>blake2s_done</name></expr>,

<expr><operator>&amp;</operator><name>blake2s_128_test</name></expr>,

<expr><name>NULL</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ltc_hash_descriptor</name></name></type> <name>blake2s_160_desc</name> <init>=

<expr><block>{

<expr><literal type="string">"blake2s-160"</literal></expr>,

<expr><literal type="number">22</literal></expr>,

<expr><literal type="number">20</literal></expr>,

<expr><literal type="number">64</literal></expr>,

<expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1722</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">5</literal></expr> }</block></expr>,

<expr><literal type="number">11</literal></expr>,

<expr><operator>&amp;</operator><name>blake2s_160_init</name></expr>,

<expr><operator>&amp;</operator><name>blake2s_process</name></expr>,

<expr><operator>&amp;</operator><name>blake2s_done</name></expr>,

<expr><operator>&amp;</operator><name>blake2s_160_test</name></expr>,

<expr><name>NULL</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ltc_hash_descriptor</name></name></type> <name>blake2s_224_desc</name> <init>=

<expr><block>{

<expr><literal type="string">"blake2s-224"</literal></expr>,

<expr><literal type="number">23</literal></expr>,

<expr><literal type="number">28</literal></expr>,

<expr><literal type="number">64</literal></expr>,

<expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1722</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">7</literal></expr> }</block></expr>,

<expr><literal type="number">11</literal></expr>,

<expr><operator>&amp;</operator><name>blake2s_224_init</name></expr>,

<expr><operator>&amp;</operator><name>blake2s_process</name></expr>,

<expr><operator>&amp;</operator><name>blake2s_done</name></expr>,

<expr><operator>&amp;</operator><name>blake2s_224_test</name></expr>,

<expr><name>NULL</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ltc_hash_descriptor</name></name></type> <name>blake2s_256_desc</name> <init>=

<expr><block>{

<expr><literal type="string">"blake2s-256"</literal></expr>,

<expr><literal type="number">24</literal></expr>,

<expr><literal type="number">32</literal></expr>,

<expr><literal type="number">64</literal></expr>,

<expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1722</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">8</literal></expr> }</block></expr>,

<expr><literal type="number">11</literal></expr>,

<expr><operator>&amp;</operator><name>blake2s_256_init</name></expr>,

<expr><operator>&amp;</operator><name>blake2s_process</name></expr>,

<expr><operator>&amp;</operator><name>blake2s_done</name></expr>,

<expr><operator>&amp;</operator><name>blake2s_256_test</name></expr>,

<expr><name>NULL</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>ulong32</name></type> <name><name>blake2s_IV</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="number">0x6A09E667UL</literal></expr>, <expr><literal type="number">0xBB67AE85UL</literal></expr>, <expr><literal type="number">0x3C6EF372UL</literal></expr>, <expr><literal type="number">0xA54FF53AUL</literal></expr>,

<expr><literal type="number">0x510E527FUL</literal></expr>, <expr><literal type="number">0x9B05688CUL</literal></expr>, <expr><literal type="number">0x1F83D9ABUL</literal></expr>, <expr><literal type="number">0x5BE0CD19UL</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>blake2s_sigma</name><index>[<expr><literal type="number">10</literal></expr>]</index><index>[<expr><literal type="number">16</literal></expr>]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">15</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">14</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">11</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">4</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">7</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">8</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">9</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">13</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">9</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">12</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">11</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">13</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">10</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">6</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">5</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">10</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>blake2s_set_lastnode</name><parameter_list>(<parameter><decl><type><name>hash_state</name> <modifier>*</modifier></type><name>md</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name><name>md</name><operator>-&gt;</operator><name>blake2s</name><operator>.</operator><name>f</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xffffffffUL</literal></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>blake2s_is_lastblock</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>hash_state</name> <modifier>*</modifier></type><name>md</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name><name>md</name><operator>-&gt;</operator><name>blake2s</name><operator>.</operator><name>f</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>blake2s_set_lastblock</name><parameter_list>(<parameter><decl><type><name>hash_state</name> <modifier>*</modifier></type><name>md</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>md</name><operator>-&gt;</operator><name>blake2s</name><operator>.</operator><name>last_node</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>blake2s_set_lastnode</name><argument_list>(<argument><expr><name>md</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>md</name><operator>-&gt;</operator><name>blake2s</name><operator>.</operator><name>f</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xffffffffUL</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>blake2s_increment_counter</name><parameter_list>(<parameter><decl><type><name>hash_state</name> <modifier>*</modifier></type><name>md</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ulong32</name></type> <name>inc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>md</name><operator>-&gt;</operator><name>blake2s</name><operator>.</operator><name>t</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <name>inc</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>md</name><operator>-&gt;</operator><name>blake2s</name><operator>.</operator><name>t</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;</operator> <name>inc</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>md</name><operator>-&gt;</operator><name>blake2s</name><operator>.</operator><name>t</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>blake2s_init0</name><parameter_list>(<parameter><decl><type><name>hash_state</name> <modifier>*</modifier></type><name>md</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>XMEMSET</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>md</name><operator>-&gt;</operator><name>blake2s</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>blake2s_state</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>md</name><operator>-&gt;</operator><name>blake2s</name><operator>.</operator><name>h</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>blake2s_IV</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>CRYPT_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>blake2s_init_param</name><parameter_list>(<parameter><decl><type><name>hash_state</name> <modifier>*</modifier></type><name>md</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>P</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>blake2s_init0</name><argument_list>(<argument><expr><name>md</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>ulong32</name></type> <name>tmp</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LOAD32L</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>P</name> <operator>+</operator> <name>i</name> <operator>*</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>md</name><operator>-&gt;</operator><name>blake2s</name><operator>.</operator><name>h</name><index>[<expr><name>i</name></expr>]</index></name> <operator>^=</operator> <name>tmp</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>md</name><operator>-&gt;</operator><name>blake2s</name><operator>.</operator><name>outlen</name></name> <operator>=</operator> <name><name>P</name><index>[<expr><name>O_DIGEST_LENGTH</name></expr>]</index></name></expr>;</expr_stmt>

<return>return <expr><name>CRYPT_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>blake2s_init</name><parameter_list>(<parameter><decl><type><name>hash_state</name> <modifier>*</modifier></type><name>md</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>outlen</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>keylen</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>P</name><index>[<expr><name>BLAKE2S_PARAM_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>md</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><name>outlen</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>outlen</name> <operator>&gt;</operator> <name>BLAKE2S_OUTBYTES</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><name>CRYPT_INVALID_ARG</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>key</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>keylen</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>keylen</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>key</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>keylen</name> <operator>&gt;</operator> <name>BLAKE2S_KEYBYTES</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><name>CRYPT_INVALID_ARG</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>XMEMSET</name><argument_list>(<argument><expr><name>P</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>P</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>P</name><index>[<expr><name>O_DIGEST_LENGTH</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name>outlen</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>P</name><index>[<expr><name>O_KEY_LENGTH</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name>keylen</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>P</name><index>[<expr><name>O_FANOUT</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>P</name><index>[<expr><name>O_DEPTH</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>blake2s_init_param</name><argument_list>(<argument><expr><name>md</name></expr></argument>, <argument><expr><name>P</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>key</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>block</name><index>[<expr><name>BLAKE2S_BLOCKBYTES</name></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>XMEMSET</name><argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>BLAKE2S_BLOCKBYTES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XMEMCPY</name><argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>blake2s_process</name><argument_list>(<argument><expr><name>md</name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><name>BLAKE2S_BLOCKBYTES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_CLEAN_STACK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>zeromem</name><argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>CRYPT_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>blake2s_128_init</name><parameter_list>(<parameter><decl><type><name>hash_state</name> <modifier>*</modifier></type><name>md</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>blake2s_init</name><argument_list>(<argument><expr><name>md</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>int</name></type> <name>blake2s_160_init</name><parameter_list>(<parameter><decl><type><name>hash_state</name> <modifier>*</modifier></type><name>md</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>blake2s_init</name><argument_list>(<argument><expr><name>md</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>int</name></type> <name>blake2s_224_init</name><parameter_list>(<parameter><decl><type><name>hash_state</name> <modifier>*</modifier></type><name>md</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>blake2s_init</name><argument_list>(<argument><expr><name>md</name></expr></argument>, <argument><expr><literal type="number">28</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>int</name></type> <name>blake2s_256_init</name><parameter_list>(<parameter><decl><type><name>hash_state</name> <modifier>*</modifier></type><name>md</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>blake2s_init</name><argument_list>(<argument><expr><name>md</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>G</name><parameter_list>(<parameter><type><name>r</name></type></parameter>, <parameter><type><name>i</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>c</name></type></parameter>, <parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { a = a + b + m[blake2s_sigma[r][2 * i + 0]]; d = ROR(d ^ a, 16); c = c + d; b = ROR(b ^ c, 12); a = a + b + m[blake2s_sigma[r][2 * i + 1]]; d = ROR(d ^ a, 8); c = c + d; b = ROR(b ^ c, 7); } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ROUND</name><parameter_list>(<parameter><type><name>r</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { G(r, 0, v[0], v[4], v[8], v[12]); G(r, 1, v[1], v[5], v[9], v[13]); G(r, 2, v[2], v[6], v[10], v[14]); G(r, 3, v[3], v[7], v[11], v[15]); G(r, 4, v[0], v[5], v[10], v[15]); G(r, 5, v[1], v[6], v[11], v[12]); G(r, 6, v[2], v[7], v[8], v[13]); G(r, 7, v[3], v[4], v[9], v[14]); } while (0)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_CLEAN_STACK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>_blake2s_compress</name><argument_list>(<argument><expr><name>hash_state</name> <operator>*</operator><name>md</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><name>buf</name></expr></argument>)</argument_list>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

static <name>int</name> <name>blake2s_compress</name><argument_list>(<argument><expr><name>hash_state</name> <operator>*</operator><name>md</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><name>buf</name></expr></argument>)</argument_list>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ulong32</name></type> <name><name>m</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ulong32</name></type> <name><name>v</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>LOAD32L</name><argument_list>(<argument><expr><name><name>m</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <name>i</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>m</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>md</name><operator>-&gt;</operator><name>blake2s</name><operator>.</operator><name>h</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>v</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <name><name>blake2s_IV</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>=</operator> <name><name>blake2s_IV</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>=</operator> <name><name>blake2s_IV</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v</name><index>[<expr><literal type="number">11</literal></expr>]</index></name> <operator>=</operator> <name><name>blake2s_IV</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <operator>=</operator> <name><name>md</name><operator>-&gt;</operator><name>blake2s</name><operator>.</operator><name>t</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>^</operator> <name><name>blake2s_IV</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v</name><index>[<expr><literal type="number">13</literal></expr>]</index></name> <operator>=</operator> <name><name>md</name><operator>-&gt;</operator><name>blake2s</name><operator>.</operator><name>t</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>^</operator> <name><name>blake2s_IV</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v</name><index>[<expr><literal type="number">14</literal></expr>]</index></name> <operator>=</operator> <name><name>md</name><operator>-&gt;</operator><name>blake2s</name><operator>.</operator><name>f</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>^</operator> <name><name>blake2s_IV</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v</name><index>[<expr><literal type="number">15</literal></expr>]</index></name> <operator>=</operator> <name><name>md</name><operator>-&gt;</operator><name>blake2s</name><operator>.</operator><name>f</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>^</operator> <name><name>blake2s_IV</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ROUND</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ROUND</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ROUND</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ROUND</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ROUND</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ROUND</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ROUND</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ROUND</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ROUND</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ROUND</name><argument_list>(<argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>md</name><operator>-&gt;</operator><name>blake2s</name><operator>.</operator><name>h</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>md</name><operator>-&gt;</operator><name>blake2s</name><operator>.</operator><name>h</name><index>[<expr><name>i</name></expr>]</index></name> <operator>^</operator> <name><name>v</name><index>[<expr><name>i</name></expr>]</index></name> <operator>^</operator> <name><name>v</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">8</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>CRYPT_OK</name></expr>;</return>

</block_content>}</block></decl></decl_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>G</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ROUND</name></cpp:undef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_CLEAN_STACK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type> <name>blake2s_compress</name><parameter_list>(<parameter><decl><type><name>hash_state</name> <modifier>*</modifier></type><name>md</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>_blake2s_compress</name><argument_list>(<argument><expr><name>md</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>burn_stack</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ulong32</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><literal type="number">32</literal><operator>)</operator> <operator>+</operator> sizeof<operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>int</name></type> <name>blake2s_process</name><parameter_list>(<parameter><decl><type><name>hash_state</name> <modifier>*</modifier></type><name>md</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>inlen</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>md</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>in</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>md</name><operator>-&gt;</operator><name>blake2s</name><operator>.</operator><name>curlen</name></name> <operator>&gt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>md</name><operator>-&gt;</operator><name>blake2s</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>

<return>return <expr><name>CRYPT_INVALID_ARG</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>inlen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>left</name> <init>= <expr><name><name>md</name><operator>-&gt;</operator><name>blake2s</name><operator>.</operator><name>curlen</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>fill</name> <init>= <expr><name>BLAKE2S_BLOCKBYTES</name> <operator>-</operator> <name>left</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>inlen</name> <operator>&gt;</operator> <name>fill</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>md</name><operator>-&gt;</operator><name>blake2s</name><operator>.</operator><name>curlen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XMEMCPY</name><argument_list>(<argument><expr><name><name>md</name><operator>-&gt;</operator><name>blake2s</name><operator>.</operator><name>buf</name></name> <operator>+</operator> <operator>(</operator><name>left</name> <operator>%</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>md</name><operator>-&gt;</operator><name>blake2s</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>fill</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>blake2s_increment_counter</name><argument_list>(<argument><expr><name>md</name></expr></argument>, <argument><expr><name>BLAKE2S_BLOCKBYTES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>blake2s_compress</name><argument_list>(<argument><expr><name>md</name></expr></argument>, <argument><expr><name><name>md</name><operator>-&gt;</operator><name>blake2s</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>in</name> <operator>+=</operator> <name>fill</name></expr>;</expr_stmt>

<expr_stmt><expr><name>inlen</name> <operator>-=</operator> <name>fill</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>inlen</name> <operator>&gt;</operator> <name>BLAKE2S_BLOCKBYTES</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>blake2s_increment_counter</name><argument_list>(<argument><expr><name>md</name></expr></argument>, <argument><expr><name>BLAKE2S_BLOCKBYTES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>blake2s_compress</name><argument_list>(<argument><expr><name>md</name></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>in</name> <operator>+=</operator> <name>BLAKE2S_BLOCKBYTES</name></expr>;</expr_stmt>

<expr_stmt><expr><name>inlen</name> <operator>-=</operator> <name>BLAKE2S_BLOCKBYTES</name></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>XMEMCPY</name><argument_list>(<argument><expr><name><name>md</name><operator>-&gt;</operator><name>blake2s</name><operator>.</operator><name>buf</name></name> <operator>+</operator> <name><name>md</name><operator>-&gt;</operator><name>blake2s</name><operator>.</operator><name>curlen</name></name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>inlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>md</name><operator>-&gt;</operator><name>blake2s</name><operator>.</operator><name>curlen</name></name> <operator>+=</operator> <name>inlen</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>CRYPT_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>blake2s_done</name><parameter_list>(<parameter><decl><type><name>hash_state</name> <modifier>*</modifier></type><name>md</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buffer</name><index>[<expr><name>BLAKE2S_OUTBYTES</name></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>md</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>out</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>blake2s_is_lastblock</name><argument_list>(<argument><expr><name>md</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>CRYPT_ERROR</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>blake2s_increment_counter</name><argument_list>(<argument><expr><name>md</name></expr></argument>, <argument><expr><name><name>md</name><operator>-&gt;</operator><name>blake2s</name><operator>.</operator><name>curlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>blake2s_set_lastblock</name><argument_list>(<argument><expr><name>md</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XMEMSET</name><argument_list>(<argument><expr><name><name>md</name><operator>-&gt;</operator><name>blake2s</name><operator>.</operator><name>buf</name></name> <operator>+</operator> <name><name>md</name><operator>-&gt;</operator><name>blake2s</name><operator>.</operator><name>curlen</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>BLAKE2S_BLOCKBYTES</name> <operator>-</operator> <name><name>md</name><operator>-&gt;</operator><name>blake2s</name><operator>.</operator><name>curlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>blake2s_compress</name><argument_list>(<argument><expr><name>md</name></expr></argument>, <argument><expr><name><name>md</name><operator>-&gt;</operator><name>blake2s</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content> 

<expr_stmt><expr><call><name>STORE32L</name><argument_list>(<argument><expr><name><name>md</name><operator>-&gt;</operator><name>blake2s</name><operator>.</operator><name>h</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>buffer</name> <operator>+</operator> <name>i</name> <operator>*</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>XMEMCPY</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name><name>md</name><operator>-&gt;</operator><name>blake2s</name><operator>.</operator><name>outlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>zeromem</name><argument_list>(<argument><expr><name>md</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hash_state</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_CLEAN_STACK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>zeromem</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>CRYPT_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>blake2s_256_test</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LTC_TEST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><name>CRYPT_NOP</name></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<struct><specifier>static</specifier> <specifier>const</specifier> struct <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>hash</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>

}</block> <decl><name><name>tests</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">""</literal></expr>,

<expr><block>{ <expr><literal type="number">0x69</literal></expr>, <expr><literal type="number">0x21</literal></expr>, <expr><literal type="number">0x7a</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x79</literal></expr>, <expr><literal type="number">0x90</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x94</literal></expr>,

<expr><literal type="number">0xe1</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x21</literal></expr>, <expr><literal type="number">0xd0</literal></expr>, <expr><literal type="number">0x42</literal></expr>, <expr><literal type="number">0x35</literal></expr>, <expr><literal type="number">0x4a</literal></expr>, <expr><literal type="number">0x7c</literal></expr>,

<expr><literal type="number">0x1f</literal></expr>, <expr><literal type="number">0x55</literal></expr>, <expr><literal type="number">0xb6</literal></expr>, <expr><literal type="number">0x48</literal></expr>, <expr><literal type="number">0x2c</literal></expr>, <expr><literal type="number">0xa1</literal></expr>, <expr><literal type="number">0xa5</literal></expr>, <expr><literal type="number">0x1e</literal></expr>,

<expr><literal type="number">0x1b</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x0d</literal></expr>, <expr><literal type="number">0xfd</literal></expr>, <expr><literal type="number">0x1e</literal></expr>, <expr><literal type="number">0xd0</literal></expr>, <expr><literal type="number">0xee</literal></expr>, <expr><literal type="number">0xf9</literal></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"abc"</literal></expr>,

<expr><block>{ <expr><literal type="number">0x50</literal></expr>, <expr><literal type="number">0x8c</literal></expr>, <expr><literal type="number">0x5e</literal></expr>, <expr><literal type="number">0x8c</literal></expr>, <expr><literal type="number">0x32</literal></expr>, <expr><literal type="number">0x7c</literal></expr>, <expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0xe2</literal></expr>,

<expr><literal type="number">0xe1</literal></expr>, <expr><literal type="number">0xa7</literal></expr>, <expr><literal type="number">0x2b</literal></expr>, <expr><literal type="number">0xa3</literal></expr>, <expr><literal type="number">0x4e</literal></expr>, <expr><literal type="number">0xeb</literal></expr>, <expr><literal type="number">0x45</literal></expr>, <expr><literal type="number">0x2f</literal></expr>,

<expr><literal type="number">0x37</literal></expr>, <expr><literal type="number">0x45</literal></expr>, <expr><literal type="number">0x8b</literal></expr>, <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0x9e</literal></expr>, <expr><literal type="number">0xd6</literal></expr>, <expr><literal type="number">0x3a</literal></expr>, <expr><literal type="number">0x29</literal></expr>,

<expr><literal type="number">0x4d</literal></expr>, <expr><literal type="number">0x99</literal></expr>, <expr><literal type="number">0x9b</literal></expr>, <expr><literal type="number">0x4c</literal></expr>, <expr><literal type="number">0x86</literal></expr>, <expr><literal type="number">0x67</literal></expr>, <expr><literal type="number">0x59</literal></expr>, <expr><literal type="number">0x82</literal></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"12345678901234567890123456789012345678901234567890"</literal>

<literal type="string">"12345678901234567890123456789012345678901234567890"</literal>

<literal type="string">"12345678901234567890123456789012345678901234567890"</literal>

<literal type="string">"12345678901234567890123456789012345678901234567890"</literal>

<literal type="string">"12345678901234567890123456789012345678901234567890"</literal>

<literal type="string">"12345678901234567890123456789012345678901234567890"</literal></expr>,

<expr><block>{ <expr><literal type="number">0xa3</literal></expr>, <expr><literal type="number">0x78</literal></expr>, <expr><literal type="number">0x8b</literal></expr>, <expr><literal type="number">0x5b</literal></expr>, <expr><literal type="number">0x59</literal></expr>, <expr><literal type="number">0xee</literal></expr>, <expr><literal type="number">0xe4</literal></expr>, <expr><literal type="number">0x41</literal></expr>,

<expr><literal type="number">0x95</literal></expr>, <expr><literal type="number">0x23</literal></expr>, <expr><literal type="number">0x58</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xa4</literal></expr>, <expr><literal type="number">0xf9</literal></expr>, <expr><literal type="number">0xfa</literal></expr>, <expr><literal type="number">0x41</literal></expr>,

<expr><literal type="number">0x86</literal></expr>, <expr><literal type="number">0x0c</literal></expr>, <expr><literal type="number">0x7b</literal></expr>, <expr><literal type="number">0x1c</literal></expr>, <expr><literal type="number">0x35</literal></expr>, <expr><literal type="number">0xa2</literal></expr>, <expr><literal type="number">0x42</literal></expr>, <expr><literal type="number">0x70</literal></expr>,

<expr><literal type="number">0x50</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x79</literal></expr>, <expr><literal type="number">0x56</literal></expr>, <expr><literal type="number">0xe3</literal></expr>, <expr><literal type="number">0xbe</literal></expr>, <expr><literal type="number">0x31</literal></expr>, <expr><literal type="number">0x74</literal></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr>, <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr> }</block></expr>

}</block></expr></init></decl>;</struct>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>tmp</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>hash_state</name></type> <name>md</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>tests</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>msg</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>blake2s_256_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>md</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>blake2s_process</name><argument_list>(<argument><expr><operator>&amp;</operator><name>md</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>tests</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>msg</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><call><name>XSTRLEN</name><argument_list>(<argument><expr><name><name>tests</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>msg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>blake2s_done</name><argument_list>(<argument><expr><operator>&amp;</operator><name>md</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>compare_testvector</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>tests</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>hash</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>tests</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>hash</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"BLAKE2S_256"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>CRYPT_FAIL_TESTVECTOR</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>CRYPT_OK</name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>blake2s_224_test</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LTC_TEST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><name>CRYPT_NOP</name></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<struct><specifier>static</specifier> <specifier>const</specifier> struct <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>hash</name><index>[<expr><literal type="number">28</literal></expr>]</index></name></decl>;</decl_stmt>

}</block> <decl><name><name>tests</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">""</literal></expr>,

<expr><block>{ <expr><literal type="number">0x1f</literal></expr>, <expr><literal type="number">0xa1</literal></expr>, <expr><literal type="number">0x29</literal></expr>, <expr><literal type="number">0x1e</literal></expr>, <expr><literal type="number">0x65</literal></expr>, <expr><literal type="number">0x24</literal></expr>, <expr><literal type="number">0x8b</literal></expr>, <expr><literal type="number">0x37</literal></expr>,

<expr><literal type="number">0xb3</literal></expr>, <expr><literal type="number">0x43</literal></expr>, <expr><literal type="number">0x34</literal></expr>, <expr><literal type="number">0x75</literal></expr>, <expr><literal type="number">0xb2</literal></expr>, <expr><literal type="number">0xa0</literal></expr>, <expr><literal type="number">0xdd</literal></expr>, <expr><literal type="number">0x63</literal></expr>,

<expr><literal type="number">0xd5</literal></expr>, <expr><literal type="number">0x4a</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0xec</literal></expr>, <expr><literal type="number">0xc4</literal></expr>, <expr><literal type="number">0xe3</literal></expr>, <expr><literal type="number">0xe0</literal></expr>, <expr><literal type="number">0x34</literal></expr>,

<expr><literal type="number">0xe7</literal></expr>, <expr><literal type="number">0xbc</literal></expr>, <expr><literal type="number">0x1e</literal></expr>, <expr><literal type="number">0xf4</literal></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"abc"</literal></expr>,

<expr><block>{ <expr><literal type="number">0x0b</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x3f</literal></expr>, <expr><literal type="number">0xc2</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0xdf</literal></expr>, <expr><literal type="number">0x7a</literal></expr>, <expr><literal type="number">0xbd</literal></expr>,

<expr><literal type="number">0xe2</literal></expr>, <expr><literal type="number">0x9f</literal></expr>, <expr><literal type="number">0x67</literal></expr>, <expr><literal type="number">0xa0</literal></expr>, <expr><literal type="number">0x5d</literal></expr>, <expr><literal type="number">0x3d</literal></expr>, <expr><literal type="number">0xc6</literal></expr>, <expr><literal type="number">0x2c</literal></expr>,

<expr><literal type="number">0xf2</literal></expr>, <expr><literal type="number">0x71</literal></expr>, <expr><literal type="number">0xef</literal></expr>, <expr><literal type="number">0x3d</literal></expr>, <expr><literal type="number">0xfe</literal></expr>, <expr><literal type="number">0xa4</literal></expr>, <expr><literal type="number">0xd3</literal></expr>, <expr><literal type="number">0x87</literal></expr>,

<expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x7f</literal></expr>, <expr><literal type="number">0xbd</literal></expr>, <expr><literal type="number">0x55</literal></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr>, <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr> }</block></expr>

}</block></expr></init></decl>;</struct>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>tmp</name><index>[<expr><literal type="number">28</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>hash_state</name></type> <name>md</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>tests</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>msg</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>blake2s_224_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>md</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>blake2s_process</name><argument_list>(<argument><expr><operator>&amp;</operator><name>md</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>tests</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>msg</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><call><name>XSTRLEN</name><argument_list>(<argument><expr><name><name>tests</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>msg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>blake2s_done</name><argument_list>(<argument><expr><operator>&amp;</operator><name>md</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>compare_testvector</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>tests</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>hash</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>tests</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>hash</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"BLAKE2S_224"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>CRYPT_FAIL_TESTVECTOR</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>CRYPT_OK</name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>blake2s_160_test</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LTC_TEST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><name>CRYPT_NOP</name></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<struct><specifier>static</specifier> <specifier>const</specifier> struct <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>hash</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></decl>;</decl_stmt>

}</block> <decl><name><name>tests</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">""</literal></expr>,

<expr><block>{ <expr><literal type="number">0x35</literal></expr>, <expr><literal type="number">0x4c</literal></expr>, <expr><literal type="number">0x9c</literal></expr>, <expr><literal type="number">0x33</literal></expr>, <expr><literal type="number">0xf7</literal></expr>, <expr><literal type="number">0x35</literal></expr>, <expr><literal type="number">0x96</literal></expr>, <expr><literal type="number">0x24</literal></expr>,

<expr><literal type="number">0x18</literal></expr>, <expr><literal type="number">0xbd</literal></expr>, <expr><literal type="number">0xac</literal></expr>, <expr><literal type="number">0xb9</literal></expr>, <expr><literal type="number">0x47</literal></expr>, <expr><literal type="number">0x98</literal></expr>, <expr><literal type="number">0x73</literal></expr>, <expr><literal type="number">0x42</literal></expr>,

<expr><literal type="number">0x9c</literal></expr>, <expr><literal type="number">0x34</literal></expr>, <expr><literal type="number">0x91</literal></expr>, <expr><literal type="number">0x6f</literal></expr>}</block></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"abc"</literal></expr>,

<expr><block>{ <expr><literal type="number">0x5a</literal></expr>, <expr><literal type="number">0xe3</literal></expr>, <expr><literal type="number">0xb9</literal></expr>, <expr><literal type="number">0x9b</literal></expr>, <expr><literal type="number">0xe2</literal></expr>, <expr><literal type="number">0x9b</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x83</literal></expr>,

<expr><literal type="number">0x4c</literal></expr>, <expr><literal type="number">0x3b</literal></expr>, <expr><literal type="number">0x50</literal></expr>, <expr><literal type="number">0x85</literal></expr>, <expr><literal type="number">0x21</literal></expr>, <expr><literal type="number">0xed</literal></expr>, <expr><literal type="number">0xe6</literal></expr>, <expr><literal type="number">0x04</literal></expr>,

<expr><literal type="number">0x38</literal></expr>, <expr><literal type="number">0xf8</literal></expr>, <expr><literal type="number">0xde</literal></expr>, <expr><literal type="number">0x17</literal></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr>, <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr> }</block></expr>

}</block></expr></init></decl>;</struct>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>tmp</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>hash_state</name></type> <name>md</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>tests</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>msg</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>blake2s_160_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>md</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>blake2s_process</name><argument_list>(<argument><expr><operator>&amp;</operator><name>md</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>tests</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>msg</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><call><name>XSTRLEN</name><argument_list>(<argument><expr><name><name>tests</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>msg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>blake2s_done</name><argument_list>(<argument><expr><operator>&amp;</operator><name>md</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>compare_testvector</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>tests</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>hash</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>tests</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>hash</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"BLAKE2S_160"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>CRYPT_FAIL_TESTVECTOR</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>CRYPT_OK</name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>blake2s_128_test</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LTC_TEST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><name>CRYPT_NOP</name></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<struct><specifier>static</specifier> <specifier>const</specifier> struct <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>hash</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

}</block> <decl><name><name>tests</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">""</literal></expr>,

<expr><block>{ <expr><literal type="number">0x64</literal></expr>, <expr><literal type="number">0x55</literal></expr>, <expr><literal type="number">0x0d</literal></expr>, <expr><literal type="number">0x6f</literal></expr>, <expr><literal type="number">0xfe</literal></expr>, <expr><literal type="number">0x2c</literal></expr>, <expr><literal type="number">0x0a</literal></expr>, <expr><literal type="number">0x01</literal></expr>,

<expr><literal type="number">0xa1</literal></expr>, <expr><literal type="number">0x4a</literal></expr>, <expr><literal type="number">0xba</literal></expr>, <expr><literal type="number">0x1e</literal></expr>, <expr><literal type="number">0xad</literal></expr>, <expr><literal type="number">0xe0</literal></expr>, <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0x0c</literal></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"abc"</literal></expr>,

<expr><block>{ <expr><literal type="number">0xaa</literal></expr>, <expr><literal type="number">0x49</literal></expr>, <expr><literal type="number">0x38</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x9b</literal></expr>, <expr><literal type="number">0x1d</literal></expr>, <expr><literal type="number">0xc7</literal></expr>, <expr><literal type="number">0xb8</literal></expr>,

<expr><literal type="number">0x7c</literal></expr>, <expr><literal type="number">0xba</literal></expr>, <expr><literal type="number">0xd0</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xd2</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xd0</literal></expr>, <expr><literal type="number">0xae</literal></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr>, <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr> }</block></expr>

}</block></expr></init></decl>;</struct>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>tmp</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>hash_state</name></type> <name>md</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>tests</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>msg</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>blake2s_128_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>md</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>blake2s_process</name><argument_list>(<argument><expr><operator>&amp;</operator><name>md</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>tests</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>msg</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><call><name>XSTRLEN</name><argument_list>(<argument><expr><name><name>tests</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>msg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>blake2s_done</name><argument_list>(<argument><expr><operator>&amp;</operator><name>md</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>compare_testvector</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>tests</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>hash</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>tests</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>hash</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"BLAKE2S_128"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>CRYPT_FAIL_TESTVECTOR</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>CRYPT_OK</name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
