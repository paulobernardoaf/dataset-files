<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\libtomcrypt-analysis\_cppstats\libtomcrypt\src\hashes\sha2\sha512_256.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tomcrypt_private.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_SHA512_256</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>LTC_SHA512</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ltc_hash_descriptor</name></name></type> <name>sha512_256_desc</name> <init>=

<expr><block>{

<expr><literal type="string">"sha512-256"</literal></expr>,

<expr><literal type="number">16</literal></expr>,

<expr><literal type="number">32</literal></expr>,

<expr><literal type="number">128</literal></expr>,

<expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">840</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">101</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">6</literal></expr>, }</block></expr>,

<expr><literal type="number">9</literal></expr>,

<expr><operator>&amp;</operator><name>sha512_256_init</name></expr>,

<expr><operator>&amp;</operator><name>sha512_process</name></expr>,

<expr><operator>&amp;</operator><name>sha512_256_done</name></expr>,

<expr><operator>&amp;</operator><name>sha512_256_test</name></expr>,

<expr><name>NULL</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>sha512_256_init</name><parameter_list>(<parameter><decl><type><name>hash_state</name> <modifier>*</modifier></type> <name>md</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>md</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>md</name><operator>-&gt;</operator><name>sha512</name><operator>.</operator><name>curlen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>md</name><operator>-&gt;</operator><name>sha512</name><operator>.</operator><name>length</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>md</name><operator>-&gt;</operator><name>sha512</name><operator>.</operator><name>state</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>CONST64</name><argument_list>(<argument><expr><literal type="number">0x22312194FC2BF72C</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>md</name><operator>-&gt;</operator><name>sha512</name><operator>.</operator><name>state</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>CONST64</name><argument_list>(<argument><expr><literal type="number">0x9F555FA3C84C64C2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>md</name><operator>-&gt;</operator><name>sha512</name><operator>.</operator><name>state</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>CONST64</name><argument_list>(<argument><expr><literal type="number">0x2393B86B6F53B151</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>md</name><operator>-&gt;</operator><name>sha512</name><operator>.</operator><name>state</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>CONST64</name><argument_list>(<argument><expr><literal type="number">0x963877195940EABD</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>md</name><operator>-&gt;</operator><name>sha512</name><operator>.</operator><name>state</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <call><name>CONST64</name><argument_list>(<argument><expr><literal type="number">0x96283EE2A88EFFE3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>md</name><operator>-&gt;</operator><name>sha512</name><operator>.</operator><name>state</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <call><name>CONST64</name><argument_list>(<argument><expr><literal type="number">0xBE5E1E2553863992</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>md</name><operator>-&gt;</operator><name>sha512</name><operator>.</operator><name>state</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <call><name>CONST64</name><argument_list>(<argument><expr><literal type="number">0x2B0199FC2C85B8AA</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>md</name><operator>-&gt;</operator><name>sha512</name><operator>.</operator><name>state</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <call><name>CONST64</name><argument_list>(<argument><expr><literal type="number">0x0EB72DDC81C52CA2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CRYPT_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>sha512_256_done</name><parameter_list>(<parameter><decl><type><name>hash_state</name> <modifier>*</modifier></type> <name>md</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>md</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>out</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>md</name><operator>-&gt;</operator><name>sha512</name><operator>.</operator><name>curlen</name></name> <operator>&gt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>md</name><operator>-&gt;</operator><name>sha512</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>

<return>return <expr><name>CRYPT_INVALID_ARG</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>sha512_done</name><argument_list>(<argument><expr><name>md</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XMEMCPY</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_CLEAN_STACK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>zeromem</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>CRYPT_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>sha512_256_test</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LTC_TEST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><name>CRYPT_NOP</name></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<struct><specifier>static</specifier> <specifier>const</specifier> struct <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>hash</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>

}</block> <decl><name><name>tests</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"abc"</literal></expr>,

<expr><block>{ <expr><literal type="number">0x53</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x8E</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x81</literal></expr>, <expr><literal type="number">0x94</literal></expr>, <expr><literal type="number">0x1E</literal></expr>, <expr><literal type="number">0xF9</literal></expr>,

<expr><literal type="number">0x9B</literal></expr>, <expr><literal type="number">0x2E</literal></expr>, <expr><literal type="number">0x29</literal></expr>, <expr><literal type="number">0xB7</literal></expr>, <expr><literal type="number">0x6B</literal></expr>, <expr><literal type="number">0x4C</literal></expr>, <expr><literal type="number">0x7D</literal></expr>, <expr><literal type="number">0xAB</literal></expr>,

<expr><literal type="number">0xE4</literal></expr>, <expr><literal type="number">0xC2</literal></expr>, <expr><literal type="number">0xD0</literal></expr>, <expr><literal type="number">0xC6</literal></expr>, <expr><literal type="number">0x34</literal></expr>, <expr><literal type="number">0xFC</literal></expr>, <expr><literal type="number">0x6D</literal></expr>, <expr><literal type="number">0x46</literal></expr>,

<expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xE2</literal></expr>, <expr><literal type="number">0xF1</literal></expr>, <expr><literal type="number">0x31</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0xE7</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x23</literal></expr> }</block></expr>

}</block></expr>,

<expr><block>{ <expr><literal type="string">"abcdefghbcdefghicdefghijdefghijkefghijklfghijklmghijklmnhijklmnoijklmnopjklmnopqklmnopqrlmnopqrsmnopqrstnopqrstu"</literal></expr>,

<expr><block>{ <expr><literal type="number">0x39</literal></expr>, <expr><literal type="number">0x28</literal></expr>, <expr><literal type="number">0xE1</literal></expr>, <expr><literal type="number">0x84</literal></expr>, <expr><literal type="number">0xFB</literal></expr>, <expr><literal type="number">0x86</literal></expr>, <expr><literal type="number">0x90</literal></expr>, <expr><literal type="number">0xF8</literal></expr>,

<expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0xDA</literal></expr>, <expr><literal type="number">0x39</literal></expr>, <expr><literal type="number">0x88</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0x1D</literal></expr>, <expr><literal type="number">0x31</literal></expr>, <expr><literal type="number">0xBE</literal></expr>,

<expr><literal type="number">0x65</literal></expr>, <expr><literal type="number">0xCB</literal></expr>, <expr><literal type="number">0x9D</literal></expr>, <expr><literal type="number">0x3E</literal></expr>, <expr><literal type="number">0xF8</literal></expr>, <expr><literal type="number">0x3E</literal></expr>, <expr><literal type="number">0xE6</literal></expr>, <expr><literal type="number">0x14</literal></expr>,

<expr><literal type="number">0x6F</literal></expr>, <expr><literal type="number">0xEA</literal></expr>, <expr><literal type="number">0xC8</literal></expr>, <expr><literal type="number">0x61</literal></expr>, <expr><literal type="number">0xE1</literal></expr>, <expr><literal type="number">0x9B</literal></expr>, <expr><literal type="number">0x56</literal></expr>, <expr><literal type="number">0x3A</literal></expr> }</block></expr>

}</block></expr>,

}</block></expr></init></decl>;</struct>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>tmp</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>hash_state</name></type> <name>md</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>tests</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>tests</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>sha512_256_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>md</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sha512_256_process</name><argument_list>(<argument><expr><operator>&amp;</operator><name>md</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name><name>tests</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>msg</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><call><name>XSTRLEN</name><argument_list>(<argument><expr><name><name>tests</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>msg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sha512_256_done</name><argument_list>(<argument><expr><operator>&amp;</operator><name>md</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>compare_testvector</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>tests</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>hash</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>tests</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>hash</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"SHA512-265"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>CRYPT_FAIL_TESTVECTOR</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>CRYPT_OK</name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</unit>
