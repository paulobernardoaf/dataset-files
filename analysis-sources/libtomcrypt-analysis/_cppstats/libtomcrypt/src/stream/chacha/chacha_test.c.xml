<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\libtomcrypt-analysis\_cppstats\libtomcrypt\src\stream\chacha\chacha_test.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tomcrypt_private.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_CHACHA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>int</name></type> <name>chacha_test</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LTC_TEST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><name>CRYPT_NOP</name></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>out</name><index>[<expr><literal type="number">1000</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>k</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x0a</literal></expr>, <expr><literal type="number">0x0b</literal></expr>, <expr><literal type="number">0x0c</literal></expr>, <expr><literal type="number">0x0d</literal></expr>, <expr><literal type="number">0x0e</literal></expr>, <expr><literal type="number">0x0f</literal></expr>,

<expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0x13</literal></expr>, <expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0x15</literal></expr>, <expr><literal type="number">0x16</literal></expr>, <expr><literal type="number">0x17</literal></expr>, <expr><literal type="number">0x18</literal></expr>, <expr><literal type="number">0x19</literal></expr>, <expr><literal type="number">0x1a</literal></expr>, <expr><literal type="number">0x1b</literal></expr>, <expr><literal type="number">0x1c</literal></expr>, <expr><literal type="number">0x1d</literal></expr>, <expr><literal type="number">0x1e</literal></expr>, <expr><literal type="number">0x1f</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>n</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x4a</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>ct</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0x6E</literal></expr>, <expr><literal type="number">0x2E</literal></expr>, <expr><literal type="number">0x35</literal></expr>, <expr><literal type="number">0x9A</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x68</literal></expr>, <expr><literal type="number">0xF9</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x41</literal></expr>, <expr><literal type="number">0xBA</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0x28</literal></expr>, <expr><literal type="number">0xDD</literal></expr>, <expr><literal type="number">0x0D</literal></expr>, <expr><literal type="number">0x69</literal></expr>, <expr><literal type="number">0x81</literal></expr>,

<expr><literal type="number">0xE9</literal></expr>, <expr><literal type="number">0x7E</literal></expr>, <expr><literal type="number">0x7A</literal></expr>, <expr><literal type="number">0xEC</literal></expr>, <expr><literal type="number">0x1D</literal></expr>, <expr><literal type="number">0x43</literal></expr>, <expr><literal type="number">0x60</literal></expr>, <expr><literal type="number">0xC2</literal></expr>, <expr><literal type="number">0x0A</literal></expr>, <expr><literal type="number">0x27</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0xCC</literal></expr>, <expr><literal type="number">0xFD</literal></expr>, <expr><literal type="number">0x9F</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0x0B</literal></expr>,

<expr><literal type="number">0xF9</literal></expr>, <expr><literal type="number">0x1B</literal></expr>, <expr><literal type="number">0x65</literal></expr>, <expr><literal type="number">0xC5</literal></expr>, <expr><literal type="number">0x52</literal></expr>, <expr><literal type="number">0x47</literal></expr>, <expr><literal type="number">0x33</literal></expr>, <expr><literal type="number">0xAB</literal></expr>, <expr><literal type="number">0x8F</literal></expr>, <expr><literal type="number">0x59</literal></expr>, <expr><literal type="number">0x3D</literal></expr>, <expr><literal type="number">0xAB</literal></expr>, <expr><literal type="number">0xCD</literal></expr>, <expr><literal type="number">0x62</literal></expr>, <expr><literal type="number">0xB3</literal></expr>, <expr><literal type="number">0x57</literal></expr>,

<expr><literal type="number">0x16</literal></expr>, <expr><literal type="number">0x39</literal></expr>, <expr><literal type="number">0xD6</literal></expr>, <expr><literal type="number">0x24</literal></expr>, <expr><literal type="number">0xE6</literal></expr>, <expr><literal type="number">0x51</literal></expr>, <expr><literal type="number">0x52</literal></expr>, <expr><literal type="number">0xAB</literal></expr>, <expr><literal type="number">0x8F</literal></expr>, <expr><literal type="number">0x53</literal></expr>, <expr><literal type="number">0x0C</literal></expr>, <expr><literal type="number">0x35</literal></expr>, <expr><literal type="number">0x9F</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x61</literal></expr>, <expr><literal type="number">0xD8</literal></expr>,

<expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0xCA</literal></expr>, <expr><literal type="number">0x0D</literal></expr>, <expr><literal type="number">0xBF</literal></expr>, <expr><literal type="number">0x50</literal></expr>, <expr><literal type="number">0x0D</literal></expr>, <expr><literal type="number">0x6A</literal></expr>, <expr><literal type="number">0x61</literal></expr>, <expr><literal type="number">0x56</literal></expr>, <expr><literal type="number">0xA3</literal></expr>, <expr><literal type="number">0x8E</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x8A</literal></expr>, <expr><literal type="number">0x22</literal></expr>, <expr><literal type="number">0xB6</literal></expr>, <expr><literal type="number">0x5E</literal></expr>,

<expr><literal type="number">0x52</literal></expr>, <expr><literal type="number">0xBC</literal></expr>, <expr><literal type="number">0x51</literal></expr>, <expr><literal type="number">0x4D</literal></expr>, <expr><literal type="number">0x16</literal></expr>, <expr><literal type="number">0xCC</literal></expr>, <expr><literal type="number">0xF8</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x81</literal></expr>, <expr><literal type="number">0x8C</literal></expr>, <expr><literal type="number">0xE9</literal></expr>, <expr><literal type="number">0x1A</literal></expr>, <expr><literal type="number">0xB7</literal></expr>, <expr><literal type="number">0x79</literal></expr>, <expr><literal type="number">0x37</literal></expr>, <expr><literal type="number">0x36</literal></expr>,

<expr><literal type="number">0x5A</literal></expr>, <expr><literal type="number">0xF9</literal></expr>, <expr><literal type="number">0x0B</literal></expr>, <expr><literal type="number">0xBF</literal></expr>, <expr><literal type="number">0x74</literal></expr>, <expr><literal type="number">0xA3</literal></expr>, <expr><literal type="number">0x5B</literal></expr>, <expr><literal type="number">0xE6</literal></expr>, <expr><literal type="number">0xB4</literal></expr>, <expr><literal type="number">0x0B</literal></expr>, <expr><literal type="number">0x8E</literal></expr>, <expr><literal type="number">0xED</literal></expr>, <expr><literal type="number">0xF2</literal></expr>, <expr><literal type="number">0x78</literal></expr>, <expr><literal type="number">0x5E</literal></expr>, <expr><literal type="number">0x42</literal></expr>,

<expr><literal type="number">0x87</literal></expr>, <expr><literal type="number">0x4D</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>pt</name><index>[]</index></name> <init>= <expr><literal type="string">"Ladies and Gentlemen of the class of '99: If I could offer you only one tip for the future, sunscreen would be it."</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>chacha_state</name></type> <name>st</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>XSTRLEN</name><argument_list>(<argument><expr><name>pt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>chacha_setup</name><argument_list>(<argument><expr><operator>&amp;</operator><name>st</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>chacha_ivctr32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>st</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>chacha_crypt</name><argument_list>(<argument><expr><operator>&amp;</operator><name>st</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>pt</name></expr></argument>, <argument><expr><literal type="number">35</literal></expr></argument>, <argument><expr><name>out</name></expr></argument> )</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>chacha_crypt</name><argument_list>(<argument><expr><operator>&amp;</operator><name>st</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>pt</name> <operator>+</operator> <literal type="number">35</literal></expr></argument>, <argument><expr><literal type="number">35</literal></expr></argument>, <argument><expr><name>out</name> <operator>+</operator> <literal type="number">35</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>chacha_crypt</name><argument_list>(<argument><expr><operator>&amp;</operator><name>st</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>pt</name> <operator>+</operator> <literal type="number">70</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>out</name> <operator>+</operator> <literal type="number">70</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>chacha_crypt</name><argument_list>(<argument><expr><operator>&amp;</operator><name>st</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>pt</name> <operator>+</operator> <literal type="number">75</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>out</name> <operator>+</operator> <literal type="number">75</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>chacha_crypt</name><argument_list>(<argument><expr><operator>&amp;</operator><name>st</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>pt</name> <operator>+</operator> <literal type="number">80</literal></expr></argument>, <argument><expr><name>len</name> <operator>-</operator> <literal type="number">80</literal></expr></argument>, <argument><expr><name>out</name> <operator>+</operator> <literal type="number">80</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>compare_testvector</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>ct</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ct</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"CHACHA-TV1"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>CRYPT_FAIL_TESTVECTOR</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>chacha_setup</name><argument_list>(<argument><expr><operator>&amp;</operator><name>st</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>chacha_ivctr32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>st</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>chacha_crypt</name><argument_list>(<argument><expr><operator>&amp;</operator><name>st</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>pt</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>compare_testvector</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>ct</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ct</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"CHACHA-TV2"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>CRYPT_FAIL_TESTVECTOR</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>chacha_setup</name><argument_list>(<argument><expr><operator>&amp;</operator><name>st</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>chacha_ivctr64</name><argument_list>(<argument><expr><operator>&amp;</operator><name>st</name></expr></argument>, <argument><expr><name>n</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>chacha_crypt</name><argument_list>(<argument><expr><operator>&amp;</operator><name>st</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>pt</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>compare_testvector</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>ct</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ct</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"CHACHA-TV3"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>CRYPT_FAIL_TESTVECTOR</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>chacha_memory</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>,

<argument><expr><name>n</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>pt</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>compare_testvector</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>ct</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ct</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"CHACHA-TV4"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>CRYPT_FAIL_TESTVECTOR</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>chacha_memory</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>,

<argument><expr><name>n</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>pt</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>compare_testvector</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>ct</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ct</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"CHACHA-TV5"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>CRYPT_FAIL_TESTVECTOR</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>CRYPT_OK</name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
