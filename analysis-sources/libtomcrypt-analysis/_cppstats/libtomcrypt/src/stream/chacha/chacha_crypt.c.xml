<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\libtomcrypt-analysis\_cppstats\libtomcrypt\src\stream\chacha\chacha_crypt.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tomcrypt_private.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_CHACHA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QUARTERROUND</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>x[a] += x[b]; x[d] = ROL(x[d] ^ x[a], 16); x[c] += x[d]; x[b] = ROL(x[b] ^ x[c], 12); x[a] += x[b]; x[d] = ROL(x[d] ^ x[a], 8); x[c] += x[d]; x[b] = ROL(x[b] ^ x[c], 7);</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_chacha_block</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ulong32</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rounds</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ulong32</name></type> <name><name>x</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>XMEMCPY</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>rounds</name></expr>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name> <operator>-=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>

<macro><name>QUARTERROUND</name><argument_list>(<argument><literal type="number">0</literal></argument>, <argument><literal type="number">4</literal></argument>, <argument><literal type="number">8</literal></argument>,<argument><literal type="number">12</literal></argument>)</argument_list></macro>

<macro><name>QUARTERROUND</name><argument_list>(<argument><literal type="number">1</literal></argument>, <argument><literal type="number">5</literal></argument>, <argument><literal type="number">9</literal></argument>,<argument><literal type="number">13</literal></argument>)</argument_list></macro>

<macro><name>QUARTERROUND</name><argument_list>(<argument><literal type="number">2</literal></argument>, <argument><literal type="number">6</literal></argument>,<argument><literal type="number">10</literal></argument>,<argument><literal type="number">14</literal></argument>)</argument_list></macro>

<macro><name>QUARTERROUND</name><argument_list>(<argument><literal type="number">3</literal></argument>, <argument><literal type="number">7</literal></argument>,<argument><literal type="number">11</literal></argument>,<argument><literal type="number">15</literal></argument>)</argument_list></macro>

<macro><name>QUARTERROUND</name><argument_list>(<argument><literal type="number">0</literal></argument>, <argument><literal type="number">5</literal></argument>,<argument><literal type="number">10</literal></argument>,<argument><literal type="number">15</literal></argument>)</argument_list></macro>

<macro><name>QUARTERROUND</name><argument_list>(<argument><literal type="number">1</literal></argument>, <argument><literal type="number">6</literal></argument>,<argument><literal type="number">11</literal></argument>,<argument><literal type="number">12</literal></argument>)</argument_list></macro>

<macro><name>QUARTERROUND</name><argument_list>(<argument><literal type="number">2</literal></argument>, <argument><literal type="number">7</literal></argument>, <argument><literal type="number">8</literal></argument>,<argument><literal type="number">13</literal></argument>)</argument_list></macro>

<macro><name>QUARTERROUND</name><argument_list>(<argument><literal type="number">3</literal></argument>, <argument><literal type="number">4</literal></argument>, <argument><literal type="number">9</literal></argument>,<argument><literal type="number">14</literal></argument>)</argument_list></macro>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>x</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <name><name>input</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STORE32L</name><argument_list>(<argument><expr><name><name>x</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>output</name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>chacha_crypt</name><parameter_list>(<parameter><decl><type><name>chacha_state</name> <modifier>*</modifier></type><name>st</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>inlen</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>inlen</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>CRYPT_OK</name></expr>;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>st</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>in</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>out</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>ivlen</name></name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>ksleft</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>j</name> <operator>=</operator> <call><name>MIN</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>ksleft</name></name></expr></argument>, <argument><expr><name>inlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>j</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr><operator>,</operator> <expr><name><name>st</name><operator>-&gt;</operator><name>ksleft</name></name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>out</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>in</name><index>[<expr><name>i</name></expr>]</index></name> <operator>^</operator> <name><name>st</name><operator>-&gt;</operator><name>kstream</name><index>[<expr><literal type="number">64</literal> <operator>-</operator> <name><name>st</name><operator>-&gt;</operator><name>ksleft</name></name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>inlen</name> <operator>-=</operator> <name>j</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>inlen</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>CRYPT_OK</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>out</name> <operator>+=</operator> <name>j</name></expr>;</expr_stmt>

<expr_stmt><expr><name>in</name> <operator>+=</operator> <name>j</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>_chacha_block</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>input</name></name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>rounds</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>ivlen</name></name> <operator>==</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <operator>++</operator><name><name>st</name><operator>-&gt;</operator><name>input</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <literal type="number">0</literal> <operator>==</operator> <operator>++</operator><name><name>st</name><operator>-&gt;</operator><name>input</name><index>[<expr><literal type="number">13</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>CRYPT_OVERFLOW</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <operator>++</operator><name><name>st</name><operator>-&gt;</operator><name>input</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>CRYPT_OVERFLOW</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>inlen</name> <operator>&lt;=</operator> <literal type="number">64</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>inlen</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>out</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>in</name><index>[<expr><name>i</name></expr>]</index></name> <operator>^</operator> <name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>ksleft</name></name> <operator>=</operator> <literal type="number">64</literal> <operator>-</operator> <name>inlen</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>inlen</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>kstream</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<return>return <expr><name>CRYPT_OK</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>out</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>in</name><index>[<expr><name>i</name></expr>]</index></name> <operator>^</operator> <name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>inlen</name> <operator>-=</operator> <literal type="number">64</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>out</name> <operator>+=</operator> <literal type="number">64</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>in</name> <operator>+=</operator> <literal type="number">64</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
