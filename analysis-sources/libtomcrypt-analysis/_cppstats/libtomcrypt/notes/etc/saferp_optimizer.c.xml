<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\libtomcrypt-analysis\_cppstats\libtomcrypt\notes\etc\saferp_optimizer.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHUFb2</name></cpp:macro><cpp:value>[0] = b[8]; b2[1] = b[11]; b2[2] = b[12]; b2[3] = b[15]; b2[4] = b[2]; b2[5] = b[1]; b2[6] = b[6]; b2[7] = b[5]; b2[8] = b[10]; b2[9] = b[9]; b2[10] = b[14]; b2[11] = b[13]; b2[12] = b[0]; b2[13] = b[7]; b2[14] = b[4]; b2[15] = b[3]; memcpy(b, b2, sizeof(b));</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>iSHUF</name><parameter_list>(<parameter><type><name>b</name></type></parameter>, <parameter><type><name>b2</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>b2[0] = b[12]; b2[1] = b[5]; b2[2] = b[4]; b2[3] = b[15]; b2[4] = b[14]; b2[5] = b[7]; b2[6] = b[6]; b2[7] = b[13]; b2[8] = b[0]; b2[9] = b[9]; b2[10] = b[8]; b2[11] = b[1]; b2[12] = b[2]; b2[13] = b[11]; b2[14] = b[10]; b2[15] = b[3]; memcpy(b, b2, sizeof(b));</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ROUND</name><parameter_list>(<parameter><type><name>b</name></type></parameter>, <parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>b[0] = (safer_ebox[(b[0] ^ skey-&gt;saferp.K[i][0]) &amp; 255] + skey-&gt;saferp.K[i+1][0]) &amp; 255; b[1] = safer_lbox[(b[1] + skey-&gt;saferp.K[i][1]) &amp; 255] ^ skey-&gt;saferp.K[i+1][1]; b[2] = safer_lbox[(b[2] + skey-&gt;saferp.K[i][2]) &amp; 255] ^ skey-&gt;saferp.K[i+1][2]; b[3] = (safer_ebox[(b[3] ^ skey-&gt;saferp.K[i][3]) &amp; 255] + skey-&gt;saferp.K[i+1][3]) &amp; 255; b[4] = (safer_ebox[(b[4] ^ skey-&gt;saferp.K[i][4]) &amp; 255] + skey-&gt;saferp.K[i+1][4]) &amp; 255; b[5] = safer_lbox[(b[5] + skey-&gt;saferp.K[i][5]) &amp; 255] ^ skey-&gt;saferp.K[i+1][5]; b[6] = safer_lbox[(b[6] + skey-&gt;saferp.K[i][6]) &amp; 255] ^ skey-&gt;saferp.K[i+1][6]; b[7] = (safer_ebox[(b[7] ^ skey-&gt;saferp.K[i][7]) &amp; 255] + skey-&gt;saferp.K[i+1][7]) &amp; 255; b[8] = (safer_ebox[(b[8] ^ skey-&gt;saferp.K[i][8]) &amp; 255] + skey-&gt;saferp.K[i+1][8]) &amp; 255; b[9] = safer_lbox[(b[9] + skey-&gt;saferp.K[i][9]) &amp; 255] ^ skey-&gt;saferp.K[i+1][9]; b[10] = safer_lbox[(b[10] + skey-&gt;saferp.K[i][10]) &amp; 255] ^ skey-&gt;saferp.K[i+1][10]; b[11] = (safer_ebox[(b[11] ^ skey-&gt;saferp.K[i][11]) &amp; 255] + skey-&gt;saferp.K[i+1][11]) &amp; 255; b[12] = (safer_ebox[(b[12] ^ skey-&gt;saferp.K[i][12]) &amp; 255] + skey-&gt;saferp.K[i+1][12]) &amp; 255; b[13] = safer_lbox[(b[13] + skey-&gt;saferp.K[i][13]) &amp; 255] ^ skey-&gt;saferp.K[i+1][13]; b[14] = safer_lbox[(b[14] + skey-&gt;saferp.K[i][14]) &amp; 255] ^ skey-&gt;saferp.K[i+1][14]; b[15] = (safer_ebox[(b[15] ^ skey-&gt;saferp.K[i][15]) &amp; 255] + skey-&gt;saferp.K[i+1][15]) &amp; 255;</cpp:value></cpp:define>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name><name>b</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>b2</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>z</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>b</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>printf</name><argument_list>(

<argument><expr><literal type="string">"void saferp_ecb_encrypt(const unsigned char *pt, unsigned char *ct, symmetric_key *skey)\n"</literal>

<literal type="string">"{\n"</literal>

<literal type="string">" int x;\n"</literal>

<literal type="string">" unsigned char b[16];\n"</literal>

<literal type="string">"\n"</literal>

<literal type="string">" LTC_ARGCHK(pt != NULL);\n"</literal>

<literal type="string">" LTC_ARGCHK(ct != NULL);\n"</literal>

<literal type="string">" LTC_ARGCHK(skey != NULL);\n"</literal>

<literal type="string">"\n"</literal>

<literal type="string">" /* do eight rounds */\n"</literal>

<literal type="string">" for (x = 0; x &lt; 16; x++) {\n"</literal>

<literal type="string">" b[x] = pt[x];\n"</literal>

<literal type="string">" }\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"b[%d] = (safer_%cbox[(b[%d] %c skey-&gt;saferp.K[%d][%d]) &amp; 255] %c skey-&gt;saferp.K[%d][%d]) &amp; 255;\n"</literal></expr></argument>,

<argument><expr><name><name>b</name><index>[<expr><name>y</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"elle"</literal><index>[<expr><name>y</name><operator>&amp;</operator><literal type="number">3</literal></expr>]</index></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><name>y</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"^++^"</literal><index>[<expr><name>y</name><operator>&amp;</operator><literal type="number">3</literal></expr>]</index></expr></argument>, <argument><expr><name>x</name><operator>*</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><literal type="string">"+^^+"</literal><index>[<expr><name>y</name><operator>&amp;</operator><literal type="number">3</literal></expr>]</index></expr></argument>, <argument><expr><name>x</name><operator>*</operator><literal type="number">2</literal><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" b[%d] = (b[%d] + (b[%d] = (b[%d] + b[%d]) &amp; 255)) &amp; 255;\n"</literal></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" b[%d] = (b[%d] + (b[%d] = (b[%d] + b[%d]) &amp; 255)) &amp; 255;\n"</literal></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" b[%d] = (b[%d] + (b[%d] = (b[%d] + b[%d]) &amp; 255)) &amp; 255;\n"</literal></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" b[%d] = (b[%d] + (b[%d] = (b[%d] + b[%d]) &amp; 255)) &amp; 255;\n"</literal></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" b[%d] = (b[%d] + (b[%d] = (b[%d] + b[%d]) &amp; 255)) &amp; 255;\n"</literal></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" b[%d] = (b[%d] + (b[%d] = (b[%d] + b[%d]) &amp; 255)) &amp; 255;\n"</literal></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" b[%d] = (b[%d] + (b[%d] = (b[%d] + b[%d]) &amp; 255)) &amp; 255;\n"</literal></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">13</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">13</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" b[%d] = (b[%d] + (b[%d] = (b[%d] + b[%d]) &amp; 255)) &amp; 255;\n"</literal></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">14</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">14</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">15</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">15</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">14</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>y</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>SHUF</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt> 

</block_content>}</block></for> 

</block_content>}</block></for>

<expr_stmt><expr><call><name>printf</name><argument_list>(

<argument><expr><literal type="string">" if (skey-&gt;saferp.rounds &lt;= 8) {\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(

<argument><expr><literal type="string">" ct[%d] = (b[%d] %c skey-&gt;saferp.K[skey-&gt;saferp.rounds*2][%d]) &amp; 255;\n"</literal></expr></argument>,

<argument><expr><name>x</name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"^++^"</literal><index>[<expr><name>x</name><operator>&amp;</operator><literal type="number">3</literal></expr>]</index></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for> 

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" return;\n }\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>( 

<argument><expr><literal type="string">" /* 192-bit key? */\n"</literal>

<literal type="string">" if (skey-&gt;saferp.rounds &gt; 8) {\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">8</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">12</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"b[%d] = (safer_%cbox[(b[%d] %c skey-&gt;saferp.K[%d][%d]) &amp; 255] %c skey-&gt;saferp.K[%d][%d]) &amp; 255;\n"</literal></expr></argument>,

<argument><expr><name><name>b</name><index>[<expr><name>y</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"elle"</literal><index>[<expr><name>y</name><operator>&amp;</operator><literal type="number">3</literal></expr>]</index></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><name>y</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"^++^"</literal><index>[<expr><name>y</name><operator>&amp;</operator><literal type="number">3</literal></expr>]</index></expr></argument>, <argument><expr><name>x</name><operator>*</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><literal type="string">"+^^+"</literal><index>[<expr><name>y</name><operator>&amp;</operator><literal type="number">3</literal></expr>]</index></expr></argument>, <argument><expr><name>x</name><operator>*</operator><literal type="number">2</literal><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" b[%d] = (b[%d] + (b[%d] = (b[%d] + b[%d]) &amp; 255)) &amp; 255;\n"</literal></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" b[%d] = (b[%d] + (b[%d] = (b[%d] + b[%d]) &amp; 255)) &amp; 255;\n"</literal></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" b[%d] = (b[%d] + (b[%d] = (b[%d] + b[%d]) &amp; 255)) &amp; 255;\n"</literal></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" b[%d] = (b[%d] + (b[%d] = (b[%d] + b[%d]) &amp; 255)) &amp; 255;\n"</literal></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" b[%d] = (b[%d] + (b[%d] = (b[%d] + b[%d]) &amp; 255)) &amp; 255;\n"</literal></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" b[%d] = (b[%d] + (b[%d] = (b[%d] + b[%d]) &amp; 255)) &amp; 255;\n"</literal></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" b[%d] = (b[%d] + (b[%d] = (b[%d] + b[%d]) &amp; 255)) &amp; 255;\n"</literal></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">13</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">13</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" b[%d] = (b[%d] + (b[%d] = (b[%d] + b[%d]) &amp; 255)) &amp; 255;\n"</literal></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">14</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">14</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">15</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">15</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">14</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>y</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>SHUF</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt> 

</block_content>}</block></for> 

</block_content>}</block></for>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"}\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(

<argument><expr><literal type="string">" if (skey-&gt;saferp.rounds &lt;= 12) {\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(

<argument><expr><literal type="string">" ct[%d] = (b[%d] %c skey-&gt;saferp.K[skey-&gt;saferp.rounds*2][%d]) &amp; 255;\n"</literal></expr></argument>,

<argument><expr><name>x</name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"^++^"</literal><index>[<expr><name>x</name><operator>&amp;</operator><literal type="number">3</literal></expr>]</index></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for> 

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" return;\n }\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>( 

<argument><expr><literal type="string">" /* 256-bit key? */\n"</literal>

<literal type="string">" if (skey-&gt;saferp.rounds &gt; 12) {\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">12</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"b[%d] = (safer_%cbox[(b[%d] %c skey-&gt;saferp.K[%d][%d]) &amp; 255] %c skey-&gt;saferp.K[%d][%d]) &amp; 255;\n"</literal></expr></argument>,

<argument><expr><name><name>b</name><index>[<expr><name>y</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"elle"</literal><index>[<expr><name>y</name><operator>&amp;</operator><literal type="number">3</literal></expr>]</index></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><name>y</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"^++^"</literal><index>[<expr><name>y</name><operator>&amp;</operator><literal type="number">3</literal></expr>]</index></expr></argument>, <argument><expr><name>x</name><operator>*</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><literal type="string">"+^^+"</literal><index>[<expr><name>y</name><operator>&amp;</operator><literal type="number">3</literal></expr>]</index></expr></argument>, <argument><expr><name>x</name><operator>*</operator><literal type="number">2</literal><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" b[%d] = (b[%d] + (b[%d] = (b[%d] + b[%d]) &amp; 255)) &amp; 255;\n"</literal></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" b[%d] = (b[%d] + (b[%d] = (b[%d] + b[%d]) &amp; 255)) &amp; 255;\n"</literal></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" b[%d] = (b[%d] + (b[%d] = (b[%d] + b[%d]) &amp; 255)) &amp; 255;\n"</literal></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" b[%d] = (b[%d] + (b[%d] = (b[%d] + b[%d]) &amp; 255)) &amp; 255;\n"</literal></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" b[%d] = (b[%d] + (b[%d] = (b[%d] + b[%d]) &amp; 255)) &amp; 255;\n"</literal></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" b[%d] = (b[%d] + (b[%d] = (b[%d] + b[%d]) &amp; 255)) &amp; 255;\n"</literal></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" b[%d] = (b[%d] + (b[%d] = (b[%d] + b[%d]) &amp; 255)) &amp; 255;\n"</literal></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">13</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">13</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" b[%d] = (b[%d] + (b[%d] = (b[%d] + b[%d]) &amp; 255)) &amp; 255;\n"</literal></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">14</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">14</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">15</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">15</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">14</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>y</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>SHUF</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt> 

</block_content>}</block></for> 

</block_content>}</block></for>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(

<argument><expr><literal type="string">" ct[%d] = (b[%d] %c skey-&gt;saferp.K[skey-&gt;saferp.rounds*2][%d]) &amp; 255;\n"</literal></expr></argument>,

<argument><expr><name>x</name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"^++^"</literal><index>[<expr><name>x</name><operator>&amp;</operator><literal type="number">3</literal></expr>]</index></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for> 

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" return;\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" }\n}\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

</unit>
