<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\libtomcrypt-analysis\_cppstats\libtomcrypt\tests\prng_test.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;tomcrypt_test.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_PRNG_ENABLE_LTC_RNG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>long</name></type> <name>my_test_rng_read</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>unsigned</name> <name>long</name></type> <name>my_test_rng</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>len</name></decl></parameter>,

<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>callback</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>n</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LTC_UNUSED_PARAM</name><argument_list>(<argument><expr><name>callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><operator>++</operator><name>n</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>buf</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>my_test_rng_read</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>

<return>return <expr><name>n</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>int</name></type> <name>prng_test</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><name>CRYPT_NOP</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">4096</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>one</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>prng_state</name></type> <name>nprng</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_PRNG_ENABLE_LTC_RNG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>before</name></decl>;</decl_stmt>

<function_decl><type><name>unsigned</name> <name>long</name></type> (<modifier>*</modifier><name>previous</name>)<parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>long</name></decl></parameter> , <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list> <init>= <expr><name>ltc_rng</name></expr></init>;</function_decl>

<expr_stmt><expr><name>ltc_rng</name> <operator>=</operator> <name>my_test_rng</name></expr>;</expr_stmt>

<expr_stmt><expr><name>before</name> <operator>=</operator> <name>my_test_rng_read</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>rng_make_prng</name><argument_list>(<argument><expr><literal type="number">128</literal></expr></argument>, <argument><expr><call><name>find_prng</name><argument_list>(<argument><expr><literal type="string">"yarrow"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>nprng</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"rng_make_prng with 'my_test_rng' failed: %s\n"</literal></expr></argument>, <argument><expr><call><name>error_to_string</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>yarrow_done</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nprng</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>before</name> <operator>==</operator> <name>my_test_rng_read</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"somehow there was no read from the ltc_rng! %lu == %lu\n"</literal></expr></argument>, <argument><expr><name>before</name></expr></argument>, <argument><expr><name>my_test_rng_read</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ltc_rng</name> <operator>=</operator> <name>previous</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>prng_descriptor</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>name</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>strstr</name><argument_list>(<argument><expr><name><name>prng_descriptor</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><literal type="string">"no_prng"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name><name>prng_descriptor</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>name</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>DOX</name><argument_list>(<argument><expr><name><name>prng_descriptor</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>test</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>prng_descriptor</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DOX</name><argument_list>(<argument><expr><name><name>prng_descriptor</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>start</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nprng</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>prng_descriptor</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DOX</name><argument_list>(<argument><expr><name><name>prng_descriptor</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>add_entropy</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><literal type="string">"helloworld12"</literal></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>nprng</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>prng_descriptor</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DOX</name><argument_list>(<argument><expr><name><name>prng_descriptor</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>ready</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nprng</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>prng_descriptor</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>prng_descriptor</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><literal type="string">"sprng"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>one</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>prng_descriptor</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>pexport</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>one</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nprng</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>CRYPT_BUFFER_OVERFLOW</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Error testing pexport with a short buffer (%s)\n"</literal></expr></argument>, <argument><expr><name><name>prng_descriptor</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CRYPT_ERROR</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>DOX</name><argument_list>(<argument><expr><name><name>prng_descriptor</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>pexport</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nprng</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>prng_descriptor</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>prng_descriptor</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>done</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nprng</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DOX</name><argument_list>(<argument><expr><name><name>prng_descriptor</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>pimport</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nprng</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>prng_descriptor</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DOX</name><argument_list>(<argument><expr><name><name>prng_descriptor</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>pimport</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>nprng</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>prng_descriptor</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>DOX</name><argument_list>(<argument><expr><name><name>prng_descriptor</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>ready</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nprng</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>prng_descriptor</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>prng_descriptor</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>read</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>nprng</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">100</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Error reading from imported PRNG (%s)!\n"</literal></expr></argument>, <argument><expr><name><name>prng_descriptor</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CRYPT_ERROR</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>prng_descriptor</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>done</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nprng</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>rng_make_prng</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>find_prng</name><argument_list>(<argument><expr><literal type="string">"yarrow"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>nprng</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"rng_make_prng(-1,..) with 'yarrow' failed: %s\n"</literal></expr></argument>, <argument><expr><call><name>error_to_string</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>yarrow_done</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nprng</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_FORTUNA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>fortuna_start</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nprng</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>fortuna_add_entropy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>nprng</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>fortuna_ready</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nprng</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>fortuna_read</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">32</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>nprng</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">32</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Error reading from Fortuna after fortuna_add_entropy()!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CRYPT_ERROR</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>fortuna_done</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nprng</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>fortuna_start</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nprng</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>fortuna_add_random_event</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>nprng</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>fortuna_ready</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nprng</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>fortuna_read</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">64</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>nprng</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">32</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Error reading from Fortuna after fortuna_add_random_event()!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CRYPT_ERROR</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>fortuna_done</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nprng</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>compare_testvector</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">64</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <literal type="number">32</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="string">"fortuna_add_entropy() vs. fortuna_add_random_event()"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <name>CRYPT_FAIL_TESTVECTOR</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></function>

</unit>
