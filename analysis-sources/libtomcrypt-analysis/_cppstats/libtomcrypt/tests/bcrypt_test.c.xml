<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\libtomcrypt-analysis\_cppstats\libtomcrypt\tests\bcrypt_test.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;tomcrypt_test.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_BCRYPT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<struct>struct <name>test</name> <block>{

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>rounds</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>passlen</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>password</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>saltlen</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>salt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>keylen</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl>;</decl_stmt>

}</block>;</struct>

<decl_stmt><decl><type><name><name>struct</name> <name>test</name></name></type> <name><name>tests</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="string">"password"</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="string">"salt"</literal></expr>, <expr><literal type="number">32</literal></expr>,

<expr><literal type="string">"\x5b\xbf\x0c\xc2\x93\x58\x7f\x1c\x36\x35\x55\x5c\x27\x79\x65\x98"</literal>

<literal type="string">"\xd4\x7e\x57\x90\x71\xbf\x42\x7e\x9d\x8f\xbe\x84\x2a\xba\x34\xd9"</literal></expr>

}</block></expr>,

<expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="string">"password"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="number">16</literal></expr>,

<expr><literal type="string">"\xc1\x2b\x56\x62\x35\xee\xe0\x4c\x21\x25\x98\x97\x0a\x57\x9a\x67"</literal></expr>

}</block></expr>,

<expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="string">"salt"</literal></expr>, <expr><literal type="number">16</literal></expr>,

<expr><literal type="string">"\x60\x51\xbe\x18\xc2\xf4\xf8\x2c\xbf\x0e\xfe\xe5\x47\x1b\x4b\xb9"</literal></expr>

}</block></expr>,

<expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="string">"password"</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="string">"salt"</literal></expr>, <expr><literal type="number">32</literal></expr>,

<expr><literal type="string">"\x74\x10\xe4\x4c\xf4\xfa\x07\xbf\xaa\xc8\xa9\x28\xb1\x72\x7f\xac"</literal>

<literal type="string">"\x00\x13\x75\xe7\xbf\x73\x84\x37\x0f\x48\xef\xd1\x21\x74\x30\x50"</literal></expr>

}</block></expr>,

<expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="string">"pass\0word"</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="string">"sa\0lt"</literal></expr>, <expr><literal type="number">16</literal></expr>,

<expr><literal type="string">"\xc2\xbf\xfd\x9d\xb3\x8f\x65\x69\xef\xef\x43\x72\xf4\xde\x83\xc0"</literal></expr>

}</block></expr>,

<expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="string">"pass\0word"</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="string">"sa\0lt"</literal></expr>, <expr><literal type="number">16</literal></expr>,

<expr><literal type="string">"\x4b\xa4\xac\x39\x25\xc0\xe8\xd7\xf0\xcd\xb6\xbb\x16\x84\xa5\x6f"</literal></expr>

}</block></expr>,

<expr><block>{ <expr><literal type="number">8</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="string">"password"</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="string">"salt"</literal></expr>, <expr><literal type="number">64</literal></expr>,

<expr><literal type="string">"\xe1\x36\x7e\xc5\x15\x1a\x33\xfa\xac\x4c\xc1\xc1\x44\xcd\x23\xfa"</literal>

<literal type="string">"\x15\xd5\x54\x84\x93\xec\xc9\x9b\x9b\x5d\x9c\x0d\x3b\x27\xbe\xc7"</literal>

<literal type="string">"\x62\x27\xea\x66\x08\x8b\x84\x9b\x20\xab\x7a\xa4\x78\x01\x02\x46"</literal>

<literal type="string">"\xe7\x4b\xba\x51\x72\x3f\xef\xa9\xf9\x47\x4d\x65\x08\x84\x5e\x8d"</literal></expr>

}</block></expr>,

<expr><block>{ <expr><literal type="number">42</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="string">"password"</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="string">"salt"</literal></expr>, <expr><literal type="number">16</literal></expr>,

<expr><literal type="string">"\x83\x3c\xf0\xdc\xf5\x6d\xb6\x56\x08\xe8\xf0\xdc\x0c\xe8\x82\xbd"</literal></expr>

}</block></expr>,

<expr><block>{ <expr><literal type="number">8</literal></expr>, <expr><literal type="number">446</literal></expr>,

<expr><literal type="string">"Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do "</literal>

<literal type="string">"eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut "</literal>

<literal type="string">"enim ad minim veniam, quis nostrud exercitation ullamco laboris "</literal>

<literal type="string">"nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor "</literal>

<literal type="string">"in reprehenderit in voluptate velit esse cillum dolore eu fugiat "</literal>

<literal type="string">"nulla pariatur. Excepteur sint occaecat cupidatat non proident, "</literal>

<literal type="string">"sunt in culpa qui officia deserunt mollit anim id est laborum."</literal></expr>,

<expr><literal type="number">6</literal></expr>, <expr><literal type="string">"salis"</literal></expr>, <expr><literal type="number">16</literal></expr>,

<expr><literal type="string">"\x10\x97\x8b\x07\x25\x3d\xf5\x7f\x71\xa1\x62\xeb\x0e\x8a\xd3\x0a"</literal></expr>

}</block></expr>,

<expr><block>{ <expr><literal type="number">8</literal></expr>,

<expr><literal type="number">16</literal></expr>, <expr><literal type="string">"\x0d\xb3\xac\x94\xb3\xee\x53\x28\x4f\x4a\x22\x89\x3b\x3c\x24\xae"</literal></expr>,

<expr><literal type="number">16</literal></expr>, <expr><literal type="string">"\x3a\x62\xf0\xf0\xdb\xce\xf8\x23\xcf\xcc\x85\x48\x56\xea\x10\x28"</literal></expr>,

<expr><literal type="number">16</literal></expr>, <expr><literal type="string">"\x20\x44\x38\x17\x5e\xee\x7c\xe1\x36\xc9\x1b\x49\xa6\x79\x23\xff"</literal></expr>

}</block></expr>,

<expr><block>{ <expr><literal type="number">8</literal></expr>,

<expr><literal type="number">16</literal></expr>, <expr><literal type="string">"\x0d\xb3\xac\x94\xb3\xee\x53\x28\x4f\x4a\x22\x89\x3b\x3c\x24\xae"</literal></expr>,

<expr><literal type="number">16</literal></expr>, <expr><literal type="string">"\x3a\x62\xf0\xf0\xdb\xce\xf8\x23\xcf\xcc\x85\x48\x56\xea\x10\x28"</literal></expr>,

<expr><literal type="number">256</literal></expr>,

<expr><literal type="string">"\x20\x54\xb9\xff\xf3\x4e\x37\x21\x44\x03\x34\x74\x68\x28\xe9\xed"</literal>

<literal type="string">"\x38\xde\x4b\x72\xe0\xa6\x9a\xdc\x17\x0a\x13\xb5\xe8\xd6\x46\x38"</literal>

<literal type="string">"\x5e\xa4\x03\x4a\xe6\xd2\x66\x00\xee\x23\x32\xc5\xed\x40\xad\x55"</literal>

<literal type="string">"\x7c\x86\xe3\x40\x3f\xbb\x30\xe4\xe1\xdc\x1a\xe0\x6b\x99\xa0\x71"</literal>

<literal type="string">"\x36\x8f\x51\x8d\x2c\x42\x66\x51\xc9\xe7\xe4\x37\xfd\x6c\x91\x5b"</literal>

<literal type="string">"\x1b\xbf\xc3\xa4\xce\xa7\x14\x91\x49\x0e\xa7\xaf\xb7\xdd\x02\x90"</literal>

<literal type="string">"\xa6\x78\xa4\xf4\x41\x12\x8d\xb1\x79\x2e\xab\x27\x76\xb2\x1e\xb4"</literal>

<literal type="string">"\x23\x8e\x07\x15\xad\xd4\x12\x7d\xff\x44\xe4\xb3\xe4\xcc\x4c\x4f"</literal>

<literal type="string">"\x99\x70\x08\x3f\x3f\x74\xbd\x69\x88\x73\xfd\xf6\x48\x84\x4f\x75"</literal>

<literal type="string">"\xc9\xbf\x7f\x9e\x0c\x4d\x9e\x5d\x89\xa7\x78\x39\x97\x49\x29\x66"</literal>

<literal type="string">"\x61\x67\x07\x61\x1c\xb9\x01\xde\x31\xa1\x97\x26\xb6\xe0\x8c\x3a"</literal>

<literal type="string">"\x80\x01\x66\x1f\x2d\x5c\x9d\xcc\x33\xb4\xaa\x07\x2f\x90\xdd\x0b"</literal>

<literal type="string">"\x3f\x54\x8d\x5e\xeb\xa4\x21\x13\x97\xe2\xfb\x06\x2e\x52\x6e\x1d"</literal>

<literal type="string">"\x68\xf4\x6a\x4c\xe2\x56\x18\x5b\x4b\xad\xc2\x68\x5f\xbe\x78\xe1"</literal>

<literal type="string">"\xc7\x65\x7b\x59\xf8\x3a\xb9\xab\x80\xcf\x93\x18\xd6\xad\xd1\xf5"</literal>

<literal type="string">"\x93\x3f\x12\xd6\xf3\x61\x82\xc8\xe8\x11\x5f\x68\x03\x0a\x12\x44"</literal></expr>

}</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>bcrypt_test</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>l</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>key</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>test</name></name> <modifier>*</modifier></type><name>t</name></decl>;</decl_stmt>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <call><name>find_hash</name><argument_list>(<argument><expr><literal type="string">"sha512"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XMEMSET</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>l</name> <operator>=</operator> <literal type="number">88</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>bcrypt_pbkdf_openbsd</name><argument_list>(<argument><expr><literal type="string">"password"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><literal type="string">"salt"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>l</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">88</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>key</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>|=</operator> <name><name>key</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>key</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>CRYPT_FAIL_TESTVECTOR</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>key</name><index>[<expr><literal type="number">88</literal></expr>]</index></name> <operator>||</operator> <name><name>key</name><index>[<expr><literal type="number">89</literal></expr>]</index></name> <operator>||</operator> <name><name>key</name><index>[<expr><literal type="number">90</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>CRYPT_BUFFER_OVERFLOW</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_TEST_DBG</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>LTC_TEST_DBG</name> <operator>&gt;</operator> <literal type="number">1</literal></expr></cpp:if>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"BCRYPT overflow-test OK\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>tests</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>tests</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>t</name> <operator>=</operator> <operator>&amp;</operator><name><name>tests</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>l</name> <operator>=</operator> <name><name>t</name><operator>-&gt;</operator><name>keylen</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XMEMSET</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>bcrypt_pbkdf_openbsd</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>password</name></name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>passlen</name></name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name><name>t</name><operator>-&gt;</operator><name>salt</name></name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>saltlen</name></name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>rounds</name></name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>l</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>do_compare_testvector</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name><name>t</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>keylen</name></name></expr></argument>, <argument><expr><literal type="string">"OpenBSD testvectors"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_TEST_DBG</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>LTC_TEST_DBG</name> <operator>&gt;</operator> <literal type="number">1</literal></expr></cpp:if>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"BCRYPT test #%d OK\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></for>

<return>return <expr><name>CRYPT_OK</name></expr>;</return>

</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<function><type><name>int</name></type> <name>bcrypt_test</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>CRYPT_NOP</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
