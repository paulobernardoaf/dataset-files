<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\libtomcrypt-analysis\_cppstats\libtomcrypt\tests\padding_test.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;tomcrypt_test.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_PADDING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><name><name>struct</name> <name>padding_testcase_</name></name></type> <name>padding_testcase</name>;</typedef>

<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>cmp_padding_testcase</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>padding_testcase</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>long</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<struct>struct <name>padding_testcase_</name> <block>{

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>is</name></decl>, <decl><type ref="prev"/><name>should</name></decl>, <decl><type ref="prev"/><name>max</name></decl>, <decl><type ref="prev"/><name>mode</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>cmp_padding_testcase</name></type> <name>cmp</name></decl>;</decl_stmt>

}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EQ</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_eq((a), (b), #a, #b)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>_eq</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>_a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>_b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>a</name> <operator>==</operator> <name>b</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>CRYPT_OK</name></expr>;</return></block_content></block></if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_TEST</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>LTC_TEST_DBG</name></expr></argument>)</argument_list></call></expr></cpp:if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"'%s == %s' failed, %lu is not equal to %lu\n"</literal></expr></argument>, <argument><expr><name>_a</name></expr></argument>, <argument><expr><name>_b</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>LTC_UNUSED_PARAM</name><argument_list>(<argument><expr><name>_a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LTC_UNUSED_PARAM</name><argument_list>(<argument><expr><name>_b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>CRYPT_FAIL_TESTVECTOR</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>_cmp_pkcs7</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>padding_testcase</name><modifier>*</modifier></type> <name>t</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name><modifier>*</modifier></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>diff</name> <init>= <expr><name>len</name> <operator>-</operator> <name><name>t</name><operator>-&gt;</operator><name>is</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DOX</name><argument_list>(<argument><expr><call><name>EQ</name><argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>should</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <name>len</name> <operator>-</operator> <name>diff</name></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><operator>++</operator><name>n</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>DOX</name><argument_list>(<argument><expr><call><name>EQ</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name>diff</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>CRYPT_OK</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_RNG_GET_BYTES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type> <name>_cmp_iso_10126</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>padding_testcase</name><modifier>*</modifier></type> <name>t</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name><modifier>*</modifier></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LTC_UNUSED_PARAM</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>len</name> <argument_list type="generic">&lt; <argument><expr><name><name>t</name><operator>-&gt;</operator><name>should</name></name> <operator>||</operator> <name>len</name></expr></argument> &gt;</argument_list></name> <name><name>t</name><operator>-&gt;</operator><name>max</name></name></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_TEST</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>LTC_TEST_DBG</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"(%lu &lt; %lu || %lu &gt; %lu) failed, %s\n"</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>should</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>max</name></name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>CRYPT_FAIL_TESTVECTOR</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>DOX</name><argument_list>(<argument><expr><call><name>EQ</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>len</name> <operator>-</operator> <name><name>t</name><operator>-&gt;</operator><name>is</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CRYPT_OK</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name></type> <name>_cmp_x923</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>padding_testcase</name><modifier>*</modifier></type> <name>t</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name><modifier>*</modifier></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>diff</name> <init>= <expr><name>len</name> <operator>-</operator> <name><name>t</name><operator>-&gt;</operator><name>is</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DOX</name><argument_list>(<argument><expr><call><name>EQ</name><argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>should</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <name>len</name> <operator>-</operator> <name>diff</name></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><operator>++</operator><name>n</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>DOX</name><argument_list>(<argument><expr><call><name>EQ</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0x0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>DOX</name><argument_list>(<argument><expr><call><name>EQ</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>diff</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CRYPT_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>_cmp_oaz</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>padding_testcase</name><modifier>*</modifier></type> <name>t</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name><modifier>*</modifier></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>diff</name> <init>= <expr><name>len</name> <operator>-</operator> <name><name>t</name><operator>-&gt;</operator><name>is</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DOX</name><argument_list>(<argument><expr><call><name>EQ</name><argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>should</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <name>len</name> <operator>-</operator> <name>diff</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DOX</name><argument_list>(<argument><expr><call><name>EQ</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0x80</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><operator>++</operator><name>n</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>DOX</name><argument_list>(<argument><expr><call><name>EQ</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0x0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>CRYPT_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>_cmp_zero</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>padding_testcase</name><modifier>*</modifier></type> <name>t</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name><modifier>*</modifier></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>diff</name> <init>= <expr><name>len</name> <operator>-</operator> <name><name>t</name><operator>-&gt;</operator><name>is</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DOX</name><argument_list>(<argument><expr><call><name>EQ</name><argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>should</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <name>len</name> <operator>-</operator> <name>diff</name></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><operator>++</operator><name>n</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>DOX</name><argument_list>(<argument><expr><call><name>EQ</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0x0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>CRYPT_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>_padding_testrun</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>padding_testcase</name><modifier>*</modifier></type> <name>t</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XMEMSET</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0xAA</literal></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>is</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>padding_pad</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>is</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name><name>t</name><operator>-&gt;</operator><name>cmp</name></name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>padding_depad</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>EQ</name><argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>is</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CRYPT_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>padding_test</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>padding_testcase</name></type> <name><name>cases</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>LTC_PAD_PKCS7</name> <operator>|</operator> <literal type="number">16</literal></expr>, <expr><literal type="string">"0-pkcs7"</literal></expr>, <expr><name>_cmp_pkcs7</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>LTC_PAD_PKCS7</name> <operator>|</operator> <literal type="number">16</literal></expr>, <expr><literal type="string">"1-pkcs7"</literal></expr>, <expr><name>_cmp_pkcs7</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">15</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>LTC_PAD_PKCS7</name> <operator>|</operator> <literal type="number">16</literal></expr>, <expr><literal type="string">"15-pkcs7"</literal></expr>, <expr><name>_cmp_pkcs7</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">16</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>LTC_PAD_PKCS7</name> <operator>|</operator> <literal type="number">16</literal></expr>, <expr><literal type="string">"16-pkcs7"</literal></expr>, <expr><name>_cmp_pkcs7</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">255</literal></expr>, <expr><literal type="number">256</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>LTC_PAD_PKCS7</name> <operator>|</operator> <literal type="number">16</literal></expr>, <expr><literal type="string">"255-pkcs7"</literal></expr>, <expr><name>_cmp_pkcs7</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">256</literal></expr>, <expr><literal type="number">272</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>LTC_PAD_PKCS7</name> <operator>|</operator> <literal type="number">16</literal></expr>, <expr><literal type="string">"256-pkcs7"</literal></expr>, <expr><name>_cmp_pkcs7</name></expr> }</block></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_RNG_GET_BYTES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">256</literal></expr>, <expr><name>LTC_PAD_ISO_10126</name> <operator>|</operator> <literal type="number">16</literal></expr>, <expr><literal type="string">"0-rand"</literal></expr>, <expr><name>_cmp_iso_10126</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">272</literal></expr>, <expr><name>LTC_PAD_ISO_10126</name> <operator>|</operator> <literal type="number">16</literal></expr>, <expr><literal type="string">"1-rand"</literal></expr>, <expr><name>_cmp_iso_10126</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">15</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">272</literal></expr>, <expr><name>LTC_PAD_ISO_10126</name> <operator>|</operator> <literal type="number">16</literal></expr>, <expr><literal type="string">"15-rand"</literal></expr>, <expr><name>_cmp_iso_10126</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">16</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">288</literal></expr>, <expr><name>LTC_PAD_ISO_10126</name> <operator>|</operator> <literal type="number">16</literal></expr>, <expr><literal type="string">"16-rand"</literal></expr>, <expr><name>_cmp_iso_10126</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">255</literal></expr>, <expr><literal type="number">256</literal></expr>, <expr><literal type="number">512</literal></expr>, <expr><name>LTC_PAD_ISO_10126</name> <operator>|</operator> <literal type="number">16</literal></expr>, <expr><literal type="string">"255-rand"</literal></expr>, <expr><name>_cmp_iso_10126</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">256</literal></expr>, <expr><literal type="number">272</literal></expr>, <expr><literal type="number">528</literal></expr>, <expr><name>LTC_PAD_ISO_10126</name> <operator>|</operator> <literal type="number">16</literal></expr>, <expr><literal type="string">"256-rand"</literal></expr>, <expr><name>_cmp_iso_10126</name></expr> }</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>LTC_PAD_ANSI_X923</name> <operator>|</operator> <literal type="number">16</literal></expr>, <expr><literal type="string">"0-x923"</literal></expr>, <expr><name>_cmp_x923</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>LTC_PAD_ANSI_X923</name> <operator>|</operator> <literal type="number">16</literal></expr>, <expr><literal type="string">"1-x923"</literal></expr>, <expr><name>_cmp_x923</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">15</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>LTC_PAD_ANSI_X923</name> <operator>|</operator> <literal type="number">16</literal></expr>, <expr><literal type="string">"15-x923"</literal></expr>, <expr><name>_cmp_x923</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">16</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>LTC_PAD_ANSI_X923</name> <operator>|</operator> <literal type="number">16</literal></expr>, <expr><literal type="string">"16-x923"</literal></expr>, <expr><name>_cmp_x923</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">255</literal></expr>, <expr><literal type="number">256</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>LTC_PAD_ANSI_X923</name> <operator>|</operator> <literal type="number">16</literal></expr>, <expr><literal type="string">"255-x923"</literal></expr>, <expr><name>_cmp_x923</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">256</literal></expr>, <expr><literal type="number">272</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>LTC_PAD_ANSI_X923</name> <operator>|</operator> <literal type="number">16</literal></expr>, <expr><literal type="string">"256-x923"</literal></expr>, <expr><name>_cmp_x923</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>LTC_PAD_ONE_AND_ZERO</name> <operator>|</operator> <literal type="number">16</literal></expr>, <expr><literal type="string">"0-one-and-zero"</literal></expr>, <expr><name>_cmp_oaz</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>LTC_PAD_ONE_AND_ZERO</name> <operator>|</operator> <literal type="number">16</literal></expr>, <expr><literal type="string">"1-one-and-zero"</literal></expr>, <expr><name>_cmp_oaz</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">15</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>LTC_PAD_ONE_AND_ZERO</name> <operator>|</operator> <literal type="number">16</literal></expr>, <expr><literal type="string">"15-one-and-zero"</literal></expr>, <expr><name>_cmp_oaz</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">16</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>LTC_PAD_ONE_AND_ZERO</name> <operator>|</operator> <literal type="number">16</literal></expr>, <expr><literal type="string">"16-one-and-zero"</literal></expr>, <expr><name>_cmp_oaz</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">255</literal></expr>, <expr><literal type="number">256</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>LTC_PAD_ONE_AND_ZERO</name> <operator>|</operator> <literal type="number">16</literal></expr>, <expr><literal type="string">"255-one-and-zero"</literal></expr>, <expr><name>_cmp_oaz</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">256</literal></expr>, <expr><literal type="number">272</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>LTC_PAD_ONE_AND_ZERO</name> <operator>|</operator> <literal type="number">16</literal></expr>, <expr><literal type="string">"256-one-and-zero"</literal></expr>, <expr><name>_cmp_oaz</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>LTC_PAD_ZERO</name> <operator>|</operator> <literal type="number">16</literal></expr>, <expr><literal type="string">"0-zero"</literal></expr>, <expr><name>_cmp_zero</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>LTC_PAD_ZERO</name> <operator>|</operator> <literal type="number">16</literal></expr>, <expr><literal type="string">"1-zero"</literal></expr>, <expr><name>_cmp_zero</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">15</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>LTC_PAD_ZERO</name> <operator>|</operator> <literal type="number">16</literal></expr>, <expr><literal type="string">"15-zero"</literal></expr>, <expr><name>_cmp_zero</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">16</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>LTC_PAD_ZERO</name> <operator>|</operator> <literal type="number">16</literal></expr>, <expr><literal type="string">"16-zero"</literal></expr>, <expr><name>_cmp_zero</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">255</literal></expr>, <expr><literal type="number">256</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>LTC_PAD_ZERO</name> <operator>|</operator> <literal type="number">16</literal></expr>, <expr><literal type="string">"255-zero"</literal></expr>, <expr><name>_cmp_zero</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">256</literal></expr>, <expr><literal type="number">256</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>LTC_PAD_ZERO</name> <operator>|</operator> <literal type="number">16</literal></expr>, <expr><literal type="string">"256-zero"</literal></expr>, <expr><name>_cmp_zero</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>LTC_PAD_ZERO_ALWAYS</name> <operator>|</operator> <literal type="number">16</literal></expr>, <expr><literal type="string">"0-zero-always"</literal></expr>, <expr><name>_cmp_zero</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>LTC_PAD_ZERO_ALWAYS</name> <operator>|</operator> <literal type="number">16</literal></expr>, <expr><literal type="string">"1-zero-always"</literal></expr>, <expr><name>_cmp_zero</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">15</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>LTC_PAD_ZERO_ALWAYS</name> <operator>|</operator> <literal type="number">16</literal></expr>, <expr><literal type="string">"15-zero-always"</literal></expr>, <expr><name>_cmp_zero</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">16</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>LTC_PAD_ZERO_ALWAYS</name> <operator>|</operator> <literal type="number">16</literal></expr>, <expr><literal type="string">"16-zero-always"</literal></expr>, <expr><name>_cmp_zero</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">255</literal></expr>, <expr><literal type="number">256</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>LTC_PAD_ZERO_ALWAYS</name> <operator>|</operator> <literal type="number">16</literal></expr>, <expr><literal type="string">"255-zero-always"</literal></expr>, <expr><name>_cmp_zero</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">256</literal></expr>, <expr><literal type="number">272</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>LTC_PAD_ZERO_ALWAYS</name> <operator>|</operator> <literal type="number">16</literal></expr>, <expr><literal type="string">"256-zero-always"</literal></expr>, <expr><name>_cmp_zero</name></expr> }</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>;</decl_stmt>

<struct><specifier>const</specifier> struct <block>{

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>data</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>mode</name></decl>;</decl_stmt>

}</block> <decl><name><name>tv</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><block>{ <expr><literal type="number">0xDD</literal></expr>, <expr><literal type="number">0xDD</literal></expr>, <expr><literal type="number">0xDD</literal></expr>, <expr><literal type="number">0xDD</literal></expr>, <expr><literal type="number">0xDD</literal></expr>, <expr><literal type="number">0xDD</literal></expr>, <expr><literal type="number">0xDD</literal></expr>, <expr><literal type="number">0xDD</literal></expr>, <expr><literal type="number">0xDD</literal></expr>, <expr><literal type="number">0xDD</literal></expr>, <expr><literal type="number">0xDD</literal></expr>, <expr><literal type="number">0xDD</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x04</literal></expr> }</block></expr>, <expr><literal type="number">12</literal></expr>, <expr><name>LTC_PAD_PKCS7</name> <operator>|</operator> <literal type="number">16</literal></expr> }</block></expr>,

<expr><block>{ <expr><block>{ <expr><literal type="number">0xDD</literal></expr>, <expr><literal type="number">0xDD</literal></expr>, <expr><literal type="number">0xDD</literal></expr>, <expr><literal type="number">0xDD</literal></expr>, <expr><literal type="number">0xDD</literal></expr>, <expr><literal type="number">0xDD</literal></expr>, <expr><literal type="number">0xDD</literal></expr>, <expr><literal type="number">0xDD</literal></expr>, <expr><literal type="number">0xDD</literal></expr>, <expr><literal type="number">0xDD</literal></expr>, <expr><literal type="number">0xDD</literal></expr>, <expr><literal type="number">0xDD</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x04</literal></expr> }</block></expr>, <expr><literal type="number">12</literal></expr>, <expr><name>LTC_PAD_ANSI_X923</name> <operator>|</operator> <literal type="number">16</literal></expr> }</block></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_RNG_GET_BYTES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{ <expr><block>{ <expr><literal type="number">0xDD</literal></expr>, <expr><literal type="number">0xDD</literal></expr>, <expr><literal type="number">0xDD</literal></expr>, <expr><literal type="number">0xDD</literal></expr>, <expr><literal type="number">0xDD</literal></expr>, <expr><literal type="number">0xDD</literal></expr>, <expr><literal type="number">0xDD</literal></expr>, <expr><literal type="number">0xDD</literal></expr>, <expr><literal type="number">0xDD</literal></expr>, <expr><literal type="number">0xDD</literal></expr>, <expr><literal type="number">0xDD</literal></expr>, <expr><literal type="number">0xDD</literal></expr>, <expr><literal type="number">0x81</literal></expr>, <expr><literal type="number">0xA6</literal></expr>, <expr><literal type="number">0x23</literal></expr>, <expr><literal type="number">0x04</literal></expr> }</block></expr>, <expr><literal type="number">12</literal></expr>, <expr><name>LTC_PAD_ISO_10126</name> <operator>|</operator> <literal type="number">16</literal></expr> }</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{ <expr><block>{ <expr><literal type="number">0xDD</literal></expr>, <expr><literal type="number">0xDD</literal></expr>, <expr><literal type="number">0xDD</literal></expr>, <expr><literal type="number">0xDD</literal></expr>, <expr><literal type="number">0xDD</literal></expr>, <expr><literal type="number">0xDD</literal></expr>, <expr><literal type="number">0xDD</literal></expr>, <expr><literal type="number">0xDD</literal></expr>, <expr><literal type="number">0xDD</literal></expr>, <expr><literal type="number">0xDD</literal></expr>, <expr><literal type="number">0xDD</literal></expr>, <expr><literal type="number">0xDD</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr> }</block></expr>, <expr><literal type="number">12</literal></expr>, <expr><name>LTC_PAD_ONE_AND_ZERO</name> <operator>|</operator> <literal type="number">16</literal></expr> }</block></expr>,

<expr><block>{ <expr><block>{ <expr><literal type="number">0xDD</literal></expr>, <expr><literal type="number">0xDD</literal></expr>, <expr><literal type="number">0xDD</literal></expr>, <expr><literal type="number">0xDD</literal></expr>, <expr><literal type="number">0xDD</literal></expr>, <expr><literal type="number">0xDD</literal></expr>, <expr><literal type="number">0xDD</literal></expr>, <expr><literal type="number">0xDD</literal></expr>, <expr><literal type="number">0xDD</literal></expr>, <expr><literal type="number">0xDD</literal></expr>, <expr><literal type="number">0xDD</literal></expr>, <expr><literal type="number">0xDD</literal></expr>, <expr><literal type="number">0xDD</literal></expr>, <expr><literal type="number">0xDD</literal></expr>, <expr><literal type="number">0xDD</literal></expr>, <expr><literal type="number">0x80</literal></expr> }</block></expr>, <expr><literal type="number">15</literal></expr>, <expr><name>LTC_PAD_ONE_AND_ZERO</name> <operator>|</operator> <literal type="number">16</literal></expr> }</block></expr>,

<expr><block>{ <expr><block>{ <expr><literal type="number">0xDD</literal></expr>, <expr><literal type="number">0xDD</literal></expr>, <expr><literal type="number">0xDD</literal></expr>, <expr><literal type="number">0xDD</literal></expr>, <expr><literal type="number">0xDD</literal></expr>, <expr><literal type="number">0xDD</literal></expr>, <expr><literal type="number">0xDD</literal></expr>, <expr><literal type="number">0xDD</literal></expr>, <expr><literal type="number">0xDD</literal></expr>, <expr><literal type="number">0xDD</literal></expr>, <expr><literal type="number">0xDD</literal></expr>, <expr><literal type="number">0xDD</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr> }</block></expr>, <expr><literal type="number">12</literal></expr>, <expr><name>LTC_PAD_ZERO</name> <operator>|</operator> <literal type="number">16</literal></expr> }</block></expr>,

}</block></expr></init></decl>;</struct>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">256</literal> <operator>+</operator> <literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>l</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>cases</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>cases</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>DOX</name><argument_list>(<argument><expr><call><name>_padding_testrun</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cases</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>cases</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>tv</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>tv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>XMEMCPY</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>tv</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>data</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>tv</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>l</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>tv</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>data</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>padding_depad</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>l</name></expr></argument>, <argument><expr><name><name>tv</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XMEMSET</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0xDD</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>l</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>padding_pad</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>tv</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>l</name></expr></argument>, <argument><expr><name><name>tv</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_RNG_GET_BYTES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>tv</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mode</name> <operator>&amp;</operator> <name>LTC_PAD_MASK</name><operator>)</operator> <operator>!=</operator> <name>LTC_PAD_ISO_10126</name></expr>)</condition>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<block>{<block_content>

<expr_stmt><expr><call><name>COMPARE_TESTVECTOR</name><argument_list>(<argument><expr><name><name>tv</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>data</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>tv</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>data</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><literal type="string">"padding fixed TV"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>data</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0x47</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>len</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>SHOULD_FAIL</name><argument_list>(<argument><expr><call><name>padding_depad</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><operator>(</operator><name>LTC_PAD_PKCS7</name> <operator>|</operator> <literal type="number">16</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<return>return <expr><name>CRYPT_OK</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
