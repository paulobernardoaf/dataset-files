<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\libtomcrypt-analysis\_cppstats\libtomcrypt\tests\ed25519_test.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tomcrypt_test.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_CURVE25519</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type> <name>_rfc_8410_10_test</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<struct><specifier>const</specifier> struct <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>b64</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt>

}</block> <decl><name><name>rfc_8410_10</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"MCowBQYDK2VwAyEAGb9ECWmEzf6FQbrBZ9w7lshQhqowtrbLDFw4rXAxZuE="</literal></expr>, <expr><name>PK_PUBLIC</name> <operator>|</operator> <name>PK_STD</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"MIIBhDCCATagAwIBAgIUHDa8kJUZeCuIhknPJ/wDeBW6gZgwBQYDK2VwMDgxNjA0"</literal>

<literal type="string">"BgNVBAMMLVB1YmxpYyBkb21haW4gZWQyNTUxOSBzZWxmLXNpZ25lZCBjZXJ0aWZp"</literal>

<literal type="string">"Y2F0ZTAgFw0xOTA1MjMyMTAxMTZaGA8yMTE5MDUyNDIxMDExNlowODE2MDQGA1UE"</literal>

<literal type="string">"AwwtUHVibGljIGRvbWFpbiBlZDI1NTE5IHNlbGYtc2lnbmVkIGNlcnRpZmljYXRl"</literal>

<literal type="string">"MCowBQYDK2VwAyEAUEiKvHT0KHXOtNjIhaImokxbiog+Ki6lcgce05tf9UKjUDBO"</literal>

<literal type="string">"MB0GA1UdDgQWBBS3fmpWaPK2fNpblEmg4tG4ZHO2BDAfBgNVHSMEGDAWgBS3fmpW"</literal>

<literal type="string">"aPK2fNpblEmg4tG4ZHO2BDAMBgNVHRMEBTADAQH/MAUGAytlcANBADOnwkj8etmx"</literal>

<literal type="string">"mTaXUP29RaenxpN8dQoQ4wnnIJwxQxTcVWOt2PlUxCFoB9gs0+YZOzhXnQg4hfqk"</literal>

<literal type="string">"t/HPExwoZQg="</literal></expr>, <expr><operator>-</operator><literal type="number">2</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"MC4CAQAwBQYDK2VwBCIEINTuctv5E1hK1bbY8fdp+K06/nwoy/HU++CXqI9EdVhC"</literal></expr>, <expr><name>PK_PRIVATE</name> <operator>|</operator> <name>PK_STD</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"MHICAQEwBQYDK2VwBCIEINTuctv5E1hK1bbY8fdp+K06/nwoy/HU++CXqI9EdVhC"</literal>

<literal type="string">"oB8wHQYKKoZIhvcNAQkJFDEPDA1DdXJkbGUgQ2hhaXJzgSEAGb9ECWmEzf6FQbrB"</literal>

<literal type="string">"Z9w7lshQhqowtrbLDFw4rXAxZuE="</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"MIGbMFcGCSqGSIb3DQEFDTBKMCkGCSqGSIb3DQEFDDAcBAiFflnrBOdwjwICCAAw"</literal>

<literal type="string">"DAYIKoZIhvcNAgkFADAdBglghkgBZQMEAQIEEMzFYoqiT6gxwFx2EA55MUYEQFD1"</literal>

<literal type="string">"ZLxPNhm4YAsMZaxu5qpLjiZbkWsTHxURb6WhSW8GAbNbTwxeOaA02sUhJg8rx44/"</literal>

<literal type="string">"N9PzN2QGzIQ1Yv/vHqQ="</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr>,

}</block></expr></init></decl>;</struct>

<decl_stmt><decl><type><name>unsigned</name></type> <name>n</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>curve25519_key</name></type> <name>key</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>tmp</name><index>[<expr><literal type="number">512</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>buflen</name></decl>, <decl><type ref="prev"/><name>tmplen</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>rfc_8410_10</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>rfc_8410_10</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><operator>++</operator><name>n</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>buflen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>base64_decode</name><argument_list>(<argument><expr><name><name>rfc_8410_10</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>b64</name></expr></argument>, <argument><expr><call><name>XSTRLEN</name><argument_list>(<argument><expr><name><name>rfc_8410_10</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>b64</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buflen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>n</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case>

<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>ed25519_import</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>ed25519_import_x509</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case>

<case>case <expr><literal type="number">3</literal></expr>:</case>

<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>ed25519_import_pkcs8</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">4</literal></expr>:</case>

<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>ed25519_import_pkcs8</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"123456"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<return>return <expr><name>CRYPT_FAIL_TESTVECTOR</name></expr>;</return>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>zeromem</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rfc_8410_10</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>buflen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>ed25519_export</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buflen</name></expr></argument>, <argument><expr><name><name>rfc_8410_10</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmplen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>base64_encode</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmplen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>do_compare_testvector</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>tmplen</name></expr></argument>, <argument><expr><name><name>rfc_8410_10</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>b64</name></expr></argument>, <argument><expr><call><name>XSTRLEN</name><argument_list>(<argument><expr><name><name>rfc_8410_10</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>b64</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Ed25519 export-import"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>CRYPT_OK</name></expr>;</return>

</block_content>}</block></function>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>secret_key</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>public_key</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>message</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>signature</name></decl>;</decl_stmt>

}</block></struct></type> <name>rfc_8032_7_1_t</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>_rfc_8032_7_1_test</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>rfc_8032_7_1_t</name></type> <name><name>rfc_8032_7_1</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{

<expr><literal type="string">"9d61b19deffd5a60ba844af492ec2cc44449c5697b326919703bac031cae7f60"</literal></expr>,

<expr><literal type="string">"d75a980182b10ab7d54bfed3c964073a0ee172f3daa62325af021a68f707511a"</literal></expr>,

<expr><literal type="string">""</literal></expr>,

<expr><literal type="string">"e5564300c360ac729086e2cc806e828a84877f1eb8e5d974d873e06522490155"</literal>

<literal type="string">"5fb8821590a33bacc61e39701cf9b46bd25bf5f0595bbe24655141438e7a100b"</literal></expr>

}</block></expr>,

<expr><block>{

<expr><literal type="string">"4ccd089b28ff96da9db6c346ec114e0f5b8a319f35aba624da8cf6ed4fb8a6fb"</literal></expr>,

<expr><literal type="string">"3d4017c3e843895a92b70aa74d1b7ebc9c982ccf2ec4968cc0cd55f12af4660c"</literal></expr>,

<expr><literal type="string">"72"</literal></expr>,

<expr><literal type="string">"92a009a9f0d4cab8720e820b5f642540a2b27b5416503f8fb3762223ebdb69da"</literal>

<literal type="string">"085ac1e43e15996e458f3613d0f11d8c387b2eaeb4302aeeb00d291612bb0c00"</literal></expr>

}</block></expr>,

<expr><block>{

<expr><literal type="string">"c5aa8df43f9f837bedb7442f31dcb7b166d38535076f094b85ce3a2e0b4458f7"</literal></expr>,

<expr><literal type="string">"fc51cd8e6218a1a38da47ed00230f0580816ed13ba3303ac5deb911548908025"</literal></expr>,

<expr><literal type="string">"af82"</literal></expr>,

<expr><literal type="string">"6291d657deec24024827e69c3abe01a30ce548a284743a445e3680d7db5ac3ac"</literal>

<literal type="string">"18ff9b538d16f290ae67f760984dc6594a7c15e9716ed28dc027beceea1ec40a"</literal></expr>

}</block></expr>,

<expr><block>{

<expr><literal type="string">"f5e5767cf153319517630f226876b86c8160cc583bc013744c6bf255f5cc0ee5"</literal></expr>,

<expr><literal type="string">"278117fc144c72340f67d0f2316e8386ceffbf2b2428c9c51fef7c597f1d426e"</literal></expr>,

<expr><literal type="string">"08b8b2b733424243760fe426a4b54908632110a66c2f6591eabd3345e3e4eb98"</literal>

<literal type="string">"fa6e264bf09efe12ee50f8f54e9f77b1e355f6c50544e23fb1433ddf73be84d8"</literal>

<literal type="string">"79de7c0046dc4996d9e773f4bc9efe5738829adb26c81b37c93a1b270b20329d"</literal>

<literal type="string">"658675fc6ea534e0810a4432826bf58c941efb65d57a338bbd2e26640f89ffbc"</literal>

<literal type="string">"1a858efcb8550ee3a5e1998bd177e93a7363c344fe6b199ee5d02e82d522c4fe"</literal>

<literal type="string">"ba15452f80288a821a579116ec6dad2b3b310da903401aa62100ab5d1a36553e"</literal>

<literal type="string">"06203b33890cc9b832f79ef80560ccb9a39ce767967ed628c6ad573cb116dbef"</literal>

<literal type="string">"efd75499da96bd68a8a97b928a8bbc103b6621fcde2beca1231d206be6cd9ec7"</literal>

<literal type="string">"aff6f6c94fcd7204ed3455c68c83f4a41da4af2b74ef5c53f1d8ac70bdcb7ed1"</literal>

<literal type="string">"85ce81bd84359d44254d95629e9855a94a7c1958d1f8ada5d0532ed8a5aa3fb2"</literal>

<literal type="string">"d17ba70eb6248e594e1a2297acbbb39d502f1a8c6eb6f1ce22b3de1a1f40cc24"</literal>

<literal type="string">"554119a831a9aad6079cad88425de6bde1a9187ebb6092cf67bf2b13fd65f270"</literal>

<literal type="string">"88d78b7e883c8759d2c4f5c65adb7553878ad575f9fad878e80a0c9ba63bcbcc"</literal>

<literal type="string">"2732e69485bbc9c90bfbd62481d9089beccf80cfe2df16a2cf65bd92dd597b07"</literal>

<literal type="string">"07e0917af48bbb75fed413d238f5555a7a569d80c3414a8d0859dc65a46128ba"</literal>

<literal type="string">"b27af87a71314f318c782b23ebfe808b82b0ce26401d2e22f04d83d1255dc51a"</literal>

<literal type="string">"ddd3b75a2b1ae0784504df543af8969be3ea7082ff7fc9888c144da2af58429e"</literal>

<literal type="string">"c96031dbcad3dad9af0dcbaaaf268cb8fcffead94f3c7ca495e056a9b47acdb7"</literal>

<literal type="string">"51fb73e666c6c655ade8297297d07ad1ba5e43f1bca32301651339e22904cc8c"</literal>

<literal type="string">"42f58c30c04aafdb038dda0847dd988dcda6f3bfd15c4b4c4525004aa06eeff8"</literal>

<literal type="string">"ca61783aacec57fb3d1f92b0fe2fd1a85f6724517b65e614ad6808d6f6ee34df"</literal>

<literal type="string">"f7310fdc82aebfd904b01e1dc54b2927094b2db68d6f903b68401adebf5a7e08"</literal>

<literal type="string">"d78ff4ef5d63653a65040cf9bfd4aca7984a74d37145986780fc0b16ac451649"</literal>

<literal type="string">"de6188a7dbdf191f64b5fc5e2ab47b57f7f7276cd419c17a3ca8e1b939ae49e4"</literal>

<literal type="string">"88acba6b965610b5480109c8b17b80e1b7b750dfc7598d5d5011fd2dcc5600a3"</literal>

<literal type="string">"2ef5b52a1ecc820e308aa342721aac0943bf6686b64b2579376504ccc493d97e"</literal>

<literal type="string">"6aed3fb0f9cd71a43dd497f01f17c0e2cb3797aa2a2f256656168e6c496afc5f"</literal>

<literal type="string">"b93246f6b1116398a346f1a641f3b041e989f7914f90cc2c7fff357876e506b5"</literal>

<literal type="string">"0d334ba77c225bc307ba537152f3f1610e4eafe595f6d9d90d11faa933a15ef1"</literal>

<literal type="string">"369546868a7f3a45a96768d40fd9d03412c091c6315cf4fde7cb68606937380d"</literal>

<literal type="string">"b2eaaa707b4c4185c32eddcdd306705e4dc1ffc872eeee475a64dfac86aba41c"</literal>

<literal type="string">"0618983f8741c5ef68d3a101e8a3b8cac60c905c15fc910840b94c00a0b9d0"</literal></expr>,

<expr><literal type="string">"0aab4c900501b3e24d7cdf4663326a3a87df5e4843b2cbdb67cbf6e460fec350"</literal>

<literal type="string">"aa5371b1508f9f4528ecea23c436d94b5e8fcd4f681e30a6ac00a9704a188a03"</literal></expr>

}</block></expr>,

<expr><block>{

<expr><literal type="string">"833fe62409237b9d62ec77587520911e9a759cec1d19755b7da901b96dca3d42"</literal></expr>,

<expr><literal type="string">"ec172b93ad5e563bf4932c70e1245034c35467ef2efd4d64ebf819683467e2bf"</literal></expr>,

<expr><literal type="string">"ddaf35a193617abacc417349ae20413112e6fa4e89a97ea20a9eeee64b55d39a"</literal>

<literal type="string">"2192992a274fc1a836ba3c23a3feebbd454d4423643ce80e2a9ac94fa54ca49f"</literal></expr>,

<expr><literal type="string">"dc2a4459e7369633a52b1bf277839a00201009a3efbf3ecb69bea2186c26b589"</literal>

<literal type="string">"09351fc9ac90b3ecfdfbc7c66431e0303dca179c138ac17ad9bef1177331a704"</literal></expr>

}</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>n</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>mlen</name></decl>, <decl><type ref="prev"/><name>slen</name></decl>, <decl><type ref="prev"/><name>plen</name></decl>, <decl><type ref="prev"/><name>siglen</name></decl>, <decl><type ref="prev"/><name>buflen</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>msg</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>sec</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>pub</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>sig</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>buf</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>curve25519_key</name></type> <name>key</name></decl>, <decl><type ref="prev"/><name>key2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>should</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>rfc_8032_7_1</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>rfc_8032_7_1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><operator>++</operator><name>n</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>slen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sec</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>base16_decode</name><argument_list>(<argument><expr><name><name>rfc_8032_7_1</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>secret_key</name></expr></argument>, <argument><expr><call><name>XSTRLEN</name><argument_list>(<argument><expr><name><name>rfc_8032_7_1</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>secret_key</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>sec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>slen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>plen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pub</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>base16_decode</name><argument_list>(<argument><expr><name><name>rfc_8032_7_1</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>public_key</name></expr></argument>, <argument><expr><call><name>XSTRLEN</name><argument_list>(<argument><expr><name><name>rfc_8032_7_1</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>public_key</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pub</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>plen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mlen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>base16_decode</name><argument_list>(<argument><expr><name><name>rfc_8032_7_1</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>message</name></expr></argument>, <argument><expr><call><name>XSTRLEN</name><argument_list>(<argument><expr><name><name>rfc_8032_7_1</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>message</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mlen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>siglen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sig</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>base16_decode</name><argument_list>(<argument><expr><name><name>rfc_8032_7_1</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>signature</name></expr></argument>, <argument><expr><call><name>XSTRLEN</name><argument_list>(<argument><expr><name><name>rfc_8032_7_1</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>signature</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>sig</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>siglen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>ed25519_import_raw</name><argument_list>(<argument><expr><name>sec</name></expr></argument>, <argument><expr><name>slen</name></expr></argument>, <argument><expr><name>PK_PRIVATE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>buflen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>ed25519_sign</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>mlen</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buflen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>do_compare_testvector</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><name>sig</name></expr></argument>, <argument><expr><name>siglen</name></expr></argument>, <argument><expr><literal type="string">"Ed25519 RFC8032 7.1 - sign"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>ed25519_verify</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>mlen</name></expr></argument>, <argument><expr><name>sig</name></expr></argument>, <argument><expr><name>siglen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ret</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>do_compare_testvector</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ret</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>should</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>should</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"Ed25519 RFC8032 7.1 - verify w/ privkey"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>plen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pub</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>base16_decode</name><argument_list>(<argument><expr><name><name>rfc_8032_7_1</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>public_key</name></expr></argument>, <argument><expr><call><name>XSTRLEN</name><argument_list>(<argument><expr><name><name>rfc_8032_7_1</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>public_key</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pub</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>plen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mlen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>base16_decode</name><argument_list>(<argument><expr><name><name>rfc_8032_7_1</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>message</name></expr></argument>, <argument><expr><call><name>XSTRLEN</name><argument_list>(<argument><expr><name><name>rfc_8032_7_1</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>message</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mlen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>siglen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sig</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>base16_decode</name><argument_list>(<argument><expr><name><name>rfc_8032_7_1</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>signature</name></expr></argument>, <argument><expr><call><name>XSTRLEN</name><argument_list>(<argument><expr><name><name>rfc_8032_7_1</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>signature</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>sig</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>siglen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>ed25519_import_raw</name><argument_list>(<argument><expr><name>pub</name></expr></argument>, <argument><expr><name>plen</name></expr></argument>, <argument><expr><name>PK_PUBLIC</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>ed25519_verify</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>mlen</name></expr></argument>, <argument><expr><name>sig</name></expr></argument>, <argument><expr><name>siglen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ret</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>do_compare_testvector</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ret</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>should</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>should</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"Ed25519 RFC8032 7.1 - verify w/ pubkey"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>zeromem</name><argument_list>(<argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>zeromem</name><argument_list>(<argument><expr><operator>&amp;</operator><name>key2</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>key2</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>CRYPT_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ed25519_test</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>curve25519_key</name></type> <name>key</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ed25519_make_key</name><argument_list>(<argument><expr><operator>&amp;</operator><name>yarrow_prng</name></expr></argument>, <argument><expr><call><name>find_prng</name><argument_list>(<argument><expr><literal type="string">"yarrow"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ltc_mp</name><operator>.</operator><name>name</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>CRYPT_NOP</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>_rfc_8410_10_test</name><argument_list>()</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>_rfc_8032_7_1_test</name><argument_list>()</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<function><type><name>int</name></type> <name>ed25519_test</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>CRYPT_NOP</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
