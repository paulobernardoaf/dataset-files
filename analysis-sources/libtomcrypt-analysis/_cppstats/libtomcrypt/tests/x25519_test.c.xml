<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\libtomcrypt-analysis\_cppstats\libtomcrypt\tests\x25519_test.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tomcrypt_test.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_CURVE25519</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type> <name>_rfc_7748_5_2_test</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<struct><specifier>const</specifier> struct <block>{

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>scalar</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>u_in</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>u_out</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>

}</block> <decl><name><name>rfc_7748_5_2</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{

<expr><block>{ <expr><literal type="number">0xa5</literal></expr>, <expr><literal type="number">0x46</literal></expr>, <expr><literal type="number">0xe3</literal></expr>, <expr><literal type="number">0x6b</literal></expr>, <expr><literal type="number">0xf0</literal></expr>, <expr><literal type="number">0x52</literal></expr>, <expr><literal type="number">0x7c</literal></expr>, <expr><literal type="number">0x9d</literal></expr>,

<expr><literal type="number">0x3b</literal></expr>, <expr><literal type="number">0x16</literal></expr>, <expr><literal type="number">0x15</literal></expr>, <expr><literal type="number">0x4b</literal></expr>, <expr><literal type="number">0x82</literal></expr>, <expr><literal type="number">0x46</literal></expr>, <expr><literal type="number">0x5e</literal></expr>, <expr><literal type="number">0xdd</literal></expr>,

<expr><literal type="number">0x62</literal></expr>, <expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0x4c</literal></expr>, <expr><literal type="number">0x0a</literal></expr>, <expr><literal type="number">0xc1</literal></expr>, <expr><literal type="number">0xfc</literal></expr>, <expr><literal type="number">0x5a</literal></expr>, <expr><literal type="number">0x18</literal></expr>,

<expr><literal type="number">0x50</literal></expr>, <expr><literal type="number">0x6a</literal></expr>, <expr><literal type="number">0x22</literal></expr>, <expr><literal type="number">0x44</literal></expr>, <expr><literal type="number">0xba</literal></expr>, <expr><literal type="number">0x44</literal></expr>, <expr><literal type="number">0x9a</literal></expr>, <expr><literal type="number">0xc4</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0xe6</literal></expr>, <expr><literal type="number">0xdb</literal></expr>, <expr><literal type="number">0x68</literal></expr>, <expr><literal type="number">0x67</literal></expr>, <expr><literal type="number">0x58</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0xdb</literal></expr>,

<expr><literal type="number">0x35</literal></expr>, <expr><literal type="number">0x94</literal></expr>, <expr><literal type="number">0xc1</literal></expr>, <expr><literal type="number">0xa4</literal></expr>, <expr><literal type="number">0x24</literal></expr>, <expr><literal type="number">0xb1</literal></expr>, <expr><literal type="number">0x5f</literal></expr>, <expr><literal type="number">0x7c</literal></expr>,

<expr><literal type="number">0x72</literal></expr>, <expr><literal type="number">0x66</literal></expr>, <expr><literal type="number">0x24</literal></expr>, <expr><literal type="number">0xec</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0xb3</literal></expr>, <expr><literal type="number">0x35</literal></expr>, <expr><literal type="number">0x3b</literal></expr>,

<expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0xa9</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0xa6</literal></expr>, <expr><literal type="number">0xd0</literal></expr>, <expr><literal type="number">0xab</literal></expr>, <expr><literal type="number">0x1c</literal></expr>, <expr><literal type="number">0x4c</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0xc3</literal></expr>, <expr><literal type="number">0xda</literal></expr>, <expr><literal type="number">0x55</literal></expr>, <expr><literal type="number">0x37</literal></expr>, <expr><literal type="number">0x9d</literal></expr>, <expr><literal type="number">0xe9</literal></expr>, <expr><literal type="number">0xc6</literal></expr>, <expr><literal type="number">0x90</literal></expr>,

<expr><literal type="number">0x8e</literal></expr>, <expr><literal type="number">0x94</literal></expr>, <expr><literal type="number">0xea</literal></expr>, <expr><literal type="number">0x4d</literal></expr>, <expr><literal type="number">0xf2</literal></expr>, <expr><literal type="number">0x8d</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x4f</literal></expr>,

<expr><literal type="number">0x32</literal></expr>, <expr><literal type="number">0xec</literal></expr>, <expr><literal type="number">0xcf</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x49</literal></expr>, <expr><literal type="number">0x1c</literal></expr>, <expr><literal type="number">0x71</literal></expr>, <expr><literal type="number">0xf7</literal></expr>,

<expr><literal type="number">0x54</literal></expr>, <expr><literal type="number">0xb4</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0x55</literal></expr>, <expr><literal type="number">0x77</literal></expr>, <expr><literal type="number">0xa2</literal></expr>, <expr><literal type="number">0x85</literal></expr>, <expr><literal type="number">0x52</literal></expr> }</block></expr>

}</block></expr>,

<expr><block>{

<expr><block>{ <expr><literal type="number">0x4b</literal></expr>, <expr><literal type="number">0x66</literal></expr>, <expr><literal type="number">0xe9</literal></expr>, <expr><literal type="number">0xd4</literal></expr>, <expr><literal type="number">0xd1</literal></expr>, <expr><literal type="number">0xb4</literal></expr>, <expr><literal type="number">0x67</literal></expr>, <expr><literal type="number">0x3c</literal></expr>,

<expr><literal type="number">0x5a</literal></expr>, <expr><literal type="number">0xd2</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x91</literal></expr>, <expr><literal type="number">0x95</literal></expr>, <expr><literal type="number">0x7d</literal></expr>, <expr><literal type="number">0x6a</literal></expr>, <expr><literal type="number">0xf5</literal></expr>,

<expr><literal type="number">0xc1</literal></expr>, <expr><literal type="number">0x1b</literal></expr>, <expr><literal type="number">0x64</literal></expr>, <expr><literal type="number">0x21</literal></expr>, <expr><literal type="number">0xe0</literal></expr>, <expr><literal type="number">0xea</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0xd4</literal></expr>,

<expr><literal type="number">0x2c</literal></expr>, <expr><literal type="number">0xa4</literal></expr>, <expr><literal type="number">0x16</literal></expr>, <expr><literal type="number">0x9e</literal></expr>, <expr><literal type="number">0x79</literal></expr>, <expr><literal type="number">0x18</literal></expr>, <expr><literal type="number">0xba</literal></expr>, <expr><literal type="number">0x0d</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0xe5</literal></expr>, <expr><literal type="number">0x21</literal></expr>, <expr><literal type="number">0x0f</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0x78</literal></expr>, <expr><literal type="number">0x68</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0xd3</literal></expr>,

<expr><literal type="number">0xf4</literal></expr>, <expr><literal type="number">0xb7</literal></expr>, <expr><literal type="number">0x95</literal></expr>, <expr><literal type="number">0x9d</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x38</literal></expr>, <expr><literal type="number">0xae</literal></expr>, <expr><literal type="number">0x2c</literal></expr>,

<expr><literal type="number">0x31</literal></expr>, <expr><literal type="number">0xdb</literal></expr>, <expr><literal type="number">0xe7</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x6f</literal></expr>, <expr><literal type="number">0xc0</literal></expr>, <expr><literal type="number">0x3c</literal></expr>, <expr><literal type="number">0x3e</literal></expr>,

<expr><literal type="number">0xfc</literal></expr>, <expr><literal type="number">0x4c</literal></expr>, <expr><literal type="number">0xd5</literal></expr>, <expr><literal type="number">0x49</literal></expr>, <expr><literal type="number">0xc7</literal></expr>, <expr><literal type="number">0x15</literal></expr>, <expr><literal type="number">0xa4</literal></expr>, <expr><literal type="number">0x93</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0x95</literal></expr>, <expr><literal type="number">0xcb</literal></expr>, <expr><literal type="number">0xde</literal></expr>, <expr><literal type="number">0x94</literal></expr>, <expr><literal type="number">0x76</literal></expr>, <expr><literal type="number">0xe8</literal></expr>, <expr><literal type="number">0x90</literal></expr>, <expr><literal type="number">0x7d</literal></expr>,

<expr><literal type="number">0x7a</literal></expr>, <expr><literal type="number">0xad</literal></expr>, <expr><literal type="number">0xe4</literal></expr>, <expr><literal type="number">0x5c</literal></expr>, <expr><literal type="number">0xb4</literal></expr>, <expr><literal type="number">0xb8</literal></expr>, <expr><literal type="number">0x73</literal></expr>, <expr><literal type="number">0xf8</literal></expr>,

<expr><literal type="number">0x8b</literal></expr>, <expr><literal type="number">0x59</literal></expr>, <expr><literal type="number">0x5a</literal></expr>, <expr><literal type="number">0x68</literal></expr>, <expr><literal type="number">0x79</literal></expr>, <expr><literal type="number">0x9f</literal></expr>, <expr><literal type="number">0xa1</literal></expr>, <expr><literal type="number">0x52</literal></expr>,

<expr><literal type="number">0xe6</literal></expr>, <expr><literal type="number">0xf8</literal></expr>, <expr><literal type="number">0xf7</literal></expr>, <expr><literal type="number">0x64</literal></expr>, <expr><literal type="number">0x7a</literal></expr>, <expr><literal type="number">0xac</literal></expr>, <expr><literal type="number">0x79</literal></expr>, <expr><literal type="number">0x57</literal></expr> }</block></expr>

}</block></expr>

}</block></expr></init></decl>;</struct>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>out</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>n</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>rfc_7748_5_2</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>rfc_7748_5_2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><operator>++</operator><name>n</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>tweetnacl_crypto_scalarmult</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name><name>rfc_7748_5_2</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>scalar</name></expr></argument>, <argument><expr><name><name>rfc_7748_5_2</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>u_in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>compare_testvector</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>rfc_7748_5_2</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>u_out</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>rfc_7748_5_2</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>u_out</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"x25519 RFC 7748 Ch. 5.2"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>CRYPT_FAIL_TESTVECTOR</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>CRYPT_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>_rfc_7748_6_test</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>alice_private</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="number">0x77</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0x6d</literal></expr>, <expr><literal type="number">0x0a</literal></expr>, <expr><literal type="number">0x73</literal></expr>, <expr><literal type="number">0x18</literal></expr>, <expr><literal type="number">0xa5</literal></expr>, <expr><literal type="number">0x7d</literal></expr>,

<expr><literal type="number">0x3c</literal></expr>, <expr><literal type="number">0x16</literal></expr>, <expr><literal type="number">0xc1</literal></expr>, <expr><literal type="number">0x72</literal></expr>, <expr><literal type="number">0x51</literal></expr>, <expr><literal type="number">0xb2</literal></expr>, <expr><literal type="number">0x66</literal></expr>, <expr><literal type="number">0x45</literal></expr>,

<expr><literal type="number">0xdf</literal></expr>, <expr><literal type="number">0x4c</literal></expr>, <expr><literal type="number">0x2f</literal></expr>, <expr><literal type="number">0x87</literal></expr>, <expr><literal type="number">0xeb</literal></expr>, <expr><literal type="number">0xc0</literal></expr>, <expr><literal type="number">0x99</literal></expr>, <expr><literal type="number">0x2a</literal></expr>,

<expr><literal type="number">0xb1</literal></expr>, <expr><literal type="number">0x77</literal></expr>, <expr><literal type="number">0xfb</literal></expr>, <expr><literal type="number">0xa5</literal></expr>, <expr><literal type="number">0x1d</literal></expr>, <expr><literal type="number">0xb9</literal></expr>, <expr><literal type="number">0x2c</literal></expr>, <expr><literal type="number">0x2a</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>alice_public</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="number">0x85</literal></expr>, <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0xf0</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x89</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0xa7</literal></expr>, <expr><literal type="number">0x54</literal></expr>,

<expr><literal type="number">0x74</literal></expr>, <expr><literal type="number">0x8b</literal></expr>, <expr><literal type="number">0x7d</literal></expr>, <expr><literal type="number">0xdc</literal></expr>, <expr><literal type="number">0xb4</literal></expr>, <expr><literal type="number">0x3e</literal></expr>, <expr><literal type="number">0xf7</literal></expr>, <expr><literal type="number">0x5a</literal></expr>,

<expr><literal type="number">0x0d</literal></expr>, <expr><literal type="number">0xbf</literal></expr>, <expr><literal type="number">0x3a</literal></expr>, <expr><literal type="number">0x0d</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x38</literal></expr>, <expr><literal type="number">0x1a</literal></expr>, <expr><literal type="number">0xf4</literal></expr>,

<expr><literal type="number">0xeb</literal></expr>, <expr><literal type="number">0xa4</literal></expr>, <expr><literal type="number">0xa9</literal></expr>, <expr><literal type="number">0x8e</literal></expr>, <expr><literal type="number">0xaa</literal></expr>, <expr><literal type="number">0x9b</literal></expr>, <expr><literal type="number">0x4e</literal></expr>, <expr><literal type="number">0x6a</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>bob_private</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="number">0x5d</literal></expr>, <expr><literal type="number">0xab</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x7e</literal></expr>, <expr><literal type="number">0x62</literal></expr>, <expr><literal type="number">0x4a</literal></expr>, <expr><literal type="number">0x8a</literal></expr>, <expr><literal type="number">0x4b</literal></expr>,

<expr><literal type="number">0x79</literal></expr>, <expr><literal type="number">0xe1</literal></expr>, <expr><literal type="number">0x7f</literal></expr>, <expr><literal type="number">0x8b</literal></expr>, <expr><literal type="number">0x83</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x0e</literal></expr>, <expr><literal type="number">0xe6</literal></expr>,

<expr><literal type="number">0x6f</literal></expr>, <expr><literal type="number">0x3b</literal></expr>, <expr><literal type="number">0xb1</literal></expr>, <expr><literal type="number">0x29</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x18</literal></expr>, <expr><literal type="number">0xb6</literal></expr>, <expr><literal type="number">0xfd</literal></expr>,

<expr><literal type="number">0x1c</literal></expr>, <expr><literal type="number">0x2f</literal></expr>, <expr><literal type="number">0x8b</literal></expr>, <expr><literal type="number">0x27</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0x88</literal></expr>, <expr><literal type="number">0xe0</literal></expr>, <expr><literal type="number">0xeb</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>bob_public</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="number">0xde</literal></expr>, <expr><literal type="number">0x9e</literal></expr>, <expr><literal type="number">0xdb</literal></expr>, <expr><literal type="number">0x7d</literal></expr>, <expr><literal type="number">0x7b</literal></expr>, <expr><literal type="number">0x7d</literal></expr>, <expr><literal type="number">0xc1</literal></expr>, <expr><literal type="number">0xb4</literal></expr>,

<expr><literal type="number">0xd3</literal></expr>, <expr><literal type="number">0x5b</literal></expr>, <expr><literal type="number">0x61</literal></expr>, <expr><literal type="number">0xc2</literal></expr>, <expr><literal type="number">0xec</literal></expr>, <expr><literal type="number">0xe4</literal></expr>, <expr><literal type="number">0x35</literal></expr>, <expr><literal type="number">0x37</literal></expr>,

<expr><literal type="number">0x3f</literal></expr>, <expr><literal type="number">0x83</literal></expr>, <expr><literal type="number">0x43</literal></expr>, <expr><literal type="number">0xc8</literal></expr>, <expr><literal type="number">0x5b</literal></expr>, <expr><literal type="number">0x78</literal></expr>, <expr><literal type="number">0x67</literal></expr>, <expr><literal type="number">0x4d</literal></expr>,

<expr><literal type="number">0xad</literal></expr>, <expr><literal type="number">0xfc</literal></expr>, <expr><literal type="number">0x7e</literal></expr>, <expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0x6f</literal></expr>, <expr><literal type="number">0x88</literal></expr>, <expr><literal type="number">0x2b</literal></expr>, <expr><literal type="number">0x4f</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>shared_secret</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="number">0x4a</literal></expr>, <expr><literal type="number">0x5d</literal></expr>, <expr><literal type="number">0x9d</literal></expr>, <expr><literal type="number">0x5b</literal></expr>, <expr><literal type="number">0xa4</literal></expr>, <expr><literal type="number">0xce</literal></expr>, <expr><literal type="number">0x2d</literal></expr>, <expr><literal type="number">0xe1</literal></expr>,

<expr><literal type="number">0x72</literal></expr>, <expr><literal type="number">0x8e</literal></expr>, <expr><literal type="number">0x3b</literal></expr>, <expr><literal type="number">0xf4</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x35</literal></expr>, <expr><literal type="number">0x0f</literal></expr>, <expr><literal type="number">0x25</literal></expr>,

<expr><literal type="number">0xe0</literal></expr>, <expr><literal type="number">0x7e</literal></expr>, <expr><literal type="number">0x21</literal></expr>, <expr><literal type="number">0xc9</literal></expr>, <expr><literal type="number">0x47</literal></expr>, <expr><literal type="number">0xd1</literal></expr>, <expr><literal type="number">0x9e</literal></expr>, <expr><literal type="number">0x33</literal></expr>,

<expr><literal type="number">0x76</literal></expr>, <expr><literal type="number">0xf0</literal></expr>, <expr><literal type="number">0x9b</literal></expr>, <expr><literal type="number">0x3c</literal></expr>, <expr><literal type="number">0x1e</literal></expr>, <expr><literal type="number">0x16</literal></expr>, <expr><literal type="number">0x17</literal></expr>, <expr><literal type="number">0x42</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>curve25519_key</name></type> <name>alice_priv</name></decl>, <decl><type ref="prev"/><name>alice_pub</name></decl>, <decl><type ref="prev"/><name>bob_priv</name></decl>, <decl><type ref="prev"/><name>bob_pub</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>buflen</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>x25519_import_raw</name><argument_list>(<argument><expr><name>alice_private</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>alice_private</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>PK_PRIVATE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>alice_priv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>x25519_import_raw</name><argument_list>(<argument><expr><name>bob_private</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>bob_private</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>PK_PRIVATE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bob_priv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>x25519_import_raw</name><argument_list>(<argument><expr><name>alice_public</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>alice_public</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>PK_PUBLIC</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>alice_pub</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>x25519_import_raw</name><argument_list>(<argument><expr><name>bob_public</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>bob_public</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>PK_PUBLIC</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bob_pub</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>x25519_shared_secret</name><argument_list>(<argument><expr><operator>&amp;</operator><name>alice_priv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bob_pub</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buflen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>compare_testvector</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><name>shared_secret</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>shared_secret</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"x25519 - RFC 7748 Ch. 6"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XMEMSET</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>x25519_shared_secret</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bob_priv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>alice_pub</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buflen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>compare_testvector</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><name>shared_secret</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>shared_secret</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"x25519 - RFC 7748 Ch. 6"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CRYPT_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>_rfc_8410_10_test</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<struct><specifier>const</specifier> struct <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>b64</name></decl>;</decl_stmt>

}</block> <decl><name><name>rfc_8410_10</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"MIIBLDCB36ADAgECAghWAUdKKo3DMDAFBgMrZXAwGTEXMBUGA1UEAwwOSUVURiBUZX"</literal>

<literal type="string">"N0IERlbW8wHhcNMTYwODAxMTIxOTI0WhcNNDAxMjMxMjM1OTU5WjAZMRcwFQYDVQQD"</literal>

<literal type="string">"DA5JRVRGIFRlc3QgRGVtbzAqMAUGAytlbgMhAIUg8AmJMKdUdIt93LQ+91oNvzoNJj"</literal>

<literal type="string">"ga9OukqY6qm05qo0UwQzAPBgNVHRMBAf8EBTADAQEAMA4GA1UdDwEBAAQEAwIDCDAg"</literal>

<literal type="string">"BgNVHQ4BAQAEFgQUmx9e7e0EM4Xk97xiPFl1uQvIuzswBQYDK2VwA0EAryMB/t3J5v"</literal>

<literal type="string">"/BzKc9dNZIpDmAgs3babFOTQbs+BolzlDUwsPrdGxO3YNGhW7Ibz3OGhhlxXrCe1Cg"</literal>

<literal type="string">"w1AH9efZBw=="</literal></expr>

}</block></expr>,

}</block></expr></init></decl>;</struct>

<decl_stmt><decl><type><name>unsigned</name></type> <name>n</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>curve25519_key</name></type> <name>key</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>buflen</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>rfc_8410_10</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>rfc_8410_10</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><operator>++</operator><name>n</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>buflen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>base64_decode</name><argument_list>(<argument><expr><name><name>rfc_8410_10</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>b64</name></expr></argument>, <argument><expr><call><name>XSTRLEN</name><argument_list>(<argument><expr><name><name>rfc_8410_10</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>b64</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buflen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>x25519_import_x509</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>zeromem</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>CRYPT_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>_x25519_pkcs8_test</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<struct><specifier>const</specifier> struct <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>b64</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pass</name></decl>;</decl_stmt>

}</block> <decl><name><name>_x25519_pkcs8</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{

<expr><literal type="string">"MIGbMFcGCSqGSIb3DQEFDTBKMCkGCSqGSIb3DQEFDDAcBAjG5kRkEihOvQICCAAw"</literal>

<literal type="string">"DAYIKoZIhvcNAgkFADAdBglghkgBZQMEAQIEEHPLHLoCvesRyeToyMtGHWcEQM1+"</literal>

<literal type="string">"FMpSO5DplX3d+YGTAvf0WxWaBff1q4bfKDn/7IoWQT1e4Fe6Psj62Vy9T69o3+Uy"</literal>

<literal type="string">"VM6mdIOXGOkAtaMSsSk="</literal></expr>,

<expr><literal type="string">"123456"</literal></expr>

}</block></expr>,

<expr><block>{

<expr><literal type="string">"MC4CAQAwBQYDK2VuBCIEIEAInaUdx+fQFfghpCzw/WdItRT3+FnPSkrU9TcIZTZW"</literal></expr>,

<expr><name>NULL</name></expr>

}</block></expr>,

}</block></expr></init></decl>;</struct>

<decl_stmt><decl><type><name>unsigned</name></type> <name>n</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>curve25519_key</name></type> <name>key</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>buflen</name></decl>, <decl><type ref="prev"/><name>passlen</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>_x25519_pkcs8</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>_x25519_pkcs8</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><operator>++</operator><name>n</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>buflen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>base64_decode</name><argument_list>(<argument><expr><name><name>_x25519_pkcs8</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>b64</name></expr></argument>, <argument><expr><call><name>XSTRLEN</name><argument_list>(<argument><expr><name><name>_x25519_pkcs8</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>b64</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buflen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>_x25519_pkcs8</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>pass</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>passlen</name> <operator>=</operator> <call><name>XSTRLEN</name><argument_list>(<argument><expr><name><name>_x25519_pkcs8</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>passlen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>x25519_import_pkcs8</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><name><name>_x25519_pkcs8</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>pass</name></expr></argument>, <argument><expr><name>passlen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>zeromem</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>CRYPT_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>_x25519_compat_test</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>curve25519_key</name></type> <name>priv</name></decl>, <decl><type ref="prev"/><name>pub</name></decl>, <decl><type ref="prev"/><name>imported</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>buflen</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>prng_idx</name> <init>= <expr><call><name>find_prng</name><argument_list>(<argument><expr><literal type="string">"yarrow"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>XMEMSET</name><argument_list>(<argument><expr><operator>&amp;</operator><name>priv</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>priv</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XMEMSET</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pub</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pub</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XMEMSET</name><argument_list>(<argument><expr><operator>&amp;</operator><name>imported</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>imported</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>x25519_make_key</name><argument_list>(<argument><expr><operator>&amp;</operator><name>yarrow_prng</name></expr></argument>, <argument><expr><name>prng_idx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>priv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>x25519_export</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buflen</name></expr></argument>, <argument><expr><name>PK_PRIVATE</name> <operator>|</operator> <name>PK_STD</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>priv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>x25519_import_pkcs8</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>imported</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>do_compare_testvector</name><argument_list>(<argument><expr><operator>&amp;</operator><name>priv</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>priv</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>imported</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>imported</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"priv after ex-&amp;import"</literal></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XMEMSET</name><argument_list>(<argument><expr><operator>&amp;</operator><name>imported</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>imported</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>buflen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>x25519_export</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buflen</name></expr></argument>, <argument><expr><name>PK_PUBLIC</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>priv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>x25519_import_raw</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><name>PK_PUBLIC</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pub</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>buflen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>x25519_export</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buflen</name></expr></argument>, <argument><expr><name>PK_PUBLIC</name> <operator>|</operator> <name>PK_STD</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>priv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>x25519_import</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>imported</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>do_compare_testvector</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pub</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pub</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>imported</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>imported</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"pub after private ex-&amp;import"</literal></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XMEMSET</name><argument_list>(<argument><expr><operator>&amp;</operator><name>imported</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>imported</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>buflen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>x25519_export</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buflen</name></expr></argument>, <argument><expr><name>PK_PUBLIC</name> <operator>|</operator> <name>PK_STD</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pub</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>x25519_import</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>imported</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>do_compare_testvector</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pub</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pub</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>imported</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>imported</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"pub after public ex-&amp;import"</literal></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CRYPT_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>x25519_test</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ltc_mp</name><operator>.</operator><name>name</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>CRYPT_NOP</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>_rfc_7748_5_2_test</name><argument_list>()</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>_rfc_7748_6_test</name><argument_list>()</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>_rfc_8410_10_test</name><argument_list>()</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>_x25519_pkcs8_test</name><argument_list>()</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>_x25519_compat_test</name><argument_list>()</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<function><type><name>int</name></type> <name>x25519_test</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>CRYPT_NOP</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
