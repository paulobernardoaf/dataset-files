<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\libtomcrypt-analysis\_cppstats\libtomcrypt\tests\pkcs_1_emsa_test.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;tomcrypt_test.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_PKCS_1</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../notes/rsa-testvectors/pkcs1v15sign-vectors.c"</cpp:file></cpp:include>

<function><type><name>int</name></type> <name>pkcs_1_emsa_test</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>hash_idx</name> <init>= <expr><call><name>find_hash</name><argument_list>(<argument><expr><literal type="string">"sha1"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>j</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ltc_mp</name><operator>.</operator><name>name</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>CRYPT_NOP</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>hash_is_valid</name><argument_list>(<argument><expr><name>hash_idx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>testcases_emsa</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>testcases_emsa</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>testcase_t</name><modifier>*</modifier></type> <name>t</name> <init>= <expr><operator>&amp;</operator><name><name>testcases_emsa</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>rsa_key</name></type> <name>k</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>key</name> <init>= <expr><operator>&amp;</operator><name>k</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DOX</name><argument_list>(<argument><expr><call><name>mp_init_multi</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>key</name><operator>-&gt;</operator><name>e</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>key</name><operator>-&gt;</operator><name>d</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>key</name><operator>-&gt;</operator><name>N</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>key</name><operator>-&gt;</operator><name>dQ</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>key</name><operator>-&gt;</operator><name>dP</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>key</name><operator>-&gt;</operator><name>qP</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>key</name><operator>-&gt;</operator><name>p</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>key</name><operator>-&gt;</operator><name>q</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DOX</name><argument_list>(<argument><expr><call><name>mp_read_unsigned_bin</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>e</name></name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>rsa</name><operator>.</operator><name>e</name></name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>rsa</name><operator>.</operator><name>e_l</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DOX</name><argument_list>(<argument><expr><call><name>mp_read_unsigned_bin</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>d</name></name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>rsa</name><operator>.</operator><name>d</name></name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>rsa</name><operator>.</operator><name>d_l</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DOX</name><argument_list>(<argument><expr><call><name>mp_read_unsigned_bin</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>N</name></name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>rsa</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>rsa</name><operator>.</operator><name>n_l</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DOX</name><argument_list>(<argument><expr><call><name>mp_read_unsigned_bin</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>dQ</name></name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>rsa</name><operator>.</operator><name>dQ</name></name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>rsa</name><operator>.</operator><name>dQ_l</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DOX</name><argument_list>(<argument><expr><call><name>mp_read_unsigned_bin</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>dP</name></name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>rsa</name><operator>.</operator><name>dP</name></name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>rsa</name><operator>.</operator><name>dP_l</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DOX</name><argument_list>(<argument><expr><call><name>mp_read_unsigned_bin</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>qP</name></name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>rsa</name><operator>.</operator><name>qInv</name></name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>rsa</name><operator>.</operator><name>qInv_l</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DOX</name><argument_list>(<argument><expr><call><name>mp_read_unsigned_bin</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>q</name></name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>rsa</name><operator>.</operator><name>q</name></name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>rsa</name><operator>.</operator><name>q_l</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DOX</name><argument_list>(<argument><expr><call><name>mp_read_unsigned_bin</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>p</name></name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>rsa</name><operator>.</operator><name>p</name></name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>rsa</name><operator>.</operator><name>p_l</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>key</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>PK_PRIVATE</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>rsaData_t</name><modifier>*</modifier></type> <name>s</name> <init>= <expr><operator>&amp;</operator><name><name>t</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>obuf</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>buflen</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></init></decl>, <decl><type ref="prev"/><name>obuflen</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>obuf</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>stat</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DOX</name><argument_list>(<argument><expr><call><name>hash_memory</name><argument_list>(<argument><expr><name>hash_idx</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>o1</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>o1_l</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buflen</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DOX</name><argument_list>(<argument><expr><call><name>rsa_sign_hash_ex</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><name>obuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>obuflen</name></expr></argument>, <argument><expr><name>LTC_PKCS_1_V1_5</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>hash_idx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>COMPARE_TESTVECTOR</name><argument_list>(<argument><expr><name>obuf</name></expr></argument>, <argument><expr><name>obuflen</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>o2</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>o2_l</name></name></expr></argument>,<argument><expr><name><name>s</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DOX</name><argument_list>(<argument><expr><call><name>rsa_verify_hash_ex</name><argument_list>(<argument><expr><name>obuf</name></expr></argument>, <argument><expr><name>obuflen</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><name>LTC_PKCS_1_V1_5</name></expr></argument>, <argument><expr><name>hash_idx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>stat</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DOX</name><argument_list>(<argument><expr><ternary><condition><expr><name>stat</name> <operator>==</operator> <literal type="number">1</literal></expr>?</condition><then><expr><name>CRYPT_OK</name></expr></then><else>:<expr><name>CRYPT_FAIL_TESTVECTOR</name></expr></else></ternary></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for> 

<expr_stmt><expr><call><name>mp_clear_multi</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>d</name></name></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>e</name></name></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>N</name></name></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>dQ</name></name></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>dP</name></name></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>qP</name></name></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>p</name></name></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>q</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for> 

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<function><type><name>int</name></type> <name>pkcs_1_emsa_test</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>CRYPT_NOP</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
