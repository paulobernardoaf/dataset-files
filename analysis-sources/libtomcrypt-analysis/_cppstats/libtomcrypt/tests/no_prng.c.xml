<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\libtomcrypt-analysis\_cppstats\libtomcrypt\tests\no_prng.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tomcrypt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tomcrypt_test.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_PKCS_1</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name><name>struct</name> <name>ltc_prng_descriptor</name></name></type> <name>desc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>name</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>entropy</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>offset</name></decl>;</decl_stmt>

}</block></struct></type> <name>no_prng_desc_t</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>no_prng_start</name><parameter_list>(<parameter><decl><type><name>prng_state</name> <modifier>*</modifier></type><name>prng</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>no_prng_desc_t</name> <modifier>*</modifier></type><name>no_prng</name> <init>= <expr><operator>(</operator><name>no_prng_desc_t</name><operator>*</operator><operator>)</operator> <name>prng</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>no_prng</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name><name>no_prng</name><operator>-&gt;</operator><name>name</name></name> <operator>==</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>no_prng</name> <operator>+</operator> <call><name>offsetof</name><argument_list>(<argument><expr><name>no_prng_desc_t</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>no_prng</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>no_prng</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>CRYPT_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>no_prng_add_entropy</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>inlen</name></decl></parameter>, <parameter><decl><type><name>prng_state</name> <modifier>*</modifier></type><name>prng</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>no_prng_desc_t</name> <modifier>*</modifier></type><name>no_prng</name> <init>= <expr><operator>(</operator><name>no_prng_desc_t</name><operator>*</operator><operator>)</operator> <name>prng</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>no_prng</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name><name>no_prng</name><operator>-&gt;</operator><name>name</name></name> <operator>==</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>no_prng</name> <operator>+</operator> <call><name>offsetof</name><argument_list>(<argument><expr><name>no_prng_desc_t</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>in</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>inlen</name> <operator>&lt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>no_prng</name><operator>-&gt;</operator><name>entropy</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>no_prng</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <call><name>MIN</name><argument_list>(<argument><expr><name>inlen</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>no_prng</name><operator>-&gt;</operator><name>entropy</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>no_prng</name><operator>-&gt;</operator><name>entropy</name></name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name><name>no_prng</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>no_prng</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>CRYPT_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>no_prng_ready</name><parameter_list>(<parameter><decl><type><name>prng_state</name> <modifier>*</modifier></type><name>prng</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>prng</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CRYPT_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name> <name>long</name></type> <name>no_prng_read</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>outlen</name></decl></parameter>, <parameter><decl><type><name>prng_state</name> <modifier>*</modifier></type><name>prng</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>no_prng_desc_t</name> <modifier>*</modifier></type><name>no_prng</name> <init>= <expr><operator>(</operator><name>no_prng_desc_t</name><operator>*</operator><operator>)</operator> <name>prng</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>no_prng</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name><name>no_prng</name><operator>-&gt;</operator><name>name</name></name> <operator>==</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>no_prng</name> <operator>+</operator> <call><name>offsetof</name><argument_list>(<argument><expr><name>no_prng_desc_t</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>out</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>outlen</name> <operator>=</operator> <call><name>MIN</name><argument_list>(<argument><expr><name>outlen</name></expr></argument>, <argument><expr><name><name>no_prng</name><operator>-&gt;</operator><name>len</name></name> <operator>-</operator> <name><name>no_prng</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>no_prng</name><operator>-&gt;</operator><name>entropy</name><index>[<expr><name><name>no_prng</name><operator>-&gt;</operator><name>offset</name></name></expr>]</index></name></expr></argument>, <argument><expr><name>outlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>no_prng</name><operator>-&gt;</operator><name>offset</name></name> <operator>+=</operator> <name>outlen</name></expr>;</expr_stmt>

<return>return <expr><name>outlen</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>no_prng_done</name><parameter_list>(<parameter><decl><type><name>prng_state</name> <modifier>*</modifier></type><name>prng</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LTC_UNUSED_PARAM</name><argument_list>(<argument><expr><name>prng</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CRYPT_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>no_prng_export</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>outlen</name></decl></parameter>, <parameter><decl><type><name>prng_state</name> <modifier>*</modifier></type><name>prng</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LTC_UNUSED_PARAM</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LTC_UNUSED_PARAM</name><argument_list>(<argument><expr><name>outlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LTC_UNUSED_PARAM</name><argument_list>(<argument><expr><name>prng</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CRYPT_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>no_prng_import</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>inlen</name></decl></parameter>, <parameter><decl><type><name>prng_state</name> <modifier>*</modifier></type><name>prng</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LTC_UNUSED_PARAM</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LTC_UNUSED_PARAM</name><argument_list>(<argument><expr><name>inlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LTC_UNUSED_PARAM</name><argument_list>(<argument><expr><name>prng</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CRYPT_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>no_prng_test</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>CRYPT_OK</name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>ltc_prng_descriptor</name></name></type> <name>no_prng_desc</name> <init>=

<expr><block>{

<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>,

<expr><operator>&amp;</operator><name>no_prng_start</name></expr>,

<expr><operator>&amp;</operator><name>no_prng_add_entropy</name></expr>,

<expr><operator>&amp;</operator><name>no_prng_ready</name></expr>,

<expr><operator>&amp;</operator><name>no_prng_read</name></expr>,

<expr><operator>&amp;</operator><name>no_prng_done</name></expr>,

<expr><operator>&amp;</operator><name>no_prng_export</name></expr>,

<expr><operator>&amp;</operator><name>no_prng_import</name></expr>,

<expr><operator>&amp;</operator><name>no_prng_test</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<function><type><name><name>struct</name> <name>ltc_prng_descriptor</name></name><modifier>*</modifier></type> <name>no_prng_desc_get</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>no_prng_desc_t</name><modifier>*</modifier></type> <name>no_prng</name> <init>= <expr><call><name>XMALLOC</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>no_prng</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>no_prng</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>XMEMCPY</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>no_prng</name><operator>-&gt;</operator><name>desc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>no_prng_desc</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>no_prng_desc</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name><name>no_prng</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>no_prng</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"no_prng@%p"</literal></expr></argument>, <argument><expr><name>no_prng</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>ret</name> <operator>&gt;=</operator> <operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>no_prng</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></sizeof><operator>)</operator> <operator>||</operator> <operator>(</operator><name>ret</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>XFREE</name><argument_list>(<argument><expr><name>no_prng</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>no_prng</name><operator>-&gt;</operator><name>desc</name><operator>.</operator><name>name</name></name> <operator>=</operator> <name><name>no_prng</name><operator>-&gt;</operator><name>name</name></name></expr>;</expr_stmt>

<return>return <expr><operator>&amp;</operator><name><name>no_prng</name><operator>-&gt;</operator><name>desc</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>no_prng_desc_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ltc_prng_descriptor</name></name><modifier>*</modifier></type> <name>prng</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>no_prng_desc_t</name> <modifier>*</modifier></type><name>no_prng</name> <init>= <expr><operator>(</operator><name>no_prng_desc_t</name><operator>*</operator><operator>)</operator> <name>prng</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LTC_ARGCHKVD</name><argument_list>(<argument><expr><name>no_prng</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LTC_ARGCHKVD</name><argument_list>(<argument><expr><name><name>no_prng</name><operator>-&gt;</operator><name>name</name></name> <operator>==</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>no_prng</name> <operator>+</operator> <call><name>offsetof</name><argument_list>(<argument><expr><name>no_prng_desc_t</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XFREE</name><argument_list>(<argument><expr><name>no_prng</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
