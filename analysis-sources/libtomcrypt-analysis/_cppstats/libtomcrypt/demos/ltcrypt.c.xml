<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\libtomcrypt-analysis\_cppstats\libtomcrypt\demos\ltcrypt.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;tomcrypt.h&gt;</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>int</name> <name>LTC_NORETURN</name></type> <name>usage</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Usage encrypt: %s cipher infile outfile\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Usage decrypt: %s -d cipher infile outfile\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Usage test: %s -t cipher\nCiphers:\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>cipher_descriptor</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>name</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>,<argument><expr><name><name>cipher_descriptor</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>plaintext</name><index>[<expr><literal type="number">512</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>ciphertext</name><index>[<expr><literal type="number">512</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>tmpkey</name><index>[<expr><literal type="number">512</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>key</name><index>[<expr><name>MAXBLOCKSIZE</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>IV</name><index>[<expr><name>MAXBLOCKSIZE</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>inbuf</name><index>[<expr><literal type="number">512</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>outlen</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>ivsize</name></decl>, <decl><type ref="prev"/><name>x</name></decl>, <decl><type ref="prev"/><name>decrypt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>symmetric_CTR</name></type> <name>ctr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cipher_idx</name></decl>, <decl><type ref="prev"/><name>hash_idx</name></decl>, <decl><type ref="prev"/><name>ks</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>infile</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>outfile</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>cipher</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>prng_state</name></type> <name>prng</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fdin</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>fdout</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>register_all_ciphers</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>register_all_hashes</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>register_all_prngs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>argc</name> <operator>&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-t"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>cipher</name> <operator>=</operator> <name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>cipher_idx</name> <operator>=</operator> <call><name>find_cipher</name><argument_list>(<argument><expr><name>cipher</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cipher_idx</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Invalid cipher %s entered on command line.\n"</literal></expr></argument>, <argument><expr><name>cipher</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>cipher_descriptor</name><index>[<expr><name>cipher_idx</name></expr>]</index></name><operator>.</operator><name>test</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>cipher_descriptor</name><index>[<expr><name>cipher_idx</name></expr>]</index></name><operator>.</operator><call><name>test</name><argument_list>()</argument_list></call> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Error when testing cipher %s.\n"</literal></expr></argument>, <argument><expr><name>cipher</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Testing cipher %s succeeded.\n"</literal></expr></argument>, <argument><expr><name>cipher</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt> 

</block_content>}</block></if></if_stmt> 

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>usage</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-d"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>decrypt</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>cipher</name> <operator>=</operator> <name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>infile</name> <operator>=</operator> <name><name>argv</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>outfile</name> <operator>=</operator> <name><name>argv</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>decrypt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>cipher</name> <operator>=</operator> <name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>infile</name> <operator>=</operator> <name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>outfile</name> <operator>=</operator> <name><name>argv</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>fdin</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>infile</name></expr></argument>,<argument><expr><literal type="string">"rb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fdin</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr><literal type="string">"Can't open input for reading"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>fdout</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>outfile</name></expr></argument>,<argument><expr><literal type="string">"wb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fdout</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr><literal type="string">"Can't open output for writing"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>cipher_idx</name> <operator>=</operator> <call><name>find_cipher</name><argument_list>(<argument><expr><name>cipher</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cipher_idx</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Invalid cipher entered on command line.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>hash_idx</name> <operator>=</operator> <call><name>find_hash</name><argument_list>(<argument><expr><literal type="string">"sha256"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>hash_idx</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"LTC_SHA256 not found...?\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ivsize</name> <operator>=</operator> <name><name>cipher_descriptor</name><index>[<expr><name>cipher_idx</name></expr>]</index></name><operator>.</operator><name>block_length</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ks</name> <operator>=</operator> <name><name>hash_descriptor</name><index>[<expr><name>hash_idx</name></expr>]</index></name><operator>.</operator><name>hashsize</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cipher_descriptor</name><index>[<expr><name>cipher_idx</name></expr>]</index></name><operator>.</operator><call><name>keysize</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ks</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Invalid keysize???\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\nEnter key: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>fgets</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>tmpkey</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tmpkey</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>stdin</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>outlen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>hash_memory</name><argument_list>(<argument><expr><name>hash_idx</name></expr></argument>,<argument><expr><name>tmpkey</name></expr></argument>,<argument><expr><call><name>XSTRLEN</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>tmpkey</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><name>key</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>outlen</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Error hashing key: %s\n"</literal></expr></argument>, <argument><expr><call><name>error_to_string</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>decrypt</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>fread</name><argument_list>(<argument><expr><name>IV</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>ivsize</name></expr></argument>,<argument><expr><name>fdin</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ivsize</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Error reading IV from input.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>ctr_start</name><argument_list>(<argument><expr><name>cipher_idx</name></expr></argument>,<argument><expr><name>IV</name></expr></argument>,<argument><expr><name>key</name></expr></argument>,<argument><expr><name>ks</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>CTR_COUNTER_LITTLE_ENDIAN</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>ctr</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"ctr_start error: %s\n"</literal></expr></argument>,<argument><expr><call><name>error_to_string</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<do>do <block>{<block_content>

<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>fread</name><argument_list>(<argument><expr><name>inbuf</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>inbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>,<argument><expr><name>fdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>ctr_decrypt</name><argument_list>(<argument><expr><name>inbuf</name></expr></argument>,<argument><expr><name>plaintext</name></expr></argument>,<argument><expr><name>y</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>ctr</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"ctr_decrypt error: %s\n"</literal></expr></argument>, <argument><expr><call><name>error_to_string</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>fwrite</name><argument_list>(<argument><expr><name>plaintext</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>y</name></expr></argument>,<argument><expr><name>fdout</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>y</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Error writing to file.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block> while <condition>(<expr><name>y</name> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>inbuf</name></expr></argument>)</argument_list></sizeof></expr>)</condition>;</do>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>fdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>fdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>rng_make_prng</name><argument_list>(<argument><expr><literal type="number">128</literal></expr></argument>, <argument><expr><call><name>find_prng</name><argument_list>(<argument><expr><literal type="string">"yarrow"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>prng</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Error setting up PRNG, %s\n"</literal></expr></argument>, <argument><expr><call><name>error_to_string</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>yarrow_read</name><argument_list>(<argument><expr><name>IV</name></expr></argument>,<argument><expr><name>ivsize</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>prng</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>x</name> <operator>!=</operator> <name>ivsize</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Error reading PRNG for IV required.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>fwrite</name><argument_list>(<argument><expr><name>IV</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>ivsize</name></expr></argument>,<argument><expr><name>fdout</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ivsize</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Error writing IV to output.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>ctr_start</name><argument_list>(<argument><expr><name>cipher_idx</name></expr></argument>,<argument><expr><name>IV</name></expr></argument>,<argument><expr><name>key</name></expr></argument>,<argument><expr><name>ks</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>CTR_COUNTER_LITTLE_ENDIAN</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>ctr</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"ctr_start error: %s\n"</literal></expr></argument>,<argument><expr><call><name>error_to_string</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<do>do <block>{<block_content>

<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>fread</name><argument_list>(<argument><expr><name>inbuf</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>inbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>,<argument><expr><name>fdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>ctr_encrypt</name><argument_list>(<argument><expr><name>inbuf</name></expr></argument>,<argument><expr><name>ciphertext</name></expr></argument>,<argument><expr><name>y</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>ctr</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"ctr_encrypt error: %s\n"</literal></expr></argument>, <argument><expr><call><name>error_to_string</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>fwrite</name><argument_list>(<argument><expr><name>ciphertext</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>y</name></expr></argument>,<argument><expr><name>fdout</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>y</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Error writing to output.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block> while <condition>(<expr><name>y</name> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>inbuf</name></expr></argument>)</argument_list></sizeof></expr>)</condition>;</do>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>fdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>fdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

</unit>
