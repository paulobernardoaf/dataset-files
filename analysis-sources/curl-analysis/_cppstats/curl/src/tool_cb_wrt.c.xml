<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\curl-analysis\_cppstats\curl\src\tool_cb_wrt.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tool_setup.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENABLE_CURLX_PRINTF</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curlx.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tool_cfgable.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tool_msgs.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tool_cb_wrt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tool_operate.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memdebug.h"</cpp:file></cpp:include> 

<function><type><name>bool</name></type> <name>tool_create_output_file</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>OutStruct</name></name> <modifier>*</modifier></type><name>outs</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>OperationConfig</name></name> <modifier>*</modifier></type><name>config</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>GlobalConfig</name></name> <modifier>*</modifier></type><name>global</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>file</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DEBUGASSERT</name><argument_list>(<argument><expr><name>outs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DEBUGASSERT</name><argument_list>(<argument><expr><name>config</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>global</name> <operator>=</operator> <name><name>config</name><operator>-&gt;</operator><name>global</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>outs</name><operator>-&gt;</operator><name>filename</name></name> <operator>||</operator> <operator>!</operator><operator>*</operator><name><name>outs</name><operator>-&gt;</operator><name>filename</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>warnf</name><argument_list>(<argument><expr><name>global</name></expr></argument>, <argument><expr><literal type="string">"Remote filename has no length!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>outs</name><operator>-&gt;</operator><name>is_cd_filename</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>file</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name><name>outs</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>, <argument><expr><literal type="string">"rb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>file</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>warnf</name><argument_list>(<argument><expr><name>global</name></expr></argument>, <argument><expr><literal type="string">"Refusing to overwrite %s: %s\n"</literal></expr></argument>, <argument><expr><name><name>outs</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>,

<argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>EEXIST</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>file</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name><name>outs</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>, <argument><expr><literal type="string">"wb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>file</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>warnf</name><argument_list>(<argument><expr><name>global</name></expr></argument>, <argument><expr><literal type="string">"Failed to create the file %s: %s\n"</literal></expr></argument>, <argument><expr><name><name>outs</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>,

<argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>outs</name><operator>-&gt;</operator><name>s_isreg</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>outs</name><operator>-&gt;</operator><name>fopened</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>outs</name><operator>-&gt;</operator><name>stream</name></name> <operator>=</operator> <name>file</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>outs</name><operator>-&gt;</operator><name>bytes</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>outs</name><operator>-&gt;</operator><name>init</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>TRUE</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>tool_write_cb</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sz</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>nmemb</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userdata</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>rc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>per_transfer</name></name> <modifier>*</modifier></type><name>per</name> <init>= <expr><name>userdata</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>OutStruct</name></name> <modifier>*</modifier></type><name>outs</name> <init>= <expr><operator>&amp;</operator><name><name>per</name><operator>-&gt;</operator><name>outs</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>OperationConfig</name></name> <modifier>*</modifier></type><name>config</name> <init>= <expr><name><name>per</name><operator>-&gt;</operator><name>config</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>bytes</name> <init>= <expr><name>sz</name> <operator>*</operator> <name>nmemb</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>is_tty</name> <init>= <expr><name><name>config</name><operator>-&gt;</operator><name>global</name><operator>-&gt;</operator><name>isatty</name></name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>CONSOLE_SCREEN_BUFFER_INFO</name></type> <name>console_info</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>intptr_t</name></type> <name>fhnd</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>failure</name> <init>= <expr><ternary><condition><expr><name>bytes</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUGBUILD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tty</name> <init>= <expr><call><name>curlx_getenv</name><argument_list>(<argument><expr><literal type="string">"CURL_ISATTY"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>tty</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>is_tty</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>curl_free</name><argument_list>(<argument><expr><name>tty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>show_headers</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>bytes</name> <operator>&gt;</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>CURL_MAX_HTTP_HEADER</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>warnf</name><argument_list>(<argument><expr><name><name>config</name><operator>-&gt;</operator><name>global</name></name></expr></argument>, <argument><expr><literal type="string">"Header data size exceeds single call write "</literal>

<literal type="string">"limit!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>failure</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>bytes</name> <operator>&gt;</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>CURL_MAX_WRITE_SIZE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>warnf</name><argument_list>(<argument><expr><name><name>config</name><operator>-&gt;</operator><name>global</name></name></expr></argument>, <argument><expr><literal type="string">"Data size exceeds single call write limit!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>failure</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>check_fails</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>outs</name><operator>-&gt;</operator><name>filename</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>*</operator><name><name>outs</name><operator>-&gt;</operator><name>filename</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>check_fails</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>outs</name><operator>-&gt;</operator><name>s_isreg</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>check_fails</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>outs</name><operator>-&gt;</operator><name>fopened</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>outs</name><operator>-&gt;</operator><name>stream</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>check_fails</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>outs</name><operator>-&gt;</operator><name>fopened</name></name> <operator>&amp;&amp;</operator> <name><name>outs</name><operator>-&gt;</operator><name>stream</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>check_fails</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>outs</name><operator>-&gt;</operator><name>fopened</name></name> <operator>&amp;&amp;</operator> <name><name>outs</name><operator>-&gt;</operator><name>bytes</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>check_fails</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>outs</name><operator>-&gt;</operator><name>stream</name></name> <operator>||</operator> <name><name>outs</name><operator>-&gt;</operator><name>s_isreg</name></name> <operator>||</operator> <name><name>outs</name><operator>-&gt;</operator><name>fopened</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>check_fails</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>outs</name><operator>-&gt;</operator><name>alloc_filename</name></name> <operator>||</operator> <name><name>outs</name><operator>-&gt;</operator><name>is_cd_filename</name></name> <operator>||</operator> <name><name>outs</name><operator>-&gt;</operator><name>init</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>check_fails</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name>check_fails</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>warnf</name><argument_list>(<argument><expr><name><name>config</name><operator>-&gt;</operator><name>global</name></name></expr></argument>, <argument><expr><literal type="string">"Invalid output struct data for write callback\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>failure</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>outs</name><operator>-&gt;</operator><name>stream</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>tool_create_output_file</name><argument_list>(<argument><expr><name>outs</name></expr></argument>, <argument><expr><name><name>per</name><operator>-&gt;</operator><name>config</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>failure</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>is_tty</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>outs</name><operator>-&gt;</operator><name>bytes</name></name> <operator>&lt;</operator> <literal type="number">2000</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>config</name><operator>-&gt;</operator><name>terminal_binary_ok</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>memchr</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>warnf</name><argument_list>(<argument><expr><name><name>config</name><operator>-&gt;</operator><name>global</name></name></expr></argument>, <argument><expr><literal type="string">"Binary output can mess up your terminal. "</literal>

<literal type="string">"Use \"--output -\" to tell curl to output it to your terminal "</literal>

<literal type="string">"anyway, or consider \"--output &lt;FILE&gt;\" to save to a file.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>synthetic_error</name></name> <operator>=</operator> <name>ERR_BINARY_TERMINAL</name></expr>;</expr_stmt>

<return>return <expr><name>failure</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>fhnd</name> <operator>=</operator> <call><name>_get_osfhandle</name><argument_list>(<argument><expr><call><name>fileno</name><argument_list>(<argument><expr><name><name>outs</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>isatty</name><argument_list>(<argument><expr><call><name>fileno</name><argument_list>(<argument><expr><name><name>outs</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<call><name>GetConsoleScreenBufferInfo</name><argument_list>(<argument><expr><operator>(</operator><name>HANDLE</name><operator>)</operator><name>fhnd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>console_info</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>DWORD</name></type> <name>in_len</name> <init>= <expr><operator>(</operator><name>DWORD</name><operator>)</operator><operator>(</operator><name>sz</name> <operator>*</operator> <name>nmemb</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>wchar_t</name><modifier>*</modifier></type> <name>wc_buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>wc_len</name></decl>;</decl_stmt>

<expr_stmt><expr><name>wc_len</name> <operator>=</operator> <call><name>MultiByteToWideChar</name><argument_list>(<argument><expr><name>CP_UTF8</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>in_len</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>wc_buf</name> <operator>=</operator> <operator>(</operator><name>wchar_t</name><operator>*</operator><operator>)</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>wc_len</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>wchar_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>wc_buf</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>failure</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>wc_len</name> <operator>=</operator> <call><name>MultiByteToWideChar</name><argument_list>(<argument><expr><name>CP_UTF8</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>in_len</name></expr></argument>, <argument><expr><name>wc_buf</name></expr></argument>, <argument><expr><name>wc_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>wc_len</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>wc_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>failure</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>WriteConsoleW</name><argument_list>(

<argument><expr><operator>(</operator><name>HANDLE</name><operator>)</operator> <name>fhnd</name></expr></argument>,

<argument><expr><name>wc_buf</name></expr></argument>,

<argument><expr><name>wc_len</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>wc_len</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>wc_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>failure</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>wc_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <name>bytes</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>fwrite</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><name>nmemb</name></expr></argument>, <argument><expr><name><name>outs</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name>bytes</name> <operator>==</operator> <name>rc</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>outs</name><operator>-&gt;</operator><name>bytes</name></name> <operator>+=</operator> <name>bytes</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>readbusy</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>readbusy</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>curl_easy_pause</name><argument_list>(<argument><expr><name><name>per</name><operator>-&gt;</operator><name>curl</name></name></expr></argument>, <argument><expr><name>CURLPAUSE_CONT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>nobuffer</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><call><name>fflush</name><argument_list>(<argument><expr><name><name>outs</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>res</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>failure</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>rc</name></expr>;</return>

</block_content>}</block></function>

</unit>
