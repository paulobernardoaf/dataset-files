<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\curl-analysis\_cppstats\curl\src\tool_setopt.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tool_setup.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_LIBCURL_OPTION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENABLE_CURLX_PRINTF</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curlx.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tool_cfgable.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tool_easysrc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tool_setopt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tool_convert.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memdebug.h"</cpp:file></cpp:include> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NV</name><parameter_list>(<parameter><type><name>e</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{#e, e}</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NV1</name><parameter_list>(<parameter><type><name>e</name></type></parameter>, <parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{#e, (v)}</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NVEND</name></cpp:macro> <cpp:value>{NULL, 0}</cpp:value></cpp:define> 

<decl_stmt><decl><type><specifier>const</specifier> <name>NameValue</name></type> <name><name>setopt_nv_CURLPROXY</name><index>[]</index></name> <init>= <expr><block>{

<expr><call><name>NV</name><argument_list>(<argument><expr><name>CURLPROXY_HTTP</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>NV</name><argument_list>(<argument><expr><name>CURLPROXY_HTTP_1_0</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>NV</name><argument_list>(<argument><expr><name>CURLPROXY_HTTPS</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>NV</name><argument_list>(<argument><expr><name>CURLPROXY_SOCKS4</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>NV</name><argument_list>(<argument><expr><name>CURLPROXY_SOCKS5</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>NV</name><argument_list>(<argument><expr><name>CURLPROXY_SOCKS4A</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>NV</name><argument_list>(<argument><expr><name>CURLPROXY_SOCKS5_HOSTNAME</name></expr></argument>)</argument_list></call></expr>,

<expr><name>NVEND</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>NameValue</name></type> <name><name>setopt_nv_CURL_SOCKS_PROXY</name><index>[]</index></name> <init>= <expr><block>{

<expr><call><name>NV</name><argument_list>(<argument><expr><name>CURLPROXY_SOCKS4</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>NV</name><argument_list>(<argument><expr><name>CURLPROXY_SOCKS5</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>NV</name><argument_list>(<argument><expr><name>CURLPROXY_SOCKS4A</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>NV</name><argument_list>(<argument><expr><name>CURLPROXY_SOCKS5_HOSTNAME</name></expr></argument>)</argument_list></call></expr>,

<expr><name>NVEND</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>NameValueUnsigned</name></type> <name><name>setopt_nv_CURLAUTH</name><index>[]</index></name> <init>= <expr><block>{

<expr><call><name>NV</name><argument_list>(<argument><expr><name>CURLAUTH_ANY</name></expr></argument>)</argument_list></call></expr>, 

<expr><call><name>NV</name><argument_list>(<argument><expr><name>CURLAUTH_ANYSAFE</name></expr></argument>)</argument_list></call></expr>, 

<expr><call><name>NV</name><argument_list>(<argument><expr><name>CURLAUTH_BASIC</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>NV</name><argument_list>(<argument><expr><name>CURLAUTH_DIGEST</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>NV</name><argument_list>(<argument><expr><name>CURLAUTH_GSSNEGOTIATE</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>NV</name><argument_list>(<argument><expr><name>CURLAUTH_NTLM</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>NV</name><argument_list>(<argument><expr><name>CURLAUTH_DIGEST_IE</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>NV</name><argument_list>(<argument><expr><name>CURLAUTH_NTLM_WB</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>NV</name><argument_list>(<argument><expr><name>CURLAUTH_ONLY</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>NV</name><argument_list>(<argument><expr><name>CURLAUTH_NONE</name></expr></argument>)</argument_list></call></expr>,

<expr><name>NVEND</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>NameValue</name></type> <name><name>setopt_nv_CURL_HTTP_VERSION</name><index>[]</index></name> <init>= <expr><block>{

<expr><call><name>NV</name><argument_list>(<argument><expr><name>CURL_HTTP_VERSION_NONE</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>NV</name><argument_list>(<argument><expr><name>CURL_HTTP_VERSION_1_0</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>NV</name><argument_list>(<argument><expr><name>CURL_HTTP_VERSION_1_1</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>NV</name><argument_list>(<argument><expr><name>CURL_HTTP_VERSION_2_0</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>NV</name><argument_list>(<argument><expr><name>CURL_HTTP_VERSION_2TLS</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>NV</name><argument_list>(<argument><expr><name>CURL_HTTP_VERSION_3</name></expr></argument>)</argument_list></call></expr>,

<expr><name>NVEND</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>NameValue</name></type> <name><name>setopt_nv_CURL_SSLVERSION</name><index>[]</index></name> <init>= <expr><block>{

<expr><call><name>NV</name><argument_list>(<argument><expr><name>CURL_SSLVERSION_DEFAULT</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>NV</name><argument_list>(<argument><expr><name>CURL_SSLVERSION_TLSv1</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>NV</name><argument_list>(<argument><expr><name>CURL_SSLVERSION_SSLv2</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>NV</name><argument_list>(<argument><expr><name>CURL_SSLVERSION_SSLv3</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>NV</name><argument_list>(<argument><expr><name>CURL_SSLVERSION_TLSv1_0</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>NV</name><argument_list>(<argument><expr><name>CURL_SSLVERSION_TLSv1_1</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>NV</name><argument_list>(<argument><expr><name>CURL_SSLVERSION_TLSv1_2</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>NV</name><argument_list>(<argument><expr><name>CURL_SSLVERSION_TLSv1_3</name></expr></argument>)</argument_list></call></expr>,

<expr><name>NVEND</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>NameValue</name></type> <name><name>setopt_nv_CURL_TIMECOND</name><index>[]</index></name> <init>= <expr><block>{

<expr><call><name>NV</name><argument_list>(<argument><expr><name>CURL_TIMECOND_IFMODSINCE</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>NV</name><argument_list>(<argument><expr><name>CURL_TIMECOND_IFUNMODSINCE</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>NV</name><argument_list>(<argument><expr><name>CURL_TIMECOND_LASTMOD</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>NV</name><argument_list>(<argument><expr><name>CURL_TIMECOND_NONE</name></expr></argument>)</argument_list></call></expr>,

<expr><name>NVEND</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>NameValue</name></type> <name><name>setopt_nv_CURLFTPSSL_CCC</name><index>[]</index></name> <init>= <expr><block>{

<expr><call><name>NV</name><argument_list>(<argument><expr><name>CURLFTPSSL_CCC_NONE</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>NV</name><argument_list>(<argument><expr><name>CURLFTPSSL_CCC_PASSIVE</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>NV</name><argument_list>(<argument><expr><name>CURLFTPSSL_CCC_ACTIVE</name></expr></argument>)</argument_list></call></expr>,

<expr><name>NVEND</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>NameValue</name></type> <name><name>setopt_nv_CURLUSESSL</name><index>[]</index></name> <init>= <expr><block>{

<expr><call><name>NV</name><argument_list>(<argument><expr><name>CURLUSESSL_NONE</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>NV</name><argument_list>(<argument><expr><name>CURLUSESSL_TRY</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>NV</name><argument_list>(<argument><expr><name>CURLUSESSL_CONTROL</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>NV</name><argument_list>(<argument><expr><name>CURLUSESSL_ALL</name></expr></argument>)</argument_list></call></expr>,

<expr><name>NVEND</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>NameValueUnsigned</name></type> <name><name>setopt_nv_CURLSSLOPT</name><index>[]</index></name> <init>= <expr><block>{

<expr><call><name>NV</name><argument_list>(<argument><expr><name>CURLSSLOPT_ALLOW_BEAST</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>NV</name><argument_list>(<argument><expr><name>CURLSSLOPT_NO_REVOKE</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>NV</name><argument_list>(<argument><expr><name>CURLSSLOPT_NO_PARTIALCHAIN</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>NV</name><argument_list>(<argument><expr><name>CURLSSLOPT_REVOKE_BEST_EFFORT</name></expr></argument>)</argument_list></call></expr>,

<expr><name>NVEND</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>NameValue</name></type> <name><name>setopt_nv_CURL_NETRC</name><index>[]</index></name> <init>= <expr><block>{

<expr><call><name>NV</name><argument_list>(<argument><expr><name>CURL_NETRC_IGNORED</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>NV</name><argument_list>(<argument><expr><name>CURL_NETRC_OPTIONAL</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>NV</name><argument_list>(<argument><expr><name>CURL_NETRC_REQUIRED</name></expr></argument>)</argument_list></call></expr>,

<expr><name>NVEND</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>NameValue</name></type> <name><name>setopt_nv_CURLPROTO</name><index>[]</index></name> <init>= <expr><block>{

<expr><call><name>NV</name><argument_list>(<argument><expr><name>CURLPROTO_ALL</name></expr></argument>)</argument_list></call></expr>, 

<expr><call><name>NV</name><argument_list>(<argument><expr><name>CURLPROTO_DICT</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>NV</name><argument_list>(<argument><expr><name>CURLPROTO_FILE</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>NV</name><argument_list>(<argument><expr><name>CURLPROTO_FTP</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>NV</name><argument_list>(<argument><expr><name>CURLPROTO_FTPS</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>NV</name><argument_list>(<argument><expr><name>CURLPROTO_GOPHER</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>NV</name><argument_list>(<argument><expr><name>CURLPROTO_HTTP</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>NV</name><argument_list>(<argument><expr><name>CURLPROTO_HTTPS</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>NV</name><argument_list>(<argument><expr><name>CURLPROTO_IMAP</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>NV</name><argument_list>(<argument><expr><name>CURLPROTO_IMAPS</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>NV</name><argument_list>(<argument><expr><name>CURLPROTO_LDAP</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>NV</name><argument_list>(<argument><expr><name>CURLPROTO_LDAPS</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>NV</name><argument_list>(<argument><expr><name>CURLPROTO_POP3</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>NV</name><argument_list>(<argument><expr><name>CURLPROTO_POP3S</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>NV</name><argument_list>(<argument><expr><name>CURLPROTO_RTSP</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>NV</name><argument_list>(<argument><expr><name>CURLPROTO_SCP</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>NV</name><argument_list>(<argument><expr><name>CURLPROTO_SFTP</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>NV</name><argument_list>(<argument><expr><name>CURLPROTO_SMB</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>NV</name><argument_list>(<argument><expr><name>CURLPROTO_SMBS</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>NV</name><argument_list>(<argument><expr><name>CURLPROTO_SMTP</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>NV</name><argument_list>(<argument><expr><name>CURLPROTO_SMTPS</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>NV</name><argument_list>(<argument><expr><name>CURLPROTO_TELNET</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>NV</name><argument_list>(<argument><expr><name>CURLPROTO_TFTP</name></expr></argument>)</argument_list></call></expr>,

<expr><name>NVEND</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>NameValue</name></type> <name><name>setopt_nv_CURLNONZERODEFAULTS</name><index>[]</index></name> <init>= <expr><block>{

<expr><call><name>NV1</name><argument_list>(<argument><expr><name>CURLOPT_SSL_VERIFYPEER</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>NV1</name><argument_list>(<argument><expr><name>CURLOPT_SSL_VERIFYHOST</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>NV1</name><argument_list>(<argument><expr><name>CURLOPT_SSL_ENABLE_NPN</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>NV1</name><argument_list>(<argument><expr><name>CURLOPT_SSL_ENABLE_ALPN</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>NV1</name><argument_list>(<argument><expr><name>CURLOPT_TCP_NODELAY</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>NV1</name><argument_list>(<argument><expr><name>CURLOPT_PROXY_SSL_VERIFYPEER</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>NV1</name><argument_list>(<argument><expr><name>CURLOPT_PROXY_SSL_VERIFYHOST</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>NV1</name><argument_list>(<argument><expr><name>CURLOPT_SOCKS5_AUTH</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>,

<expr><name>NVEND</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADD</name><parameter_list>(<parameter><type><name>args</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { ret = easysrc_add args; if(ret) goto nomem; } while(0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADDF</name><parameter_list>(<parameter><type><name>args</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { ret = easysrc_addf args; if(ret) goto nomem; } while(0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NULL_CHECK</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if(!p) { ret = CURLE_OUT_OF_MEMORY; goto nomem; } } while(0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DECL0</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ADD((&amp;easysrc_decl, s))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DECL1</name><parameter_list>(<parameter><type><name>f</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ADDF((&amp;easysrc_decl, f,a))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DATA0</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ADD((&amp;easysrc_data, s))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DATA1</name><parameter_list>(<parameter><type><name>f</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ADDF((&amp;easysrc_data, f,a))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DATA2</name><parameter_list>(<parameter><type><name>f</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ADDF((&amp;easysrc_data, f,a,b))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DATA3</name><parameter_list>(<parameter><type><name>f</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ADDF((&amp;easysrc_data, f,a,b,c))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CODE0</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ADD((&amp;easysrc_code, s))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CODE1</name><parameter_list>(<parameter><type><name>f</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ADDF((&amp;easysrc_code, f,a))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CODE2</name><parameter_list>(<parameter><type><name>f</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ADDF((&amp;easysrc_code, f,a,b))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CODE3</name><parameter_list>(<parameter><type><name>f</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ADDF((&amp;easysrc_code, f,a,b,c))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLEAN0</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ADD((&amp;easysrc_clean, s))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLEAN1</name><parameter_list>(<parameter><type><name>f</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ADDF((&amp;easysrc_clean, f,a))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REM0</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ADD((&amp;easysrc_toohard, s))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REM1</name><parameter_list>(<parameter><type><name>f</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ADDF((&amp;easysrc_toohard, f,a))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REM2</name><parameter_list>(<parameter><type><name>f</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ADDF((&amp;easysrc_toohard, f,a,b))</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>c_escape</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>c</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>escaped</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>e</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>len</name> <operator>==</operator> <name>CURL_ZERO_TERMINATED</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>len</name> <operator>&gt;</operator> <operator>(</operator><operator>~</operator><operator>(</operator><name>size_t</name><operator>)</operator> <literal type="number">0</literal><operator>)</operator> <operator>/</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>escaped</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><literal type="number">4</literal> <operator>*</operator> <name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>escaped</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <name>escaped</name></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>s</name> <operator>=</operator> <name>str</name></expr>;</init> <condition><expr><operator>(</operator><name>c</name> <operator>=</operator> <operator>*</operator><name>s</name><operator>)</operator> <operator>!=</operator> <literal type="char">'\0'</literal></expr>;</condition> <incr><expr><name>s</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><literal type="string">"\\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>e</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\r'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><literal type="string">"\\r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>e</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\t'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><literal type="string">"\\t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>e</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><literal type="string">"\\\\"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>e</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'"'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><literal type="string">"\\\""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>e</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><operator>!</operator> <call><name>isprint</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msnprintf</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="string">"\\%03o"</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>e</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>e</name><operator>++</operator> <operator>=</operator> <name>c</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><operator>*</operator><name>e</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<return>return <expr><name>escaped</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>CURLcode</name></type> <name>tool_setopt_enum</name><parameter_list>(<parameter><decl><type><name>CURL</name> <modifier>*</modifier></type><name>curl</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>GlobalConfig</name></name> <modifier>*</modifier></type><name>config</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>CURLoption</name></type> <name>tag</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>NameValue</name> <modifier>*</modifier></type><name>nvlist</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>lval</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>ret</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>skip</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><name>lval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>lval</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>skip</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>libcurl</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>skip</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>ret</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>NameValue</name> <modifier>*</modifier></type><name>nv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>nv</name> <operator>=</operator> <name>nvlist</name></expr>;</init> <condition><expr><name><name>nv</name><operator>-&gt;</operator><name>name</name></name></expr>;</condition> <incr><expr><name>nv</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>nv</name><operator>-&gt;</operator><name>value</name></name> <operator>==</operator> <name>lval</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt> 

</block_content>}</block></for>

<if_stmt><if>if<condition>(<expr><operator>!</operator> <name><name>nv</name><operator>-&gt;</operator><name>name</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>CODE2</name><argument_list>(<argument><expr><literal type="string">"curl_easy_setopt(hnd, %s, %ldL);"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>lval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>CODE2</name><argument_list>(<argument><expr><literal type="string">"curl_easy_setopt(hnd, %s, (long)%s);"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>nv</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<label><name>nomem</name>:</label>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>CURLcode</name></type> <name>tool_setopt_flags</name><parameter_list>(<parameter><decl><type><name>CURL</name> <modifier>*</modifier></type><name>curl</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>GlobalConfig</name></name> <modifier>*</modifier></type><name>config</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>CURLoption</name></type> <name>tag</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>NameValue</name> <modifier>*</modifier></type><name>nvlist</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>lval</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>ret</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>skip</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><name>lval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>lval</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>skip</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>libcurl</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>skip</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>ret</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>preamble</name><index>[<expr><literal type="number">80</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>long</name></type> <name>rest</name> <init>= <expr><name>lval</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>const</specifier> <name>NameValue</name> <modifier>*</modifier></type><name>nv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msnprintf</name><argument_list>(<argument><expr><name>preamble</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>preamble</name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><literal type="string">"curl_easy_setopt(hnd, %s, "</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>nv</name> <operator>=</operator> <name>nvlist</name></expr>;</init> <condition><expr><name><name>nv</name><operator>-&gt;</operator><name>name</name></name></expr>;</condition> <incr><expr><name>nv</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>nv</name><operator>-&gt;</operator><name>value</name></name> <operator>&amp;</operator> <operator>~</operator> <name>rest</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>rest</name> <operator>&amp;=</operator> <operator>~</operator> <name><name>nv</name><operator>-&gt;</operator><name>value</name></name></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>CODE3</name><argument_list>(<argument><expr><literal type="string">"%s(long)%s%s"</literal></expr></argument>,

<argument><expr><name>preamble</name></expr></argument>, <argument><expr><name><name>nv</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name>rest</name></expr> ?</condition><then> <expr><literal type="string">" |"</literal></expr> </then><else>: <expr><literal type="string">");"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>rest</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt> 

<expr_stmt><expr><call><name>msnprintf</name><argument_list>(<argument><expr><name>preamble</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>preamble</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%*s"</literal></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>preamble</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if<condition>(<expr><name>rest</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>CODE2</name><argument_list>(<argument><expr><literal type="string">"%s%ldL);"</literal></expr></argument>, <argument><expr><name>preamble</name></expr></argument>, <argument><expr><name>rest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<label><name>nomem</name>:</label>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>CURLcode</name></type> <name>tool_setopt_bitmask</name><parameter_list>(<parameter><decl><type><name>CURL</name> <modifier>*</modifier></type><name>curl</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>GlobalConfig</name></name> <modifier>*</modifier></type><name>config</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>CURLoption</name></type> <name>tag</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>NameValueUnsigned</name> <modifier>*</modifier></type><name>nvlist</name></decl></parameter>,

<parameter><decl><type><name>long</name></type> <name>lval</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>ret</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>skip</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><name>lval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>lval</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>skip</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>libcurl</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>skip</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>ret</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>preamble</name><index>[<expr><literal type="number">80</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>rest</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name>lval</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>NameValueUnsigned</name> <modifier>*</modifier></type><name>nv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msnprintf</name><argument_list>(<argument><expr><name>preamble</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>preamble</name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><literal type="string">"curl_easy_setopt(hnd, %s, "</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>nv</name> <operator>=</operator> <name>nvlist</name></expr>;</init> <condition><expr><name><name>nv</name><operator>-&gt;</operator><name>name</name></name></expr>;</condition> <incr><expr><name>nv</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>nv</name><operator>-&gt;</operator><name>value</name></name> <operator>&amp;</operator> <operator>~</operator> <name>rest</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>rest</name> <operator>&amp;=</operator> <operator>~</operator> <name><name>nv</name><operator>-&gt;</operator><name>value</name></name></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>CODE3</name><argument_list>(<argument><expr><literal type="string">"%s(long)%s%s"</literal></expr></argument>,

<argument><expr><name>preamble</name></expr></argument>, <argument><expr><name><name>nv</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name>rest</name></expr> ?</condition><then> <expr><literal type="string">" |"</literal></expr> </then><else>: <expr><literal type="string">");"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>rest</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt> 

<expr_stmt><expr><call><name>msnprintf</name><argument_list>(<argument><expr><name>preamble</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>preamble</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%*s"</literal></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>preamble</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if<condition>(<expr><name>rest</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>CODE2</name><argument_list>(<argument><expr><literal type="string">"%s%luUL);"</literal></expr></argument>, <argument><expr><name>preamble</name></expr></argument>, <argument><expr><name>rest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<label><name>nomem</name>:</label>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>libcurl_generate_slist</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>curl_slist</name></name> <modifier>*</modifier></type><name>slist</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>slistno</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>ret</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>escaped</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>slistno</name> <operator>=</operator> <operator>++</operator><name>easysrc_slist_count</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DECL1</name><argument_list>(<argument><expr><literal type="string">"struct curl_slist *slist%d;"</literal></expr></argument>, <argument><expr><operator>*</operator><name>slistno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DATA1</name><argument_list>(<argument><expr><literal type="string">"slist%d = NULL;"</literal></expr></argument>, <argument><expr><operator>*</operator><name>slistno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CLEAN1</name><argument_list>(<argument><expr><literal type="string">"curl_slist_free_all(slist%d);"</literal></expr></argument>, <argument><expr><operator>*</operator><name>slistno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CLEAN1</name><argument_list>(<argument><expr><literal type="string">"slist%d = NULL;"</literal></expr></argument>, <argument><expr><operator>*</operator><name>slistno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init>;</init> <condition><expr><name>slist</name></expr>;</condition> <incr><expr><name>slist</name> <operator>=</operator> <name><name>slist</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name>escaped</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>escaped</name> <operator>=</operator> <call><name>c_escape</name><argument_list>(<argument><expr><name><name>slist</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>CURL_ZERO_TERMINATED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>escaped</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>DATA3</name><argument_list>(<argument><expr><literal type="string">"slist%d = curl_slist_append(slist%d, \"%s\");"</literal></expr></argument>,

<argument><expr><operator>*</operator><name>slistno</name></expr></argument>, <argument><expr><operator>*</operator><name>slistno</name></expr></argument>, <argument><expr><name>escaped</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<label><name>nomem</name>:</label>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name>escaped</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>CURLcode</name></type> <name>libcurl_generate_mime</name><parameter_list>(<parameter><decl><type><name>CURL</name> <modifier>*</modifier></type><name>curl</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>GlobalConfig</name></name> <modifier>*</modifier></type><name>config</name></decl></parameter>,

<parameter><decl><type><name>tool_mime</name> <modifier>*</modifier></type><name>toolmime</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>mimeno</name></decl></parameter>)</parameter_list>;</function_decl> 

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>libcurl_generate_mime_part</name><parameter_list>(<parameter><decl><type><name>CURL</name> <modifier>*</modifier></type><name>curl</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>GlobalConfig</name></name> <modifier>*</modifier></type><name>config</name></decl></parameter>,

<parameter><decl><type><name>tool_mime</name> <modifier>*</modifier></type><name>part</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>mimeno</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>ret</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>submimeno</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>escaped</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name> <init>= <expr><name><name>part</name><operator>-&gt;</operator><name>filename</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>part</name><operator>-&gt;</operator><name>prev</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>libcurl_generate_mime_part</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>config</name></expr></argument>, <argument><expr><name><name>part</name><operator>-&gt;</operator><name>prev</name></name></expr></argument>, <argument><expr><name>mimeno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>ret</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>CODE2</name><argument_list>(<argument><expr><literal type="string">"part%d = curl_mime_addpart(mime%d);"</literal></expr></argument>, <argument><expr><name>mimeno</name></expr></argument>, <argument><expr><name>mimeno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch<condition>(<expr><name><name>part</name><operator>-&gt;</operator><name>kind</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>TOOLMIME_PARTS</name></expr>:</case>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>libcurl_generate_mime</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>config</name></expr></argument>, <argument><expr><name>part</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>submimeno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>CODE2</name><argument_list>(<argument><expr><literal type="string">"curl_mime_subparts(part%d, mime%d);"</literal></expr></argument>, <argument><expr><name>mimeno</name></expr></argument>, <argument><expr><name>submimeno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CODE1</name><argument_list>(<argument><expr><literal type="string">"mime%d = NULL;"</literal></expr></argument>, <argument><expr><name>submimeno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>TOOLMIME_DATA</name></expr>:</case>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DOES_CONVERSIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>escaped</name> <operator>=</operator> <call><name>c_escape</name><argument_list>(<argument><expr><name><name>part</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>CURL_ZERO_TERMINATED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>NULL_CHECK</name><argument_list>(<argument><expr><name>escaped</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CODE1</name><argument_list>(<argument><expr><literal type="string">"/* \"%s\" */"</literal></expr></argument>, <argument><expr><name>escaped</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>size</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>part</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cp</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><name>size</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>NULL_CHECK</name><argument_list>(<argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><name><name>part</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>size</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>convert_to_network</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>data</name> <operator>=</operator> <name>cp</name></expr>;</expr_stmt>

</block_content>}</block>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name>data</name> <operator>=</operator> <name><name>part</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name>escaped</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>escaped</name> <operator>=</operator> <call><name>c_escape</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>CURL_ZERO_TERMINATED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>NULL_CHECK</name><argument_list>(<argument><expr><name>escaped</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CODE2</name><argument_list>(<argument><expr><literal type="string">"curl_mime_data(part%d, \"%s\", CURL_ZERO_TERMINATED);"</literal></expr></argument>,

<argument><expr><name>mimeno</name></expr></argument>, <argument><expr><name>escaped</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>TOOLMIME_FILE</name></expr>:</case>

<case>case <expr><name>TOOLMIME_FILEDATA</name></expr>:</case>

<expr_stmt><expr><name>escaped</name> <operator>=</operator> <call><name>c_escape</name><argument_list>(<argument><expr><name><name>part</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>CURL_ZERO_TERMINATED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>NULL_CHECK</name><argument_list>(<argument><expr><name>escaped</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CODE2</name><argument_list>(<argument><expr><literal type="string">"curl_mime_filedata(part%d, \"%s\");"</literal></expr></argument>, <argument><expr><name>mimeno</name></expr></argument>, <argument><expr><name>escaped</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>part</name><operator>-&gt;</operator><name>kind</name></name> <operator>==</operator> <name>TOOLMIME_FILEDATA</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>filename</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>CODE1</name><argument_list>(<argument><expr><literal type="string">"curl_mime_filename(part%d, NULL);"</literal></expr></argument>, <argument><expr><name>mimeno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>TOOLMIME_STDIN</name></expr>:</case>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>filename</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>filename</name> <operator>=</operator> <literal type="string">"-"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<case>case <expr><name>TOOLMIME_STDINDATA</name></expr>:</case>

<expr_stmt><expr><call><name>CODE1</name><argument_list>(<argument><expr><literal type="string">"curl_mime_data_cb(part%d, -1, (curl_read_callback) fread, \\"</literal></expr></argument>,

<argument><expr><name>mimeno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CODE0</name><argument_list>(<argument><expr><literal type="string">" (curl_seek_callback) fseek, NULL, stdin);"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>ret</name> <operator>&amp;&amp;</operator> <name><name>part</name><operator>-&gt;</operator><name>encoder</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name>escaped</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>escaped</name> <operator>=</operator> <call><name>c_escape</name><argument_list>(<argument><expr><name><name>part</name><operator>-&gt;</operator><name>encoder</name></name></expr></argument>, <argument><expr><name>CURL_ZERO_TERMINATED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>NULL_CHECK</name><argument_list>(<argument><expr><name>escaped</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CODE2</name><argument_list>(<argument><expr><literal type="string">"curl_mime_encoder(part%d, \"%s\");"</literal></expr></argument>, <argument><expr><name>mimeno</name></expr></argument>, <argument><expr><name>escaped</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>ret</name> <operator>&amp;&amp;</operator> <name>filename</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name>escaped</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>escaped</name> <operator>=</operator> <call><name>c_escape</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>CURL_ZERO_TERMINATED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>NULL_CHECK</name><argument_list>(<argument><expr><name>escaped</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CODE2</name><argument_list>(<argument><expr><literal type="string">"curl_mime_filename(part%d, \"%s\");"</literal></expr></argument>, <argument><expr><name>mimeno</name></expr></argument>, <argument><expr><name>escaped</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>ret</name> <operator>&amp;&amp;</operator> <name><name>part</name><operator>-&gt;</operator><name>name</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name>escaped</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>escaped</name> <operator>=</operator> <call><name>c_escape</name><argument_list>(<argument><expr><name><name>part</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>CURL_ZERO_TERMINATED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>NULL_CHECK</name><argument_list>(<argument><expr><name>escaped</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CODE2</name><argument_list>(<argument><expr><literal type="string">"curl_mime_name(part%d, \"%s\");"</literal></expr></argument>, <argument><expr><name>mimeno</name></expr></argument>, <argument><expr><name>escaped</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>ret</name> <operator>&amp;&amp;</operator> <name><name>part</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name>escaped</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>escaped</name> <operator>=</operator> <call><name>c_escape</name><argument_list>(<argument><expr><name><name>part</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name>CURL_ZERO_TERMINATED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>NULL_CHECK</name><argument_list>(<argument><expr><name>escaped</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CODE2</name><argument_list>(<argument><expr><literal type="string">"curl_mime_type(part%d, \"%s\");"</literal></expr></argument>, <argument><expr><name>mimeno</name></expr></argument>, <argument><expr><name>escaped</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>ret</name> <operator>&amp;&amp;</operator> <name><name>part</name><operator>-&gt;</operator><name>headers</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>slistno</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>libcurl_generate_slist</name><argument_list>(<argument><expr><name><name>part</name><operator>-&gt;</operator><name>headers</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>slistno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>CODE2</name><argument_list>(<argument><expr><literal type="string">"curl_mime_headers(part%d, slist%d, 1);"</literal></expr></argument>, <argument><expr><name>mimeno</name></expr></argument>, <argument><expr><name>slistno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CODE1</name><argument_list>(<argument><expr><literal type="string">"slist%d = NULL;"</literal></expr></argument>, <argument><expr><name>slistno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<label><name>nomem</name>:</label>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DOES_CONVERSIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name>data</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name>escaped</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>libcurl_generate_mime</name><parameter_list>(<parameter><decl><type><name>CURL</name> <modifier>*</modifier></type><name>curl</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>GlobalConfig</name></name> <modifier>*</modifier></type><name>config</name></decl></parameter>,

<parameter><decl><type><name>tool_mime</name> <modifier>*</modifier></type><name>toolmime</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>mimeno</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>ret</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>mimeno</name> <operator>=</operator> <operator>++</operator><name>easysrc_mime_count</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DECL1</name><argument_list>(<argument><expr><literal type="string">"curl_mime *mime%d;"</literal></expr></argument>, <argument><expr><operator>*</operator><name>mimeno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DATA1</name><argument_list>(<argument><expr><literal type="string">"mime%d = NULL;"</literal></expr></argument>, <argument><expr><operator>*</operator><name>mimeno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CODE1</name><argument_list>(<argument><expr><literal type="string">"mime%d = curl_mime_init(hnd);"</literal></expr></argument>, <argument><expr><operator>*</operator><name>mimeno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CLEAN1</name><argument_list>(<argument><expr><literal type="string">"curl_mime_free(mime%d);"</literal></expr></argument>, <argument><expr><operator>*</operator><name>mimeno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CLEAN1</name><argument_list>(<argument><expr><literal type="string">"mime%d = NULL;"</literal></expr></argument>, <argument><expr><operator>*</operator><name>mimeno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>toolmime</name><operator>-&gt;</operator><name>subparts</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>DECL1</name><argument_list>(<argument><expr><literal type="string">"curl_mimepart *part%d;"</literal></expr></argument>, <argument><expr><operator>*</operator><name>mimeno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>libcurl_generate_mime_part</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>config</name></expr></argument>,

<argument><expr><name><name>toolmime</name><operator>-&gt;</operator><name>subparts</name></name></expr></argument>, <argument><expr><operator>*</operator><name>mimeno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<label><name>nomem</name>:</label>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>CURLcode</name></type> <name>tool_setopt_mimepost</name><parameter_list>(<parameter><decl><type><name>CURL</name> <modifier>*</modifier></type><name>curl</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>GlobalConfig</name></name> <modifier>*</modifier></type><name>config</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>CURLoption</name></type> <name>tag</name></decl></parameter>,

<parameter><decl><type><name>curl_mime</name> <modifier>*</modifier></type><name>mimepost</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>ret</name> <init>= <expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><name>mimepost</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mimeno</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>ret</name> <operator>&amp;&amp;</operator> <name><name>config</name><operator>-&gt;</operator><name>libcurl</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>libcurl_generate_mime</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>config</name></expr></argument>,

<argument><expr><name><name>config</name><operator>-&gt;</operator><name>current</name><operator>-&gt;</operator><name>mimeroot</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mimeno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>CODE2</name><argument_list>(<argument><expr><literal type="string">"curl_easy_setopt(hnd, %s, mime%d);"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>mimeno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<label><name>nomem</name>:</label>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>CURLcode</name></type> <name>tool_setopt_slist</name><parameter_list>(<parameter><decl><type><name>CURL</name> <modifier>*</modifier></type><name>curl</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>GlobalConfig</name></name> <modifier>*</modifier></type><name>config</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>CURLoption</name></type> <name>tag</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>curl_slist</name></name> <modifier>*</modifier></type><name>list</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>ret</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>libcurl</name></name> <operator>&amp;&amp;</operator> <name>list</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>ret</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>libcurl_generate_slist</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>CODE2</name><argument_list>(<argument><expr><literal type="string">"curl_easy_setopt(hnd, %s, slist%d);"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<label><name>nomem</name>:</label>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>CURLcode</name></type> <name>tool_setopt</name><parameter_list>(<parameter><decl><type><name>CURL</name> <modifier>*</modifier></type><name>curl</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>str</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>GlobalConfig</name></name> <modifier>*</modifier></type><name>config</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>CURLoption</name></type> <name>tag</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>va_list</name></type> <name>arg</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>remark</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>skip</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>escape</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>escaped</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>ret</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>tag</name> <operator>&lt;</operator> <name>CURLOPTTYPE_OBJECTPOINT</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>long</name></type> <name>lval</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>long</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>defval</name> <init>= <expr><literal type="number">0L</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>NameValue</name> <modifier>*</modifier></type><name>nv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>nv</name> <operator>=</operator> <name>setopt_nv_CURLNONZERODEFAULTS</name></expr>;</init> <condition><expr><name><name>nv</name><operator>-&gt;</operator><name>name</name></name></expr>;</condition> <incr><expr><name>nv</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>nv</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>defval</name> <operator>=</operator> <name><name>nv</name><operator>-&gt;</operator><name>value</name></name></expr>;</expr_stmt>

<break>break;</break> 

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>msnprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%ldL"</literal></expr></argument>, <argument><expr><name>lval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>value</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><name>lval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>lval</name> <operator>==</operator> <name>defval</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>skip</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name>tag</name> <operator>&lt;</operator> <name>CURLOPTTYPE_OFF_T</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pval</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>tag</name> <operator>&gt;=</operator> <name>CURLOPTTYPE_FUNCTIONPOINT</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>pval</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>value</name> <operator>=</operator> <literal type="string">"functionpointer"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>remark</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>skip</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name>pval</name> <operator>&amp;&amp;</operator> <name>str</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>value</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>pval</name></expr>;</expr_stmt>

<expr_stmt><expr><name>escape</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name>pval</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>value</name> <operator>=</operator> <literal type="string">"objectpointer"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>remark</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>skip</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><name>pval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<decl_stmt><decl><type><name>curl_off_t</name></type> <name>oval</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>curl_off_t</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msnprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><literal type="string">"(curl_off_t)%"</literal> <name>CURL_FORMAT_CURL_OFF_T</name></expr></argument>, <argument><expr><name>oval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>value</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><name>oval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>oval</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>skip</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>libcurl</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>skip</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>ret</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>remark</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>REM2</name><argument_list>(<argument><expr><literal type="string">"%s set to a %s"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>escape</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>escaped</name> <operator>=</operator> <call><name>c_escape</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>CURL_ZERO_TERMINATED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>NULL_CHECK</name><argument_list>(<argument><expr><name>escaped</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CODE2</name><argument_list>(<argument><expr><literal type="string">"curl_easy_setopt(hnd, %s, \"%s\");"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>escaped</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>CODE2</name><argument_list>(<argument><expr><literal type="string">"curl_easy_setopt(hnd, %s, %s);"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<label><name>nomem</name>:</label>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name>escaped</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tool_cfgable.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tool_setopt.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><name>bool</name></type> <name>tool_setopt_skip</name><parameter_list>(<parameter><decl><type><name>CURLoption</name></type> <name>tag</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_PROXY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USED_TAG</name></cpp:macro></cpp:define>

<switch>switch<condition>(<expr><name>tag</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>CURLOPT_HAPROXYPROTOCOL</name></expr>:</case>

<case>case <expr><name>CURLOPT_HTTPPROXYTUNNEL</name></expr>:</case>

<case>case <expr><name>CURLOPT_NOPROXY</name></expr>:</case>

<case>case <expr><name>CURLOPT_PRE_PROXY</name></expr>:</case>

<case>case <expr><name>CURLOPT_PROXY</name></expr>:</case>

<case>case <expr><name>CURLOPT_PROXYAUTH</name></expr>:</case>

<case>case <expr><name>CURLOPT_PROXY_CAINFO</name></expr>:</case>

<case>case <expr><name>CURLOPT_PROXY_CAPATH</name></expr>:</case>

<case>case <expr><name>CURLOPT_PROXY_CRLFILE</name></expr>:</case>

<case>case <expr><name>CURLOPT_PROXYHEADER</name></expr>:</case>

<case>case <expr><name>CURLOPT_PROXY_KEYPASSWD</name></expr>:</case>

<case>case <expr><name>CURLOPT_PROXYPASSWORD</name></expr>:</case>

<case>case <expr><name>CURLOPT_PROXY_PINNEDPUBLICKEY</name></expr>:</case>

<case>case <expr><name>CURLOPT_PROXYPORT</name></expr>:</case>

<case>case <expr><name>CURLOPT_PROXY_SERVICE_NAME</name></expr>:</case>

<case>case <expr><name>CURLOPT_PROXY_SSLCERT</name></expr>:</case>

<case>case <expr><name>CURLOPT_PROXY_SSLCERTTYPE</name></expr>:</case>

<case>case <expr><name>CURLOPT_PROXY_SSL_CIPHER_LIST</name></expr>:</case>

<case>case <expr><name>CURLOPT_PROXY_SSLKEY</name></expr>:</case>

<case>case <expr><name>CURLOPT_PROXY_SSLKEYTYPE</name></expr>:</case>

<case>case <expr><name>CURLOPT_PROXY_SSL_OPTIONS</name></expr>:</case>

<case>case <expr><name>CURLOPT_PROXY_SSL_VERIFYHOST</name></expr>:</case>

<case>case <expr><name>CURLOPT_PROXY_SSL_VERIFYPEER</name></expr>:</case>

<case>case <expr><name>CURLOPT_PROXY_SSLVERSION</name></expr>:</case>

<case>case <expr><name>CURLOPT_PROXY_TLS13_CIPHERS</name></expr>:</case>

<case>case <expr><name>CURLOPT_PROXY_TLSAUTH_PASSWORD</name></expr>:</case>

<case>case <expr><name>CURLOPT_PROXY_TLSAUTH_TYPE</name></expr>:</case>

<case>case <expr><name>CURLOPT_PROXY_TLSAUTH_USERNAME</name></expr>:</case>

<case>case <expr><name>CURLOPT_PROXY_TRANSFER_MODE</name></expr>:</case>

<case>case <expr><name>CURLOPT_PROXYTYPE</name></expr>:</case>

<case>case <expr><name>CURLOPT_PROXYUSERNAME</name></expr>:</case>

<case>case <expr><name>CURLOPT_PROXYUSERPWD</name></expr>:</case>

<return>return <expr><name>TRUE</name></expr>;</return>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_FTP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USED_TAG</name></cpp:macro></cpp:define>

<switch>switch<condition>(<expr><name>tag</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>CURLOPT_FTPPORT</name></expr>:</case>

<case>case <expr><name>CURLOPT_FTP_ACCOUNT</name></expr>:</case>

<case>case <expr><name>CURLOPT_FTP_ALTERNATIVE_TO_USER</name></expr>:</case>

<case>case <expr><name>CURLOPT_FTP_FILEMETHOD</name></expr>:</case>

<case>case <expr><name>CURLOPT_FTP_SKIP_PASV_IP</name></expr>:</case>

<case>case <expr><name>CURLOPT_FTP_USE_EPRT</name></expr>:</case>

<case>case <expr><name>CURLOPT_FTP_USE_EPSV</name></expr>:</case>

<case>case <expr><name>CURLOPT_FTP_USE_PRET</name></expr>:</case>

<case>case <expr><name>CURLOPT_KRBLEVEL</name></expr>:</case>

<return>return <expr><name>TRUE</name></expr>;</return>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_RTSP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USED_TAG</name></cpp:macro></cpp:define>

<switch>switch<condition>(<expr><name>tag</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>CURLOPT_INTERLEAVEDATA</name></expr>:</case>

<return>return <expr><name>TRUE</name></expr>;</return>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_HTTP</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_COOKIES</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USED_TAG</name></cpp:macro></cpp:define>

<switch>switch<condition>(<expr><name>tag</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>CURLOPT_COOKIE</name></expr>:</case>

<case>case <expr><name>CURLOPT_COOKIEFILE</name></expr>:</case>

<case>case <expr><name>CURLOPT_COOKIEJAR</name></expr>:</case>

<case>case <expr><name>CURLOPT_COOKIESESSION</name></expr>:</case>

<return>return <expr><name>TRUE</name></expr>;</return>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_TELNET</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USED_TAG</name></cpp:macro></cpp:define>

<switch>switch<condition>(<expr><name>tag</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>CURLOPT_TELNETOPTIONS</name></expr>:</case>

<return>return <expr><name>TRUE</name></expr>;</return>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_TFTP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USED_TAG</name></cpp:macro></cpp:define>

<switch>switch<condition>(<expr><name>tag</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>CURLOPT_TFTP_BLKSIZE</name></expr>:</case>

<case>case <expr><name>CURLOPT_TFTP_NO_OPTIONS</name></expr>:</case>

<return>return <expr><name>TRUE</name></expr>;</return>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_NETRC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USED_TAG</name></cpp:macro></cpp:define>

<switch>switch<condition>(<expr><name>tag</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>CURLOPT_NETRC</name></expr>:</case>

<case>case <expr><name>CURLOPT_NETRC_FILE</name></expr>:</case>

<return>return <expr><name>TRUE</name></expr>;</return>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>USED_TAG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>tag</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></function>

</unit>
