<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\curl-analysis\_cppstats\curl\src\tool_paramhlp.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tool_setup.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"strcase.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENABLE_CURLX_PRINTF</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curlx.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tool_cfgable.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tool_getparam.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tool_getpass.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tool_homedir.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tool_msgs.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tool_paramhlp.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tool_version.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memdebug.h"</cpp:file></cpp:include> 

<function><type><name><name>struct</name> <name>getout</name></name> <modifier>*</modifier></type><name>new_getout</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>OperationConfig</name></name> <modifier>*</modifier></type><name>config</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>getout</name></name> <modifier>*</modifier></type><name>node</name> <init>= <expr><call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>getout</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>getout</name></name> <modifier>*</modifier></type><name>last</name> <init>= <expr><name><name>config</name><operator>-&gt;</operator><name>url_last</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>node</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>last</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>last</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>node</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>url_list</name></name> <operator>=</operator> <name>node</name></expr>;</expr_stmt></block_content></block></else></if_stmt> 

<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>url_last</name></name> <operator>=</operator> <name>node</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name><name>config</name><operator>-&gt;</operator><name>default_node_flags</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>node</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>ParameterError</name></type> <name>file2string</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>bufp</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>string</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>file</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>alloc</name> <init>= <expr><literal type="number">512</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>alloc_needed</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>stringlen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>string</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>alloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>string</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>PARAM_NO_MEM</name></expr>;</return></block_content></block></if></if_stmt>

<while>while<condition>(<expr><call><name>fgets</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>buflen</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="char">'\r'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>ptr</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>ptr</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>buflen</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>alloc_needed</name> <operator>=</operator> <name>stringlen</name> <operator>+</operator> <name>buflen</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>alloc</name> <operator>&lt;</operator> <name>alloc_needed</name></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SIZEOF_SIZE_T</name> <operator>&lt;</operator> <literal type="number">8</literal></expr></cpp:if>

<if_stmt><if>if<condition>(<expr><name>alloc</name> <operator>&gt;=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>SIZE_T_MAX</name><operator>/</operator><literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>PARAM_NO_MEM</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>alloc</name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>realloc</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><name>alloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>ptr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>PARAM_NO_MEM</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>string</name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>string</name> <operator>+</operator> <name>stringlen</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>stringlen</name> <operator>+=</operator> <name>buflen</name></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>bufp</name> <operator>=</operator> <name>string</name></expr>;</expr_stmt>

<return>return <expr><name>PARAM_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>ParameterError</name></type> <name>file2memory</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>bufp</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>size</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>newbuf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>nused</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>file</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>nread</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>alloc</name> <init>= <expr><literal type="number">512</literal></expr></init></decl>;</decl_stmt>

<do>do <block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>buffer</name> <operator>||</operator> <operator>(</operator><name>alloc</name> <operator>==</operator> <name>nused</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>alloc</name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;</operator> <operator>(</operator><operator>(</operator><name>size_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>PARAM_NO_MEM</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>alloc</name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>newbuf</name> <operator>=</operator> <call><name>realloc</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>alloc</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>newbuf</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>PARAM_NO_MEM</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>buffer</name> <operator>=</operator> <name>newbuf</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>nread</name> <operator>=</operator> <call><name>fread</name><argument_list>(<argument><expr><name>buffer</name> <operator>+</operator> <name>nused</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>alloc</name><operator>-</operator><name>nused</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>nused</name> <operator>+=</operator> <name>nread</name></expr>;</expr_stmt>

</block_content>}</block> while<condition>(<expr><name>nread</name></expr>)</condition>;</do>

<expr_stmt><expr><name><name>buffer</name><index>[<expr><name>nused</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>alloc</name> <operator>!=</operator> <name>nused</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>newbuf</name> <operator>=</operator> <call><name>realloc</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>nused</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>newbuf</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>PARAM_NO_MEM</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>buffer</name> <operator>=</operator> <name>newbuf</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>nused</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>size</name> <operator>=</operator> <name>nused</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>bufp</name> <operator>=</operator> <name>buffer</name></expr>;</expr_stmt>

<return>return <expr><name>PARAM_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>cleanarg</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_WRITABLE_ARGV</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name>str</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>str</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>ParameterError</name></type> <name>str2num</name><parameter_list>(<parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>val</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>str</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>endptr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>num</name></decl>;</decl_stmt>

<expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>num</name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>endptr</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>errno</name> <operator>==</operator> <name>ERANGE</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>PARAM_NUMBER_TOO_LARGE</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>endptr</name> <operator>!=</operator> <name>str</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>endptr</name> <operator>==</operator> <name>str</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>val</name> <operator>=</operator> <name>num</name></expr>;</expr_stmt>

<return>return <expr><name>PARAM_OK</name></expr>;</return> 

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>PARAM_BAD_NUMERIC</name></expr>;</return> 

</block_content>}</block></function>

<function><type><name>ParameterError</name></type> <name>str2unum</name><parameter_list>(<parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>val</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ParameterError</name></type> <name>result</name> <init>= <expr><call><name>str2num</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name> <operator>!=</operator> <name>PARAM_OK</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>*</operator><name>val</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>PARAM_NEGATIVE_NUMERIC</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>PARAM_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>ParameterError</name></type> <name>str2unummax</name><parameter_list>(<parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>val</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>max</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ParameterError</name></type> <name>result</name> <init>= <expr><call><name>str2unum</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name> <operator>!=</operator> <name>PARAM_OK</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>*</operator><name>val</name> <operator>&gt;</operator> <name>max</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>PARAM_NUMBER_TOO_LARGE</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>PARAM_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ParameterError</name></type> <name>str2double</name><parameter_list>(<parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>val</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>max</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>str</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>endptr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>num</name></decl>;</decl_stmt>

<expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>num</name> <operator>=</operator> <call><name>strtod</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>endptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>errno</name> <operator>==</operator> <name>ERANGE</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>PARAM_NUMBER_TOO_LARGE</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>num</name> <operator>&gt;</operator> <name>max</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>PARAM_NUMBER_TOO_LARGE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>endptr</name> <operator>!=</operator> <name>str</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>endptr</name> <operator>==</operator> <name>str</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>val</name> <operator>=</operator> <name>num</name></expr>;</expr_stmt>

<return>return <expr><name>PARAM_OK</name></expr>;</return> 

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>PARAM_BAD_NUMERIC</name></expr>;</return> 

</block_content>}</block></function>

<function><type><name>ParameterError</name></type> <name>str2udouble</name><parameter_list>(<parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>valp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>max</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>value</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ParameterError</name></type> <name>result</name> <init>= <expr><call><name>str2double</name><argument_list>(<argument><expr><operator>&amp;</operator><name>value</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>max</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name> <operator>!=</operator> <name>PARAM_OK</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>value</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>PARAM_NEGATIVE_NUMERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>valp</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>

<return>return <expr><name>PARAM_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>long</name></type> <name>proto2num</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>OperationConfig</name></name> <modifier>*</modifier></type><name>config</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>val</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sep</name> <init>= <expr><literal type="string">","</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>token</name></decl>;</decl_stmt>

<struct><specifier>static</specifier> struct <name>sprotos</name> <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>bit</name></decl>;</decl_stmt>

}</block> <decl>const <name><name>protos</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"all"</literal></expr>, <expr><name>CURLPROTO_ALL</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"http"</literal></expr>, <expr><name>CURLPROTO_HTTP</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"https"</literal></expr>, <expr><name>CURLPROTO_HTTPS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"ftp"</literal></expr>, <expr><name>CURLPROTO_FTP</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"ftps"</literal></expr>, <expr><name>CURLPROTO_FTPS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"scp"</literal></expr>, <expr><name>CURLPROTO_SCP</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"sftp"</literal></expr>, <expr><name>CURLPROTO_SFTP</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"telnet"</literal></expr>, <expr><name>CURLPROTO_TELNET</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"ldap"</literal></expr>, <expr><name>CURLPROTO_LDAP</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"ldaps"</literal></expr>, <expr><name>CURLPROTO_LDAPS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"dict"</literal></expr>, <expr><name>CURLPROTO_DICT</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"file"</literal></expr>, <expr><name>CURLPROTO_FILE</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"tftp"</literal></expr>, <expr><name>CURLPROTO_TFTP</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"imap"</literal></expr>, <expr><name>CURLPROTO_IMAP</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"imaps"</literal></expr>, <expr><name>CURLPROTO_IMAPS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"pop3"</literal></expr>, <expr><name>CURLPROTO_POP3</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"pop3s"</literal></expr>, <expr><name>CURLPROTO_POP3S</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"smtp"</literal></expr>, <expr><name>CURLPROTO_SMTP</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"smtps"</literal></expr>, <expr><name>CURLPROTO_SMTPS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"rtsp"</literal></expr>, <expr><name>CURLPROTO_RTSP</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"gopher"</literal></expr>, <expr><name>CURLPROTO_GOPHER</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"smb"</literal></expr>, <expr><name>CURLPROTO_SMB</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"smbs"</literal></expr>, <expr><name>CURLPROTO_SMBS</name></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>

}</block></expr></init></decl>;</struct>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>str</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>buffer</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>buffer</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<for>for<control>(<init><expr><name>token</name> <operator>=</operator> <call><name>strtok</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>sep</name></expr></argument>)</argument_list></call></expr>;</init>

<condition><expr><name>token</name></expr>;</condition>

<incr><expr><name>token</name> <operator>=</operator> <call><name>strtok</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>sep</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block>{<block_content>

<enum>enum <name>e_action</name> <block>{ <decl><name>allow</name></decl>, <decl><name>deny</name></decl>, <decl><name>set</name></decl> }</block> <decl><name>action</name> <init>= <expr><name>allow</name></expr></init></decl>;</enum>

<decl_stmt><decl><type><name><name>struct</name> <name>sprotos</name></name> <specifier>const</specifier> <modifier>*</modifier></type><name>pp</name></decl>;</decl_stmt>

<while>while<condition>(<expr><operator>!</operator><call><name>ISALNUM</name><argument_list>(<argument><expr><operator>*</operator><name>token</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> 

<switch>switch <condition>(<expr><operator>*</operator><name>token</name><operator>++</operator></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'='</literal></expr>:</case>

<expr_stmt><expr><name>action</name> <operator>=</operator> <name>set</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'-'</literal></expr>:</case>

<expr_stmt><expr><name>action</name> <operator>=</operator> <name>deny</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'+'</literal></expr>:</case>

<expr_stmt><expr><name>action</name> <operator>=</operator> <name>allow</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default> 

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></while>

<for>for<control>(<init><expr><name>pp</name> <operator>=</operator> <name>protos</name></expr>;</init> <condition><expr><name><name>pp</name><operator>-&gt;</operator><name>name</name></name></expr>;</condition> <incr><expr><name>pp</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>curl_strequal</name><argument_list>(<argument><expr><name>token</name></expr></argument>, <argument><expr><name><name>pp</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<switch>switch<condition>(<expr><name>action</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>deny</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>val</name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name><name>pp</name><operator>-&gt;</operator><name>bit</name></name><operator>)</operator></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>allow</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>val</name> <operator>|=</operator> <name><name>pp</name><operator>-&gt;</operator><name>bit</name></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>set</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>val</name> <operator>=</operator> <name><name>pp</name><operator>-&gt;</operator><name>bit</name></name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><name><name>pp</name><operator>-&gt;</operator><name>name</name></name><operator>)</operator></expr>)</condition> <block>{<block_content> 

<if_stmt><if>if<condition>(<expr><name>action</name> <operator>==</operator> <name>set</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>val</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>warnf</name><argument_list>(<argument><expr><name><name>config</name><operator>-&gt;</operator><name>global</name></name></expr></argument>, <argument><expr><literal type="string">"unrecognized protocol '%s'\n"</literal></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>check_protocol</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier> <modifier>*</modifier></type><name>pp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>curl_version_info_data</name> <modifier>*</modifier></type><name>curlinfo</name> <init>= <expr><call><name>curl_version_info</name><argument_list>(<argument><expr><name>CURLVERSION_NOW</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>str</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>PARAM_REQUIRES_PARAMETER</name></expr>;</return></block_content></block></if></if_stmt>

<for>for<control>(<init><expr><name>pp</name> <operator>=</operator> <name><name>curlinfo</name><operator>-&gt;</operator><name>protocols</name></name></expr>;</init> <condition><expr><operator>*</operator><name>pp</name></expr>;</condition> <incr><expr><name>pp</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>curl_strequal</name><argument_list>(<argument><expr><operator>*</operator><name>pp</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>PARAM_OK</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>PARAM_LIBCURL_UNSUPPORTED_PROTOCOL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>ParameterError</name></type> <name>str2offset</name><parameter_list>(<parameter><decl><type><name>curl_off_t</name> <modifier>*</modifier></type><name>val</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>endptr</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>str</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>PARAM_NEGATIVE_NUMERIC</name></expr>;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive><expr><operator>(</operator><name>SIZEOF_CURL_OFF_T</name> <operator>&gt;</operator> <name>SIZEOF_LONG</name><operator>)</operator></expr></cpp:if>

<block>{<block_content>

<decl_stmt><decl><type><name>CURLofft</name></type> <name>offt</name> <init>= <expr><call><name>curlx_strtoofft</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>endptr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>CURL_OFFT_FLOW</name> <operator>==</operator> <name>offt</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>PARAM_NUMBER_TOO_LARGE</name></expr>;</return></block_content></block></if>

<if type="elseif">else if<condition>(<expr><name>CURL_OFFT_INVAL</name> <operator>==</operator> <name>offt</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>PARAM_BAD_NUMERIC</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>val</name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>endptr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><operator>*</operator><name>val</name> <operator>==</operator> <name>LONG_MIN</name> <operator>||</operator> <operator>*</operator><name>val</name> <operator>==</operator> <name>LONG_MAX</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>errno</name> <operator>==</operator> <name>ERANGE</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>PARAM_NUMBER_TOO_LARGE</name></expr>;</return></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>endptr</name> <operator>!=</operator> <name>str</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>endptr</name> <operator>==</operator> <name>str</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>PARAM_OK</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>PARAM_BAD_NUMERIC</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>checkpasswd</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>kind</name></decl></parameter>, 

<parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>i</name></decl></parameter>, 

<parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>last</name></decl></parameter>, 

<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>userpwd</name></decl></parameter>)</parameter_list> 

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psep</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>osep</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>*</operator><name>userpwd</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_OK</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>psep</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><operator>*</operator><name>userpwd</name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>osep</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><operator>*</operator><name>userpwd</name></expr></argument>, <argument><expr><literal type="char">';'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>psep</name> <operator>&amp;&amp;</operator> <operator>*</operator><operator>*</operator><name>userpwd</name> <operator>!=</operator> <literal type="char">';'</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>passwd</name><index>[<expr><literal type="number">256</literal></expr>]</index></name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>prompt</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>passwdlen</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>userlen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><operator>*</operator><name>userpwd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>passptr</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>osep</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>osep</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>i</name> <operator>&amp;&amp;</operator> <name>last</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>curlx_msnprintf</name><argument_list>(<argument><expr><name>prompt</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>prompt</name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><literal type="string">"Enter %s password for user '%s':"</literal></expr></argument>,

<argument><expr><name>kind</name></expr></argument>, <argument><expr><operator>*</operator><name>userpwd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>curlx_msnprintf</name><argument_list>(<argument><expr><name>prompt</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>prompt</name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><literal type="string">"Enter %s password for user '%s' on URL #%zu:"</literal></expr></argument>,

<argument><expr><name>kind</name></expr></argument>, <argument><expr><operator>*</operator><name>userpwd</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>getpass_r</name><argument_list>(<argument><expr><name>prompt</name></expr></argument>, <argument><expr><name>passwd</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>passwd</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>passwdlen</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>passwd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>osep</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>osep</name> <operator>=</operator> <literal type="char">';'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>passptr</name> <operator>=</operator> <call><name>realloc</name><argument_list>(<argument><expr><operator>*</operator><name>userpwd</name></expr></argument>,

<argument><expr><name>passwdlen</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> 

<name>userlen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>passptr</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>passptr</name><index>[<expr><name>userlen</name></expr>]</index></name> <operator>=</operator> <literal type="char">':'</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>passptr</name><index>[<expr><name>userlen</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>passwd</name></expr></argument>, <argument><expr><name>passwdlen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>userpwd</name> <operator>=</operator> <name>passptr</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>ParameterError</name></type> <name>add2list</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>curl_slist</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>curl_slist</name></name> <modifier>*</modifier></type><name>newlist</name> <init>= <expr><call><name>curl_slist_append</name><argument_list>(<argument><expr><operator>*</operator><name>list</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>newlist</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>list</name> <operator>=</operator> <name>newlist</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><name>PARAM_NO_MEM</name></expr>;</return></block_content></block></else></if_stmt>

<return>return <expr><name>PARAM_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ftpfilemethod</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>OperationConfig</name></name> <modifier>*</modifier></type><name>config</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>curl_strequal</name><argument_list>(<argument><expr><literal type="string">"singlecwd"</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLFTPMETHOD_SINGLECWD</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>curl_strequal</name><argument_list>(<argument><expr><literal type="string">"nocwd"</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLFTPMETHOD_NOCWD</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>curl_strequal</name><argument_list>(<argument><expr><literal type="string">"multicwd"</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLFTPMETHOD_MULTICWD</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>warnf</name><argument_list>(<argument><expr><name><name>config</name><operator>-&gt;</operator><name>global</name></name></expr></argument>, <argument><expr><literal type="string">"unrecognized ftp file method '%s', using default\n"</literal></expr></argument>,

<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLFTPMETHOD_MULTICWD</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ftpcccmethod</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>OperationConfig</name></name> <modifier>*</modifier></type><name>config</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>curl_strequal</name><argument_list>(<argument><expr><literal type="string">"passive"</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLFTPSSL_CCC_PASSIVE</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>curl_strequal</name><argument_list>(<argument><expr><literal type="string">"active"</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLFTPSSL_CCC_ACTIVE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>warnf</name><argument_list>(<argument><expr><name><name>config</name><operator>-&gt;</operator><name>global</name></name></expr></argument>, <argument><expr><literal type="string">"unrecognized ftp CCC method '%s', using default\n"</literal></expr></argument>,

<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLFTPSSL_CCC_PASSIVE</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>long</name></type> <name>delegation</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>OperationConfig</name></name> <modifier>*</modifier></type><name>config</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>curl_strequal</name><argument_list>(<argument><expr><literal type="string">"none"</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLGSSAPI_DELEGATION_NONE</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>curl_strequal</name><argument_list>(<argument><expr><literal type="string">"policy"</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLGSSAPI_DELEGATION_POLICY_FLAG</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>curl_strequal</name><argument_list>(<argument><expr><literal type="string">"always"</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLGSSAPI_DELEGATION_FLAG</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>warnf</name><argument_list>(<argument><expr><name><name>config</name><operator>-&gt;</operator><name>global</name></name></expr></argument>, <argument><expr><literal type="string">"unrecognized delegation method '%s', using none\n"</literal></expr></argument>,

<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLGSSAPI_DELEGATION_NONE</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>my_useragent</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>strdup</name><argument_list>(<argument><expr><name>CURL_NAME</name> <literal type="string">"/"</literal> <name>CURL_VERSION</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>CURLcode</name></type> <name>get_args</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>OperationConfig</name></name> <modifier>*</modifier></type><name>config</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>i</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>last</name> <init>= <expr><operator>(</operator><ternary><condition><expr><name><name>config</name><operator>-&gt;</operator><name>next</name></name></expr> ?</condition><then> <expr><name>FALSE</name></expr> </then><else>: <expr><name>TRUE</name></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>userpwd</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>config</name><operator>-&gt;</operator><name>oauth_bearer</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>checkpasswd</name><argument_list>(<argument><expr><literal type="string">"host"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>last</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>config</name><operator>-&gt;</operator><name>userpwd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>proxyuserpwd</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>checkpasswd</name><argument_list>(<argument><expr><literal type="string">"proxy"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>last</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>config</name><operator>-&gt;</operator><name>proxyuserpwd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>config</name><operator>-&gt;</operator><name>useragent</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>useragent</name></name> <operator>=</operator> <call><name>my_useragent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>config</name><operator>-&gt;</operator><name>useragent</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>errorf</name><argument_list>(<argument><expr><name><name>config</name><operator>-&gt;</operator><name>global</name></name></expr></argument>, <argument><expr><literal type="string">"out of memory\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_OUT_OF_MEMORY</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>ParameterError</name></type> <name>str2tls_max</name><parameter_list>(<parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>val</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<struct><specifier>static</specifier> struct <name>s_tls_max</name> <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tls_max_str</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>tls_max</name></decl>;</decl_stmt>

}</block> <decl>const <name><name>tls_max_array</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"default"</literal></expr>, <expr><name>CURL_SSLVERSION_MAX_DEFAULT</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"1.0"</literal></expr>, <expr><name>CURL_SSLVERSION_MAX_TLSv1_0</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"1.1"</literal></expr>, <expr><name>CURL_SSLVERSION_MAX_TLSv1_1</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"1.2"</literal></expr>, <expr><name>CURL_SSLVERSION_MAX_TLSv1_2</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"1.3"</literal></expr>, <expr><name>CURL_SSLVERSION_MAX_TLSv1_3</name></expr> }</block></expr>

}</block></expr></init></decl>;</struct>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>str</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>PARAM_REQUIRES_PARAMETER</name></expr>;</return></block_content></block></if></if_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>tls_max_array</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>tls_max_array</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name><name>tls_max_array</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>tls_max_str</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>val</name> <operator>=</operator> <name><name>tls_max_array</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>tls_max</name></expr>;</expr_stmt>

<return>return <expr><name>PARAM_OK</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>PARAM_BAD_USE</name></expr>;</return>

</block_content>}</block></function>

</unit>
