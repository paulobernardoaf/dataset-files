<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\curl-analysis\_cppstats\curl\src\tool_getparam.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tool_setup.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"strcase.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENABLE_CURLX_PRINTF</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curlx.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tool_binmode.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tool_cfgable.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tool_cb_prg.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tool_convert.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tool_filetime.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tool_formparse.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tool_getparam.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tool_helpers.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tool_libinfo.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tool_metalink.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tool_msgs.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tool_paramhlp.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tool_parsecfg.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tool_main.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memdebug.h"</cpp:file></cpp:include> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSDOS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USE_WATT32</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GetStr</name><parameter_list>(<parameter><type><name>str</name></type></parameter>,<parameter><type><name>val</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if(*(str)) { free(*(str)); *(str) = NULL; } if((val)) { *(str) = strdup((val)); if(!(*(str))) return PARAM_NO_MEM; } } while(0)</cpp:value></cpp:define>

<struct>struct <name>LongShort</name> <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>letter</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>lname</name></decl>;</decl_stmt> 

<enum>enum <block>{

<decl><name>ARG_NONE</name></decl>, 

<decl><name>ARG_BOOL</name></decl>, 

<decl><name>ARG_STRING</name></decl>, 

<decl><name>ARG_FILENAME</name></decl> 

}</block> <decl><name>desc</name></decl>;</enum>

}</block>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>LongShort</name></name></type> <name><name>aliases</name><index>[]</index></name><init>= <expr><block>{

<expr><block>{<expr><literal type="string">"*@"</literal></expr>, <expr><literal type="string">"url"</literal></expr>, <expr><name>ARG_STRING</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"*4"</literal></expr>, <expr><literal type="string">"dns-ipv4-addr"</literal></expr>, <expr><name>ARG_STRING</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"*6"</literal></expr>, <expr><literal type="string">"dns-ipv6-addr"</literal></expr>, <expr><name>ARG_STRING</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"*a"</literal></expr>, <expr><literal type="string">"random-file"</literal></expr>, <expr><name>ARG_FILENAME</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"*b"</literal></expr>, <expr><literal type="string">"egd-file"</literal></expr>, <expr><name>ARG_STRING</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"*B"</literal></expr>, <expr><literal type="string">"oauth2-bearer"</literal></expr>, <expr><name>ARG_STRING</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"*c"</literal></expr>, <expr><literal type="string">"connect-timeout"</literal></expr>, <expr><name>ARG_STRING</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"*C"</literal></expr>, <expr><literal type="string">"doh-url"</literal></expr> , <expr><name>ARG_STRING</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"*d"</literal></expr>, <expr><literal type="string">"ciphers"</literal></expr>, <expr><name>ARG_STRING</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"*D"</literal></expr>, <expr><literal type="string">"dns-interface"</literal></expr>, <expr><name>ARG_STRING</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"*e"</literal></expr>, <expr><literal type="string">"disable-epsv"</literal></expr>, <expr><name>ARG_BOOL</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"*f"</literal></expr>, <expr><literal type="string">"disallow-username-in-url"</literal></expr>, <expr><name>ARG_BOOL</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"*E"</literal></expr>, <expr><literal type="string">"epsv"</literal></expr>, <expr><name>ARG_BOOL</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"*F"</literal></expr>, <expr><literal type="string">"dns-servers"</literal></expr>, <expr><name>ARG_STRING</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"*g"</literal></expr>, <expr><literal type="string">"trace"</literal></expr>, <expr><name>ARG_FILENAME</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"*G"</literal></expr>, <expr><literal type="string">"npn"</literal></expr>, <expr><name>ARG_BOOL</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"*h"</literal></expr>, <expr><literal type="string">"trace-ascii"</literal></expr>, <expr><name>ARG_FILENAME</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"*H"</literal></expr>, <expr><literal type="string">"alpn"</literal></expr>, <expr><name>ARG_BOOL</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"*i"</literal></expr>, <expr><literal type="string">"limit-rate"</literal></expr>, <expr><name>ARG_STRING</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"*j"</literal></expr>, <expr><literal type="string">"compressed"</literal></expr>, <expr><name>ARG_BOOL</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"*J"</literal></expr>, <expr><literal type="string">"tr-encoding"</literal></expr>, <expr><name>ARG_BOOL</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"*k"</literal></expr>, <expr><literal type="string">"digest"</literal></expr>, <expr><name>ARG_BOOL</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"*l"</literal></expr>, <expr><literal type="string">"negotiate"</literal></expr>, <expr><name>ARG_BOOL</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"*m"</literal></expr>, <expr><literal type="string">"ntlm"</literal></expr>, <expr><name>ARG_BOOL</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"*M"</literal></expr>, <expr><literal type="string">"ntlm-wb"</literal></expr>, <expr><name>ARG_BOOL</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"*n"</literal></expr>, <expr><literal type="string">"basic"</literal></expr>, <expr><name>ARG_BOOL</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"*o"</literal></expr>, <expr><literal type="string">"anyauth"</literal></expr>, <expr><name>ARG_BOOL</name></expr>}</block></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_WATT32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><literal type="string">"*p"</literal></expr>, <expr><literal type="string">"wdebug"</literal></expr>, <expr><name>ARG_BOOL</name></expr>}</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{<expr><literal type="string">"*q"</literal></expr>, <expr><literal type="string">"ftp-create-dirs"</literal></expr>, <expr><name>ARG_BOOL</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"*r"</literal></expr>, <expr><literal type="string">"create-dirs"</literal></expr>, <expr><name>ARG_BOOL</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"*s"</literal></expr>, <expr><literal type="string">"max-redirs"</literal></expr>, <expr><name>ARG_STRING</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"*t"</literal></expr>, <expr><literal type="string">"proxy-ntlm"</literal></expr>, <expr><name>ARG_BOOL</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"*u"</literal></expr>, <expr><literal type="string">"crlf"</literal></expr>, <expr><name>ARG_BOOL</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"*v"</literal></expr>, <expr><literal type="string">"stderr"</literal></expr>, <expr><name>ARG_FILENAME</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"*w"</literal></expr>, <expr><literal type="string">"interface"</literal></expr>, <expr><name>ARG_STRING</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"*x"</literal></expr>, <expr><literal type="string">"krb"</literal></expr>, <expr><name>ARG_STRING</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"*x"</literal></expr>, <expr><literal type="string">"krb4"</literal></expr>, <expr><name>ARG_STRING</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"*X"</literal></expr>, <expr><literal type="string">"haproxy-protocol"</literal></expr>, <expr><name>ARG_BOOL</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"*y"</literal></expr>, <expr><literal type="string">"max-filesize"</literal></expr>, <expr><name>ARG_STRING</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"*z"</literal></expr>, <expr><literal type="string">"disable-eprt"</literal></expr>, <expr><name>ARG_BOOL</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"*Z"</literal></expr>, <expr><literal type="string">"eprt"</literal></expr>, <expr><name>ARG_BOOL</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"*~"</literal></expr>, <expr><literal type="string">"xattr"</literal></expr>, <expr><name>ARG_BOOL</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"$a"</literal></expr>, <expr><literal type="string">"ftp-ssl"</literal></expr>, <expr><name>ARG_BOOL</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"$a"</literal></expr>, <expr><literal type="string">"ssl"</literal></expr>, <expr><name>ARG_BOOL</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"$b"</literal></expr>, <expr><literal type="string">"ftp-pasv"</literal></expr>, <expr><name>ARG_BOOL</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"$c"</literal></expr>, <expr><literal type="string">"socks5"</literal></expr>, <expr><name>ARG_STRING</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"$d"</literal></expr>, <expr><literal type="string">"tcp-nodelay"</literal></expr>, <expr><name>ARG_BOOL</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"$e"</literal></expr>, <expr><literal type="string">"proxy-digest"</literal></expr>, <expr><name>ARG_BOOL</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"$f"</literal></expr>, <expr><literal type="string">"proxy-basic"</literal></expr>, <expr><name>ARG_BOOL</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"$g"</literal></expr>, <expr><literal type="string">"retry"</literal></expr>, <expr><name>ARG_STRING</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"$V"</literal></expr>, <expr><literal type="string">"retry-connrefused"</literal></expr>, <expr><name>ARG_BOOL</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"$h"</literal></expr>, <expr><literal type="string">"retry-delay"</literal></expr>, <expr><name>ARG_STRING</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"$i"</literal></expr>, <expr><literal type="string">"retry-max-time"</literal></expr>, <expr><name>ARG_STRING</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"$k"</literal></expr>, <expr><literal type="string">"proxy-negotiate"</literal></expr>, <expr><name>ARG_BOOL</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"$m"</literal></expr>, <expr><literal type="string">"ftp-account"</literal></expr>, <expr><name>ARG_STRING</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"$n"</literal></expr>, <expr><literal type="string">"proxy-anyauth"</literal></expr>, <expr><name>ARG_BOOL</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"$o"</literal></expr>, <expr><literal type="string">"trace-time"</literal></expr>, <expr><name>ARG_BOOL</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"$p"</literal></expr>, <expr><literal type="string">"ignore-content-length"</literal></expr>, <expr><name>ARG_BOOL</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"$q"</literal></expr>, <expr><literal type="string">"ftp-skip-pasv-ip"</literal></expr>, <expr><name>ARG_BOOL</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"$r"</literal></expr>, <expr><literal type="string">"ftp-method"</literal></expr>, <expr><name>ARG_STRING</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"$s"</literal></expr>, <expr><literal type="string">"local-port"</literal></expr>, <expr><name>ARG_STRING</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"$t"</literal></expr>, <expr><literal type="string">"socks4"</literal></expr>, <expr><name>ARG_STRING</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"$T"</literal></expr>, <expr><literal type="string">"socks4a"</literal></expr>, <expr><name>ARG_STRING</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"$u"</literal></expr>, <expr><literal type="string">"ftp-alternative-to-user"</literal></expr>, <expr><name>ARG_STRING</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"$v"</literal></expr>, <expr><literal type="string">"ftp-ssl-reqd"</literal></expr>, <expr><name>ARG_BOOL</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"$v"</literal></expr>, <expr><literal type="string">"ssl-reqd"</literal></expr>, <expr><name>ARG_BOOL</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"$w"</literal></expr>, <expr><literal type="string">"sessionid"</literal></expr>, <expr><name>ARG_BOOL</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"$x"</literal></expr>, <expr><literal type="string">"ftp-ssl-control"</literal></expr>, <expr><name>ARG_BOOL</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"$y"</literal></expr>, <expr><literal type="string">"ftp-ssl-ccc"</literal></expr>, <expr><name>ARG_BOOL</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"$j"</literal></expr>, <expr><literal type="string">"ftp-ssl-ccc-mode"</literal></expr>, <expr><name>ARG_STRING</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"$z"</literal></expr>, <expr><literal type="string">"libcurl"</literal></expr>, <expr><name>ARG_STRING</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"$#"</literal></expr>, <expr><literal type="string">"raw"</literal></expr>, <expr><name>ARG_BOOL</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"$0"</literal></expr>, <expr><literal type="string">"post301"</literal></expr>, <expr><name>ARG_BOOL</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"$1"</literal></expr>, <expr><literal type="string">"keepalive"</literal></expr>, <expr><name>ARG_BOOL</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"$2"</literal></expr>, <expr><literal type="string">"socks5-hostname"</literal></expr>, <expr><name>ARG_STRING</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"$3"</literal></expr>, <expr><literal type="string">"keepalive-time"</literal></expr>, <expr><name>ARG_STRING</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"$4"</literal></expr>, <expr><literal type="string">"post302"</literal></expr>, <expr><name>ARG_BOOL</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"$5"</literal></expr>, <expr><literal type="string">"noproxy"</literal></expr>, <expr><name>ARG_STRING</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"$7"</literal></expr>, <expr><literal type="string">"socks5-gssapi-nec"</literal></expr>, <expr><name>ARG_BOOL</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"$8"</literal></expr>, <expr><literal type="string">"proxy1.0"</literal></expr>, <expr><name>ARG_STRING</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"$9"</literal></expr>, <expr><literal type="string">"tftp-blksize"</literal></expr>, <expr><name>ARG_STRING</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"$A"</literal></expr>, <expr><literal type="string">"mail-from"</literal></expr>, <expr><name>ARG_STRING</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"$B"</literal></expr>, <expr><literal type="string">"mail-rcpt"</literal></expr>, <expr><name>ARG_STRING</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"$C"</literal></expr>, <expr><literal type="string">"ftp-pret"</literal></expr>, <expr><name>ARG_BOOL</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"$D"</literal></expr>, <expr><literal type="string">"proto"</literal></expr>, <expr><name>ARG_STRING</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"$E"</literal></expr>, <expr><literal type="string">"proto-redir"</literal></expr>, <expr><name>ARG_STRING</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"$F"</literal></expr>, <expr><literal type="string">"resolve"</literal></expr>, <expr><name>ARG_STRING</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"$G"</literal></expr>, <expr><literal type="string">"delegation"</literal></expr>, <expr><name>ARG_STRING</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"$H"</literal></expr>, <expr><literal type="string">"mail-auth"</literal></expr>, <expr><name>ARG_STRING</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"$I"</literal></expr>, <expr><literal type="string">"post303"</literal></expr>, <expr><name>ARG_BOOL</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"$J"</literal></expr>, <expr><literal type="string">"metalink"</literal></expr>, <expr><name>ARG_BOOL</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"$6"</literal></expr>, <expr><literal type="string">"sasl-authzid"</literal></expr>, <expr><name>ARG_STRING</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"$K"</literal></expr>, <expr><literal type="string">"sasl-ir"</literal></expr>, <expr><name>ARG_BOOL</name></expr> }</block></expr>,

<expr><block>{<expr><literal type="string">"$L"</literal></expr>, <expr><literal type="string">"test-event"</literal></expr>, <expr><name>ARG_BOOL</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"$M"</literal></expr>, <expr><literal type="string">"unix-socket"</literal></expr>, <expr><name>ARG_FILENAME</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"$N"</literal></expr>, <expr><literal type="string">"path-as-is"</literal></expr>, <expr><name>ARG_BOOL</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"$O"</literal></expr>, <expr><literal type="string">"socks5-gssapi-service"</literal></expr>, <expr><name>ARG_STRING</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"$O"</literal></expr>, <expr><literal type="string">"proxy-service-name"</literal></expr>, <expr><name>ARG_STRING</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"$P"</literal></expr>, <expr><literal type="string">"service-name"</literal></expr>, <expr><name>ARG_STRING</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"$Q"</literal></expr>, <expr><literal type="string">"proto-default"</literal></expr>, <expr><name>ARG_STRING</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"$R"</literal></expr>, <expr><literal type="string">"expect100-timeout"</literal></expr>, <expr><name>ARG_STRING</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"$S"</literal></expr>, <expr><literal type="string">"tftp-no-options"</literal></expr>, <expr><name>ARG_BOOL</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"$U"</literal></expr>, <expr><literal type="string">"connect-to"</literal></expr>, <expr><name>ARG_STRING</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"$W"</literal></expr>, <expr><literal type="string">"abstract-unix-socket"</literal></expr>, <expr><name>ARG_FILENAME</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"$X"</literal></expr>, <expr><literal type="string">"tls-max"</literal></expr>, <expr><name>ARG_STRING</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"$Y"</literal></expr>, <expr><literal type="string">"suppress-connect-headers"</literal></expr>, <expr><name>ARG_BOOL</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"$Z"</literal></expr>, <expr><literal type="string">"compressed-ssh"</literal></expr>, <expr><name>ARG_BOOL</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"$~"</literal></expr>, <expr><literal type="string">"happy-eyeballs-timeout-ms"</literal></expr>, <expr><name>ARG_STRING</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"0"</literal></expr>, <expr><literal type="string">"http1.0"</literal></expr>, <expr><name>ARG_NONE</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"01"</literal></expr>, <expr><literal type="string">"http1.1"</literal></expr>, <expr><name>ARG_NONE</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"02"</literal></expr>, <expr><literal type="string">"http2"</literal></expr>, <expr><name>ARG_NONE</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"03"</literal></expr>, <expr><literal type="string">"http2-prior-knowledge"</literal></expr>, <expr><name>ARG_NONE</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"04"</literal></expr>, <expr><literal type="string">"http3"</literal></expr>, <expr><name>ARG_NONE</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"09"</literal></expr>, <expr><literal type="string">"http0.9"</literal></expr>, <expr><name>ARG_BOOL</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"1"</literal></expr>, <expr><literal type="string">"tlsv1"</literal></expr>, <expr><name>ARG_NONE</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"10"</literal></expr>, <expr><literal type="string">"tlsv1.0"</literal></expr>, <expr><name>ARG_NONE</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"11"</literal></expr>, <expr><literal type="string">"tlsv1.1"</literal></expr>, <expr><name>ARG_NONE</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"12"</literal></expr>, <expr><literal type="string">"tlsv1.2"</literal></expr>, <expr><name>ARG_NONE</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"13"</literal></expr>, <expr><literal type="string">"tlsv1.3"</literal></expr>, <expr><name>ARG_NONE</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"1A"</literal></expr>, <expr><literal type="string">"tls13-ciphers"</literal></expr>, <expr><name>ARG_STRING</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"1B"</literal></expr>, <expr><literal type="string">"proxy-tls13-ciphers"</literal></expr>, <expr><name>ARG_STRING</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"2"</literal></expr>, <expr><literal type="string">"sslv2"</literal></expr>, <expr><name>ARG_NONE</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"3"</literal></expr>, <expr><literal type="string">"sslv3"</literal></expr>, <expr><name>ARG_NONE</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"4"</literal></expr>, <expr><literal type="string">"ipv4"</literal></expr>, <expr><name>ARG_NONE</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"6"</literal></expr>, <expr><literal type="string">"ipv6"</literal></expr>, <expr><name>ARG_NONE</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"a"</literal></expr>, <expr><literal type="string">"append"</literal></expr>, <expr><name>ARG_BOOL</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"A"</literal></expr>, <expr><literal type="string">"user-agent"</literal></expr>, <expr><name>ARG_STRING</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"b"</literal></expr>, <expr><literal type="string">"cookie"</literal></expr>, <expr><name>ARG_STRING</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"ba"</literal></expr>, <expr><literal type="string">"alt-svc"</literal></expr>, <expr><name>ARG_STRING</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"B"</literal></expr>, <expr><literal type="string">"use-ascii"</literal></expr>, <expr><name>ARG_BOOL</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"c"</literal></expr>, <expr><literal type="string">"cookie-jar"</literal></expr>, <expr><name>ARG_STRING</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"C"</literal></expr>, <expr><literal type="string">"continue-at"</literal></expr>, <expr><name>ARG_STRING</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"d"</literal></expr>, <expr><literal type="string">"data"</literal></expr>, <expr><name>ARG_STRING</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"dr"</literal></expr>, <expr><literal type="string">"data-raw"</literal></expr>, <expr><name>ARG_STRING</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"da"</literal></expr>, <expr><literal type="string">"data-ascii"</literal></expr>, <expr><name>ARG_STRING</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"db"</literal></expr>, <expr><literal type="string">"data-binary"</literal></expr>, <expr><name>ARG_STRING</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"de"</literal></expr>, <expr><literal type="string">"data-urlencode"</literal></expr>, <expr><name>ARG_STRING</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"D"</literal></expr>, <expr><literal type="string">"dump-header"</literal></expr>, <expr><name>ARG_FILENAME</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"e"</literal></expr>, <expr><literal type="string">"referer"</literal></expr>, <expr><name>ARG_STRING</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"E"</literal></expr>, <expr><literal type="string">"cert"</literal></expr>, <expr><name>ARG_FILENAME</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"Ea"</literal></expr>, <expr><literal type="string">"cacert"</literal></expr>, <expr><name>ARG_FILENAME</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"Eb"</literal></expr>, <expr><literal type="string">"cert-type"</literal></expr>, <expr><name>ARG_STRING</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"Ec"</literal></expr>, <expr><literal type="string">"key"</literal></expr>, <expr><name>ARG_FILENAME</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"Ed"</literal></expr>, <expr><literal type="string">"key-type"</literal></expr>, <expr><name>ARG_STRING</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"Ee"</literal></expr>, <expr><literal type="string">"pass"</literal></expr>, <expr><name>ARG_STRING</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"Ef"</literal></expr>, <expr><literal type="string">"engine"</literal></expr>, <expr><name>ARG_STRING</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"Eg"</literal></expr>, <expr><literal type="string">"capath"</literal></expr>, <expr><name>ARG_FILENAME</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"Eh"</literal></expr>, <expr><literal type="string">"pubkey"</literal></expr>, <expr><name>ARG_STRING</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"Ei"</literal></expr>, <expr><literal type="string">"hostpubmd5"</literal></expr>, <expr><name>ARG_STRING</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"Ej"</literal></expr>, <expr><literal type="string">"crlfile"</literal></expr>, <expr><name>ARG_FILENAME</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"Ek"</literal></expr>, <expr><literal type="string">"tlsuser"</literal></expr>, <expr><name>ARG_STRING</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"El"</literal></expr>, <expr><literal type="string">"tlspassword"</literal></expr>, <expr><name>ARG_STRING</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"Em"</literal></expr>, <expr><literal type="string">"tlsauthtype"</literal></expr>, <expr><name>ARG_STRING</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"En"</literal></expr>, <expr><literal type="string">"ssl-allow-beast"</literal></expr>, <expr><name>ARG_BOOL</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"Ep"</literal></expr>, <expr><literal type="string">"pinnedpubkey"</literal></expr>, <expr><name>ARG_STRING</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"EP"</literal></expr>, <expr><literal type="string">"proxy-pinnedpubkey"</literal></expr>, <expr><name>ARG_STRING</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"Eq"</literal></expr>, <expr><literal type="string">"cert-status"</literal></expr>, <expr><name>ARG_BOOL</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"Er"</literal></expr>, <expr><literal type="string">"false-start"</literal></expr>, <expr><name>ARG_BOOL</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"Es"</literal></expr>, <expr><literal type="string">"ssl-no-revoke"</literal></expr>, <expr><name>ARG_BOOL</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"ES"</literal></expr>, <expr><literal type="string">"ssl-revoke-best-effort"</literal></expr>, <expr><name>ARG_BOOL</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"Et"</literal></expr>, <expr><literal type="string">"tcp-fastopen"</literal></expr>, <expr><name>ARG_BOOL</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"Eu"</literal></expr>, <expr><literal type="string">"proxy-tlsuser"</literal></expr>, <expr><name>ARG_STRING</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"Ev"</literal></expr>, <expr><literal type="string">"proxy-tlspassword"</literal></expr>, <expr><name>ARG_STRING</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"Ew"</literal></expr>, <expr><literal type="string">"proxy-tlsauthtype"</literal></expr>, <expr><name>ARG_STRING</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"Ex"</literal></expr>, <expr><literal type="string">"proxy-cert"</literal></expr>, <expr><name>ARG_FILENAME</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"Ey"</literal></expr>, <expr><literal type="string">"proxy-cert-type"</literal></expr>, <expr><name>ARG_STRING</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"Ez"</literal></expr>, <expr><literal type="string">"proxy-key"</literal></expr>, <expr><name>ARG_FILENAME</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"E0"</literal></expr>, <expr><literal type="string">"proxy-key-type"</literal></expr>, <expr><name>ARG_STRING</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"E1"</literal></expr>, <expr><literal type="string">"proxy-pass"</literal></expr>, <expr><name>ARG_STRING</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"E2"</literal></expr>, <expr><literal type="string">"proxy-ciphers"</literal></expr>, <expr><name>ARG_STRING</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"E3"</literal></expr>, <expr><literal type="string">"proxy-crlfile"</literal></expr>, <expr><name>ARG_FILENAME</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"E4"</literal></expr>, <expr><literal type="string">"proxy-ssl-allow-beast"</literal></expr>, <expr><name>ARG_BOOL</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"E5"</literal></expr>, <expr><literal type="string">"login-options"</literal></expr>, <expr><name>ARG_STRING</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"E6"</literal></expr>, <expr><literal type="string">"proxy-cacert"</literal></expr>, <expr><name>ARG_FILENAME</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"E7"</literal></expr>, <expr><literal type="string">"proxy-capath"</literal></expr>, <expr><name>ARG_FILENAME</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"E8"</literal></expr>, <expr><literal type="string">"proxy-insecure"</literal></expr>, <expr><name>ARG_BOOL</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"E9"</literal></expr>, <expr><literal type="string">"proxy-tlsv1"</literal></expr>, <expr><name>ARG_NONE</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"EA"</literal></expr>, <expr><literal type="string">"socks5-basic"</literal></expr>, <expr><name>ARG_BOOL</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"EB"</literal></expr>, <expr><literal type="string">"socks5-gssapi"</literal></expr>, <expr><name>ARG_BOOL</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"EC"</literal></expr>, <expr><literal type="string">"etag-save"</literal></expr>, <expr><name>ARG_FILENAME</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"ED"</literal></expr>, <expr><literal type="string">"etag-compare"</literal></expr>, <expr><name>ARG_FILENAME</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"f"</literal></expr>, <expr><literal type="string">"fail"</literal></expr>, <expr><name>ARG_BOOL</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"fa"</literal></expr>, <expr><literal type="string">"fail-early"</literal></expr>, <expr><name>ARG_BOOL</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"fb"</literal></expr>, <expr><literal type="string">"styled-output"</literal></expr>, <expr><name>ARG_BOOL</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"fc"</literal></expr>, <expr><literal type="string">"mail-rcpt-allowfails"</literal></expr>, <expr><name>ARG_BOOL</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"F"</literal></expr>, <expr><literal type="string">"form"</literal></expr>, <expr><name>ARG_STRING</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"Fs"</literal></expr>, <expr><literal type="string">"form-string"</literal></expr>, <expr><name>ARG_STRING</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"g"</literal></expr>, <expr><literal type="string">"globoff"</literal></expr>, <expr><name>ARG_BOOL</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"G"</literal></expr>, <expr><literal type="string">"get"</literal></expr>, <expr><name>ARG_NONE</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"Ga"</literal></expr>, <expr><literal type="string">"request-target"</literal></expr>, <expr><name>ARG_STRING</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"h"</literal></expr>, <expr><literal type="string">"help"</literal></expr>, <expr><name>ARG_BOOL</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"H"</literal></expr>, <expr><literal type="string">"header"</literal></expr>, <expr><name>ARG_STRING</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"Hp"</literal></expr>, <expr><literal type="string">"proxy-header"</literal></expr>, <expr><name>ARG_STRING</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"i"</literal></expr>, <expr><literal type="string">"include"</literal></expr>, <expr><name>ARG_BOOL</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"I"</literal></expr>, <expr><literal type="string">"head"</literal></expr>, <expr><name>ARG_BOOL</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"j"</literal></expr>, <expr><literal type="string">"junk-session-cookies"</literal></expr>, <expr><name>ARG_BOOL</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"J"</literal></expr>, <expr><literal type="string">"remote-header-name"</literal></expr>, <expr><name>ARG_BOOL</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"k"</literal></expr>, <expr><literal type="string">"insecure"</literal></expr>, <expr><name>ARG_BOOL</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"K"</literal></expr>, <expr><literal type="string">"config"</literal></expr>, <expr><name>ARG_FILENAME</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"l"</literal></expr>, <expr><literal type="string">"list-only"</literal></expr>, <expr><name>ARG_BOOL</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"L"</literal></expr>, <expr><literal type="string">"location"</literal></expr>, <expr><name>ARG_BOOL</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"Lt"</literal></expr>, <expr><literal type="string">"location-trusted"</literal></expr>, <expr><name>ARG_BOOL</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"m"</literal></expr>, <expr><literal type="string">"max-time"</literal></expr>, <expr><name>ARG_STRING</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"M"</literal></expr>, <expr><literal type="string">"manual"</literal></expr>, <expr><name>ARG_BOOL</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"n"</literal></expr>, <expr><literal type="string">"netrc"</literal></expr>, <expr><name>ARG_BOOL</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"no"</literal></expr>, <expr><literal type="string">"netrc-optional"</literal></expr>, <expr><name>ARG_BOOL</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"ne"</literal></expr>, <expr><literal type="string">"netrc-file"</literal></expr>, <expr><name>ARG_FILENAME</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"N"</literal></expr>, <expr><literal type="string">"buffer"</literal></expr>, <expr><name>ARG_BOOL</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"o"</literal></expr>, <expr><literal type="string">"output"</literal></expr>, <expr><name>ARG_FILENAME</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"O"</literal></expr>, <expr><literal type="string">"remote-name"</literal></expr>, <expr><name>ARG_NONE</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"Oa"</literal></expr>, <expr><literal type="string">"remote-name-all"</literal></expr>, <expr><name>ARG_BOOL</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"p"</literal></expr>, <expr><literal type="string">"proxytunnel"</literal></expr>, <expr><name>ARG_BOOL</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"P"</literal></expr>, <expr><literal type="string">"ftp-port"</literal></expr>, <expr><name>ARG_STRING</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"q"</literal></expr>, <expr><literal type="string">"disable"</literal></expr>, <expr><name>ARG_BOOL</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"Q"</literal></expr>, <expr><literal type="string">"quote"</literal></expr>, <expr><name>ARG_STRING</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"r"</literal></expr>, <expr><literal type="string">"range"</literal></expr>, <expr><name>ARG_STRING</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"R"</literal></expr>, <expr><literal type="string">"remote-time"</literal></expr>, <expr><name>ARG_BOOL</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"s"</literal></expr>, <expr><literal type="string">"silent"</literal></expr>, <expr><name>ARG_BOOL</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"S"</literal></expr>, <expr><literal type="string">"show-error"</literal></expr>, <expr><name>ARG_BOOL</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"t"</literal></expr>, <expr><literal type="string">"telnet-option"</literal></expr>, <expr><name>ARG_STRING</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"T"</literal></expr>, <expr><literal type="string">"upload-file"</literal></expr>, <expr><name>ARG_FILENAME</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"u"</literal></expr>, <expr><literal type="string">"user"</literal></expr>, <expr><name>ARG_STRING</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"U"</literal></expr>, <expr><literal type="string">"proxy-user"</literal></expr>, <expr><name>ARG_STRING</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"v"</literal></expr>, <expr><literal type="string">"verbose"</literal></expr>, <expr><name>ARG_BOOL</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"V"</literal></expr>, <expr><literal type="string">"version"</literal></expr>, <expr><name>ARG_BOOL</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"w"</literal></expr>, <expr><literal type="string">"write-out"</literal></expr>, <expr><name>ARG_STRING</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"x"</literal></expr>, <expr><literal type="string">"proxy"</literal></expr>, <expr><name>ARG_STRING</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"xa"</literal></expr>, <expr><literal type="string">"preproxy"</literal></expr>, <expr><name>ARG_STRING</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"X"</literal></expr>, <expr><literal type="string">"request"</literal></expr>, <expr><name>ARG_STRING</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"Y"</literal></expr>, <expr><literal type="string">"speed-limit"</literal></expr>, <expr><name>ARG_STRING</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"y"</literal></expr>, <expr><literal type="string">"speed-time"</literal></expr>, <expr><name>ARG_STRING</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"z"</literal></expr>, <expr><literal type="string">"time-cond"</literal></expr>, <expr><name>ARG_STRING</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"Z"</literal></expr>, <expr><literal type="string">"parallel"</literal></expr>, <expr><name>ARG_BOOL</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"Zb"</literal></expr>, <expr><literal type="string">"parallel-max"</literal></expr>, <expr><name>ARG_STRING</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"Zc"</literal></expr>, <expr><literal type="string">"parallel-immediate"</literal></expr>, <expr><name>ARG_BOOL</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"#"</literal></expr>, <expr><literal type="string">"progress-bar"</literal></expr>, <expr><name>ARG_BOOL</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"#m"</literal></expr>, <expr><literal type="string">"progress-meter"</literal></expr>, <expr><name>ARG_BOOL</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">":"</literal></expr>, <expr><literal type="string">"next"</literal></expr>, <expr><name>ARG_NONE</name></expr>}</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>UNITTESTS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>void</name></type> <name>parse_cert_parameter</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cert_parameter</name></decl></parameter>,

<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>certname</name></decl></parameter>,

<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>passphrase</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>param_length</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>cert_parameter</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>span</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>param_place</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>certname_place</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>certname</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>passphrase</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>param_length</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>curl_strnequal</name><argument_list>(<argument><expr><name>cert_parameter</name></expr></argument>, <argument><expr><literal type="string">"pkcs11:"</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call> <operator>||</operator>

<operator>!</operator><call><name>strpbrk</name><argument_list>(<argument><expr><name>cert_parameter</name></expr></argument>, <argument><expr><literal type="string">":\\"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>certname</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>cert_parameter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>certname_place</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>param_length</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>certname_place</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>certname</name> <operator>=</operator> <name>certname_place</name></expr>;</expr_stmt>

<expr_stmt><expr><name>param_place</name> <operator>=</operator> <name>cert_parameter</name></expr>;</expr_stmt>

<while>while<condition>(<expr><operator>*</operator><name>param_place</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>span</name> <operator>=</operator> <call><name>strcspn</name><argument_list>(<argument><expr><name>param_place</name></expr></argument>, <argument><expr><literal type="string">":\\"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>certname_place</name></expr></argument>, <argument><expr><name>param_place</name></expr></argument>, <argument><expr><name>span</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>param_place</name> <operator>+=</operator> <name>span</name></expr>;</expr_stmt>

<expr_stmt><expr><name>certname_place</name> <operator>+=</operator> <name>span</name></expr>;</expr_stmt>

<switch>switch<condition>(<expr><operator>*</operator><name>param_place</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'\0'</literal></expr>:</case>

<break>break;</break>

<case>case <expr><literal type="char">'\\'</literal></expr>:</case>

<expr_stmt><expr><name>param_place</name><operator>++</operator></expr>;</expr_stmt>

<switch>switch<condition>(<expr><operator>*</operator><name>param_place</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'\0'</literal></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>certname_place</name><operator>++</operator> <operator>=</operator> <literal type="char">'\\'</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'\\'</literal></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>certname_place</name><operator>++</operator> <operator>=</operator> <literal type="char">'\\'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>param_place</name><operator>++</operator></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">':'</literal></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>certname_place</name><operator>++</operator> <operator>=</operator> <literal type="char">':'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>param_place</name><operator>++</operator></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><operator>*</operator><name>certname_place</name><operator>++</operator> <operator>=</operator> <literal type="char">'\\'</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>certname_place</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>param_place</name></expr>;</expr_stmt>

<expr_stmt><expr><name>param_place</name><operator>++</operator></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<break>break;</break>

<case>case <expr><literal type="char">':'</literal></expr>:</case>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name>param_place</name> <operator>&amp;&amp;</operator>

<operator>(</operator><name>param_place</name> <operator>==</operator> <operator>&amp;</operator><name><name>cert_parameter</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>cert_parameter</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\\'</literal> <operator>||</operator> <name><name>cert_parameter</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><call><name>ISALPHA</name><argument_list>(<argument><expr><name><name>cert_parameter</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>certname_place</name><operator>++</operator> <operator>=</operator> <literal type="char">':'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>param_place</name><operator>++</operator></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>param_place</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>*</operator><name>param_place</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>passphrase</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>param_place</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<goto>goto <name>done</name>;</goto>

</block_content>}</block></switch>

</block_content>}</block></while>

<label><name>done</name>:</label>

<expr_stmt><expr><operator>*</operator><name>certname_place</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>GetFileAndPassword</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>nextarg</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>password</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>certname</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>passphrase</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>parse_cert_parameter</name><argument_list>(<argument><expr><name>nextarg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>certname</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>passphrase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><operator>*</operator><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>file</name> <operator>=</operator> <name>certname</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>passphrase</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><operator>*</operator><name>password</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>password</name> <operator>=</operator> <name>passphrase</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>cleanarg</name><argument_list>(<argument><expr><name>nextarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ParameterError</name></type> <name>GetSizeParameter</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>GlobalConfig</name></name> <modifier>*</modifier></type><name>global</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>which</name></decl></parameter>,

<parameter><decl><type><name>curl_off_t</name> <modifier>*</modifier></type><name>value_out</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>unit</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>curl_off_t</name></type> <name>value</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><call><name>curlx_strtoofft</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>unit</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>warnf</name><argument_list>(<argument><expr><name>global</name></expr></argument>, <argument><expr><literal type="string">"invalid number specified for %s\n"</literal></expr></argument>, <argument><expr><name>which</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>PARAM_BAD_USE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>*</operator><name>unit</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>unit</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><literal type="string">"b"</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>unit</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>unit</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><literal type="string">"w"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<switch>switch<condition>(<expr><operator>*</operator><name>unit</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'G'</literal></expr>:</case>

<case>case <expr><literal type="char">'g'</literal></expr>:</case>

<if_stmt><if>if<condition>(<expr><name>value</name> <operator>&gt;</operator> <operator>(</operator><name>CURL_OFF_T_MAX</name> <operator>/</operator> <operator>(</operator><literal type="number">1024</literal><operator>*</operator><literal type="number">1024</literal><operator>*</operator><literal type="number">1024</literal><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>PARAM_NUMBER_TOO_LARGE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>value</name> <operator>*=</operator> <literal type="number">1024</literal><operator>*</operator><literal type="number">1024</literal><operator>*</operator><literal type="number">1024</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'M'</literal></expr>:</case>

<case>case <expr><literal type="char">'m'</literal></expr>:</case>

<if_stmt><if>if<condition>(<expr><name>value</name> <operator>&gt;</operator> <operator>(</operator><name>CURL_OFF_T_MAX</name> <operator>/</operator> <operator>(</operator><literal type="number">1024</literal><operator>*</operator><literal type="number">1024</literal><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>PARAM_NUMBER_TOO_LARGE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>value</name> <operator>*=</operator> <literal type="number">1024</literal><operator>*</operator><literal type="number">1024</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'K'</literal></expr>:</case>

<case>case <expr><literal type="char">'k'</literal></expr>:</case>

<if_stmt><if>if<condition>(<expr><name>value</name> <operator>&gt;</operator> <operator>(</operator><name>CURL_OFF_T_MAX</name> <operator>/</operator> <literal type="number">1024</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>PARAM_NUMBER_TOO_LARGE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>value</name> <operator>*=</operator> <literal type="number">1024</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'b'</literal></expr>:</case>

<case>case <expr><literal type="char">'B'</literal></expr>:</case>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>warnf</name><argument_list>(<argument><expr><name>global</name></expr></argument>, <argument><expr><literal type="string">"unsupported %s unit. Use G, M, K or B!\n"</literal></expr></argument>, <argument><expr><name>which</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>PARAM_BAD_USE</name></expr>;</return>

</block_content>}</block></switch>

<expr_stmt><expr><operator>*</operator><name>value_out</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>

<return>return <expr><name>PARAM_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>ParameterError</name></type> <name>getparameter</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>flag</name></decl></parameter>, 

<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>nextarg</name></decl></parameter>, 

<parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>usedarg</name></decl></parameter>, 

<parameter><decl><type><name><name>struct</name> <name>GlobalConfig</name></name> <modifier>*</modifier></type><name>global</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>OperationConfig</name></name> <modifier>*</modifier></type><name>config</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name>letter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name>subletter</name> <init>= <expr><literal type="char">'\0'</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>parse</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>time_t</name></type> <name>now</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>hit</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>longopt</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>singleopt</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>ParameterError</name></type> <name>err</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>toggle</name> <init>= <expr><name>TRUE</name></expr></init></decl>;</decl_stmt> 

<expr_stmt><expr><operator>*</operator><name>usedarg</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> 

<if_stmt><if>if<condition>(<expr><operator>(</operator><literal type="char">'-'</literal> <operator>!=</operator> <name><name>flag</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>||</operator> <operator>(</operator><literal type="char">'-'</literal> <operator>==</operator> <name><name>flag</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>word</name> <init>= <expr><ternary><condition><expr><operator>(</operator><literal type="char">'-'</literal> <operator>==</operator> <name><name>flag</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr> ?</condition><then> <expr><name>flag</name> <operator>+</operator> <literal type="number">2</literal></expr> </then><else>: <expr><name>flag</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>fnam</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>word</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>numhits</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>noflagged</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>word</name></expr></argument>, <argument><expr><literal type="string">"no-"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>word</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>toggle</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>noflagged</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for<control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>aliases</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>aliases</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>curl_strnequal</name><argument_list>(<argument><expr><name><name>aliases</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>lname</name></expr></argument>, <argument><expr><name>word</name></expr></argument>, <argument><expr><name>fnam</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>longopt</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>numhits</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>curl_strequal</name><argument_list>(<argument><expr><name><name>aliases</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>lname</name></expr></argument>, <argument><expr><name>word</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>parse</name> <operator>=</operator> <name><name>aliases</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>letter</name></expr>;</expr_stmt>

<expr_stmt><expr><name>hit</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>

<expr_stmt><expr><name>numhits</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>parse</name> <operator>=</operator> <name><name>aliases</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>letter</name></expr>;</expr_stmt>

<expr_stmt><expr><name>hit</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if<condition>(<expr><name>numhits</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>PARAM_OPTION_AMBIGUOUS</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>hit</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>PARAM_OPTION_UNKNOWN</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>noflagged</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>aliases</name><index>[<expr><name>hit</name></expr>]</index></name><operator>.</operator><name>desc</name> <operator>!=</operator> <name>ARG_BOOL</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>PARAM_NO_NOT_BOOLEAN</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>flag</name><operator>++</operator></expr>;</expr_stmt> 

<expr_stmt><expr><name>hit</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>parse</name> <operator>=</operator> <name>flag</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<do>do <block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>longopt</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>letter</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><operator>*</operator><name>parse</name></expr>;</expr_stmt>

<expr_stmt><expr><name>subletter</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>letter</name> <operator>=</operator> <name><name>parse</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>subletter</name> <operator>=</operator> <name><name>parse</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name>hit</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<for>for<control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>aliases</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>aliases</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>letter</name> <operator>==</operator> <name><name>aliases</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name><name>letter</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>hit</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if<condition>(<expr><name>hit</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>PARAM_OPTION_UNKNOWN</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>aliases</name><index>[<expr><name>hit</name></expr>]</index></name><operator>.</operator><name>desc</name> <operator>&gt;=</operator> <name>ARG_STRING</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>longopt</name> <operator>&amp;&amp;</operator> <name><name>parse</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>nextarg</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>parse</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt> 

<expr_stmt><expr><name>singleopt</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt> 

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><operator>!</operator><name>nextarg</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>PARAM_REQUIRES_PARAMETER</name></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>usedarg</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></else></if_stmt> 

<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>aliases</name><index>[<expr><name>hit</name></expr>]</index></name><operator>.</operator><name>desc</name> <operator>==</operator> <name>ARG_FILENAME</name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>nextarg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>nextarg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>warnf</name><argument_list>(<argument><expr><name>global</name></expr></argument>, <argument><expr><literal type="string">"The file name argument '%s' looks like a flag.\n"</literal></expr></argument>,

<argument><expr><name>nextarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><operator>(</operator><name><name>aliases</name><index>[<expr><name>hit</name></expr>]</index></name><operator>.</operator><name>desc</name> <operator>==</operator> <name>ARG_NONE</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name>toggle</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>PARAM_NO_PREFIX</name></expr>;</return></block_content></block></if></if_stmt>

<switch>switch<condition>(<expr><name>letter</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'*'</literal></expr>:</case> 

<switch>switch<condition>(<expr><name>subletter</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'4'</literal></expr>:</case> 

<expr_stmt><expr><call><name>GetStr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>config</name><operator>-&gt;</operator><name>dns_ipv4_addr</name></name></expr></argument>, <argument><expr><name>nextarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'6'</literal></expr>:</case> 

<expr_stmt><expr><call><name>GetStr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>config</name><operator>-&gt;</operator><name>dns_ipv6_addr</name></name></expr></argument>, <argument><expr><name>nextarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'a'</literal></expr>:</case> 

<expr_stmt><expr><call><name>GetStr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>config</name><operator>-&gt;</operator><name>random_file</name></name></expr></argument>, <argument><expr><name>nextarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'b'</literal></expr>:</case> 

<expr_stmt><expr><call><name>GetStr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>config</name><operator>-&gt;</operator><name>egd_file</name></name></expr></argument>, <argument><expr><name>nextarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'B'</literal></expr>:</case> 

<expr_stmt><expr><call><name>GetStr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>config</name><operator>-&gt;</operator><name>oauth_bearer</name></name></expr></argument>, <argument><expr><name>nextarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>authtype</name></name> <operator>|=</operator> <name>CURLAUTH_BEARER</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'c'</literal></expr>:</case> 

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>str2udouble</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>config</name><operator>-&gt;</operator><name>connecttimeout</name></name></expr></argument>, <argument><expr><name>nextarg</name></expr></argument>,

<argument><expr><name>LONG_MAX</name><operator>/</operator><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>err</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'C'</literal></expr>:</case> 

<expr_stmt><expr><call><name>GetStr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>config</name><operator>-&gt;</operator><name>doh_url</name></name></expr></argument>, <argument><expr><name>nextarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'d'</literal></expr>:</case> 

<expr_stmt><expr><call><name>GetStr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>config</name><operator>-&gt;</operator><name>cipher_list</name></name></expr></argument>, <argument><expr><name>nextarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'D'</literal></expr>:</case> 

<expr_stmt><expr><call><name>GetStr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>config</name><operator>-&gt;</operator><name>dns_interface</name></name></expr></argument>, <argument><expr><name>nextarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'e'</literal></expr>:</case> 

<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>disable_epsv</name></name> <operator>=</operator> <name>toggle</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'f'</literal></expr>:</case> 

<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>disallow_username_in_url</name></name> <operator>=</operator> <name>toggle</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'E'</literal></expr>:</case> 

<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>disable_epsv</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><operator>!</operator><name>toggle</name><operator>)</operator></expr>?</condition><then><expr><name>TRUE</name></expr></then><else>:<expr><name>FALSE</name></expr></else></ternary></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'F'</literal></expr>:</case> 

<expr_stmt><expr><call><name>GetStr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>config</name><operator>-&gt;</operator><name>dns_servers</name></name></expr></argument>, <argument><expr><name>nextarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'g'</literal></expr>:</case> 

<expr_stmt><expr><call><name>GetStr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>global</name><operator>-&gt;</operator><name>trace_dump</name></name></expr></argument>, <argument><expr><name>nextarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>global</name><operator>-&gt;</operator><name>tracetype</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>global</name><operator>-&gt;</operator><name>tracetype</name></name> <operator>!=</operator> <name>TRACE_BIN</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>warnf</name><argument_list>(<argument><expr><name>global</name></expr></argument>, <argument><expr><literal type="string">"--trace overrides an earlier trace/verbose option\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>global</name><operator>-&gt;</operator><name>tracetype</name></name> <operator>=</operator> <name>TRACE_BIN</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'G'</literal></expr>:</case> 

<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>nonpn</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><operator>!</operator><name>toggle</name><operator>)</operator></expr>?</condition><then><expr><name>TRUE</name></expr></then><else>:<expr><name>FALSE</name></expr></else></ternary></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'h'</literal></expr>:</case> 

<expr_stmt><expr><call><name>GetStr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>global</name><operator>-&gt;</operator><name>trace_dump</name></name></expr></argument>, <argument><expr><name>nextarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>global</name><operator>-&gt;</operator><name>tracetype</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>global</name><operator>-&gt;</operator><name>tracetype</name></name> <operator>!=</operator> <name>TRACE_ASCII</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>warnf</name><argument_list>(<argument><expr><name>global</name></expr></argument>,

<argument><expr><literal type="string">"--trace-ascii overrides an earlier trace/verbose option\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>global</name><operator>-&gt;</operator><name>tracetype</name></name> <operator>=</operator> <name>TRACE_ASCII</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'H'</literal></expr>:</case> 

<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>noalpn</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><operator>!</operator><name>toggle</name><operator>)</operator></expr>?</condition><then><expr><name>TRUE</name></expr></then><else>:<expr><name>FALSE</name></expr></else></ternary></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'i'</literal></expr>:</case> 

<block>{<block_content>

<decl_stmt><decl><type><name>curl_off_t</name></type> <name>value</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ParameterError</name></type> <name>pe</name> <init>= <expr><call><name>GetSizeParameter</name><argument_list>(<argument><expr><name>global</name></expr></argument>, <argument><expr><name>nextarg</name></expr></argument>, <argument><expr><literal type="string">"rate"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>pe</name> <operator>!=</operator> <name>PARAM_OK</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>pe</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>recvpersecond</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>sendpersecond</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>

</block_content>}</block>

<break>break;</break>

<case>case <expr><literal type="char">'j'</literal></expr>:</case> 

<if_stmt><if>if<condition>(<expr><name>toggle</name> <operator>&amp;&amp;</operator>

<operator>!</operator><operator>(</operator><name><name>curlinfo</name><operator>-&gt;</operator><name>features</name></name> <operator>&amp;</operator> <operator>(</operator><name>CURL_VERSION_LIBZ</name> <operator>|</operator> <name>CURL_VERSION_BROTLI</name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>PARAM_LIBCURL_DOESNT_SUPPORT</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>encoding</name></name> <operator>=</operator> <name>toggle</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'J'</literal></expr>:</case> 

<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>tr_encoding</name></name> <operator>=</operator> <name>toggle</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'k'</literal></expr>:</case> 

<if_stmt><if>if<condition>(<expr><name>toggle</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>authtype</name></name> <operator>|=</operator> <name>CURLAUTH_DIGEST</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>authtype</name></name> <operator>&amp;=</operator> <operator>~</operator><name>CURLAUTH_DIGEST</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'l'</literal></expr>:</case> 

<if_stmt><if>if<condition>(<expr><name>toggle</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>curlinfo</name><operator>-&gt;</operator><name>features</name></name> <operator>&amp;</operator> <name>CURL_VERSION_SPNEGO</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>authtype</name></name> <operator>|=</operator> <name>CURLAUTH_NEGOTIATE</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><name>PARAM_LIBCURL_DOESNT_SUPPORT</name></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>authtype</name></name> <operator>&amp;=</operator> <operator>~</operator><name>CURLAUTH_NEGOTIATE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'m'</literal></expr>:</case> 

<if_stmt><if>if<condition>(<expr><name>toggle</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>curlinfo</name><operator>-&gt;</operator><name>features</name></name> <operator>&amp;</operator> <name>CURL_VERSION_NTLM</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>authtype</name></name> <operator>|=</operator> <name>CURLAUTH_NTLM</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><name>PARAM_LIBCURL_DOESNT_SUPPORT</name></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>authtype</name></name> <operator>&amp;=</operator> <operator>~</operator><name>CURLAUTH_NTLM</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'M'</literal></expr>:</case> 

<if_stmt><if>if<condition>(<expr><name>toggle</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>curlinfo</name><operator>-&gt;</operator><name>features</name></name> <operator>&amp;</operator> <name>CURL_VERSION_NTLM_WB</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>authtype</name></name> <operator>|=</operator> <name>CURLAUTH_NTLM_WB</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><name>PARAM_LIBCURL_DOESNT_SUPPORT</name></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>authtype</name></name> <operator>&amp;=</operator> <operator>~</operator><name>CURLAUTH_NTLM_WB</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'n'</literal></expr>:</case> 

<if_stmt><if>if<condition>(<expr><name>toggle</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>authtype</name></name> <operator>|=</operator> <name>CURLAUTH_BASIC</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>authtype</name></name> <operator>&amp;=</operator> <operator>~</operator><name>CURLAUTH_BASIC</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'o'</literal></expr>:</case> 

<if_stmt><if>if<condition>(<expr><name>toggle</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>authtype</name></name> <operator>=</operator> <name>CURLAUTH_ANY</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_WATT32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><literal type="char">'p'</literal></expr>:</case> 

<expr_stmt><expr><call><name>dbug_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<case>case <expr><literal type="char">'q'</literal></expr>:</case> 

<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>ftp_create_dirs</name></name> <operator>=</operator> <name>toggle</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'r'</literal></expr>:</case> 

<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>create_dirs</name></name> <operator>=</operator> <name>toggle</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'s'</literal></expr>:</case> 

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>str2num</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>config</name><operator>-&gt;</operator><name>maxredirs</name></name></expr></argument>, <argument><expr><name>nextarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>err</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>maxredirs</name></name> <operator>&lt;</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>PARAM_BAD_NUMERIC</name></expr>;</return></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'t'</literal></expr>:</case> 

<if_stmt><if>if<condition>(<expr><name><name>curlinfo</name><operator>-&gt;</operator><name>features</name></name> <operator>&amp;</operator> <name>CURL_VERSION_NTLM</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>proxyntlm</name></name> <operator>=</operator> <name>toggle</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><name>PARAM_LIBCURL_DOESNT_SUPPORT</name></expr>;</return></block_content></block></else></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'u'</literal></expr>:</case> 

<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>crlf</name></name> <operator>=</operator> <name>toggle</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'v'</literal></expr>:</case> 

<if_stmt><if>if<condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>nextarg</name></expr></argument>, <argument><expr><literal type="string">"-"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>newfile</name> <init>= <expr><call><name>fopen</name><argument_list>(<argument><expr><name>nextarg</name></expr></argument>, <argument><expr><name>FOPEN_WRITETEXT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>newfile</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>warnf</name><argument_list>(<argument><expr><name>global</name></expr></argument>, <argument><expr><literal type="string">"Failed to open %s!\n"</literal></expr></argument>, <argument><expr><name>nextarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>global</name><operator>-&gt;</operator><name>errors_fopened</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name><name>global</name><operator>-&gt;</operator><name>errors</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>global</name><operator>-&gt;</operator><name>errors</name></name> <operator>=</operator> <name>newfile</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>global</name><operator>-&gt;</operator><name>errors_fopened</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>global</name><operator>-&gt;</operator><name>errors</name></name> <operator>=</operator> <name>stdout</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'w'</literal></expr>:</case> 

<expr_stmt><expr><call><name>GetStr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>config</name><operator>-&gt;</operator><name>iface</name></name></expr></argument>, <argument><expr><name>nextarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'x'</literal></expr>:</case> 

<if_stmt><if>if<condition>(<expr><name><name>curlinfo</name><operator>-&gt;</operator><name>features</name></name> <operator>&amp;</operator> <name>CURL_VERSION_KERBEROS4</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>GetStr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>config</name><operator>-&gt;</operator><name>krblevel</name></name></expr></argument>, <argument><expr><name>nextarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><name>PARAM_LIBCURL_DOESNT_SUPPORT</name></expr>;</return></block_content></block></else></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'X'</literal></expr>:</case> 

<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>haproxy_protocol</name></name> <operator>=</operator> <name>toggle</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'y'</literal></expr>:</case> 

<block>{<block_content>

<decl_stmt><decl><type><name>curl_off_t</name></type> <name>value</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ParameterError</name></type> <name>pe</name> <init>=

<expr><call><name>GetSizeParameter</name><argument_list>(<argument><expr><name>global</name></expr></argument>, <argument><expr><name>nextarg</name></expr></argument>, <argument><expr><literal type="string">"max-filesize"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>pe</name> <operator>!=</operator> <name>PARAM_OK</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>pe</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>max_filesize</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>

</block_content>}</block>

<break>break;</break>

<case>case <expr><literal type="char">'z'</literal></expr>:</case> 

<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>disable_eprt</name></name> <operator>=</operator> <name>toggle</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'Z'</literal></expr>:</case> 

<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>disable_eprt</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><operator>!</operator><name>toggle</name><operator>)</operator></expr>?</condition><then><expr><name>TRUE</name></expr></then><else>:<expr><name>FALSE</name></expr></else></ternary></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'~'</literal></expr>:</case> 

<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>xattr</name></name> <operator>=</operator> <name>toggle</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'@'</literal></expr>:</case> 

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>getout</name></name> <modifier>*</modifier></type><name>url</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>config</name><operator>-&gt;</operator><name>url_get</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>url_get</name></name> <operator>=</operator> <name><name>config</name><operator>-&gt;</operator><name>url_list</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>url_get</name></name></expr>)</condition> <block>{<block_content>

<while>while<condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>url_get</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>config</name><operator>-&gt;</operator><name>url_get</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>GETOUT_URL</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>url_get</name></name> <operator>=</operator> <name><name>config</name><operator>-&gt;</operator><name>url_get</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></while>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>url_get</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>url</name> <operator>=</operator> <name><name>config</name><operator>-&gt;</operator><name>url_get</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>url_get</name></name> <operator>=</operator> <name>url</name> <operator>=</operator> <call><name>new_getout</name><argument_list>(<argument><expr><name>config</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>url</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>PARAM_NO_MEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>GetStr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>url</name><operator>-&gt;</operator><name>url</name></name></expr></argument>, <argument><expr><name>nextarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>url</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>GETOUT_URL</name></expr>;</expr_stmt>

</block_content>}</block>

</block_content>}</block></switch>

<break>break;</break>

<case>case <expr><literal type="char">'$'</literal></expr>:</case> 

<switch>switch<condition>(<expr><name>subletter</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'a'</literal></expr>:</case> 

<if_stmt><if>if<condition>(<expr><name>toggle</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>curlinfo</name><operator>-&gt;</operator><name>features</name></name> <operator>&amp;</operator> <name>CURL_VERSION_SSL</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>PARAM_LIBCURL_DOESNT_SUPPORT</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>ftp_ssl</name></name> <operator>=</operator> <name>toggle</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'b'</literal></expr>:</case> 

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>config</name><operator>-&gt;</operator><name>ftpport</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'c'</literal></expr>:</case> 

<expr_stmt><expr><call><name>GetStr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>config</name><operator>-&gt;</operator><name>proxy</name></name></expr></argument>, <argument><expr><name>nextarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>proxyver</name></name> <operator>=</operator> <name>CURLPROXY_SOCKS5</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'t'</literal></expr>:</case> 

<expr_stmt><expr><call><name>GetStr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>config</name><operator>-&gt;</operator><name>proxy</name></name></expr></argument>, <argument><expr><name>nextarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>proxyver</name></name> <operator>=</operator> <name>CURLPROXY_SOCKS4</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'T'</literal></expr>:</case> 

<expr_stmt><expr><call><name>GetStr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>config</name><operator>-&gt;</operator><name>proxy</name></name></expr></argument>, <argument><expr><name>nextarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>proxyver</name></name> <operator>=</operator> <name>CURLPROXY_SOCKS4A</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'2'</literal></expr>:</case> 

<expr_stmt><expr><call><name>GetStr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>config</name><operator>-&gt;</operator><name>proxy</name></name></expr></argument>, <argument><expr><name>nextarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>proxyver</name></name> <operator>=</operator> <name>CURLPROXY_SOCKS5_HOSTNAME</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'d'</literal></expr>:</case> 

<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>tcp_nodelay</name></name> <operator>=</operator> <name>toggle</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'e'</literal></expr>:</case> 

<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>proxydigest</name></name> <operator>=</operator> <name>toggle</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'f'</literal></expr>:</case> 

<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>proxybasic</name></name> <operator>=</operator> <name>toggle</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'g'</literal></expr>:</case> 

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>str2unum</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>config</name><operator>-&gt;</operator><name>req_retry</name></name></expr></argument>, <argument><expr><name>nextarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>err</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'V'</literal></expr>:</case> 

<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>retry_connrefused</name></name> <operator>=</operator> <name>toggle</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'h'</literal></expr>:</case> 

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>str2unummax</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>config</name><operator>-&gt;</operator><name>retry_delay</name></name></expr></argument>, <argument><expr><name>nextarg</name></expr></argument>, <argument><expr><name>LONG_MAX</name><operator>/</operator><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>err</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'i'</literal></expr>:</case> 

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>str2unummax</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>config</name><operator>-&gt;</operator><name>retry_maxtime</name></name></expr></argument>, <argument><expr><name>nextarg</name></expr></argument>, <argument><expr><name>LONG_MAX</name><operator>/</operator><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>err</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'k'</literal></expr>:</case> 

<if_stmt><if>if<condition>(<expr><name><name>curlinfo</name><operator>-&gt;</operator><name>features</name></name> <operator>&amp;</operator> <name>CURL_VERSION_SPNEGO</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>proxynegotiate</name></name> <operator>=</operator> <name>toggle</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><name>PARAM_LIBCURL_DOESNT_SUPPORT</name></expr>;</return></block_content></block></else></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'m'</literal></expr>:</case> 

<expr_stmt><expr><call><name>GetStr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>config</name><operator>-&gt;</operator><name>ftp_account</name></name></expr></argument>, <argument><expr><name>nextarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'n'</literal></expr>:</case> 

<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>proxyanyauth</name></name> <operator>=</operator> <name>toggle</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'o'</literal></expr>:</case> 

<expr_stmt><expr><name><name>global</name><operator>-&gt;</operator><name>tracetime</name></name> <operator>=</operator> <name>toggle</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'p'</literal></expr>:</case> 

<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>ignorecl</name></name> <operator>=</operator> <name>toggle</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'q'</literal></expr>:</case> 

<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>ftp_skip_ip</name></name> <operator>=</operator> <name>toggle</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'r'</literal></expr>:</case> 

<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>ftp_filemethod</name></name> <operator>=</operator> <call><name>ftpfilemethod</name><argument_list>(<argument><expr><name>config</name></expr></argument>, <argument><expr><name>nextarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'s'</literal></expr>:</case> <block>{<block_content> 

<decl_stmt><decl><type><name>char</name></type> <name><name>lrange</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>nextarg</name></expr></init></decl>;</decl_stmt>

<while>while<condition>(<expr><call><name>ISDIGIT</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if<condition>(<expr><operator>*</operator><name>p</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sscanf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">" - %6s"</literal></expr></argument>, <argument><expr><name>lrange</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>str2unum</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>config</name><operator>-&gt;</operator><name>localport</name></name></expr></argument>, <argument><expr><name>nextarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>err</name> <operator>||</operator> <operator>(</operator><name><name>config</name><operator>-&gt;</operator><name>localport</name></name> <operator>&gt;</operator> <literal type="number">65535</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>PARAM_BAD_USE</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>rc</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>localportrange</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if> 

<else>else <block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>str2unum</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>config</name><operator>-&gt;</operator><name>localportrange</name></name></expr></argument>, <argument><expr><name>lrange</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>err</name> <operator>||</operator> <operator>(</operator><name><name>config</name><operator>-&gt;</operator><name>localportrange</name></name> <operator>&gt;</operator> <literal type="number">65535</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>PARAM_BAD_USE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>localportrange</name></name> <operator>-=</operator> <operator>(</operator><name><name>config</name><operator>-&gt;</operator><name>localport</name></name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>localportrange</name></name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>PARAM_BAD_USE</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><literal type="char">'u'</literal></expr>:</case> 

<expr_stmt><expr><call><name>GetStr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>config</name><operator>-&gt;</operator><name>ftp_alternative_to_user</name></name></expr></argument>, <argument><expr><name>nextarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'v'</literal></expr>:</case> 

<if_stmt><if>if<condition>(<expr><name>toggle</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>curlinfo</name><operator>-&gt;</operator><name>features</name></name> <operator>&amp;</operator> <name>CURL_VERSION_SSL</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>PARAM_LIBCURL_DOESNT_SUPPORT</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>ftp_ssl_reqd</name></name> <operator>=</operator> <name>toggle</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'w'</literal></expr>:</case> 

<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>disable_sessionid</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><operator>!</operator><name>toggle</name><operator>)</operator></expr>?</condition><then><expr><name>TRUE</name></expr></then><else>:<expr><name>FALSE</name></expr></else></ternary></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'x'</literal></expr>:</case> 

<if_stmt><if>if<condition>(<expr><name>toggle</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>curlinfo</name><operator>-&gt;</operator><name>features</name></name> <operator>&amp;</operator> <name>CURL_VERSION_SSL</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>PARAM_LIBCURL_DOESNT_SUPPORT</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>ftp_ssl_control</name></name> <operator>=</operator> <name>toggle</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'y'</literal></expr>:</case> 

<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>ftp_ssl_ccc</name></name> <operator>=</operator> <name>toggle</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>config</name><operator>-&gt;</operator><name>ftp_ssl_ccc_mode</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>ftp_ssl_ccc_mode</name></name> <operator>=</operator> <name>CURLFTPSSL_CCC_PASSIVE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'j'</literal></expr>:</case> 

<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>ftp_ssl_ccc</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>ftp_ssl_ccc_mode</name></name> <operator>=</operator> <call><name>ftpcccmethod</name><argument_list>(<argument><expr><name>config</name></expr></argument>, <argument><expr><name>nextarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'z'</literal></expr>:</case> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_LIBCURL_OPTION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>warnf</name><argument_list>(<argument><expr><name>global</name></expr></argument>,

<argument><expr><literal type="string">"--libcurl option was disabled at build-time!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>PARAM_OPTION_UNKNOWN</name></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>GetStr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>global</name><operator>-&gt;</operator><name>libcurl</name></name></expr></argument>, <argument><expr><name>nextarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<case>case <expr><literal type="char">'#'</literal></expr>:</case> 

<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>raw</name></name> <operator>=</operator> <name>toggle</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'0'</literal></expr>:</case> 

<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>post301</name></name> <operator>=</operator> <name>toggle</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'1'</literal></expr>:</case> 

<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>nokeepalive</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><operator>!</operator><name>toggle</name><operator>)</operator></expr>?</condition><then><expr><name>TRUE</name></expr></then><else>:<expr><name>FALSE</name></expr></else></ternary></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'3'</literal></expr>:</case> 

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>str2unum</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>config</name><operator>-&gt;</operator><name>alivetime</name></name></expr></argument>, <argument><expr><name>nextarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>err</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'4'</literal></expr>:</case> 

<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>post302</name></name> <operator>=</operator> <name>toggle</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'I'</literal></expr>:</case> 

<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>post303</name></name> <operator>=</operator> <name>toggle</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'5'</literal></expr>:</case> 

<expr_stmt><expr><call><name>GetStr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>config</name><operator>-&gt;</operator><name>noproxy</name></name></expr></argument>, <argument><expr><name>nextarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'7'</literal></expr>:</case> 

<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>socks5_gssapi_nec</name></name> <operator>=</operator> <name>toggle</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'8'</literal></expr>:</case> 

<expr_stmt><expr><call><name>GetStr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>config</name><operator>-&gt;</operator><name>proxy</name></name></expr></argument>, <argument><expr><name>nextarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>proxyver</name></name> <operator>=</operator> <name>CURLPROXY_HTTP_1_0</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'9'</literal></expr>:</case> 

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>str2unum</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>config</name><operator>-&gt;</operator><name>tftp_blksize</name></name></expr></argument>, <argument><expr><name>nextarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>err</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'A'</literal></expr>:</case> 

<expr_stmt><expr><call><name>GetStr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>config</name><operator>-&gt;</operator><name>mail_from</name></name></expr></argument>, <argument><expr><name>nextarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'B'</literal></expr>:</case> 

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>add2list</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>config</name><operator>-&gt;</operator><name>mail_rcpt</name></name></expr></argument>, <argument><expr><name>nextarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>err</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'C'</literal></expr>:</case> 

<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>ftp_pret</name></name> <operator>=</operator> <name>toggle</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'D'</literal></expr>:</case> 

<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>proto_present</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>proto2num</name><argument_list>(<argument><expr><name>config</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>config</name><operator>-&gt;</operator><name>proto</name></name></expr></argument>, <argument><expr><name>nextarg</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>PARAM_BAD_USE</name></expr>;</return></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'E'</literal></expr>:</case> 

<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>proto_redir_present</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>proto2num</name><argument_list>(<argument><expr><name>config</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>config</name><operator>-&gt;</operator><name>proto_redir</name></name></expr></argument>, <argument><expr><name>nextarg</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>PARAM_BAD_USE</name></expr>;</return></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'F'</literal></expr>:</case> 

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>add2list</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>config</name><operator>-&gt;</operator><name>resolve</name></name></expr></argument>, <argument><expr><name>nextarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>err</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'G'</literal></expr>:</case> 

<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>gssapi_delegation</name></name> <operator>=</operator> <call><name>delegation</name><argument_list>(<argument><expr><name>config</name></expr></argument>, <argument><expr><name>nextarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'H'</literal></expr>:</case> 

<expr_stmt><expr><call><name>GetStr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>config</name><operator>-&gt;</operator><name>mail_auth</name></name></expr></argument>, <argument><expr><name>nextarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'J'</literal></expr>:</case> 

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_METALINK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>mlmaj</name></decl>, <decl><type ref="prev"/><name>mlmin</name></decl>, <decl><type ref="prev"/><name>mlpatch</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>metalink_get_version</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mlmaj</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mlmin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mlpatch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>mlmaj</name><operator>*</operator><literal type="number">10000</literal><operator>)</operator><operator>+</operator><operator>(</operator><name>mlmin</name><operator>*</operator><literal type="number">100</literal><operator>)</operator> <operator>+</operator> <name>mlpatch</name> <operator>&lt;</operator> <name>CURL_REQ_LIBMETALINK_VERS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>warnf</name><argument_list>(<argument><expr><name>global</name></expr></argument>,

<argument><expr><literal type="string">"--metalink option cannot be used because the version of "</literal>

<literal type="string">"the linked libmetalink library is too old. "</literal>

<literal type="string">"Required: %d.%d.%d, found %d.%d.%d\n"</literal></expr></argument>,

<argument><expr><name>CURL_REQ_LIBMETALINK_MAJOR</name></expr></argument>,

<argument><expr><name>CURL_REQ_LIBMETALINK_MINOR</name></expr></argument>,

<argument><expr><name>CURL_REQ_LIBMETALINK_PATCH</name></expr></argument>,

<argument><expr><name>mlmaj</name></expr></argument>, <argument><expr><name>mlmin</name></expr></argument>, <argument><expr><name>mlpatch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>PARAM_BAD_USE</name></expr>;</return>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>use_metalink</name></name> <operator>=</operator> <name>toggle</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>warnf</name><argument_list>(<argument><expr><name>global</name></expr></argument>, <argument><expr><literal type="string">"--metalink option is ignored because the binary is "</literal>

<literal type="string">"built without the Metalink support.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<break>break;</break>

</block_content>}</block>

<case>case <expr><literal type="char">'6'</literal></expr>:</case> 

<expr_stmt><expr><call><name>GetStr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>config</name><operator>-&gt;</operator><name>sasl_authzid</name></name></expr></argument>, <argument><expr><name>nextarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'K'</literal></expr>:</case> 

<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>sasl_ir</name></name> <operator>=</operator> <name>toggle</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'L'</literal></expr>:</case> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CURLDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>global</name><operator>-&gt;</operator><name>test_event_based</name></name> <operator>=</operator> <name>toggle</name></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>warnf</name><argument_list>(<argument><expr><name>global</name></expr></argument>, <argument><expr><literal type="string">"--test-event is ignored unless a debug build!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<break>break;</break>

<case>case <expr><literal type="char">'M'</literal></expr>:</case> 

<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>abstract_unix_socket</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GetStr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>config</name><operator>-&gt;</operator><name>unix_socket_path</name></name></expr></argument>, <argument><expr><name>nextarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'N'</literal></expr>:</case> 

<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>path_as_is</name></name> <operator>=</operator> <name>toggle</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'O'</literal></expr>:</case> 

<expr_stmt><expr><call><name>GetStr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>config</name><operator>-&gt;</operator><name>proxy_service_name</name></name></expr></argument>, <argument><expr><name>nextarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'P'</literal></expr>:</case> 

<expr_stmt><expr><call><name>GetStr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>config</name><operator>-&gt;</operator><name>service_name</name></name></expr></argument>, <argument><expr><name>nextarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'Q'</literal></expr>:</case> 

<expr_stmt><expr><call><name>GetStr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>config</name><operator>-&gt;</operator><name>proto_default</name></name></expr></argument>, <argument><expr><name>nextarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>check_protocol</name><argument_list>(<argument><expr><name><name>config</name><operator>-&gt;</operator><name>proto_default</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>err</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'R'</literal></expr>:</case> 

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>str2udouble</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>config</name><operator>-&gt;</operator><name>expect100timeout</name></name></expr></argument>, <argument><expr><name>nextarg</name></expr></argument>, <argument><expr><name>LONG_MAX</name><operator>/</operator><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>err</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'S'</literal></expr>:</case> 

<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>tftp_no_options</name></name> <operator>=</operator> <name>toggle</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'U'</literal></expr>:</case> 

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>add2list</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>config</name><operator>-&gt;</operator><name>connect_to</name></name></expr></argument>, <argument><expr><name>nextarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>err</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'W'</literal></expr>:</case> 

<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>abstract_unix_socket</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GetStr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>config</name><operator>-&gt;</operator><name>unix_socket_path</name></name></expr></argument>, <argument><expr><name>nextarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'X'</literal></expr>:</case> 

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>str2tls_max</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>config</name><operator>-&gt;</operator><name>ssl_version_max</name></name></expr></argument>, <argument><expr><name>nextarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>err</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'Y'</literal></expr>:</case> 

<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>suppress_connect_headers</name></name> <operator>=</operator> <name>toggle</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'Z'</literal></expr>:</case> 

<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>ssh_compression</name></name> <operator>=</operator> <name>toggle</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'~'</literal></expr>:</case> 

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>str2unum</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>config</name><operator>-&gt;</operator><name>happy_eyeballs_timeout_ms</name></name></expr></argument>, <argument><expr><name>nextarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>err</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<break>break;</break>

</block_content>}</block></switch>

<break>break;</break>

<case>case <expr><literal type="char">'#'</literal></expr>:</case>

<switch>switch<condition>(<expr><name>subletter</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'m'</literal></expr>:</case> 

<expr_stmt><expr><name><name>global</name><operator>-&gt;</operator><name>noprogress</name></name> <operator>=</operator> <operator>!</operator><name>toggle</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default> 

<expr_stmt><expr><name><name>global</name><operator>-&gt;</operator><name>progressmode</name></name> <operator>=</operator>

<ternary><condition><expr><name>toggle</name></expr> ?</condition><then> <expr><name>CURL_PROGRESS_BAR</name></expr> </then><else>: <expr><name>CURL_PROGRESS_STATS</name></expr></else></ternary></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<break>break;</break>

<case>case <expr><literal type="char">':'</literal></expr>:</case> 

<return>return <expr><name>PARAM_NEXT_OPERATION</name></expr>;</return>

<case>case <expr><literal type="char">'0'</literal></expr>:</case> 

<switch>switch<condition>(<expr><name>subletter</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'\0'</literal></expr>:</case>

<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>httpversion</name></name> <operator>=</operator> <name>CURL_HTTP_VERSION_1_0</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'1'</literal></expr>:</case>

<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>httpversion</name></name> <operator>=</operator> <name>CURL_HTTP_VERSION_1_1</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'2'</literal></expr>:</case>

<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>httpversion</name></name> <operator>=</operator> <name>CURL_HTTP_VERSION_2_0</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'3'</literal></expr>:</case> 

<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>httpversion</name></name> <operator>=</operator> <name>CURL_HTTP_VERSION_2_PRIOR_KNOWLEDGE</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'4'</literal></expr>:</case> 

<if_stmt><if>if<condition>(<expr><name><name>curlinfo</name><operator>-&gt;</operator><name>features</name></name> <operator>&amp;</operator> <name>CURL_VERSION_HTTP3</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>httpversion</name></name> <operator>=</operator> <name>CURL_HTTP_VERSION_3</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><name>PARAM_LIBCURL_DOESNT_SUPPORT</name></expr>;</return></block_content></block></else></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'9'</literal></expr>:</case>

<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>http09_allowed</name></name> <operator>=</operator> <name>toggle</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<break>break;</break>

<case>case <expr><literal type="char">'1'</literal></expr>:</case> 

<switch>switch<condition>(<expr><name>subletter</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'\0'</literal></expr>:</case>

<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>ssl_version</name></name> <operator>=</operator> <name>CURL_SSLVERSION_TLSv1</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'0'</literal></expr>:</case>

<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>ssl_version</name></name> <operator>=</operator> <name>CURL_SSLVERSION_TLSv1_0</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'1'</literal></expr>:</case>

<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>ssl_version</name></name> <operator>=</operator> <name>CURL_SSLVERSION_TLSv1_1</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'2'</literal></expr>:</case>

<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>ssl_version</name></name> <operator>=</operator> <name>CURL_SSLVERSION_TLSv1_2</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'3'</literal></expr>:</case>

<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>ssl_version</name></name> <operator>=</operator> <name>CURL_SSLVERSION_TLSv1_3</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'A'</literal></expr>:</case> 

<expr_stmt><expr><call><name>GetStr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>config</name><operator>-&gt;</operator><name>cipher13_list</name></name></expr></argument>, <argument><expr><name>nextarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'B'</literal></expr>:</case> 

<expr_stmt><expr><call><name>GetStr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>config</name><operator>-&gt;</operator><name>proxy_cipher13_list</name></name></expr></argument>, <argument><expr><name>nextarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<break>break;</break>

<case>case <expr><literal type="char">'2'</literal></expr>:</case>

<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>ssl_version</name></name> <operator>=</operator> <name>CURL_SSLVERSION_SSLv2</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'3'</literal></expr>:</case>

<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>ssl_version</name></name> <operator>=</operator> <name>CURL_SSLVERSION_SSLv3</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'4'</literal></expr>:</case>

<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>ip_version</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'6'</literal></expr>:</case>

<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>ip_version</name></name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'a'</literal></expr>:</case>

<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>ftp_append</name></name> <operator>=</operator> <name>toggle</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'A'</literal></expr>:</case>

<expr_stmt><expr><call><name>GetStr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>config</name><operator>-&gt;</operator><name>useragent</name></name></expr></argument>, <argument><expr><name>nextarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'b'</literal></expr>:</case>

<switch>switch<condition>(<expr><name>subletter</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'a'</literal></expr>:</case> 

<if_stmt><if>if<condition>(<expr><name><name>curlinfo</name><operator>-&gt;</operator><name>features</name></name> <operator>&amp;</operator> <name>CURL_VERSION_ALTSVC</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>GetStr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>config</name><operator>-&gt;</operator><name>altsvc</name></name></expr></argument>, <argument><expr><name>nextarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><name>PARAM_LIBCURL_DOESNT_SUPPORT</name></expr>;</return></block_content></block></else></if_stmt>

<break>break;</break>

<default>default:</default> 

<if_stmt><if>if<condition>(<expr><name><name>nextarg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'@'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>nextarg</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><call><name>strchr</name><argument_list>(<argument><expr><name>nextarg</name></expr></argument>, <argument><expr><literal type="char">'='</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>GetStr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>config</name><operator>-&gt;</operator><name>cookie</name></name></expr></argument>, <argument><expr><name>nextarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>GetStr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>config</name><operator>-&gt;</operator><name>cookiefile</name></name></expr></argument>, <argument><expr><name>nextarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

<break>break;</break>

<case>case <expr><literal type="char">'B'</literal></expr>:</case>

<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>use_ascii</name></name> <operator>=</operator> <name>toggle</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'c'</literal></expr>:</case>

<expr_stmt><expr><call><name>GetStr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>config</name><operator>-&gt;</operator><name>cookiejar</name></name></expr></argument>, <argument><expr><name>nextarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'C'</literal></expr>:</case>

<if_stmt><if>if<condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>nextarg</name></expr></argument>, <argument><expr><literal type="string">"-"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>str2offset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>config</name><operator>-&gt;</operator><name>resume_from</name></name></expr></argument>, <argument><expr><name>nextarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>err</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>resume_from_current</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>resume_from_current</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>resume_from</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>use_resume</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'d'</literal></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>postdata</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>file</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>raw_mode</name> <init>= <expr><operator>(</operator><name>subletter</name> <operator>==</operator> <literal type="char">'r'</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>subletter</name> <operator>==</operator> <literal type="char">'e'</literal></expr>)</condition> <block>{<block_content> 

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>strchr</name><argument_list>(<argument><expr><name>nextarg</name></expr></argument>, <argument><expr><literal type="char">'='</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>nlen</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name>is_file</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>p</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>nextarg</name></expr></argument>, <argument><expr><literal type="char">'@'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>p</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>nlen</name> <operator>=</operator> <name>p</name> <operator>-</operator> <name>nextarg</name></expr>;</expr_stmt> 

<expr_stmt><expr><name>is_file</name> <operator>=</operator> <operator>*</operator><name>p</name><operator>++</operator></expr>;</expr_stmt> 

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>nlen</name> <operator>=</operator> <name>is_file</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>nextarg</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><literal type="char">'@'</literal> <operator>==</operator> <name>is_file</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"-"</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>file</name> <operator>=</operator> <name>stdin</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_binmode</name><argument_list>(<argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>file</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"rb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>file</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>warnf</name><argument_list>(<argument><expr><name>global</name></expr></argument>,

<argument><expr><literal type="string">"Couldn't read data from file \"%s\", this makes "</literal>

<literal type="string">"an empty POST.\n"</literal></expr></argument>, <argument><expr><name>nextarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>file2memory</name><argument_list>(<argument><expr><operator>&amp;</operator><name>postdata</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>file</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>file</name> <operator>!=</operator> <name>stdin</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>err</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>GetStr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>postdata</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>postdata</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>postdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>postdata</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>postdata</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>postdata</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>PARAM_NO_MEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>enc</name> <init>= <expr><call><name>curl_easy_escape</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>postdata</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name>postdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if<condition>(<expr><name>enc</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>outlen</name> <init>= <expr><name>nlen</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>enc</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>n</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><name>outlen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>n</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>curl_free</name><argument_list>(<argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>PARAM_NO_MEM</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>nlen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><call><name>msnprintf</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>outlen</name></expr></argument>, <argument><expr><literal type="string">"%.*s=%s"</literal></expr></argument>, <argument><expr><name>nlen</name></expr></argument>, <argument><expr><name>nextarg</name></expr></argument>, <argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <name>outlen</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <name>outlen</name><operator>-</operator><literal type="number">2</literal></expr>;</expr_stmt> 

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>curl_free</name><argument_list>(<argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>postdata</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><name>PARAM_NO_MEM</name></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><literal type="char">'@'</literal> <operator>==</operator> <operator>*</operator><name>nextarg</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>raw_mode</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>nextarg</name><operator>++</operator></expr>;</expr_stmt> 

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"-"</literal></expr></argument>, <argument><expr><name>nextarg</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>file</name> <operator>=</operator> <name>stdin</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>subletter</name> <operator>==</operator> <literal type="char">'b'</literal></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><call><name>set_binmode</name><argument_list>(<argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>file</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>nextarg</name></expr></argument>, <argument><expr><literal type="string">"rb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>file</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>warnf</name><argument_list>(<argument><expr><name>global</name></expr></argument>, <argument><expr><literal type="string">"Couldn't read data from file \"%s\", this makes "</literal>

<literal type="string">"an empty POST.\n"</literal></expr></argument>, <argument><expr><name>nextarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name>subletter</name> <operator>==</operator> <literal type="char">'b'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>file2memory</name><argument_list>(<argument><expr><operator>&amp;</operator><name>postdata</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>file2string</name><argument_list>(<argument><expr><operator>&amp;</operator><name>postdata</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>postdata</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>postdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name>file</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>file</name> <operator>!=</operator> <name>stdin</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>err</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>postdata</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>postdata</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>postdata</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>PARAM_NO_MEM</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>GetStr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>postdata</name></expr></argument>, <argument><expr><name>nextarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>postdata</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>postdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DOES_CONVERSIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name>subletter</name> <operator>!=</operator> <literal type="char">'b'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>convert_to_network</name><argument_list>(<argument><expr><name>postdata</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>postdata</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name>postdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>PARAM_NO_MEM</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>postfields</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>oldpost</name> <init>= <expr><name><name>config</name><operator>-&gt;</operator><name>postfields</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>curl_off_t</name></type> <name>oldlen</name> <init>= <expr><name><name>config</name><operator>-&gt;</operator><name>postfieldsize</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>curl_off_t</name></type> <name>newlen</name> <init>= <expr><name>oldlen</name> <operator>+</operator> <call><name>curlx_uztoso</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>postfields</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>newlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>config</name><operator>-&gt;</operator><name>postfields</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name>oldpost</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name>postdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>PARAM_NO_MEM</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>config</name><operator>-&gt;</operator><name>postfields</name></name></expr></argument>, <argument><expr><name>oldpost</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>oldlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>postfields</name><index>[<expr><name>oldlen</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\x26'</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>config</name><operator>-&gt;</operator><name>postfields</name><index>[<expr><name>oldlen</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>postdata</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>postfields</name><index>[<expr><name>oldlen</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>size</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name>oldpost</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name>postdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>postfieldsize</name></name> <operator>+=</operator> <name>size</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>postfields</name></name> <operator>=</operator> <name>postdata</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>postfieldsize</name></name> <operator>=</operator> <call><name>curlx_uztoso</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block>

<break>break;</break>

<case>case <expr><literal type="char">'D'</literal></expr>:</case>

<expr_stmt><expr><call><name>GetStr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>config</name><operator>-&gt;</operator><name>headerfile</name></name></expr></argument>, <argument><expr><name>nextarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'e'</literal></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><call><name>strstr</name><argument_list>(<argument><expr><name>nextarg</name></expr></argument>, <argument><expr><literal type="string">";auto"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>ptr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>autoreferer</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>autoreferer</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>GetStr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>config</name><operator>-&gt;</operator><name>referer</name></name></expr></argument>, <argument><expr><name>nextarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<break>break;</break>

<case>case <expr><literal type="char">'E'</literal></expr>:</case>

<switch>switch<condition>(<expr><name>subletter</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'\0'</literal></expr>:</case> 

<expr_stmt><expr><call><name>GetFileAndPassword</name><argument_list>(<argument><expr><name>nextarg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>config</name><operator>-&gt;</operator><name>cert</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>config</name><operator>-&gt;</operator><name>key_passwd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'a'</literal></expr>:</case> 

<expr_stmt><expr><call><name>GetStr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>config</name><operator>-&gt;</operator><name>cacert</name></name></expr></argument>, <argument><expr><name>nextarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'b'</literal></expr>:</case> 

<expr_stmt><expr><call><name>GetStr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>config</name><operator>-&gt;</operator><name>cert_type</name></name></expr></argument>, <argument><expr><name>nextarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'c'</literal></expr>:</case> 

<expr_stmt><expr><call><name>GetStr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>config</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name>nextarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'d'</literal></expr>:</case> 

<expr_stmt><expr><call><name>GetStr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>config</name><operator>-&gt;</operator><name>key_type</name></name></expr></argument>, <argument><expr><name>nextarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'e'</literal></expr>:</case> 

<expr_stmt><expr><call><name>GetStr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>config</name><operator>-&gt;</operator><name>key_passwd</name></name></expr></argument>, <argument><expr><name>nextarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cleanarg</name><argument_list>(<argument><expr><name>nextarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'f'</literal></expr>:</case> 

<expr_stmt><expr><call><name>GetStr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>config</name><operator>-&gt;</operator><name>engine</name></name></expr></argument>, <argument><expr><name>nextarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>engine</name></name> <operator>&amp;&amp;</operator> <call><name>curl_strequal</name><argument_list>(<argument><expr><name><name>config</name><operator>-&gt;</operator><name>engine</name></name></expr></argument>, <argument><expr><literal type="string">"list"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>PARAM_ENGINES_REQUESTED</name></expr>;</return></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'g'</literal></expr>:</case> 

<expr_stmt><expr><call><name>GetStr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>config</name><operator>-&gt;</operator><name>capath</name></name></expr></argument>, <argument><expr><name>nextarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'h'</literal></expr>:</case> 

<expr_stmt><expr><call><name>GetStr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>config</name><operator>-&gt;</operator><name>pubkey</name></name></expr></argument>, <argument><expr><name>nextarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'i'</literal></expr>:</case> 

<expr_stmt><expr><call><name>GetStr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>config</name><operator>-&gt;</operator><name>hostpubmd5</name></name></expr></argument>, <argument><expr><name>nextarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>config</name><operator>-&gt;</operator><name>hostpubmd5</name></name> <operator>||</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>config</name><operator>-&gt;</operator><name>hostpubmd5</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">32</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>PARAM_BAD_USE</name></expr>;</return></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'j'</literal></expr>:</case> 

<expr_stmt><expr><call><name>GetStr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>config</name><operator>-&gt;</operator><name>crlfile</name></name></expr></argument>, <argument><expr><name>nextarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'k'</literal></expr>:</case> 

<if_stmt><if>if<condition>(<expr><name><name>curlinfo</name><operator>-&gt;</operator><name>features</name></name> <operator>&amp;</operator> <name>CURL_VERSION_TLSAUTH_SRP</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>GetStr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>config</name><operator>-&gt;</operator><name>tls_username</name></name></expr></argument>, <argument><expr><name>nextarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><name>PARAM_LIBCURL_DOESNT_SUPPORT</name></expr>;</return></block_content></block></else></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'l'</literal></expr>:</case> 

<if_stmt><if>if<condition>(<expr><name><name>curlinfo</name><operator>-&gt;</operator><name>features</name></name> <operator>&amp;</operator> <name>CURL_VERSION_TLSAUTH_SRP</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>GetStr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>config</name><operator>-&gt;</operator><name>tls_password</name></name></expr></argument>, <argument><expr><name>nextarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><name>PARAM_LIBCURL_DOESNT_SUPPORT</name></expr>;</return></block_content></block></else></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'m'</literal></expr>:</case> 

<if_stmt><if>if<condition>(<expr><name><name>curlinfo</name><operator>-&gt;</operator><name>features</name></name> <operator>&amp;</operator> <name>CURL_VERSION_TLSAUTH_SRP</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>GetStr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>config</name><operator>-&gt;</operator><name>tls_authtype</name></name></expr></argument>, <argument><expr><name>nextarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>curl_strequal</name><argument_list>(<argument><expr><name><name>config</name><operator>-&gt;</operator><name>tls_authtype</name></name></expr></argument>, <argument><expr><literal type="string">"SRP"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>PARAM_LIBCURL_DOESNT_SUPPORT</name></expr>;</return></block_content></block></if></if_stmt> 

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><name>PARAM_LIBCURL_DOESNT_SUPPORT</name></expr>;</return></block_content></block></else></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'n'</literal></expr>:</case> 

<if_stmt><if>if<condition>(<expr><name><name>curlinfo</name><operator>-&gt;</operator><name>features</name></name> <operator>&amp;</operator> <name>CURL_VERSION_SSL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>ssl_allow_beast</name></name> <operator>=</operator> <name>toggle</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'p'</literal></expr>:</case> 

<expr_stmt><expr><call><name>GetStr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>config</name><operator>-&gt;</operator><name>pinnedpubkey</name></name></expr></argument>, <argument><expr><name>nextarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'P'</literal></expr>:</case> 

<expr_stmt><expr><call><name>GetStr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>config</name><operator>-&gt;</operator><name>proxy_pinnedpubkey</name></name></expr></argument>, <argument><expr><name>nextarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'q'</literal></expr>:</case> 

<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>verifystatus</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'r'</literal></expr>:</case> 

<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>falsestart</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'s'</literal></expr>:</case> 

<if_stmt><if>if<condition>(<expr><name><name>curlinfo</name><operator>-&gt;</operator><name>features</name></name> <operator>&amp;</operator> <name>CURL_VERSION_SSL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>ssl_no_revoke</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'S'</literal></expr>:</case> 

<if_stmt><if>if<condition>(<expr><name><name>curlinfo</name><operator>-&gt;</operator><name>features</name></name> <operator>&amp;</operator> <name>CURL_VERSION_SSL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>ssl_revoke_best_effort</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'t'</literal></expr>:</case> 

<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>tcp_fastopen</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'u'</literal></expr>:</case> 

<if_stmt><if>if<condition>(<expr><name><name>curlinfo</name><operator>-&gt;</operator><name>features</name></name> <operator>&amp;</operator> <name>CURL_VERSION_TLSAUTH_SRP</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>GetStr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>config</name><operator>-&gt;</operator><name>proxy_tls_username</name></name></expr></argument>, <argument><expr><name>nextarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><name>PARAM_LIBCURL_DOESNT_SUPPORT</name></expr>;</return></block_content></block></else></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'v'</literal></expr>:</case> 

<if_stmt><if>if<condition>(<expr><name><name>curlinfo</name><operator>-&gt;</operator><name>features</name></name> <operator>&amp;</operator> <name>CURL_VERSION_TLSAUTH_SRP</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>GetStr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>config</name><operator>-&gt;</operator><name>proxy_tls_password</name></name></expr></argument>, <argument><expr><name>nextarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><name>PARAM_LIBCURL_DOESNT_SUPPORT</name></expr>;</return></block_content></block></else></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'w'</literal></expr>:</case> 

<if_stmt><if>if<condition>(<expr><name><name>curlinfo</name><operator>-&gt;</operator><name>features</name></name> <operator>&amp;</operator> <name>CURL_VERSION_TLSAUTH_SRP</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>GetStr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>config</name><operator>-&gt;</operator><name>proxy_tls_authtype</name></name></expr></argument>, <argument><expr><name>nextarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>curl_strequal</name><argument_list>(<argument><expr><name><name>config</name><operator>-&gt;</operator><name>proxy_tls_authtype</name></name></expr></argument>, <argument><expr><literal type="string">"SRP"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>PARAM_LIBCURL_DOESNT_SUPPORT</name></expr>;</return></block_content></block></if></if_stmt> 

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><name>PARAM_LIBCURL_DOESNT_SUPPORT</name></expr>;</return></block_content></block></else></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'x'</literal></expr>:</case> 

<expr_stmt><expr><call><name>GetFileAndPassword</name><argument_list>(<argument><expr><name>nextarg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>config</name><operator>-&gt;</operator><name>proxy_cert</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>config</name><operator>-&gt;</operator><name>proxy_key_passwd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'y'</literal></expr>:</case> 

<expr_stmt><expr><call><name>GetStr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>config</name><operator>-&gt;</operator><name>proxy_cert_type</name></name></expr></argument>, <argument><expr><name>nextarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'z'</literal></expr>:</case> 

<expr_stmt><expr><call><name>GetStr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>config</name><operator>-&gt;</operator><name>proxy_key</name></name></expr></argument>, <argument><expr><name>nextarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'0'</literal></expr>:</case> 

<expr_stmt><expr><call><name>GetStr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>config</name><operator>-&gt;</operator><name>proxy_key_type</name></name></expr></argument>, <argument><expr><name>nextarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'1'</literal></expr>:</case> 

<expr_stmt><expr><call><name>GetStr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>config</name><operator>-&gt;</operator><name>proxy_key_passwd</name></name></expr></argument>, <argument><expr><name>nextarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cleanarg</name><argument_list>(<argument><expr><name>nextarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'2'</literal></expr>:</case> 

<expr_stmt><expr><call><name>GetStr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>config</name><operator>-&gt;</operator><name>proxy_cipher_list</name></name></expr></argument>, <argument><expr><name>nextarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'3'</literal></expr>:</case> 

<expr_stmt><expr><call><name>GetStr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>config</name><operator>-&gt;</operator><name>proxy_crlfile</name></name></expr></argument>, <argument><expr><name>nextarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'4'</literal></expr>:</case> 

<if_stmt><if>if<condition>(<expr><name><name>curlinfo</name><operator>-&gt;</operator><name>features</name></name> <operator>&amp;</operator> <name>CURL_VERSION_SSL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>proxy_ssl_allow_beast</name></name> <operator>=</operator> <name>toggle</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'5'</literal></expr>:</case> 

<expr_stmt><expr><call><name>GetStr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>config</name><operator>-&gt;</operator><name>login_options</name></name></expr></argument>, <argument><expr><name>nextarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'6'</literal></expr>:</case> 

<expr_stmt><expr><call><name>GetStr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>config</name><operator>-&gt;</operator><name>proxy_cacert</name></name></expr></argument>, <argument><expr><name>nextarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'7'</literal></expr>:</case> 

<expr_stmt><expr><call><name>GetStr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>config</name><operator>-&gt;</operator><name>proxy_capath</name></name></expr></argument>, <argument><expr><name>nextarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'8'</literal></expr>:</case> 

<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>proxy_insecure_ok</name></name> <operator>=</operator> <name>toggle</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'9'</literal></expr>:</case> 

<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>proxy_ssl_version</name></name> <operator>=</operator> <name>CURL_SSLVERSION_TLSv1</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'A'</literal></expr>:</case>

<if_stmt><if>if<condition>(<expr><name>toggle</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>socks5_auth</name></name> <operator>|=</operator> <name>CURLAUTH_BASIC</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>socks5_auth</name></name> <operator>&amp;=</operator> <operator>~</operator><name>CURLAUTH_BASIC</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'B'</literal></expr>:</case>

<if_stmt><if>if<condition>(<expr><name>toggle</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>socks5_auth</name></name> <operator>|=</operator> <name>CURLAUTH_GSSAPI</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>socks5_auth</name></name> <operator>&amp;=</operator> <operator>~</operator><name>CURLAUTH_GSSAPI</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'C'</literal></expr>:</case>

<expr_stmt><expr><call><name>GetStr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>config</name><operator>-&gt;</operator><name>etag_save_file</name></name></expr></argument>, <argument><expr><name>nextarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'D'</literal></expr>:</case>

<expr_stmt><expr><call><name>GetStr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>config</name><operator>-&gt;</operator><name>etag_compare_file</name></name></expr></argument>, <argument><expr><name>nextarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default> 

<return>return <expr><name>PARAM_OPTION_UNKNOWN</name></expr>;</return>

</block_content>}</block></switch>

<break>break;</break>

<case>case <expr><literal type="char">'f'</literal></expr>:</case>

<switch>switch<condition>(<expr><name>subletter</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'a'</literal></expr>:</case> 

<expr_stmt><expr><name><name>global</name><operator>-&gt;</operator><name>fail_early</name></name> <operator>=</operator> <name>toggle</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'b'</literal></expr>:</case> 

<expr_stmt><expr><name><name>global</name><operator>-&gt;</operator><name>styled_output</name></name> <operator>=</operator> <name>toggle</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'c'</literal></expr>:</case> 

<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>mail_rcpt_allowfails</name></name> <operator>=</operator> <name>toggle</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default> 

<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>failonerror</name></name> <operator>=</operator> <name>toggle</name></expr>;</expr_stmt>

</block_content>}</block></switch>

<break>break;</break>

<case>case <expr><literal type="char">'F'</literal></expr>:</case>

<if_stmt><if>if<condition>(<expr><call><name>formparse</name><argument_list>(<argument><expr><name>config</name></expr></argument>,

<argument><expr><name>nextarg</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>config</name><operator>-&gt;</operator><name>mimeroot</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>config</name><operator>-&gt;</operator><name>mimecurrent</name></name></expr></argument>,

<argument><expr><ternary><condition><expr><operator>(</operator><name>subletter</name> <operator>==</operator> <literal type="char">'s'</literal><operator>)</operator></expr>?</condition><then><expr><name>TRUE</name></expr></then><else>:<expr><name>FALSE</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> 

<return>return <expr><name>PARAM_BAD_USE</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>SetHTTPrequest</name><argument_list>(<argument><expr><name>config</name></expr></argument>, <argument><expr><name>HTTPREQ_MIMEPOST</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>config</name><operator>-&gt;</operator><name>httpreq</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>PARAM_BAD_USE</name></expr>;</return></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'g'</literal></expr>:</case> 

<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>globoff</name></name> <operator>=</operator> <name>toggle</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'G'</literal></expr>:</case> 

<if_stmt><if>if<condition>(<expr><name>subletter</name> <operator>==</operator> <literal type="char">'a'</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><call><name>GetStr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>config</name><operator>-&gt;</operator><name>request_target</name></name></expr></argument>, <argument><expr><name>nextarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>use_httpget</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'h'</literal></expr>:</case> 

<if_stmt><if>if<condition>(<expr><name>toggle</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>PARAM_HELP_REQUESTED</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'H'</literal></expr>:</case>

<if_stmt><if>if<condition>(<expr><name><name>nextarg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'@'</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>string</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>use_stdin</name> <init>= <expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>nextarg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>file</name> <init>= <expr><ternary><condition><expr><name>use_stdin</name></expr>?</condition><then><expr><name>stdin</name></expr></then><else>:<expr><call><name>fopen</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>nextarg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>FOPEN_READTEXT</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>file</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>warnf</name><argument_list>(<argument><expr><name>global</name></expr></argument>, <argument><expr><literal type="string">"Failed to open %s!\n"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>nextarg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>file2memory</name><argument_list>(<argument><expr><operator>&amp;</operator><name>string</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>err</name> <operator>&amp;&amp;</operator> <name>string</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>h</name> <init>= <expr><call><name>strtok</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><literal type="string">"\r\n"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<while>while<condition>(<expr><name>h</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>subletter</name> <operator>==</operator> <literal type="char">'p'</literal></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>add2list</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>config</name><operator>-&gt;</operator><name>proxyheaders</name></name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>add2list</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>config</name><operator>-&gt;</operator><name>headers</name></name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name>err</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>h</name> <operator>=</operator> <call><name>strtok</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>use_stdin</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>err</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>subletter</name> <operator>==</operator> <literal type="char">'p'</literal></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>add2list</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>config</name><operator>-&gt;</operator><name>proxyheaders</name></name></expr></argument>, <argument><expr><name>nextarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>add2list</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>config</name><operator>-&gt;</operator><name>headers</name></name></expr></argument>, <argument><expr><name>nextarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name>err</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'i'</literal></expr>:</case>

<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>show_headers</name></name> <operator>=</operator> <name>toggle</name></expr>;</expr_stmt> 

<break>break;</break>

<case>case <expr><literal type="char">'j'</literal></expr>:</case>

<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>cookiesession</name></name> <operator>=</operator> <name>toggle</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'I'</literal></expr>:</case> 

<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>no_body</name></name> <operator>=</operator> <name>toggle</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>show_headers</name></name> <operator>=</operator> <name>toggle</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>SetHTTPrequest</name><argument_list>(<argument><expr><name>config</name></expr></argument>,

<argument><expr><ternary><condition><expr><operator>(</operator><name><name>config</name><operator>-&gt;</operator><name>no_body</name></name><operator>)</operator></expr>?</condition><then><expr><name>HTTPREQ_HEAD</name></expr></then><else>:<expr><name>HTTPREQ_GET</name></expr></else></ternary></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>config</name><operator>-&gt;</operator><name>httpreq</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>PARAM_BAD_USE</name></expr>;</return></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'J'</literal></expr>:</case> 

<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>show_headers</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>warnf</name><argument_list>(<argument><expr><name>global</name></expr></argument>,

<argument><expr><literal type="string">"--include and --remote-header-name cannot be combined.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>PARAM_BAD_USE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>content_disposition</name></name> <operator>=</operator> <name>toggle</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'k'</literal></expr>:</case> 

<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>insecure_ok</name></name> <operator>=</operator> <name>toggle</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'K'</literal></expr>:</case> 

<if_stmt><if>if<condition>(<expr><call><name>parseconfig</name><argument_list>(<argument><expr><name>nextarg</name></expr></argument>, <argument><expr><name>global</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>warnf</name><argument_list>(<argument><expr><name>global</name></expr></argument>, <argument><expr><literal type="string">"error trying read config from the '%s' file\n"</literal></expr></argument>,

<argument><expr><name>nextarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'l'</literal></expr>:</case>

<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>dirlistonly</name></name> <operator>=</operator> <name>toggle</name></expr>;</expr_stmt> 

<break>break;</break>

<case>case <expr><literal type="char">'L'</literal></expr>:</case>

<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>followlocation</name></name> <operator>=</operator> <name>toggle</name></expr>;</expr_stmt> 

<switch>switch<condition>(<expr><name>subletter</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'t'</literal></expr>:</case>

<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>unrestricted_auth</name></name> <operator>=</operator> <name>toggle</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<break>break;</break>

<case>case <expr><literal type="char">'m'</literal></expr>:</case>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>str2udouble</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>config</name><operator>-&gt;</operator><name>timeout</name></name></expr></argument>, <argument><expr><name>nextarg</name></expr></argument>, <argument><expr><name>LONG_MAX</name><operator>/</operator><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>err</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'M'</literal></expr>:</case> 

<if_stmt><if>if<condition>(<expr><name>toggle</name></expr>)</condition> <block>{<block_content> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_MANUAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><name>PARAM_MANUAL_REQUESTED</name></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>warnf</name><argument_list>(<argument><expr><name>global</name></expr></argument>,

<argument><expr><literal type="string">"built-in manual was disabled at build-time!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>PARAM_OPTION_UNKNOWN</name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'n'</literal></expr>:</case>

<switch>switch<condition>(<expr><name>subletter</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'o'</literal></expr>:</case> 

<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>netrc_opt</name></name> <operator>=</operator> <name>toggle</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'e'</literal></expr>:</case> 

<expr_stmt><expr><call><name>GetStr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>config</name><operator>-&gt;</operator><name>netrc_file</name></name></expr></argument>, <argument><expr><name>nextarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>netrc</name></name> <operator>=</operator> <name>toggle</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<break>break;</break>

<case>case <expr><literal type="char">'N'</literal></expr>:</case>

<if_stmt><if>if<condition>(<expr><name>longopt</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>nobuffer</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><operator>!</operator><name>toggle</name><operator>)</operator></expr>?</condition><then><expr><name>TRUE</name></expr></then><else>:<expr><name>FALSE</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>nobuffer</name></name> <operator>=</operator> <name>toggle</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'O'</literal></expr>:</case> 

<if_stmt><if>if<condition>(<expr><name>subletter</name> <operator>==</operator> <literal type="char">'a'</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>default_node_flags</name></name> <operator>=</operator> <ternary><condition><expr><name>toggle</name></expr>?</condition><then><expr><name>GETOUT_USEREMOTE</name></expr></then><else>:<expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<case>case <expr><literal type="char">'o'</literal></expr>:</case> 

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>getout</name></name> <modifier>*</modifier></type><name>url</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>config</name><operator>-&gt;</operator><name>url_out</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>url_out</name></name> <operator>=</operator> <name><name>config</name><operator>-&gt;</operator><name>url_list</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>url_out</name></name></expr>)</condition> <block>{<block_content>

<while>while<condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>url_out</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>config</name><operator>-&gt;</operator><name>url_out</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>GETOUT_OUTFILE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>url_out</name></name> <operator>=</operator> <name><name>config</name><operator>-&gt;</operator><name>url_out</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></while>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>url_out</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>url</name> <operator>=</operator> <name><name>config</name><operator>-&gt;</operator><name>url_out</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>url_out</name></name> <operator>=</operator> <name>url</name> <operator>=</operator> <call><name>new_getout</name><argument_list>(<argument><expr><name>config</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>url</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>PARAM_NO_MEM</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><literal type="char">'o'</literal> <operator>==</operator> <name>letter</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>GetStr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>url</name><operator>-&gt;</operator><name>outfile</name></name></expr></argument>, <argument><expr><name>nextarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>url</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>GETOUT_USEREMOTE</name></expr>;</expr_stmt> 

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name><name>url</name><operator>-&gt;</operator><name>outfile</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt> 

<if_stmt><if>if<condition>(<expr><name>toggle</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>url</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>GETOUT_USEREMOTE</name></expr>;</expr_stmt></block_content></block></if> 

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>url</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>GETOUT_USEREMOTE</name></expr>;</expr_stmt></block_content></block></else></if_stmt> 

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>url</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>GETOUT_OUTFILE</name></expr>;</expr_stmt>

</block_content>}</block>

<break>break;</break>

<case>case <expr><literal type="char">'P'</literal></expr>:</case>

<expr_stmt><expr><call><name>GetStr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>config</name><operator>-&gt;</operator><name>ftpport</name></name></expr></argument>, <argument><expr><name>nextarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'p'</literal></expr>:</case>

<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>proxytunnel</name></name> <operator>=</operator> <name>toggle</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'q'</literal></expr>:</case> 

<break>break;</break>

<case>case <expr><literal type="char">'Q'</literal></expr>:</case>

<switch>switch<condition>(<expr><name><name>nextarg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'-'</literal></expr>:</case>

<expr_stmt><expr><name>nextarg</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>add2list</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>config</name><operator>-&gt;</operator><name>postquote</name></name></expr></argument>, <argument><expr><name>nextarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'+'</literal></expr>:</case>

<expr_stmt><expr><name>nextarg</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>add2list</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>config</name><operator>-&gt;</operator><name>prequote</name></name></expr></argument>, <argument><expr><name>nextarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>add2list</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>config</name><operator>-&gt;</operator><name>quote</name></name></expr></argument>, <argument><expr><name>nextarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if<condition>(<expr><name>err</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'r'</literal></expr>:</case>

<if_stmt><if>if<condition>(<expr><call><name>ISDIGIT</name><argument_list>(<argument><expr><operator>*</operator><name>nextarg</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strchr</name><argument_list>(<argument><expr><name>nextarg</name></expr></argument>, <argument><expr><literal type="char">'-'</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>curl_off_t</name></type> <name>off</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><call><name>curlx_strtoofft</name><argument_list>(<argument><expr><name>nextarg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>off</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>warnf</name><argument_list>(<argument><expr><name>global</name></expr></argument>, <argument><expr><literal type="string">"unsupported range point\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>PARAM_BAD_USE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>warnf</name><argument_list>(<argument><expr><name>global</name></expr></argument>,

<argument><expr><literal type="string">"A specified range MUST include at least one dash (-). "</literal>

<literal type="string">"Appending one for you!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msnprintf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%"</literal> <name>CURL_FORMAT_CURL_OFF_T</name> <literal type="string">"-"</literal></expr></argument>, <argument><expr><name>off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>config</name><operator>-&gt;</operator><name>range</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>range</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>config</name><operator>-&gt;</operator><name>range</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>PARAM_NO_MEM</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tmp_range</name> <init>= <expr><name>nextarg</name></expr></init></decl>;</decl_stmt>

<while>while<condition>(<expr><operator>*</operator><name>tmp_range</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>ISDIGIT</name><argument_list>(<argument><expr><operator>*</operator><name>tmp_range</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>*</operator><name>tmp_range</name> <operator>!=</operator> <literal type="char">'-'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>tmp_range</name> <operator>!=</operator> <literal type="char">','</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>warnf</name><argument_list>(<argument><expr><name>global</name></expr></argument>, <argument><expr><literal type="string">"Invalid character is found in given range. "</literal>

<literal type="string">"A specified range MUST have only digits in "</literal>

<literal type="string">"\'start\'-\'stop\'. The server's response to this "</literal>

<literal type="string">"request is uncertain.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>tmp_range</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>GetStr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>config</name><operator>-&gt;</operator><name>range</name></name></expr></argument>, <argument><expr><name>nextarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<break>break;</break>

<case>case <expr><literal type="char">'R'</literal></expr>:</case>

<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>remote_time</name></name> <operator>=</operator> <name>toggle</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'s'</literal></expr>:</case>

<if_stmt><if>if<condition>(<expr><name>toggle</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>global</name><operator>-&gt;</operator><name>mute</name></name> <operator>=</operator> <name><name>global</name><operator>-&gt;</operator><name>noprogress</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>global</name><operator>-&gt;</operator><name>mute</name></name> <operator>=</operator> <name><name>global</name><operator>-&gt;</operator><name>noprogress</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>global</name><operator>-&gt;</operator><name>showerror</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>global</name><operator>-&gt;</operator><name>showerror</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><operator>!</operator><name>toggle</name><operator>)</operator></expr>?</condition><then><expr><name>TRUE</name></expr></then><else>:<expr><name>FALSE</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<break>break;</break>

<case>case <expr><literal type="char">'S'</literal></expr>:</case>

<expr_stmt><expr><name><name>global</name><operator>-&gt;</operator><name>showerror</name></name> <operator>=</operator> <ternary><condition><expr><name>toggle</name></expr>?</condition><then><expr><literal type="number">1</literal></expr></then><else>:<expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt> 

<break>break;</break>

<case>case <expr><literal type="char">'t'</literal></expr>:</case>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>add2list</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>config</name><operator>-&gt;</operator><name>telnet_options</name></name></expr></argument>, <argument><expr><name>nextarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>err</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'T'</literal></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>getout</name></name> <modifier>*</modifier></type><name>url</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>config</name><operator>-&gt;</operator><name>url_ul</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>url_ul</name></name> <operator>=</operator> <name><name>config</name><operator>-&gt;</operator><name>url_list</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>url_ul</name></name></expr>)</condition> <block>{<block_content>

<while>while<condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>url_ul</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>config</name><operator>-&gt;</operator><name>url_ul</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>GETOUT_UPLOAD</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>url_ul</name></name> <operator>=</operator> <name><name>config</name><operator>-&gt;</operator><name>url_ul</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></while>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>url_ul</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>url</name> <operator>=</operator> <name><name>config</name><operator>-&gt;</operator><name>url_ul</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>url_ul</name></name> <operator>=</operator> <name>url</name> <operator>=</operator> <call><name>new_getout</name><argument_list>(<argument><expr><name>config</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>url</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>PARAM_NO_MEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>url</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>GETOUT_UPLOAD</name></expr>;</expr_stmt> 

<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>*</operator><name>nextarg</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>url</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>GETOUT_NOUPLOAD</name></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>GetStr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>url</name><operator>-&gt;</operator><name>infile</name></name></expr></argument>, <argument><expr><name>nextarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block>

<break>break;</break>

<case>case <expr><literal type="char">'u'</literal></expr>:</case>

<expr_stmt><expr><call><name>GetStr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>config</name><operator>-&gt;</operator><name>userpwd</name></name></expr></argument>, <argument><expr><name>nextarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cleanarg</name><argument_list>(<argument><expr><name>nextarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'U'</literal></expr>:</case>

<expr_stmt><expr><call><name>GetStr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>config</name><operator>-&gt;</operator><name>proxyuserpwd</name></name></expr></argument>, <argument><expr><name>nextarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cleanarg</name><argument_list>(<argument><expr><name>nextarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'v'</literal></expr>:</case>

<if_stmt><if>if<condition>(<expr><name>toggle</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>global</name><operator>-&gt;</operator><name>trace_dump</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>global</name><operator>-&gt;</operator><name>trace_dump</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><literal type="string">"%"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>global</name><operator>-&gt;</operator><name>trace_dump</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>PARAM_NO_MEM</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>global</name><operator>-&gt;</operator><name>tracetype</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>global</name><operator>-&gt;</operator><name>tracetype</name></name> <operator>!=</operator> <name>TRACE_PLAIN</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>warnf</name><argument_list>(<argument><expr><name>global</name></expr></argument>,

<argument><expr><literal type="string">"-v, --verbose overrides an earlier trace/verbose option\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>global</name><operator>-&gt;</operator><name>tracetype</name></name> <operator>=</operator> <name>TRACE_PLAIN</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>global</name><operator>-&gt;</operator><name>tracetype</name></name> <operator>=</operator> <name>TRACE_NONE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'V'</literal></expr>:</case>

<if_stmt><if>if<condition>(<expr><name>toggle</name></expr>)</condition><block type="pseudo"><block_content> 

<return>return <expr><name>PARAM_VERSION_INFO_REQUESTED</name></expr>;</return></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'w'</literal></expr>:</case>

<if_stmt><if>if<condition>(<expr><literal type="char">'@'</literal> <operator>==</operator> <operator>*</operator><name>nextarg</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>file</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fname</name></decl>;</decl_stmt>

<expr_stmt><expr><name>nextarg</name><operator>++</operator></expr>;</expr_stmt> 

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"-"</literal></expr></argument>, <argument><expr><name>nextarg</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>fname</name> <operator>=</operator> <literal type="string">"&lt;stdin&gt;"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>file</name> <operator>=</operator> <name>stdin</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>fname</name> <operator>=</operator> <name>nextarg</name></expr>;</expr_stmt>

<expr_stmt><expr><name>file</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>nextarg</name></expr></argument>, <argument><expr><name>FOPEN_READTEXT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>config</name><operator>-&gt;</operator><name>writeout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>file2string</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>config</name><operator>-&gt;</operator><name>writeout</name></name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>file</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>file</name> <operator>!=</operator> <name>stdin</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>err</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>config</name><operator>-&gt;</operator><name>writeout</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>warnf</name><argument_list>(<argument><expr><name>global</name></expr></argument>, <argument><expr><literal type="string">"Failed to read %s"</literal></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>GetStr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>config</name><operator>-&gt;</operator><name>writeout</name></name></expr></argument>, <argument><expr><name>nextarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'x'</literal></expr>:</case>

<switch>switch<condition>(<expr><name>subletter</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'a'</literal></expr>:</case> 

<expr_stmt><expr><call><name>GetStr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>config</name><operator>-&gt;</operator><name>preproxy</name></name></expr></argument>, <argument><expr><name>nextarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>GetStr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>config</name><operator>-&gt;</operator><name>proxy</name></name></expr></argument>, <argument><expr><name>nextarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>proxyver</name></name> <operator>=</operator> <name>CURLPROXY_HTTP</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<break>break;</break>

<case>case <expr><literal type="char">'X'</literal></expr>:</case>

<expr_stmt><expr><call><name>GetStr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>config</name><operator>-&gt;</operator><name>customrequest</name></name></expr></argument>, <argument><expr><name>nextarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'y'</literal></expr>:</case>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>str2unum</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>config</name><operator>-&gt;</operator><name>low_speed_time</name></name></expr></argument>, <argument><expr><name>nextarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>err</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>config</name><operator>-&gt;</operator><name>low_speed_limit</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>low_speed_limit</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'Y'</literal></expr>:</case>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>str2unum</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>config</name><operator>-&gt;</operator><name>low_speed_limit</name></name></expr></argument>, <argument><expr><name>nextarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>err</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>config</name><operator>-&gt;</operator><name>low_speed_time</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>low_speed_time</name></name> <operator>=</operator> <literal type="number">30</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'Z'</literal></expr>:</case>

<switch>switch<condition>(<expr><name>subletter</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'\0'</literal></expr>:</case> 

<expr_stmt><expr><name><name>global</name><operator>-&gt;</operator><name>parallel</name></name> <operator>=</operator> <name>toggle</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'b'</literal></expr>:</case> 

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>str2unum</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>global</name><operator>-&gt;</operator><name>parallel_max</name></name></expr></argument>, <argument><expr><name>nextarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>err</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>global</name><operator>-&gt;</operator><name>parallel_max</name></name> <operator>&gt;</operator> <name>MAX_PARALLEL</name><operator>)</operator> <operator>||</operator>

<operator>(</operator><name><name>global</name><operator>-&gt;</operator><name>parallel_max</name></name> <operator>&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>global</name><operator>-&gt;</operator><name>parallel_max</name></name> <operator>=</operator> <name>PARALLEL_DEFAULT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'c'</literal></expr>:</case> 

<expr_stmt><expr><name><name>global</name><operator>-&gt;</operator><name>parallel_connect</name></name> <operator>=</operator> <name>toggle</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<break>break;</break>

<case>case <expr><literal type="char">'z'</literal></expr>:</case> 

<switch>switch<condition>(<expr><operator>*</operator><name>nextarg</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'+'</literal></expr>:</case>

<expr_stmt><expr><name>nextarg</name><operator>++</operator></expr>;</expr_stmt>

<default>default:</default>

<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>timecond</name></name> <operator>=</operator> <name>CURL_TIMECOND_IFMODSINCE</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'-'</literal></expr>:</case>

<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>timecond</name></name> <operator>=</operator> <name>CURL_TIMECOND_IFUNMODSINCE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>nextarg</name><operator>++</operator></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'='</literal></expr>:</case>

<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>timecond</name></name> <operator>=</operator> <name>CURL_TIMECOND_LASTMOD</name></expr>;</expr_stmt>

<expr_stmt><expr><name>nextarg</name><operator>++</operator></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><name>now</name> <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>condtime</name></name> <operator>=</operator> <operator>(</operator><name>curl_off_t</name><operator>)</operator><call><name>curl_getdate</name><argument_list>(<argument><expr><name>nextarg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>-</operator><literal type="number">1</literal> <operator>==</operator> <name><name>config</name><operator>-&gt;</operator><name>condtime</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>curl_off_t</name></type> <name>filetime</name> <init>= <expr><call><name>getfiletime</name><argument_list>(<argument><expr><name>nextarg</name></expr></argument>, <argument><expr><name><name>config</name><operator>-&gt;</operator><name>global</name><operator>-&gt;</operator><name>errors</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>filetime</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>condtime</name></name> <operator>=</operator> <name>filetime</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>timecond</name></name> <operator>=</operator> <name>CURL_TIMECOND_NONE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>warnf</name><argument_list>(<argument><expr><name>global</name></expr></argument>,

<argument><expr><literal type="string">"Illegal date format for -z, --time-cond (and not "</literal>

<literal type="string">"a file name). Disabling time condition. "</literal>

<literal type="string">"See curl_getdate(3) for valid date syntax.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<default>default:</default> 

<return>return <expr><name>PARAM_OPTION_UNKNOWN</name></expr>;</return>

</block_content>}</block></switch>

<expr_stmt><expr><name>hit</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block> while<condition>(<expr><operator>!</operator><name>longopt</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>singleopt</name> <operator>&amp;&amp;</operator> <operator>*</operator><operator>++</operator><name>parse</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>*</operator><name>usedarg</name></expr>)</condition>;</do>

<return>return <expr><name>PARAM_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>ParameterError</name></type> <name>parse_args</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>GlobalConfig</name></name> <modifier>*</modifier></type><name>global</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>,

<parameter><decl><type><name>argv_item_t</name></type> <name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>stillflags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>orig_opt</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ParameterError</name></type> <name>result</name> <init>= <expr><name>PARAM_OK</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>OperationConfig</name></name> <modifier>*</modifier></type><name>config</name> <init>= <expr><name><name>global</name><operator>-&gt;</operator><name>first</name></name></expr></init></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>stillflags</name> <operator>=</operator> <name>TRUE</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>argc</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>result</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>orig_opt</name> <operator>=</operator> <name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>stillflags</name> <operator>&amp;&amp;</operator> <operator>(</operator><literal type="char">'-'</literal> <operator>==</operator> <name><name>argv</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>passarg</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>flag</name> <init>= <expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"--"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>stillflags</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>nextarg</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>argc</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr> ?</condition><then> <expr><name><name>argv</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>getparameter</name><argument_list>(<argument><expr><name>flag</name></expr></argument>, <argument><expr><name>nextarg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>passarg</name></expr></argument>, <argument><expr><name>global</name></expr></argument>, <argument><expr><name>config</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>config</name> <operator>=</operator> <name><name>global</name><operator>-&gt;</operator><name>last</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name> <operator>==</operator> <name>PARAM_NEXT_OPERATION</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>PARAM_OK</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>url_list</name></name> <operator>&amp;&amp;</operator> <name><name>config</name><operator>-&gt;</operator><name>url_list</name><operator>-&gt;</operator><name>url</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>OperationConfig</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>next</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>config_init</name><argument_list>(<argument><expr><name><name>config</name><operator>-&gt;</operator><name>next</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>global</name></name> <operator>=</operator> <name>global</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>global</name><operator>-&gt;</operator><name>last</name></name> <operator>=</operator> <name><name>config</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>config</name></expr>;</expr_stmt>

<expr_stmt><expr><name>config</name> <operator>=</operator> <name><name>config</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>PARAM_NO_MEM</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><operator>!</operator><name>result</name> <operator>&amp;&amp;</operator> <name>passarg</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt> 

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>used</name></decl>;</decl_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>getparameter</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><literal type="string">"--url"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>used</name></expr></argument>, <argument><expr><name>global</name></expr></argument>,

<argument><expr><name>config</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if<condition>(<expr><name>result</name> <operator>&amp;&amp;</operator> <name>result</name> <operator>!=</operator> <name>PARAM_HELP_REQUESTED</name> <operator>&amp;&amp;</operator>

<name>result</name> <operator>!=</operator> <name>PARAM_MANUAL_REQUESTED</name> <operator>&amp;&amp;</operator>

<name>result</name> <operator>!=</operator> <name>PARAM_VERSION_INFO_REQUESTED</name> <operator>&amp;&amp;</operator>

<name>result</name> <operator>!=</operator> <name>PARAM_ENGINES_REQUESTED</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>reason</name> <init>= <expr><call><name>param2text</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>orig_opt</name> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">":"</literal></expr></argument>, <argument><expr><name>orig_opt</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>helpf</name><argument_list>(<argument><expr><name><name>global</name><operator>-&gt;</operator><name>errors</name></name></expr></argument>, <argument><expr><literal type="string">"option %s: %s\n"</literal></expr></argument>, <argument><expr><name>orig_opt</name></expr></argument>, <argument><expr><name>reason</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>helpf</name><argument_list>(<argument><expr><name><name>global</name><operator>-&gt;</operator><name>errors</name></name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>reason</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

</unit>
