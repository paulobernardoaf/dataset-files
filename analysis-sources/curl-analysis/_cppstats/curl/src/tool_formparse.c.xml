<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\curl-analysis\_cppstats\curl\src\tool_formparse.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tool_setup.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"strcase.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENABLE_CURLX_PRINTF</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curlx.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tool_cfgable.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tool_convert.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tool_msgs.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tool_binmode.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tool_getparam.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tool_paramhlp.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tool_formparse.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memdebug.h"</cpp:file></cpp:include> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONST_FREE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>free((void *) (x))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONST_SAFEFREE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>Curl_safefree(*((void **) &amp;(x)))</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>tool_mime</name> <modifier>*</modifier></type><name>tool_mime_new</name><parameter_list>(<parameter><decl><type><name>tool_mime</name> <modifier>*</modifier></type><name>parent</name></decl></parameter>, <parameter><decl><type><name>toolmimekind</name></type> <name>kind</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>tool_mime</name> <modifier>*</modifier></type><name>m</name> <init>= <expr><operator>(</operator><name>tool_mime</name> <operator>*</operator><operator>)</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>m</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>m</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>kind</name></name> <operator>=</operator> <name>kind</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>parent</name></name> <operator>=</operator> <name>parent</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>parent</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name><name>parent</name><operator>-&gt;</operator><name>subparts</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>parent</name><operator>-&gt;</operator><name>subparts</name></name> <operator>=</operator> <name>m</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>m</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>tool_mime</name> <modifier>*</modifier></type><name>tool_mime_new_parts</name><parameter_list>(<parameter><decl><type><name>tool_mime</name> <modifier>*</modifier></type><name>parent</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>tool_mime_new</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name>TOOLMIME_PARTS</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>tool_mime</name> <modifier>*</modifier></type><name>tool_mime_new_data</name><parameter_list>(<parameter><decl><type><name>tool_mime</name> <modifier>*</modifier></type><name>parent</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>tool_mime</name> <modifier>*</modifier></type><name>m</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>data</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>m</name> <operator>=</operator> <call><name>tool_mime_new</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name>TOOLMIME_DATA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>m</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>CONST_FREE</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>m</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>tool_mime</name> <modifier>*</modifier></type><name>tool_mime_new_filedata</name><parameter_list>(<parameter><decl><type><name>tool_mime</name> <modifier>*</modifier></type><name>parent</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>isremotefile</name></decl></parameter>,

<parameter><decl><type><name>CURLcode</name> <modifier>*</modifier></type><name>errcode</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>tool_mime</name> <modifier>*</modifier></type><name>m</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>errcode</name> <operator>=</operator> <name>CURLE_OUT_OF_MEMORY</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="string">"-"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>filename</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>filename</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>m</name> <operator>=</operator> <call><name>tool_mime_new</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name>TOOLMIME_FILE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>m</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>CONST_FREE</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>filename</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>isremotefile</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>kind</name></name> <operator>=</operator> <name>TOOLMIME_FILEDATA</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>errcode</name> <operator>=</operator> <name>CURLE_OK</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content> 

<decl_stmt><decl><type><name>int</name></type> <name>fd</name> <init>= <expr><call><name>fileno</name><argument_list>(<argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>curl_off_t</name></type> <name>size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>curl_off_t</name></type> <name>origin</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>struct_stat</name></type> <name>sbuf</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>set_binmode</name><argument_list>(<argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>origin</name> <operator>=</operator> <call><name>ftell</name><argument_list>(<argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>fd</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>origin</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>fstat</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sbuf</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VMS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<name><name>sbuf</name><operator>.</operator><name>st_fab_rfm</name></name> <operator>!=</operator> <name>FAB$C_VAR</name> <operator>&amp;&amp;</operator> <name><name>sbuf</name><operator>.</operator><name>st_fab_rfm</name></name> <operator>!=</operator> <name>FAB$C_VFC</name> <operator>&amp;&amp;</operator>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<call><name>S_ISREG</name><argument_list>(<argument><expr><name><name>sbuf</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>size</name> <operator>=</operator> <name><name>sbuf</name><operator>.</operator><name>st_size</name></name> <operator>-</operator> <name>origin</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>size</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content> 

<decl_stmt><decl><type><name>size_t</name></type> <name>stdinsize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><call><name>file2memory</name><argument_list>(<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stdinsize</name></expr></argument>, <argument><expr><name>stdin</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>PARAM_OK</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>m</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>ferror</name><argument_list>(<argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_READ_ERROR</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>data</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><operator>!</operator><name>stdinsize</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>data</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>m</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>curlx_uztoso</name><argument_list>(<argument><expr><name>stdinsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>origin</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>m</name> <operator>=</operator> <call><name>tool_mime_new</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name>TOOLMIME_STDIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>m</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>origin</name></name> <operator>=</operator> <name>origin</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>curpos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>isremotefile</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>kind</name></name> <operator>=</operator> <name>TOOLMIME_STDINDATA</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>errcode</name> <operator>=</operator> <name>result</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>m</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>tool_mime_free</name><parameter_list>(<parameter><decl><type><name>tool_mime</name> <modifier>*</modifier></type><name>mime</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>mime</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>mime</name><operator>-&gt;</operator><name>subparts</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>tool_mime_free</name><argument_list>(<argument><expr><name><name>mime</name><operator>-&gt;</operator><name>subparts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>mime</name><operator>-&gt;</operator><name>prev</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>tool_mime_free</name><argument_list>(<argument><expr><name><name>mime</name><operator>-&gt;</operator><name>prev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>CONST_SAFEFREE</name><argument_list>(<argument><expr><name><name>mime</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CONST_SAFEFREE</name><argument_list>(<argument><expr><name><name>mime</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CONST_SAFEFREE</name><argument_list>(<argument><expr><name><name>mime</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CONST_SAFEFREE</name><argument_list>(<argument><expr><name><name>mime</name><operator>-&gt;</operator><name>encoder</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CONST_SAFEFREE</name><argument_list>(<argument><expr><name><name>mime</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>curl_slist_free_all</name><argument_list>(<argument><expr><name><name>mime</name><operator>-&gt;</operator><name>headers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>mime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>tool_mime_stdin_read</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>nitems</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>tool_mime</name> <modifier>*</modifier></type><name>sip</name> <init>= <expr><operator>(</operator><name>tool_mime</name> <operator>*</operator><operator>)</operator> <name>arg</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>curl_off_t</name></type> <name>bytesleft</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>size</name></expr>;</expr_stmt> 

<if_stmt><if>if<condition>(<expr><name><name>sip</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>sip</name><operator>-&gt;</operator><name>curpos</name></name> <operator>&gt;=</operator> <name><name>sip</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>bytesleft</name> <operator>=</operator> <name><name>sip</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <name><name>sip</name><operator>-&gt;</operator><name>curpos</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>curlx_uztoso</name><argument_list>(<argument><expr><name>nitems</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>bytesleft</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>nitems</name> <operator>=</operator> <call><name>curlx_sotouz</name><argument_list>(<argument><expr><name>bytesleft</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>nitems</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>sip</name><operator>-&gt;</operator><name>data</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name><name>sip</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <call><name>curlx_sotouz</name><argument_list>(<argument><expr><name><name>sip</name><operator>-&gt;</operator><name>curpos</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>nitems</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>nitems</name> <operator>=</operator> <call><name>fread</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>nitems</name></expr></argument>, <argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>ferror</name><argument_list>(<argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>sip</name><operator>-&gt;</operator><name>config</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>warnf</name><argument_list>(<argument><expr><name><name>sip</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"stdin: %s\n"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sip</name><operator>-&gt;</operator><name>config</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>CURL_READFUNC_ABORT</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>sip</name><operator>-&gt;</operator><name>curpos</name></name> <operator>+=</operator> <call><name>curlx_uztoso</name><argument_list>(<argument><expr><name>nitems</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>nitems</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>tool_mime_stdin_seek</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>instream</name></decl></parameter>, <parameter><decl><type><name>curl_off_t</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>whence</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>tool_mime</name> <modifier>*</modifier></type><name>sip</name> <init>= <expr><operator>(</operator><name>tool_mime</name> <operator>*</operator><operator>)</operator> <name>instream</name></expr></init></decl>;</decl_stmt>

<switch>switch<condition>(<expr><name>whence</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>SEEK_CUR</name></expr>:</case>

<expr_stmt><expr><name>offset</name> <operator>+=</operator> <name><name>sip</name><operator>-&gt;</operator><name>curpos</name></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>SEEK_END</name></expr>:</case>

<expr_stmt><expr><name>offset</name> <operator>+=</operator> <name><name>sip</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if<condition>(<expr><name>offset</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURL_SEEKFUNC_CANTSEEK</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>sip</name><operator>-&gt;</operator><name>data</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>fseek</name><argument_list>(<argument><expr><name>stdin</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator> <operator>(</operator><name>offset</name> <operator>+</operator> <name><name>sip</name><operator>-&gt;</operator><name>origin</name></name><operator>)</operator></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURL_SEEKFUNC_CANTSEEK</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sip</name><operator>-&gt;</operator><name>curpos</name></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>

<return>return <expr><name>CURL_SEEKFUNC_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>tool2curlparts</name><parameter_list>(<parameter><decl><type><name>CURL</name> <modifier>*</modifier></type><name>curl</name></decl></parameter>, <parameter><decl><type><name>tool_mime</name> <modifier>*</modifier></type><name>m</name></decl></parameter>, <parameter><decl><type><name>curl_mime</name> <modifier>*</modifier></type><name>mime</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>ret</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>curl_mimepart</name> <modifier>*</modifier></type><name>part</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>curl_mime</name> <modifier>*</modifier></type><name>submime</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>m</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>tool2curlparts</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>prev</name></name></expr></argument>, <argument><expr><name>mime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>part</name> <operator>=</operator> <call><name>curl_mime_addpart</name><argument_list>(<argument><expr><name>mime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>part</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>CURLE_OUT_OF_MEMORY</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>filename</name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>filename</name></name></expr>;</expr_stmt>

<switch>switch<condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>kind</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>TOOLMIME_PARTS</name></expr>:</case>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>tool2curlmime</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>submime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>curl_mime_subparts</name><argument_list>(<argument><expr><name>part</name></expr></argument>, <argument><expr><name>submime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>ret</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>curl_mime_free</name><argument_list>(<argument><expr><name>submime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>TOOLMIME_DATA</name></expr>:</case>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DOES_CONVERSIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>size</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cp</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><name>size</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>cp</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>CURLE_OUT_OF_MEMORY</name></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>size</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>convert_to_network</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>curl_mime_data</name><argument_list>(<argument><expr><name>part</name></expr></argument>, <argument><expr><name>cp</name></expr></argument>, <argument><expr><name>CURL_ZERO_TERMINATED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>curl_mime_data</name><argument_list>(<argument><expr><name>part</name></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>CURL_ZERO_TERMINATED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<break>break;</break>

<case>case <expr><name>TOOLMIME_FILE</name></expr>:</case>

<case>case <expr><name>TOOLMIME_FILEDATA</name></expr>:</case>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>curl_mime_filedata</name><argument_list>(<argument><expr><name>part</name></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>ret</name> <operator>&amp;&amp;</operator> <name><name>m</name><operator>-&gt;</operator><name>kind</name></name> <operator>==</operator> <name>TOOLMIME_FILEDATA</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>filename</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>curl_mime_filename</name><argument_list>(<argument><expr><name>part</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>TOOLMIME_STDIN</name></expr>:</case>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>filename</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>filename</name> <operator>=</operator> <literal type="string">"-"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<case>case <expr><name>TOOLMIME_STDINDATA</name></expr>:</case>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>curl_mime_data_cb</name><argument_list>(<argument><expr><name>part</name></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>size</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>curl_read_callback</name><operator>)</operator> <name>tool_mime_stdin_read</name></expr></argument>,

<argument><expr><operator>(</operator><name>curl_seek_callback</name><operator>)</operator> <name>tool_mime_stdin_seek</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>ret</name> <operator>&amp;&amp;</operator> <name>filename</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>curl_mime_filename</name><argument_list>(<argument><expr><name>part</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>curl_mime_type</name><argument_list>(<argument><expr><name>part</name></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>curl_mime_headers</name><argument_list>(<argument><expr><name>part</name></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>headers</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>curl_mime_encoder</name><argument_list>(<argument><expr><name>part</name></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>encoder</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>curl_mime_name</name><argument_list>(<argument><expr><name>part</name></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>CURLcode</name></type> <name>tool2curlmime</name><parameter_list>(<parameter><decl><type><name>CURL</name> <modifier>*</modifier></type><name>curl</name></decl></parameter>, <parameter><decl><type><name>tool_mime</name> <modifier>*</modifier></type><name>m</name></decl></parameter>, <parameter><decl><type><name>curl_mime</name> <modifier>*</modifier><modifier>*</modifier></type><name>mime</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>ret</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>mime</name> <operator>=</operator> <call><name>curl_mime_init</name><argument_list>(<argument><expr><name>curl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>*</operator><name>mime</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>CURLE_OUT_OF_MEMORY</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>tool2curlparts</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>subparts</name></name></expr></argument>, <argument><expr><operator>*</operator><name>mime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>curl_mime_free</name><argument_list>(<argument><expr><operator>*</operator><name>mime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>mime</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>get_param_word</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>end_pos</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>endchar</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><operator>*</operator><name>str</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>word_begin</name> <init>= <expr><name>ptr</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>escape</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">'"'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>++</operator><name>ptr</name></expr>;</expr_stmt>

<while>while<condition>(<expr><operator>*</operator><name>ptr</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\\'</literal> <operator>||</operator> <name><name>ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'"'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>escape</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>escape</name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">'"'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>end_pos</name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>escape</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>ptr2</name> <operator>=</operator> <name>escape</name></expr>;</expr_stmt>

<do>do <block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">'\\'</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\\'</literal> <operator>||</operator> <name><name>ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'"'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>ptr</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>ptr2</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>ptr</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block>

while<condition>(<expr><name>ptr</name> <operator>&lt;</operator> <operator>*</operator><name>end_pos</name></expr>)</condition>;</do>

<expr_stmt><expr><operator>*</operator><name>end_pos</name> <operator>=</operator> <name>ptr2</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<while>while<condition>(<expr><operator>*</operator><name>ptr</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>ptr</name> <operator>!=</operator> <literal type="char">';'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>ptr</name> <operator>!=</operator> <name>endchar</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>ptr</name></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><operator>*</operator><name>str</name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>

<return>return <expr><name>word_begin</name> <operator>+</operator> <literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>++</operator><name>ptr</name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>word_begin</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<while>while<condition>(<expr><operator>*</operator><name>ptr</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>ptr</name> <operator>!=</operator> <literal type="char">';'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>ptr</name> <operator>!=</operator> <name>endchar</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>ptr</name></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><operator>*</operator><name>str</name> <operator>=</operator> <operator>*</operator><name>end_pos</name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>

<return>return <expr><name>word_begin</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>slist_append</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>curl_slist</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>plist</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>curl_slist</name></name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>curl_slist_append</name><argument_list>(<argument><expr><operator>*</operator><name>plist</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>s</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>plist</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>read_field_headers</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>OperationConfig</name></name> <modifier>*</modifier></type><name>config</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>curl_slist</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>pheaders</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>hdrlen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>incomment</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>lineno</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>hdrbuf</name><index>[<expr><literal type="number">999</literal></expr>]</index></name></decl>;</decl_stmt> 

<for>for<control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><call><name>getc</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>c</name> <operator>==</operator> <name>EOF</name> <operator>||</operator> <operator>(</operator><operator>!</operator><name>pos</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>ISSPACE</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<while>while<condition>(<expr><name>hdrlen</name> <operator>&amp;&amp;</operator> <call><name>ISSPACE</name><argument_list>(<argument><expr><name><name>hdrbuf</name><index>[<expr><name>hdrlen</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>hdrlen</name><operator>--</operator></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if<condition>(<expr><name>hdrlen</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>hdrbuf</name><index>[<expr><name>hdrlen</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>slist_append</name><argument_list>(<argument><expr><name>pheaders</name></expr></argument>, <argument><expr><name>hdrbuf</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>config</name><operator>-&gt;</operator><name>global</name><operator>-&gt;</operator><name>errors</name></name></expr></argument>,

<argument><expr><literal type="string">"Out of memory for field headers!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>hdrlen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<switch>switch<condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>EOF</name></expr>:</case>

<if_stmt><if>if<condition>(<expr><call><name>ferror</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>config</name><operator>-&gt;</operator><name>global</name><operator>-&gt;</operator><name>errors</name></name></expr></argument>,

<argument><expr><literal type="string">"Header file %s read error: %s\n"</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return> 

<case>case <expr><literal type="char">'\r'</literal></expr>:</case>

<continue>continue;</continue> 

<case>case <expr><literal type="char">'\n'</literal></expr>:</case>

<expr_stmt><expr><name>pos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>incomment</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>lineno</name><operator>++</operator></expr>;</expr_stmt>

<continue>continue;</continue>

<case>case <expr><literal type="char">'#'</literal></expr>:</case>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>pos</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>incomment</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><name>pos</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>incomment</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>hdrlen</name> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>hdrbuf</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>warnf</name><argument_list>(<argument><expr><name><name>config</name><operator>-&gt;</operator><name>global</name></name></expr></argument>, <argument><expr><literal type="string">"File %s line %d: header too long (truncated)\n"</literal></expr></argument>,

<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>hdrlen</name> <operator>&lt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>hdrbuf</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>hdrbuf</name><index>[<expr><name>hdrlen</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator> <name>c</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_param_part</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>OperationConfig</name></name> <modifier>*</modifier></type><name>config</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>endchar</name></decl></parameter>,

<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>pdata</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>ptype</name></decl></parameter>,

<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>pfilename</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>pencoder</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>curl_slist</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>pheaders</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>*</operator><name>str</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>type</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>filename</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>encoder</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>endpos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name>sep</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>type_major</name><index>[<expr><literal type="number">128</literal></expr>]</index></name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>type_minor</name><index>[<expr><literal type="number">128</literal></expr>]</index></name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>endct</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>curl_slist</name></name> <modifier>*</modifier></type><name>headers</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>ptype</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>ptype</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>pfilename</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>pfilename</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>pheaders</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>pheaders</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>pencoder</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>pencoder</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<while>while<condition>(<expr><call><name>ISSPACE</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name>tp</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pdata</name> <operator>=</operator> <call><name>get_param_word</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>endpos</name></expr></argument>, <argument><expr><name>endchar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>*</operator><name>pdata</name> <operator>==</operator> <name>tp</name></expr>)</condition><block type="pseudo"><block_content>

<while>while<condition>(<expr><name>endpos</name> <operator>&gt;</operator> <operator>*</operator><name>pdata</name> <operator>&amp;&amp;</operator> <call><name>ISSPACE</name><argument_list>(<argument><expr><name><name>endpos</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>endpos</name><operator>--</operator></expr>;</expr_stmt></block_content></block></while></block_content></block></if></if_stmt>

<expr_stmt><expr><name>sep</name> <operator>=</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>endpos</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<while>while<condition>(<expr><name>sep</name> <operator>==</operator> <literal type="char">';'</literal></expr>)</condition> <block>{<block_content>

<while>while<condition>(<expr><call><name>ISSPACE</name><argument_list>(<argument><expr><operator>*</operator><operator>++</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<empty_stmt>;</empty_stmt></block_content></block></while>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>endct</name> <operator>&amp;&amp;</operator> <call><name>checkprefix</name><argument_list>(<argument><expr><literal type="string">"type="</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<for>for<control>(<init><expr><name>p</name> <operator>+=</operator> <literal type="number">5</literal></expr>;</init> <condition><expr><call><name>ISSPACE</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<empty_stmt>;</empty_stmt></block_content></block></for>

<expr_stmt><expr><name>type</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><literal type="number">2</literal> <operator>!=</operator> <call><name>sscanf</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><literal type="string">"%127[^/ ]/%127[^;, \n]"</literal></expr></argument>, <argument><expr><name>type_major</name></expr></argument>, <argument><expr><name>type_minor</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>warnf</name><argument_list>(<argument><expr><name><name>config</name><operator>-&gt;</operator><name>global</name></name></expr></argument>, <argument><expr><literal type="string">"Illegally formatted content-type field!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>curl_slist_free_all</name><argument_list>(<argument><expr><name>headers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>type</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>type_major</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>type_minor</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>endct</name> <operator>=</operator> <name>p</name></expr>;</init> <condition><expr><operator>*</operator><name>p</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">';'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>!=</operator> <name>endchar</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>ISSPACE</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>endct</name> <operator>=</operator> <name>p</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><name>sep</name> <operator>=</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><call><name>checkprefix</name><argument_list>(<argument><expr><literal type="string">"filename="</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>endct</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>endct</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>endct</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for<control>(<init><expr><name>p</name> <operator>+=</operator> <literal type="number">9</literal></expr>;</init> <condition><expr><call><name>ISSPACE</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<empty_stmt>;</empty_stmt></block_content></block></for>

<expr_stmt><expr><name>tp</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

<expr_stmt><expr><name>filename</name> <operator>=</operator> <call><name>get_param_word</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>endpos</name></expr></argument>, <argument><expr><name>endchar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>filename</name> <operator>==</operator> <name>tp</name></expr>)</condition><block type="pseudo"><block_content>

<while>while<condition>(<expr><name>endpos</name> <operator>&gt;</operator> <name>filename</name> <operator>&amp;&amp;</operator> <call><name>ISSPACE</name><argument_list>(<argument><expr><name><name>endpos</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>endpos</name><operator>--</operator></expr>;</expr_stmt></block_content></block></while></block_content></block></if></if_stmt>

<expr_stmt><expr><name>sep</name> <operator>=</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>endpos</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><call><name>checkprefix</name><argument_list>(<argument><expr><literal type="string">"headers="</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>endct</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>endct</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>endct</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'@'</literal> <operator>||</operator> <operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'&lt;'</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>hdrfile</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl>;</decl_stmt>

<do>do <block>{<block_content>

<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block> while<condition>(<expr><call><name>ISSPACE</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>

<expr_stmt><expr><name>tp</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

<expr_stmt><expr><name>hdrfile</name> <operator>=</operator> <call><name>get_param_word</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>endpos</name></expr></argument>, <argument><expr><name>endchar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>hdrfile</name> <operator>==</operator> <name>tp</name></expr>)</condition><block type="pseudo"><block_content>

<while>while<condition>(<expr><name>endpos</name> <operator>&gt;</operator> <name>hdrfile</name> <operator>&amp;&amp;</operator> <call><name>ISSPACE</name><argument_list>(<argument><expr><name><name>endpos</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>endpos</name><operator>--</operator></expr>;</expr_stmt></block_content></block></while></block_content></block></if></if_stmt>

<expr_stmt><expr><name>sep</name> <operator>=</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>endpos</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>fp</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>hdrfile</name></expr></argument>, <argument><expr><name>FOPEN_READTEXT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>fp</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>warnf</name><argument_list>(<argument><expr><name><name>config</name><operator>-&gt;</operator><name>global</name></name></expr></argument>, <argument><expr><literal type="string">"Cannot read from %s: %s\n"</literal></expr></argument>, <argument><expr><name>hdrfile</name></expr></argument>,

<argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><call><name>read_field_headers</name><argument_list>(<argument><expr><name>config</name></expr></argument>, <argument><expr><name>hdrfile</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>headers</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>i</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>curl_slist_free_all</name><argument_list>(<argument><expr><name>headers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>hdr</name></decl>;</decl_stmt>

<while>while<condition>(<expr><call><name>ISSPACE</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name>tp</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

<expr_stmt><expr><name>hdr</name> <operator>=</operator> <call><name>get_param_word</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>endpos</name></expr></argument>, <argument><expr><name>endchar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>hdr</name> <operator>==</operator> <name>tp</name></expr>)</condition><block type="pseudo"><block_content>

<while>while<condition>(<expr><name>endpos</name> <operator>&gt;</operator> <name>hdr</name> <operator>&amp;&amp;</operator> <call><name>ISSPACE</name><argument_list>(<argument><expr><name><name>endpos</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>endpos</name><operator>--</operator></expr>;</expr_stmt></block_content></block></while></block_content></block></if></if_stmt>

<expr_stmt><expr><name>sep</name> <operator>=</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>endpos</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>slist_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name>headers</name></expr></argument>, <argument><expr><name>hdr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>config</name><operator>-&gt;</operator><name>global</name><operator>-&gt;</operator><name>errors</name></name></expr></argument>, <argument><expr><literal type="string">"Out of memory for field header!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>curl_slist_free_all</name><argument_list>(<argument><expr><name>headers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><call><name>checkprefix</name><argument_list>(<argument><expr><literal type="string">"encoder="</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>endct</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>endct</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>endct</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for<control>(<init><expr><name>p</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</init> <condition><expr><call><name>ISSPACE</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<empty_stmt>;</empty_stmt></block_content></block></for>

<expr_stmt><expr><name>tp</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

<expr_stmt><expr><name>encoder</name> <operator>=</operator> <call><name>get_param_word</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>endpos</name></expr></argument>, <argument><expr><name>endchar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>encoder</name> <operator>==</operator> <name>tp</name></expr>)</condition><block type="pseudo"><block_content>

<while>while<condition>(<expr><name>endpos</name> <operator>&gt;</operator> <name>encoder</name> <operator>&amp;&amp;</operator> <call><name>ISSPACE</name><argument_list>(<argument><expr><name><name>endpos</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>endpos</name><operator>--</operator></expr>;</expr_stmt></block_content></block></while></block_content></block></if></if_stmt>

<expr_stmt><expr><name>sep</name> <operator>=</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>endpos</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name>endct</name></expr>)</condition> <block>{<block_content>

<for>for<control>(<init><expr><name>endct</name> <operator>=</operator> <name>p</name></expr>;</init> <condition><expr><operator>*</operator><name>p</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">';'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>!=</operator> <name>endchar</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>ISSPACE</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>endct</name> <operator>=</operator> <name>p</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><name>sep</name> <operator>=</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>unknown</name> <init>= <expr><call><name>get_param_word</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>endpos</name></expr></argument>, <argument><expr><name>endchar</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>sep</name> <operator>=</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>endpos</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>*</operator><name>unknown</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>warnf</name><argument_list>(<argument><expr><name><name>config</name><operator>-&gt;</operator><name>global</name></name></expr></argument>, <argument><expr><literal type="string">"skip unknown form field: %s\n"</literal></expr></argument>, <argument><expr><name>unknown</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if<condition>(<expr><name>endct</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>endct</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>ptype</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>ptype</name> <operator>=</operator> <name>type</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>(<expr><name>type</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>warnf</name><argument_list>(<argument><expr><name><name>config</name><operator>-&gt;</operator><name>global</name></name></expr></argument>, <argument><expr><literal type="string">"Field content type not allowed here: %s\n"</literal></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>pfilename</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>pfilename</name> <operator>=</operator> <name>filename</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>(<expr><name>filename</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>warnf</name><argument_list>(<argument><expr><name><name>config</name><operator>-&gt;</operator><name>global</name></name></expr></argument>,

<argument><expr><literal type="string">"Field file name not allowed here: %s\n"</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>pencoder</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>pencoder</name> <operator>=</operator> <name>encoder</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>(<expr><name>encoder</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>warnf</name><argument_list>(<argument><expr><name><name>config</name><operator>-&gt;</operator><name>global</name></name></expr></argument>,

<argument><expr><literal type="string">"Field encoder not allowed here: %s\n"</literal></expr></argument>, <argument><expr><name>encoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>pheaders</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>pheaders</name> <operator>=</operator> <name>headers</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>(<expr><name>headers</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>warnf</name><argument_list>(<argument><expr><name><name>config</name><operator>-&gt;</operator><name>global</name></name></expr></argument>,

<argument><expr><literal type="string">"Field headers not allowed here: %s\n"</literal></expr></argument>, <argument><expr><name><name>headers</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>curl_slist_free_all</name><argument_list>(<argument><expr><name>headers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>str</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

<return>return <expr><name>sep</name> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NULL_CHECK</name><parameter_list>(<parameter><type><name>ptr</name></type></parameter>, <parameter><type><name>init</name></type></parameter>, <parameter><type><name>retcode</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ (ptr) = (init); if(!(ptr)) { warnf(config-&gt;global, "out of memory!\n"); curl_slist_free_all(headers); Curl_safefree(contents); return retcode; } }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SET_TOOL_MIME_PTR</name><parameter_list>(<parameter><type><name>m</name></type></parameter>, <parameter><type><name>field</name></type></parameter>, <parameter><type><name>retcode</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ if(field) NULL_CHECK((m)-&gt;field, strdup(field), retcode); }</cpp:value></cpp:define>

<function><type><name>int</name></type> <name>formparse</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>OperationConfig</name></name> <modifier>*</modifier></type><name>config</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>,

<parameter><decl><type><name>tool_mime</name> <modifier>*</modifier><modifier>*</modifier></type><name>mimeroot</name></decl></parameter>,

<parameter><decl><type><name>tool_mime</name> <modifier>*</modifier><modifier>*</modifier></type><name>mimecurrent</name></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>literal_value</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>contents</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>contp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>type</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>filename</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>encoder</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>curl_slist</name></name> <modifier>*</modifier></type><name>headers</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>tool_mime</name> <modifier>*</modifier></type><name>part</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>res</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>*</operator><name>mimecurrent</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>NULL_CHECK</name><argument_list>(<argument><expr><operator>*</operator><name>mimeroot</name></expr></argument>, <argument><expr><call><name>tool_mime_new_parts</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>mimecurrent</name> <operator>=</operator> <operator>*</operator><name>mimeroot</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>NULL_CHECK</name><argument_list>(<argument><expr><name>contents</name></expr></argument>, <argument><expr><call><name>strdup</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>contp</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>contents</name></expr></argument>, <argument><expr><literal type="char">'='</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>contp</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>sep</name> <init>= <expr><literal type="char">'\0'</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>contp</name> <operator>&gt;</operator> <name>contents</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>name</name> <operator>=</operator> <name>contents</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>contp</name><operator>++</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>*</operator><name>contp</name> <operator>==</operator> <literal type="char">'('</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>literal_value</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>sep</name> <operator>=</operator> <call><name>get_param_part</name><argument_list>(<argument><expr><name>config</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>,

<argument><expr><operator>&amp;</operator><name>contp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>headers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>sep</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name>contents</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">3</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>NULL_CHECK</name><argument_list>(<argument><expr><name>part</name></expr></argument>, <argument><expr><call><name>tool_mime_new_parts</name><argument_list>(<argument><expr><operator>*</operator><name>mimecurrent</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>mimecurrent</name> <operator>=</operator> <name>part</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>part</name><operator>-&gt;</operator><name>headers</name></name> <operator>=</operator> <name>headers</name></expr>;</expr_stmt>

<expr_stmt><expr><name>headers</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SET_TOOL_MIME_PTR</name><argument_list>(<argument><expr><name>part</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><operator>!</operator><name>name</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>contp</name></expr></argument>, <argument><expr><literal type="string">")"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name>literal_value</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>*</operator><name>mimecurrent</name> <operator>==</operator> <operator>*</operator><name>mimeroot</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>warnf</name><argument_list>(<argument><expr><name><name>config</name><operator>-&gt;</operator><name>global</name></name></expr></argument>, <argument><expr><literal type="string">"no multipart to terminate!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name>contents</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">6</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>mimecurrent</name> <operator>=</operator> <name><operator>(</operator><operator>*</operator><name>mimecurrent</name><operator>)</operator><operator>-&gt;</operator><name>parent</name></name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><literal type="char">'@'</literal> <operator>==</operator> <name><name>contp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>literal_value</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>tool_mime</name> <modifier>*</modifier></type><name>subparts</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<do>do <block>{<block_content>

<expr_stmt><expr><operator>++</operator><name>contp</name></expr>;</expr_stmt>

<expr_stmt><expr><name>sep</name> <operator>=</operator> <call><name>get_param_part</name><argument_list>(<argument><expr><name>config</name></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>contp</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>filename</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>encoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>headers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>sep</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name>contents</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">7</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>subparts</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>sep</name> <operator>!=</operator> <literal type="char">','</literal></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name>subparts</name> <operator>=</operator> <operator>*</operator><name>mimecurrent</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>NULL_CHECK</name><argument_list>(<argument><expr><name>subparts</name></expr></argument>, <argument><expr><call><name>tool_mime_new_parts</name><argument_list>(<argument><expr><operator>*</operator><name>mimecurrent</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>NULL_CHECK</name><argument_list>(<argument><expr><name>part</name></expr></argument>,

<argument><expr><call><name>tool_mime_new_filedata</name><argument_list>(<argument><expr><name>subparts</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>res</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>part</name><operator>-&gt;</operator><name>headers</name></name> <operator>=</operator> <name>headers</name></expr>;</expr_stmt>

<expr_stmt><expr><name>headers</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>part</name><operator>-&gt;</operator><name>config</name></name> <operator>=</operator> <name><name>config</name><operator>-&gt;</operator><name>global</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>res</name> <operator>==</operator> <name>CURLE_READ_ERROR</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>part</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>warnf</name><argument_list>(<argument><expr><name><name>config</name><operator>-&gt;</operator><name>global</name></name></expr></argument>,

<argument><expr><literal type="string">"error while reading standard input\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name>contents</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">10</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>CONST_SAFEFREE</name><argument_list>(<argument><expr><name><name>part</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>part</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>part</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <name>CURLE_OK</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>SET_TOOL_MIME_PTR</name><argument_list>(<argument><expr><name>part</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SET_TOOL_MIME_PTR</name><argument_list>(<argument><expr><name>part</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SET_TOOL_MIME_PTR</name><argument_list>(<argument><expr><name>part</name></expr></argument>, <argument><expr><name>encoder</name></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block> while<condition>(<expr><name>sep</name></expr>)</condition>;</do> 

<expr_stmt><expr><name>part</name> <operator>=</operator> <name><operator>(</operator><operator>*</operator><name>mimecurrent</name><operator>)</operator><operator>-&gt;</operator><name>subparts</name></name></expr>;</expr_stmt> 

</block_content>}</block></if>

<else>else <block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>*</operator><name>contp</name> <operator>==</operator> <literal type="char">'&lt;'</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>literal_value</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>++</operator><name>contp</name></expr>;</expr_stmt>

<expr_stmt><expr><name>sep</name> <operator>=</operator> <call><name>get_param_part</name><argument_list>(<argument><expr><name>config</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>contp</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>encoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>headers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>sep</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name>contents</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">14</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>NULL_CHECK</name><argument_list>(<argument><expr><name>part</name></expr></argument>, <argument><expr><call><name>tool_mime_new_filedata</name><argument_list>(<argument><expr><operator>*</operator><name>mimecurrent</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>res</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>part</name><operator>-&gt;</operator><name>headers</name></name> <operator>=</operator> <name>headers</name></expr>;</expr_stmt>

<expr_stmt><expr><name>headers</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>part</name><operator>-&gt;</operator><name>config</name></name> <operator>=</operator> <name><name>config</name><operator>-&gt;</operator><name>global</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>res</name> <operator>==</operator> <name>CURLE_READ_ERROR</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>part</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>warnf</name><argument_list>(<argument><expr><name><name>config</name><operator>-&gt;</operator><name>global</name></name></expr></argument>,

<argument><expr><literal type="string">"error while reading standard input\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name>contents</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">16</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>CONST_SAFEFREE</name><argument_list>(<argument><expr><name><name>part</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>part</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>part</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <name>CURLE_OK</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>literal_value</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>data</name> <operator>=</operator> <name>contp</name></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>sep</name> <operator>=</operator> <call><name>get_param_part</name><argument_list>(<argument><expr><name>config</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>contp</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>filename</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>encoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>headers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>sep</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name>contents</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">17</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>NULL_CHECK</name><argument_list>(<argument><expr><name>part</name></expr></argument>, <argument><expr><call><name>tool_mime_new_data</name><argument_list>(<argument><expr><operator>*</operator><name>mimecurrent</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">18</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>part</name><operator>-&gt;</operator><name>headers</name></name> <operator>=</operator> <name>headers</name></expr>;</expr_stmt>

<expr_stmt><expr><name>headers</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>SET_TOOL_MIME_PTR</name><argument_list>(<argument><expr><name>part</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="number">19</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SET_TOOL_MIME_PTR</name><argument_list>(<argument><expr><name>part</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SET_TOOL_MIME_PTR</name><argument_list>(<argument><expr><name>part</name></expr></argument>, <argument><expr><name>encoder</name></expr></argument>, <argument><expr><literal type="number">21</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>sep</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>contp</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator> <name>sep</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>warnf</name><argument_list>(<argument><expr><name><name>config</name><operator>-&gt;</operator><name>global</name></name></expr></argument>,

<argument><expr><literal type="string">"garbage at end of field specification: %s\n"</literal></expr></argument>, <argument><expr><name>contp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>SET_TOOL_MIME_PTR</name><argument_list>(<argument><expr><name>part</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="number">22</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>warnf</name><argument_list>(<argument><expr><name><name>config</name><operator>-&gt;</operator><name>global</name></name></expr></argument>, <argument><expr><literal type="string">"Illegally formatted input field!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name>contents</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">23</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name>contents</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

</unit>
