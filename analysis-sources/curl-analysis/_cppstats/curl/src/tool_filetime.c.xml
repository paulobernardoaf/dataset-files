<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\curl-analysis\_cppstats\curl\src\tool_filetime.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tool_filetime.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_UTIME_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utime.h&gt;</cpp:file></cpp:include>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SYS_UTIME_H</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/utime.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>curl_off_t</name></type> <name>getfiletime</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>error_stream</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>curl_off_t</name></type> <name>result</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>SIZEOF_CURL_OFF_T</name> <operator>&gt;=</operator> <literal type="number">8</literal><operator>)</operator></expr></cpp:if>

<decl_stmt><decl><type><name>HANDLE</name></type> <name>hfile</name></decl>;</decl_stmt>

<expr_stmt><expr><name>hfile</name> <operator>=</operator> <call><name>CreateFileA</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>FILE_READ_ATTRIBUTES</name></expr></argument>,

<argument><expr><operator>(</operator><name>FILE_SHARE_READ</name> <operator>|</operator> <name>FILE_SHARE_WRITE</name> <operator>|</operator>

<name>FILE_SHARE_DELETE</name><operator>)</operator></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>OPEN_EXISTING</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>hfile</name> <operator>!=</operator> <name>INVALID_HANDLE_VALUE</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>FILETIME</name></type> <name>ft</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><call><name>GetFileTime</name><argument_list>(<argument><expr><name>hfile</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ft</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>curl_off_t</name></type> <name>converted</name> <init>= <expr><operator>(</operator><name>curl_off_t</name><operator>)</operator><name><name>ft</name><operator>.</operator><name>dwLowDateTime</name></name>

<operator>|</operator> <operator>(</operator><operator>(</operator><name>curl_off_t</name><operator>)</operator><name><name>ft</name><operator>.</operator><name>dwHighDateTime</name></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">32</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>converted</name> <operator>&lt;</operator> <call><name>CURL_OFF_T_C</name><argument_list>(<argument><expr><literal type="number">116444736000000000</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>error_stream</name></expr></argument>,

<argument><expr><literal type="string">"Failed to get filetime: underflow\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>(</operator><name>converted</name> <operator>-</operator> <call><name>CURL_OFF_T_C</name><argument_list>(<argument><expr><literal type="number">116444736000000000</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>/</operator> <literal type="number">10000000</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>error_stream</name></expr></argument>,

<argument><expr><literal type="string">"Failed to get filetime: "</literal>

<literal type="string">"GetFileTime failed: GetLastError %u\n"</literal></expr></argument>,

<argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>hfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><call><name>GetLastError</name><argument_list>()</argument_list></call> <operator>!=</operator> <name>ERROR_FILE_NOT_FOUND</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>error_stream</name></expr></argument>,

<argument><expr><literal type="string">"Failed to get filetime: "</literal>

<literal type="string">"CreateFile failed: GetLastError %u\n"</literal></expr></argument>,

<argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>struct_stat</name></type> <name>statbuf</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>-</operator><literal type="number">1</literal> <operator>!=</operator> <call><name>stat</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>statbuf</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>(</operator><name>curl_off_t</name><operator>)</operator><name><name>statbuf</name><operator>.</operator><name>st_mtime</name></name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name>errno</name> <operator>!=</operator> <name>ENOENT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>error_stream</name></expr></argument>,

<argument><expr><literal type="string">"Failed to get filetime: %s\n"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_UTIME</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_UTIMES</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>SIZEOF_CURL_OFF_T</name> <operator>&gt;=</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator></expr></cpp:if>

<function><type><name>void</name></type> <name>setfiletime</name><parameter_list>(<parameter><decl><type><name>curl_off_t</name></type> <name>filetime</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>,

<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>error_stream</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>filetime</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>SIZEOF_CURL_OFF_T</name> <operator>&gt;=</operator> <literal type="number">8</literal><operator>)</operator></expr></cpp:if>

<decl_stmt><decl><type><name>HANDLE</name></type> <name>hfile</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>filetime</name> <operator>&gt;</operator> <call><name>CURL_OFF_T_C</name><argument_list>(<argument><expr><literal type="number">910670515199</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>error_stream</name></expr></argument>,

<argument><expr><literal type="string">"Failed to set filetime %"</literal> <name>CURL_FORMAT_CURL_OFF_T</name>

<literal type="string">" on outfile: overflow\n"</literal></expr></argument>, <argument><expr><name>filetime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>hfile</name> <operator>=</operator> <call><name>CreateFileA</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>FILE_WRITE_ATTRIBUTES</name></expr></argument>,

<argument><expr><operator>(</operator><name>FILE_SHARE_READ</name> <operator>|</operator> <name>FILE_SHARE_WRITE</name> <operator>|</operator>

<name>FILE_SHARE_DELETE</name><operator>)</operator></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>OPEN_EXISTING</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>hfile</name> <operator>!=</operator> <name>INVALID_HANDLE_VALUE</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>curl_off_t</name></type> <name>converted</name> <init>= <expr><operator>(</operator><operator>(</operator><name>curl_off_t</name><operator>)</operator><name>filetime</name> <operator>*</operator> <literal type="number">10000000</literal><operator>)</operator> <operator>+</operator>

<call><name>CURL_OFF_T_C</name><argument_list>(<argument><expr><literal type="number">116444736000000000</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FILETIME</name></type> <name>ft</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ft</name><operator>.</operator><name>dwLowDateTime</name></name> <operator>=</operator> <operator>(</operator><name>DWORD</name><operator>)</operator><operator>(</operator><name>converted</name> <operator>&amp;</operator> <literal type="number">0xFFFFFFFF</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ft</name><operator>.</operator><name>dwHighDateTime</name></name> <operator>=</operator> <operator>(</operator><name>DWORD</name><operator>)</operator><operator>(</operator><name>converted</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>SetFileTime</name><argument_list>(<argument><expr><name>hfile</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ft</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ft</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>error_stream</name></expr></argument>,

<argument><expr><literal type="string">"Failed to set filetime %"</literal> <name>CURL_FORMAT_CURL_OFF_T</name>

<literal type="string">" on outfile: SetFileTime failed: GetLastError %u\n"</literal></expr></argument>,

<argument><expr><name>filetime</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>hfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>error_stream</name></expr></argument>,

<argument><expr><literal type="string">"Failed to set filetime %"</literal> <name>CURL_FORMAT_CURL_OFF_T</name>

<literal type="string">" on outfile: CreateFile failed: GetLastError %u\n"</literal></expr></argument>,

<argument><expr><name>filetime</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_UTIMES</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name><name>times</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>times</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>tv_sec</name> <operator>=</operator> <name><name>times</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>tv_sec</name> <operator>=</operator> <operator>(</operator><name>time_t</name><operator>)</operator><name>filetime</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>times</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>tv_usec</name> <operator>=</operator> <name><name>times</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>tv_usec</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>utimes</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>times</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>error_stream</name></expr></argument>,

<argument><expr><literal type="string">"Failed to set filetime %"</literal> <name>CURL_FORMAT_CURL_OFF_T</name>

<literal type="string">" on outfile: %s\n"</literal></expr></argument>, <argument><expr><name>filetime</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_UTIME</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<decl_stmt><decl><type><name><name>struct</name> <name>utimbuf</name></name></type> <name>times</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>times</name><operator>.</operator><name>actime</name></name> <operator>=</operator> <operator>(</operator><name>time_t</name><operator>)</operator><name>filetime</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>times</name><operator>.</operator><name>modtime</name></name> <operator>=</operator> <operator>(</operator><name>time_t</name><operator>)</operator><name>filetime</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>utime</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>times</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>error_stream</name></expr></argument>,

<argument><expr><literal type="string">"Failed to set filetime %"</literal> <name>CURL_FORMAT_CURL_OFF_T</name>

<literal type="string">" on outfile: %s\n"</literal></expr></argument>, <argument><expr><name>filetime</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</unit>
