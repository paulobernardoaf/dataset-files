<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\curl-analysis\_cppstats\curl\src\tool_cb_prg.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tool_setup.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SYS_IOCTL_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/ioctl.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENABLE_CURLX_PRINTF</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curlx.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tool_cfgable.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tool_cb_prg.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tool_util.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tool_operate.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memdebug.h"</cpp:file></cpp:include> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TERMIOS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;termios.h&gt;</cpp:file></cpp:include>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TERMIO_H</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;termio.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name><name>sinus</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="number">515704</literal></expr>, <expr><literal type="number">531394</literal></expr>, <expr><literal type="number">547052</literal></expr>, <expr><literal type="number">562664</literal></expr>, <expr><literal type="number">578214</literal></expr>, <expr><literal type="number">593687</literal></expr>, <expr><literal type="number">609068</literal></expr>, <expr><literal type="number">624341</literal></expr>, <expr><literal type="number">639491</literal></expr>,

<expr><literal type="number">654504</literal></expr>, <expr><literal type="number">669364</literal></expr>, <expr><literal type="number">684057</literal></expr>, <expr><literal type="number">698568</literal></expr>, <expr><literal type="number">712883</literal></expr>, <expr><literal type="number">726989</literal></expr>, <expr><literal type="number">740870</literal></expr>, <expr><literal type="number">754513</literal></expr>, <expr><literal type="number">767906</literal></expr>,

<expr><literal type="number">781034</literal></expr>, <expr><literal type="number">793885</literal></expr>, <expr><literal type="number">806445</literal></expr>, <expr><literal type="number">818704</literal></expr>, <expr><literal type="number">830647</literal></expr>, <expr><literal type="number">842265</literal></expr>, <expr><literal type="number">853545</literal></expr>, <expr><literal type="number">864476</literal></expr>, <expr><literal type="number">875047</literal></expr>,

<expr><literal type="number">885248</literal></expr>, <expr><literal type="number">895069</literal></expr>, <expr><literal type="number">904500</literal></expr>, <expr><literal type="number">913532</literal></expr>, <expr><literal type="number">922156</literal></expr>, <expr><literal type="number">930363</literal></expr>, <expr><literal type="number">938145</literal></expr>, <expr><literal type="number">945495</literal></expr>, <expr><literal type="number">952406</literal></expr>,

<expr><literal type="number">958870</literal></expr>, <expr><literal type="number">964881</literal></expr>, <expr><literal type="number">970434</literal></expr>, <expr><literal type="number">975522</literal></expr>, <expr><literal type="number">980141</literal></expr>, <expr><literal type="number">984286</literal></expr>, <expr><literal type="number">987954</literal></expr>, <expr><literal type="number">991139</literal></expr>, <expr><literal type="number">993840</literal></expr>,

<expr><literal type="number">996054</literal></expr>, <expr><literal type="number">997778</literal></expr>, <expr><literal type="number">999011</literal></expr>, <expr><literal type="number">999752</literal></expr>, <expr><literal type="number">999999</literal></expr>, <expr><literal type="number">999754</literal></expr>, <expr><literal type="number">999014</literal></expr>, <expr><literal type="number">997783</literal></expr>, <expr><literal type="number">996060</literal></expr>,

<expr><literal type="number">993848</literal></expr>, <expr><literal type="number">991148</literal></expr>, <expr><literal type="number">987964</literal></expr>, <expr><literal type="number">984298</literal></expr>, <expr><literal type="number">980154</literal></expr>, <expr><literal type="number">975536</literal></expr>, <expr><literal type="number">970449</literal></expr>, <expr><literal type="number">964898</literal></expr>, <expr><literal type="number">958888</literal></expr>,

<expr><literal type="number">952426</literal></expr>, <expr><literal type="number">945516</literal></expr>, <expr><literal type="number">938168</literal></expr>, <expr><literal type="number">930386</literal></expr>, <expr><literal type="number">922180</literal></expr>, <expr><literal type="number">913558</literal></expr>, <expr><literal type="number">904527</literal></expr>, <expr><literal type="number">895097</literal></expr>, <expr><literal type="number">885277</literal></expr>,

<expr><literal type="number">875077</literal></expr>, <expr><literal type="number">864507</literal></expr>, <expr><literal type="number">853577</literal></expr>, <expr><literal type="number">842299</literal></expr>, <expr><literal type="number">830682</literal></expr>, <expr><literal type="number">818739</literal></expr>, <expr><literal type="number">806482</literal></expr>, <expr><literal type="number">793922</literal></expr>, <expr><literal type="number">781072</literal></expr>,

<expr><literal type="number">767945</literal></expr>, <expr><literal type="number">754553</literal></expr>, <expr><literal type="number">740910</literal></expr>, <expr><literal type="number">727030</literal></expr>, <expr><literal type="number">712925</literal></expr>, <expr><literal type="number">698610</literal></expr>, <expr><literal type="number">684100</literal></expr>, <expr><literal type="number">669407</literal></expr>, <expr><literal type="number">654548</literal></expr>,

<expr><literal type="number">639536</literal></expr>, <expr><literal type="number">624386</literal></expr>, <expr><literal type="number">609113</literal></expr>, <expr><literal type="number">593733</literal></expr>, <expr><literal type="number">578260</literal></expr>, <expr><literal type="number">562710</literal></expr>, <expr><literal type="number">547098</literal></expr>, <expr><literal type="number">531440</literal></expr>, <expr><literal type="number">515751</literal></expr>,

<expr><literal type="number">500046</literal></expr>, <expr><literal type="number">484341</literal></expr>, <expr><literal type="number">468651</literal></expr>, <expr><literal type="number">452993</literal></expr>, <expr><literal type="number">437381</literal></expr>, <expr><literal type="number">421830</literal></expr>, <expr><literal type="number">406357</literal></expr>, <expr><literal type="number">390976</literal></expr>, <expr><literal type="number">375703</literal></expr>,

<expr><literal type="number">360552</literal></expr>, <expr><literal type="number">345539</literal></expr>, <expr><literal type="number">330679</literal></expr>, <expr><literal type="number">315985</literal></expr>, <expr><literal type="number">301474</literal></expr>, <expr><literal type="number">287158</literal></expr>, <expr><literal type="number">273052</literal></expr>, <expr><literal type="number">259170</literal></expr>, <expr><literal type="number">245525</literal></expr>,

<expr><literal type="number">232132</literal></expr>, <expr><literal type="number">219003</literal></expr>, <expr><literal type="number">206152</literal></expr>, <expr><literal type="number">193590</literal></expr>, <expr><literal type="number">181331</literal></expr>, <expr><literal type="number">169386</literal></expr>, <expr><literal type="number">157768</literal></expr>, <expr><literal type="number">146487</literal></expr>, <expr><literal type="number">135555</literal></expr>,

<expr><literal type="number">124983</literal></expr>, <expr><literal type="number">114781</literal></expr>, <expr><literal type="number">104959</literal></expr>, <expr><literal type="number">95526</literal></expr>, <expr><literal type="number">86493</literal></expr>, <expr><literal type="number">77868</literal></expr>, <expr><literal type="number">69660</literal></expr>, <expr><literal type="number">61876</literal></expr>, <expr><literal type="number">54525</literal></expr>, <expr><literal type="number">47613</literal></expr>,

<expr><literal type="number">41147</literal></expr>, <expr><literal type="number">35135</literal></expr>, <expr><literal type="number">29581</literal></expr>, <expr><literal type="number">24491</literal></expr>, <expr><literal type="number">19871</literal></expr>, <expr><literal type="number">15724</literal></expr>, <expr><literal type="number">12056</literal></expr>, <expr><literal type="number">8868</literal></expr>, <expr><literal type="number">6166</literal></expr>, <expr><literal type="number">3951</literal></expr>, <expr><literal type="number">2225</literal></expr>,

<expr><literal type="number">990</literal></expr>, <expr><literal type="number">248</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">244</literal></expr>, <expr><literal type="number">982</literal></expr>, <expr><literal type="number">2212</literal></expr>, <expr><literal type="number">3933</literal></expr>, <expr><literal type="number">6144</literal></expr>, <expr><literal type="number">8842</literal></expr>, <expr><literal type="number">12025</literal></expr>, <expr><literal type="number">15690</literal></expr>, <expr><literal type="number">19832</literal></expr>, <expr><literal type="number">24448</literal></expr>,

<expr><literal type="number">29534</literal></expr>, <expr><literal type="number">35084</literal></expr>, <expr><literal type="number">41092</literal></expr>, <expr><literal type="number">47554</literal></expr>, <expr><literal type="number">54462</literal></expr>, <expr><literal type="number">61809</literal></expr>, <expr><literal type="number">69589</literal></expr>, <expr><literal type="number">77794</literal></expr>, <expr><literal type="number">86415</literal></expr>, <expr><literal type="number">95445</literal></expr>,

<expr><literal type="number">104873</literal></expr>, <expr><literal type="number">114692</literal></expr>, <expr><literal type="number">124891</literal></expr>, <expr><literal type="number">135460</literal></expr>, <expr><literal type="number">146389</literal></expr>, <expr><literal type="number">157667</literal></expr>, <expr><literal type="number">169282</literal></expr>, <expr><literal type="number">181224</literal></expr>, <expr><literal type="number">193480</literal></expr>,

<expr><literal type="number">206039</literal></expr>, <expr><literal type="number">218888</literal></expr>, <expr><literal type="number">232015</literal></expr>, <expr><literal type="number">245406</literal></expr>, <expr><literal type="number">259048</literal></expr>, <expr><literal type="number">272928</literal></expr>, <expr><literal type="number">287032</literal></expr>, <expr><literal type="number">301346</literal></expr>, <expr><literal type="number">315856</literal></expr>,

<expr><literal type="number">330548</literal></expr>, <expr><literal type="number">345407</literal></expr>, <expr><literal type="number">360419</literal></expr>, <expr><literal type="number">375568</literal></expr>, <expr><literal type="number">390841</literal></expr>, <expr><literal type="number">406221</literal></expr>, <expr><literal type="number">421693</literal></expr>, <expr><literal type="number">437243</literal></expr>, <expr><literal type="number">452854</literal></expr>,

<expr><literal type="number">468513</literal></expr>, <expr><literal type="number">484202</literal></expr>, <expr><literal type="number">499907</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fly</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ProgressData</name></name> <modifier>*</modifier></type><name>bar</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>moved</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>check</name> <init>= <expr><name><name>bar</name><operator>-&gt;</operator><name>width</name></name> <operator>-</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msnprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%*s\r"</literal></expr></argument>, <argument><expr><name><name>bar</name><operator>-&gt;</operator><name>width</name></name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><index>[<expr><name><name>bar</name><operator>-&gt;</operator><name>bar</name></name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-=O=-"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pos</name> <operator>=</operator> <name><name>sinus</name><index>[<expr><name><name>bar</name><operator>-&gt;</operator><name>tick</name></name><operator>%</operator><literal type="number">200</literal></expr>]</index></name> <operator>/</operator> <operator>(</operator><literal type="number">1000000</literal> <operator>/</operator> <name>check</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>=</operator> <literal type="char">'#'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>pos</name> <operator>=</operator> <name><name>sinus</name><index>[<expr><operator>(</operator><name><name>bar</name><operator>-&gt;</operator><name>tick</name></name> <operator>+</operator> <literal type="number">5</literal><operator>)</operator><operator>%</operator><literal type="number">200</literal></expr>]</index></name> <operator>/</operator> <operator>(</operator><literal type="number">1000000</literal> <operator>/</operator> <name>check</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>=</operator> <literal type="char">'#'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>pos</name> <operator>=</operator> <name><name>sinus</name><index>[<expr><operator>(</operator><name><name>bar</name><operator>-&gt;</operator><name>tick</name></name> <operator>+</operator> <literal type="number">10</literal><operator>)</operator><operator>%</operator><literal type="number">200</literal></expr>]</index></name> <operator>/</operator> <operator>(</operator><literal type="number">1000000</literal> <operator>/</operator> <name>check</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>=</operator> <literal type="char">'#'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>pos</name> <operator>=</operator> <name><name>sinus</name><index>[<expr><operator>(</operator><name><name>bar</name><operator>-&gt;</operator><name>tick</name></name> <operator>+</operator> <literal type="number">15</literal><operator>)</operator><operator>%</operator><literal type="number">200</literal></expr>]</index></name> <operator>/</operator> <operator>(</operator><literal type="number">1000000</literal> <operator>/</operator> <name>check</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>=</operator> <literal type="char">'#'</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>bar</name><operator>-&gt;</operator><name>out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bar</name><operator>-&gt;</operator><name>tick</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>bar</name><operator>-&gt;</operator><name>tick</name></name> <operator>&gt;=</operator> <literal type="number">200</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>bar</name><operator>-&gt;</operator><name>tick</name></name> <operator>-=</operator> <literal type="number">200</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>bar</name><operator>-&gt;</operator><name>bar</name></name> <operator>+=</operator> <operator>(</operator><ternary><condition><expr><name>moved</name></expr>?</condition><then><expr><name><name>bar</name><operator>-&gt;</operator><name>barmove</name></name></expr></then><else>:<expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>bar</name><operator>-&gt;</operator><name>bar</name></name> <operator>&gt;=</operator> <operator>(</operator><name><name>bar</name><operator>-&gt;</operator><name>width</name></name> <operator>-</operator> <literal type="number">6</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>bar</name><operator>-&gt;</operator><name>barmove</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bar</name><operator>-&gt;</operator><name>bar</name></name> <operator>=</operator> <name><name>bar</name><operator>-&gt;</operator><name>width</name></name> <operator>-</operator> <literal type="number">6</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name><name>bar</name><operator>-&gt;</operator><name>bar</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>bar</name><operator>-&gt;</operator><name>barmove</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bar</name><operator>-&gt;</operator><name>bar</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_BARLENGTH</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>SIZEOF_CURL_OFF_T</name> <operator>==</operator> <literal type="number">4</literal><operator>)</operator></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CURL_OFF_T_MAX</name></cpp:macro> <cpp:value>CURL_OFF_T_C(0x7FFFFFFF)</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CURL_OFF_T_MAX</name></cpp:macro> <cpp:value>CURL_OFF_T_C(0x7FFFFFFFFFFFFFFF)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>int</name></type> <name>tool_progress_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>clientp</name></decl></parameter>,

<parameter><decl><type><name>curl_off_t</name></type> <name>dltotal</name></decl></parameter>, <parameter><decl><type><name>curl_off_t</name></type> <name>dlnow</name></decl></parameter>,

<parameter><decl><type><name>curl_off_t</name></type> <name>ultotal</name></decl></parameter>, <parameter><decl><type><name>curl_off_t</name></type> <name>ulnow</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>now</name> <init>= <expr><call><name>tvnow</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>per_transfer</name></name> <modifier>*</modifier></type><name>per</name> <init>= <expr><name>clientp</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>OperationConfig</name></name> <modifier>*</modifier></type><name>config</name> <init>= <expr><name><name>per</name><operator>-&gt;</operator><name>config</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ProgressData</name></name> <modifier>*</modifier></type><name>bar</name> <init>= <expr><operator>&amp;</operator><name><name>per</name><operator>-&gt;</operator><name>progressbar</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>curl_off_t</name></type> <name>total</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>curl_off_t</name></type> <name>point</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>bar</name><operator>-&gt;</operator><name>initial_size</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>

<operator>(</operator><operator>(</operator><name>CURL_OFF_T_MAX</name> <operator>-</operator> <name><name>bar</name><operator>-&gt;</operator><name>initial_size</name></name><operator>)</operator> <operator>&lt;</operator> <operator>(</operator><name>dltotal</name> <operator>+</operator> <name>ultotal</name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>total</name> <operator>=</operator> <name>CURL_OFF_T_MAX</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>total</name> <operator>=</operator> <name>dltotal</name> <operator>+</operator> <name>ultotal</name> <operator>+</operator> <name><name>bar</name><operator>-&gt;</operator><name>initial_size</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>bar</name><operator>-&gt;</operator><name>initial_size</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>

<operator>(</operator><operator>(</operator><name>CURL_OFF_T_MAX</name> <operator>-</operator> <name><name>bar</name><operator>-&gt;</operator><name>initial_size</name></name><operator>)</operator> <operator>&lt;</operator> <operator>(</operator><name>dlnow</name> <operator>+</operator> <name>ulnow</name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>point</name> <operator>=</operator> <name>CURL_OFF_T_MAX</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>point</name> <operator>=</operator> <name>dlnow</name> <operator>+</operator> <name>ulnow</name> <operator>+</operator> <name><name>bar</name><operator>-&gt;</operator><name>initial_size</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>bar</name><operator>-&gt;</operator><name>calls</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>total</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>bar</name><operator>-&gt;</operator><name>prev</name></name> <operator>==</operator> <name>point</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if>

<if type="elseif">else if<condition>(<expr><operator>(</operator><call><name>tvdiff</name><argument_list>(<argument><expr><name>now</name></expr></argument>, <argument><expr><name><name>bar</name><operator>-&gt;</operator><name>prevtime</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">100L</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name>point</name> <operator>&lt;</operator> <name>total</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>tvdiff</name><argument_list>(<argument><expr><name>now</name></expr></argument>, <argument><expr><name><name>bar</name><operator>-&gt;</operator><name>prevtime</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">100L</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>fly</name><argument_list>(<argument><expr><name>bar</name></expr></argument>, <argument><expr><name>point</name> <operator>!=</operator> <name><name>bar</name><operator>-&gt;</operator><name>prev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>bar</name><operator>-&gt;</operator><name>calls</name></name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>total</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>point</name> <operator>!=</operator> <name><name>bar</name><operator>-&gt;</operator><name>prev</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>line</name><index>[<expr><name>MAX_BARLENGTH</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>format</name><index>[<expr><literal type="number">40</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>frac</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>percent</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>barwidth</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>num</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>point</name> <operator>&gt;</operator> <name>total</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>total</name> <operator>=</operator> <name>point</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>frac</name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator><name>point</name> <operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator><name>total</name></expr>;</expr_stmt>

<expr_stmt><expr><name>percent</name> <operator>=</operator> <name>frac</name> <operator>*</operator> <literal type="number">100.0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>barwidth</name> <operator>=</operator> <name><name>bar</name><operator>-&gt;</operator><name>width</name></name> <operator>-</operator> <literal type="number">7</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>num</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>double</name><operator>)</operator><name>barwidth</name><operator>)</operator> <operator>*</operator> <name>frac</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>num</name> <operator>&gt;</operator> <name>MAX_BARLENGTH</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>num</name> <operator>=</operator> <name>MAX_BARLENGTH</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="char">'#'</literal></expr></argument>, <argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>line</name><index>[<expr><name>num</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msnprintf</name><argument_list>(<argument><expr><name>format</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>format</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"\r%%-%ds %%5.1f%%%%"</literal></expr></argument>, <argument><expr><name>barwidth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>bar</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>percent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name><name>bar</name><operator>-&gt;</operator><name>out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bar</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>point</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bar</name><operator>-&gt;</operator><name>prevtime</name></name> <operator>=</operator> <name>now</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>readbusy</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>readbusy</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>curl_easy_pause</name><argument_list>(<argument><expr><name><name>per</name><operator>-&gt;</operator><name>curl</name></name></expr></argument>, <argument><expr><name>CURLPAUSE_CONT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>progressbarinit</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ProgressData</name></name> <modifier>*</modifier></type><name>bar</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>OperationConfig</name></name> <modifier>*</modifier></type><name>config</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>colp</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>bar</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>ProgressData</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>use_resume</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>bar</name><operator>-&gt;</operator><name>initial_size</name></name> <operator>=</operator> <name><name>config</name><operator>-&gt;</operator><name>resume_from</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>colp</name> <operator>=</operator> <call><name>curlx_getenv</name><argument_list>(<argument><expr><literal type="string">"COLUMNS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>colp</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>endptr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>num</name> <init>= <expr><call><name>strtol</name><argument_list>(<argument><expr><name>colp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>endptr</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>endptr</name> <operator>!=</operator> <name>colp</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>endptr</name> <operator>==</operator> <name>colp</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>colp</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>num</name> <operator>&gt;</operator> <literal type="number">20</literal><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name>num</name> <operator>&lt;</operator> <literal type="number">10000</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>bar</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>num</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>curl_free</name><argument_list>(<argument><expr><name>colp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>bar</name><operator>-&gt;</operator><name>width</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>cols</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TIOCGSIZE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name><name>struct</name> <name>ttysize</name></name></type> <name>ts</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>ioctl</name><argument_list>(<argument><expr><name>STDIN_FILENO</name></expr></argument>, <argument><expr><name>TIOCGSIZE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ts</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>cols</name> <operator>=</operator> <name><name>ts</name><operator>.</operator><name>ts_cols</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TIOCGWINSZ</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<decl_stmt><decl><type><name><name>struct</name> <name>winsize</name></name></type> <name>ts</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>ioctl</name><argument_list>(<argument><expr><name>STDIN_FILENO</name></expr></argument>, <argument><expr><name>TIOCGWINSZ</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ts</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>cols</name> <operator>=</operator> <name><name>ts</name><operator>.</operator><name>ws_col</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<block>{<block_content>

<decl_stmt><decl><type><name>HANDLE</name></type> <name>stderr_hnd</name> <init>= <expr><call><name>GetStdHandle</name><argument_list>(<argument><expr><name>STD_ERROR_HANDLE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CONSOLE_SCREEN_BUFFER_INFO</name></type> <name>console_info</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>stderr_hnd</name> <operator>!=</operator> <name>INVALID_HANDLE_VALUE</name><operator>)</operator> <operator>&amp;&amp;</operator>

<call><name>GetConsoleScreenBufferInfo</name><argument_list>(<argument><expr><name>stderr_hnd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>console_info</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>cols</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator>

<operator>(</operator><name><name>console_info</name><operator>.</operator><name>srWindow</name><operator>.</operator><name>Right</name></name> <operator>-</operator> <name><name>console_info</name><operator>.</operator><name>srWindow</name><operator>.</operator><name>Left</name></name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<if_stmt><if>if<condition>(<expr><name>cols</name> <operator>&gt;</operator> <literal type="number">20</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>bar</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name>cols</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>bar</name><operator>-&gt;</operator><name>width</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>bar</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <literal type="number">79</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>(<expr><name><name>bar</name><operator>-&gt;</operator><name>width</name></name> <operator>&gt;</operator> <name>MAX_BARLENGTH</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>bar</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name>MAX_BARLENGTH</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>bar</name><operator>-&gt;</operator><name>out</name></name> <operator>=</operator> <name><name>config</name><operator>-&gt;</operator><name>global</name><operator>-&gt;</operator><name>errors</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bar</name><operator>-&gt;</operator><name>tick</name></name> <operator>=</operator> <literal type="number">150</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bar</name><operator>-&gt;</operator><name>barmove</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
