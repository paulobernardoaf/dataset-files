<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\curl-analysis\_cppstats\curl\src\tool_convert.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tool_setup.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DOES_CONVERSIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ICONV</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iconv.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tool_convert.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memdebug.h"</cpp:file></cpp:include> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ICONV</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>iconv_t</name></type> <name>inbound_cd</name> <init>= <expr><operator>(</operator><name>iconv_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>iconv_t</name></type> <name>outbound_cd</name> <init>= <expr><operator>(</operator><name>iconv_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_ICONV_CODESET_OF_NETWORK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CURL_ICONV_CODESET_OF_NETWORK</name></cpp:macro> <cpp:value>"ISO8859-1"</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>CURLcode</name></type> <name>convert_to_network</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>length</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>input_ptr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>output_ptr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>res</name></decl>, <decl><type ref="prev"/><name>in_bytes</name></decl>, <decl><type ref="prev"/><name>out_bytes</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>outbound_cd</name> <operator>==</operator> <operator>(</operator><name>iconv_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>outbound_cd</name> <operator>=</operator> <call><name>iconv_open</name><argument_list>(<argument><expr><name>CURL_ICONV_CODESET_OF_NETWORK</name></expr></argument>,

<argument><expr><name>CURL_ICONV_CODESET_OF_HOST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>outbound_cd</name> <operator>==</operator> <operator>(</operator><name>iconv_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>CURLE_CONV_FAILED</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>input_ptr</name> <operator>=</operator> <name>output_ptr</name> <operator>=</operator> <name>buffer</name></expr>;</expr_stmt>

<expr_stmt><expr><name>in_bytes</name> <operator>=</operator> <name>out_bytes</name> <operator>=</operator> <name>length</name></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>iconv</name><argument_list>(<argument><expr><name>outbound_cd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>input_ptr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>in_bytes</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>output_ptr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>out_bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>res</name> <operator>==</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>in_bytes</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><name>CURLE_CONV_FAILED</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>CURLcode</name></type> <name>convert_from_network</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>length</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>input_ptr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>output_ptr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>res</name></decl>, <decl><type ref="prev"/><name>in_bytes</name></decl>, <decl><type ref="prev"/><name>out_bytes</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>inbound_cd</name> <operator>==</operator> <operator>(</operator><name>iconv_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>inbound_cd</name> <operator>=</operator> <call><name>iconv_open</name><argument_list>(<argument><expr><name>CURL_ICONV_CODESET_OF_HOST</name></expr></argument>,

<argument><expr><name>CURL_ICONV_CODESET_OF_NETWORK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>inbound_cd</name> <operator>==</operator> <operator>(</operator><name>iconv_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>CURLE_CONV_FAILED</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>input_ptr</name> <operator>=</operator> <name>output_ptr</name> <operator>=</operator> <name>buffer</name></expr>;</expr_stmt>

<expr_stmt><expr><name>in_bytes</name> <operator>=</operator> <name>out_bytes</name> <operator>=</operator> <name>length</name></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>iconv</name><argument_list>(<argument><expr><name>inbound_cd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>input_ptr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>in_bytes</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>output_ptr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>out_bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>res</name> <operator>==</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>in_bytes</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><name>CURLE_CONV_FAILED</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>convert_cleanup</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>inbound_cd</name> <operator>!=</operator> <operator>(</operator><name>iconv_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>iconv_close</name><argument_list>(<argument><expr><name>inbound_cd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>outbound_cd</name> <operator>!=</operator> <operator>(</operator><name>iconv_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>iconv_close</name><argument_list>(<argument><expr><name>outbound_cd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><name>char</name></type> <name>convert_char</name><parameter_list>(<parameter><decl><type><name>curl_infotype</name></type> <name>infotype</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>this_char</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch<condition>(<expr><name>infotype</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>CURLINFO_DATA_IN</name></expr>:</case>

<case>case <expr><name>CURLINFO_DATA_OUT</name></expr>:</case>

<case>case <expr><name>CURLINFO_SSL_DATA_IN</name></expr>:</case>

<case>case <expr><name>CURLINFO_SSL_DATA_OUT</name></expr>:</case>

<if_stmt><if>if<condition>(<expr><name>this_char</name> <operator>&lt;</operator> <literal type="number">0x20</literal> <operator>||</operator> <name>this_char</name> <operator>&gt;=</operator> <literal type="number">0x7f</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>UNPRINTABLE_CHAR</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>convert_from_network</name><argument_list>(<argument><expr><operator>&amp;</operator><name>this_char</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<default>default:</default>

<if_stmt><if>if<condition>(<expr><call><name>ISPRINT</name><argument_list>(<argument><expr><name>this_char</name></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <operator>(</operator><name>this_char</name> <operator>!=</operator> <literal type="char">'\t'</literal><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>(</operator><name>this_char</name> <operator>!=</operator> <literal type="char">'\r'</literal><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>(</operator><name>this_char</name> <operator>!=</operator> <literal type="char">'\n'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><name>this_char</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block></switch>

<return>return <expr><name>UNPRINTABLE_CHAR</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</unit>
