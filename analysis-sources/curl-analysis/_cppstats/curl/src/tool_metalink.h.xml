<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\curl-analysis\_cppstats\curl\src\tool_metalink.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tool_setup.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tool_sdecls.h"</cpp:file></cpp:include>

<struct_decl>struct <name>GlobalConfig</name>;</struct_decl>

<struct_decl>struct <name>OperationConfig</name>;</struct_decl>

<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier> <name>Curl_digest_init_func</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier> <name>Curl_digest_update_func</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier> <name>Curl_digest_final_func</name>)<parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>result</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>Curl_digest_init_func</name></type> <name>digest_init</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>Curl_digest_update_func</name></type> <name>digest_update</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>Curl_digest_final_func</name></type> <name>digest_final</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>digest_ctxtsize</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>digest_resultlen</name></decl>;</decl_stmt> 

}</block></struct></type> <name>digest_params</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>digest_params</name> <modifier>*</modifier></type><name>digest_hash</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>digest_hashctx</name></decl>;</decl_stmt> 

}</block></struct></type> <name>digest_context</name>;</typedef>

<function_decl><type><name>digest_context</name> <modifier>*</modifier></type> <name>Curl_digest_init</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>digest_params</name> <modifier>*</modifier></type><name>dparams</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>Curl_digest_update</name><parameter_list>(<parameter><decl><type><name>digest_context</name> <modifier>*</modifier></type><name>context</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>Curl_digest_final</name><parameter_list>(<parameter><decl><type><name>digest_context</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list>;</function_decl>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>hash_name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>digest_params</name> <modifier>*</modifier></type><name>dparams</name></decl>;</decl_stmt>

}</block></struct></type> <name>metalink_digest_def</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>alias_name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>metalink_digest_def</name> <modifier>*</modifier></type><name>digest_def</name></decl>;</decl_stmt>

}</block></struct></type> <name>metalink_digest_alias</name>;</typedef>

<typedef>typedef <type><struct>struct <name>metalink_checksum</name> <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>metalink_digest_def</name> <modifier>*</modifier></type><name>digest_def</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>digest</name></decl>;</decl_stmt>

}</block></struct></type> <name>metalink_checksum</name>;</typedef>

<typedef>typedef <type><struct>struct <name>metalink_resource</name> <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>metalink_resource</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>url</name></decl>;</decl_stmt>

}</block></struct></type> <name>metalink_resource</name>;</typedef>

<typedef>typedef <type><struct>struct <name>metalinkfile</name> <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>metalinkfile</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>filename</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>metalink_checksum</name> <modifier>*</modifier></type><name>checksum</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>metalink_resource</name> <modifier>*</modifier></type><name>resource</name></decl>;</decl_stmt>

}</block></struct></type> <name>metalinkfile</name>;</typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_METALINK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CURL_REQ_LIBMETALINK_MAJOR</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CURL_REQ_LIBMETALINK_MINOR</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CURL_REQ_LIBMETALINK_PATCH</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CURL_REQ_LIBMETALINK_VERS</name></cpp:macro> <cpp:value>((CURL_REQ_LIBMETALINK_MAJOR * 10000) + (CURL_REQ_LIBMETALINK_MINOR * 100) + CURL_REQ_LIBMETALINK_PATCH)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>digest_params</name></type> <name><name>MD5_DIGEST_PARAMS</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>digest_params</name></type> <name><name>SHA1_DIGEST_PARAMS</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>digest_params</name></type> <name><name>SHA256_DIGEST_PARAMS</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;metalink/metalink.h&gt;</cpp:file></cpp:include>

<function_decl><type><name>int</name></type> <name>count_next_metalink_resource</name><parameter_list>(<parameter><decl><type><name>metalinkfile</name> <modifier>*</modifier></type><name>mlfile</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>delete_metalinkfile</name><parameter_list>(<parameter><decl><type><name>metalinkfile</name> <modifier>*</modifier></type><name>mlfile</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>clean_metalink</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>OperationConfig</name></name> <modifier>*</modifier></type><name>config</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>parse_metalink</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>OperationConfig</name></name> <modifier>*</modifier></type><name>config</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>OutStruct</name></name> <modifier>*</modifier></type><name>outs</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>metalink_url</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>size_t</name></type> <name>metalink_write_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sz</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>nmemb</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userdata</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>check_metalink_content_type</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>content_type</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>metalink_check_hash</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>GlobalConfig</name></name> <modifier>*</modifier></type><name>config</name></decl></parameter>,

<parameter><decl><type><name>metalinkfile</name> <modifier>*</modifier></type><name>mlfile</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>metalink_cleanup</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>count_next_metalink_resource</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>delete_metalinkfile</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(void)x</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>clean_metalink</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(void)x</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>metalink_cleanup</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>Curl_nop_stmt</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</unit>
