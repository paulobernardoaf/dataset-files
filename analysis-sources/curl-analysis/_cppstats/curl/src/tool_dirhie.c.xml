<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\curl-analysis\_cppstats\curl\src\tool_dirhie.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tool_setup.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;direct.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENABLE_CURLX_PRINTF</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curlx.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tool_dirhie.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memdebug.h"</cpp:file></cpp:include> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NETWARE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__NOVELL_LIBC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mkdir</name></cpp:macro> <cpp:value>mkdir_510</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>MSDOS</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__DJGPP__</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mkdir</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(mkdir)((x))</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>F_OK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F_OK</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type> <name>show_dir_errno</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>errors</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch<condition>(<expr><name>errno</name></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EACCES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>EACCES</name></expr>:</case>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>errors</name></expr></argument>, <argument><expr><literal type="string">"You don't have permission to create %s.\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENAMETOOLONG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>ENAMETOOLONG</name></expr>:</case>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>errors</name></expr></argument>, <argument><expr><literal type="string">"The directory name %s is too long.\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EROFS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>EROFS</name></expr>:</case>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>errors</name></expr></argument>, <argument><expr><literal type="string">"%s resides on a read-only file system.\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENOSPC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>ENOSPC</name></expr>:</case>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>errors</name></expr></argument>, <argument><expr><literal type="string">"No space left on the file system that will "</literal>

<literal type="string">"contain the directory %s.\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EDQUOT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>EDQUOT</name></expr>:</case>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>errors</name></expr></argument>, <argument><expr><literal type="string">"Cannot create directory %s because you "</literal>

<literal type="string">"exceeded your quota.\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<default>default :</default>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>errors</name></expr></argument>, <argument><expr><literal type="string">"Error creating directory %s.\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__DJGPP__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PATH_DELIMITERS</name></cpp:macro> <cpp:value>"\\/"</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PATH_DELIMITERS</name></cpp:macro> <cpp:value>DIR_CHAR</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>CURLcode</name></type> <name>create_dir_hierarchy</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>outfile</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>errors</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tempdir</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tempdir2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>outdup</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>dirbuildup</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>outlen</name></decl>;</decl_stmt>

<expr_stmt><expr><name>outlen</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>outfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>outdup</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>outfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>outdup</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>dirbuildup</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>outlen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>dirbuildup</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name>outdup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>dirbuildup</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>tempdir</name> <operator>=</operator> <call><name>strtok</name><argument_list>(<argument><expr><name>outdup</name></expr></argument>, <argument><expr><name>PATH_DELIMITERS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while<condition>(<expr><name>tempdir</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>skip</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>tempdir2</name> <operator>=</operator> <call><name>strtok</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>PATH_DELIMITERS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>tempdir2</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>dlen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>dirbuildup</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>dlen</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msnprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dirbuildup</name><index>[<expr><name>dlen</name></expr>]</index></name></expr></argument>, <argument><expr><name>outlen</name> <operator>-</operator> <name>dlen</name></expr></argument>, <argument><expr><literal type="string">"%s%s"</literal></expr></argument>, <argument><expr><name>DIR_CHAR</name></expr></argument>, <argument><expr><name>tempdir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>outdup</name> <operator>==</operator> <name>tempdir</name></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSDOS</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>strchr</name><argument_list>(<argument><expr><name>tempdir</name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>p</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>skip</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>dirbuildup</name></expr></argument>, <argument><expr><name>tempdir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msnprintf</name><argument_list>(<argument><expr><name>dirbuildup</name></expr></argument>, <argument><expr><name>outlen</name></expr></argument>, <argument><expr><literal type="string">"%s%s"</literal></expr></argument>, <argument><expr><name>DIR_CHAR</name></expr></argument>, <argument><expr><name>tempdir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>skip</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>-</operator><literal type="number">1</literal> <operator>==</operator> <call><name>mkdir</name><argument_list>(<argument><expr><name>dirbuildup</name></expr></argument>, <argument><expr><operator>(</operator><name>mode_t</name><operator>)</operator><literal type="number">0000750</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name>errno</name> <operator>!=</operator> <name>EACCES</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>errno</name> <operator>!=</operator> <name>EEXIST</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>show_dir_errno</name><argument_list>(<argument><expr><name>errors</name></expr></argument>, <argument><expr><name>dirbuildup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_WRITE_ERROR</name></expr>;</expr_stmt>

<break>break;</break> 

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>tempdir</name> <operator>=</operator> <name>tempdir2</name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name>dirbuildup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name>outdup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

</unit>
