<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\curl-analysis\_cppstats\curl\src\tool_operate.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tool_setup.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_FCNTL_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LOCALE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;locale.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SYS_SELECT_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/select.h&gt;</cpp:file></cpp:include>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_UNISTD_H</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VMS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fabdef.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__AMIGA__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;proto/dos.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"strcase.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENABLE_CURLX_PRINTF</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curlx.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tool_binmode.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tool_cfgable.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tool_cb_dbg.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tool_cb_hdr.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tool_cb_prg.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tool_cb_rea.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tool_cb_see.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tool_cb_wrt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tool_dirhie.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tool_doswin.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tool_easysrc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tool_filetime.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tool_getparam.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tool_helpers.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tool_homedir.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tool_libinfo.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tool_main.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tool_metalink.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tool_msgs.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tool_operate.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tool_operhlp.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tool_paramhlp.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tool_parsecfg.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tool_setopt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tool_sleep.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tool_urlglob.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tool_util.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tool_writeout.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tool_xattr.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tool_vms.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tool_help.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tool_hugehelp.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tool_progress.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memdebug.h"</cpp:file></cpp:include> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CURLDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>CURLcode</name></type> <name>curl_easy_perform_ev</name><parameter_list>(<parameter><decl><type><name>CURL</name> <modifier>*</modifier></type><name>easy</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CURLseparator</name></cpp:macro> <cpp:value>"--_curl_--"</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>O_BINARY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>O_BINARY</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CURL_CA_CERT_ERRORMSG</name></cpp:macro> <cpp:value>"More details here: https://curl.haxx.se/docs/sslcerts.html\n\n" "curl failed to verify the legitimacy of the server and therefore " "could not\nestablish a secure connection to it. To learn more about " "this situation and\nhow to fix it, please visit the web page mentioned " "above.\n"</cpp:value></cpp:define>

<function_decl><type><specifier>static</specifier> <name>CURLcode</name></type> <name>single_transfer</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>GlobalConfig</name></name> <modifier>*</modifier></type><name>global</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>OperationConfig</name></name> <modifier>*</modifier></type><name>config</name></decl></parameter>,

<parameter><decl><type><name>CURLSH</name> <modifier>*</modifier></type><name>share</name></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>capath_from_env</name></decl></parameter>,

<parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>added</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>CURLcode</name></type> <name>create_transfer</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>GlobalConfig</name></name> <modifier>*</modifier></type><name>global</name></decl></parameter>,

<parameter><decl><type><name>CURLSH</name> <modifier>*</modifier></type><name>share</name></decl></parameter>,

<parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>added</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>is_fatal_error</name><parameter_list>(<parameter><decl><type><name>CURLcode</name></type> <name>code</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch<condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>CURLE_FAILED_INIT</name></expr>:</case>

<case>case <expr><name>CURLE_OUT_OF_MEMORY</name></expr>:</case>

<case>case <expr><name>CURLE_UNKNOWN_OPTION</name></expr>:</case>

<case>case <expr><name>CURLE_FUNCTION_NOT_FOUND</name></expr>:</case>

<case>case <expr><name>CURLE_BAD_FUNCTION_ARGUMENT</name></expr>:</case>

<return>return <expr><name>TRUE</name></expr>;</return>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>is_pkcs11_uri</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>string</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>curl_strnequal</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><literal type="string">"pkcs11:"</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>TRUE</name></expr>;</return>

</block_content>}</block></if>

<else>else <block>{<block_content>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VMS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>curl_off_t</name></type> <name>vms_realfilesize</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>struct_stat</name> <modifier>*</modifier></type><name>stat_buf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr><literal type="number">8192</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>curl_off_t</name></type> <name>count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret_stat</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type> <name>file</name></decl>;</decl_stmt>

<expr_stmt><expr><name>file</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if<condition>(<expr><name>file</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ret_stat</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<while>while<condition>(<expr><name>ret_stat</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret_stat</name> <operator>=</operator> <call><name>fread</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>ret_stat</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>count</name> <operator>+=</operator> <name>ret_stat</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>count</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>curl_off_t</name></type> <name>VmsSpecialSize</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>struct_stat</name> <modifier>*</modifier></type><name>stat_buf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch<condition>(<expr><name><name>stat_buf</name><operator>-&gt;</operator><name>st_fab_rfm</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>FAB$C_VAR</name></expr>:</case>

<case>case <expr><name>FAB$C_VFC</name></expr>:</case>

<return>return <expr><call><name>vms_realfilesize</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>stat_buf</name></expr></argument>)</argument_list></call></expr>;</return>

<break>break;</break>

<default>default:</default>

<return>return <expr><name><name>stat_buf</name><operator>-&gt;</operator><name>st_size</name></name></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUFFER_SIZE</name></cpp:macro> <cpp:value>(100*1024)</cpp:value></cpp:define>

<decl_stmt><decl><type><name><name>struct</name> <name>per_transfer</name></name> <modifier>*</modifier></type><name>transfers</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>per_transfer</name></name> <modifier>*</modifier></type><name>transfersl</name></decl>;</decl_stmt> 

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>add_per_transfer</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>per_transfer</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>per</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>per_transfer</name></name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>per_transfer</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>p</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>transfers</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>transfersl</name> <operator>=</operator> <name>transfers</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name><name>transfersl</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>transfersl</name></expr>;</expr_stmt>

<expr_stmt><expr><name>transfersl</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><operator>*</operator><name>per</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

<expr_stmt><expr><name>all_xfers</name><operator>++</operator></expr>;</expr_stmt> 

<return>return <expr><name>CURLE_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>per_transfer</name></name> <modifier>*</modifier></type><name>del_per_transfer</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>per_transfer</name></name> <modifier>*</modifier></type><name>per</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>per_transfer</name></name> <modifier>*</modifier></type><name>n</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>per_transfer</name></name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DEBUGASSERT</name><argument_list>(<argument><expr><name>transfers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DEBUGASSERT</name><argument_list>(<argument><expr><name>transfersl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DEBUGASSERT</name><argument_list>(<argument><expr><name>per</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>per</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>per</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>p</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>transfers</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name>n</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>transfersl</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>per</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>n</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>pre_transfer</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>GlobalConfig</name></name> <modifier>*</modifier></type><name>global</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>per_transfer</name></name> <modifier>*</modifier></type><name>per</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>curl_off_t</name></type> <name>uploadfilesize</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>struct_stat</name></type> <name>fileinfo</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>per</name><operator>-&gt;</operator><name>separator_err</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>global</name><operator>-&gt;</operator><name>errors</name></name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name><name>per</name><operator>-&gt;</operator><name>separator_err</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>per</name><operator>-&gt;</operator><name>separator</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name><name>per</name><operator>-&gt;</operator><name>separator</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>per</name><operator>-&gt;</operator><name>uploadfile</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>stdin_upload</name><argument_list>(<argument><expr><name><name>per</name><operator>-&gt;</operator><name>uploadfile</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VMS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>per</name><operator>-&gt;</operator><name>infd</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>stat</name><argument_list>(<argument><expr><name><name>per</name><operator>-&gt;</operator><name>uploadfile</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fileinfo</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>fileinfo</name><operator>.</operator><name>st_size</name></name> <operator>=</operator> <call><name>VmsSpecialSize</name><argument_list>(<argument><expr><name>uploadfile</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fileinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch<condition>(<expr><name><name>fileinfo</name><operator>.</operator><name>st_fab_rfm</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>FAB$C_VAR</name></expr>:</case>

<case>case <expr><name>FAB$C_VFC</name></expr>:</case>

<case>case <expr><name>FAB$C_STMCR</name></expr>:</case>

<expr_stmt><expr><name><name>per</name><operator>-&gt;</operator><name>infd</name></name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name><name>per</name><operator>-&gt;</operator><name>uploadfile</name></name></expr></argument>, <argument><expr><name>O_RDONLY</name> <operator>|</operator> <name>O_BINARY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><name><name>per</name><operator>-&gt;</operator><name>infd</name></name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name><name>per</name><operator>-&gt;</operator><name>uploadfile</name></name></expr></argument>, <argument><expr><name>O_RDONLY</name> <operator>|</operator> <name>O_BINARY</name></expr></argument>,

<argument><expr><literal type="string">"rfm=stmlf"</literal></expr></argument>, <argument><expr><literal type="string">"ctx=stm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>per</name><operator>-&gt;</operator><name>infd</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name><name>per</name><operator>-&gt;</operator><name>infd</name></name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name><name>per</name><operator>-&gt;</operator><name>uploadfile</name></name></expr></argument>, <argument><expr><name>O_RDONLY</name> <operator>|</operator> <name>O_BINARY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>per</name><operator>-&gt;</operator><name>infd</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>||</operator> <call><name>fstat</name><argument_list>(<argument><expr><name><name>per</name><operator>-&gt;</operator><name>infd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fileinfo</name></expr></argument>)</argument_list></call></expr>)</condition>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<block>{<block_content>

<expr_stmt><expr><call><name>helpf</name><argument_list>(<argument><expr><name><name>global</name><operator>-&gt;</operator><name>errors</name></name></expr></argument>, <argument><expr><literal type="string">"Can't open '%s'!\n"</literal></expr></argument>, <argument><expr><name><name>per</name><operator>-&gt;</operator><name>uploadfile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>per</name><operator>-&gt;</operator><name>infd</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>per</name><operator>-&gt;</operator><name>infd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>per</name><operator>-&gt;</operator><name>infd</name></name> <operator>=</operator> <name>STDIN_FILENO</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>CURLE_READ_ERROR</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>per</name><operator>-&gt;</operator><name>infdopen</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>S_ISREG</name><argument_list>(<argument><expr><name><name>fileinfo</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>uploadfilesize</name> <operator>=</operator> <name><name>fileinfo</name><operator>.</operator><name>st_size</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>uploadfilesize</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>my_setopt</name><argument_list>(<argument><expr><name><name>per</name><operator>-&gt;</operator><name>curl</name></name></expr></argument>, <argument><expr><name>CURLOPT_INFILESIZE_LARGE</name></expr></argument>, <argument><expr><name>uploadfilesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>per</name><operator>-&gt;</operator><name>input</name><operator>.</operator><name>fd</name></name> <operator>=</operator> <name><name>per</name><operator>-&gt;</operator><name>infd</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>post_per_transfer</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>GlobalConfig</name></name> <modifier>*</modifier></type><name>global</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>per_transfer</name></name> <modifier>*</modifier></type><name>per</name></decl></parameter>,

<parameter><decl><type><name>CURLcode</name></type> <name>result</name></decl></parameter>,

<parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>retryp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>OutStruct</name></name> <modifier>*</modifier></type><name>outs</name> <init>= <expr><operator>&amp;</operator><name><name>per</name><operator>-&gt;</operator><name>outs</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CURL</name> <modifier>*</modifier></type><name>curl</name> <init>= <expr><name><name>per</name><operator>-&gt;</operator><name>curl</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>OperationConfig</name></name> <modifier>*</modifier></type><name>config</name> <init>= <expr><name><name>per</name><operator>-&gt;</operator><name>config</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>curl</name> <operator>||</operator> <operator>!</operator><name>config</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>retryp</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>per</name><operator>-&gt;</operator><name>infdopen</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>per</name><operator>-&gt;</operator><name>infd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VMS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><call><name>is_vms_shell</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>global</name><operator>-&gt;</operator><name>showerror</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>vms_show</name> <operator>=</operator> <name>VMSSTS_HIDE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

if<condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>synthetic_error</name></name></expr>)</condition> <block>{<block_content>

<empty_stmt>;</empty_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name>result</name> <operator>&amp;&amp;</operator> <name><name>global</name><operator>-&gt;</operator><name>showerror</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>global</name><operator>-&gt;</operator><name>errors</name></name></expr></argument>, <argument><expr><literal type="string">"curl: (%d) %s\n"</literal></expr></argument>, <argument><expr><name>result</name></expr></argument>,

<argument><expr><ternary><condition><expr><operator>(</operator><name><name>per</name><operator>-&gt;</operator><name>errorbuffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr> ?</condition><then> <expr><name><name>per</name><operator>-&gt;</operator><name>errorbuffer</name></name></expr> </then><else>:

<expr><call><name>curl_easy_strerror</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name> <operator>==</operator> <name>CURLE_PEER_FAILED_VERIFICATION</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><name>CURL_CA_CERT_ERRORMSG</name></expr></argument>, <argument><expr><name><name>global</name><operator>-&gt;</operator><name>errors</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>result</name> <operator>&amp;&amp;</operator> <name><name>config</name><operator>-&gt;</operator><name>xattr</name></name> <operator>&amp;&amp;</operator> <name><name>outs</name><operator>-&gt;</operator><name>fopened</name></name> <operator>&amp;&amp;</operator> <name><name>outs</name><operator>-&gt;</operator><name>stream</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><call><name>fwrite_xattr</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><call><name>fileno</name><argument_list>(<argument><expr><name><name>outs</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>warnf</name><argument_list>(<argument><expr><name><name>config</name><operator>-&gt;</operator><name>global</name></name></expr></argument>, <argument><expr><literal type="string">"Error setting extended attributes: %s\n"</literal></expr></argument>,

<argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>result</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>outs</name><operator>-&gt;</operator><name>stream</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>outs</name><operator>-&gt;</operator><name>bytes</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>long</name></type> <name>cond_unmet</name> <init>= <expr><literal type="number">0L</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>curl_easy_getinfo</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLINFO_CONDITION_UNMET</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cond_unmet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>cond_unmet</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>tool_create_output_file</name><argument_list>(<argument><expr><name>outs</name></expr></argument>, <argument><expr><name>config</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_WRITE_ERROR</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>outs</name><operator>-&gt;</operator><name>s_isreg</name></name> <operator>&amp;&amp;</operator> <name><name>outs</name><operator>-&gt;</operator><name>stream</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><call><name>fflush</name><argument_list>(<argument><expr><name><name>outs</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>result</name> <operator>&amp;&amp;</operator> <name>rc</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_WRITE_ERROR</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>global</name><operator>-&gt;</operator><name>errors</name></name></expr></argument>, <argument><expr><literal type="string">"(%d) Failed writing body\n"</literal></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_METALINK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name><name>per</name><operator>-&gt;</operator><name>metalink</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>per</name><operator>-&gt;</operator><name>metalink_next_res</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>global</name><operator>-&gt;</operator><name>errors</name></name></expr></argument>, <argument><expr><literal type="string">"Metalink: fetching (%s) from (%s) OK\n"</literal></expr></argument>,

<argument><expr><name><name>per</name><operator>-&gt;</operator><name>mlfile</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>, <argument><expr><name><name>per</name><operator>-&gt;</operator><name>this_url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>per</name><operator>-&gt;</operator><name>metalink</name></name> <operator>&amp;&amp;</operator> <name><name>config</name><operator>-&gt;</operator><name>use_metalink</name></name> <operator>&amp;&amp;</operator> <name>result</name> <operator>==</operator> <name>CURLE_OK</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>rv</name> <init>= <expr><call><name>parse_metalink</name><argument_list>(<argument><expr><name>config</name></expr></argument>, <argument><expr><name>outs</name></expr></argument>, <argument><expr><name><name>per</name><operator>-&gt;</operator><name>this_url</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>rv</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>config</name><operator>-&gt;</operator><name>global</name><operator>-&gt;</operator><name>errors</name></name></expr></argument>, <argument><expr><literal type="string">"Metalink: parsing (%s) OK\n"</literal></expr></argument>,

<argument><expr><name><name>per</name><operator>-&gt;</operator><name>this_url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name>rv</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>config</name><operator>-&gt;</operator><name>global</name><operator>-&gt;</operator><name>errors</name></name></expr></argument>, <argument><expr><literal type="string">"Metalink: parsing (%s) FAILED\n"</literal></expr></argument>,

<argument><expr><name><name>per</name><operator>-&gt;</operator><name>this_url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name><name>per</name><operator>-&gt;</operator><name>metalink</name></name> <operator>&amp;&amp;</operator> <name>result</name> <operator>==</operator> <name>CURLE_OK</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>per</name><operator>-&gt;</operator><name>metalink_next_res</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>rv</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>fflush</name><argument_list>(<argument><expr><name><name>outs</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>metalink_check_hash</name><argument_list>(<argument><expr><name>global</name></expr></argument>, <argument><expr><name><name>per</name><operator>-&gt;</operator><name>mlfile</name></name></expr></argument>, <argument><expr><name><name>outs</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>rv</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>per</name><operator>-&gt;</operator><name>metalink_next_res</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_METALINK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name><name>outs</name><operator>-&gt;</operator><name>metalink_parser</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>metalink_parser_context_delete</name><argument_list>(<argument><expr><name><name>outs</name><operator>-&gt;</operator><name>metalink_parser</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<if_stmt><if>if<condition>(<expr><name><name>outs</name><operator>-&gt;</operator><name>is_cd_filename</name></name> <operator>&amp;&amp;</operator> <name><name>outs</name><operator>-&gt;</operator><name>stream</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>global</name><operator>-&gt;</operator><name>mute</name></name> <operator>&amp;&amp;</operator>

<name><name>outs</name><operator>-&gt;</operator><name>filename</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"curl: Saved to filename '%s'\n"</literal></expr></argument>, <argument><expr><name><name>outs</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>per</name><operator>-&gt;</operator><name>retry_numretries</name></name> <operator>&amp;&amp;</operator>

<operator>(</operator><operator>!</operator><name><name>config</name><operator>-&gt;</operator><name>retry_maxtime</name></name> <operator>||</operator>

<operator>(</operator><call><name>tvdiff</name><argument_list>(<argument><expr><call><name>tvnow</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>per</name><operator>-&gt;</operator><name>retrystart</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator>

<name><name>config</name><operator>-&gt;</operator><name>retry_maxtime</name></name><operator>*</operator><literal type="number">1000L</literal><operator>)</operator><operator>)</operator></expr> )</condition> <block>{<block_content>

<enum>enum <block>{

<decl><name>RETRY_NO</name></decl>,

<decl><name>RETRY_TIMEOUT</name></decl>,

<decl><name>RETRY_CONNREFUSED</name></decl>,

<decl><name>RETRY_HTTP</name></decl>,

<decl><name>RETRY_FTP</name></decl>,

<decl><name>RETRY_LAST</name></decl> 

}</block> <decl><name>retry</name> <init>= <expr><name>RETRY_NO</name></expr></init></decl>;</enum>

<decl_stmt><decl><type><name>long</name></type> <name>response</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>CURLE_OPERATION_TIMEDOUT</name> <operator>==</operator> <name>result</name><operator>)</operator> <operator>||</operator>

<operator>(</operator><name>CURLE_COULDNT_RESOLVE_HOST</name> <operator>==</operator> <name>result</name><operator>)</operator> <operator>||</operator>

<operator>(</operator><name>CURLE_COULDNT_RESOLVE_PROXY</name> <operator>==</operator> <name>result</name><operator>)</operator> <operator>||</operator>

<operator>(</operator><name>CURLE_FTP_ACCEPT_TIMEOUT</name> <operator>==</operator> <name>result</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>retry</name> <operator>=</operator> <name>RETRY_TIMEOUT</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>retry_connrefused</name></name> <operator>&amp;&amp;</operator>

<operator>(</operator><name>CURLE_COULDNT_CONNECT</name> <operator>==</operator> <name>result</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>long</name></type> <name>oserrno</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>curl_easy_getinfo</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLINFO_OS_ERRNO</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oserrno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>ECONNREFUSED</name> <operator>==</operator> <name>oserrno</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>retry</name> <operator>=</operator> <name>RETRY_CONNREFUSED</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><operator>(</operator><name>CURLE_OK</name> <operator>==</operator> <name>result</name><operator>)</operator> <operator>||</operator>

<operator>(</operator><name><name>config</name><operator>-&gt;</operator><name>failonerror</name></name> <operator>&amp;&amp;</operator>

<operator>(</operator><name>CURLE_HTTP_RETURNED_ERROR</name> <operator>==</operator> <name>result</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>long</name></type> <name>protocol</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>curl_easy_getinfo</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLINFO_PROTOCOL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>protocol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>protocol</name> <operator>==</operator> <name>CURLPROTO_HTTP</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>protocol</name> <operator>==</operator> <name>CURLPROTO_HTTPS</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>curl_easy_getinfo</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLINFO_RESPONSE_CODE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>response</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch<condition>(<expr><name>response</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">429</literal></expr>:</case> 

<case>case <expr><literal type="number">500</literal></expr>:</case> 

<case>case <expr><literal type="number">502</literal></expr>:</case> 

<case>case <expr><literal type="number">503</literal></expr>:</case> 

<case>case <expr><literal type="number">504</literal></expr>:</case> 

<expr_stmt><expr><name>retry</name> <operator>=</operator> <name>RETRY_HTTP</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> 

<if type="elseif">else if<condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>long</name></type> <name>protocol</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>curl_easy_getinfo</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLINFO_RESPONSE_CODE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>response</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>curl_easy_getinfo</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLINFO_PROTOCOL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>protocol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>protocol</name> <operator>==</operator> <name>CURLPROTO_FTP</name> <operator>||</operator> <name>protocol</name> <operator>==</operator> <name>CURLPROTO_FTPS</name><operator>)</operator> <operator>&amp;&amp;</operator>

<name>response</name> <operator>/</operator> <literal type="number">100</literal> <operator>==</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>retry</name> <operator>=</operator> <name>RETRY_FTP</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>retry</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>long</name></type> <name>sleeptime</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>curl_off_t</name></type> <name>retry_after</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name><name>m</name><index>[]</index></name><init>=<expr><block>{

<expr><name>NULL</name></expr>,

<expr><literal type="string">"timeout"</literal></expr>,

<expr><literal type="string">"connection refused"</literal></expr>,

<expr><literal type="string">"HTTP error"</literal></expr>,

<expr><literal type="string">"FTP error"</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>sleeptime</name> <operator>=</operator> <name><name>per</name><operator>-&gt;</operator><name>retry_sleep</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>RETRY_HTTP</name> <operator>==</operator> <name>retry</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>curl_easy_getinfo</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLINFO_RETRY_AFTER</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>retry_after</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>retry_after</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>retry_after</name> <operator>&gt;</operator> <name>LONG_MAX</name><operator>/</operator><literal type="number">1000</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>sleeptime</name> <operator>=</operator> <name>LONG_MAX</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>sleeptime</name> <operator>=</operator> <operator>(</operator><name>long</name><operator>)</operator><name>retry_after</name> <operator>*</operator> <literal type="number">1000</literal></expr>;</expr_stmt></block_content></block></else></if_stmt> 

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>warnf</name><argument_list>(<argument><expr><name><name>config</name><operator>-&gt;</operator><name>global</name></name></expr></argument>, <argument><expr><literal type="string">"Transient problem: %s "</literal>

<literal type="string">"Will retry in %ld seconds. "</literal>

<literal type="string">"%ld retries left.\n"</literal></expr></argument>,

<argument><expr><name><name>m</name><index>[<expr><name>retry</name></expr>]</index></name></expr></argument>, <argument><expr><name>sleeptime</name><operator>/</operator><literal type="number">1000L</literal></expr></argument>, <argument><expr><name><name>per</name><operator>-&gt;</operator><name>retry_numretries</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>per</name><operator>-&gt;</operator><name>retry_numretries</name></name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tool_go_sleep</name><argument_list>(<argument><expr><name>sleeptime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>config</name><operator>-&gt;</operator><name>retry_delay</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>per</name><operator>-&gt;</operator><name>retry_sleep</name></name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>per</name><operator>-&gt;</operator><name>retry_sleep</name></name> <operator>&gt;</operator> <name>RETRY_SLEEP_MAX</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>per</name><operator>-&gt;</operator><name>retry_sleep</name></name> <operator>=</operator> <name>RETRY_SLEEP_MAX</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>outs</name><operator>-&gt;</operator><name>bytes</name></name> <operator>&amp;&amp;</operator> <name><name>outs</name><operator>-&gt;</operator><name>filename</name></name> <operator>&amp;&amp;</operator> <name><name>outs</name><operator>-&gt;</operator><name>stream</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>global</name><operator>-&gt;</operator><name>mute</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>global</name><operator>-&gt;</operator><name>errors</name></name></expr></argument>, <argument><expr><literal type="string">"Throwing away %"</literal>

<name>CURL_FORMAT_CURL_OFF_T</name> <literal type="string">" bytes\n"</literal></expr></argument>,

<argument><expr><name><name>outs</name><operator>-&gt;</operator><name>bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name><name>outs</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_FTRUNCATE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><call><name>ftruncate</name><argument_list>(<argument><expr><call><name>fileno</name><argument_list>(<argument><expr><name><name>outs</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>outs</name><operator>-&gt;</operator><name>init</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>global</name><operator>-&gt;</operator><name>mute</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>global</name><operator>-&gt;</operator><name>errors</name></name></expr></argument>,

<argument><expr><literal type="string">"failed to truncate, exiting\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>CURLE_WRITE_ERROR</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>fseek</name><argument_list>(<argument><expr><name><name>outs</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SEEK_END</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>fseek</name><argument_list>(<argument><expr><name><name>outs</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><name><name>outs</name><operator>-&gt;</operator><name>init</name></name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if<condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>global</name><operator>-&gt;</operator><name>mute</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>global</name><operator>-&gt;</operator><name>errors</name></name></expr></argument>,

<argument><expr><literal type="string">"failed seeking to end of file, exiting\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>CURLE_WRITE_ERROR</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>outs</name><operator>-&gt;</operator><name>bytes</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>retryp</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt> 

<return>return <expr><name>CURLE_OK</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> 

<if type="elseif">else if<condition>(<expr><name><name>per</name><operator>-&gt;</operator><name>metalink</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>long</name></type> <name>response</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>CURLE_OK</name> <operator>==</operator> <name>result</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>effective_url</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>curl_easy_getinfo</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLINFO_EFFECTIVE_URL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>effective_url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>effective_url</name> <operator>&amp;&amp;</operator>

<call><name>curl_strnequal</name><argument_list>(<argument><expr><name>effective_url</name></expr></argument>, <argument><expr><literal type="string">"http"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>curl_easy_getinfo</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLINFO_RESPONSE_CODE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>response</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>response</name> <operator>!=</operator> <literal type="number">200</literal> <operator>&amp;&amp;</operator> <name>response</name> <operator>!=</operator> <literal type="number">206</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>per</name><operator>-&gt;</operator><name>metalink_next_res</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>global</name><operator>-&gt;</operator><name>errors</name></name></expr></argument>,

<argument><expr><literal type="string">"Metalink: fetching (%s) from (%s) FAILED "</literal>

<literal type="string">"(HTTP status code %ld)\n"</literal></expr></argument>,

<argument><expr><name><name>per</name><operator>-&gt;</operator><name>mlfile</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>, <argument><expr><name><name>per</name><operator>-&gt;</operator><name>this_url</name></name></expr></argument>, <argument><expr><name>response</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name><name>per</name><operator>-&gt;</operator><name>metalink_next_res</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>global</name><operator>-&gt;</operator><name>errors</name></name></expr></argument>,

<argument><expr><literal type="string">"Metalink: fetching (%s) from (%s) FAILED (%s)\n"</literal></expr></argument>,

<argument><expr><name><name>per</name><operator>-&gt;</operator><name>mlfile</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>, <argument><expr><name><name>per</name><operator>-&gt;</operator><name>this_url</name></name></expr></argument>,

<argument><expr><call><name>curl_easy_strerror</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>global</name><operator>-&gt;</operator><name>progressmode</name></name> <operator>==</operator> <name>CURL_PROGRESS_BAR</name><operator>)</operator> <operator>&amp;&amp;</operator>

<name><name>per</name><operator>-&gt;</operator><name>progressbar</name><operator>.</operator><name>calls</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>per</name><operator>-&gt;</operator><name>progressbar</name><operator>.</operator><name>out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>writeout</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ourWriteOut</name><argument_list>(<argument><expr><name><name>per</name><operator>-&gt;</operator><name>curl</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>per</name><operator>-&gt;</operator><name>outs</name></name></expr></argument>, <argument><expr><name><name>config</name><operator>-&gt;</operator><name>writeout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>outs</name><operator>-&gt;</operator><name>fopened</name></name> <operator>&amp;&amp;</operator> <name><name>outs</name><operator>-&gt;</operator><name>stream</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><call><name>fclose</name><argument_list>(<argument><expr><name><name>outs</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>result</name> <operator>&amp;&amp;</operator> <name>rc</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_WRITE_ERROR</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>global</name><operator>-&gt;</operator><name>errors</name></name></expr></argument>, <argument><expr><literal type="string">"(%d) Failed writing body\n"</literal></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>result</name> <operator>&amp;&amp;</operator> <name><name>config</name><operator>-&gt;</operator><name>remote_time</name></name> <operator>&amp;&amp;</operator> <name><name>outs</name><operator>-&gt;</operator><name>s_isreg</name></name> <operator>&amp;&amp;</operator> <name><name>outs</name><operator>-&gt;</operator><name>filename</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>curl_off_t</name></type> <name>filetime</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>curl_easy_getinfo</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLINFO_FILETIME_T</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>filetime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>setfiletime</name><argument_list>(<argument><expr><name>filetime</name></expr></argument>, <argument><expr><name><name>outs</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>, <argument><expr><name><name>config</name><operator>-&gt;</operator><name>global</name><operator>-&gt;</operator><name>errors</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>per</name><operator>-&gt;</operator><name>heads</name><operator>.</operator><name>fopened</name></name> <operator>&amp;&amp;</operator> <name><name>per</name><operator>-&gt;</operator><name>heads</name><operator>.</operator><name>stream</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name><name>per</name><operator>-&gt;</operator><name>heads</name><operator>.</operator><name>stream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>per</name><operator>-&gt;</operator><name>heads</name><operator>.</operator><name>alloc_filename</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>per</name><operator>-&gt;</operator><name>heads</name><operator>.</operator><name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>per</name><operator>-&gt;</operator><name>etag_save</name><operator>.</operator><name>fopened</name></name> <operator>&amp;&amp;</operator> <name><name>per</name><operator>-&gt;</operator><name>etag_save</name><operator>.</operator><name>stream</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name><name>per</name><operator>-&gt;</operator><name>etag_save</name><operator>.</operator><name>stream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>per</name><operator>-&gt;</operator><name>etag_save</name><operator>.</operator><name>alloc_filename</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>per</name><operator>-&gt;</operator><name>etag_save</name><operator>.</operator><name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>curl_easy_cleanup</name><argument_list>(<argument><expr><name><name>per</name><operator>-&gt;</operator><name>curl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>outs</name><operator>-&gt;</operator><name>alloc_filename</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>outs</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>per</name><operator>-&gt;</operator><name>this_url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>per</name><operator>-&gt;</operator><name>separator_err</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>per</name><operator>-&gt;</operator><name>separator</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>per</name><operator>-&gt;</operator><name>outfile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>per</name><operator>-&gt;</operator><name>uploadfile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>single_transfer_cleanup</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>OperationConfig</name></name> <modifier>*</modifier></type><name>config</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>config</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>State</name></name> <modifier>*</modifier></type><name>state</name> <init>= <expr><operator>&amp;</operator><name><name>config</name><operator>-&gt;</operator><name>state</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>urls</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>glob_cleanup</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>urls</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>urls</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>outfiles</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>httpgetfields</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>uploadfile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>inglob</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>glob_cleanup</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>inglob</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>inglob</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>single_transfer</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>GlobalConfig</name></name> <modifier>*</modifier></type><name>global</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>OperationConfig</name></name> <modifier>*</modifier></type><name>config</name></decl></parameter>,

<parameter><decl><type><name>CURLSH</name> <modifier>*</modifier></type><name>share</name></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>capath_from_env</name></decl></parameter>,

<parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>added</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>getout</name></name> <modifier>*</modifier></type><name>urlnode</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>metalinkfile</name> <modifier>*</modifier></type><name>mlfile_last</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>orig_noprogress</name> <init>= <expr><name><name>global</name><operator>-&gt;</operator><name>noprogress</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>orig_isatty</name> <init>= <expr><name><name>global</name><operator>-&gt;</operator><name>isatty</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>State</name></name> <modifier>*</modifier></type><name>state</name> <init>= <expr><operator>&amp;</operator><name><name>config</name><operator>-&gt;</operator><name>state</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>httpgetfields</name> <init>= <expr><name><name>state</name><operator>-&gt;</operator><name>httpgetfields</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>added</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> 

<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>postfields</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>use_httpget</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>httpgetfields</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>httpgetfields</name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>httpgetfields</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name><name>config</name><operator>-&gt;</operator><name>postfields</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>config</name><operator>-&gt;</operator><name>postfields</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>httpgetfields</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>errorf</name><argument_list>(<argument><expr><name>global</name></expr></argument>, <argument><expr><literal type="string">"out of memory\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_OUT_OF_MEMORY</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><call><name>SetHTTPrequest</name><argument_list>(<argument><expr><name>config</name></expr></argument>,

<argument><expr><operator>(</operator><ternary><condition><expr><name><name>config</name><operator>-&gt;</operator><name>no_body</name></name></expr>?</condition><then><expr><name>HTTPREQ_HEAD</name></expr></then><else>:<expr><name>HTTPREQ_GET</name></expr></else></ternary><operator>)</operator></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>config</name><operator>-&gt;</operator><name>httpreq</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_FAILED_INIT</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>SetHTTPrequest</name><argument_list>(<argument><expr><name>config</name></expr></argument>, <argument><expr><name>HTTPREQ_SIMPLEPOST</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>config</name><operator>-&gt;</operator><name>httpreq</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_FAILED_INIT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>single_transfer_cleanup</name><argument_list>(<argument><expr><name>config</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>state</name><operator>-&gt;</operator><name>urlnode</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>urlnode</name></name> <operator>=</operator> <name><name>config</name><operator>-&gt;</operator><name>url_list</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>infilenum</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<while>while<condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>urlnode</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>infiles</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>URLGlob</name> <modifier>*</modifier></type><name>inglob</name> <init>= <expr><name><name>state</name><operator>-&gt;</operator><name>inglob</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>metalink</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>metalinkfile</name> <modifier>*</modifier></type><name>mlfile</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>metalink_resource</name> <modifier>*</modifier></type><name>mlres</name></decl>;</decl_stmt>

<expr_stmt><expr><name>urlnode</name> <operator>=</operator> <name><name>config</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>urlnode</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>urlnode</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>GETOUT_METALINK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>metalink</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>mlfile_last</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mlfile_last</name> <operator>=</operator> <name><name>config</name><operator>-&gt;</operator><name>metalinkfile_list</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>mlfile</name> <operator>=</operator> <name>mlfile_last</name></expr>;</expr_stmt>

<expr_stmt><expr><name>mlfile_last</name> <operator>=</operator> <name><name>mlfile_last</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>mlres</name> <operator>=</operator> <name><name>mlfile</name><operator>-&gt;</operator><name>resource</name></name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>mlfile</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>mlres</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>urlnode</name><operator>-&gt;</operator><name>url</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>urlnode</name><operator>-&gt;</operator><name>outfile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>urlnode</name><operator>-&gt;</operator><name>infile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>urlnode</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>urlnode</name></name> <operator>=</operator> <name><name>urlnode</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>up</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<continue>continue;</continue> 

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>urlnode</name><operator>-&gt;</operator><name>outfile</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>state</name><operator>-&gt;</operator><name>outfiles</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>outfiles</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name><name>urlnode</name><operator>-&gt;</operator><name>outfile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>state</name><operator>-&gt;</operator><name>outfiles</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>errorf</name><argument_list>(<argument><expr><name>global</name></expr></argument>, <argument><expr><literal type="string">"out of memory\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_OUT_OF_MEMORY</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>infiles</name> <operator>=</operator> <name><name>urlnode</name><operator>-&gt;</operator><name>infile</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>config</name><operator>-&gt;</operator><name>globoff</name></name> <operator>&amp;&amp;</operator> <name>infiles</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>inglob</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>glob_url</name><argument_list>(<argument><expr><operator>&amp;</operator><name>inglob</name></expr></argument>, <argument><expr><name>infiles</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>infilenum</name></name></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>global</name><operator>-&gt;</operator><name>showerror</name></name></expr>?</condition><then><expr><name><name>global</name><operator>-&gt;</operator><name>errors</name></name></expr></then><else>:<expr><name>NULL</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>inglob</name></name> <operator>=</operator> <name>inglob</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>separator</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>urlnum</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>state</name><operator>-&gt;</operator><name>up</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>infiles</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>Curl_nop_stmt</name></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>state</name><operator>-&gt;</operator><name>uploadfile</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>inglob</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>glob_next_url</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>uploadfile</name></name></expr></argument>, <argument><expr><name>inglob</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name> <operator>==</operator> <name>CURLE_OUT_OF_MEMORY</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>errorf</name><argument_list>(<argument><expr><name>global</name></expr></argument>, <argument><expr><literal type="string">"out of memory\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><operator>!</operator><name><name>state</name><operator>-&gt;</operator><name>up</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>uploadfile</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>infiles</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>state</name><operator>-&gt;</operator><name>uploadfile</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>errorf</name><argument_list>(<argument><expr><name>global</name></expr></argument>, <argument><expr><literal type="string">"out of memory\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_OUT_OF_MEMORY</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>state</name><operator>-&gt;</operator><name>urlnum</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>metalink</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>urlnum</name> <operator>=</operator> <call><name>count_next_metalink_resource</name><argument_list>(<argument><expr><name>mlfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><operator>!</operator><name><name>config</name><operator>-&gt;</operator><name>globoff</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>glob_url</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>urls</name></name></expr></argument>, <argument><expr><name><name>urlnode</name><operator>-&gt;</operator><name>url</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>urlnum</name></name></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>global</name><operator>-&gt;</operator><name>showerror</name></name></expr>?</condition><then><expr><name><name>global</name><operator>-&gt;</operator><name>errors</name></name></expr></then><else>:<expr><name>NULL</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>urlnum</name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>urlnum</name></name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>urlnum</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt> 

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>urlnum</name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>urlnum</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>separator</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>!</operator><name><name>state</name><operator>-&gt;</operator><name>outfiles</name></name> <operator>||</operator>

<operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>outfiles</name></name></expr></argument>, <argument><expr><literal type="string">"-"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <name>urlnum</name> <operator>&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>up</name></name> <operator>&lt;</operator> <name><name>state</name><operator>-&gt;</operator><name>infilenum</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>per_transfer</name></name> <modifier>*</modifier></type><name>per</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>OutStruct</name></name> <modifier>*</modifier></type><name>outs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>InStruct</name></name> <modifier>*</modifier></type><name>input</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>OutStruct</name></name> <modifier>*</modifier></type><name>heads</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>OutStruct</name></name> <modifier>*</modifier></type><name>etag_save</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>HdrCbData</name></name> <modifier>*</modifier></type><name>hdrcbdata</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CURL</name> <modifier>*</modifier></type><name>curl</name> <init>= <expr><call><name>curl_easy_init</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>add_per_transfer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>per</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name> <operator>||</operator> <operator>!</operator><name>curl</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>curl_easy_cleanup</name><argument_list>(<argument><expr><name>curl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_OUT_OF_MEMORY</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>uploadfile</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>per</name><operator>-&gt;</operator><name>uploadfile</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>uploadfile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>per</name><operator>-&gt;</operator><name>uploadfile</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>curl_easy_cleanup</name><argument_list>(<argument><expr><name>curl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_OUT_OF_MEMORY</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>added</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>per</name><operator>-&gt;</operator><name>config</name></name> <operator>=</operator> <name>config</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>per</name><operator>-&gt;</operator><name>curl</name></name> <operator>=</operator> <name>curl</name></expr>;</expr_stmt>

<expr_stmt><expr><name>heads</name> <operator>=</operator> <operator>&amp;</operator><name><name>per</name><operator>-&gt;</operator><name>heads</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>heads</name><operator>-&gt;</operator><name>stream</name></name> <operator>=</operator> <name>stdout</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>headerfile</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>config</name><operator>-&gt;</operator><name>headerfile</name></name></expr></argument>, <argument><expr><literal type="string">"-"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>newfile</name></decl>;</decl_stmt>

<expr_stmt><expr><name>newfile</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name><name>config</name><operator>-&gt;</operator><name>headerfile</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>per</name><operator>-&gt;</operator><name>prev</name></name> <operator>==</operator> <name>NULL</name></expr>?</condition><then><expr><literal type="string">"wb"</literal></expr></then><else>:<expr><literal type="string">"ab"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>newfile</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>warnf</name><argument_list>(<argument><expr><name><name>config</name><operator>-&gt;</operator><name>global</name></name></expr></argument>, <argument><expr><literal type="string">"Failed to open %s\n"</literal></expr></argument>, <argument><expr><name><name>config</name><operator>-&gt;</operator><name>headerfile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_WRITE_ERROR</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name><name>heads</name><operator>-&gt;</operator><name>filename</name></name> <operator>=</operator> <name><name>config</name><operator>-&gt;</operator><name>headerfile</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>heads</name><operator>-&gt;</operator><name>s_isreg</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>heads</name><operator>-&gt;</operator><name>fopened</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>heads</name><operator>-&gt;</operator><name>stream</name></name> <operator>=</operator> <name>newfile</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>set_binmode</name><argument_list>(<argument><expr><name><name>heads</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>hdrcbdata</name> <operator>=</operator> <operator>&amp;</operator><name><name>per</name><operator>-&gt;</operator><name>hdrcbdata</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>outs</name> <operator>=</operator> <operator>&amp;</operator><name><name>per</name><operator>-&gt;</operator><name>outs</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>input</name> <operator>=</operator> <operator>&amp;</operator><name><name>per</name><operator>-&gt;</operator><name>input</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>per</name><operator>-&gt;</operator><name>outfile</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>per</name><operator>-&gt;</operator><name>infdopen</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>per</name><operator>-&gt;</operator><name>infd</name></name> <operator>=</operator> <name>STDIN_FILENO</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>outs</name><operator>-&gt;</operator><name>stream</name></name> <operator>=</operator> <name>stdout</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>etag_compare_file</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>etag_from_file</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>header</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>file</name> <init>= <expr><call><name>fopen</name><argument_list>(<argument><expr><name><name>config</name><operator>-&gt;</operator><name>etag_compare_file</name></name></expr></argument>, <argument><expr><name>FOPEN_READTEXT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>file</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>config</name><operator>-&gt;</operator><name>etag_save_file</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>errorf</name><argument_list>(<argument><expr><name><name>config</name><operator>-&gt;</operator><name>global</name></name></expr></argument>,

<argument><expr><literal type="string">"Failed to open %s\n"</literal></expr></argument>, <argument><expr><name><name>config</name><operator>-&gt;</operator><name>etag_compare_file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_READ_ERROR</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>PARAM_OK</name> <operator>==</operator> <call><name>file2string</name><argument_list>(<argument><expr><operator>&amp;</operator><name>etag_from_file</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator>

<name>etag_from_file</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>header</name> <operator>=</operator> <call><name>aprintf</name><argument_list>(<argument><expr><literal type="string">"If-None-Match: \"%s\""</literal></expr></argument>, <argument><expr><name>etag_from_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name>etag_from_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>header</name> <operator>=</operator> <call><name>aprintf</name><argument_list>(<argument><expr><literal type="string">"If-None-Match: \"\""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>header</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>file</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>errorf</name><argument_list>(<argument><expr><name><name>config</name><operator>-&gt;</operator><name>global</name></name></expr></argument>,

<argument><expr><literal type="string">"Failed to allocate memory for custom etag header\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_OUT_OF_MEMORY</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>add2list</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>config</name><operator>-&gt;</operator><name>headers</name></name></expr></argument>, <argument><expr><name>header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name>header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>file</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>etag_save</name> <operator>=</operator> <operator>&amp;</operator><name><name>per</name><operator>-&gt;</operator><name>etag_save</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>etag_save</name><operator>-&gt;</operator><name>stream</name></name> <operator>=</operator> <name>stdout</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>etag_save_file</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>config</name><operator>-&gt;</operator><name>etag_save_file</name></name></expr></argument>, <argument><expr><literal type="string">"-"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>newfile</name> <init>= <expr><call><name>fopen</name><argument_list>(<argument><expr><name><name>config</name><operator>-&gt;</operator><name>etag_save_file</name></name></expr></argument>, <argument><expr><literal type="string">"wb"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>newfile</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>warnf</name><argument_list>(

<argument><expr><name><name>config</name><operator>-&gt;</operator><name>global</name></name></expr></argument>,

<argument><expr><literal type="string">"Failed to open %s\n"</literal></expr></argument>, <argument><expr><name><name>config</name><operator>-&gt;</operator><name>etag_save_file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_WRITE_ERROR</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name><name>etag_save</name><operator>-&gt;</operator><name>filename</name></name> <operator>=</operator> <name><name>config</name><operator>-&gt;</operator><name>etag_save_file</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>etag_save</name><operator>-&gt;</operator><name>s_isreg</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>etag_save</name><operator>-&gt;</operator><name>fopened</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>etag_save</name><operator>-&gt;</operator><name>stream</name></name> <operator>=</operator> <name>newfile</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>set_binmode</name><argument_list>(<argument><expr><name><name>etag_save</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>metalink</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>per</name><operator>-&gt;</operator><name>outfile</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name><name>mlfile</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>per</name><operator>-&gt;</operator><name>outfile</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_OUT_OF_MEMORY</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>per</name><operator>-&gt;</operator><name>this_url</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name><name>mlres</name><operator>-&gt;</operator><name>url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>per</name><operator>-&gt;</operator><name>this_url</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_OUT_OF_MEMORY</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>per</name><operator>-&gt;</operator><name>mlfile</name></name> <operator>=</operator> <name>mlfile</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>urls</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>glob_next_url</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>per</name><operator>-&gt;</operator><name>this_url</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>urls</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><operator>!</operator><name><name>state</name><operator>-&gt;</operator><name>li</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>per</name><operator>-&gt;</operator><name>this_url</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name><name>urlnode</name><operator>-&gt;</operator><name>url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>per</name><operator>-&gt;</operator><name>this_url</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_OUT_OF_MEMORY</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>per</name><operator>-&gt;</operator><name>this_url</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>per</name><operator>-&gt;</operator><name>this_url</name></name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>outfiles</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>per</name><operator>-&gt;</operator><name>outfile</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>outfiles</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>per</name><operator>-&gt;</operator><name>outfile</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_OUT_OF_MEMORY</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><operator>(</operator><name><name>urlnode</name><operator>-&gt;</operator><name>flags</name></name><operator>&amp;</operator><name>GETOUT_USEREMOTE</name><operator>)</operator> <operator>||</operator>

<operator>(</operator><name><name>per</name><operator>-&gt;</operator><name>outfile</name></name> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"-"</literal></expr></argument>, <argument><expr><name><name>per</name><operator>-&gt;</operator><name>outfile</name></name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name>metalink</name> <operator>||</operator> <operator>!</operator><name><name>config</name><operator>-&gt;</operator><name>use_metalink</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>per</name><operator>-&gt;</operator><name>outfile</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>get_url_file_name</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>per</name><operator>-&gt;</operator><name>outfile</name></name></expr></argument>, <argument><expr><name><name>per</name><operator>-&gt;</operator><name>this_url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>*</operator><name><name>per</name><operator>-&gt;</operator><name>outfile</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>config</name><operator>-&gt;</operator><name>content_disposition</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>errorf</name><argument_list>(<argument><expr><name>global</name></expr></argument>, <argument><expr><literal type="string">"Remote file name has no length!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_WRITE_ERROR</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>urls</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>storefile</name> <init>= <expr><name><name>per</name><operator>-&gt;</operator><name>outfile</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>glob_match_url</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>per</name><operator>-&gt;</operator><name>outfile</name></name></expr></argument>, <argument><expr><name>storefile</name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>urls</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name>storefile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>warnf</name><argument_list>(<argument><expr><name><name>config</name><operator>-&gt;</operator><name>global</name></name></expr></argument>, <argument><expr><literal type="string">"bad output glob!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>create_dirs</name></name> <operator>||</operator> <name>metalink</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>create_dir_hierarchy</name><argument_list>(<argument><expr><name><name>per</name><operator>-&gt;</operator><name>outfile</name></name></expr></argument>, <argument><expr><name><name>global</name><operator>-&gt;</operator><name>errors</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>urlnode</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>GETOUT_USEREMOTE</name><operator>)</operator>

<operator>&amp;&amp;</operator> <name><name>config</name><operator>-&gt;</operator><name>content_disposition</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>DEBUGASSERT</name><argument_list>(<argument><expr><operator>!</operator><name><name>outs</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>resume_from_current</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>struct_stat</name></type> <name>fileinfo</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><literal type="number">0</literal> <operator>==</operator> <call><name>stat</name><argument_list>(<argument><expr><name><name>per</name><operator>-&gt;</operator><name>outfile</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fileinfo</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>resume_from</name></name> <operator>=</operator> <name><name>fileinfo</name><operator>.</operator><name>st_size</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>resume_from</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>resume_from</name></name></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VMS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>file</name> <init>= <expr><call><name>fopen</name><argument_list>(<argument><expr><name>outfile</name></expr></argument>, <argument><expr><literal type="string">"ab"</literal></expr></argument>,

<argument><expr><literal type="string">"ctx=stm"</literal></expr></argument>, <argument><expr><literal type="string">"rfm=stmlf"</literal></expr></argument>, <argument><expr><literal type="string">"rat=cr"</literal></expr></argument>, <argument><expr><literal type="string">"mrs=0"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>file</name> <init>= <expr><call><name>fopen</name><argument_list>(<argument><expr><name><name>per</name><operator>-&gt;</operator><name>outfile</name></name></expr></argument>, <argument><expr><literal type="string">"ab"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>file</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>errorf</name><argument_list>(<argument><expr><name>global</name></expr></argument>, <argument><expr><literal type="string">"Can't open '%s'!\n"</literal></expr></argument>, <argument><expr><name><name>per</name><operator>-&gt;</operator><name>outfile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_WRITE_ERROR</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>outs</name><operator>-&gt;</operator><name>fopened</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>outs</name><operator>-&gt;</operator><name>stream</name></name> <operator>=</operator> <name>file</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>outs</name><operator>-&gt;</operator><name>init</name></name> <operator>=</operator> <name><name>config</name><operator>-&gt;</operator><name>resume_from</name></name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name><name>outs</name><operator>-&gt;</operator><name>stream</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt> 

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>outs</name><operator>-&gt;</operator><name>filename</name></name> <operator>=</operator> <name><name>per</name><operator>-&gt;</operator><name>outfile</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>outs</name><operator>-&gt;</operator><name>s_isreg</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>per</name><operator>-&gt;</operator><name>uploadfile</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>stdin_upload</name><argument_list>(<argument><expr><name><name>per</name><operator>-&gt;</operator><name>uploadfile</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>nurl</name> <init>= <expr><call><name>add_file_name_to_url</name><argument_list>(<argument><expr><name><name>per</name><operator>-&gt;</operator><name>this_url</name></name></expr></argument>, <argument><expr><name><name>per</name><operator>-&gt;</operator><name>uploadfile</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>nurl</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_OUT_OF_MEMORY</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>per</name><operator>-&gt;</operator><name>this_url</name></name> <operator>=</operator> <name>nurl</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name><name>per</name><operator>-&gt;</operator><name>uploadfile</name></name> <operator>&amp;&amp;</operator> <call><name>stdin_upload</name><argument_list>(<argument><expr><name><name>per</name><operator>-&gt;</operator><name>uploadfile</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>authbits</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bitcheck</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while<condition>(<expr><name>bitcheck</name> <operator>&lt;</operator> <literal type="number">32</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>authtype</name></name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1UL</literal> <operator>&lt;&lt;</operator> <name>bitcheck</name><operator>++</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>authbits</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>authbits</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>proxyanyauth</name></name> <operator>||</operator> <operator>(</operator><name>authbits</name><operator>&gt;</operator><literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>warnf</name><argument_list>(<argument><expr><name><name>config</name><operator>-&gt;</operator><name>global</name></name></expr></argument>,

<argument><expr><literal type="string">"Using --anyauth or --proxy-anyauth with upload from stdin"</literal>

<literal type="string">" involves a big risk of it not working. Use a temporary"</literal>

<literal type="string">" file or a fixed auth type instead!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>DEBUGASSERT</name><argument_list>(<argument><expr><name><name>per</name><operator>-&gt;</operator><name>infdopen</name></name> <operator>==</operator> <name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DEBUGASSERT</name><argument_list>(<argument><expr><name><name>per</name><operator>-&gt;</operator><name>infd</name></name> <operator>==</operator> <name>STDIN_FILENO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_binmode</name><argument_list>(<argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>per</name><operator>-&gt;</operator><name>uploadfile</name></name></expr></argument>, <argument><expr><literal type="string">"."</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>curlx_nonblock</name><argument_list>(<argument><expr><operator>(</operator><name>curl_socket_t</name><operator>)</operator><name><name>per</name><operator>-&gt;</operator><name>infd</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>warnf</name><argument_list>(<argument><expr><name><name>config</name><operator>-&gt;</operator><name>global</name></name></expr></argument>,

<argument><expr><literal type="string">"fcntl failed on fd=%d: %s\n"</literal></expr></argument>, <argument><expr><name><name>per</name><operator>-&gt;</operator><name>infd</name></name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>per</name><operator>-&gt;</operator><name>uploadfile</name></name> <operator>&amp;&amp;</operator> <name><name>config</name><operator>-&gt;</operator><name>resume_from_current</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>resume_from</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<if_stmt><if>if<condition>(<expr><call><name>output_expected</name><argument_list>(<argument><expr><name><name>per</name><operator>-&gt;</operator><name>this_url</name></name></expr></argument>, <argument><expr><name><name>per</name><operator>-&gt;</operator><name>uploadfile</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>outs</name><operator>-&gt;</operator><name>stream</name></name> <operator>&amp;&amp;</operator>

<call><name>isatty</name><argument_list>(<argument><expr><call><name>fileno</name><argument_list>(<argument><expr><name><name>outs</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>per</name><operator>-&gt;</operator><name>noprogress</name></name> <operator>=</operator> <name><name>global</name><operator>-&gt;</operator><name>noprogress</name></name> <operator>=</operator> <name><name>global</name><operator>-&gt;</operator><name>isatty</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name><name>per</name><operator>-&gt;</operator><name>noprogress</name></name> <operator>=</operator> <name><name>global</name><operator>-&gt;</operator><name>noprogress</name></name> <operator>=</operator> <name>orig_noprogress</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>global</name><operator>-&gt;</operator><name>isatty</name></name> <operator>=</operator> <name>orig_isatty</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name>urlnum</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>global</name><operator>-&gt;</operator><name>mute</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>per</name><operator>-&gt;</operator><name>separator_err</name></name> <operator>=</operator>

<call><name>aprintf</name><argument_list>(<argument><expr><literal type="string">"\n[%lu/%lu]: %s --&gt; %s"</literal></expr></argument>,

<argument><expr><name><name>state</name><operator>-&gt;</operator><name>li</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>urlnum</name></expr></argument>, <argument><expr><name><name>per</name><operator>-&gt;</operator><name>this_url</name></name></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>per</name><operator>-&gt;</operator><name>outfile</name></name></expr> ?</condition><then> <expr><name><name>per</name><operator>-&gt;</operator><name>outfile</name></name></expr> </then><else>: <expr><literal type="string">"&lt;stdout&gt;"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>separator</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>per</name><operator>-&gt;</operator><name>separator</name></name> <operator>=</operator> <call><name>aprintf</name><argument_list>(<argument><expr><literal type="string">"%s%s"</literal></expr></argument>, <argument><expr><name>CURLseparator</name></expr></argument>, <argument><expr><name><name>per</name><operator>-&gt;</operator><name>this_url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>httpgetfields</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>urlbuffer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pc</name> <init>= <expr><call><name>strstr</name><argument_list>(<argument><expr><name><name>per</name><operator>-&gt;</operator><name>this_url</name></name></expr></argument>, <argument><expr><literal type="string">"://"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name>sep</name> <init>= <expr><literal type="char">'?'</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>pc</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>pc</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>pc</name> <operator>=</operator> <name><name>per</name><operator>-&gt;</operator><name>this_url</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>pc</name> <operator>=</operator> <call><name>strrchr</name><argument_list>(<argument><expr><name>pc</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if<condition>(<expr><name>pc</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>strchr</name><argument_list>(<argument><expr><name>pc</name></expr></argument>, <argument><expr><literal type="char">'?'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>sep</name> <operator>=</operator> <literal type="char">'&amp;'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>pc</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>urlbuffer</name> <operator>=</operator> <call><name>aprintf</name><argument_list>(<argument><expr><literal type="string">"%s%c%s"</literal></expr></argument>, <argument><expr><name><name>per</name><operator>-&gt;</operator><name>this_url</name></name></expr></argument>, <argument><expr><name>sep</name></expr></argument>, <argument><expr><name>httpgetfields</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>urlbuffer</name> <operator>=</operator> <call><name>aprintf</name><argument_list>(<argument><expr><literal type="string">"%s/?%s"</literal></expr></argument>, <argument><expr><name><name>per</name><operator>-&gt;</operator><name>this_url</name></name></expr></argument>, <argument><expr><name>httpgetfields</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>urlbuffer</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_OUT_OF_MEMORY</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>per</name><operator>-&gt;</operator><name>this_url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>per</name><operator>-&gt;</operator><name>this_url</name></name> <operator>=</operator> <name>urlbuffer</name></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>global</name><operator>-&gt;</operator><name>errors</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>global</name><operator>-&gt;</operator><name>errors</name></name> <operator>=</operator> <name>stderr</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><operator>!</operator><name><name>per</name><operator>-&gt;</operator><name>outfile</name></name> <operator>||</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>per</name><operator>-&gt;</operator><name>outfile</name></name></expr></argument>, <argument><expr><literal type="string">"-"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>!</operator><name><name>config</name><operator>-&gt;</operator><name>use_ascii</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>set_binmode</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>terminal_binary_ok</name></name> <operator>=</operator>

<operator>(</operator><name><name>per</name><operator>-&gt;</operator><name>outfile</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>per</name><operator>-&gt;</operator><name>outfile</name></name></expr></argument>, <argument><expr><literal type="string">"-"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_SHARE</name></expr></argument>, <argument><expr><name>share</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>config</name><operator>-&gt;</operator><name>tcp_nodelay</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>my_setopt</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_TCP_NODELAY</name></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>tcp_fastopen</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>my_setopt</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_TCP_FASTOPEN</name></expr></argument>, <argument><expr><literal type="number">1L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>my_setopt</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_WRITEDATA</name></expr></argument>, <argument><expr><name>per</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>my_setopt</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_INTERLEAVEDATA</name></expr></argument>, <argument><expr><name>per</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>metalink</name> <operator>||</operator> <operator>!</operator><name><name>config</name><operator>-&gt;</operator><name>use_metalink</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>my_setopt</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_WRITEFUNCTION</name></expr></argument>, <argument><expr><name>tool_write_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_METALINK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>my_setopt</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_WRITEFUNCTION</name></expr></argument>, <argument><expr><name>metalink_write_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<expr_stmt><expr><name><name>input</name><operator>-&gt;</operator><name>config</name></name> <operator>=</operator> <name>config</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>my_setopt</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_READDATA</name></expr></argument>, <argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>my_setopt</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_READFUNCTION</name></expr></argument>, <argument><expr><name>tool_read_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>my_setopt</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_SEEKDATA</name></expr></argument>, <argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>my_setopt</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_SEEKFUNCTION</name></expr></argument>, <argument><expr><name>tool_seek_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>recvpersecond</name></name> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>config</name><operator>-&gt;</operator><name>recvpersecond</name></name> <operator>&lt;</operator> <name>BUFFER_SIZE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>my_setopt</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_BUFFERSIZE</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><name><name>config</name><operator>-&gt;</operator><name>recvpersecond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>my_setopt</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_BUFFERSIZE</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><name>BUFFER_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>my_setopt_str</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_URL</name></expr></argument>, <argument><expr><name><name>per</name><operator>-&gt;</operator><name>this_url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>my_setopt</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_NOPROGRESS</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>global</name><operator>-&gt;</operator><name>noprogress</name></name></expr>?</condition><then><expr><literal type="number">1L</literal></expr></then><else>:<expr><literal type="number">0L</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>no_body</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>my_setopt</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_NOBODY</name></expr></argument>, <argument><expr><literal type="number">1L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>oauth_bearer</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>my_setopt_str</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_XOAUTH2_BEARER</name></expr></argument>, <argument><expr><name><name>config</name><operator>-&gt;</operator><name>oauth_bearer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<block>{<block_content>

<expr_stmt><expr><call><name>my_setopt_str</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_PROXY</name></expr></argument>, <argument><expr><name><name>config</name><operator>-&gt;</operator><name>proxy</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>proxy</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>my_setopt_enum</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_PROXYTYPE</name></expr></argument>, <argument><expr><name><name>config</name><operator>-&gt;</operator><name>proxyver</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>my_setopt_str</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_PROXYUSERPWD</name></expr></argument>, <argument><expr><name><name>config</name><operator>-&gt;</operator><name>proxyuserpwd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>my_setopt</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_HTTPPROXYTUNNEL</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>config</name><operator>-&gt;</operator><name>proxytunnel</name></name></expr>?</condition><then><expr><literal type="number">1L</literal></expr></then><else>:<expr><literal type="number">0L</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>preproxy</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>my_setopt_str</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_PRE_PROXY</name></expr></argument>, <argument><expr><name><name>config</name><operator>-&gt;</operator><name>preproxy</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>proxyanyauth</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>my_setopt_bitmask</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_PROXYAUTH</name></expr></argument>,

<argument><expr><operator>(</operator><name>long</name><operator>)</operator><name>CURLAUTH_ANY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>proxynegotiate</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>my_setopt_bitmask</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_PROXYAUTH</name></expr></argument>,

<argument><expr><operator>(</operator><name>long</name><operator>)</operator><name>CURLAUTH_GSSNEGOTIATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>proxyntlm</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>my_setopt_bitmask</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_PROXYAUTH</name></expr></argument>,

<argument><expr><operator>(</operator><name>long</name><operator>)</operator><name>CURLAUTH_NTLM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>proxydigest</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>my_setopt_bitmask</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_PROXYAUTH</name></expr></argument>,

<argument><expr><operator>(</operator><name>long</name><operator>)</operator><name>CURLAUTH_DIGEST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>proxybasic</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>my_setopt_bitmask</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_PROXYAUTH</name></expr></argument>,

<argument><expr><operator>(</operator><name>long</name><operator>)</operator><name>CURLAUTH_BASIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>my_setopt_str</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_NOPROXY</name></expr></argument>, <argument><expr><name><name>config</name><operator>-&gt;</operator><name>noproxy</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>my_setopt</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_SUPPRESS_CONNECT_HEADERS</name></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>config</name><operator>-&gt;</operator><name>suppress_connect_headers</name></name></expr>?</condition><then><expr><literal type="number">1L</literal></expr></then><else>:<expr><literal type="number">0L</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<expr_stmt><expr><call><name>my_setopt</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_FAILONERROR</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>config</name><operator>-&gt;</operator><name>failonerror</name></name></expr>?</condition><then><expr><literal type="number">1L</literal></expr></then><else>:<expr><literal type="number">0L</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>my_setopt</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_REQUEST_TARGET</name></expr></argument>, <argument><expr><name><name>config</name><operator>-&gt;</operator><name>request_target</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>my_setopt</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_UPLOAD</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>per</name><operator>-&gt;</operator><name>uploadfile</name></name></expr>?</condition><then><expr><literal type="number">1L</literal></expr></then><else>:<expr><literal type="number">0L</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>my_setopt</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_DIRLISTONLY</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>config</name><operator>-&gt;</operator><name>dirlistonly</name></name></expr>?</condition><then><expr><literal type="number">1L</literal></expr></then><else>:<expr><literal type="number">0L</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>my_setopt</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_APPEND</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>config</name><operator>-&gt;</operator><name>ftp_append</name></name></expr>?</condition><then><expr><literal type="number">1L</literal></expr></then><else>:<expr><literal type="number">0L</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>netrc_opt</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>my_setopt_enum</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_NETRC</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><name>CURL_NETRC_OPTIONAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>netrc</name></name> <operator>||</operator> <name><name>config</name><operator>-&gt;</operator><name>netrc_file</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>my_setopt_enum</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_NETRC</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><name>CURL_NETRC_REQUIRED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>my_setopt_enum</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_NETRC</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><name>CURL_NETRC_IGNORED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>netrc_file</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>my_setopt_str</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_NETRC_FILE</name></expr></argument>, <argument><expr><name><name>config</name><operator>-&gt;</operator><name>netrc_file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>my_setopt</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_TRANSFERTEXT</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>config</name><operator>-&gt;</operator><name>use_ascii</name></name></expr>?</condition><then><expr><literal type="number">1L</literal></expr></then><else>:<expr><literal type="number">0L</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>login_options</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>my_setopt_str</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_LOGIN_OPTIONS</name></expr></argument>, <argument><expr><name><name>config</name><operator>-&gt;</operator><name>login_options</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>my_setopt_str</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_USERPWD</name></expr></argument>, <argument><expr><name><name>config</name><operator>-&gt;</operator><name>userpwd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>my_setopt_str</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_RANGE</name></expr></argument>, <argument><expr><name><name>config</name><operator>-&gt;</operator><name>range</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>my_setopt</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_ERRORBUFFER</name></expr></argument>, <argument><expr><name><name>per</name><operator>-&gt;</operator><name>errorbuffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>my_setopt</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_TIMEOUT_MS</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><operator>(</operator><name><name>config</name><operator>-&gt;</operator><name>timeout</name></name> <operator>*</operator> <literal type="number">1000</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch<condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>httpreq</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>HTTPREQ_SIMPLEPOST</name></expr>:</case>

<expr_stmt><expr><call><name>my_setopt_str</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_POSTFIELDS</name></expr></argument>,

<argument><expr><name><name>config</name><operator>-&gt;</operator><name>postfields</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>my_setopt</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_POSTFIELDSIZE_LARGE</name></expr></argument>,

<argument><expr><name><name>config</name><operator>-&gt;</operator><name>postfieldsize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>HTTPREQ_MIMEPOST</name></expr>:</case>

<expr_stmt><expr><call><name>curl_mime_free</name><argument_list>(<argument><expr><name><name>config</name><operator>-&gt;</operator><name>mimepost</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>mimepost</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>tool2curlmime</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name><name>config</name><operator>-&gt;</operator><name>mimeroot</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>config</name><operator>-&gt;</operator><name>mimepost</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>my_setopt_mimepost</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_MIMEPOST</name></expr></argument>, <argument><expr><name><name>config</name><operator>-&gt;</operator><name>mimepost</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>authtype</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>my_setopt_bitmask</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_HTTPAUTH</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><name><name>config</name><operator>-&gt;</operator><name>authtype</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>my_setopt_slist</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_HTTPHEADER</name></expr></argument>, <argument><expr><name><name>config</name><operator>-&gt;</operator><name>headers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>built_in_protos</name> <operator>&amp;</operator> <operator>(</operator><name>CURLPROTO_HTTP</name> <operator>|</operator> <name>CURLPROTO_RTSP</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>my_setopt_str</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_REFERER</name></expr></argument>, <argument><expr><name><name>config</name><operator>-&gt;</operator><name>referer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>my_setopt_str</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_USERAGENT</name></expr></argument>, <argument><expr><name><name>config</name><operator>-&gt;</operator><name>useragent</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>built_in_protos</name> <operator>&amp;</operator> <name>CURLPROTO_HTTP</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>long</name></type> <name>postRedir</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>my_setopt</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_FOLLOWLOCATION</name></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>config</name><operator>-&gt;</operator><name>followlocation</name></name></expr>?</condition><then><expr><literal type="number">1L</literal></expr></then><else>:<expr><literal type="number">0L</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>my_setopt</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_UNRESTRICTED_AUTH</name></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>config</name><operator>-&gt;</operator><name>unrestricted_auth</name></name></expr>?</condition><then><expr><literal type="number">1L</literal></expr></then><else>:<expr><literal type="number">0L</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>my_setopt</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_AUTOREFERER</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>config</name><operator>-&gt;</operator><name>autoreferer</name></name></expr>?</condition><then><expr><literal type="number">1L</literal></expr></then><else>:<expr><literal type="number">0L</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>proxyheaders</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>my_setopt_slist</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_PROXYHEADER</name></expr></argument>, <argument><expr><name><name>config</name><operator>-&gt;</operator><name>proxyheaders</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>my_setopt</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_HEADEROPT</name></expr></argument>, <argument><expr><name>CURLHEADER_SEPARATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>my_setopt</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_MAXREDIRS</name></expr></argument>, <argument><expr><name><name>config</name><operator>-&gt;</operator><name>maxredirs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>httpversion</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>my_setopt_enum</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_HTTP_VERSION</name></expr></argument>, <argument><expr><name><name>config</name><operator>-&gt;</operator><name>httpversion</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>(<expr><name><name>curlinfo</name><operator>-&gt;</operator><name>features</name></name> <operator>&amp;</operator> <name>CURL_VERSION_HTTP2</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>my_setopt_enum</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_HTTP_VERSION</name></expr></argument>, <argument><expr><name>CURL_HTTP_VERSION_2TLS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>post301</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>postRedir</name> <operator>|=</operator> <name>CURL_REDIR_POST_301</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>post302</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>postRedir</name> <operator>|=</operator> <name>CURL_REDIR_POST_302</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>post303</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>postRedir</name> <operator>|=</operator> <name>CURL_REDIR_POST_303</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>my_setopt</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_POSTREDIR</name></expr></argument>, <argument><expr><name>postRedir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>encoding</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>my_setopt_str</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_ACCEPT_ENCODING</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>tr_encoding</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>my_setopt</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_TRANSFER_ENCODING</name></expr></argument>, <argument><expr><literal type="number">1L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>my_setopt</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_HTTP09_ALLOWED</name></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>config</name><operator>-&gt;</operator><name>http09_allowed</name></name></expr> ?</condition><then> <expr><literal type="number">1L</literal></expr> </then><else>: <expr><literal type="number">0L</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt> 

<expr_stmt><expr><call><name>my_setopt_str</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_FTPPORT</name></expr></argument>, <argument><expr><name><name>config</name><operator>-&gt;</operator><name>ftpport</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>my_setopt</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_LOW_SPEED_LIMIT</name></expr></argument>,

<argument><expr><name><name>config</name><operator>-&gt;</operator><name>low_speed_limit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>my_setopt</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_LOW_SPEED_TIME</name></expr></argument>, <argument><expr><name><name>config</name><operator>-&gt;</operator><name>low_speed_time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>my_setopt</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_MAX_SEND_SPEED_LARGE</name></expr></argument>,

<argument><expr><name><name>config</name><operator>-&gt;</operator><name>sendpersecond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>my_setopt</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_MAX_RECV_SPEED_LARGE</name></expr></argument>,

<argument><expr><name><name>config</name><operator>-&gt;</operator><name>recvpersecond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>use_resume</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>my_setopt</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_RESUME_FROM_LARGE</name></expr></argument>, <argument><expr><name><name>config</name><operator>-&gt;</operator><name>resume_from</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>my_setopt</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_RESUME_FROM_LARGE</name></expr></argument>, <argument><expr><call><name>CURL_OFF_T_C</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>my_setopt_str</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_KEYPASSWD</name></expr></argument>, <argument><expr><name><name>config</name><operator>-&gt;</operator><name>key_passwd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>my_setopt_str</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_PROXY_KEYPASSWD</name></expr></argument>, <argument><expr><name><name>config</name><operator>-&gt;</operator><name>proxy_key_passwd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>built_in_protos</name> <operator>&amp;</operator> <operator>(</operator><name>CURLPROTO_SCP</name><operator>|</operator><name>CURLPROTO_SFTP</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>my_setopt_str</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_SSH_PRIVATE_KEYFILE</name></expr></argument>, <argument><expr><name><name>config</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>my_setopt_str</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_SSH_PUBLIC_KEYFILE</name></expr></argument>, <argument><expr><name><name>config</name><operator>-&gt;</operator><name>pubkey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>my_setopt_str</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_SSH_HOST_PUBLIC_KEY_MD5</name></expr></argument>,

<argument><expr><name><name>config</name><operator>-&gt;</operator><name>hostpubmd5</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>ssh_compression</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>my_setopt</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_SSH_COMPRESSION</name></expr></argument>, <argument><expr><literal type="number">1L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>cacert</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>my_setopt_str</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_CAINFO</name></expr></argument>, <argument><expr><name><name>config</name><operator>-&gt;</operator><name>cacert</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>proxy_cacert</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>my_setopt_str</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_PROXY_CAINFO</name></expr></argument>, <argument><expr><name><name>config</name><operator>-&gt;</operator><name>proxy_cacert</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>capath</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>res_setopt_str</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_CAPATH</name></expr></argument>, <argument><expr><name><name>config</name><operator>-&gt;</operator><name>capath</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name> <operator>==</operator> <name>CURLE_NOT_BUILT_IN</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>warnf</name><argument_list>(<argument><expr><name><name>config</name><operator>-&gt;</operator><name>global</name></name></expr></argument>, <argument><expr><literal type="string">"ignoring %s, not supported by libcurl\n"</literal></expr></argument>,

<argument><expr><ternary><condition><expr><name>capath_from_env</name></expr>?</condition><then>

<expr><literal type="string">"SSL_CERT_DIR environment variable"</literal></expr></then><else>:<expr><literal type="string">"--capath"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>config</name><operator>-&gt;</operator><name>proxy_capath</name></name> <operator>||</operator> <name><name>config</name><operator>-&gt;</operator><name>capath</name></name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>!</operator><call><name>tool_setopt_skip</name><argument_list>(<argument><expr><name>CURLOPT_PROXY_CAPATH</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>res_setopt_str</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_PROXY_CAPATH</name></expr></argument>,

<argument><expr><operator>(</operator><ternary><condition><expr><name><name>config</name><operator>-&gt;</operator><name>proxy_capath</name></name></expr> ?</condition><then>

<expr><name><name>config</name><operator>-&gt;</operator><name>proxy_capath</name></name></expr> </then><else>:

<expr><name><name>config</name><operator>-&gt;</operator><name>capath</name></name></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name> <operator>==</operator> <name>CURLE_NOT_BUILT_IN</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>proxy_capath</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>warnf</name><argument_list>(<argument><expr><name><name>config</name><operator>-&gt;</operator><name>global</name></name></expr></argument>,

<argument><expr><literal type="string">"ignoring --proxy-capath, not supported by libcurl\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>crlfile</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>my_setopt_str</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_CRLFILE</name></expr></argument>, <argument><expr><name><name>config</name><operator>-&gt;</operator><name>crlfile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>proxy_crlfile</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>my_setopt_str</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_PROXY_CRLFILE</name></expr></argument>, <argument><expr><name><name>config</name><operator>-&gt;</operator><name>proxy_crlfile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>crlfile</name></name></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><call><name>my_setopt_str</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_PROXY_CRLFILE</name></expr></argument>, <argument><expr><name><name>config</name><operator>-&gt;</operator><name>crlfile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>pinnedpubkey</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>my_setopt_str</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_PINNEDPUBLICKEY</name></expr></argument>, <argument><expr><name><name>config</name><operator>-&gt;</operator><name>pinnedpubkey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>curlinfo</name><operator>-&gt;</operator><name>features</name></name> <operator>&amp;</operator> <name>CURL_VERSION_SSL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>cert</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>config</name><operator>-&gt;</operator><name>cert_type</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>is_pkcs11_uri</name><argument_list>(<argument><expr><name><name>config</name><operator>-&gt;</operator><name>cert</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>cert_type</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><literal type="string">"ENG"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>key</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>config</name><operator>-&gt;</operator><name>key_type</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>is_pkcs11_uri</name><argument_list>(<argument><expr><name><name>config</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>key_type</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><literal type="string">"ENG"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>proxy_cert</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>config</name><operator>-&gt;</operator><name>proxy_cert_type</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>is_pkcs11_uri</name><argument_list>(<argument><expr><name><name>config</name><operator>-&gt;</operator><name>proxy_cert</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>proxy_cert_type</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><literal type="string">"ENG"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>proxy_key</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>config</name><operator>-&gt;</operator><name>proxy_key_type</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>is_pkcs11_uri</name><argument_list>(<argument><expr><name><name>config</name><operator>-&gt;</operator><name>proxy_key</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>proxy_key_type</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><literal type="string">"ENG"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>my_setopt_str</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_SSLCERT</name></expr></argument>, <argument><expr><name><name>config</name><operator>-&gt;</operator><name>cert</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>my_setopt_str</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_PROXY_SSLCERT</name></expr></argument>, <argument><expr><name><name>config</name><operator>-&gt;</operator><name>proxy_cert</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>my_setopt_str</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_SSLCERTTYPE</name></expr></argument>, <argument><expr><name><name>config</name><operator>-&gt;</operator><name>cert_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>my_setopt_str</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_PROXY_SSLCERTTYPE</name></expr></argument>,

<argument><expr><name><name>config</name><operator>-&gt;</operator><name>proxy_cert_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>my_setopt_str</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_SSLKEY</name></expr></argument>, <argument><expr><name><name>config</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>my_setopt_str</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_PROXY_SSLKEY</name></expr></argument>, <argument><expr><name><name>config</name><operator>-&gt;</operator><name>proxy_key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>my_setopt_str</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_SSLKEYTYPE</name></expr></argument>, <argument><expr><name><name>config</name><operator>-&gt;</operator><name>key_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>my_setopt_str</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_PROXY_SSLKEYTYPE</name></expr></argument>,

<argument><expr><name><name>config</name><operator>-&gt;</operator><name>proxy_key_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>insecure_ok</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>my_setopt</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_SSL_VERIFYPEER</name></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>my_setopt</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_SSL_VERIFYHOST</name></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>my_setopt</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_SSL_VERIFYPEER</name></expr></argument>, <argument><expr><literal type="number">1L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>proxy_insecure_ok</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>my_setopt</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_PROXY_SSL_VERIFYPEER</name></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>my_setopt</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_PROXY_SSL_VERIFYHOST</name></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>my_setopt</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_PROXY_SSL_VERIFYPEER</name></expr></argument>, <argument><expr><literal type="number">1L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>verifystatus</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>my_setopt</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_SSL_VERIFYSTATUS</name></expr></argument>, <argument><expr><literal type="number">1L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>falsestart</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>my_setopt</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_SSL_FALSESTART</name></expr></argument>, <argument><expr><literal type="number">1L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>my_setopt_enum</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_SSLVERSION</name></expr></argument>,

<argument><expr><name><name>config</name><operator>-&gt;</operator><name>ssl_version</name></name> <operator>|</operator> <name><name>config</name><operator>-&gt;</operator><name>ssl_version_max</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>my_setopt_enum</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_PROXY_SSLVERSION</name></expr></argument>,

<argument><expr><name><name>config</name><operator>-&gt;</operator><name>proxy_ssl_version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>path_as_is</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>my_setopt</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_PATH_AS_IS</name></expr></argument>, <argument><expr><literal type="number">1L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>built_in_protos</name> <operator>&amp;</operator> <operator>(</operator><name>CURLPROTO_SCP</name><operator>|</operator><name>CURLPROTO_SFTP</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>config</name><operator>-&gt;</operator><name>insecure_ok</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>home</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>file</name></decl>;</decl_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_FAILED_INIT</name></expr>;</expr_stmt>

<expr_stmt><expr><name>home</name> <operator>=</operator> <call><name>homedir</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>home</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>file</name> <operator>=</operator> <call><name>aprintf</name><argument_list>(<argument><expr><literal type="string">"%s/.ssh/known_hosts"</literal></expr></argument>, <argument><expr><name>home</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>file</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>res_setopt_str</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_SSH_KNOWNHOSTS</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>curl_free</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name> <operator>==</operator> <name>CURLE_UNKNOWN_OPTION</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_OK</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name>home</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>errorf</name><argument_list>(<argument><expr><name>global</name></expr></argument>, <argument><expr><literal type="string">"Failed to figure out user's home dir!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>no_body</name></name> <operator>||</operator> <name><name>config</name><operator>-&gt;</operator><name>remote_time</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>my_setopt</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_FILETIME</name></expr></argument>, <argument><expr><literal type="number">1L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>my_setopt</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_CRLF</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>config</name><operator>-&gt;</operator><name>crlf</name></name></expr>?</condition><then><expr><literal type="number">1L</literal></expr></then><else>:<expr><literal type="number">0L</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>my_setopt_slist</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_QUOTE</name></expr></argument>, <argument><expr><name><name>config</name><operator>-&gt;</operator><name>quote</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>my_setopt_slist</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_POSTQUOTE</name></expr></argument>, <argument><expr><name><name>config</name><operator>-&gt;</operator><name>postquote</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>my_setopt_slist</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_PREQUOTE</name></expr></argument>, <argument><expr><name><name>config</name><operator>-&gt;</operator><name>prequote</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>cookie</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>my_setopt_str</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_COOKIE</name></expr></argument>, <argument><expr><name><name>config</name><operator>-&gt;</operator><name>cookie</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>cookiefile</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>my_setopt_str</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_COOKIEFILE</name></expr></argument>, <argument><expr><name><name>config</name><operator>-&gt;</operator><name>cookiefile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>cookiejar</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>my_setopt_str</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_COOKIEJAR</name></expr></argument>, <argument><expr><name><name>config</name><operator>-&gt;</operator><name>cookiejar</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>my_setopt</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_COOKIESESSION</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>config</name><operator>-&gt;</operator><name>cookiesession</name></name></expr>?</condition><then><expr><literal type="number">1L</literal></expr></then><else>:<expr><literal type="number">0L</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>my_setopt_enum</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_TIMECONDITION</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><name><name>config</name><operator>-&gt;</operator><name>timecond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>my_setopt</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_TIMEVALUE_LARGE</name></expr></argument>, <argument><expr><name><name>config</name><operator>-&gt;</operator><name>condtime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>my_setopt_str</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_CUSTOMREQUEST</name></expr></argument>, <argument><expr><name><name>config</name><operator>-&gt;</operator><name>customrequest</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>customrequest_helper</name><argument_list>(<argument><expr><name>config</name></expr></argument>, <argument><expr><name><name>config</name><operator>-&gt;</operator><name>httpreq</name></name></expr></argument>, <argument><expr><name><name>config</name><operator>-&gt;</operator><name>customrequest</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>my_setopt</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_STDERR</name></expr></argument>, <argument><expr><name><name>global</name><operator>-&gt;</operator><name>errors</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>my_setopt_str</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_INTERFACE</name></expr></argument>, <argument><expr><name><name>config</name><operator>-&gt;</operator><name>iface</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>my_setopt_str</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_KRBLEVEL</name></expr></argument>, <argument><expr><name><name>config</name><operator>-&gt;</operator><name>krblevel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>progressbarinit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>per</name><operator>-&gt;</operator><name>progressbar</name></name></expr></argument>, <argument><expr><name>config</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>global</name><operator>-&gt;</operator><name>progressmode</name></name> <operator>==</operator> <name>CURL_PROGRESS_BAR</name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>!</operator><name><name>global</name><operator>-&gt;</operator><name>noprogress</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>global</name><operator>-&gt;</operator><name>mute</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>my_setopt</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_XFERINFOFUNCTION</name></expr></argument>, <argument><expr><name>tool_progress_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>my_setopt</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_XFERINFODATA</name></expr></argument>, <argument><expr><name>per</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name><name>per</name><operator>-&gt;</operator><name>uploadfile</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>per</name><operator>-&gt;</operator><name>uploadfile</name></name></expr></argument>, <argument><expr><literal type="string">"."</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>my_setopt</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_NOPROGRESS</name></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>my_setopt</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_XFERINFOFUNCTION</name></expr></argument>, <argument><expr><name>tool_readbusy_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>my_setopt</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_XFERINFODATA</name></expr></argument>, <argument><expr><name>per</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>dns_servers</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>my_setopt_str</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_DNS_SERVERS</name></expr></argument>, <argument><expr><name><name>config</name><operator>-&gt;</operator><name>dns_servers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>dns_interface</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>my_setopt_str</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_DNS_INTERFACE</name></expr></argument>, <argument><expr><name><name>config</name><operator>-&gt;</operator><name>dns_interface</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>dns_ipv4_addr</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>my_setopt_str</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_DNS_LOCAL_IP4</name></expr></argument>, <argument><expr><name><name>config</name><operator>-&gt;</operator><name>dns_ipv4_addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>dns_ipv6_addr</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>my_setopt_str</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_DNS_LOCAL_IP6</name></expr></argument>, <argument><expr><name><name>config</name><operator>-&gt;</operator><name>dns_ipv6_addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>my_setopt_slist</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_TELNETOPTIONS</name></expr></argument>, <argument><expr><name><name>config</name><operator>-&gt;</operator><name>telnet_options</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>my_setopt_str</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_RANDOM_FILE</name></expr></argument>, <argument><expr><name><name>config</name><operator>-&gt;</operator><name>random_file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>my_setopt_str</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_EGDSOCKET</name></expr></argument>, <argument><expr><name><name>config</name><operator>-&gt;</operator><name>egd_file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>my_setopt</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_CONNECTTIMEOUT_MS</name></expr></argument>,

<argument><expr><operator>(</operator><name>long</name><operator>)</operator><operator>(</operator><name><name>config</name><operator>-&gt;</operator><name>connecttimeout</name></name> <operator>*</operator> <literal type="number">1000</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>doh_url</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>my_setopt_str</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_DOH_URL</name></expr></argument>, <argument><expr><name><name>config</name><operator>-&gt;</operator><name>doh_url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>cipher_list</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>my_setopt_str</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_SSL_CIPHER_LIST</name></expr></argument>, <argument><expr><name><name>config</name><operator>-&gt;</operator><name>cipher_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>proxy_cipher_list</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>my_setopt_str</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_PROXY_SSL_CIPHER_LIST</name></expr></argument>,

<argument><expr><name><name>config</name><operator>-&gt;</operator><name>proxy_cipher_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>cipher13_list</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>my_setopt_str</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_TLS13_CIPHERS</name></expr></argument>, <argument><expr><name><name>config</name><operator>-&gt;</operator><name>cipher13_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>proxy_cipher13_list</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>my_setopt_str</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_PROXY_TLS13_CIPHERS</name></expr></argument>,

<argument><expr><name><name>config</name><operator>-&gt;</operator><name>proxy_cipher13_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>disable_epsv</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>my_setopt</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_FTP_USE_EPSV</name></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>disable_eprt</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>my_setopt</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_FTP_USE_EPRT</name></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>global</name><operator>-&gt;</operator><name>tracetype</name></name> <operator>!=</operator> <name>TRACE_NONE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>my_setopt</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_DEBUGFUNCTION</name></expr></argument>, <argument><expr><name>tool_debug_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>my_setopt</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_DEBUGDATA</name></expr></argument>, <argument><expr><name>config</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>my_setopt</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_VERBOSE</name></expr></argument>, <argument><expr><literal type="number">1L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>engine</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>res_setopt_str</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_SSLENGINE</name></expr></argument>, <argument><expr><name><name>config</name><operator>-&gt;</operator><name>engine</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>my_setopt</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_FTP_CREATE_MISSING_DIRS</name></expr></argument>,

<argument><expr><operator>(</operator><name>long</name><operator>)</operator><operator>(</operator><ternary><condition><expr><name><name>config</name><operator>-&gt;</operator><name>ftp_create_dirs</name></name></expr>?</condition><then>

<expr><name>CURLFTP_CREATE_DIR_RETRY</name></expr></then><else>:

<expr><name>CURLFTP_CREATE_DIR_NONE</name></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>max_filesize</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>my_setopt</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_MAXFILESIZE_LARGE</name></expr></argument>,

<argument><expr><name><name>config</name><operator>-&gt;</operator><name>max_filesize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><literal type="number">4</literal> <operator>==</operator> <name><name>config</name><operator>-&gt;</operator><name>ip_version</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>my_setopt</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_IPRESOLVE</name></expr></argument>, <argument><expr><name>CURL_IPRESOLVE_V4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>(<expr><literal type="number">6</literal> <operator>==</operator> <name><name>config</name><operator>-&gt;</operator><name>ip_version</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>my_setopt</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_IPRESOLVE</name></expr></argument>, <argument><expr><name>CURL_IPRESOLVE_V6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>my_setopt</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_IPRESOLVE</name></expr></argument>, <argument><expr><name>CURL_IPRESOLVE_WHATEVER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>ftp_ssl_reqd</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>my_setopt_enum</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_USE_SSL</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><name>CURLUSESSL_ALL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>ftp_ssl</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>my_setopt_enum</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_USE_SSL</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><name>CURLUSESSL_TRY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>ftp_ssl_control</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>my_setopt_enum</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_USE_SSL</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><name>CURLUSESSL_CONTROL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>ftp_ssl_ccc</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>my_setopt_enum</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_FTP_SSL_CCC</name></expr></argument>,

<argument><expr><operator>(</operator><name>long</name><operator>)</operator><name><name>config</name><operator>-&gt;</operator><name>ftp_ssl_ccc_mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>socks5_gssapi_nec</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>my_setopt_str</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_SOCKS5_GSSAPI_NEC</name></expr></argument>,

<argument><expr><name><name>config</name><operator>-&gt;</operator><name>socks5_gssapi_nec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>socks5_auth</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>my_setopt_bitmask</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_SOCKS5_AUTH</name></expr></argument>,

<argument><expr><operator>(</operator><name>long</name><operator>)</operator><name><name>config</name><operator>-&gt;</operator><name>socks5_auth</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>proxy_service_name</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>my_setopt_str</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_PROXY_SERVICE_NAME</name></expr></argument>,

<argument><expr><name><name>config</name><operator>-&gt;</operator><name>proxy_service_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>service_name</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>my_setopt_str</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_SERVICE_NAME</name></expr></argument>,

<argument><expr><name><name>config</name><operator>-&gt;</operator><name>service_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>my_setopt_str</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_FTP_ACCOUNT</name></expr></argument>, <argument><expr><name><name>config</name><operator>-&gt;</operator><name>ftp_account</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>my_setopt</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_IGNORE_CONTENT_LENGTH</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>config</name><operator>-&gt;</operator><name>ignorecl</name></name></expr>?</condition><then><expr><literal type="number">1L</literal></expr></then><else>:<expr><literal type="number">0L</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>my_setopt</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_FTP_SKIP_PASV_IP</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>config</name><operator>-&gt;</operator><name>ftp_skip_ip</name></name></expr>?</condition><then><expr><literal type="number">1L</literal></expr></then><else>:<expr><literal type="number">0L</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>my_setopt</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_FTP_FILEMETHOD</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><name><name>config</name><operator>-&gt;</operator><name>ftp_filemethod</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>localport</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>my_setopt</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_LOCALPORT</name></expr></argument>, <argument><expr><name><name>config</name><operator>-&gt;</operator><name>localport</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>my_setopt_str</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_LOCALPORTRANGE</name></expr></argument>, <argument><expr><name><name>config</name><operator>-&gt;</operator><name>localportrange</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>my_setopt_str</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_FTP_ALTERNATIVE_TO_USER</name></expr></argument>,

<argument><expr><name><name>config</name><operator>-&gt;</operator><name>ftp_alternative_to_user</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>disable_sessionid</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>my_setopt</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_SSL_SESSIONID_CACHE</name></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>raw</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>my_setopt</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_HTTP_CONTENT_DECODING</name></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>my_setopt</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_HTTP_TRANSFER_DECODING</name></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>config</name><operator>-&gt;</operator><name>nokeepalive</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>my_setopt</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_TCP_KEEPALIVE</name></expr></argument>, <argument><expr><literal type="number">1L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>alivetime</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>my_setopt</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_TCP_KEEPIDLE</name></expr></argument>, <argument><expr><name><name>config</name><operator>-&gt;</operator><name>alivetime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>my_setopt</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_TCP_KEEPINTVL</name></expr></argument>, <argument><expr><name><name>config</name><operator>-&gt;</operator><name>alivetime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>my_setopt</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_TCP_KEEPALIVE</name></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>tftp_blksize</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>my_setopt</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_TFTP_BLKSIZE</name></expr></argument>, <argument><expr><name><name>config</name><operator>-&gt;</operator><name>tftp_blksize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>mail_from</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>my_setopt_str</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_MAIL_FROM</name></expr></argument>, <argument><expr><name><name>config</name><operator>-&gt;</operator><name>mail_from</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>mail_rcpt</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>my_setopt_slist</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_MAIL_RCPT</name></expr></argument>, <argument><expr><name><name>config</name><operator>-&gt;</operator><name>mail_rcpt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>my_setopt</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_MAIL_RCPT_ALLLOWFAILS</name></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>config</name><operator>-&gt;</operator><name>mail_rcpt_allowfails</name></name></expr> ?</condition><then> <expr><literal type="number">1L</literal></expr> </then><else>: <expr><literal type="number">0L</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>ftp_pret</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>my_setopt</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_FTP_USE_PRET</name></expr></argument>, <argument><expr><literal type="number">1L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>proto_present</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>my_setopt_flags</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_PROTOCOLS</name></expr></argument>, <argument><expr><name><name>config</name><operator>-&gt;</operator><name>proto</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>proto_redir_present</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>my_setopt_flags</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_REDIR_PROTOCOLS</name></expr></argument>, <argument><expr><name><name>config</name><operator>-&gt;</operator><name>proto_redir</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>content_disposition</name></name>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>urlnode</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>GETOUT_USEREMOTE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>hdrcbdata</name><operator>-&gt;</operator><name>honor_cd_filename</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>hdrcbdata</name><operator>-&gt;</operator><name>honor_cd_filename</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>hdrcbdata</name><operator>-&gt;</operator><name>outs</name></name> <operator>=</operator> <name>outs</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hdrcbdata</name><operator>-&gt;</operator><name>heads</name></name> <operator>=</operator> <name>heads</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hdrcbdata</name><operator>-&gt;</operator><name>etag_save</name></name> <operator>=</operator> <name>etag_save</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hdrcbdata</name><operator>-&gt;</operator><name>global</name></name> <operator>=</operator> <name>global</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hdrcbdata</name><operator>-&gt;</operator><name>config</name></name> <operator>=</operator> <name>config</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>my_setopt</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_HEADERFUNCTION</name></expr></argument>, <argument><expr><name>tool_header_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>my_setopt</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_HEADERDATA</name></expr></argument>, <argument><expr><name>per</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>resolve</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>my_setopt_slist</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_RESOLVE</name></expr></argument>, <argument><expr><name><name>config</name><operator>-&gt;</operator><name>resolve</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>connect_to</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>my_setopt_slist</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_CONNECT_TO</name></expr></argument>, <argument><expr><name><name>config</name><operator>-&gt;</operator><name>connect_to</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>curlinfo</name><operator>-&gt;</operator><name>features</name></name> <operator>&amp;</operator> <name>CURL_VERSION_TLSAUTH_SRP</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>tls_username</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>my_setopt_str</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_TLSAUTH_USERNAME</name></expr></argument>,

<argument><expr><name><name>config</name><operator>-&gt;</operator><name>tls_username</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>tls_password</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>my_setopt_str</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_TLSAUTH_PASSWORD</name></expr></argument>,

<argument><expr><name><name>config</name><operator>-&gt;</operator><name>tls_password</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>tls_authtype</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>my_setopt_str</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_TLSAUTH_TYPE</name></expr></argument>,

<argument><expr><name><name>config</name><operator>-&gt;</operator><name>tls_authtype</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>proxy_tls_username</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>my_setopt_str</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_PROXY_TLSAUTH_USERNAME</name></expr></argument>,

<argument><expr><name><name>config</name><operator>-&gt;</operator><name>proxy_tls_username</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>proxy_tls_password</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>my_setopt_str</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_PROXY_TLSAUTH_PASSWORD</name></expr></argument>,

<argument><expr><name><name>config</name><operator>-&gt;</operator><name>proxy_tls_password</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>proxy_tls_authtype</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>my_setopt_str</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_PROXY_TLSAUTH_TYPE</name></expr></argument>,

<argument><expr><name><name>config</name><operator>-&gt;</operator><name>proxy_tls_authtype</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>gssapi_delegation</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>my_setopt_str</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_GSSAPI_DELEGATION</name></expr></argument>,

<argument><expr><name><name>config</name><operator>-&gt;</operator><name>gssapi_delegation</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<block>{<block_content>

<decl_stmt><decl><type><name>long</name></type> <name>mask</name> <init>= <expr><operator>(</operator><ternary><condition><expr><name><name>config</name><operator>-&gt;</operator><name>ssl_allow_beast</name></name></expr> ?</condition><then> <expr><name>CURLSSLOPT_ALLOW_BEAST</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator> <operator>|</operator>

<operator>(</operator><ternary><condition><expr><name><name>config</name><operator>-&gt;</operator><name>ssl_revoke_best_effort</name></name></expr> ?</condition><then>

<expr><name>CURLSSLOPT_REVOKE_BEST_EFFORT</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator> <operator>|</operator>

<operator>(</operator><ternary><condition><expr><name><name>config</name><operator>-&gt;</operator><name>ssl_no_revoke</name></name></expr> ?</condition><then> <expr><name>CURLSSLOPT_NO_REVOKE</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>mask</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>my_setopt_bitmask</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_SSL_OPTIONS</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block>

<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>proxy_ssl_allow_beast</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>my_setopt</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_PROXY_SSL_OPTIONS</name></expr></argument>,

<argument><expr><operator>(</operator><name>long</name><operator>)</operator><name>CURLSSLOPT_ALLOW_BEAST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>mail_auth</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>my_setopt_str</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_MAIL_AUTH</name></expr></argument>, <argument><expr><name><name>config</name><operator>-&gt;</operator><name>mail_auth</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>sasl_authzid</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>my_setopt_str</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_SASL_AUTHZID</name></expr></argument>, <argument><expr><name><name>config</name><operator>-&gt;</operator><name>sasl_authzid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>sasl_ir</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>my_setopt</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_SASL_IR</name></expr></argument>, <argument><expr><literal type="number">1L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>nonpn</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>my_setopt</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_SSL_ENABLE_NPN</name></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>noalpn</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>my_setopt</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_SSL_ENABLE_ALPN</name></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>unix_socket_path</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>abstract_unix_socket</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>my_setopt_str</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_ABSTRACT_UNIX_SOCKET</name></expr></argument>,

<argument><expr><name><name>config</name><operator>-&gt;</operator><name>unix_socket_path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>my_setopt_str</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_UNIX_SOCKET_PATH</name></expr></argument>,

<argument><expr><name><name>config</name><operator>-&gt;</operator><name>unix_socket_path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>proto_default</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>my_setopt_str</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_DEFAULT_PROTOCOL</name></expr></argument>, <argument><expr><name><name>config</name><operator>-&gt;</operator><name>proto_default</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>expect100timeout</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>my_setopt_str</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_EXPECT_100_TIMEOUT_MS</name></expr></argument>,

<argument><expr><operator>(</operator><name>long</name><operator>)</operator><operator>(</operator><name><name>config</name><operator>-&gt;</operator><name>expect100timeout</name></name><operator>*</operator><literal type="number">1000</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>tftp_no_options</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>my_setopt</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_TFTP_NO_OPTIONS</name></expr></argument>, <argument><expr><literal type="number">1L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>happy_eyeballs_timeout_ms</name></name> <operator>!=</operator> <name>CURL_HET_DEFAULT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>my_setopt</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_HAPPY_EYEBALLS_TIMEOUT_MS</name></expr></argument>,

<argument><expr><name><name>config</name><operator>-&gt;</operator><name>happy_eyeballs_timeout_ms</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>haproxy_protocol</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>my_setopt</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_HAPROXYPROTOCOL</name></expr></argument>, <argument><expr><literal type="number">1L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>disallow_username_in_url</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>my_setopt</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_DISALLOW_USERNAME_IN_URL</name></expr></argument>, <argument><expr><literal type="number">1L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>altsvc</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>my_setopt_str</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_ALTSVC</name></expr></argument>, <argument><expr><name><name>config</name><operator>-&gt;</operator><name>altsvc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_METALINK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>metalink</name> <operator>&amp;&amp;</operator> <name><name>config</name><operator>-&gt;</operator><name>use_metalink</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>outs</name><operator>-&gt;</operator><name>metalink_parser</name></name> <operator>=</operator> <call><name>metalink_parser_context_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>outs</name><operator>-&gt;</operator><name>metalink_parser</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_OUT_OF_MEMORY</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>config</name><operator>-&gt;</operator><name>global</name><operator>-&gt;</operator><name>errors</name></name></expr></argument>,

<argument><expr><literal type="string">"Metalink: parsing (%s) metalink/XML...\n"</literal></expr></argument>, <argument><expr><name><name>per</name><operator>-&gt;</operator><name>this_url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name>metalink</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>config</name><operator>-&gt;</operator><name>global</name><operator>-&gt;</operator><name>errors</name></name></expr></argument>,

<argument><expr><literal type="string">"Metalink: fetching (%s) from (%s)...\n"</literal></expr></argument>,

<argument><expr><name><name>mlfile</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>, <argument><expr><name><name>per</name><operator>-&gt;</operator><name>this_url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<expr_stmt><expr><name><name>per</name><operator>-&gt;</operator><name>metalink</name></name> <operator>=</operator> <name>metalink</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>per</name><operator>-&gt;</operator><name>retry_sleep_default</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>config</name><operator>-&gt;</operator><name>retry_delay</name></name><operator>)</operator></expr> ?</condition><then>

<expr><name><name>config</name><operator>-&gt;</operator><name>retry_delay</name></name><operator>*</operator><literal type="number">1000L</literal></expr> </then><else>: <expr><name>RETRY_SLEEP_DEFAULT</name></expr></else></ternary></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>per</name><operator>-&gt;</operator><name>retry_numretries</name></name> <operator>=</operator> <name><name>config</name><operator>-&gt;</operator><name>req_retry</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>per</name><operator>-&gt;</operator><name>retry_sleep</name></name> <operator>=</operator> <name><name>per</name><operator>-&gt;</operator><name>retry_sleep_default</name></name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>per</name><operator>-&gt;</operator><name>retrystart</name></name> <operator>=</operator> <call><name>tvnow</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>li</name></name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>li</name></name> <operator>&gt;=</operator> <name>urlnum</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>li</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>urlnum</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>glob_cleanup</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>urls</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>urls</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>up</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>uploadfile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>urlnode</name><operator>-&gt;</operator><name>outfile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>urlnode</name><operator>-&gt;</operator><name>infile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>urlnode</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glob_cleanup</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>urls</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>urls</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>urlnum</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>outfiles</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>uploadfile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>inglob</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>glob_cleanup</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>inglob</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>inglob</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>urlnode</name></name> <operator>=</operator> <name><name>urlnode</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>up</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></else></if_stmt>

</block_content>}</block>

<break>break;</break>

</block_content>}</block></while>

<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>*</operator><name>added</name> <operator>||</operator> <name>result</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>added</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>single_transfer_cleanup</name><argument_list>(<argument><expr><name>config</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>long</name></type> <name>all_added</name></decl>;</decl_stmt> 

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>add_parallel_transfers</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>GlobalConfig</name></name> <modifier>*</modifier></type><name>global</name></decl></parameter>,

<parameter><decl><type><name>CURLM</name> <modifier>*</modifier></type><name>multi</name></decl></parameter>,

<parameter><decl><type><name>CURLSH</name> <modifier>*</modifier></type><name>share</name></decl></parameter>,

<parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>morep</name></decl></parameter>,

<parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>addedp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>per_transfer</name></name> <modifier>*</modifier></type><name>per</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CURLMcode</name></type> <name>mcode</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>addedp</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>morep</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>create_transfer</name><argument_list>(<argument><expr><name>global</name></expr></argument>, <argument><expr><name>share</name></expr></argument>, <argument><expr><name>addedp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

<for>for<control>(<init><expr><name>per</name> <operator>=</operator> <name>transfers</name></expr>;</init> <condition><expr><name>per</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>all_added</name> <operator>&lt;</operator> <name><name>global</name><operator>-&gt;</operator><name>parallel_max</name></name><operator>)</operator></expr>;</condition>

<incr><expr><name>per</name> <operator>=</operator> <name><name>per</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>getadded</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>per</name><operator>-&gt;</operator><name>added</name></name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>pre_transfer</name><argument_list>(<argument><expr><name>global</name></expr></argument>, <argument><expr><name>per</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name><name>per</name><operator>-&gt;</operator><name>curl</name></name></expr></argument>, <argument><expr><name>CURLOPT_PIPEWAIT</name></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>global</name><operator>-&gt;</operator><name>parallel_connect</name></name></expr> ?</condition><then> <expr><literal type="number">0L</literal></expr> </then><else>: <expr><literal type="number">1L</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name><name>per</name><operator>-&gt;</operator><name>curl</name></name></expr></argument>, <argument><expr><name>CURLOPT_PRIVATE</name></expr></argument>, <argument><expr><name>per</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name><name>per</name><operator>-&gt;</operator><name>curl</name></name></expr></argument>, <argument><expr><name>CURLOPT_XFERINFOFUNCTION</name></expr></argument>, <argument><expr><name>xferinfo_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name><name>per</name><operator>-&gt;</operator><name>curl</name></name></expr></argument>, <argument><expr><name>CURLOPT_XFERINFODATA</name></expr></argument>, <argument><expr><name>per</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mcode</name> <operator>=</operator> <call><name>curl_multi_add_handle</name><argument_list>(<argument><expr><name>multi</name></expr></argument>, <argument><expr><name><name>per</name><operator>-&gt;</operator><name>curl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>mcode</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>create_transfer</name><argument_list>(<argument><expr><name>global</name></expr></argument>, <argument><expr><name>share</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>getadded</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>per</name><operator>-&gt;</operator><name>added</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>all_added</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>addedp</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><operator>*</operator><name>morep</name> <operator>=</operator> <ternary><condition><expr><name>per</name></expr> ?</condition><then> <expr><name>TRUE</name></expr> </then><else>: <expr><name>FALSE</name></expr></else></ternary></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>parallel_transfers</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>GlobalConfig</name></name> <modifier>*</modifier></type><name>global</name></decl></parameter>,

<parameter><decl><type><name>CURLSH</name> <modifier>*</modifier></type><name>share</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CURLM</name> <modifier>*</modifier></type><name>multi</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CURLMcode</name></type> <name>mcode</name> <init>= <expr><name>CURLM_OK</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>still_running</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>start</name> <init>= <expr><call><name>tvnow</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>more_transfers</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>added_transfers</name></decl>;</decl_stmt>

<expr_stmt><expr><name>multi</name> <operator>=</operator> <call><name>curl_multi_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>multi</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>add_parallel_transfers</name><argument_list>(<argument><expr><name>global</name></expr></argument>, <argument><expr><name>multi</name></expr></argument>, <argument><expr><name>share</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>more_transfers</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>added_transfers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>curl_multi_cleanup</name><argument_list>(<argument><expr><name>multi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<while>while<condition>(<expr><operator>!</operator><name>mcode</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>still_running</name> <operator>||</operator> <name>more_transfers</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mcode</name> <operator>=</operator> <call><name>curl_multi_poll</name><argument_list>(<argument><expr><name>multi</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1000</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>mcode</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>mcode</name> <operator>=</operator> <call><name>curl_multi_perform</name><argument_list>(<argument><expr><name>multi</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>still_running</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>progress_meter</name><argument_list>(<argument><expr><name>global</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>start</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>mcode</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CURLMsg</name> <modifier>*</modifier></type><name>msg</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>removed</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<do>do <block>{<block_content>

<expr_stmt><expr><name>msg</name> <operator>=</operator> <call><name>curl_multi_info_read</name><argument_list>(<argument><expr><name>multi</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>msg</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>retry</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>per_transfer</name></name> <modifier>*</modifier></type><name>ended</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CURL</name> <modifier>*</modifier></type><name>easy</name> <init>= <expr><name><name>msg</name><operator>-&gt;</operator><name>easy_handle</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name><name>msg</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>result</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>curl_easy_getinfo</name><argument_list>(<argument><expr><name>easy</name></expr></argument>, <argument><expr><name>CURLINFO_PRIVATE</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>ended</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>curl_multi_remove_handle</name><argument_list>(<argument><expr><name>multi</name></expr></argument>, <argument><expr><name>easy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>post_per_transfer</name><argument_list>(<argument><expr><name>global</name></expr></argument>, <argument><expr><name>ended</name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>retry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>retry</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>progress_finalize</name><argument_list>(<argument><expr><name>ended</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>all_added</name><operator>--</operator></expr>;</expr_stmt> 

<expr_stmt><expr><name>removed</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>del_per_transfer</name><argument_list>(<argument><expr><name>ended</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block> while<condition>(<expr><name>msg</name></expr>)</condition>;</do>

<if_stmt><if>if<condition>(<expr><name>removed</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>add_parallel_transfers</name><argument_list>(<argument><expr><name>global</name></expr></argument>, <argument><expr><name>multi</name></expr></argument>, <argument><expr><name>share</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>more_transfers</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>added_transfers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>added_transfers</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>still_running</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>progress_meter</name><argument_list>(<argument><expr><name>global</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>start</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>mcode</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>mcode</name> <operator>==</operator> <name>CURLM_OUT_OF_MEMORY</name><operator>)</operator></expr> ?</condition><then> <expr><name>CURLE_OUT_OF_MEMORY</name></expr> </then><else>:

<expr><name>CURLE_BAD_FUNCTION_ARGUMENT</name></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>curl_multi_cleanup</name><argument_list>(<argument><expr><name>multi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>serial_transfers</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>GlobalConfig</name></name> <modifier>*</modifier></type><name>global</name></decl></parameter>,

<parameter><decl><type><name>CURLSH</name> <modifier>*</modifier></type><name>share</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>returncode</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>per_transfer</name></name> <modifier>*</modifier></type><name>per</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>added</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>create_transfer</name><argument_list>(<argument><expr><name>global</name></expr></argument>, <argument><expr><name>share</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>added</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name> <operator>||</operator> <operator>!</operator><name>added</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

<for>for<control>(<init><expr><name>per</name> <operator>=</operator> <name>transfers</name></expr>;</init> <condition><expr><name>per</name></expr>;</condition><incr/>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>retry</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>bailout</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>pre_transfer</name><argument_list>(<argument><expr><name>global</name></expr></argument>, <argument><expr><name>per</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_LIBCURL_OPTION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name><name>global</name><operator>-&gt;</operator><name>libcurl</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>easysrc_perform</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CURLDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name><name>global</name><operator>-&gt;</operator><name>test_event_based</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>curl_easy_perform_ev</name><argument_list>(<argument><expr><name><name>per</name><operator>-&gt;</operator><name>curl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>curl_easy_perform</name><argument_list>(<argument><expr><name><name>per</name><operator>-&gt;</operator><name>curl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>returncode</name> <operator>=</operator> <name>result</name></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>post_per_transfer</name><argument_list>(<argument><expr><name>global</name></expr></argument>, <argument><expr><name>per</name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>retry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>retry</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name> <operator>||</operator> <call><name>is_fatal_error</name><argument_list>(<argument><expr><name>returncode</name></expr></argument>)</argument_list></call> <operator>||</operator>

<operator>(</operator><name>returncode</name> <operator>&amp;&amp;</operator> <name><name>global</name><operator>-&gt;</operator><name>fail_early</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>bailout</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>create_transfer</name><argument_list>(<argument><expr><name>global</name></expr></argument>, <argument><expr><name>share</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>added</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>bailout</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>delete_metalinkfile</name><argument_list>(<argument><expr><name><name>per</name><operator>-&gt;</operator><name>mlfile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>per</name> <operator>=</operator> <call><name>del_per_transfer</name><argument_list>(<argument><expr><name>per</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>bailout</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if<condition>(<expr><name>returncode</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>returncode</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>single_transfer_cleanup</name><argument_list>(<argument><expr><name><name>global</name><operator>-&gt;</operator><name>current</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>transfer_per_config</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>GlobalConfig</name></name> <modifier>*</modifier></type><name>global</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>OperationConfig</name></name> <modifier>*</modifier></type><name>config</name></decl></parameter>,

<parameter><decl><type><name>CURLSH</name> <modifier>*</modifier></type><name>share</name></decl></parameter>,

<parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>added</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>capath_from_env</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>added</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>config</name><operator>-&gt;</operator><name>url_list</name></name> <operator>||</operator> <operator>!</operator><name><name>config</name><operator>-&gt;</operator><name>url_list</name><operator>-&gt;</operator><name>url</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>helpf</name><argument_list>(<argument><expr><name><name>global</name><operator>-&gt;</operator><name>errors</name></name></expr></argument>, <argument><expr><literal type="string">"no URL specified!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_FAILED_INIT</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>capath_from_env</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>config</name><operator>-&gt;</operator><name>cacert</name></name> <operator>&amp;&amp;</operator>

<operator>!</operator><name><name>config</name><operator>-&gt;</operator><name>capath</name></name> <operator>&amp;&amp;</operator>

<operator>!</operator><name><name>config</name><operator>-&gt;</operator><name>insecure_ok</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>CURL</name> <modifier>*</modifier></type><name>curltls</name> <init>= <expr><call><name>curl_easy_init</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>curl_tlssessioninfo</name></name> <modifier>*</modifier></type><name>tls_backend_info</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>curl_easy_getinfo</name><argument_list>(<argument><expr><name>curltls</name></expr></argument>, <argument><expr><name>CURLINFO_TLS_SSL_PTR</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>tls_backend_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>tls_backend_info</name><operator>-&gt;</operator><name>backend</name></name> <operator>!=</operator> <name>CURLSSLBACKEND_SCHANNEL</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>env</name></decl>;</decl_stmt>

<expr_stmt><expr><name>env</name> <operator>=</operator> <call><name>curlx_getenv</name><argument_list>(<argument><expr><literal type="string">"CURL_CA_BUNDLE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>env</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>cacert</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>config</name><operator>-&gt;</operator><name>cacert</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>curl_free</name><argument_list>(<argument><expr><name>env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>errorf</name><argument_list>(<argument><expr><name>global</name></expr></argument>, <argument><expr><literal type="string">"out of memory\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>env</name> <operator>=</operator> <call><name>curlx_getenv</name><argument_list>(<argument><expr><literal type="string">"SSL_CERT_DIR"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>env</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>capath</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>config</name><operator>-&gt;</operator><name>capath</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>curl_free</name><argument_list>(<argument><expr><name>env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>helpf</name><argument_list>(<argument><expr><name><name>global</name><operator>-&gt;</operator><name>errors</name></name></expr></argument>, <argument><expr><literal type="string">"out of memory\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>capath_from_env</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>env</name> <operator>=</operator> <call><name>curlx_getenv</name><argument_list>(<argument><expr><literal type="string">"SSL_CERT_FILE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>env</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>cacert</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>config</name><operator>-&gt;</operator><name>cacert</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>curl_free</name><argument_list>(<argument><expr><name>env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>errorf</name><argument_list>(<argument><expr><name>global</name></expr></argument>, <argument><expr><literal type="string">"out of memory\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name>env</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>curl_free</name><argument_list>(<argument><expr><name>env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<else>else <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>FindWin32CACert</name><argument_list>(<argument><expr><name>config</name></expr></argument>, <argument><expr><name><name>tls_backend_info</name><operator>-&gt;</operator><name>backend</name></name></expr></argument>,

<argument><expr><literal type="string">"curl-ca-bundle.crt"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>curl_easy_cleanup</name><argument_list>(<argument><expr><name>curltls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>result</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>single_transfer</name><argument_list>(<argument><expr><name>global</name></expr></argument>, <argument><expr><name>config</name></expr></argument>, <argument><expr><name>share</name></expr></argument>, <argument><expr><name>capath_from_env</name></expr></argument>, <argument><expr><name>added</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>create_transfer</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>GlobalConfig</name></name> <modifier>*</modifier></type><name>global</name></decl></parameter>,

<parameter><decl><type><name>CURLSH</name> <modifier>*</modifier></type><name>share</name></decl></parameter>,

<parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>added</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>added</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<while>while<condition>(<expr><name><name>global</name><operator>-&gt;</operator><name>current</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>transfer_per_config</name><argument_list>(<argument><expr><name>global</name></expr></argument>, <argument><expr><name><name>global</name><operator>-&gt;</operator><name>current</name></name></expr></argument>, <argument><expr><name>share</name></expr></argument>, <argument><expr><name>added</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>result</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>*</operator><name>added</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>global</name><operator>-&gt;</operator><name>current</name></name> <operator>=</operator> <name><name>global</name><operator>-&gt;</operator><name>current</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block></while>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>run_all_transfers</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>GlobalConfig</name></name> <modifier>*</modifier></type><name>global</name></decl></parameter>,

<parameter><decl><type><name>CURLSH</name> <modifier>*</modifier></type><name>share</name></decl></parameter>,

<parameter><decl><type><name>CURLcode</name></type> <name>result</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>orig_noprogress</name> <init>= <expr><name><name>global</name><operator>-&gt;</operator><name>noprogress</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>orig_isatty</name> <init>= <expr><name><name>global</name><operator>-&gt;</operator><name>isatty</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>per_transfer</name></name> <modifier>*</modifier></type><name>per</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>result</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>global</name><operator>-&gt;</operator><name>parallel</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>parallel_transfers</name><argument_list>(<argument><expr><name>global</name></expr></argument>, <argument><expr><name>share</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>serial_transfers</name><argument_list>(<argument><expr><name>global</name></expr></argument>, <argument><expr><name>share</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<for>for<control>(<init><expr><name>per</name> <operator>=</operator> <name>transfers</name></expr>;</init> <condition><expr><name>per</name></expr>;</condition><incr/>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>retry</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result2</name> <init>= <expr><call><name>post_per_transfer</name><argument_list>(<argument><expr><name>global</name></expr></argument>, <argument><expr><name>per</name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>retry</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>result</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>result2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>clean_getout</name><argument_list>(<argument><expr><name><name>per</name><operator>-&gt;</operator><name>config</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>clean_metalink</name><argument_list>(<argument><expr><name><name>per</name><operator>-&gt;</operator><name>config</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>per</name> <operator>=</operator> <call><name>del_per_transfer</name><argument_list>(<argument><expr><name>per</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>global</name><operator>-&gt;</operator><name>noprogress</name></name> <operator>=</operator> <name>orig_noprogress</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>global</name><operator>-&gt;</operator><name>isatty</name></name> <operator>=</operator> <name>orig_isatty</name></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>CURLcode</name></type> <name>operate</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>GlobalConfig</name></name> <modifier>*</modifier></type><name>global</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>argv_item_t</name></type> <name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SETLOCALE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>setlocale</name><argument_list>(<argument><expr><name>LC_ALL</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>argc</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator> <operator>||</operator>

<operator>(</operator><operator>!</operator><call><name>curl_strequal</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-q"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<operator>!</operator><call><name>curl_strequal</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"--disable"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>parseconfig</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>global</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>argc</name> <operator>&lt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name><name>global</name><operator>-&gt;</operator><name>first</name><operator>-&gt;</operator><name>url_list</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>helpf</name><argument_list>(<argument><expr><name><name>global</name><operator>-&gt;</operator><name>errors</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_FAILED_INIT</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>result</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ParameterError</name></type> <name>res</name> <init>= <expr><call><name>parse_args</name><argument_list>(<argument><expr><name>global</name></expr></argument>, <argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>res</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_OK</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>res</name> <operator>==</operator> <name>PARAM_HELP_REQUESTED</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>tool_help</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>(<expr><name>res</name> <operator>==</operator> <name>PARAM_MANUAL_REQUESTED</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>hugehelp</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>(<expr><name>res</name> <operator>==</operator> <name>PARAM_VERSION_INFO_REQUESTED</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>tool_version_info</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>(<expr><name>res</name> <operator>==</operator> <name>PARAM_ENGINES_REQUESTED</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>tool_list_engines</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>(<expr><name>res</name> <operator>==</operator> <name>PARAM_LIBCURL_UNSUPPORTED_PROTOCOL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_UNSUPPORTED_PROTOCOL</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_FAILED_INIT</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_LIBCURL_OPTION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name><name>global</name><operator>-&gt;</operator><name>libcurl</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>easysrc_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>result</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>OperationConfig</name></name> <modifier>*</modifier></type><name>operation</name> <init>= <expr><name><name>global</name><operator>-&gt;</operator><name>first</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CURLSH</name> <modifier>*</modifier></type><name>share</name> <init>= <expr><call><name>curl_share_init</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>share</name></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_LIBCURL_OPTION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name><name>global</name><operator>-&gt;</operator><name>libcurl</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>easysrc_cleanup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>curl_share_setopt</name><argument_list>(<argument><expr><name>share</name></expr></argument>, <argument><expr><name>CURLSHOPT_SHARE</name></expr></argument>, <argument><expr><name>CURL_LOCK_DATA_COOKIE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>curl_share_setopt</name><argument_list>(<argument><expr><name>share</name></expr></argument>, <argument><expr><name>CURLSHOPT_SHARE</name></expr></argument>, <argument><expr><name>CURL_LOCK_DATA_DNS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>curl_share_setopt</name><argument_list>(<argument><expr><name>share</name></expr></argument>, <argument><expr><name>CURLSHOPT_SHARE</name></expr></argument>, <argument><expr><name>CURL_LOCK_DATA_SSL_SESSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>curl_share_setopt</name><argument_list>(<argument><expr><name>share</name></expr></argument>, <argument><expr><name>CURLSHOPT_SHARE</name></expr></argument>, <argument><expr><name>CURL_LOCK_DATA_CONNECT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>curl_share_setopt</name><argument_list>(<argument><expr><name>share</name></expr></argument>, <argument><expr><name>CURLSHOPT_SHARE</name></expr></argument>, <argument><expr><name>CURL_LOCK_DATA_PSL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<do>do <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>get_args</name><argument_list>(<argument><expr><name>operation</name></expr></argument>, <argument><expr><name>count</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>operation</name> <operator>=</operator> <name><name>operation</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

</block_content>}</block> while<condition>(<expr><operator>!</operator><name>result</name> <operator>&amp;&amp;</operator> <name>operation</name></expr>)</condition>;</do>

<expr_stmt><expr><name><name>global</name><operator>-&gt;</operator><name>current</name></name> <operator>=</operator> <name><name>global</name><operator>-&gt;</operator><name>first</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>run_all_transfers</name><argument_list>(<argument><expr><name>global</name></expr></argument>, <argument><expr><name>share</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>curl_share_cleanup</name><argument_list>(<argument><expr><name>share</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_LIBCURL_OPTION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name><name>global</name><operator>-&gt;</operator><name>libcurl</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>easysrc_cleanup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dumpeasysrc</name><argument_list>(<argument><expr><name>global</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>errorf</name><argument_list>(<argument><expr><name>global</name></expr></argument>, <argument><expr><literal type="string">"out of memory\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

</unit>
