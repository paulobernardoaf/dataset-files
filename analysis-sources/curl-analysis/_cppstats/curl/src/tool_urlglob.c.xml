<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\curl-analysis\_cppstats\curl\src\tool_urlglob.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tool_setup.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENABLE_CURLX_PRINTF</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curlx.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tool_cfgable.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tool_doswin.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tool_urlglob.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tool_vms.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memdebug.h"</cpp:file></cpp:include> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLOBERROR</name><parameter_list>(<parameter><type><name>string</name></type></parameter>, <parameter><type><name>column</name></type></parameter>, <parameter><type><name>code</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>glob-&gt;error = string, glob-&gt;pos = column, code</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>glob_fixed</name><parameter_list>(<parameter><decl><type><name>URLGlob</name> <modifier>*</modifier></type><name>glob</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>fixed</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>URLPattern</name> <modifier>*</modifier></type><name>pat</name> <init>= <expr><operator>&amp;</operator><name><name>glob</name><operator>-&gt;</operator><name>pattern</name><index>[<expr><name><name>glob</name><operator>-&gt;</operator><name>size</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>pat</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>UPTSet</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pat</name><operator>-&gt;</operator><name>content</name><operator>.</operator><name>Set</name><operator>.</operator><name>size</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pat</name><operator>-&gt;</operator><name>content</name><operator>.</operator><name>Set</name><operator>.</operator><name>ptr_s</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pat</name><operator>-&gt;</operator><name>globindex</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pat</name><operator>-&gt;</operator><name>content</name><operator>.</operator><name>Set</name><operator>.</operator><name>elements</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>pat</name><operator>-&gt;</operator><name>content</name><operator>.</operator><name>Set</name><operator>.</operator><name>elements</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>GLOBERROR</name><argument_list>(<argument><expr><literal type="string">"out of memory"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>CURLE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>pat</name><operator>-&gt;</operator><name>content</name><operator>.</operator><name>Set</name><operator>.</operator><name>elements</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>pat</name><operator>-&gt;</operator><name>content</name><operator>.</operator><name>Set</name><operator>.</operator><name>elements</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>GLOBERROR</name><argument_list>(<argument><expr><literal type="string">"out of memory"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>CURLE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pat</name><operator>-&gt;</operator><name>content</name><operator>.</operator><name>Set</name><operator>.</operator><name>elements</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>fixed</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pat</name><operator>-&gt;</operator><name>content</name><operator>.</operator><name>Set</name><operator>.</operator><name>elements</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>multiply</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>amount</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>with</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>sum</name> <init>= <expr><operator>*</operator><name>amount</name> <operator>*</operator> <name>with</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>with</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>amount</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>sum</name><operator>/</operator><name>with</name> <operator>!=</operator> <operator>*</operator><name>amount</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><operator>*</operator><name>amount</name> <operator>=</operator> <name>sum</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>glob_set</name><parameter_list>(<parameter><decl><type><name>URLGlob</name> <modifier>*</modifier></type><name>glob</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>patternp</name></decl></parameter>,

<parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>posp</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>amount</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>globindex</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>URLPattern</name> <modifier>*</modifier></type><name>pat</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>done</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name><name>glob</name><operator>-&gt;</operator><name>glob_buffer</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pattern</name> <init>= <expr><operator>*</operator><name>patternp</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>opattern</name> <init>= <expr><name>pattern</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>opos</name> <init>= <expr><operator>*</operator><name>posp</name><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>pat</name> <operator>=</operator> <operator>&amp;</operator><name><name>glob</name><operator>-&gt;</operator><name>pattern</name><index>[<expr><name><name>glob</name><operator>-&gt;</operator><name>size</name></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pat</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>UPTSet</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pat</name><operator>-&gt;</operator><name>content</name><operator>.</operator><name>Set</name><operator>.</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pat</name><operator>-&gt;</operator><name>content</name><operator>.</operator><name>Set</name><operator>.</operator><name>ptr_s</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pat</name><operator>-&gt;</operator><name>content</name><operator>.</operator><name>Set</name><operator>.</operator><name>elements</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pat</name><operator>-&gt;</operator><name>globindex</name></name> <operator>=</operator> <name>globindex</name></expr>;</expr_stmt>

<while>while<condition>(<expr><operator>!</operator><name>done</name></expr>)</condition> <block>{<block_content>

<switch>switch <condition>(<expr><operator>*</operator><name>pattern</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'\0'</literal></expr>:</case> 

<return>return <expr><call><name>GLOBERROR</name><argument_list>(<argument><expr><literal type="string">"unmatched brace"</literal></expr></argument>, <argument><expr><name>opos</name></expr></argument>, <argument><expr><name>CURLE_URL_MALFORMAT</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><literal type="char">'{'</literal></expr>:</case>

<case>case <expr><literal type="char">'['</literal></expr>:</case> 

<return>return <expr><call><name>GLOBERROR</name><argument_list>(<argument><expr><literal type="string">"nested brace"</literal></expr></argument>, <argument><expr><operator>*</operator><name>posp</name></expr></argument>, <argument><expr><name>CURLE_URL_MALFORMAT</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><literal type="char">'}'</literal></expr>:</case> 

<if_stmt><if>if<condition>(<expr><name>opattern</name> <operator>==</operator> <name>pattern</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>GLOBERROR</name><argument_list>(<argument><expr><literal type="string">"empty string within braces"</literal></expr></argument>, <argument><expr><operator>*</operator><name>posp</name></expr></argument>,

<argument><expr><name>CURLE_URL_MALFORMAT</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>multiply</name><argument_list>(<argument><expr><name>amount</name></expr></argument>, <argument><expr><name><name>pat</name><operator>-&gt;</operator><name>content</name><operator>.</operator><name>Set</name><operator>.</operator><name>size</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>GLOBERROR</name><argument_list>(<argument><expr><literal type="string">"range overflow"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>CURLE_URL_MALFORMAT</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<case>case <expr><literal type="char">','</literal></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>buf</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>pat</name><operator>-&gt;</operator><name>content</name><operator>.</operator><name>Set</name><operator>.</operator><name>elements</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>new_arr</name> <init>= <expr><call><name>realloc</name><argument_list>(<argument><expr><name><name>pat</name><operator>-&gt;</operator><name>content</name><operator>.</operator><name>Set</name><operator>.</operator><name>elements</name></name></expr></argument>,

<argument><expr><operator>(</operator><name><name>pat</name><operator>-&gt;</operator><name>content</name><operator>.</operator><name>Set</name><operator>.</operator><name>size</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>new_arr</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>GLOBERROR</name><argument_list>(<argument><expr><literal type="string">"out of memory"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>CURLE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>pat</name><operator>-&gt;</operator><name>content</name><operator>.</operator><name>Set</name><operator>.</operator><name>elements</name></name> <operator>=</operator> <name>new_arr</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>pat</name><operator>-&gt;</operator><name>content</name><operator>.</operator><name>Set</name><operator>.</operator><name>elements</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>pat</name><operator>-&gt;</operator><name>content</name><operator>.</operator><name>Set</name><operator>.</operator><name>elements</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>GLOBERROR</name><argument_list>(<argument><expr><literal type="string">"out of memory"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>CURLE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>pat</name><operator>-&gt;</operator><name>content</name><operator>.</operator><name>Set</name><operator>.</operator><name>elements</name><index>[<expr><name><name>pat</name><operator>-&gt;</operator><name>content</name><operator>.</operator><name>Set</name><operator>.</operator><name>size</name></name></expr>]</index></name> <operator>=</operator>

<call><name>strdup</name><argument_list>(<argument><expr><name><name>glob</name><operator>-&gt;</operator><name>glob_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>pat</name><operator>-&gt;</operator><name>content</name><operator>.</operator><name>Set</name><operator>.</operator><name>elements</name><index>[<expr><name><name>pat</name><operator>-&gt;</operator><name>content</name><operator>.</operator><name>Set</name><operator>.</operator><name>size</name></name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>GLOBERROR</name><argument_list>(<argument><expr><literal type="string">"out of memory"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>CURLE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>++</operator><name><name>pat</name><operator>-&gt;</operator><name>content</name><operator>.</operator><name>Set</name><operator>.</operator><name>size</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>*</operator><name>pattern</name> <operator>==</operator> <literal type="char">'}'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>pattern</name><operator>++</operator></expr>;</expr_stmt> 

<expr_stmt><expr><name>done</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <name><name>glob</name><operator>-&gt;</operator><name>glob_buffer</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>pattern</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><operator>(</operator><operator>*</operator><name>posp</name><operator>)</operator></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">']'</literal></expr>:</case> 

<return>return <expr><call><name>GLOBERROR</name><argument_list>(<argument><expr><literal type="string">"unexpected close bracket"</literal></expr></argument>, <argument><expr><operator>*</operator><name>posp</name></expr></argument>, <argument><expr><name>CURLE_URL_MALFORMAT</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><literal type="char">'\\'</literal></expr>:</case> 

<if_stmt><if>if<condition>(<expr><name><name>pattern</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>++</operator><name>pattern</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><operator>(</operator><operator>*</operator><name>posp</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<default>default:</default>

<expr_stmt><expr><operator>*</operator><name>buf</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>pattern</name><operator>++</operator></expr>;</expr_stmt> 

<expr_stmt><expr><operator>++</operator><operator>(</operator><operator>*</operator><name>posp</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></switch>

</block_content>}</block></while>

<expr_stmt><expr><operator>*</operator><name>patternp</name> <operator>=</operator> <name>pattern</name></expr>;</expr_stmt> 

<return>return <expr><name>CURLE_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>glob_range</name><parameter_list>(<parameter><decl><type><name>URLGlob</name> <modifier>*</modifier></type><name>glob</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>patternp</name></decl></parameter>,

<parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>posp</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>amount</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>globindex</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>URLPattern</name> <modifier>*</modifier></type><name>pat</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pattern</name> <init>= <expr><operator>*</operator><name>patternp</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>

<expr_stmt><expr><name>pat</name> <operator>=</operator> <operator>&amp;</operator><name><name>glob</name><operator>-&gt;</operator><name>pattern</name><index>[<expr><name><name>glob</name><operator>-&gt;</operator><name>size</name></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pat</name><operator>-&gt;</operator><name>globindex</name></name> <operator>=</operator> <name>globindex</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>ISALPHA</name><argument_list>(<argument><expr><operator>*</operator><name>pattern</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name>min_c</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name>max_c</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name>end_c</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>step</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>pat</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>UPTCharRange</name></expr>;</expr_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sscanf</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>, <argument><expr><literal type="string">"%c-%c%c"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>min_c</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>max_c</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>end_c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>end_c</name> <operator>==</operator> <literal type="char">':'</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>endp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>step</name> <operator>=</operator> <call><name>strtoul</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pattern</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>endp</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>errno</name> <operator>||</operator> <operator>&amp;</operator><name><name>pattern</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>==</operator> <name>endp</name> <operator>||</operator> <operator>*</operator><name>endp</name> <operator>!=</operator> <literal type="char">']'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>step</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>pattern</name> <operator>=</operator> <name>endp</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name>end_c</name> <operator>!=</operator> <literal type="char">']'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>pattern</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>posp</name> <operator>+=</operator> <operator>(</operator><name>pattern</name> <operator>-</operator> <operator>*</operator><name>patternp</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>!=</operator> <literal type="number">3</literal> <operator>||</operator> <operator>!</operator><name>step</name> <operator>||</operator> <name>step</name> <operator>&gt;</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name>INT_MAX</name> <operator>||</operator>

<operator>(</operator><name>min_c</name> <operator>==</operator> <name>max_c</name> <operator>&amp;&amp;</operator> <name>step</name> <operator>!=</operator> <literal type="number">1</literal><operator>)</operator> <operator>||</operator>

<operator>(</operator><name>min_c</name> <operator>!=</operator> <name>max_c</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>min_c</name> <operator>&gt;</operator> <name>max_c</name> <operator>||</operator> <name>step</name> <operator>&gt;</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><name>max_c</name> <operator>-</operator> <name>min_c</name><operator>)</operator> <operator>||</operator>

<operator>(</operator><name>max_c</name> <operator>-</operator> <name>min_c</name><operator>)</operator> <operator>&gt;</operator> <operator>(</operator><literal type="char">'z'</literal> <operator>-</operator> <literal type="char">'a'</literal><operator>)</operator><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>GLOBERROR</name><argument_list>(<argument><expr><literal type="string">"bad range"</literal></expr></argument>, <argument><expr><operator>*</operator><name>posp</name></expr></argument>, <argument><expr><name>CURLE_URL_MALFORMAT</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>pat</name><operator>-&gt;</operator><name>content</name><operator>.</operator><name>CharRange</name><operator>.</operator><name>step</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>step</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pat</name><operator>-&gt;</operator><name>content</name><operator>.</operator><name>CharRange</name><operator>.</operator><name>ptr_c</name></name> <operator>=</operator> <name><name>pat</name><operator>-&gt;</operator><name>content</name><operator>.</operator><name>CharRange</name><operator>.</operator><name>min_c</name></name> <operator>=</operator> <name>min_c</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pat</name><operator>-&gt;</operator><name>content</name><operator>.</operator><name>CharRange</name><operator>.</operator><name>max_c</name></name> <operator>=</operator> <name>max_c</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>multiply</name><argument_list>(<argument><expr><name>amount</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name><name>pat</name><operator>-&gt;</operator><name>content</name><operator>.</operator><name>CharRange</name><operator>.</operator><name>max_c</name></name> <operator>-</operator>

<name><name>pat</name><operator>-&gt;</operator><name>content</name><operator>.</operator><name>CharRange</name><operator>.</operator><name>min_c</name></name><operator>)</operator> <operator>/</operator>

<name><name>pat</name><operator>-&gt;</operator><name>content</name><operator>.</operator><name>CharRange</name><operator>.</operator><name>step</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>GLOBERROR</name><argument_list>(<argument><expr><literal type="string">"range overflow"</literal></expr></argument>, <argument><expr><operator>*</operator><name>posp</name></expr></argument>, <argument><expr><name>CURLE_URL_MALFORMAT</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><call><name>ISDIGIT</name><argument_list>(<argument><expr><operator>*</operator><name>pattern</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>min_n</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>max_n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>step_n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>endp</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>pat</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>UPTNumRange</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pat</name><operator>-&gt;</operator><name>content</name><operator>.</operator><name>NumRange</name><operator>.</operator><name>padlength</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>*</operator><name>pattern</name> <operator>==</operator> <literal type="char">'0'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <name>pattern</name></expr>;</expr_stmt>

<while>while<condition>(<expr><call><name>ISDIGIT</name><argument_list>(<argument><expr><operator>*</operator><name>c</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>c</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name><name>pat</name><operator>-&gt;</operator><name>content</name><operator>.</operator><name>NumRange</name><operator>.</operator><name>padlength</name></name></expr>;</expr_stmt> 

</block_content>}</block></while>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>min_n</name> <operator>=</operator> <call><name>strtoul</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>endp</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>errno</name> <operator>||</operator> <operator>(</operator><name>endp</name> <operator>==</operator> <name>pattern</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>endp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>*</operator><name>endp</name> <operator>!=</operator> <literal type="char">'-'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>endp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>pattern</name> <operator>=</operator> <name>endp</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<while>while<condition>(<expr><operator>*</operator><name>pattern</name> <operator>&amp;&amp;</operator> <call><name>ISBLANK</name><argument_list>(<argument><expr><operator>*</operator><name>pattern</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>pattern</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>ISDIGIT</name><argument_list>(<argument><expr><operator>*</operator><name>pattern</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>endp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>max_n</name> <operator>=</operator> <call><name>strtoul</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>endp</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>errno</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>endp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>(<expr><operator>*</operator><name>endp</name> <operator>==</operator> <literal type="char">':'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>pattern</name> <operator>=</operator> <name>endp</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>step_n</name> <operator>=</operator> <call><name>strtoul</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>endp</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>errno</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>endp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>step_n</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name>endp</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>endp</name> <operator>==</operator> <literal type="char">']'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>pattern</name> <operator>=</operator> <name>endp</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>endp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<label><name>fail</name>:</label>

<expr_stmt><expr><operator>*</operator><name>posp</name> <operator>+=</operator> <operator>(</operator><name>pattern</name> <operator>-</operator> <operator>*</operator><name>patternp</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>endp</name> <operator>||</operator> <operator>!</operator><name>step_n</name> <operator>||</operator>

<operator>(</operator><name>min_n</name> <operator>==</operator> <name>max_n</name> <operator>&amp;&amp;</operator> <name>step_n</name> <operator>!=</operator> <literal type="number">1</literal><operator>)</operator> <operator>||</operator>

<operator>(</operator><name>min_n</name> <operator>!=</operator> <name>max_n</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>min_n</name> <operator>&gt;</operator> <name>max_n</name> <operator>||</operator> <name>step_n</name> <operator>&gt;</operator> <operator>(</operator><name>max_n</name> <operator>-</operator> <name>min_n</name><operator>)</operator><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>GLOBERROR</name><argument_list>(<argument><expr><literal type="string">"bad range"</literal></expr></argument>, <argument><expr><operator>*</operator><name>posp</name></expr></argument>, <argument><expr><name>CURLE_URL_MALFORMAT</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>pat</name><operator>-&gt;</operator><name>content</name><operator>.</operator><name>NumRange</name><operator>.</operator><name>ptr_n</name></name> <operator>=</operator> <name><name>pat</name><operator>-&gt;</operator><name>content</name><operator>.</operator><name>NumRange</name><operator>.</operator><name>min_n</name></name> <operator>=</operator> <name>min_n</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pat</name><operator>-&gt;</operator><name>content</name><operator>.</operator><name>NumRange</name><operator>.</operator><name>max_n</name></name> <operator>=</operator> <name>max_n</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pat</name><operator>-&gt;</operator><name>content</name><operator>.</operator><name>NumRange</name><operator>.</operator><name>step</name></name> <operator>=</operator> <name>step_n</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>multiply</name><argument_list>(<argument><expr><name>amount</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name><name>pat</name><operator>-&gt;</operator><name>content</name><operator>.</operator><name>NumRange</name><operator>.</operator><name>max_n</name></name> <operator>-</operator>

<name><name>pat</name><operator>-&gt;</operator><name>content</name><operator>.</operator><name>NumRange</name><operator>.</operator><name>min_n</name></name><operator>)</operator> <operator>/</operator>

<name><name>pat</name><operator>-&gt;</operator><name>content</name><operator>.</operator><name>NumRange</name><operator>.</operator><name>step</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>GLOBERROR</name><argument_list>(<argument><expr><literal type="string">"range overflow"</literal></expr></argument>, <argument><expr><operator>*</operator><name>posp</name></expr></argument>, <argument><expr><name>CURLE_URL_MALFORMAT</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><call><name>GLOBERROR</name><argument_list>(<argument><expr><literal type="string">"bad range specification"</literal></expr></argument>, <argument><expr><operator>*</operator><name>posp</name></expr></argument>, <argument><expr><name>CURLE_URL_MALFORMAT</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>

<expr_stmt><expr><operator>*</operator><name>patternp</name> <operator>=</operator> <name>pattern</name></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>peek_ipv6</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>skip</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>colons</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>str</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>!=</operator> <literal type="char">'['</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for<control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name>c</name> <init>= <expr><name><name>str</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><call><name>ISALNUM</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'.'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'%'</literal></expr>)</condition> <block>{<block_content>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">':'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>colons</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">']'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>skip</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<return>return <expr><ternary><condition><expr><name>colons</name> <operator>&gt;=</operator> <literal type="number">2</literal></expr> ?</condition><then> <expr><name>TRUE</name></expr> </then><else>: <expr><name>FALSE</name></expr></else></ternary></expr>;</return>

</block_content>}</block></if>

<else>else <block>{<block_content>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>glob_parse</name><parameter_list>(<parameter><decl><type><name>URLGlob</name> <modifier>*</modifier></type><name>glob</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>pattern</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>pos</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>amount</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>res</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>globindex</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<expr_stmt><expr><operator>*</operator><name>amount</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<while>while<condition>(<expr><operator>*</operator><name>pattern</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>res</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name><name>glob</name><operator>-&gt;</operator><name>glob_buffer</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>sublen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while<condition>(<expr><operator>*</operator><name>pattern</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>pattern</name> <operator>!=</operator> <literal type="char">'{'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>*</operator><name>pattern</name> <operator>==</operator> <literal type="char">'['</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>skip</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>peek_ipv6</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>skip</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>pattern</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">']'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>skip</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>skip</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>pattern</name></expr></argument>, <argument><expr><name>skip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>buf</name> <operator>+=</operator> <name>skip</name></expr>;</expr_stmt>

<expr_stmt><expr><name>pattern</name> <operator>+=</operator> <name>skip</name></expr>;</expr_stmt>

<expr_stmt><expr><name>sublen</name> <operator>+=</operator> <name>skip</name></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>*</operator><name>pattern</name> <operator>==</operator> <literal type="char">'}'</literal> <operator>||</operator> <operator>*</operator><name>pattern</name> <operator>==</operator> <literal type="char">']'</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>GLOBERROR</name><argument_list>(<argument><expr><literal type="string">"unmatched close brace/bracket"</literal></expr></argument>, <argument><expr><name>pos</name></expr></argument>,

<argument><expr><name>CURLE_URL_MALFORMAT</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>*</operator><name>pattern</name> <operator>==</operator> <literal type="char">'\\'</literal> <operator>&amp;&amp;</operator>

<operator>(</operator><operator>*</operator><operator>(</operator><name>pattern</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="char">'{'</literal> <operator>||</operator> <operator>*</operator><operator>(</operator><name>pattern</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="char">'['</literal> <operator>||</operator>

<operator>*</operator><operator>(</operator><name>pattern</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="char">'}'</literal> <operator>||</operator> <operator>*</operator><operator>(</operator><name>pattern</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="char">']'</literal><operator>)</operator></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><operator>++</operator><name>pattern</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>pos</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>buf</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>pattern</name><operator>++</operator></expr>;</expr_stmt> 

<expr_stmt><expr><operator>++</operator><name>pos</name></expr>;</expr_stmt>

<expr_stmt><expr><name>sublen</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if<condition>(<expr><name>sublen</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>buf</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>glob_fixed</name><argument_list>(<argument><expr><name>glob</name></expr></argument>, <argument><expr><name><name>glob</name><operator>-&gt;</operator><name>glob_buffer</name></name></expr></argument>, <argument><expr><name>sublen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<switch>switch <condition>(<expr><operator>*</operator><name>pattern</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'\0'</literal></expr>:</case> 

<break>break;</break>

<case>case <expr><literal type="char">'{'</literal></expr>:</case>

<expr_stmt><expr><name>pattern</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>pos</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>glob_set</name><argument_list>(<argument><expr><name>glob</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pattern</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>, <argument><expr><name>amount</name></expr></argument>, <argument><expr><name>globindex</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'['</literal></expr>:</case>

<expr_stmt><expr><name>pattern</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>pos</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>glob_range</name><argument_list>(<argument><expr><name>glob</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pattern</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>, <argument><expr><name>amount</name></expr></argument>, <argument><expr><name>globindex</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>++</operator><name><name>glob</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;=</operator> <name>GLOB_PATTERN_NUM</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>GLOBERROR</name><argument_list>(<argument><expr><literal type="string">"too many globs"</literal></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><name>CURLE_URL_MALFORMAT</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></while>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>CURLcode</name></type> <name>glob_url</name><parameter_list>(<parameter><decl><type><name>URLGlob</name> <modifier>*</modifier><modifier>*</modifier></type><name>glob</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>url</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>urlnum</name></decl></parameter>,

<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>URLGlob</name> <modifier>*</modifier></type><name>glob_expand</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>amount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>glob_buffer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>res</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>glob</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>glob_buffer</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>glob_buffer</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>glob_buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>glob_expand</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>URLGlob</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>glob_expand</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name>glob_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>glob_expand</name><operator>-&gt;</operator><name>urllen</name></name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>glob_expand</name><operator>-&gt;</operator><name>glob_buffer</name></name> <operator>=</operator> <name>glob_buffer</name></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>glob_parse</name><argument_list>(<argument><expr><name>glob_expand</name></expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>amount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>res</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>urlnum</name> <operator>=</operator> <name>amount</name></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>error</name> <operator>&amp;&amp;</operator> <name><name>glob_expand</name><operator>-&gt;</operator><name>error</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>text</name><index>[<expr><literal type="number">512</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>t</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>glob_expand</name><operator>-&gt;</operator><name>pos</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msnprintf</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s in URL position %zu:\n%s\n%*s^"</literal></expr></argument>,

<argument><expr><name><name>glob_expand</name><operator>-&gt;</operator><name>error</name></name></expr></argument>,

<argument><expr><name><name>glob_expand</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr><name><name>glob_expand</name><operator>-&gt;</operator><name>pos</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <name>text</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>t</name> <operator>=</operator> <name><name>glob_expand</name><operator>-&gt;</operator><name>error</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>error</name></expr></argument>, <argument><expr><literal type="string">"curl: (%d) %s\n"</literal></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>glob_cleanup</name><argument_list>(<argument><expr><name>glob_expand</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>urlnum</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><operator>*</operator><name>glob</name> <operator>=</operator> <name>glob_expand</name></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>glob_cleanup</name><parameter_list>(<parameter><decl><type><name>URLGlob</name><modifier>*</modifier></type> <name>glob</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>elem</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>glob</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>glob</name><operator>-&gt;</operator><name>size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>glob</name><operator>-&gt;</operator><name>pattern</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>UPTSet</name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>glob</name><operator>-&gt;</operator><name>pattern</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>content</name><operator>.</operator><name>Set</name><operator>.</operator><name>elements</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<for>for<control>(<init><expr><name>elem</name> <operator>=</operator> <name><name>glob</name><operator>-&gt;</operator><name>pattern</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>content</name><operator>.</operator><name>Set</name><operator>.</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</init>

<condition><expr><name>elem</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition>

<incr><expr><operator>--</operator><name>elem</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>glob</name><operator>-&gt;</operator><name>pattern</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>content</name><operator>.</operator><name>Set</name><operator>.</operator><name>elements</name><index>[<expr><name>elem</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>glob</name><operator>-&gt;</operator><name>pattern</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>content</name><operator>.</operator><name>Set</name><operator>.</operator><name>elements</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>glob</name><operator>-&gt;</operator><name>glob_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name>glob</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>CURLcode</name></type> <name>glob_next_url</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>globbed</name></decl></parameter>, <parameter><decl><type><name>URLGlob</name> <modifier>*</modifier></type><name>glob</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>URLPattern</name> <modifier>*</modifier></type><name>pat</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>buflen</name> <init>= <expr><name><name>glob</name><operator>-&gt;</operator><name>urllen</name></name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name><name>glob</name><operator>-&gt;</operator><name>glob_buffer</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>globbed</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>glob</name><operator>-&gt;</operator><name>beenhere</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>glob</name><operator>-&gt;</operator><name>beenhere</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>carry</name> <init>= <expr><name>TRUE</name></expr></init></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>carry</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>i</name> <operator>&lt;</operator> <name><name>glob</name><operator>-&gt;</operator><name>size</name></name><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>carry</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>pat</name> <operator>=</operator> <operator>&amp;</operator><name><name>glob</name><operator>-&gt;</operator><name>pattern</name><index>[<expr><name><name>glob</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>i</name></expr>]</index></name></expr>;</expr_stmt>

<switch>switch<condition>(<expr><name><name>pat</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>UPTSet</name></expr>:</case>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>pat</name><operator>-&gt;</operator><name>content</name><operator>.</operator><name>Set</name><operator>.</operator><name>elements</name></name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><operator>++</operator><name><name>pat</name><operator>-&gt;</operator><name>content</name><operator>.</operator><name>Set</name><operator>.</operator><name>ptr_s</name></name> <operator>==</operator> <name><name>pat</name><operator>-&gt;</operator><name>content</name><operator>.</operator><name>Set</name><operator>.</operator><name>size</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pat</name><operator>-&gt;</operator><name>content</name><operator>.</operator><name>Set</name><operator>.</operator><name>ptr_s</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>carry</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>UPTCharRange</name></expr>:</case>

<expr_stmt><expr><name><name>pat</name><operator>-&gt;</operator><name>content</name><operator>.</operator><name>CharRange</name><operator>.</operator><name>ptr_c</name></name> <operator>=</operator>

<operator>(</operator><name>char</name><operator>)</operator><operator>(</operator><name><name>pat</name><operator>-&gt;</operator><name>content</name><operator>.</operator><name>CharRange</name><operator>.</operator><name>step</name></name> <operator>+</operator>

<operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name><name>pat</name><operator>-&gt;</operator><name>content</name><operator>.</operator><name>CharRange</name><operator>.</operator><name>ptr_c</name></name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>pat</name><operator>-&gt;</operator><name>content</name><operator>.</operator><name>CharRange</name><operator>.</operator><name>ptr_c</name></name> <operator>&gt;</operator> <name><name>pat</name><operator>-&gt;</operator><name>content</name><operator>.</operator><name>CharRange</name><operator>.</operator><name>max_c</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pat</name><operator>-&gt;</operator><name>content</name><operator>.</operator><name>CharRange</name><operator>.</operator><name>ptr_c</name></name> <operator>=</operator> <name><name>pat</name><operator>-&gt;</operator><name>content</name><operator>.</operator><name>CharRange</name><operator>.</operator><name>min_c</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>carry</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>UPTNumRange</name></expr>:</case>

<expr_stmt><expr><name><name>pat</name><operator>-&gt;</operator><name>content</name><operator>.</operator><name>NumRange</name><operator>.</operator><name>ptr_n</name></name> <operator>+=</operator> <name><name>pat</name><operator>-&gt;</operator><name>content</name><operator>.</operator><name>NumRange</name><operator>.</operator><name>step</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>pat</name><operator>-&gt;</operator><name>content</name><operator>.</operator><name>NumRange</name><operator>.</operator><name>ptr_n</name></name> <operator>&gt;</operator> <name><name>pat</name><operator>-&gt;</operator><name>content</name><operator>.</operator><name>NumRange</name><operator>.</operator><name>max_n</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pat</name><operator>-&gt;</operator><name>content</name><operator>.</operator><name>NumRange</name><operator>.</operator><name>ptr_n</name></name> <operator>=</operator> <name><name>pat</name><operator>-&gt;</operator><name>content</name><operator>.</operator><name>NumRange</name><operator>.</operator><name>min_n</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>carry</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"internal error: invalid pattern type (%d)\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>pat</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_FAILED_INIT</name></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></for>

<if_stmt><if>if<condition>(<expr><name>carry</name></expr>)</condition> <block>{<block_content> 

<return>return <expr><name>CURLE_OK</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>glob</name><operator>-&gt;</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>pat</name> <operator>=</operator> <operator>&amp;</operator><name><name>glob</name><operator>-&gt;</operator><name>pattern</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<switch>switch<condition>(<expr><name><name>pat</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>UPTSet</name></expr>:</case>

<if_stmt><if>if<condition>(<expr><name><name>pat</name><operator>-&gt;</operator><name>content</name><operator>.</operator><name>Set</name><operator>.</operator><name>elements</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msnprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>,

<argument><expr><name><name>pat</name><operator>-&gt;</operator><name>content</name><operator>.</operator><name>Set</name><operator>.</operator><name>elements</name><index>[<expr><name><name>pat</name><operator>-&gt;</operator><name>content</name><operator>.</operator><name>Set</name><operator>.</operator><name>ptr_s</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>buf</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>

<expr_stmt><expr><name>buflen</name> <operator>-=</operator> <name>len</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>UPTCharRange</name></expr>:</case>

<if_stmt><if>if<condition>(<expr><name>buflen</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>buf</name><operator>++</operator> <operator>=</operator> <name><name>pat</name><operator>-&gt;</operator><name>content</name><operator>.</operator><name>CharRange</name><operator>.</operator><name>ptr_c</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>buf</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>buflen</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>UPTNumRange</name></expr>:</case>

<expr_stmt><expr><call><name>msnprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"%0*lu"</literal></expr></argument>,

<argument><expr><name><name>pat</name><operator>-&gt;</operator><name>content</name><operator>.</operator><name>NumRange</name><operator>.</operator><name>padlength</name></name></expr></argument>,

<argument><expr><name><name>pat</name><operator>-&gt;</operator><name>content</name><operator>.</operator><name>NumRange</name><operator>.</operator><name>ptr_n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>buf</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>

<expr_stmt><expr><name>buflen</name> <operator>-=</operator> <name>len</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"internal error: invalid pattern type (%d)\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>pat</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_FAILED_INIT</name></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></for>

<expr_stmt><expr><operator>*</operator><name>globbed</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name><name>glob</name><operator>-&gt;</operator><name>glob_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>*</operator><name>globbed</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>CURLcode</name></type> <name>glob_match_url</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>result</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>URLGlob</name> <modifier>*</modifier></type><name>glob</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>target</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>allocsize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>numbuf</name><index>[<expr><literal type="number">18</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>appendthis</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>appendlen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>stringlen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>result</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>allocsize</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name>target</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>allocsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>target</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>

<while>while<condition>(<expr><operator>*</operator><name>filename</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>*</operator><name>filename</name> <operator>==</operator> <literal type="char">'#'</literal> <operator>&amp;&amp;</operator> <call><name>ISDIGIT</name><argument_list>(<argument><expr><name><name>filename</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name>filename</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>num</name> <init>= <expr><call><name>strtoul</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>filename</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>filename</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>URLPattern</name> <modifier>*</modifier></type><name>pat</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>num</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>num</name> <operator>&lt;</operator> <name><name>glob</name><operator>-&gt;</operator><name>size</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>num</name><operator>--</operator></expr>;</expr_stmt> 

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>glob</name><operator>-&gt;</operator><name>size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>glob</name><operator>-&gt;</operator><name>pattern</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>globindex</name> <operator>==</operator> <operator>(</operator><name>int</name><operator>)</operator><name>num</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>pat</name> <operator>=</operator> <operator>&amp;</operator><name><name>glob</name><operator>-&gt;</operator><name>pattern</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>pat</name></expr>)</condition> <block>{<block_content>

<switch>switch<condition>(<expr><name><name>pat</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>UPTSet</name></expr>:</case>

<if_stmt><if>if<condition>(<expr><name><name>pat</name><operator>-&gt;</operator><name>content</name><operator>.</operator><name>Set</name><operator>.</operator><name>elements</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>appendthis</name> <operator>=</operator> <name><name>pat</name><operator>-&gt;</operator><name>content</name><operator>.</operator><name>Set</name><operator>.</operator><name>elements</name><index>[<expr><name><name>pat</name><operator>-&gt;</operator><name>content</name><operator>.</operator><name>Set</name><operator>.</operator><name>ptr_s</name></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>appendlen</name> <operator>=</operator>

<call><name>strlen</name><argument_list>(<argument><expr><name><name>pat</name><operator>-&gt;</operator><name>content</name><operator>.</operator><name>Set</name><operator>.</operator><name>elements</name><index>[<expr><name><name>pat</name><operator>-&gt;</operator><name>content</name><operator>.</operator><name>Set</name><operator>.</operator><name>ptr_s</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>UPTCharRange</name></expr>:</case>

<expr_stmt><expr><name><name>numbuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>pat</name><operator>-&gt;</operator><name>content</name><operator>.</operator><name>CharRange</name><operator>.</operator><name>ptr_c</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>numbuf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>appendthis</name> <operator>=</operator> <name>numbuf</name></expr>;</expr_stmt>

<expr_stmt><expr><name>appendlen</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>UPTNumRange</name></expr>:</case>

<expr_stmt><expr><call><name>msnprintf</name><argument_list>(<argument><expr><name>numbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>numbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%0*lu"</literal></expr></argument>,

<argument><expr><name><name>pat</name><operator>-&gt;</operator><name>content</name><operator>.</operator><name>NumRange</name><operator>.</operator><name>padlength</name></name></expr></argument>,

<argument><expr><name><name>pat</name><operator>-&gt;</operator><name>content</name><operator>.</operator><name>NumRange</name><operator>.</operator><name>ptr_n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>appendthis</name> <operator>=</operator> <name>numbuf</name></expr>;</expr_stmt>

<expr_stmt><expr><name>appendlen</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>numbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"internal error: invalid pattern type (%d)\n"</literal></expr></argument>,

<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>pat</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_FAILED_INIT</name></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>filename</name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>

<expr_stmt><expr><name>appendthis</name> <operator>=</operator> <name>filename</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>appendlen</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>appendthis</name> <operator>=</operator> <name>filename</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>appendlen</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name>appendlen</name> <operator>+</operator> <name>stringlen</name> <operator>&gt;=</operator> <name>allocsize</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>newstr</name></decl>;</decl_stmt>

<expr_stmt><expr><name>allocsize</name> <operator>=</operator> <operator>(</operator><name>appendlen</name> <operator>+</operator> <name>stringlen</name><operator>)</operator> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>newstr</name> <operator>=</operator> <call><name>realloc</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><name>allocsize</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>newstr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>target</name> <operator>=</operator> <name>newstr</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>target</name><index>[<expr><name>stringlen</name></expr>]</index></name></expr></argument>, <argument><expr><name>appendthis</name></expr></argument>, <argument><expr><name>appendlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>stringlen</name> <operator>+=</operator> <name>appendlen</name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name><name>target</name><index>[<expr><name>stringlen</name></expr>]</index></name><operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSDOS</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>sanitized</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SANITIZEcode</name></type> <name>sc</name> <init>= <expr><call><name>sanitize_file_name</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sanitized</name></expr></argument>, <argument><expr><name>target</name></expr></argument>,

<argument><expr><operator>(</operator><name>SANITIZE_ALLOW_PATH</name> <operator>|</operator>

<name>SANITIZE_ALLOW_RESERVED</name><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>sc</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_URL_MALFORMAT</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>target</name> <operator>=</operator> <name>sanitized</name></expr>;</expr_stmt>

</block_content>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<expr_stmt><expr><operator>*</operator><name>result</name> <operator>=</operator> <name>target</name></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

</block_content>}</block></function>

</unit>
