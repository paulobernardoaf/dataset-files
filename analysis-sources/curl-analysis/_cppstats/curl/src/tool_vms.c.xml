<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\curl-analysis\_cppstats\curl\src\tool_vms.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tool_setup.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VMS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__DECC</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__VAX</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__CRTL_VER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>__CRTL_VER</name> <operator>&gt;=</operator> <literal type="number">70301000</literal><operator>)</operator></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unixlib.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENABLE_CURLX_PRINTF</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curlx.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curlmsg_vms.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tool_vms.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memdebug.h"</cpp:file></cpp:include> 

<function_decl><type><name>void</name></type> <name>decc$__posix_exit</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>__status</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>decc$exit</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>__status</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>vms_shell</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>is_vms_shell</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>shell</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>vms_shell</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>vms_shell</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>shell</name> <operator>=</operator> <call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"SHELL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>shell</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>vms_shell</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>shell</name></expr></argument>, <argument><expr><literal type="string">"DCL"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>vms_shell</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>vms_shell</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>vms_special_exit</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>code</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>vms_show</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>vms_code</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__CRTL_VER</name> <operator>&gt;=</operator> <literal type="number">70000000</literal></expr></cpp:if>

<if_stmt><if>if<condition>(<expr><call><name>is_vms_shell</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>decc$__posix_exit</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if<condition>(<expr><name>code</name> <operator>&gt;</operator> <name>CURL_LAST</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>vms_code</name> <operator>=</operator> <name>CURL_LAST</name></expr>;</expr_stmt> 

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>vms_code</name> <operator>=</operator> <name><name>vms_cond</name><index>[<expr><name>code</name></expr>]</index></name> <operator>|</operator> <name>vms_show</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>decc$exit</name><argument_list>(<argument><expr><name>vms_code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__DECC</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__VAX</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__CRTL_VER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>__CRTL_VER</name> <operator>&gt;=</operator> <literal type="number">70301000</literal><operator>)</operator></expr></cpp:if>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>value</name></decl>;</decl_stmt>

}</block></struct></type> <name>decc_feat_t</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>decc_feat_t</name></type> <name><name>decc_feat_array</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"DECC$ARGV_PARSE_STYLE"</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"DECC$EFS_CASE_PRESERVE"</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"DECC$EFS_CHARSET"</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><block>{ <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>decc_init_done</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>decc_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>feat_index</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>feat_value</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>feat_value_max</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>feat_value_min</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sts</name></decl>;</decl_stmt>

<expr_stmt><expr><name>decc_init_done</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>decc_feat_array</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>feat_index</name> <operator>=</operator> <call><name>decc$feature_get_index</name><argument_list>(<argument><expr><name><name>decc_feat_array</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>feat_index</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>feat_value</name> <operator>=</operator> <call><name>decc$feature_get_value</name><argument_list>(<argument><expr><name>feat_index</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>feat_value_min</name> <operator>=</operator> <call><name>decc$feature_get_value</name><argument_list>(<argument><expr><name>feat_index</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>feat_value_max</name> <operator>=</operator> <call><name>decc$feature_get_value</name><argument_list>(<argument><expr><name>feat_index</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>decc_feat_array</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>value</name> <operator>&gt;=</operator> <name>feat_value_min</name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>decc_feat_array</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>value</name> <operator>&lt;=</operator> <name>feat_value_max</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>feat_value</name> <operator>!=</operator> <name><name>decc_feat_array</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>value</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>sts</name> <operator>=</operator> <call><name>decc$feature_set_value</name><argument_list>(<argument><expr><name>feat_index</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,

<argument><expr><name><name>decc_feat_array</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" INVALID DECC FEATURE VALUE, %d: %d &lt;= %s &lt;= %d.\n"</literal></expr></argument>,

<argument><expr><name>feat_value</name></expr></argument>,

<argument><expr><name>feat_value_min</name></expr></argument>, <argument><expr><name><name>decc_feat_array</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name>feat_value_max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" UNKNOWN DECC FEATURE: %s.\n"</literal></expr></argument>, <argument><expr><name><name>decc_feat_array</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>nostandard</name></cpp:pragma>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>extern_model</name> <name>save</name></cpp:pragma>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>extern_model</name> <name>strict_refdef</name> <cpp:literal>"LIB$INITIALIZ"</cpp:literal> <name>2</name><name>,</name> <name>nopic</name><name>,</name> <name>nowrt</name></cpp:pragma>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name><name>spare</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>extern_model</name> <name>strict_refdef</name> <cpp:literal>"LIB$INITIALIZE"</cpp:literal> <name>2</name><name>,</name> <name>nopic</name><name>,</name> <name>nowrt</name></cpp:pragma>

<expr_stmt><expr><call><call><name>void</name> <argument_list>(<argument><expr><operator>*</operator><specifier>const</specifier> <name>x_decc_init</name></expr></argument>)</argument_list></call><argument_list>()</argument_list></call> <operator>=</operator> <name>decc_init</name></expr>;</expr_stmt>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>extern_model</name> <name>restore</name></cpp:pragma>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>extern_model</name> <name>save</name></cpp:pragma>

<function_decl><type><name>int</name></type> <name>LIB$INITIALIZE</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>extern_model</name> <name>strict_refdef</name></cpp:pragma>

<decl_stmt><decl><type><name>int</name></type> <name>dmy_lib$initialize</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <name>LIB$INITIALIZE</name></expr></init></decl>;</decl_stmt>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>extern_model</name> <name>restore</name></cpp:pragma>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>standard</name></cpp:pragma>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</unit>
