<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\curl-analysis\_cppstats\curl\src\tool_metalink.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tool_setup.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_METALINK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_FCNTL_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>HAVE_NSS_CONTEXT</name></cpp:undef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_OPENSSL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;openssl/md5.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;openssl/sha.h&gt;</cpp:file></cpp:include>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_GNUTLS_NETTLE</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;nettle/md5.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;nettle/sha.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MD5_CTX</name></cpp:macro> <cpp:value>struct md5_ctx</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHA_CTX</name></cpp:macro> <cpp:value>struct sha1_ctx</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHA256_CTX</name></cpp:macro> <cpp:value>struct sha256_ctx</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_GNUTLS</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;gcrypt.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MD5_CTX</name></cpp:macro> <cpp:value>gcry_md_hd_t</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHA_CTX</name></cpp:macro> <cpp:value>gcry_md_hd_t</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHA256_CTX</name></cpp:macro> <cpp:value>gcry_md_hd_t</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_NSS</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;nss.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pk11pub.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MD5_CTX</name></cpp:macro> <cpp:value>void *</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHA_CTX</name></cpp:macro> <cpp:value>void *</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHA256_CTX</name></cpp:macro> <cpp:value>void *</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_NSS_CONTEXT</name></cpp:macro></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>NSSInitContext</name> <modifier>*</modifier></type><name>nss_context</name></decl>;</decl_stmt>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>__MAC_OS_X_VERSION_MAX_ALLOWED</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>__MAC_OS_X_VERSION_MAX_ALLOWED</name> <operator>&gt;=</operator> <literal type="number">1040</literal><operator>)</operator><operator>)</operator> <operator>||</operator> <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>__IPHONE_OS_VERSION_MAX_ALLOWED</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>__IPHONE_OS_VERSION_MAX_ALLOWED</name> <operator>&gt;=</operator> <literal type="number">20000</literal><operator>)</operator><operator>)</operator></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMMON_DIGEST_FOR_OPENSSL</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;CommonCrypto/CommonDigest.h&gt;</cpp:file></cpp:include>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_WIN32_CRYPTO</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;wincrypt.h&gt;</cpp:file></cpp:include>

<struct>struct <name>win32_crypto_hash</name> <block>{

<decl_stmt><decl><type><name>HCRYPTPROV</name></type> <name>hCryptProv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HCRYPTHASH</name></type> <name>hHash</name></decl>;</decl_stmt>

}</block>;</struct>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ALG_SID_SHA_256</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALG_SID_SHA_256</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CALG_SHA_256</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CALG_SHA_256</name></cpp:macro> <cpp:value>(ALG_CLASS_HASH | ALG_TYPE_ANY | ALG_SID_SHA_256)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MD5_CTX</name></cpp:macro> <cpp:value>struct win32_crypto_hash</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHA_CTX</name></cpp:macro> <cpp:value>struct win32_crypto_hash</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHA256_CTX</name></cpp:macro> <cpp:value>struct win32_crypto_hash</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"Can't compile METALINK support without a crypto library."</cpp:literal></cpp:error>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENABLE_CURLX_PRINTF</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curlx.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tool_getparam.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tool_paramhlp.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tool_cfgable.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tool_metalink.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tool_operate.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tool_msgs.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memdebug.h"</cpp:file></cpp:include> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GetStr</name><parameter_list>(<parameter><type><name>str</name></type></parameter>,<parameter><type><name>val</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if(*(str)) { free(*(str)); *(str) = NULL; } if((val)) *(str) = strdup((val)); if(!(val)) return PARAM_NO_MEM; } while(0)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_OPENSSL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_GNUTLS_NETTLE</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<function><type><specifier>static</specifier> <name>int</name></type> <name>MD5_Init</name><parameter_list>(<parameter><decl><type><name>MD5_CTX</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>md5_init</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>MD5_Update</name><parameter_list>(<parameter><decl><type><name>MD5_CTX</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>inputLen</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>md5_update</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>inputLen</name></expr></argument>, <argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>MD5_Final</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name></type> <name><name>digest</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>MD5_CTX</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>md5_digest</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>digest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>SHA1_Init</name><parameter_list>(<parameter><decl><type><name>SHA_CTX</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>sha1_init</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>SHA1_Update</name><parameter_list>(<parameter><decl><type><name>SHA_CTX</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>inputLen</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>sha1_update</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>inputLen</name></expr></argument>, <argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>SHA1_Final</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name></type> <name><name>digest</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>SHA_CTX</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>sha1_digest</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><name>digest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>SHA256_Init</name><parameter_list>(<parameter><decl><type><name>SHA256_CTX</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>sha256_init</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>SHA256_Update</name><parameter_list>(<parameter><decl><type><name>SHA256_CTX</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>inputLen</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>sha256_update</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>inputLen</name></expr></argument>, <argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>SHA256_Final</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name></type> <name><name>digest</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>SHA256_CTX</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>sha256_digest</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>digest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_GNUTLS</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<function><type><specifier>static</specifier> <name>int</name></type> <name>MD5_Init</name><parameter_list>(<parameter><decl><type><name>MD5_CTX</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>gcry_md_open</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>GCRY_MD_MD5</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>MD5_Update</name><parameter_list>(<parameter><decl><type><name>MD5_CTX</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>inputLen</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>gcry_md_write</name><argument_list>(<argument><expr><operator>*</operator><name>ctx</name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><name>inputLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>MD5_Final</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name></type> <name><name>digest</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>MD5_CTX</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>digest</name></expr></argument>, <argument><expr><call><name>gcry_md_read</name><argument_list>(<argument><expr><operator>*</operator><name>ctx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gcry_md_close</name><argument_list>(<argument><expr><operator>*</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>SHA1_Init</name><parameter_list>(<parameter><decl><type><name>SHA_CTX</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>gcry_md_open</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>GCRY_MD_SHA1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>SHA1_Update</name><parameter_list>(<parameter><decl><type><name>SHA_CTX</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>inputLen</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>gcry_md_write</name><argument_list>(<argument><expr><operator>*</operator><name>ctx</name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><name>inputLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>SHA1_Final</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name></type> <name><name>digest</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>SHA_CTX</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>digest</name></expr></argument>, <argument><expr><call><name>gcry_md_read</name><argument_list>(<argument><expr><operator>*</operator><name>ctx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gcry_md_close</name><argument_list>(<argument><expr><operator>*</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>SHA256_Init</name><parameter_list>(<parameter><decl><type><name>SHA256_CTX</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>gcry_md_open</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>GCRY_MD_SHA256</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>SHA256_Update</name><parameter_list>(<parameter><decl><type><name>SHA256_CTX</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>inputLen</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>gcry_md_write</name><argument_list>(<argument><expr><operator>*</operator><name>ctx</name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><name>inputLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>SHA256_Final</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name></type> <name><name>digest</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>SHA256_CTX</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>digest</name></expr></argument>, <argument><expr><call><name>gcry_md_read</name><argument_list>(<argument><expr><operator>*</operator><name>ctx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gcry_md_close</name><argument_list>(<argument><expr><operator>*</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_NSS</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<function><type><specifier>static</specifier> <name>int</name></type> <name>nss_hash_init</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>pctx</name></decl></parameter>, <parameter><decl><type><name>SECOidTag</name></type> <name>hash_alg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>PK11Context</name> <modifier>*</modifier></type><name>ctx</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>NSS_IsInitialized</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name>nss_context</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>NSSInitParameters</name></type> <name>params</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>params</name><operator>.</operator><name>length</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>params</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name>nss_context</name> <operator>=</operator> <call><name>NSS_InitContext</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>params</name></expr></argument>, <argument><expr><name>NSS_INIT_READONLY</name>

<operator>|</operator> <name>NSS_INIT_NOCERTDB</name> <operator>|</operator> <name>NSS_INIT_NOMODDB</name> <operator>|</operator> <name>NSS_INIT_FORCEOPEN</name>

<operator>|</operator> <name>NSS_INIT_NOROOTINIT</name> <operator>|</operator> <name>NSS_INIT_OPTIMIZESPACE</name> <operator>|</operator> <name>NSS_INIT_PK11RELOAD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ctx</name> <operator>=</operator> <call><name>PK11_CreateDigestContext</name><argument_list>(<argument><expr><name>hash_alg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>ctx</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>PK11_DigestBegin</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>SECSuccess</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>PK11_DestroyContext</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>PR_TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>pctx</name> <operator>=</operator> <name>ctx</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>nss_hash_final</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>pctx</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>PK11Context</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><operator>*</operator><name>pctx</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>outlen</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>PK11_DigestFinal</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>outlen</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PK11_DestroyContext</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>PR_TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>MD5_Init</name><parameter_list>(<parameter><decl><type><name>MD5_CTX</name> <modifier>*</modifier></type><name>pctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>nss_hash_init</name><argument_list>(<argument><expr><name>pctx</name></expr></argument>, <argument><expr><name>SEC_OID_MD5</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>MD5_Update</name><parameter_list>(<parameter><decl><type><name>MD5_CTX</name> <modifier>*</modifier></type><name>pctx</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>input_len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>PK11_DigestOp</name><argument_list>(<argument><expr><operator>*</operator><name>pctx</name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><name>input_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>MD5_Final</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name></type> <name><name>digest</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>MD5_CTX</name> <modifier>*</modifier></type><name>pctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>nss_hash_final</name><argument_list>(<argument><expr><name>pctx</name></expr></argument>, <argument><expr><name>digest</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>SHA1_Init</name><parameter_list>(<parameter><decl><type><name>SHA_CTX</name> <modifier>*</modifier></type><name>pctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>nss_hash_init</name><argument_list>(<argument><expr><name>pctx</name></expr></argument>, <argument><expr><name>SEC_OID_SHA1</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>SHA1_Update</name><parameter_list>(<parameter><decl><type><name>SHA_CTX</name> <modifier>*</modifier></type><name>pctx</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>input_len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>PK11_DigestOp</name><argument_list>(<argument><expr><operator>*</operator><name>pctx</name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><name>input_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>SHA1_Final</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name></type> <name><name>digest</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>SHA_CTX</name> <modifier>*</modifier></type><name>pctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>nss_hash_final</name><argument_list>(<argument><expr><name>pctx</name></expr></argument>, <argument><expr><name>digest</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>SHA256_Init</name><parameter_list>(<parameter><decl><type><name>SHA256_CTX</name> <modifier>*</modifier></type><name>pctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>nss_hash_init</name><argument_list>(<argument><expr><name>pctx</name></expr></argument>, <argument><expr><name>SEC_OID_SHA256</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>SHA256_Update</name><parameter_list>(<parameter><decl><type><name>SHA256_CTX</name> <modifier>*</modifier></type><name>pctx</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>input_len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>PK11_DigestOp</name><argument_list>(<argument><expr><operator>*</operator><name>pctx</name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><name>input_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>SHA256_Final</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name></type> <name><name>digest</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>SHA256_CTX</name> <modifier>*</modifier></type><name>pctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>nss_hash_final</name><argument_list>(<argument><expr><name>pctx</name></expr></argument>, <argument><expr><name>digest</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_WIN32_CRYPTO</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<function><type><specifier>static</specifier> <name>void</name></type> <name>win32_crypto_final</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>win32_crypto_hash</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>digest</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>digestLen</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>length</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>CryptGetHashParam</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>hHash</name></name></expr></argument>, <argument><expr><name>HP_HASHVAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>length</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>length</name> <operator>==</operator> <name>digestLen</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>CryptGetHashParam</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>hHash</name></name></expr></argument>, <argument><expr><name>HP_HASHVAL</name></expr></argument>, <argument><expr><name>digest</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>length</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>hHash</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>CryptDestroyHash</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>hHash</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>hCryptProv</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>CryptReleaseContext</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>hCryptProv</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>MD5_Init</name><parameter_list>(<parameter><decl><type><name>MD5_CTX</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>CryptAcquireContext</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>hCryptProv</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>PROV_RSA_FULL</name></expr></argument>,

<argument><expr><name>CRYPT_VERIFYCONTEXT</name> <operator>|</operator> <name>CRYPT_SILENT</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>CryptCreateHash</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>hCryptProv</name></name></expr></argument>, <argument><expr><name>CALG_MD5</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>hHash</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>MD5_Update</name><parameter_list>(<parameter><decl><type><name>MD5_CTX</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>inputLen</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>CryptHashData</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>hHash</name></name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>input</name></expr></argument>, <argument><expr><name>inputLen</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>MD5_Final</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name></type> <name><name>digest</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>MD5_CTX</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>win32_crypto_final</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>digest</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>SHA1_Init</name><parameter_list>(<parameter><decl><type><name>SHA_CTX</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>CryptAcquireContext</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>hCryptProv</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>PROV_RSA_FULL</name></expr></argument>,

<argument><expr><name>CRYPT_VERIFYCONTEXT</name> <operator>|</operator> <name>CRYPT_SILENT</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>CryptCreateHash</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>hCryptProv</name></name></expr></argument>, <argument><expr><name>CALG_SHA1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>hHash</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>SHA1_Update</name><parameter_list>(<parameter><decl><type><name>SHA_CTX</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>inputLen</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>CryptHashData</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>hHash</name></name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>input</name></expr></argument>, <argument><expr><name>inputLen</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>SHA1_Final</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name></type> <name><name>digest</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>SHA_CTX</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>win32_crypto_final</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>digest</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>SHA256_Init</name><parameter_list>(<parameter><decl><type><name>SHA256_CTX</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>CryptAcquireContext</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>hCryptProv</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>PROV_RSA_AES</name></expr></argument>,

<argument><expr><name>CRYPT_VERIFYCONTEXT</name> <operator>|</operator> <name>CRYPT_SILENT</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>CryptCreateHash</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>hCryptProv</name></name></expr></argument>, <argument><expr><name>CALG_SHA_256</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>hHash</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>SHA256_Update</name><parameter_list>(<parameter><decl><type><name>SHA256_CTX</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>inputLen</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>CryptHashData</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>hHash</name></name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>input</name></expr></argument>, <argument><expr><name>inputLen</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>SHA256_Final</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name></type> <name><name>digest</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>SHA256_CTX</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>win32_crypto_final</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>digest</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<decl_stmt><decl><type><specifier>const</specifier> <name>digest_params</name></type> <name><name>MD5_DIGEST_PARAMS</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{

<expr><call><name>CURLX_FUNCTION_CAST</name><argument_list>(<argument><expr><name>Curl_digest_init_func</name></expr></argument>, <argument><expr><name>MD5_Init</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>CURLX_FUNCTION_CAST</name><argument_list>(<argument><expr><name>Curl_digest_update_func</name></expr></argument>, <argument><expr><name>MD5_Update</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>CURLX_FUNCTION_CAST</name><argument_list>(<argument><expr><name>Curl_digest_final_func</name></expr></argument>, <argument><expr><name>MD5_Final</name></expr></argument>)</argument_list></call></expr>,

<expr><sizeof>sizeof<argument_list>(<argument><expr><name>MD5_CTX</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><literal type="number">16</literal></expr>

}</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>digest_params</name></type> <name><name>SHA1_DIGEST_PARAMS</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{

<expr><call><name>CURLX_FUNCTION_CAST</name><argument_list>(<argument><expr><name>Curl_digest_init_func</name></expr></argument>, <argument><expr><name>SHA1_Init</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>CURLX_FUNCTION_CAST</name><argument_list>(<argument><expr><name>Curl_digest_update_func</name></expr></argument>, <argument><expr><name>SHA1_Update</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>CURLX_FUNCTION_CAST</name><argument_list>(<argument><expr><name>Curl_digest_final_func</name></expr></argument>, <argument><expr><name>SHA1_Final</name></expr></argument>)</argument_list></call></expr>,

<expr><sizeof>sizeof<argument_list>(<argument><expr><name>SHA_CTX</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><literal type="number">20</literal></expr>

}</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>digest_params</name></type> <name><name>SHA256_DIGEST_PARAMS</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{

<expr><call><name>CURLX_FUNCTION_CAST</name><argument_list>(<argument><expr><name>Curl_digest_init_func</name></expr></argument>, <argument><expr><name>SHA256_Init</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>CURLX_FUNCTION_CAST</name><argument_list>(<argument><expr><name>Curl_digest_update_func</name></expr></argument>, <argument><expr><name>SHA256_Update</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>CURLX_FUNCTION_CAST</name><argument_list>(<argument><expr><name>Curl_digest_final_func</name></expr></argument>, <argument><expr><name>SHA256_Final</name></expr></argument>)</argument_list></call></expr>,

<expr><sizeof>sizeof<argument_list>(<argument><expr><name>SHA256_CTX</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><literal type="number">32</literal></expr>

}</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>metalink_digest_def</name></type> <name><name>SHA256_DIGEST_DEF</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{<expr><literal type="string">"sha-256"</literal></expr>, <expr><name>SHA256_DIGEST_PARAMS</name></expr>}</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>metalink_digest_def</name></type> <name><name>SHA1_DIGEST_DEF</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{<expr><literal type="string">"sha-1"</literal></expr>, <expr><name>SHA1_DIGEST_PARAMS</name></expr>}</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>metalink_digest_def</name></type> <name><name>MD5_DIGEST_DEF</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{<expr><literal type="string">"md5"</literal></expr>, <expr><name>MD5_DIGEST_PARAMS</name></expr>}</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>metalink_digest_alias</name></type> <name><name>digest_aliases</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{<expr><literal type="string">"sha-256"</literal></expr>, <expr><name>SHA256_DIGEST_DEF</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"sha256"</literal></expr>, <expr><name>SHA256_DIGEST_DEF</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"sha-1"</literal></expr>, <expr><name>SHA1_DIGEST_DEF</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"sha1"</literal></expr>, <expr><name>SHA1_DIGEST_DEF</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"md5"</literal></expr>, <expr><name>MD5_DIGEST_DEF</name></expr>}</block></expr>,

<expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<function><type><name>digest_context</name> <modifier>*</modifier></type><name>Curl_digest_init</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>digest_params</name> <modifier>*</modifier></type><name>dparams</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>digest_context</name> <modifier>*</modifier></type><name>ctxt</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ctxt</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>ctxt</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>ctxt</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ctxt</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ctxt</name><operator>-&gt;</operator><name>digest_hashctx</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name><name>dparams</name><operator>-&gt;</operator><name>digest_ctxtsize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>ctxt</name><operator>-&gt;</operator><name>digest_hashctx</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ctxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ctxt</name><operator>-&gt;</operator><name>digest_hash</name></name> <operator>=</operator> <name>dparams</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name><name>dparams</name><operator>-&gt;</operator><name>digest_init</name></name><argument_list>(<argument><expr><name><name>ctxt</name><operator>-&gt;</operator><name>digest_hashctx</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>ctxt</name><operator>-&gt;</operator><name>digest_hashctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ctxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>ctxt</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>Curl_digest_update</name><parameter_list>(<parameter><decl><type><name>digest_context</name> <modifier>*</modifier></type><name>context</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call>(<modifier>*</modifier><name><name>context</name><operator>-&gt;</operator><name>digest_hash</name><operator>-&gt;</operator><name>digest_update</name></name>)<argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>digest_hashctx</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>Curl_digest_final</name><parameter_list>(<parameter><decl><type><name>digest_context</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call>(<modifier>*</modifier><name><name>context</name><operator>-&gt;</operator><name>digest_hash</name><operator>-&gt;</operator><name>digest_final</name></name>)<argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name><name>context</name><operator>-&gt;</operator><name>digest_hashctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>digest_hashctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name> <name>char</name></type> <name>hex_to_uint</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>val</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>strtoul</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><name>val</name><operator>&amp;</operator><literal type="number">0xff</literal><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>check_hash</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>metalink_digest_def</name> <modifier>*</modifier></type><name>digest_def</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>digest</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>result</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>digest_context</name> <modifier>*</modifier></type><name>dctx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>check_ok</name></decl>, <decl><type ref="prev"/><name>flags</name></decl>, <decl><type ref="prev"/><name>fd</name></decl>;</decl_stmt>

<expr_stmt><expr><name>flags</name> <operator>=</operator> <name>O_RDONLY</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>O_BINARY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>O_BINARY</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>fd</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>error</name></expr></argument>, <argument><expr><literal type="string">"Metalink: validating (%s) [%s] FAILED (%s)\n"</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>,

<argument><expr><name><name>digest_def</name><operator>-&gt;</operator><name>hash_name</name></name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>dctx</name> <operator>=</operator> <call><name>Curl_digest_init</name><argument_list>(<argument><expr><name><name>digest_def</name><operator>-&gt;</operator><name>dparams</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>dctx</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>error</name></expr></argument>, <argument><expr><literal type="string">"Metalink: validating (%s) [%s] FAILED (%s)\n"</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>,

<argument><expr><name><name>digest_def</name><operator>-&gt;</operator><name>hash_name</name></name></expr></argument>, <argument><expr><literal type="string">"failed to initialize hash algorithm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">2</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name><name>digest_def</name><operator>-&gt;</operator><name>dparams</name><operator>-&gt;</operator><name>digest_resultlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>result</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_digest_final</name><argument_list>(<argument><expr><name>dctx</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<while>while<condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">4096</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>len</name> <init>= <expr><call><name>read</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name>len</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>error</name></expr></argument>, <argument><expr><literal type="string">"Metalink: validating (%s) [%s] FAILED (%s)\n"</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>,

<argument><expr><name><name>digest_def</name><operator>-&gt;</operator><name>hash_name</name></name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_digest_final</name><argument_list>(<argument><expr><name>dctx</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>Curl_digest_update</name><argument_list>(<argument><expr><name>dctx</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>Curl_digest_final</name><argument_list>(<argument><expr><name>dctx</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>check_ok</name> <operator>=</operator> <call><name>memcmp</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>digest</name></expr></argument>,

<argument><expr><name><name>digest_def</name><operator>-&gt;</operator><name>dparams</name><operator>-&gt;</operator><name>digest_resultlen</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>check_ok</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>error</name></expr></argument>, <argument><expr><literal type="string">"Metalink: validating (%s) [%s] OK\n"</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>,

<argument><expr><name><name>digest_def</name><operator>-&gt;</operator><name>hash_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>error</name></expr></argument>, <argument><expr><literal type="string">"Metalink: validating (%s) [%s] FAILED (digest mismatch)\n"</literal></expr></argument>,

<argument><expr><name>filename</name></expr></argument>, <argument><expr><name><name>digest_def</name><operator>-&gt;</operator><name>hash_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>check_ok</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>metalink_check_hash</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>GlobalConfig</name></name> <modifier>*</modifier></type><name>config</name></decl></parameter>,

<parameter><decl><type><name>metalinkfile</name> <modifier>*</modifier></type><name>mlfile</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>rv</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>config</name><operator>-&gt;</operator><name>errors</name></name></expr></argument>, <argument><expr><literal type="string">"Metalink: validating (%s)...\n"</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>mlfile</name><operator>-&gt;</operator><name>checksum</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>config</name><operator>-&gt;</operator><name>errors</name></name></expr></argument>,

<argument><expr><literal type="string">"Metalink: validating (%s) FAILED (digest missing)\n"</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">2</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>check_hash</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name><name>mlfile</name><operator>-&gt;</operator><name>checksum</name><operator>-&gt;</operator><name>digest_def</name></name></expr></argument>,

<argument><expr><name><name>mlfile</name><operator>-&gt;</operator><name>checksum</name><operator>-&gt;</operator><name>digest</name></name></expr></argument>, <argument><expr><name><name>config</name><operator>-&gt;</operator><name>errors</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>rv</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>metalink_checksum</name> <modifier>*</modifier></type>

<name>checksum_from_hex_digest</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>metalink_digest_def</name> <modifier>*</modifier></type><name>digest_def</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>hex_digest</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>metalink_checksum</name> <modifier>*</modifier></type><name>chksum</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>digest</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>hex_digest</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>digest</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>len</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>digest</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>digest</name><index>[<expr><name>i</name><operator>/</operator><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>hex_to_uint</name><argument_list>(<argument><expr><name>hex_digest</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>chksum</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>metalink_checksum</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>chksum</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>chksum</name><operator>-&gt;</operator><name>digest_def</name></name> <operator>=</operator> <name>digest_def</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>chksum</name><operator>-&gt;</operator><name>digest</name></name> <operator>=</operator> <name>digest</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>digest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><name>chksum</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>metalink_resource</name> <modifier>*</modifier></type><name>new_metalink_resource</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>url</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>metalink_resource</name> <modifier>*</modifier></type><name>res</name></decl>;</decl_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>metalink_resource</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>res</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>url</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>res</name><operator>-&gt;</operator><name>url</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>check_hex_digest</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>hex_digest</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>metalink_digest_def</name> <modifier>*</modifier></type><name>digest_def</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>hex_digest</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name>c</name> <init>= <expr><name><name>hex_digest</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><operator>(</operator><literal type="char">'0'</literal> <operator>&lt;=</operator> <name>c</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'9'</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><literal type="char">'a'</literal> <operator>&lt;=</operator> <name>c</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'z'</literal><operator>)</operator> <operator>||</operator>

<operator>(</operator><literal type="char">'A'</literal> <operator>&lt;=</operator> <name>c</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'Z'</literal><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name><name>digest_def</name><operator>-&gt;</operator><name>dparams</name><operator>-&gt;</operator><name>digest_resultlen</name></name> <operator>*</operator> <literal type="number">2</literal> <operator>==</operator> <name>i</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>metalinkfile</name> <modifier>*</modifier></type><name>new_metalinkfile</name><parameter_list>(<parameter><decl><type><name>metalink_file_t</name> <modifier>*</modifier></type><name>fileinfo</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>metalinkfile</name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>

<expr_stmt><expr><name>f</name> <operator>=</operator> <operator>(</operator><name>metalinkfile</name><operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>metalinkfile</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>f</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>filename</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name><name>fileinfo</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>f</name><operator>-&gt;</operator><name>filename</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>checksum</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>resource</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>fileinfo</name><operator>-&gt;</operator><name>checksums</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>metalink_digest_alias</name> <modifier>*</modifier></type><name>digest_alias</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>digest_alias</name> <operator>=</operator> <name>digest_aliases</name></expr>;</init> <condition><expr><name><name>digest_alias</name><operator>-&gt;</operator><name>alias_name</name></name></expr>;</condition>

<incr><expr><operator>++</operator><name>digest_alias</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>metalink_checksum_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>p</name> <operator>=</operator> <name><name>fileinfo</name><operator>-&gt;</operator><name>checksums</name></name></expr>;</init> <condition><expr><operator>*</operator><name>p</name></expr>;</condition> <incr><expr><operator>++</operator><name>p</name></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>curl_strequal</name><argument_list>(<argument><expr><name><name>digest_alias</name><operator>-&gt;</operator><name>alias_name</name></name></expr></argument>, <argument><expr><name><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<call><name>check_hex_digest</name><argument_list>(<argument><expr><name><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator><operator>-&gt;</operator><name>hash</name></name></expr></argument>, <argument><expr><name><name>digest_alias</name><operator>-&gt;</operator><name>digest_def</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>checksum</name></name> <operator>=</operator>

<call><name>checksum_from_hex_digest</name><argument_list>(<argument><expr><name><name>digest_alias</name><operator>-&gt;</operator><name>digest_def</name></name></expr></argument>,

<argument><expr><name><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator><operator>-&gt;</operator><name>hash</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if<condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>checksum</name></name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>fileinfo</name><operator>-&gt;</operator><name>resources</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>metalink_resource_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>metalink_resource</name></type> <name>root</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>tail</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>root</name><operator>.</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>tail</name> <operator>=</operator> <operator>&amp;</operator><name>root</name></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>p</name> <operator>=</operator> <name><name>fileinfo</name><operator>-&gt;</operator><name>resources</name></name></expr>;</init> <condition><expr><operator>*</operator><name>p</name></expr>;</condition> <incr><expr><operator>++</operator><name>p</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>metalink_resource</name> <modifier>*</modifier></type><name>res</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator>

<call><name>curl_strequal</name><argument_list>(<argument><expr><name><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><literal type="string">"http"</literal></expr></argument>)</argument_list></call> <operator>||</operator>

<call><name>curl_strequal</name><argument_list>(<argument><expr><name><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><literal type="string">"https"</literal></expr></argument>)</argument_list></call> <operator>||</operator>

<call><name>curl_strequal</name><argument_list>(<argument><expr><name><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><literal type="string">"ftp"</literal></expr></argument>)</argument_list></call> <operator>||</operator>

<call><name>curl_strequal</name><argument_list>(<argument><expr><name><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><literal type="string">"ftps"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>new_metalink_resource</name><argument_list>(<argument><expr><name><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator><operator>-&gt;</operator><name>url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>res</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>tail</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>res</name></expr>;</expr_stmt>

<expr_stmt><expr><name>tail</name> <operator>=</operator> <name>res</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>tail</name> <operator>=</operator> <name><name>root</name><operator>.</operator><name>next</name></name></expr>;</expr_stmt>

<while>while<condition>(<expr><name>tail</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>res</name> <operator>=</operator> <name><name>tail</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>tail</name><operator>-&gt;</operator><name>url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>tail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tail</name> <operator>=</operator> <name>res</name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>resource</name></name> <operator>=</operator> <name><name>root</name><operator>.</operator><name>next</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>f</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>parse_metalink</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>OperationConfig</name></name> <modifier>*</modifier></type><name>config</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>OutStruct</name></name> <modifier>*</modifier></type><name>outs</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>metalink_url</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>metalink_error_t</name></type> <name>r</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>metalink_t</name><modifier>*</modifier></type> <name>metalink</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>metalink_file_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>files</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>warnings</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>metalink_parse_final</name><argument_list>(<argument><expr><name><name>outs</name><operator>-&gt;</operator><name>metalink_parser</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>metalink</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>outs</name><operator>-&gt;</operator><name>metalink_parser</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>r</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>metalink</name><operator>-&gt;</operator><name>files</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>config</name><operator>-&gt;</operator><name>global</name><operator>-&gt;</operator><name>errors</name></name></expr></argument>, <argument><expr><literal type="string">"Metalink: parsing (%s) WARNING "</literal>

<literal type="string">"(missing or invalid file name)\n"</literal></expr></argument>,

<argument><expr><name>metalink_url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>metalink_delete</name><argument_list>(<argument><expr><name>metalink</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for<control>(<init><expr><name>files</name> <operator>=</operator> <name><name>metalink</name><operator>-&gt;</operator><name>files</name></name></expr>;</init> <condition><expr><operator>*</operator><name>files</name></expr>;</condition> <incr><expr><operator>++</operator><name>files</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>getout</name></name> <modifier>*</modifier></type><name>url</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><operator>(</operator><operator>*</operator><name>files</name><operator>)</operator><operator>-&gt;</operator><name>resources</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>config</name><operator>-&gt;</operator><name>global</name><operator>-&gt;</operator><name>errors</name></name></expr></argument>, <argument><expr><literal type="string">"Metalink: parsing (%s) WARNING "</literal>

<literal type="string">"(missing or invalid resource)\n"</literal></expr></argument>,

<argument><expr><name>metalink_url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>url_get</name></name> <operator>||</operator>

<operator>(</operator><operator>(</operator><name><name>config</name><operator>-&gt;</operator><name>url_get</name></name> <operator>=</operator> <name><name>config</name><operator>-&gt;</operator><name>url_list</name></name><operator>)</operator> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<while>while<condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>url_get</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>config</name><operator>-&gt;</operator><name>url_get</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>GETOUT_URL</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>url_get</name></name> <operator>=</operator> <name><name>config</name><operator>-&gt;</operator><name>url_get</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></while>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>url_get</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>url</name> <operator>=</operator> <name><name>config</name><operator>-&gt;</operator><name>url_get</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>url</name> <operator>=</operator> <call><name>new_getout</name><argument_list>(<argument><expr><name>config</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name>url</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>metalinkfile</name> <modifier>*</modifier></type><name>mlfile</name> <init>= <expr><call><name>new_metalinkfile</name><argument_list>(<argument><expr><operator>*</operator><name>files</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>mlfile</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>mlfile</name><operator>-&gt;</operator><name>checksum</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>warnings</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>config</name><operator>-&gt;</operator><name>global</name><operator>-&gt;</operator><name>errors</name></name></expr></argument>,

<argument><expr><literal type="string">"Metalink: parsing (%s) WARNING (digest missing)\n"</literal></expr></argument>,

<argument><expr><name>metalink_url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>GetStr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>url</name><operator>-&gt;</operator><name>url</name></name></expr></argument>, <argument><expr><name><name>mlfile</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>url</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>GETOUT_URL</name> <operator>|</operator> <name>GETOUT_METALINK</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>metalinkfile_list</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>metalinkfile_last</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>mlfile</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>metalinkfile_last</name></name> <operator>=</operator> <name>mlfile</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>metalinkfile_list</name></name> <operator>=</operator> <name><name>config</name><operator>-&gt;</operator><name>metalinkfile_last</name></name> <operator>=</operator> <name>mlfile</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>metalink_delete</name><argument_list>(<argument><expr><name>metalink</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><ternary><condition><expr><operator>(</operator><name>warnings</name><operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>metalink_write_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sz</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>nmemb</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userdata</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>per_transfer</name></name> <modifier>*</modifier></type><name>per</name> <init>= <expr><name>userdata</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>OutStruct</name></name> <modifier>*</modifier></type><name>outs</name> <init>= <expr><operator>&amp;</operator><name><name>per</name><operator>-&gt;</operator><name>outs</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>OperationConfig</name></name> <modifier>*</modifier></type><name>config</name> <init>= <expr><name><name>per</name><operator>-&gt;</operator><name>config</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>failure</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>sz</name> <operator>&amp;&amp;</operator> <name>nmemb</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>config</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>failure</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>metalink_parse_update</name><argument_list>(<argument><expr><name><name>outs</name><operator>-&gt;</operator><name>metalink_parser</name></name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>sz</name> <operator>*</operator> <name>nmemb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rv</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>sz</name> <operator>*</operator> <name>nmemb</name></expr>;</return></block_content></block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>config</name><operator>-&gt;</operator><name>global</name><operator>-&gt;</operator><name>errors</name></name></expr></argument>, <argument><expr><literal type="string">"Metalink: parsing FAILED\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>failure</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>check_content_type</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>content_type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>media_type</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name>content_type</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>media_type_len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>media_type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for<control>(<init>;</init> <condition><expr><operator>*</operator><name>ptr</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">' '</literal> <operator>||</operator> <operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">'\t'</literal><operator>)</operator></expr>;</condition> <incr><expr><operator>++</operator><name>ptr</name></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>

<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>*</operator><name>ptr</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>curl_strnequal</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>media_type</name></expr></argument>, <argument><expr><name>media_type_len</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<operator>(</operator><operator>*</operator><operator>(</operator><name>ptr</name> <operator>+</operator> <name>media_type_len</name><operator>)</operator> <operator>==</operator> <literal type="char">'\0'</literal> <operator>||</operator> <operator>*</operator><operator>(</operator><name>ptr</name> <operator>+</operator> <name>media_type_len</name><operator>)</operator> <operator>==</operator> <literal type="char">' '</literal> <operator>||</operator>

<operator>*</operator><operator>(</operator><name>ptr</name> <operator>+</operator> <name>media_type_len</name><operator>)</operator> <operator>==</operator> <literal type="char">'\t'</literal> <operator>||</operator> <operator>*</operator><operator>(</operator><name>ptr</name> <operator>+</operator> <name>media_type_len</name><operator>)</operator> <operator>==</operator> <literal type="char">';'</literal><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>check_metalink_content_type</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>content_type</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>check_content_type</name><argument_list>(<argument><expr><name>content_type</name></expr></argument>, <argument><expr><literal type="string">"application/metalink+xml"</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>count_next_metalink_resource</name><parameter_list>(<parameter><decl><type><name>metalinkfile</name> <modifier>*</modifier></type><name>mlfile</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>metalink_resource</name> <modifier>*</modifier></type><name>res</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>res</name> <operator>=</operator> <name><name>mlfile</name><operator>-&gt;</operator><name>resource</name></name></expr>;</init> <condition><expr><name>res</name></expr>;</condition> <incr><expr><name>res</name> <operator>=</operator> <name><name>res</name><operator>-&gt;</operator><name>next</name></name></expr><operator>,</operator> <expr><operator>++</operator><name>count</name></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>

<return>return <expr><name>count</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>delete_metalink_checksum</name><parameter_list>(<parameter><decl><type><name>metalink_checksum</name> <modifier>*</modifier></type><name>chksum</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>chksum</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>chksum</name><operator>-&gt;</operator><name>digest</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name>chksum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>delete_metalink_resource</name><parameter_list>(<parameter><decl><type><name>metalink_resource</name> <modifier>*</modifier></type><name>res</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>res</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>res</name><operator>-&gt;</operator><name>url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>delete_metalinkfile</name><parameter_list>(<parameter><decl><type><name>metalinkfile</name> <modifier>*</modifier></type><name>mlfile</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>metalink_resource</name> <modifier>*</modifier></type><name>res</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>mlfile</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>mlfile</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>delete_metalink_checksum</name><argument_list>(<argument><expr><name><name>mlfile</name><operator>-&gt;</operator><name>checksum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>res</name> <operator>=</operator> <name><name>mlfile</name><operator>-&gt;</operator><name>resource</name></name></expr>;</init> <condition><expr><name>res</name></expr>;</condition><incr/>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>metalink_resource</name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>

<expr_stmt><expr><name>next</name> <operator>=</operator> <name><name>res</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>delete_metalink_resource</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name>mlfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>clean_metalink</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>OperationConfig</name></name> <modifier>*</modifier></type><name>config</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>config</name></expr>)</condition> <block>{<block_content>

<while>while<condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>metalinkfile_list</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>metalinkfile</name> <modifier>*</modifier></type><name>mlfile</name> <init>= <expr><name><name>config</name><operator>-&gt;</operator><name>metalinkfile_list</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>metalinkfile_list</name></name> <operator>=</operator> <name><name>config</name><operator>-&gt;</operator><name>metalinkfile_list</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>delete_metalinkfile</name><argument_list>(<argument><expr><name>mlfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>metalinkfile_last</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>metalink_cleanup</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_NSS_CONTEXT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name>nss_context</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>NSS_ShutdownContext</name><argument_list>(<argument><expr><name>nss_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>nss_context</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</unit>
