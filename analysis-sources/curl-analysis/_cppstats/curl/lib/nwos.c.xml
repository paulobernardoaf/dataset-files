<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\curl-analysis\_cppstats\curl\lib\nwos.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_setup.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NETWARE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__NOVELL_LIBC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>int</name></type> <name>netware_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;nwnspace.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;nwthread.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;nwadv.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netdb.h&gt;</cpp:file></cpp:include>

<function><type><name>NETDB_DEFINE_CONTEXT</name>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet/in.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;arpa/inet.h&gt;</cpp:file></cpp:include>

<name>NETINET_DEFINE_CONTEXT</name>

<name>int</name></type> <name>netware_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>myHandle</name> <init>= <expr><call><name>GetNLMHandle</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>pUnAugmentAsterisk</name>)<parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list> <init>= <expr><operator>(</operator><call><call><name>void</name><argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><operator>(</operator><name>int</name><operator>)</operator></call><operator>)</operator>

<call><name>ImportSymbol</name><argument_list>(<argument><expr><name>myHandle</name></expr></argument>, <literal type="string">"UnAugmentAsterisk"</literal>)</argument_list></call></expr></init>;</function_decl>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>pUseAccurateCaseForPaths</name>)<parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list> <init>= <expr><operator>(</operator><call><call><name>void</name><argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><operator>(</operator><name>int</name><operator>)</operator></call><operator>)</operator>

<call><name>ImportSymbol</name><argument_list>(<argument><expr><name>myHandle</name></expr></argument>, <literal type="string">"UseAccurateCaseForPaths"</literal>)</argument_list></call></expr></init>;</function_decl>

<if_stmt><if>if<condition>(<expr><name>pUnAugmentAsterisk</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>pUnAugmentAsterisk</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>pUseAccurateCaseForPaths</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>pUseAccurateCaseForPaths</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>UnimportSymbol</name><argument_list>(<argument><expr><name>myHandle</name></expr></argument>, <argument><expr><literal type="string">"UnAugmentAsterisk"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UnimportSymbol</name><argument_list>(<argument><expr><name>myHandle</name></expr></argument>, <argument><expr><literal type="string">"UseAccurateCaseForPaths"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><call><name>SetCurrentNameSpace</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">255</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><call><name>SetTargetNameSpace</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">255</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <name>rc</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>rc</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>__init_environment</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>__deinit_environment</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</unit>
