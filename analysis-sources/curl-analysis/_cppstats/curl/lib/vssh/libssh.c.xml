<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\curl-analysis\_cppstats\curl\lib\vssh\libssh.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_setup.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_LIBSSH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libssh/libssh.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libssh/sftp.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_FCNTL_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_NETINET_IN_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet/in.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ARPA_INET_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;arpa/inet.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_UTSNAME_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/utsname.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_NETDB_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netdb.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VMS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;in.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inet.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>NETWARE</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__NOVELL_LIBC__</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>in_addr_t</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>in_addr_t</name></cpp:macro> <cpp:value>unsigned long</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;curl/curl.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"urldata.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sendf.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hostip.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"progress.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"transfer.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"escape.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http.h"</cpp:file></cpp:include> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ssh.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"url.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"speedcheck.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"getinfo.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"strdup.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"strcase.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vtls/vtls.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"connect.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"strerror.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"inet_ntop.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"parsedate.h"</cpp:file></cpp:include> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sockaddr.h"</cpp:file></cpp:include> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"strtoofft.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"multiif.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"select.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"warnless.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_printf.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_memory.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memdebug.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_path.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SSH_STRING_FREE_CHAR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSH_STRING_FREE_CHAR</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if(x) { ssh_string_free_char(x); x = NULL; } } while(0)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><specifier>static</specifier> <name>CURLcode</name></type> <name>myssh_connect</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>done</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>CURLcode</name></type> <name>myssh_multi_statemach</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,

<parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>done</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>CURLcode</name></type> <name>myssh_do_it</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>done</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>CURLcode</name></type> <name>scp_done</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,

<parameter><decl><type><name>CURLcode</name></type></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>premature</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>CURLcode</name></type> <name>scp_doing</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>dophase_done</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>CURLcode</name></type> <name>scp_disconnect</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>dead_connection</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>CURLcode</name></type> <name>sftp_done</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,

<parameter><decl><type><name>CURLcode</name></type></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>premature</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>CURLcode</name></type> <name>sftp_doing</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,

<parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>dophase_done</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>CURLcode</name></type> <name>sftp_disconnect</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>dead</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier>

<name>CURLcode</name></type> <name>sftp_perform</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,

<parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>connected</name></decl></parameter>,

<parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>dophase_done</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>sftp_quote</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>sftp_quote_stat</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>myssh_getsock</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>curl_socket_t</name> <modifier>*</modifier></type><name>sock</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>myssh_perform_getsock</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,

<parameter><decl><type><name>curl_socket_t</name> <modifier>*</modifier></type><name>sock</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>CURLcode</name></type> <name>myssh_setup_connection</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>Curl_handler</name></name></type> <name>Curl_handler_scp</name> <init>= <expr><block>{

<expr><literal type="string">"SCP"</literal></expr>, 

<expr><name>myssh_setup_connection</name></expr>, 

<expr><name>myssh_do_it</name></expr>, 

<expr><name>scp_done</name></expr>, 

<expr><name>ZERO_NULL</name></expr>, 

<expr><name>myssh_connect</name></expr>, 

<expr><name>myssh_multi_statemach</name></expr>, 

<expr><name>scp_doing</name></expr>, 

<expr><name>myssh_getsock</name></expr>, 

<expr><name>myssh_getsock</name></expr>, 

<expr><name>ZERO_NULL</name></expr>, 

<expr><name>myssh_perform_getsock</name></expr>, 

<expr><name>scp_disconnect</name></expr>, 

<expr><name>ZERO_NULL</name></expr>, 

<expr><name>ZERO_NULL</name></expr>, 

<expr><name>PORT_SSH</name></expr>, 

<expr><name>CURLPROTO_SCP</name></expr>, 

<expr><name>PROTOPT_DIRLOCK</name> <operator>|</operator> <name>PROTOPT_CLOSEACTION</name> <operator>|</operator> <name>PROTOPT_NOURLQUERY</name></expr> 

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>Curl_handler</name></name></type> <name>Curl_handler_sftp</name> <init>= <expr><block>{

<expr><literal type="string">"SFTP"</literal></expr>, 

<expr><name>myssh_setup_connection</name></expr>, 

<expr><name>myssh_do_it</name></expr>, 

<expr><name>sftp_done</name></expr>, 

<expr><name>ZERO_NULL</name></expr>, 

<expr><name>myssh_connect</name></expr>, 

<expr><name>myssh_multi_statemach</name></expr>, 

<expr><name>sftp_doing</name></expr>, 

<expr><name>myssh_getsock</name></expr>, 

<expr><name>myssh_getsock</name></expr>, 

<expr><name>ZERO_NULL</name></expr>, 

<expr><name>myssh_perform_getsock</name></expr>, 

<expr><name>sftp_disconnect</name></expr>, 

<expr><name>ZERO_NULL</name></expr>, 

<expr><name>ZERO_NULL</name></expr>, 

<expr><name>PORT_SSH</name></expr>, 

<expr><name>CURLPROTO_SFTP</name></expr>, 

<expr><name>PROTOPT_DIRLOCK</name> <operator>|</operator> <name>PROTOPT_CLOSEACTION</name>

<operator>|</operator> <name>PROTOPT_NOURLQUERY</name></expr> 

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>sftp_error_to_CURLE</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>err</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch<condition>(<expr><name>err</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>SSH_FX_OK</name></expr>:</case>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

<case>case <expr><name>SSH_FX_NO_SUCH_FILE</name></expr>:</case>

<case>case <expr><name>SSH_FX_NO_SUCH_PATH</name></expr>:</case>

<return>return <expr><name>CURLE_REMOTE_FILE_NOT_FOUND</name></expr>;</return>

<case>case <expr><name>SSH_FX_PERMISSION_DENIED</name></expr>:</case>

<case>case <expr><name>SSH_FX_WRITE_PROTECT</name></expr>:</case>

<return>return <expr><name>CURLE_REMOTE_ACCESS_DENIED</name></expr>;</return>

<case>case <expr><name>SSH_FX_FILE_ALREADY_EXISTS</name></expr>:</case>

<return>return <expr><name>CURLE_REMOTE_FILE_EXISTS</name></expr>;</return>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch>

<return>return <expr><name>CURLE_SSH</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DEBUGBUILD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>state</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>mystate(x,y)</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>state</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>mystate(x,y, __LINE__)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mystate</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>sshstate</name></type> <name>nowstate</name></decl></parameter>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUGBUILD</name></expr></argument>)</argument_list></call></expr></cpp:if>
, <parameter><decl><type><name>int</name></type> <name>lineno</name></decl></parameter>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>ssh_conn</name></name> <modifier>*</modifier></type><name>sshc</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>sshc</name></name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUGBUILD</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_VERBOSE_STRINGS</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>names</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"SSH_STOP"</literal></expr>,

<expr><literal type="string">"SSH_INIT"</literal></expr>,

<expr><literal type="string">"SSH_S_STARTUP"</literal></expr>,

<expr><literal type="string">"SSH_HOSTKEY"</literal></expr>,

<expr><literal type="string">"SSH_AUTHLIST"</literal></expr>,

<expr><literal type="string">"SSH_AUTH_PKEY_INIT"</literal></expr>,

<expr><literal type="string">"SSH_AUTH_PKEY"</literal></expr>,

<expr><literal type="string">"SSH_AUTH_PASS_INIT"</literal></expr>,

<expr><literal type="string">"SSH_AUTH_PASS"</literal></expr>,

<expr><literal type="string">"SSH_AUTH_AGENT_INIT"</literal></expr>,

<expr><literal type="string">"SSH_AUTH_AGENT_LIST"</literal></expr>,

<expr><literal type="string">"SSH_AUTH_AGENT"</literal></expr>,

<expr><literal type="string">"SSH_AUTH_HOST_INIT"</literal></expr>,

<expr><literal type="string">"SSH_AUTH_HOST"</literal></expr>,

<expr><literal type="string">"SSH_AUTH_KEY_INIT"</literal></expr>,

<expr><literal type="string">"SSH_AUTH_KEY"</literal></expr>,

<expr><literal type="string">"SSH_AUTH_GSSAPI"</literal></expr>,

<expr><literal type="string">"SSH_AUTH_DONE"</literal></expr>,

<expr><literal type="string">"SSH_SFTP_INIT"</literal></expr>,

<expr><literal type="string">"SSH_SFTP_REALPATH"</literal></expr>,

<expr><literal type="string">"SSH_SFTP_QUOTE_INIT"</literal></expr>,

<expr><literal type="string">"SSH_SFTP_POSTQUOTE_INIT"</literal></expr>,

<expr><literal type="string">"SSH_SFTP_QUOTE"</literal></expr>,

<expr><literal type="string">"SSH_SFTP_NEXT_QUOTE"</literal></expr>,

<expr><literal type="string">"SSH_SFTP_QUOTE_STAT"</literal></expr>,

<expr><literal type="string">"SSH_SFTP_QUOTE_SETSTAT"</literal></expr>,

<expr><literal type="string">"SSH_SFTP_QUOTE_SYMLINK"</literal></expr>,

<expr><literal type="string">"SSH_SFTP_QUOTE_MKDIR"</literal></expr>,

<expr><literal type="string">"SSH_SFTP_QUOTE_RENAME"</literal></expr>,

<expr><literal type="string">"SSH_SFTP_QUOTE_RMDIR"</literal></expr>,

<expr><literal type="string">"SSH_SFTP_QUOTE_UNLINK"</literal></expr>,

<expr><literal type="string">"SSH_SFTP_QUOTE_STATVFS"</literal></expr>,

<expr><literal type="string">"SSH_SFTP_GETINFO"</literal></expr>,

<expr><literal type="string">"SSH_SFTP_FILETIME"</literal></expr>,

<expr><literal type="string">"SSH_SFTP_TRANS_INIT"</literal></expr>,

<expr><literal type="string">"SSH_SFTP_UPLOAD_INIT"</literal></expr>,

<expr><literal type="string">"SSH_SFTP_CREATE_DIRS_INIT"</literal></expr>,

<expr><literal type="string">"SSH_SFTP_CREATE_DIRS"</literal></expr>,

<expr><literal type="string">"SSH_SFTP_CREATE_DIRS_MKDIR"</literal></expr>,

<expr><literal type="string">"SSH_SFTP_READDIR_INIT"</literal></expr>,

<expr><literal type="string">"SSH_SFTP_READDIR"</literal></expr>,

<expr><literal type="string">"SSH_SFTP_READDIR_LINK"</literal></expr>,

<expr><literal type="string">"SSH_SFTP_READDIR_BOTTOM"</literal></expr>,

<expr><literal type="string">"SSH_SFTP_READDIR_DONE"</literal></expr>,

<expr><literal type="string">"SSH_SFTP_DOWNLOAD_INIT"</literal></expr>,

<expr><literal type="string">"SSH_SFTP_DOWNLOAD_STAT"</literal></expr>,

<expr><literal type="string">"SSH_SFTP_CLOSE"</literal></expr>,

<expr><literal type="string">"SSH_SFTP_SHUTDOWN"</literal></expr>,

<expr><literal type="string">"SSH_SCP_TRANS_INIT"</literal></expr>,

<expr><literal type="string">"SSH_SCP_UPLOAD_INIT"</literal></expr>,

<expr><literal type="string">"SSH_SCP_DOWNLOAD_INIT"</literal></expr>,

<expr><literal type="string">"SSH_SCP_DOWNLOAD"</literal></expr>,

<expr><literal type="string">"SSH_SCP_DONE"</literal></expr>,

<expr><literal type="string">"SSH_SCP_SEND_EOF"</literal></expr>,

<expr><literal type="string">"SSH_SCP_WAIT_EOF"</literal></expr>,

<expr><literal type="string">"SSH_SCP_WAIT_CLOSE"</literal></expr>,

<expr><literal type="string">"SSH_SCP_CHANNEL_FREE"</literal></expr>,

<expr><literal type="string">"SSH_SESSION_DISCONNECT"</literal></expr>,

<expr><literal type="string">"SSH_SESSION_FREE"</literal></expr>,

<expr><literal type="string">"QUIT"</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>sshc</name><operator>-&gt;</operator><name>state</name></name> <operator>!=</operator> <name>nowstate</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"SSH %p state change from %s to %s (line %d)\n"</literal></expr></argument>,

<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>sshc</name></expr></argument>, <argument><expr><name><name>names</name><index>[<expr><name><name>sshc</name><operator>-&gt;</operator><name>state</name></name></expr>]</index></name></expr></argument>, <argument><expr><name><name>names</name><index>[<expr><name>nowstate</name></expr>]</index></name></expr></argument>,

<argument><expr><name>lineno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>nowstate</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>myssh_is_known</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ssh_conn</name></name> <modifier>*</modifier></type><name>sshc</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>sshc</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ssh_key</name></type> <name>pubkey</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>hlen</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>hash</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>found_base64</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>known_base64</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>vstate</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>curl_khmatch</name></name></type> <name>keymatch</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>curl_khkey</name></name></type> <name>foundkey</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>curl_khkey</name></name> <modifier>*</modifier></type><name>knownkeyp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>curl_sshkeycallback</name></type> <name>func</name> <init>=

<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>ssh_keyfunc</name></name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LIBSSH_VERSION_INT</name> <operator>&gt;=</operator> <call><name>SSH_VERSION_INT</name><argument_list>(<argument><expr><literal type="number">0</literal><operator>,</operator><literal type="number">9</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name><name>struct</name> <name>ssh_knownhosts_entry</name></name> <modifier>*</modifier></type><name>knownhostsentry</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>curl_khkey</name></name></type> <name>knownkey</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LIBSSH_VERSION_INT</name> <operator>&gt;=</operator> <call><name>SSH_VERSION_INT</name><argument_list>(<argument><expr><literal type="number">0</literal><operator>,</operator><literal type="number">8</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>ssh_get_server_publickey</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>ssh_session</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pubkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>ssh_get_publickey</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>ssh_session</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pubkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>!=</operator> <name>SSH_OK</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>rc</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_SSH_HOST_PUBLIC_KEY_MD5</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>md5buffer</name><index>[<expr><literal type="number">33</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pubkey_md5</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_SSH_HOST_PUBLIC_KEY_MD5</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>ssh_get_publickey_hash</name><argument_list>(<argument><expr><name>pubkey</name></expr></argument>, <argument><expr><name>SSH_PUBLICKEY_HASH_MD5</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>hash</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>!=</operator> <name>SSH_OK</name> <operator>||</operator> <name>hlen</name> <operator>!=</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>,

<argument><expr><literal type="string">"Denied establishing ssh session: md5 fingerprint not available"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>cleanup</name>;</goto>

</block_content>}</block></if></if_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msnprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>md5buffer</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"%02x"</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name><name>hash</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"SSH MD5 fingerprint: %s\n"</literal></expr></argument>, <argument><expr><name>md5buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>strcasecompare</name><argument_list>(<argument><expr><name>md5buffer</name></expr></argument>, <argument><expr><name>pubkey_md5</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>,

<argument><expr><literal type="string">"Denied establishing ssh session: mismatch md5 fingerprint. "</literal>

<literal type="string">"Remote %s is not equal to %s"</literal></expr></argument>, <argument><expr><name>md5buffer</name></expr></argument>, <argument><expr><name>pubkey_md5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SSH_ERROR</name></expr>;</expr_stmt>

<goto>goto <name>cleanup</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SSH_OK</name></expr>;</expr_stmt>

<goto>goto <name>cleanup</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>ssl</name><operator>.</operator><name>primary</name><operator>.</operator><name>verifyhost</name></name> <operator>!=</operator> <name>TRUE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SSH_OK</name></expr>;</expr_stmt>

<goto>goto <name>cleanup</name>;</goto>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LIBSSH_VERSION_INT</name> <operator>&gt;=</operator> <call><name>SSH_VERSION_INT</name><argument_list>(<argument><expr><literal type="number">0</literal><operator>,</operator><literal type="number">9</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><name>vstate</name> <operator>=</operator> <call><name>ssh_session_get_known_hosts_entry</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>ssh_session</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>knownhostsentry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>knownhostsentry</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>knownhostsentry</name><operator>-&gt;</operator><name>publickey</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>ssh_pki_export_pubkey_base64</name><argument_list>(<argument><expr><name><name>knownhostsentry</name><operator>-&gt;</operator><name>publickey</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>known_base64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>!=</operator> <name>SSH_OK</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>cleanup</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>knownkey</name><operator>.</operator><name>key</name></name> <operator>=</operator> <name>known_base64</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>knownkey</name><operator>.</operator><name>len</name></name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>known_base64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch<condition>(<expr><call><name>ssh_key_type</name><argument_list>(<argument><expr><name><name>knownhostsentry</name><operator>-&gt;</operator><name>publickey</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<case>case <expr><name>SSH_KEYTYPE_RSA</name></expr>:</case>

<expr_stmt><expr><name><name>knownkey</name><operator>.</operator><name>keytype</name></name> <operator>=</operator> <name>CURLKHTYPE_RSA</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>SSH_KEYTYPE_RSA1</name></expr>:</case>

<expr_stmt><expr><name><name>knownkey</name><operator>.</operator><name>keytype</name></name> <operator>=</operator> <name>CURLKHTYPE_RSA1</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>SSH_KEYTYPE_ECDSA</name></expr>:</case>

<expr_stmt><expr><name><name>knownkey</name><operator>.</operator><name>keytype</name></name> <operator>=</operator> <name>CURLKHTYPE_ECDSA</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>SSH_KEYTYPE_ED25519</name></expr>:</case>

<expr_stmt><expr><name><name>knownkey</name><operator>.</operator><name>keytype</name></name> <operator>=</operator> <name>CURLKHTYPE_ED25519</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>SSH_KEYTYPE_DSS</name></expr>:</case>

<expr_stmt><expr><name><name>knownkey</name><operator>.</operator><name>keytype</name></name> <operator>=</operator> <name>CURLKHTYPE_DSS</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SSH_ERROR</name></expr>;</expr_stmt>

<goto>goto <name>cleanup</name>;</goto>

</block_content>}</block></switch>

<expr_stmt><expr><name>knownkeyp</name> <operator>=</operator> <operator>&amp;</operator><name>knownkey</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<switch>switch<condition>(<expr><name>vstate</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>SSH_KNOWN_HOSTS_OK</name></expr>:</case>

<expr_stmt><expr><name>keymatch</name> <operator>=</operator> <name>CURLKHMATCH_OK</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>SSH_KNOWN_HOSTS_OTHER</name></expr>:</case>

<case>case <expr><name>SSH_KNOWN_HOSTS_NOT_FOUND</name></expr>:</case>

<case>case <expr><name>SSH_KNOWN_HOSTS_UNKNOWN</name></expr>:</case>

<case>case <expr><name>SSH_KNOWN_HOSTS_ERROR</name></expr>:</case>

<expr_stmt><expr><name>keymatch</name> <operator>=</operator> <name>CURLKHMATCH_MISSING</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><name>keymatch</name> <operator>=</operator> <name>CURLKHMATCH_MISMATCH</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name>vstate</name> <operator>=</operator> <call><name>ssh_is_server_known</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>ssh_session</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch<condition>(<expr><name>vstate</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>SSH_SERVER_KNOWN_OK</name></expr>:</case>

<expr_stmt><expr><name>keymatch</name> <operator>=</operator> <name>CURLKHMATCH_OK</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>SSH_SERVER_FILE_NOT_FOUND</name></expr>:</case>

<case>case <expr><name>SSH_SERVER_NOT_KNOWN</name></expr>:</case>

<expr_stmt><expr><name>keymatch</name> <operator>=</operator> <name>CURLKHMATCH_MISSING</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><name>keymatch</name> <operator>=</operator> <name>CURLKHMATCH_MISMATCH</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if<condition>(<expr><name>func</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>ssh_pki_export_pubkey_base64</name><argument_list>(<argument><expr><name>pubkey</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>found_base64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>!=</operator> <name>SSH_OK</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>cleanup</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>foundkey</name><operator>.</operator><name>key</name></name> <operator>=</operator> <name>found_base64</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>foundkey</name><operator>.</operator><name>len</name></name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>found_base64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch<condition>(<expr><call><name>ssh_key_type</name><argument_list>(<argument><expr><name>pubkey</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<case>case <expr><name>SSH_KEYTYPE_RSA</name></expr>:</case>

<expr_stmt><expr><name><name>foundkey</name><operator>.</operator><name>keytype</name></name> <operator>=</operator> <name>CURLKHTYPE_RSA</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>SSH_KEYTYPE_RSA1</name></expr>:</case>

<expr_stmt><expr><name><name>foundkey</name><operator>.</operator><name>keytype</name></name> <operator>=</operator> <name>CURLKHTYPE_RSA1</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>SSH_KEYTYPE_ECDSA</name></expr>:</case>

<expr_stmt><expr><name><name>foundkey</name><operator>.</operator><name>keytype</name></name> <operator>=</operator> <name>CURLKHTYPE_ECDSA</name></expr>;</expr_stmt>

<break>break;</break>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LIBSSH_VERSION_INT</name> <operator>&gt;=</operator> <call><name>SSH_VERSION_INT</name><argument_list>(<argument><expr><literal type="number">0</literal><operator>,</operator><literal type="number">7</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<case>case <expr><name>SSH_KEYTYPE_ED25519</name></expr>:</case>

<expr_stmt><expr><name><name>foundkey</name><operator>.</operator><name>keytype</name></name> <operator>=</operator> <name>CURLKHTYPE_ED25519</name></expr>;</expr_stmt>

<break>break;</break>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<case>case <expr><name>SSH_KEYTYPE_DSS</name></expr>:</case>

<expr_stmt><expr><name><name>foundkey</name><operator>.</operator><name>keytype</name></name> <operator>=</operator> <name>CURLKHTYPE_DSS</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SSH_ERROR</name></expr>;</expr_stmt>

<goto>goto <name>cleanup</name>;</goto>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>Curl_set_in_callback</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>func</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>knownkeyp</name></expr></argument>, 

<argument><expr><operator>&amp;</operator><name>foundkey</name></expr></argument>, 

<argument><expr><name>keymatch</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>ssh_keyfunc_userp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_set_in_callback</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch<condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>CURLKHSTAT_FINE_ADD_TO_FILE</name></expr>:</case>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LIBSSH_VERSION_INT</name> <operator>&gt;=</operator> <call><name>SSH_VERSION_INT</name><argument_list>(<argument><expr><literal type="number">0</literal><operator>,</operator><literal type="number">8</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>ssh_session_update_known_hosts</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>ssh_session</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>ssh_write_knownhost</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>ssh_session</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>!=</operator> <name>SSH_OK</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>cleanup</name>;</goto>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>CURLKHSTAT_FINE</name></expr>:</case>

<break>break;</break>

<default>default:</default> 

<expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SSH_ERROR</name></expr>;</expr_stmt>

<goto>goto <name>cleanup</name>;</goto>

</block_content>}</block></switch>

</block_content>}</block></if>

<else>else <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>keymatch</name> <operator>!=</operator> <name>CURLKHMATCH_OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SSH_ERROR</name></expr>;</expr_stmt>

<goto>goto <name>cleanup</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SSH_OK</name></expr>;</expr_stmt>

<label><name>cleanup</name>:</label>

<if_stmt><if>if<condition>(<expr><name>found_base64</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>found_base64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>known_base64</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>known_base64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>hash</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ssh_clean_pubkey_hash</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ssh_key_free</name><argument_list>(<argument><expr><name>pubkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LIBSSH_VERSION_INT</name> <operator>&gt;=</operator> <call><name>SSH_VERSION_INT</name><argument_list>(<argument><expr><literal type="number">0</literal><operator>,</operator><literal type="number">9</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if<condition>(<expr><name>knownhostsentry</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ssh_knownhosts_entry_free</name><argument_list>(<argument><expr><name>knownhostsentry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>rc</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOVE_TO_ERROR_STATE</name><parameter_list>(<parameter><type><name>_r</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ state(conn, SSH_SESSION_DISCONNECT); sshc-&gt;actualcode = _r; rc = SSH_ERROR; break; }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOVE_TO_SFTP_CLOSE_STATE</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>{ state(conn, SSH_SFTP_CLOSE); sshc-&gt;actualcode = sftp_error_to_CURLE(sftp_get_error(sshc-&gt;sftp_session)); rc = SSH_ERROR; break; }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOVE_TO_LAST_AUTH</name></cpp:macro> <cpp:value>if(sshc-&gt;auth_methods &amp; SSH_AUTH_METHOD_PASSWORD) { rc = SSH_OK; state(conn, SSH_AUTH_PASS_INIT); break; } else { MOVE_TO_ERROR_STATE(CURLE_LOGIN_DENIED); }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOVE_TO_TERTIARY_AUTH</name></cpp:macro> <cpp:value>if(sshc-&gt;auth_methods &amp; SSH_AUTH_METHOD_INTERACTIVE) { rc = SSH_OK; state(conn, SSH_AUTH_KEY_INIT); break; } else { MOVE_TO_LAST_AUTH; }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOVE_TO_SECONDARY_AUTH</name></cpp:macro> <cpp:value>if(sshc-&gt;auth_methods &amp; SSH_AUTH_METHOD_GSSAPI_MIC) { rc = SSH_OK; state(conn, SSH_AUTH_GSSAPI); break; } else { MOVE_TO_TERTIARY_AUTH; }</cpp:value></cpp:define>

<function><type><specifier>static</specifier>

<name>int</name></type> <name>myssh_auth_interactive</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ssh_conn</name></name> <modifier>*</modifier></type><name>sshc</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>sshc</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nprompts</name></decl>;</decl_stmt>

<label><name>restart</name>:</label>

<switch>switch<condition>(<expr><name><name>sshc</name><operator>-&gt;</operator><name>kbd_state</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>ssh_userauth_kbdint</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>ssh_session</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>==</operator> <name>SSH_AUTH_AGAIN</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>SSH_AGAIN</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>!=</operator> <name>SSH_AUTH_INFO</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>SSH_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>nprompts</name> <operator>=</operator> <call><name>ssh_userauth_kbdint_getnprompts</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>ssh_session</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>nprompts</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>SSH_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>ssh_userauth_kbdint_setanswer</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>ssh_session</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>passwd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>SSH_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>kbd_state</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>ssh_userauth_kbdint</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>ssh_session</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>==</operator> <name>SSH_AUTH_AGAIN</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>SSH_AGAIN</name></expr>;</return></block_content></block></if>

<if type="elseif">else if<condition>(<expr><name>rc</name> <operator>==</operator> <name>SSH_AUTH_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SSH_OK</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>(<expr><name>rc</name> <operator>==</operator> <name>SSH_AUTH_INFO</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>nprompts</name> <operator>=</operator> <call><name>ssh_userauth_kbdint_getnprompts</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>ssh_session</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>nprompts</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>SSH_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>kbd_state</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<goto>goto <name>restart</name>;</goto>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SSH_ERROR</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>kbd_state</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>ssh_userauth_kbdint</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>ssh_session</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>==</operator> <name>SSH_AUTH_AGAIN</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>SSH_AGAIN</name></expr>;</return></block_content></block></if>

<if type="elseif">else if<condition>(<expr><name>rc</name> <operator>==</operator> <name>SSH_AUTH_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SSH_OK</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SSH_ERROR</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<break>break;</break>

<default>default:</default>

<return>return <expr><name>SSH_ERROR</name></expr>;</return>

</block_content>}</block></switch>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>kbd_state</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>rc</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>myssh_statemach_act</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>block</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>SSHPROTO</name></name> <modifier>*</modifier></type><name>protop</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>protop</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ssh_conn</name></name> <modifier>*</modifier></type><name>sshc</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>sshc</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>curl_socket_t</name></type> <name>sock</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>sock</name><index>[<expr><name>FIRSTSOCKET</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>SSH_NO_ERROR</name></expr></init></decl>, <decl><type ref="prev"/><name>err</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>new_readdir_line</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>seekerr</name> <init>= <expr><name>CURL_SEEKFUNC_OK</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>err_msg</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>block</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<do>do <block>{<block_content>

<switch>switch<condition>(<expr><name><name>sshc</name><operator>-&gt;</operator><name>state</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>SSH_INIT</name></expr>:</case>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>secondCreateDirs</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>nextstate</name></name> <operator>=</operator> <name>SSH_NO_STATE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>actualcode</name></name> <operator>=</operator> <name>CURLE_OK</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

ssh_set_log_level(SSH_LOG_PROTOCOL);

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>ssh_set_blocking</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>ssh_session</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_S_STARTUP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><name>SSH_S_STARTUP</name></expr>:</case>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>ssh_connect</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>ssh_session</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>==</operator> <name>SSH_AGAIN</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>!=</operator> <name>SSH_OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Failure establishing ssh session"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MOVE_TO_ERROR_STATE</name><argument_list>(<argument><expr><name>CURLE_FAILED_INIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_HOSTKEY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><name>SSH_HOSTKEY</name></expr>:</case>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>myssh_is_known</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>!=</operator> <name>SSH_OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>MOVE_TO_ERROR_STATE</name><argument_list>(<argument><expr><name>CURLE_PEER_FAILED_VERIFICATION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_AUTHLIST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><name>SSH_AUTHLIST</name></expr>:</case><block>{<block_content>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>authed</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>ssh_userauth_none</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>ssh_session</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>==</operator> <name>SSH_AUTH_AGAIN</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SSH_AGAIN</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>==</operator> <name>SSH_AUTH_SUCCESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>authed</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Authenticated with none\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_AUTH_DONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name>rc</name> <operator>==</operator> <name>SSH_AUTH_ERROR</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>MOVE_TO_ERROR_STATE</name><argument_list>(<argument><expr><name>CURLE_LOGIN_DENIED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>auth_methods</name></name> <operator>=</operator> <call><name>ssh_userauth_list</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>ssh_session</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>sshc</name><operator>-&gt;</operator><name>auth_methods</name></name> <operator>&amp;</operator> <name>SSH_AUTH_METHOD_PUBLICKEY</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_AUTH_PKEY_INIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Authentication using SSH public key file\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name><name>sshc</name><operator>-&gt;</operator><name>auth_methods</name></name> <operator>&amp;</operator> <name>SSH_AUTH_METHOD_GSSAPI_MIC</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_AUTH_GSSAPI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name><name>sshc</name><operator>-&gt;</operator><name>auth_methods</name></name> <operator>&amp;</operator> <name>SSH_AUTH_METHOD_INTERACTIVE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_AUTH_KEY_INIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name><name>sshc</name><operator>-&gt;</operator><name>auth_methods</name></name> <operator>&amp;</operator> <name>SSH_AUTH_METHOD_PASSWORD</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_AUTH_PASS_INIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content> 

<expr_stmt><expr><call><name>MOVE_TO_ERROR_STATE</name><argument_list>(<argument><expr><name>CURLE_LOGIN_DENIED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>SSH_AUTH_PKEY_INIT</name></expr>:</case>

<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>ssh_auth_types</name></name> <operator>&amp;</operator> <name>CURLSSH_AUTH_PUBLICKEY</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>MOVE_TO_SECONDARY_AUTH</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_SSH_PRIVATE_KEY</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>sshc</name><operator>-&gt;</operator><name>pubkey</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>ssl</name><operator>.</operator><name>key_passwd</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>ssh_userauth_try_publickey</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>ssh_session</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>pubkey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>==</operator> <name>SSH_AUTH_AGAIN</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SSH_AGAIN</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>!=</operator> <name>SSH_OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>MOVE_TO_SECONDARY_AUTH</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>ssh_pki_import_privkey_file</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator>

<name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_SSH_PRIVATE_KEY</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>ssl</name><operator>.</operator><name>key_passwd</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sshc</name><operator>-&gt;</operator><name>privkey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>!=</operator> <name>SSH_OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Could not load private key file %s"</literal></expr></argument>,

<argument><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_SSH_PRIVATE_KEY</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MOVE_TO_ERROR_STATE</name><argument_list>(<argument><expr><name>CURLE_LOGIN_DENIED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_AUTH_PKEY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>ssh_userauth_publickey_auto</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>ssh_session</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>ssl</name><operator>.</operator><name>key_passwd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>==</operator> <name>SSH_AUTH_AGAIN</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SSH_AGAIN</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>==</operator> <name>SSH_AUTH_SUCCESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SSH_OK</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>authed</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Completed public key authentication\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_AUTH_DONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>MOVE_TO_SECONDARY_AUTH</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>SSH_AUTH_PKEY</name></expr>:</case>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>ssh_userauth_publickey</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>ssh_session</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>privkey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>==</operator> <name>SSH_AUTH_AGAIN</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SSH_AGAIN</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>==</operator> <name>SSH_AUTH_SUCCESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>authed</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Completed public key authentication\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_AUTH_DONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Failed public key authentication (rc: %d)\n"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>MOVE_TO_SECONDARY_AUTH</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>SSH_AUTH_GSSAPI</name></expr>:</case>

<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>ssh_auth_types</name></name> <operator>&amp;</operator> <name>CURLSSH_AUTH_GSSAPI</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>MOVE_TO_TERTIARY_AUTH</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>ssh_userauth_gssapi</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>ssh_session</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>==</operator> <name>SSH_AUTH_AGAIN</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SSH_AGAIN</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>==</operator> <name>SSH_AUTH_SUCCESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SSH_OK</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>authed</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Completed gssapi authentication\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_AUTH_DONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>MOVE_TO_TERTIARY_AUTH</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>SSH_AUTH_KEY_INIT</name></expr>:</case>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>ssh_auth_types</name></name> <operator>&amp;</operator> <name>CURLSSH_AUTH_KEYBOARD</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_AUTH_KEY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>MOVE_TO_LAST_AUTH</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>SSH_AUTH_KEY</name></expr>:</case>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>myssh_auth_interactive</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>==</operator> <name>SSH_AGAIN</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>==</operator> <name>SSH_OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>authed</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"completed keyboard interactive authentication\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_AUTH_DONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>SSH_AUTH_PASS_INIT</name></expr>:</case>

<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>ssh_auth_types</name></name> <operator>&amp;</operator> <name>CURLSSH_AUTH_PASSWORD</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>MOVE_TO_ERROR_STATE</name><argument_list>(<argument><expr><name>CURLE_LOGIN_DENIED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_AUTH_PASS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><name>SSH_AUTH_PASS</name></expr>:</case>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>ssh_userauth_password</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>ssh_session</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>passwd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>==</operator> <name>SSH_AUTH_AGAIN</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SSH_AGAIN</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>==</operator> <name>SSH_AUTH_SUCCESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>authed</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Completed password authentication\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_AUTH_DONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>MOVE_TO_ERROR_STATE</name><argument_list>(<argument><expr><name>CURLE_LOGIN_DENIED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>SSH_AUTH_DONE</name></expr>:</case>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>sshc</name><operator>-&gt;</operator><name>authed</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Authentication failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MOVE_TO_ERROR_STATE</name><argument_list>(<argument><expr><name>CURLE_LOGIN_DENIED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Authentication complete\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_pgrsTime</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>TIMER_APPCONNECT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>sockfd</name></name> <operator>=</operator> <name>sock</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>writesockfd</name></name> <operator>=</operator> <name>CURL_SOCKET_BAD</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>handler</name><operator>-&gt;</operator><name>protocol</name></name> <operator>==</operator> <name>CURLPROTO_SFTP</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SFTP_INIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"SSH CONNECT phase done\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_STOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>SSH_SFTP_INIT</name></expr>:</case>

<expr_stmt><expr><call><name>ssh_set_blocking</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>ssh_session</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>sftp_session</name></name> <operator>=</operator> <call><name>sftp_new</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>ssh_session</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>sshc</name><operator>-&gt;</operator><name>sftp_session</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Failure initializing sftp session: %s"</literal></expr></argument>,

<argument><expr><call><name>ssh_get_error</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>ssh_session</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MOVE_TO_ERROR_STATE</name><argument_list>(<argument><expr><name>CURLE_COULDNT_CONNECT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sftp_init</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>sftp_session</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>!=</operator> <name>SSH_OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sftp_get_error</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>sftp_session</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Failure initializing sftp session: %s"</literal></expr></argument>,

<argument><expr><call><name>ssh_get_error</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>ssh_session</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MOVE_TO_ERROR_STATE</name><argument_list>(<argument><expr><call><name>sftp_error_to_CURLE</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SFTP_REALPATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><name>SSH_SFTP_REALPATH</name></expr>:</case>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>homedir</name></name> <operator>=</operator> <call><name>sftp_canonicalize_path</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>sftp_session</name></name></expr></argument>, <argument><expr><literal type="string">"."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>sshc</name><operator>-&gt;</operator><name>homedir</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>MOVE_TO_ERROR_STATE</name><argument_list>(<argument><expr><name>CURLE_COULDNT_CONNECT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>most_recent_ftp_entrypath</name></name> <operator>=</operator> <name><name>sshc</name><operator>-&gt;</operator><name>homedir</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DEBUGF</name><argument_list>(<argument><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"SSH CONNECT phase done\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_STOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>SSH_SFTP_QUOTE_INIT</name></expr>:</case>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_getworkingpath</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>homedir</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>protop</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>actualcode</name></name> <operator>=</operator> <name>result</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_STOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>quote</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Sending quote commands\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>quote_item</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>quote</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SFTP_QUOTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SFTP_GETINFO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>SSH_SFTP_POSTQUOTE_INIT</name></expr>:</case>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>postquote</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Sending quote commands\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>quote_item</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>postquote</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SFTP_QUOTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_STOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>SSH_SFTP_QUOTE</name></expr>:</case>

<expr_stmt><expr><call><name>sftp_quote</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>SSH_SFTP_NEXT_QUOTE</name></expr>:</case>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>quote_path1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>quote_path2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>quote_item</name></name> <operator>=</operator> <name><name>sshc</name><operator>-&gt;</operator><name>quote_item</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>sshc</name><operator>-&gt;</operator><name>quote_item</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SFTP_QUOTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>sshc</name><operator>-&gt;</operator><name>nextstate</name></name> <operator>!=</operator> <name>SSH_NO_STATE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>nextstate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>nextstate</name></name> <operator>=</operator> <name>SSH_NO_STATE</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SFTP_GETINFO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>SSH_SFTP_QUOTE_STAT</name></expr>:</case>

<expr_stmt><expr><call><name>sftp_quote_stat</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>SSH_SFTP_QUOTE_SETSTAT</name></expr>:</case>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sftp_setstat</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>sftp_session</name></name></expr></argument>, <argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>quote_path2</name></name></expr></argument>,

<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>quote_attrs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>sshc</name><operator>-&gt;</operator><name>acceptfail</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>quote_path1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>quote_path2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Attempt to set SFTP stats failed: %s"</literal></expr></argument>,

<argument><expr><call><name>ssh_get_error</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>ssh_session</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SFTP_CLOSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>nextstate</name></name> <operator>=</operator> <name>SSH_NO_STATE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>actualcode</name></name> <operator>=</operator> <name>CURLE_QUOTE_ERROR</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SFTP_NEXT_QUOTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>SSH_SFTP_QUOTE_SYMLINK</name></expr>:</case>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sftp_symlink</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>sftp_session</name></name></expr></argument>, <argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>quote_path2</name></name></expr></argument>,

<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>quote_path1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>sshc</name><operator>-&gt;</operator><name>acceptfail</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>quote_path1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>quote_path2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"symlink command failed: %s"</literal></expr></argument>,

<argument><expr><call><name>ssh_get_error</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>ssh_session</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SFTP_CLOSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>nextstate</name></name> <operator>=</operator> <name>SSH_NO_STATE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>actualcode</name></name> <operator>=</operator> <name>CURLE_QUOTE_ERROR</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SFTP_NEXT_QUOTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>SSH_SFTP_QUOTE_MKDIR</name></expr>:</case>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sftp_mkdir</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>sftp_session</name></name></expr></argument>, <argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>quote_path1</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>mode_t</name><operator>)</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>new_directory_perms</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>sshc</name><operator>-&gt;</operator><name>acceptfail</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>quote_path1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"mkdir command failed: %s"</literal></expr></argument>,

<argument><expr><call><name>ssh_get_error</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>ssh_session</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SFTP_CLOSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>nextstate</name></name> <operator>=</operator> <name>SSH_NO_STATE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>actualcode</name></name> <operator>=</operator> <name>CURLE_QUOTE_ERROR</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SFTP_NEXT_QUOTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>SSH_SFTP_QUOTE_RENAME</name></expr>:</case>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sftp_rename</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>sftp_session</name></name></expr></argument>, <argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>quote_path1</name></name></expr></argument>,

<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>quote_path2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>sshc</name><operator>-&gt;</operator><name>acceptfail</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>quote_path1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>quote_path2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"rename command failed: %s"</literal></expr></argument>,

<argument><expr><call><name>ssh_get_error</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>ssh_session</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SFTP_CLOSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>nextstate</name></name> <operator>=</operator> <name>SSH_NO_STATE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>actualcode</name></name> <operator>=</operator> <name>CURLE_QUOTE_ERROR</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SFTP_NEXT_QUOTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>SSH_SFTP_QUOTE_RMDIR</name></expr>:</case>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sftp_rmdir</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>sftp_session</name></name></expr></argument>, <argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>quote_path1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>sshc</name><operator>-&gt;</operator><name>acceptfail</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>quote_path1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"rmdir command failed: %s"</literal></expr></argument>,

<argument><expr><call><name>ssh_get_error</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>ssh_session</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SFTP_CLOSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>nextstate</name></name> <operator>=</operator> <name>SSH_NO_STATE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>actualcode</name></name> <operator>=</operator> <name>CURLE_QUOTE_ERROR</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SFTP_NEXT_QUOTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>SSH_SFTP_QUOTE_UNLINK</name></expr>:</case>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sftp_unlink</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>sftp_session</name></name></expr></argument>, <argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>quote_path1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>sshc</name><operator>-&gt;</operator><name>acceptfail</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>quote_path1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"rm command failed: %s"</literal></expr></argument>,

<argument><expr><call><name>ssh_get_error</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>ssh_session</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SFTP_CLOSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>nextstate</name></name> <operator>=</operator> <name>SSH_NO_STATE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>actualcode</name></name> <operator>=</operator> <name>CURLE_QUOTE_ERROR</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SFTP_NEXT_QUOTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>SSH_SFTP_QUOTE_STATVFS</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>sftp_statvfs_t</name></type> <name>statvfs</name></decl>;</decl_stmt>

<expr_stmt><expr><name>statvfs</name> <operator>=</operator> <call><name>sftp_statvfs</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>sftp_session</name></name></expr></argument>, <argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>quote_path1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>statvfs</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>sshc</name><operator>-&gt;</operator><name>acceptfail</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>quote_path1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"statvfs command failed: %s"</literal></expr></argument>,

<argument><expr><call><name>ssh_get_error</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>ssh_session</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SFTP_CLOSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>nextstate</name></name> <operator>=</operator> <name>SSH_NO_STATE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>actualcode</name></name> <operator>=</operator> <name>CURLE_QUOTE_ERROR</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name>statvfs</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><call><name>aprintf</name><argument_list>(<argument><expr><literal type="string">"statvfs:\n"</literal>

<literal type="string">"f_bsize: %llu\n"</literal> <literal type="string">"f_frsize: %llu\n"</literal>

<literal type="string">"f_blocks: %llu\n"</literal> <literal type="string">"f_bfree: %llu\n"</literal>

<literal type="string">"f_bavail: %llu\n"</literal> <literal type="string">"f_files: %llu\n"</literal>

<literal type="string">"f_ffree: %llu\n"</literal> <literal type="string">"f_favail: %llu\n"</literal>

<literal type="string">"f_fsid: %llu\n"</literal> <literal type="string">"f_flag: %llu\n"</literal>

<literal type="string">"f_namemax: %llu\n"</literal></expr></argument>,

<argument><expr><name><name>statvfs</name><operator>-&gt;</operator><name>f_bsize</name></name></expr></argument>, <argument><expr><name><name>statvfs</name><operator>-&gt;</operator><name>f_frsize</name></name></expr></argument>,

<argument><expr><name><name>statvfs</name><operator>-&gt;</operator><name>f_blocks</name></name></expr></argument>, <argument><expr><name><name>statvfs</name><operator>-&gt;</operator><name>f_bfree</name></name></expr></argument>,

<argument><expr><name><name>statvfs</name><operator>-&gt;</operator><name>f_bavail</name></name></expr></argument>, <argument><expr><name><name>statvfs</name><operator>-&gt;</operator><name>f_files</name></name></expr></argument>,

<argument><expr><name><name>statvfs</name><operator>-&gt;</operator><name>f_ffree</name></name></expr></argument>, <argument><expr><name><name>statvfs</name><operator>-&gt;</operator><name>f_favail</name></name></expr></argument>,

<argument><expr><name><name>statvfs</name><operator>-&gt;</operator><name>f_fsid</name></name></expr></argument>, <argument><expr><name><name>statvfs</name><operator>-&gt;</operator><name>f_flag</name></name></expr></argument>,

<argument><expr><name><name>statvfs</name><operator>-&gt;</operator><name>f_namemax</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>sftp_statvfs_free</name><argument_list>(<argument><expr><name>statvfs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>tmp</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_OUT_OF_MEMORY</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SFTP_CLOSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>nextstate</name></name> <operator>=</operator> <name>SSH_NO_STATE</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_client_write</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>CLIENTWRITE_HEADER</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SFTP_CLOSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>nextstate</name></name> <operator>=</operator> <name>SSH_NO_STATE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>actualcode</name></name> <operator>=</operator> <name>result</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SFTP_NEXT_QUOTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>SSH_SFTP_GETINFO</name></expr>:</case>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>get_filetime</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SFTP_FILETIME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SFTP_TRANS_INIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>SSH_SFTP_FILETIME</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>sftp_attributes</name></type> <name>attrs</name></decl>;</decl_stmt>

<expr_stmt><expr><name>attrs</name> <operator>=</operator> <call><name>sftp_stat</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>sftp_session</name></name></expr></argument>, <argument><expr><name><name>protop</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>attrs</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>filetime</name></name> <operator>=</operator> <name><name>attrs</name><operator>-&gt;</operator><name>mtime</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sftp_attributes_free</name><argument_list>(<argument><expr><name>attrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SFTP_TRANS_INIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>SSH_SFTP_TRANS_INIT</name></expr>:</case>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>upload</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SFTP_UPLOAD_INIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>protop</name><operator>-&gt;</operator><name>path</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>protop</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SFTP_READDIR_INIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SFTP_DOWNLOAD_INIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>SSH_SFTP_UPLOAD_INIT</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>resume_from</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>sftp_attributes</name></type> <name>attrs</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>resume_from</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>attrs</name> <operator>=</operator> <call><name>sftp_stat</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>sftp_session</name></name></expr></argument>, <argument><expr><name><name>protop</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>attrs</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>curl_off_t</name></type> <name>size</name> <init>= <expr><name><name>attrs</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>size</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Bad file size (%"</literal> <name>CURL_FORMAT_CURL_OFF_T</name> <literal type="string">")"</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MOVE_TO_ERROR_STATE</name><argument_list>(<argument><expr><name>CURLE_BAD_DOWNLOAD_RESUME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>resume_from</name></name> <operator>=</operator> <name><name>attrs</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sftp_attributes_free</name><argument_list>(<argument><expr><name>attrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>resume_from</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>ftp_append</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>flags</name> <operator>=</operator> <name>O_WRONLY</name><operator>|</operator><name>O_CREAT</name><operator>|</operator><name>O_APPEND</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>resume_from</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>flags</name> <operator>=</operator> <name>O_WRONLY</name><operator>|</operator><name>O_APPEND</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>flags</name> <operator>=</operator> <name>O_WRONLY</name><operator>|</operator><name>O_CREAT</name><operator>|</operator><name>O_TRUNC</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>sshc</name><operator>-&gt;</operator><name>sftp_file</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>sftp_close</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>sftp_file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>sftp_file</name></name> <operator>=</operator>

<call><name>sftp_open</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>sftp_session</name></name></expr></argument>, <argument><expr><name><name>protop</name><operator>-&gt;</operator><name>path</name></name></expr></argument>,

<argument><expr><name>flags</name></expr></argument>, <argument><expr><operator>(</operator><name>mode_t</name><operator>)</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>new_file_perms</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>sshc</name><operator>-&gt;</operator><name>sftp_file</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>sftp_get_error</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>sftp_session</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><operator>(</operator><name>err</name> <operator>==</operator> <name>SSH_FX_NO_SUCH_FILE</name> <operator>||</operator> <name>err</name> <operator>==</operator> <name>SSH_FX_FAILURE</name> <operator>||</operator>

<name>err</name> <operator>==</operator> <name>SSH_FX_NO_SUCH_PATH</name><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>ftp_create_missing_dirs</name></name> <operator>&amp;&amp;</operator>

<operator>(</operator><call><name>strlen</name><argument_list>(<argument><expr><name><name>protop</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>secondCreateDirs</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SFTP_CREATE_DIRS_INIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>MOVE_TO_SFTP_CLOSE_STATE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>resume_from</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>seek_func</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>Curl_set_in_callback</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>seekerr</name> <operator>=</operator> <call><name><name>conn</name><operator>-&gt;</operator><name>seek_func</name></name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>seek_client</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>resume_from</name></name></expr></argument>,

<argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_set_in_callback</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>seekerr</name> <operator>!=</operator> <name>CURL_SEEKFUNC_OK</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>curl_off_t</name></type> <name>passed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>seekerr</name> <operator>!=</operator> <name>CURL_SEEKFUNC_CANTSEEK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Could not seek stream"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_FTP_COULDNT_USE_REST</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<do>do <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>readthisamountnow</name> <init>=

<expr><ternary><condition><expr><operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>resume_from</name></name> <operator>-</operator> <name>passed</name> <operator>&gt;</operator> <name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>buffer_size</name></name><operator>)</operator></expr> ?</condition><then>

<expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>buffer_size</name></name></expr> </then><else>:

<expr><call><name>curlx_sotouz</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>resume_from</name></name> <operator>-</operator> <name>passed</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>actuallyread</name> <init>=

<expr><call><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>fread_func</name></name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,

<argument><expr><name>readthisamountnow</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>in</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>passed</name> <operator>+=</operator> <name>actuallyread</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>actuallyread</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>actuallyread</name> <operator>&gt;</operator> <name>readthisamountnow</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Failed to read data"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MOVE_TO_ERROR_STATE</name><argument_list>(<argument><expr><name>CURLE_FTP_COULDNT_USE_REST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block> while<condition>(<expr><name>passed</name> <operator>&lt;</operator> <name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>resume_from</name></name></expr>)</condition>;</do>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>infilesize</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>infilesize</name></name> <operator>-=</operator> <name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>resume_from</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>size</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>infilesize</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_pgrsSetUploadSize</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>infilesize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sftp_seek64</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>sftp_file</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>resume_from</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>MOVE_TO_SFTP_CLOSE_STATE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>infilesize</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>size</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>infilesize</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_pgrsSetUploadSize</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>infilesize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>Curl_setup_transfer</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FIRSTSOCKET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>sockfd</name></name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>writesockfd</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>orig_waitfor</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>keepon</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>cselect_bits</name></name> <operator>=</operator> <name>CURL_CSELECT_OUT</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_expire</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>EXPIRE_RUN_NOW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_STOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>SSH_SFTP_CREATE_DIRS_INIT</name></expr>:</case>

<if_stmt><if>if<condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>protop</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>slash_pos</name></name> <operator>=</operator> <name><name>protop</name><operator>-&gt;</operator><name>path</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SFTP_CREATE_DIRS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SFTP_UPLOAD_INIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>SSH_SFTP_CREATE_DIRS</name></expr>:</case>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>slash_pos</name></name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>slash_pos</name></name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>sshc</name><operator>-&gt;</operator><name>slash_pos</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name><name>sshc</name><operator>-&gt;</operator><name>slash_pos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Creating directory '%s'\n"</literal></expr></argument>, <argument><expr><name><name>protop</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SFTP_CREATE_DIRS_MKDIR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SFTP_UPLOAD_INIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>SSH_SFTP_CREATE_DIRS_MKDIR</name></expr>:</case>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sftp_mkdir</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>sftp_session</name></name></expr></argument>, <argument><expr><name><name>protop</name><operator>-&gt;</operator><name>path</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>mode_t</name><operator>)</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>new_directory_perms</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name><name>sshc</name><operator>-&gt;</operator><name>slash_pos</name></name> <operator>=</operator> <literal type="char">'/'</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name><name>sshc</name><operator>-&gt;</operator><name>slash_pos</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>sftp_get_error</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>sftp_session</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>err</name> <operator>!=</operator> <name>SSH_FX_FILE_ALREADY_EXISTS</name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name>err</name> <operator>!=</operator> <name>SSH_FX_FAILURE</name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name>err</name> <operator>!=</operator> <name>SSH_FX_PERMISSION_DENIED</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>MOVE_TO_SFTP_CLOSE_STATE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SFTP_CREATE_DIRS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>SSH_SFTP_READDIR_INIT</name></expr>:</case>

<expr_stmt><expr><call><name>Curl_pgrsSetDownloadSize</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>opt_no_body</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_STOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>sftp_dir</name></name> <operator>=</operator> <call><name>sftp_opendir</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>sftp_session</name></name></expr></argument>,

<argument><expr><name><name>protop</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>sshc</name><operator>-&gt;</operator><name>sftp_dir</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Could not open directory for reading: %s"</literal></expr></argument>,

<argument><expr><call><name>ssh_get_error</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>ssh_session</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MOVE_TO_SFTP_CLOSE_STATE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SFTP_READDIR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>SSH_SFTP_READDIR</name></expr>:</case>

<if_stmt><if>if<condition>(<expr><name><name>sshc</name><operator>-&gt;</operator><name>readdir_attrs</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>sftp_attributes_free</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>readdir_attrs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>readdir_attrs</name></name> <operator>=</operator> <call><name>sftp_readdir</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>sftp_session</name></name></expr></argument>, <argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>sftp_dir</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>sshc</name><operator>-&gt;</operator><name>readdir_attrs</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>readdir_filename</name></name> <operator>=</operator> <name><name>sshc</name><operator>-&gt;</operator><name>readdir_attrs</name><operator>-&gt;</operator><name>name</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>readdir_longentry</name></name> <operator>=</operator> <name><name>sshc</name><operator>-&gt;</operator><name>readdir_attrs</name><operator>-&gt;</operator><name>longname</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>readdir_len</name></name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>readdir_filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>ftp_list_only</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tmpLine</name></decl>;</decl_stmt>

<expr_stmt><expr><name>tmpLine</name> <operator>=</operator> <call><name>aprintf</name><argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>readdir_filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>tmpLine</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SFTP_CLOSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>actualcode</name></name> <operator>=</operator> <name>CURLE_OUT_OF_MEMORY</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_client_write</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>CLIENTWRITE_BODY</name></expr></argument>,

<argument><expr><name>tmpLine</name></expr></argument>, <argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>readdir_len</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>tmpLine</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_STOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>bytecount</name></name> <operator>+=</operator> <name><name>sshc</name><operator>-&gt;</operator><name>readdir_len</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>verbose</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>Curl_debug</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>CURLINFO_DATA_OUT</name></expr></argument>,

<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>sshc</name><operator>-&gt;</operator><name>readdir_filename</name></name></expr></argument>,

<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>readdir_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>readdir_currLen</name></name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>readdir_longentry</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>readdir_totalLen</name></name> <operator>=</operator> <literal type="number">80</literal> <operator>+</operator> <name><name>sshc</name><operator>-&gt;</operator><name>readdir_currLen</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>readdir_line</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>readdir_totalLen</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>sshc</name><operator>-&gt;</operator><name>readdir_line</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SFTP_CLOSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>actualcode</name></name> <operator>=</operator> <name>CURLE_OUT_OF_MEMORY</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>readdir_line</name></name></expr></argument>, <argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>readdir_longentry</name></name></expr></argument>,

<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>readdir_currLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>sshc</name><operator>-&gt;</operator><name>readdir_attrs</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SSH_FILEXFER_ATTR_PERMISSIONS</name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><operator>(</operator><name><name>sshc</name><operator>-&gt;</operator><name>readdir_attrs</name><operator>-&gt;</operator><name>permissions</name></name> <operator>&amp;</operator> <name>S_IFMT</name><operator>)</operator> <operator>==</operator>

<name>S_IFLNK</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>readdir_linkPath</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>PATH_MAX</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>sshc</name><operator>-&gt;</operator><name>readdir_linkPath</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SFTP_CLOSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>actualcode</name></name> <operator>=</operator> <name>CURLE_OUT_OF_MEMORY</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>msnprintf</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>readdir_linkPath</name></name></expr></argument>, <argument><expr><name>PATH_MAX</name></expr></argument>, <argument><expr><literal type="string">"%s%s"</literal></expr></argument>, <argument><expr><name><name>protop</name><operator>-&gt;</operator><name>path</name></name></expr></argument>,

<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>readdir_filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SFTP_READDIR_LINK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SFTP_READDIR_BOTTOM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><call><name>sftp_dir_eof</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>sftp_dir</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SFTP_READDIR_DONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Could not open remote file for reading: %s"</literal></expr></argument>,

<argument><expr><call><name>ssh_get_error</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>ssh_session</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MOVE_TO_SFTP_CLOSE_STATE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>SSH_SFTP_READDIR_LINK</name></expr>:</case>

<if_stmt><if>if<condition>(<expr><name><name>sshc</name><operator>-&gt;</operator><name>readdir_link_attrs</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>sftp_attributes_free</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>readdir_link_attrs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>readdir_link_attrs</name></name> <operator>=</operator> <call><name>sftp_lstat</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>sftp_session</name></name></expr></argument>,

<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>readdir_linkPath</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>sshc</name><operator>-&gt;</operator><name>readdir_link_attrs</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Could not read symlink for reading: %s"</literal></expr></argument>,

<argument><expr><call><name>ssh_get_error</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>ssh_session</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MOVE_TO_SFTP_CLOSE_STATE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>sshc</name><operator>-&gt;</operator><name>readdir_link_attrs</name><operator>-&gt;</operator><name>name</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>readdir_tmp</name></name> <operator>=</operator> <call><name>sftp_readlink</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>sftp_session</name></name></expr></argument>,

<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>readdir_linkPath</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>sshc</name><operator>-&gt;</operator><name>readdir_filename</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>readdir_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>readdir_len</name></name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>readdir_tmp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>readdir_longentry</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>readdir_filename</name></name> <operator>=</operator> <name><name>sshc</name><operator>-&gt;</operator><name>readdir_tmp</name></name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>readdir_len</name></name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>readdir_link_attrs</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>readdir_filename</name></name> <operator>=</operator> <name><name>sshc</name><operator>-&gt;</operator><name>readdir_link_attrs</name><operator>-&gt;</operator><name>name</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>readdir_longentry</name></name> <operator>=</operator> <name><name>sshc</name><operator>-&gt;</operator><name>readdir_link_attrs</name><operator>-&gt;</operator><name>longname</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>readdir_linkPath</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>readdir_totalLen</name></name> <operator>+=</operator> <literal type="number">4</literal> <operator>+</operator> <name><name>sshc</name><operator>-&gt;</operator><name>readdir_len</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>new_readdir_line</name> <operator>=</operator> <call><name>Curl_saferealloc</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>readdir_line</name></name></expr></argument>,

<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>readdir_totalLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>new_readdir_line</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>readdir_line</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SFTP_CLOSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>actualcode</name></name> <operator>=</operator> <name>CURLE_OUT_OF_MEMORY</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>readdir_line</name></name> <operator>=</operator> <name>new_readdir_line</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>readdir_currLen</name></name> <operator>+=</operator> <call><name>msnprintf</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>readdir_line</name></name> <operator>+</operator>

<name><name>sshc</name><operator>-&gt;</operator><name>readdir_currLen</name></name></expr></argument>,

<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>readdir_totalLen</name></name> <operator>-</operator>

<name><name>sshc</name><operator>-&gt;</operator><name>readdir_currLen</name></name></expr></argument>,

<argument><expr><literal type="string">" -&gt; %s"</literal></expr></argument>,

<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>readdir_filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sftp_attributes_free</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>readdir_link_attrs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>readdir_link_attrs</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>readdir_filename</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>readdir_longentry</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SFTP_READDIR_BOTTOM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><name>SSH_SFTP_READDIR_BOTTOM</name></expr>:</case>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>readdir_currLen</name></name> <operator>+=</operator> <call><name>msnprintf</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>readdir_line</name></name> <operator>+</operator>

<name><name>sshc</name><operator>-&gt;</operator><name>readdir_currLen</name></name></expr></argument>,

<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>readdir_totalLen</name></name> <operator>-</operator>

<name><name>sshc</name><operator>-&gt;</operator><name>readdir_currLen</name></name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_client_write</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>CLIENTWRITE_BODY</name></expr></argument>,

<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>readdir_line</name></name></expr></argument>,

<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>readdir_currLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>result</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>verbose</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>Curl_debug</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>CURLINFO_DATA_OUT</name></expr></argument>, <argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>readdir_line</name></name></expr></argument>,

<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>readdir_currLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>bytecount</name></name> <operator>+=</operator> <name><name>sshc</name><operator>-&gt;</operator><name>readdir_currLen</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>readdir_line</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ssh_string_free_char</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>readdir_tmp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>readdir_tmp</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_STOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SFTP_READDIR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>SSH_SFTP_READDIR_DONE</name></expr>:</case>

<expr_stmt><expr><call><name>sftp_closedir</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>sftp_dir</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>sftp_dir</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_setup_transfer</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_STOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>SSH_SFTP_DOWNLOAD_INIT</name></expr>:</case>

<if_stmt><if>if<condition>(<expr><name><name>sshc</name><operator>-&gt;</operator><name>sftp_file</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>sftp_close</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>sftp_file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>sftp_file</name></name> <operator>=</operator> <call><name>sftp_open</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>sftp_session</name></name></expr></argument>, <argument><expr><name><name>protop</name><operator>-&gt;</operator><name>path</name></name></expr></argument>,

<argument><expr><name>O_RDONLY</name></expr></argument>, <argument><expr><operator>(</operator><name>mode_t</name><operator>)</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>new_file_perms</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>sshc</name><operator>-&gt;</operator><name>sftp_file</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Could not open remote file for reading: %s"</literal></expr></argument>,

<argument><expr><call><name>ssh_get_error</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>ssh_session</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MOVE_TO_SFTP_CLOSE_STATE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SFTP_DOWNLOAD_STAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>SSH_SFTP_DOWNLOAD_STAT</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>sftp_attributes</name></type> <name>attrs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>curl_off_t</name></type> <name>size</name></decl>;</decl_stmt>

<expr_stmt><expr><name>attrs</name> <operator>=</operator> <call><name>sftp_fstat</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>sftp_file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>attrs</name> <operator>||</operator>

<operator>!</operator><operator>(</operator><name><name>attrs</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SSH_FILEXFER_ATTR_SIZE</name><operator>)</operator> <operator>||</operator>

<operator>(</operator><name><name>attrs</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>size</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>maxdownload</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_pgrsSetDownloadSize</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>size</name> <operator>=</operator> <name><name>attrs</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sftp_attributes_free</name><argument_list>(<argument><expr><name>attrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>size</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Bad file size (%"</literal> <name>CURL_FORMAT_CURL_OFF_T</name> <literal type="string">")"</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_BAD_DOWNLOAD_RESUME</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>use_range</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>curl_off_t</name></type> <name>from</name></decl>, <decl><type ref="prev"/><name>to</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CURLofft</name></type> <name>to_t</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CURLofft</name></type> <name>from_t</name></decl>;</decl_stmt>

<expr_stmt><expr><name>from_t</name> <operator>=</operator> <call><name>curlx_strtoofft</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>range</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>from_t</name> <operator>==</operator> <name>CURL_OFFT_FLOW</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>CURLE_RANGE_ERROR</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<while>while<condition>(<expr><operator>*</operator><name>ptr</name> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>ISSPACE</name><argument_list>(<argument><expr><operator>*</operator><name>ptr</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">'-'</literal><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name>to_t</name> <operator>=</operator> <call><name>curlx_strtoofft</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ptr2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>to</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>to_t</name> <operator>==</operator> <name>CURL_OFFT_FLOW</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>CURLE_RANGE_ERROR</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>to_t</name> <operator>==</operator> <name>CURL_OFFT_INVAL</name><operator>)</operator> 

<operator>||</operator> <operator>(</operator><name>to</name> <operator>&gt;=</operator> <name>size</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>to</name> <operator>=</operator> <name>size</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>from_t</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>from</name> <operator>=</operator> <name>size</name> <operator>-</operator> <name>to</name></expr>;</expr_stmt>

<expr_stmt><expr><name>to</name> <operator>=</operator> <name>size</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>from</name> <operator>&gt;</operator> <name>size</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Offset (%"</literal>

<name>CURL_FORMAT_CURL_OFF_T</name> <literal type="string">") was beyond file size (%"</literal>

<name>CURL_FORMAT_CURL_OFF_T</name> <literal type="string">")"</literal></expr></argument>, <argument><expr><name>from</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_BAD_DOWNLOAD_RESUME</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>from</name> <operator>&gt;</operator> <name>to</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>from</name> <operator>=</operator> <name>to</name></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>size</name> <operator>=</operator> <name>to</name> <operator>-</operator> <name>from</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sftp_seek64</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>sftp_file</name></name></expr></argument>, <argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>MOVE_TO_SFTP_CLOSE_STATE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>maxdownload</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_pgrsSetDownloadSize</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>resume_from</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>resume_from</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>curl_off_t</name><operator>)</operator><name>size</name> <operator>&lt;</operator> <operator>-</operator><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>resume_from</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Offset (%"</literal>

<name>CURL_FORMAT_CURL_OFF_T</name> <literal type="string">") was beyond file size (%"</literal>

<name>CURL_FORMAT_CURL_OFF_T</name> <literal type="string">")"</literal></expr></argument>,

<argument><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>resume_from</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_BAD_DOWNLOAD_RESUME</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>resume_from</name></name> <operator>+=</operator> <name>size</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>curl_off_t</name><operator>)</operator><name>size</name> <operator>&lt;</operator> <name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>resume_from</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Offset (%"</literal> <name>CURL_FORMAT_CURL_OFF_T</name>

<literal type="string">") was beyond file size (%"</literal> <name>CURL_FORMAT_CURL_OFF_T</name> <literal type="string">")"</literal></expr></argument>,

<argument><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>resume_from</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_BAD_DOWNLOAD_RESUME</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>size</name></name> <operator>=</operator> <name>size</name> <operator>-</operator> <name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>resume_from</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>maxdownload</name></name> <operator>=</operator> <name>size</name> <operator>-</operator> <name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>resume_from</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_pgrsSetDownloadSize</name><argument_list>(<argument><expr><name>data</name></expr></argument>,

<argument><expr><name>size</name> <operator>-</operator> <name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>resume_from</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sftp_seek64</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>sftp_file</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>resume_from</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>MOVE_TO_SFTP_CLOSE_STATE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>size</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>Curl_setup_transfer</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"File already completely downloaded\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_STOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>Curl_setup_transfer</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>FIRSTSOCKET</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>size</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>writesockfd</name></name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>sockfd</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>cselect_bits</name></name> <operator>=</operator> <name>CURL_CSELECT_IN</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SFTP_CLOSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>actualcode</name></name> <operator>=</operator> <name>result</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>sftp_recv_state</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_STOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>SSH_SFTP_CLOSE</name></expr>:</case>

<if_stmt><if>if<condition>(<expr><name><name>sshc</name><operator>-&gt;</operator><name>sftp_file</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>sftp_close</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>sftp_file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>sftp_file</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>protop</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DEBUGF</name><argument_list>(<argument><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"SFTP DONE done\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>sshc</name><operator>-&gt;</operator><name>nextstate</name></name> <operator>!=</operator> <name>SSH_NO_STATE</name> <operator>&amp;&amp;</operator>

<name><name>sshc</name><operator>-&gt;</operator><name>nextstate</name></name> <operator>!=</operator> <name>SSH_SFTP_CLOSE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>nextstate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>nextstate</name></name> <operator>=</operator> <name>SSH_SFTP_CLOSE</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_STOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name><name>sshc</name><operator>-&gt;</operator><name>actualcode</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>SSH_SFTP_SHUTDOWN</name></expr>:</case>

<if_stmt><if>if<condition>(<expr><name><name>sshc</name><operator>-&gt;</operator><name>sftp_file</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>sftp_close</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>sftp_file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>sftp_file</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>sshc</name><operator>-&gt;</operator><name>sftp_session</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>sftp_free</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>sftp_session</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>sftp_session</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>SSH_STRING_FREE_CHAR</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>homedir</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>most_recent_ftp_entrypath</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SESSION_DISCONNECT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>SSH_SCP_TRANS_INIT</name></expr>:</case>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_getworkingpath</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>homedir</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>protop</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>actualcode</name></name> <operator>=</operator> <name>result</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_STOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ssh_set_blocking</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>ssh_session</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>upload</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>infilesize</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"SCP requires a known file size for upload"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>actualcode</name></name> <operator>=</operator> <name>CURLE_UPLOAD_FAILED</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MOVE_TO_ERROR_STATE</name><argument_list>(<argument><expr><name>CURLE_UPLOAD_FAILED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>scp_session</name></name> <operator>=</operator>

<call><name>ssh_scp_new</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>ssh_session</name></name></expr></argument>, <argument><expr><name>SSH_SCP_WRITE</name></expr></argument>, <argument><expr><name><name>protop</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SCP_UPLOAD_INIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>scp_session</name></name> <operator>=</operator>

<call><name>ssh_scp_new</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>ssh_session</name></name></expr></argument>, <argument><expr><name>SSH_SCP_READ</name></expr></argument>, <argument><expr><name><name>protop</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SCP_DOWNLOAD_INIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>sshc</name><operator>-&gt;</operator><name>scp_session</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>err_msg</name> <operator>=</operator> <call><name>ssh_get_error</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>ssh_session</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>err_msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MOVE_TO_ERROR_STATE</name><argument_list>(<argument><expr><name>CURLE_UPLOAD_FAILED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>SSH_SCP_UPLOAD_INIT</name></expr>:</case>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>ssh_scp_init</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>scp_session</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>!=</operator> <name>SSH_OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>err_msg</name> <operator>=</operator> <call><name>ssh_get_error</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>ssh_session</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>err_msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MOVE_TO_ERROR_STATE</name><argument_list>(<argument><expr><name>CURLE_UPLOAD_FAILED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>ssh_scp_push_file</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>scp_session</name></name></expr></argument>, <argument><expr><name><name>protop</name><operator>-&gt;</operator><name>path</name></name></expr></argument>,

<argument><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>infilesize</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>new_file_perms</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>!=</operator> <name>SSH_OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>err_msg</name> <operator>=</operator> <call><name>ssh_get_error</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>ssh_session</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>err_msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MOVE_TO_ERROR_STATE</name><argument_list>(<argument><expr><name>CURLE_UPLOAD_FAILED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>Curl_setup_transfer</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>size</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FIRSTSOCKET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>sockfd</name></name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>writesockfd</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>orig_waitfor</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>keepon</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>cselect_bits</name></name> <operator>=</operator> <name>CURL_CSELECT_OUT</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_STOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>SSH_SCP_DOWNLOAD_INIT</name></expr>:</case>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>ssh_scp_init</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>scp_session</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>!=</operator> <name>SSH_OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>err_msg</name> <operator>=</operator> <call><name>ssh_get_error</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>ssh_session</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>err_msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MOVE_TO_ERROR_STATE</name><argument_list>(<argument><expr><name>CURLE_COULDNT_CONNECT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SCP_DOWNLOAD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><name>SSH_SCP_DOWNLOAD</name></expr>:</case><block>{<block_content>

<decl_stmt><decl><type><name>curl_off_t</name></type> <name>bytecount</name></decl>;</decl_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>ssh_scp_pull_request</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>scp_session</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>!=</operator> <name>SSH_SCP_REQUEST_NEWFILE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>err_msg</name> <operator>=</operator> <call><name>ssh_get_error</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>ssh_session</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>err_msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MOVE_TO_ERROR_STATE</name><argument_list>(<argument><expr><name>CURLE_REMOTE_FILE_NOT_FOUND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>bytecount</name> <operator>=</operator> <call><name>ssh_scp_request_get_size</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>scp_session</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>maxdownload</name></name> <operator>=</operator> <operator>(</operator><name>curl_off_t</name><operator>)</operator> <name>bytecount</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_setup_transfer</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>FIRSTSOCKET</name></expr></argument>, <argument><expr><name>bytecount</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>writesockfd</name></name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>sockfd</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>cselect_bits</name></name> <operator>=</operator> <name>CURL_CSELECT_IN</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_STOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>SSH_SCP_DONE</name></expr>:</case>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>upload</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SCP_SEND_EOF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SCP_CHANNEL_FREE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>SSH_SCP_SEND_EOF</name></expr>:</case>

<if_stmt><if>if<condition>(<expr><name><name>sshc</name><operator>-&gt;</operator><name>scp_session</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>ssh_scp_close</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>scp_session</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>==</operator> <name>SSH_AGAIN</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>!=</operator> <name>SSH_OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Failed to close libssh scp channel: %s\n"</literal></expr></argument>,

<argument><expr><call><name>ssh_get_error</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>ssh_session</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SCP_CHANNEL_FREE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>SSH_SCP_CHANNEL_FREE</name></expr>:</case>

<if_stmt><if>if<condition>(<expr><name><name>sshc</name><operator>-&gt;</operator><name>scp_session</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ssh_scp_free</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>scp_session</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>scp_session</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>DEBUGF</name><argument_list>(<argument><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"SCP DONE phase complete\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ssh_set_blocking</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>ssh_session</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SESSION_DISCONNECT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><name>SSH_SESSION_DISCONNECT</name></expr>:</case>

<if_stmt><if>if<condition>(<expr><name><name>sshc</name><operator>-&gt;</operator><name>scp_session</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ssh_scp_free</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>scp_session</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>scp_session</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ssh_disconnect</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>ssh_session</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SSH_STRING_FREE_CHAR</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>homedir</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>most_recent_ftp_entrypath</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SESSION_FREE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><name>SSH_SESSION_FREE</name></expr>:</case>

<if_stmt><if>if<condition>(<expr><name><name>sshc</name><operator>-&gt;</operator><name>ssh_session</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ssh_free</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>ssh_session</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>ssh_session</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>DEBUGASSERT</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>ssh_session</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DEBUGASSERT</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>scp_session</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>sshc</name><operator>-&gt;</operator><name>readdir_tmp</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ssh_string_free_char</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>readdir_tmp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>readdir_tmp</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>sshc</name><operator>-&gt;</operator><name>quote_attrs</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>sftp_attributes_free</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>quote_attrs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>sshc</name><operator>-&gt;</operator><name>readdir_attrs</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>sftp_attributes_free</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>readdir_attrs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>sshc</name><operator>-&gt;</operator><name>readdir_link_attrs</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>sftp_attributes_free</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>readdir_link_attrs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>sshc</name><operator>-&gt;</operator><name>privkey</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ssh_key_free</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>privkey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>sshc</name><operator>-&gt;</operator><name>pubkey</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ssh_key_free</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>pubkey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>rsa_pub</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>rsa</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>quote_path1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>quote_path2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>readdir_line</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>readdir_linkPath</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SSH_STRING_FREE_CHAR</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>homedir</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name><name>sshc</name><operator>-&gt;</operator><name>actualcode</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>sshc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>ssh_conn</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>connclose</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><literal type="string">"SSH session free"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>SSH_SESSION_FREE</name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>nextstate</name></name> <operator>=</operator> <name>SSH_NO_STATE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_STOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>SSH_QUIT</name></expr>:</case>

<default>default:</default>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>nextstate</name></name> <operator>=</operator> <name>SSH_NO_STATE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_STOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block> while<condition>(<expr><operator>!</operator><name>rc</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>sshc</name><operator>-&gt;</operator><name>state</name></name> <operator>!=</operator> <name>SSH_STOP</name><operator>)</operator></expr>)</condition>;</do>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>==</operator> <name>SSH_AGAIN</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>block</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>myssh_perform_getsock</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,

<parameter><decl><type><name>curl_socket_t</name> <modifier>*</modifier></type><name>sock</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>bitmap</name> <init>= <expr><name>GETSOCK_BLANK</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>sock</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>sock</name><index>[<expr><name>FIRSTSOCKET</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>waitfor</name></name> <operator>&amp;</operator> <name>KEEP_RECV</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>bitmap</name> <operator>|=</operator> <call><name>GETSOCK_READSOCK</name><argument_list>(<argument><expr><name>FIRSTSOCKET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>waitfor</name></name> <operator>&amp;</operator> <name>KEEP_SEND</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>bitmap</name> <operator>|=</operator> <call><name>GETSOCK_WRITESOCK</name><argument_list>(<argument><expr><name>FIRSTSOCKET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>bitmap</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>myssh_getsock</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,

<parameter><decl><type><name>curl_socket_t</name> <modifier>*</modifier></type><name>sock</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>myssh_perform_getsock</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>sock</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>myssh_block2waitfor</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>block</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>ssh_conn</name></name> <modifier>*</modifier></type><name>sshc</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>sshc</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>waitfor</name></name> <operator>=</operator> <name><name>sshc</name><operator>-&gt;</operator><name>orig_waitfor</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>block</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>dir</name> <init>= <expr><call><name>ssh_get_poll_flags</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>ssh_session</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>dir</name> <operator>&amp;</operator> <name>SSH_READ_PENDING</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>waitfor</name></name> <operator>=</operator> <name>KEEP_RECV</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name>dir</name> <operator>&amp;</operator> <name>SSH_WRITE_PENDING</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>waitfor</name></name> <operator>=</operator> <name>KEEP_SEND</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>myssh_multi_statemach</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,

<parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>done</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>ssh_conn</name></name> <modifier>*</modifier></type><name>sshc</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>sshc</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>block</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><call><name>myssh_statemach_act</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>block</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>done</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>sshc</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>SSH_STOP</name><operator>)</operator></expr> ?</condition><then> <expr><name>TRUE</name></expr> </then><else>: <expr><name>FALSE</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>myssh_block2waitfor</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>myssh_block_statemach</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>disconnect</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>ssh_conn</name></name> <modifier>*</modifier></type><name>sshc</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>sshc</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<while>while<condition>(<expr><operator>(</operator><name><name>sshc</name><operator>-&gt;</operator><name>state</name></name> <operator>!=</operator> <name>SSH_STOP</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name>result</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>block</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>timediff_t</name></type> <name>left</name> <init>= <expr><literal type="number">1000</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>curltime</name></name></type> <name>now</name> <init>= <expr><call><name>Curl_now</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>myssh_statemach_act</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>disconnect</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>Curl_pgrsUpdate</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_ABORTED_BY_CALLBACK</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_speedcheck</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>left</name> <operator>=</operator> <call><name>Curl_timeleft</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>left</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Operation timed out"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OPERATION_TIMEDOUT</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>block</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>curl_socket_t</name></type> <name>fd_read</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>sock</name><index>[<expr><name>FIRSTSOCKET</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>Curl_socket_check</name><argument_list>(<argument><expr><name>fd_read</name></expr></argument>, <argument><expr><name>CURL_SOCKET_BAD</name></expr></argument>,

<argument><expr><name>CURL_SOCKET_BAD</name></expr></argument>, <argument><expr><ternary><condition><expr><name>left</name> <operator>&gt;</operator> <literal type="number">1000</literal></expr> ?</condition><then> <expr><literal type="number">1000</literal></expr> </then><else>: <expr><name>left</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>myssh_setup_connection</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>SSHPROTO</name></name> <modifier>*</modifier></type><name>ssh</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>protop</name></name> <operator>=</operator> <name>ssh</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>SSHPROTO</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>ssh</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>Curl_recv</name></type> <name>scp_recv</name></decl>, <decl><type ref="prev"/><name>sftp_recv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>Curl_send</name></type> <name>scp_send</name></decl>, <decl><type ref="prev"/><name>sftp_send</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>myssh_connect</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>done</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>ssh_conn</name></name> <modifier>*</modifier></type><name>ssh</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>curl_socket_t</name></type> <name>sock</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>sock</name><index>[<expr><name>FIRSTSOCKET</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>protop</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>myssh_setup_connection</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>connkeep</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><literal type="string">"SSH default"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>handler</name><operator>-&gt;</operator><name>protocol</name></name> <operator>&amp;</operator> <name>CURLPROTO_SCP</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>recv</name><index>[<expr><name>FIRSTSOCKET</name></expr>]</index></name> <operator>=</operator> <name>scp_recv</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>send</name><index>[<expr><name>FIRSTSOCKET</name></expr>]</index></name> <operator>=</operator> <name>scp_send</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>recv</name><index>[<expr><name>FIRSTSOCKET</name></expr>]</index></name> <operator>=</operator> <name>sftp_recv</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>send</name><index>[<expr><name>FIRSTSOCKET</name></expr>]</index></name> <operator>=</operator> <name>sftp_send</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>ssh</name> <operator>=</operator> <operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>sshc</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ssh</name><operator>-&gt;</operator><name>ssh_session</name></name> <operator>=</operator> <call><name>ssh_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ssh</name><operator>-&gt;</operator><name>ssh_session</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Failure initialising ssh session"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_FAILED_INIT</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ssh_options_set</name><argument_list>(<argument><expr><name><name>ssh</name><operator>-&gt;</operator><name>ssh_session</name></name></expr></argument>, <argument><expr><name>SSH_OPTIONS_FD</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>user</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"User: %s\n"</literal></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>user</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ssh_options_set</name><argument_list>(<argument><expr><name><name>ssh</name><operator>-&gt;</operator><name>ssh_session</name></name></expr></argument>, <argument><expr><name>SSH_OPTIONS_USER</name></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>user</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_SSH_KNOWNHOSTS</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Known hosts: %s\n"</literal></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_SSH_KNOWNHOSTS</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ssh_options_set</name><argument_list>(<argument><expr><name><name>ssh</name><operator>-&gt;</operator><name>ssh_session</name></name></expr></argument>, <argument><expr><name>SSH_OPTIONS_KNOWNHOSTS</name></expr></argument>,

<argument><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_SSH_KNOWNHOSTS</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ssh_options_set</name><argument_list>(<argument><expr><name><name>ssh</name><operator>-&gt;</operator><name>ssh_session</name></name></expr></argument>, <argument><expr><name>SSH_OPTIONS_HOST</name></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>host</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>remote_port</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ssh_options_set</name><argument_list>(<argument><expr><name><name>ssh</name><operator>-&gt;</operator><name>ssh_session</name></name></expr></argument>, <argument><expr><name>SSH_OPTIONS_PORT</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>remote_port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>ssh_compression</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ssh_options_set</name><argument_list>(<argument><expr><name><name>ssh</name><operator>-&gt;</operator><name>ssh_session</name></name></expr></argument>, <argument><expr><name>SSH_OPTIONS_COMPRESSION</name></expr></argument>,

<argument><expr><literal type="string">"zlib,zlib@openssh.com,none"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ssh</name><operator>-&gt;</operator><name>privkey</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ssh</name><operator>-&gt;</operator><name>pubkey</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_SSH_PUBLIC_KEY</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><call><name>ssh_pki_import_pubkey_file</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_SSH_PUBLIC_KEY</name></expr>]</index></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>ssh</name><operator>-&gt;</operator><name>pubkey</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>!=</operator> <name>SSH_OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Could not load public key file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_INIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>myssh_multi_statemach</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>done</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>scp_doing</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>dophase_done</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name></decl>;</decl_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>myssh_multi_statemach</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>dophase_done</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>*</operator><name>dophase_done</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>DEBUGF</name><argument_list>(<argument><expr><call><name>infof</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"DO phase is complete\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier>

<name>CURLcode</name></type> <name>scp_perform</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,

<parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>connected</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>dophase_done</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DEBUGF</name><argument_list>(<argument><expr><call><name>infof</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"DO phase starts\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>dophase_done</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SCP_TRANS_INIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>myssh_multi_statemach</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>dophase_done</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>connected</name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>tcpconnect</name><index>[<expr><name>FIRSTSOCKET</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>*</operator><name>dophase_done</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>DEBUGF</name><argument_list>(<argument><expr><call><name>infof</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"DO phase is complete\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>myssh_do_it</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>done</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>connected</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ssh_conn</name></name> <modifier>*</modifier></type><name>sshc</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>sshc</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>done</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>size</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>actualcode</name></name> <operator>=</operator> <name>CURLE_OK</name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>secondCreateDirs</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>Curl_pgrsSetUploadCounter</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_pgrsSetDownloadCounter</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_pgrsSetUploadSize</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_pgrsSetDownloadSize</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>handler</name><operator>-&gt;</operator><name>protocol</name></name> <operator>&amp;</operator> <name>CURLPROTO_SCP</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>scp_perform</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>connected</name></expr></argument>, <argument><expr><name>done</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>sftp_perform</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>connected</name></expr></argument>, <argument><expr><name>done</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>scp_disconnect</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>dead_connection</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ssh_conn</name></name> <modifier>*</modifier></type><name>ssh</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>sshc</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>dead_connection</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ssh</name><operator>-&gt;</operator><name>ssh_session</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SESSION_DISCONNECT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>myssh_block_statemach</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>myssh_done</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>CURLcode</name></type> <name>status</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>SSHPROTO</name></name> <modifier>*</modifier></type><name>protop</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>protop</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>status</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>myssh_block_statemach</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>status</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name>protop</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>protop</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>Curl_pgrsDone</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_ABORTED_BY_CALLBACK</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>keepon</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>scp_done</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>CURLcode</name></type> <name>status</name></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>premature</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>premature</name></expr>;</expr_stmt> 

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>status</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SCP_DONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><call><name>myssh_done</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ssize_t</name></type> <name>scp_send</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sockindex</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>mem</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>CURLcode</name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>sockindex</name></expr>;</expr_stmt> 

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>err</name></expr>;</expr_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>ssh_scp_write</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>sshc</name><operator>.</operator><name>scp_session</name></name></expr></argument>, <argument><expr><name>mem</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

myssh_block2waitfor(conn, (rc == SSH_AGAIN) ? TRUE : FALSE);

if(rc == SSH_AGAIN) {

*err = CURLE_AGAIN;

return 0;

}

else

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>!=</operator> <name>SSH_OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>err</name> <operator>=</operator> <name>CURLE_SSH</name></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>len</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ssize_t</name></type> <name>scp_recv</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sockindex</name></decl></parameter>,

<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>mem</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>CURLcode</name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>nread</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>err</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>sockindex</name></expr>;</expr_stmt> 

<expr_stmt><expr><name>nread</name> <operator>=</operator> <call><name>ssh_scp_read</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>sshc</name><operator>.</operator><name>scp_session</name></name></expr></argument>, <argument><expr><name>mem</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

myssh_block2waitfor(conn, (nread == SSH_AGAIN) ? TRUE : FALSE);

if(nread == SSH_AGAIN) {

*err = CURLE_AGAIN;

nread = -1;

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>nread</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier>

<name>CURLcode</name></type> <name>sftp_perform</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,

<parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>connected</name></decl></parameter>,

<parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>dophase_done</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DEBUGF</name><argument_list>(<argument><expr><call><name>infof</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"DO phase starts\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>dophase_done</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SFTP_QUOTE_INIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>myssh_multi_statemach</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>dophase_done</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>connected</name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>tcpconnect</name><index>[<expr><name>FIRSTSOCKET</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>*</operator><name>dophase_done</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>DEBUGF</name><argument_list>(<argument><expr><call><name>infof</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"DO phase is complete\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>sftp_doing</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,

<parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>dophase_done</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><call><name>myssh_multi_statemach</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>dophase_done</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>*</operator><name>dophase_done</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>DEBUGF</name><argument_list>(<argument><expr><call><name>infof</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"DO phase is complete\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>sftp_disconnect</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>dead_connection</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>dead_connection</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DEBUGF</name><argument_list>(<argument><expr><call><name>infof</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"SSH DISCONNECT starts now\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>sshc</name><operator>.</operator><name>ssh_session</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SFTP_SHUTDOWN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>myssh_block_statemach</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>DEBUGF</name><argument_list>(<argument><expr><call><name>infof</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"SSH DISCONNECT is done\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>sftp_done</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>CURLcode</name></type> <name>status</name></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>premature</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>ssh_conn</name></name> <modifier>*</modifier></type><name>sshc</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>sshc</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>status</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>premature</name> <operator>&amp;&amp;</operator> <name><name>conn</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>postquote</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>retry</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>nextstate</name></name> <operator>=</operator> <name>SSH_SFTP_POSTQUOTE_INIT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SFTP_CLOSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>myssh_done</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ssize_t</name></type> <name>sftp_send</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sockindex</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>mem</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>CURLcode</name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>nwrite</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>sockindex</name></expr>;</expr_stmt>

<expr_stmt><expr><name>nwrite</name> <operator>=</operator> <call><name>sftp_write</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>sshc</name><operator>.</operator><name>sftp_file</name></name></expr></argument>, <argument><expr><name>mem</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>myssh_block2waitfor</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if> 

if(nwrite == SSH_AGAIN) {

*err = CURLE_AGAIN;

nwrite = 0;

}

else

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if<condition>(<expr><name>nwrite</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>err</name> <operator>=</operator> <name>CURLE_SSH</name></expr>;</expr_stmt>

<expr_stmt><expr><name>nwrite</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>nwrite</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ssize_t</name></type> <name>sftp_recv</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sockindex</name></decl></parameter>,

<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>mem</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>CURLcode</name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>nread</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>sockindex</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DEBUGASSERT</name><argument_list>(<argument><expr><name>len</name> <operator>&lt;</operator> <name>CURL_MAX_READ_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>sshc</name><operator>.</operator><name>sftp_recv_state</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>sshc</name><operator>.</operator><name>sftp_file_index</name></name> <operator>=</operator>

<call><name>sftp_async_read_begin</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>sshc</name><operator>.</operator><name>sftp_file</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>sshc</name><operator>.</operator><name>sftp_file_index</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>err</name> <operator>=</operator> <name>CURLE_RECV_ERROR</name></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>sshc</name><operator>.</operator><name>sftp_recv_state</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>nread</name> <operator>=</operator> <call><name>sftp_async_read</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>sshc</name><operator>.</operator><name>sftp_file</name></name></expr></argument>,

<argument><expr><name>mem</name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>len</name></expr></argument>,

<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>sshc</name><operator>.</operator><name>sftp_file_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>myssh_block2waitfor</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>nread</name> <operator>==</operator> <name>SSH_AGAIN</name><operator>)</operator></expr>?</condition><then><expr><name>TRUE</name></expr></then><else>:<expr><name>FALSE</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>nread</name> <operator>==</operator> <name>SSH_AGAIN</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>err</name> <operator>=</operator> <name>CURLE_AGAIN</name></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name>nread</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>err</name> <operator>=</operator> <name>CURLE_RECV_ERROR</name></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>sshc</name><operator>.</operator><name>sftp_recv_state</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>nread</name></expr>;</return>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>sftp_quote</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>SSHPROTO</name></name> <modifier>*</modifier></type><name>protop</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>protop</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ssh_conn</name></name> <modifier>*</modifier></type><name>sshc</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>sshc</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cmd</name> <init>= <expr><name><name>sshc</name><operator>-&gt;</operator><name>quote_item</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>acceptfail</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>cmd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'*'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>cmd</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>acceptfail</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>strcasecompare</name><argument_list>(<argument><expr><literal type="string">"pwd"</literal></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><call><name>aprintf</name><argument_list>(<argument><expr><literal type="string">"257 \"%s\" is current directory.\n"</literal></expr></argument>,

<argument><expr><name><name>protop</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>tmp</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>actualcode</name></name> <operator>=</operator> <name>CURLE_OUT_OF_MEMORY</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SFTP_CLOSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>nextstate</name></name> <operator>=</operator> <name>SSH_NO_STATE</name></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>verbose</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>Curl_debug</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>CURLINFO_HEADER_OUT</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <literal type="string">"PWD\n"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_debug</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>CURLINFO_HEADER_IN</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_client_write</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>CLIENTWRITE_HEADER</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SFTP_CLOSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>nextstate</name></name> <operator>=</operator> <name>SSH_NO_STATE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>actualcode</name></name> <operator>=</operator> <name>result</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SFTP_NEXT_QUOTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>cp</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>cp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Syntax error in SFTP command. Supply parameter(s)!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SFTP_CLOSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>nextstate</name></name> <operator>=</operator> <name>SSH_NO_STATE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>actualcode</name></name> <operator>=</operator> <name>CURLE_QUOTE_ERROR</name></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_get_pathname</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sshc</name><operator>-&gt;</operator><name>quote_path1</name></name></expr></argument>, <argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>homedir</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>result</name> <operator>==</operator> <name>CURLE_OUT_OF_MEMORY</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Out of memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Syntax error: Bad first parameter"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SFTP_CLOSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>nextstate</name></name> <operator>=</operator> <name>SSH_NO_STATE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>actualcode</name></name> <operator>=</operator> <name>result</name></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>strncasecompare</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"chgrp "</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call> <operator>||</operator>

<call><name>strncasecompare</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"chmod "</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call> <operator>||</operator>

<call><name>strncasecompare</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"chown "</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_get_pathname</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sshc</name><operator>-&gt;</operator><name>quote_path2</name></name></expr></argument>, <argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>homedir</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>result</name> <operator>==</operator> <name>CURLE_OUT_OF_MEMORY</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Out of memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Syntax error in chgrp/chmod/chown: "</literal>

<literal type="string">"Bad second parameter"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>quote_path1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SFTP_CLOSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>nextstate</name></name> <operator>=</operator> <name>SSH_NO_STATE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>actualcode</name></name> <operator>=</operator> <name>result</name></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>quote_attrs</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SFTP_QUOTE_STAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>strncasecompare</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"ln "</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>||</operator>

<call><name>strncasecompare</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"symlink "</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_get_pathname</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sshc</name><operator>-&gt;</operator><name>quote_path2</name></name></expr></argument>, <argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>homedir</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>result</name> <operator>==</operator> <name>CURLE_OUT_OF_MEMORY</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Out of memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Syntax error in ln/symlink: Bad second parameter"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>quote_path1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SFTP_CLOSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>nextstate</name></name> <operator>=</operator> <name>SSH_NO_STATE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>actualcode</name></name> <operator>=</operator> <name>result</name></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SFTP_QUOTE_SYMLINK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><call><name>strncasecompare</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"mkdir "</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SFTP_QUOTE_MKDIR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><call><name>strncasecompare</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"rename "</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_get_pathname</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sshc</name><operator>-&gt;</operator><name>quote_path2</name></name></expr></argument>, <argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>homedir</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>result</name> <operator>==</operator> <name>CURLE_OUT_OF_MEMORY</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Out of memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Syntax error in rename: Bad second parameter"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>quote_path1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SFTP_CLOSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>nextstate</name></name> <operator>=</operator> <name>SSH_NO_STATE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>actualcode</name></name> <operator>=</operator> <name>result</name></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SFTP_QUOTE_RENAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><call><name>strncasecompare</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"rmdir "</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SFTP_QUOTE_RMDIR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><call><name>strncasecompare</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"rm "</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SFTP_QUOTE_UNLINK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAS_STATVFS_SUPPORT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if<condition>(<expr><call><name>strncasecompare</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"statvfs "</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SFTP_QUOTE_STATVFS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Unknown SFTP command"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>quote_path1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>quote_path2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SFTP_CLOSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>nextstate</name></name> <operator>=</operator> <name>SSH_NO_STATE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>actualcode</name></name> <operator>=</operator> <name>CURLE_QUOTE_ERROR</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>sftp_quote_stat</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ssh_conn</name></name> <modifier>*</modifier></type><name>sshc</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>sshc</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cmd</name> <init>= <expr><name><name>sshc</name><operator>-&gt;</operator><name>quote_item</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>acceptfail</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>cmd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'*'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>cmd</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>acceptfail</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>sshc</name><operator>-&gt;</operator><name>quote_attrs</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>sftp_attributes_free</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>quote_attrs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>quote_attrs</name></name> <operator>=</operator> <call><name>sftp_stat</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>sftp_session</name></name></expr></argument>, <argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>quote_path2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>sshc</name><operator>-&gt;</operator><name>quote_attrs</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>quote_path1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>quote_path2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Attempt to get SFTP stats failed: %d"</literal></expr></argument>,

<argument><expr><call><name>sftp_get_error</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>sftp_session</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SFTP_CLOSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>nextstate</name></name> <operator>=</operator> <name>SSH_NO_STATE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>actualcode</name></name> <operator>=</operator> <name>CURLE_QUOTE_ERROR</name></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>strncasecompare</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"chgrp"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>quote_attrs</name><operator>-&gt;</operator><name>gid</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><call><name>strtoul</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>quote_path1</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>sshc</name><operator>-&gt;</operator><name>quote_attrs</name><operator>-&gt;</operator><name>gid</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>ISDIGIT</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>quote_path1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<operator>!</operator><name><name>sshc</name><operator>-&gt;</operator><name>acceptfail</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>quote_path1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>quote_path2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Syntax error: chgrp gid not a number"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SFTP_CLOSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>nextstate</name></name> <operator>=</operator> <name>SSH_NO_STATE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>actualcode</name></name> <operator>=</operator> <name>CURLE_QUOTE_ERROR</name></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>quote_attrs</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>SSH_FILEXFER_ATTR_UIDGID</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><call><name>strncasecompare</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"chmod"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>mode_t</name></type> <name>perms</name></decl>;</decl_stmt>

<expr_stmt><expr><name>perms</name> <operator>=</operator> <operator>(</operator><name>mode_t</name><operator>)</operator><call><name>strtoul</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>quote_path1</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>perms</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>ISDIGIT</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>quote_path1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>quote_path1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>quote_path2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Syntax error: chmod permissions not a number"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SFTP_CLOSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>nextstate</name></name> <operator>=</operator> <name>SSH_NO_STATE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>actualcode</name></name> <operator>=</operator> <name>CURLE_QUOTE_ERROR</name></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>quote_attrs</name><operator>-&gt;</operator><name>permissions</name></name> <operator>=</operator> <name>perms</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>quote_attrs</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>SSH_FILEXFER_ATTR_PERMISSIONS</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><call><name>strncasecompare</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"chown"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>quote_attrs</name><operator>-&gt;</operator><name>uid</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><call><name>strtoul</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>quote_path1</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>sshc</name><operator>-&gt;</operator><name>quote_attrs</name><operator>-&gt;</operator><name>uid</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>ISDIGIT</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>quote_path1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<operator>!</operator><name><name>sshc</name><operator>-&gt;</operator><name>acceptfail</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>quote_path1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>quote_path2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Syntax error: chown uid not a number"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SFTP_CLOSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>nextstate</name></name> <operator>=</operator> <name>SSH_NO_STATE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>actualcode</name></name> <operator>=</operator> <name>CURLE_QUOTE_ERROR</name></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>quote_attrs</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>SSH_FILEXFER_ATTR_UIDGID</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SFTP_QUOTE_SETSTAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></function>

<function><type><name>CURLcode</name></type> <name>Curl_ssh_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>ssh_init</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>DEBUGF</name><argument_list>(<argument><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Error: libssh_init failed\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_FAILED_INIT</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>Curl_ssh_cleanup</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>ssh_finalize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>Curl_ssh_version</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>buflen</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>msnprintf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"libssh/%s"</literal></expr></argument>, <argument><expr><name>CURL_LIBSSH_VERSION</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</unit>
