<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\curl-analysis\_cppstats\curl\lib\vssh\libssh2.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_setup.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_LIBSSH2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libssh2.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libssh2_sftp.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_FCNTL_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_NETINET_IN_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet/in.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ARPA_INET_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;arpa/inet.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_UTSNAME_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/utsname.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_NETDB_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netdb.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VMS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;in.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inet.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>NETWARE</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__NOVELL_LIBC__</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>in_addr_t</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>in_addr_t</name></cpp:macro> <cpp:value>unsigned long</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;curl/curl.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"urldata.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sendf.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hostip.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"progress.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"transfer.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"escape.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http.h"</cpp:file></cpp:include> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ssh.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"url.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"speedcheck.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"getinfo.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"strdup.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"strcase.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vtls/vtls.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"connect.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"strerror.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"inet_ntop.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"parsedate.h"</cpp:file></cpp:include> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sockaddr.h"</cpp:file></cpp:include> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"strtoofft.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"multiif.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"select.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"warnless.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_path.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_printf.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_memory.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memdebug.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LIBSSH2_VERSION_NUM</name> <operator>&gt;=</operator> <literal type="number">0x010206</literal></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAS_STATVFS_SUPPORT</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sftp_libssh2_last_error</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>curlx_ultosi(libssh2_sftp_last_error(s))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sftp_libssh2_realpath</name><parameter_list>(<parameter><type><name>s</name></type></parameter>,<parameter><type><name>p</name></type></parameter>,<parameter><type><name>t</name></type></parameter>,<parameter><type><name>m</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>libssh2_sftp_symlink_ex((s), (p), curlx_uztoui(strlen(p)), (t), (m), LIBSSH2_SFTP_REALPATH)</cpp:value></cpp:define>

<function_decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sftp_libssh2_strerror</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>err</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><specifier>static</specifier> <call><name>LIBSSH2_ALLOC_FUNC</name><argument_list>(<argument><expr><name>my_libssh2_malloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><specifier>static</specifier> <call><name>LIBSSH2_REALLOC_FUNC</name><argument_list>(<argument><expr><name>my_libssh2_realloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><specifier>static</specifier> <call><name>LIBSSH2_FREE_FUNC</name><argument_list>(<argument><expr><name>my_libssh2_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function_decl><type><specifier>static</specifier> <name>CURLcode</name></type> <name>ssh_force_knownhost_key_type</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>CURLcode</name></type> <name>ssh_connect</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>done</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>CURLcode</name></type> <name>ssh_multi_statemach</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>done</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>CURLcode</name></type> <name>ssh_do</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>done</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>CURLcode</name></type> <name>scp_done</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,

<parameter><decl><type><name>CURLcode</name></type></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>premature</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>CURLcode</name></type> <name>scp_doing</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,

<parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>dophase_done</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>CURLcode</name></type> <name>scp_disconnect</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>dead_connection</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>CURLcode</name></type> <name>sftp_done</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,

<parameter><decl><type><name>CURLcode</name></type></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>premature</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>CURLcode</name></type> <name>sftp_doing</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,

<parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>dophase_done</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>CURLcode</name></type> <name>sftp_disconnect</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>dead</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier>

<name>CURLcode</name></type> <name>sftp_perform</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,

<parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>connected</name></decl></parameter>,

<parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>dophase_done</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>ssh_getsock</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>curl_socket_t</name> <modifier>*</modifier></type><name>sock</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>ssh_perform_getsock</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,

<parameter><decl><type><name>curl_socket_t</name> <modifier>*</modifier></type><name>sock</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>CURLcode</name></type> <name>ssh_setup_connection</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>Curl_handler</name></name></type> <name>Curl_handler_scp</name> <init>= <expr><block>{

<expr><literal type="string">"SCP"</literal></expr>, 

<expr><name>ssh_setup_connection</name></expr>, 

<expr><name>ssh_do</name></expr>, 

<expr><name>scp_done</name></expr>, 

<expr><name>ZERO_NULL</name></expr>, 

<expr><name>ssh_connect</name></expr>, 

<expr><name>ssh_multi_statemach</name></expr>, 

<expr><name>scp_doing</name></expr>, 

<expr><name>ssh_getsock</name></expr>, 

<expr><name>ssh_getsock</name></expr>, 

<expr><name>ZERO_NULL</name></expr>, 

<expr><name>ssh_perform_getsock</name></expr>, 

<expr><name>scp_disconnect</name></expr>, 

<expr><name>ZERO_NULL</name></expr>, 

<expr><name>ZERO_NULL</name></expr>, 

<expr><name>PORT_SSH</name></expr>, 

<expr><name>CURLPROTO_SCP</name></expr>, 

<expr><name>PROTOPT_DIRLOCK</name> <operator>|</operator> <name>PROTOPT_CLOSEACTION</name>

<operator>|</operator> <name>PROTOPT_NOURLQUERY</name></expr> 

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>Curl_handler</name></name></type> <name>Curl_handler_sftp</name> <init>= <expr><block>{

<expr><literal type="string">"SFTP"</literal></expr>, 

<expr><name>ssh_setup_connection</name></expr>, 

<expr><name>ssh_do</name></expr>, 

<expr><name>sftp_done</name></expr>, 

<expr><name>ZERO_NULL</name></expr>, 

<expr><name>ssh_connect</name></expr>, 

<expr><name>ssh_multi_statemach</name></expr>, 

<expr><name>sftp_doing</name></expr>, 

<expr><name>ssh_getsock</name></expr>, 

<expr><name>ssh_getsock</name></expr>, 

<expr><name>ZERO_NULL</name></expr>, 

<expr><name>ssh_perform_getsock</name></expr>, 

<expr><name>sftp_disconnect</name></expr>, 

<expr><name>ZERO_NULL</name></expr>, 

<expr><name>ZERO_NULL</name></expr>, 

<expr><name>PORT_SSH</name></expr>, 

<expr><name>CURLPROTO_SFTP</name></expr>, 

<expr><name>PROTOPT_DIRLOCK</name> <operator>|</operator> <name>PROTOPT_CLOSEACTION</name>

<operator>|</operator> <name>PROTOPT_NOURLQUERY</name></expr> 

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>kbd_callback</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>name_len</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>instruction</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>instruction_len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_prompts</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>LIBSSH2_USERAUTH_KBDINT_PROMPT</name> <modifier>*</modifier></type><name>prompts</name></decl></parameter>,

<parameter><decl><type><name>LIBSSH2_USERAUTH_KBDINT_RESPONSE</name> <modifier>*</modifier></type><name>responses</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>abstract</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name> <init>= <expr><operator>(</operator>struct <name>connectdata</name> <operator>*</operator><operator>)</operator><operator>*</operator><name>abstract</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CURL_LIBSSH2_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"name=%s\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"name_len=%d\n"</literal></expr></argument>, <argument><expr><name>name_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"instruction=%s\n"</literal></expr></argument>, <argument><expr><name>instruction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"instruction_len=%d\n"</literal></expr></argument>, <argument><expr><name>instruction_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"num_prompts=%d\n"</literal></expr></argument>, <argument><expr><name>num_prompts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>name</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>name_len</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>instruction</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>instruction_len</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<if_stmt><if>if<condition>(<expr><name>num_prompts</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>responses</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>text</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>passwd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>responses</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <call><name>curlx_uztoui</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>passwd</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>prompts</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>abstract</name></expr>;</expr_stmt>

</block_content>}</block></function> 

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>sftp_libssh2_error_to_CURLE</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>err</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch<condition>(<expr><name>err</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>LIBSSH2_FX_OK</name></expr>:</case>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

<case>case <expr><name>LIBSSH2_FX_NO_SUCH_FILE</name></expr>:</case>

<case>case <expr><name>LIBSSH2_FX_NO_SUCH_PATH</name></expr>:</case>

<return>return <expr><name>CURLE_REMOTE_FILE_NOT_FOUND</name></expr>;</return>

<case>case <expr><name>LIBSSH2_FX_PERMISSION_DENIED</name></expr>:</case>

<case>case <expr><name>LIBSSH2_FX_WRITE_PROTECT</name></expr>:</case>

<case>case <expr><name>LIBSSH2_FX_LOCK_CONFlICT</name></expr>:</case>

<return>return <expr><name>CURLE_REMOTE_ACCESS_DENIED</name></expr>;</return>

<case>case <expr><name>LIBSSH2_FX_NO_SPACE_ON_FILESYSTEM</name></expr>:</case>

<case>case <expr><name>LIBSSH2_FX_QUOTA_EXCEEDED</name></expr>:</case>

<return>return <expr><name>CURLE_REMOTE_DISK_FULL</name></expr>;</return>

<case>case <expr><name>LIBSSH2_FX_FILE_ALREADY_EXISTS</name></expr>:</case>

<return>return <expr><name>CURLE_REMOTE_FILE_EXISTS</name></expr>;</return>

<case>case <expr><name>LIBSSH2_FX_DIR_NOT_EMPTY</name></expr>:</case>

<return>return <expr><name>CURLE_QUOTE_ERROR</name></expr>;</return>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch>

<return>return <expr><name>CURLE_SSH</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>libssh2_session_error_to_CURLE</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>err</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch<condition>(<expr><name>err</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>LIBSSH2_ERROR_NONE</name></expr>:</case>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

<case>case <expr><name>LIBSSH2_ERROR_SCP_PROTOCOL</name></expr>:</case>

<return>return <expr><name>CURLE_REMOTE_FILE_NOT_FOUND</name></expr>;</return>

<case>case <expr><name>LIBSSH2_ERROR_SOCKET_NONE</name></expr>:</case>

<return>return <expr><name>CURLE_COULDNT_CONNECT</name></expr>;</return>

<case>case <expr><name>LIBSSH2_ERROR_ALLOC</name></expr>:</case>

<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return>

<case>case <expr><name>LIBSSH2_ERROR_SOCKET_SEND</name></expr>:</case>

<return>return <expr><name>CURLE_SEND_ERROR</name></expr>;</return>

<case>case <expr><name>LIBSSH2_ERROR_HOSTKEY_INIT</name></expr>:</case>

<case>case <expr><name>LIBSSH2_ERROR_HOSTKEY_SIGN</name></expr>:</case>

<case>case <expr><name>LIBSSH2_ERROR_PUBLICKEY_UNRECOGNIZED</name></expr>:</case>

<case>case <expr><name>LIBSSH2_ERROR_PUBLICKEY_UNVERIFIED</name></expr>:</case>

<return>return <expr><name>CURLE_PEER_FAILED_VERIFICATION</name></expr>;</return>

<case>case <expr><name>LIBSSH2_ERROR_PASSWORD_EXPIRED</name></expr>:</case>

<return>return <expr><name>CURLE_LOGIN_DENIED</name></expr>;</return>

<case>case <expr><name>LIBSSH2_ERROR_SOCKET_TIMEOUT</name></expr>:</case>

<case>case <expr><name>LIBSSH2_ERROR_TIMEOUT</name></expr>:</case>

<return>return <expr><name>CURLE_OPERATION_TIMEDOUT</name></expr>;</return>

<case>case <expr><name>LIBSSH2_ERROR_EAGAIN</name></expr>:</case>

<return>return <expr><name>CURLE_AGAIN</name></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><name>CURLE_SSH</name></expr>;</return>

</block_content>}</block></function>

<expr_stmt><expr><specifier>static</specifier> <macro><name>LIBSSH2_ALLOC_FUNC</name><argument_list>(<argument>my_libssh2_malloc</argument>)</argument_list></macro>

<block>{

<expr><operator>(</operator><name>void</name><operator>)</operator><name>abstract</name></expr>; 

<return>return <expr><call><name>malloc</name><argument_list>(<argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</return>

}</block></expr></expr_stmt>

<expr_stmt><expr><specifier>static</specifier> <macro><name>LIBSSH2_REALLOC_FUNC</name><argument_list>(<argument>my_libssh2_realloc</argument>)</argument_list></macro>

<block>{

<expr><operator>(</operator><name>void</name><operator>)</operator><name>abstract</name></expr>; 

<return>return <expr><call><name>realloc</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</return>

}</block></expr></expr_stmt>

<expr_stmt><expr><specifier>static</specifier> <macro><name>LIBSSH2_FREE_FUNC</name><argument_list>(<argument>my_libssh2_free</argument>)</argument_list></macro>

<block>{

<expr><operator>(</operator><name>void</name><operator>)</operator><name>abstract</name></expr>; 

<if_stmt><if>if<condition>(<expr><name>ptr</name></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

}</block></expr></expr_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>state</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>sshstate</name></type> <name>nowstate</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>ssh_conn</name></name> <modifier>*</modifier></type><name>sshc</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>sshc</name></name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUGBUILD</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_VERBOSE_STRINGS</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name><name>names</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"SSH_STOP"</literal></expr>,

<expr><literal type="string">"SSH_INIT"</literal></expr>,

<expr><literal type="string">"SSH_S_STARTUP"</literal></expr>,

<expr><literal type="string">"SSH_HOSTKEY"</literal></expr>,

<expr><literal type="string">"SSH_AUTHLIST"</literal></expr>,

<expr><literal type="string">"SSH_AUTH_PKEY_INIT"</literal></expr>,

<expr><literal type="string">"SSH_AUTH_PKEY"</literal></expr>,

<expr><literal type="string">"SSH_AUTH_PASS_INIT"</literal></expr>,

<expr><literal type="string">"SSH_AUTH_PASS"</literal></expr>,

<expr><literal type="string">"SSH_AUTH_AGENT_INIT"</literal></expr>,

<expr><literal type="string">"SSH_AUTH_AGENT_LIST"</literal></expr>,

<expr><literal type="string">"SSH_AUTH_AGENT"</literal></expr>,

<expr><literal type="string">"SSH_AUTH_HOST_INIT"</literal></expr>,

<expr><literal type="string">"SSH_AUTH_HOST"</literal></expr>,

<expr><literal type="string">"SSH_AUTH_KEY_INIT"</literal></expr>,

<expr><literal type="string">"SSH_AUTH_KEY"</literal></expr>,

<expr><literal type="string">"SSH_AUTH_GSSAPI"</literal></expr>,

<expr><literal type="string">"SSH_AUTH_DONE"</literal></expr>,

<expr><literal type="string">"SSH_SFTP_INIT"</literal></expr>,

<expr><literal type="string">"SSH_SFTP_REALPATH"</literal></expr>,

<expr><literal type="string">"SSH_SFTP_QUOTE_INIT"</literal></expr>,

<expr><literal type="string">"SSH_SFTP_POSTQUOTE_INIT"</literal></expr>,

<expr><literal type="string">"SSH_SFTP_QUOTE"</literal></expr>,

<expr><literal type="string">"SSH_SFTP_NEXT_QUOTE"</literal></expr>,

<expr><literal type="string">"SSH_SFTP_QUOTE_STAT"</literal></expr>,

<expr><literal type="string">"SSH_SFTP_QUOTE_SETSTAT"</literal></expr>,

<expr><literal type="string">"SSH_SFTP_QUOTE_SYMLINK"</literal></expr>,

<expr><literal type="string">"SSH_SFTP_QUOTE_MKDIR"</literal></expr>,

<expr><literal type="string">"SSH_SFTP_QUOTE_RENAME"</literal></expr>,

<expr><literal type="string">"SSH_SFTP_QUOTE_RMDIR"</literal></expr>,

<expr><literal type="string">"SSH_SFTP_QUOTE_UNLINK"</literal></expr>,

<expr><literal type="string">"SSH_SFTP_QUOTE_STATVFS"</literal></expr>,

<expr><literal type="string">"SSH_SFTP_GETINFO"</literal></expr>,

<expr><literal type="string">"SSH_SFTP_FILETIME"</literal></expr>,

<expr><literal type="string">"SSH_SFTP_TRANS_INIT"</literal></expr>,

<expr><literal type="string">"SSH_SFTP_UPLOAD_INIT"</literal></expr>,

<expr><literal type="string">"SSH_SFTP_CREATE_DIRS_INIT"</literal></expr>,

<expr><literal type="string">"SSH_SFTP_CREATE_DIRS"</literal></expr>,

<expr><literal type="string">"SSH_SFTP_CREATE_DIRS_MKDIR"</literal></expr>,

<expr><literal type="string">"SSH_SFTP_READDIR_INIT"</literal></expr>,

<expr><literal type="string">"SSH_SFTP_READDIR"</literal></expr>,

<expr><literal type="string">"SSH_SFTP_READDIR_LINK"</literal></expr>,

<expr><literal type="string">"SSH_SFTP_READDIR_BOTTOM"</literal></expr>,

<expr><literal type="string">"SSH_SFTP_READDIR_DONE"</literal></expr>,

<expr><literal type="string">"SSH_SFTP_DOWNLOAD_INIT"</literal></expr>,

<expr><literal type="string">"SSH_SFTP_DOWNLOAD_STAT"</literal></expr>,

<expr><literal type="string">"SSH_SFTP_CLOSE"</literal></expr>,

<expr><literal type="string">"SSH_SFTP_SHUTDOWN"</literal></expr>,

<expr><literal type="string">"SSH_SCP_TRANS_INIT"</literal></expr>,

<expr><literal type="string">"SSH_SCP_UPLOAD_INIT"</literal></expr>,

<expr><literal type="string">"SSH_SCP_DOWNLOAD_INIT"</literal></expr>,

<expr><literal type="string">"SSH_SCP_DOWNLOAD"</literal></expr>,

<expr><literal type="string">"SSH_SCP_DONE"</literal></expr>,

<expr><literal type="string">"SSH_SCP_SEND_EOF"</literal></expr>,

<expr><literal type="string">"SSH_SCP_WAIT_EOF"</literal></expr>,

<expr><literal type="string">"SSH_SCP_WAIT_CLOSE"</literal></expr>,

<expr><literal type="string">"SSH_SCP_CHANNEL_FREE"</literal></expr>,

<expr><literal type="string">"SSH_SESSION_DISCONNECT"</literal></expr>,

<expr><literal type="string">"SSH_SESSION_FREE"</literal></expr>,

<expr><literal type="string">"QUIT"</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DEBUGASSERT</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>names</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>names</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof> <operator>==</operator> <name>SSH_LAST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>sshc</name><operator>-&gt;</operator><name>state</name></name> <operator>!=</operator> <name>nowstate</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"SFTP %p state change from %s to %s\n"</literal></expr></argument>,

<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>sshc</name></expr></argument>, <argument><expr><name><name>names</name><index>[<expr><name><name>sshc</name><operator>-&gt;</operator><name>state</name></name></expr>]</index></name></expr></argument>, <argument><expr><name><name>names</name><index>[<expr><name>nowstate</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>nowstate</name></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LIBSSH2_KNOWNHOST_API</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type> <name>sshkeycallback</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>easy</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>curl_khkey</name></name> <modifier>*</modifier></type><name>knownkey</name></decl></parameter>, 

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>curl_khkey</name></name> <modifier>*</modifier></type><name>foundkey</name></decl></parameter>, 

<parameter><decl><type><name><name>enum</name> <name>curl_khmatch</name></name></type> <name>match</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>clientp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>easy</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>knownkey</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>foundkey</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>clientp</name></expr>;</expr_stmt>

<return>return <expr><ternary><condition><expr><operator>(</operator><name>match</name> <operator>!=</operator> <name>CURLKHMATCH_OK</name><operator>)</operator></expr>?</condition><then><expr><name>CURLKHSTAT_REJECT</name></expr></then><else>:<expr><name>CURLKHSTAT_FINE</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LIBSSH2_SFTP_SEEK64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SFTP_SEEK</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>libssh2_sftp_seek64(x, (libssh2_uint64_t)y)</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SFTP_SEEK</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>libssh2_sftp_seek(x, (size_t)y)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LIBSSH2_SCP_SEND64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCP_SEND</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>libssh2_scp_send_ex(a, b, (int)(c), (size_t)d, 0, 0)</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCP_SEND</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>libssh2_scp_send64(a, b, (int)(c), (libssh2_uint64_t)d, 0, 0)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LIBSSH2_SESSION_HANDSHAKE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>libssh2_session_startup</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>libssh2_session_handshake(x,y)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>ssh_knownhost</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LIBSSH2_KNOWNHOST_API</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_SSH_KNOWNHOSTS</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>ssh_conn</name></name> <modifier>*</modifier></type><name>sshc</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>sshc</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>keytype</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>keylen</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>remotekey</name> <init>= <expr><call><name>libssh2_session_hostkey</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>ssh_session</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>keylen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>keytype</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>keycheck</name> <init>= <expr><name>LIBSSH2_KNOWNHOST_CHECK_FAILURE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>keybit</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>remotekey</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>libssh2_knownhost</name></name> <modifier>*</modifier></type><name>host</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>curl_khmatch</name></name></type> <name>keymatch</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>curl_sshkeycallback</name></type> <name>func</name> <init>=

<expr><ternary><condition><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>ssh_keyfunc</name></name></expr>?</condition><then><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>ssh_keyfunc</name></name></expr></then><else>:<expr><name>sshkeycallback</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>curl_khkey</name></name></type> <name>knownkey</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>curl_khkey</name></name> <modifier>*</modifier></type><name>knownkeyp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>curl_khkey</name></name></type> <name>foundkey</name></decl>;</decl_stmt>

<switch>switch<condition>(<expr><name>keytype</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>LIBSSH2_HOSTKEY_TYPE_RSA</name></expr>:</case>

<expr_stmt><expr><name>keybit</name> <operator>=</operator> <name>LIBSSH2_KNOWNHOST_KEY_SSHRSA</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>LIBSSH2_HOSTKEY_TYPE_DSS</name></expr>:</case>

<expr_stmt><expr><name>keybit</name> <operator>=</operator> <name>LIBSSH2_KNOWNHOST_KEY_SSHDSS</name></expr>;</expr_stmt>

<break>break;</break>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LIBSSH2_HOSTKEY_TYPE_ECDSA_256</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>LIBSSH2_HOSTKEY_TYPE_ECDSA_256</name></expr>:</case>

<expr_stmt><expr><name>keybit</name> <operator>=</operator> <name>LIBSSH2_KNOWNHOST_KEY_ECDSA_256</name></expr>;</expr_stmt>

<break>break;</break>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LIBSSH2_HOSTKEY_TYPE_ECDSA_384</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>LIBSSH2_HOSTKEY_TYPE_ECDSA_384</name></expr>:</case>

<expr_stmt><expr><name>keybit</name> <operator>=</operator> <name>LIBSSH2_KNOWNHOST_KEY_ECDSA_384</name></expr>;</expr_stmt>

<break>break;</break>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LIBSSH2_HOSTKEY_TYPE_ECDSA_521</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>LIBSSH2_HOSTKEY_TYPE_ECDSA_521</name></expr>:</case>

<expr_stmt><expr><name>keybit</name> <operator>=</operator> <name>LIBSSH2_KNOWNHOST_KEY_ECDSA_521</name></expr>;</expr_stmt>

<break>break;</break>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LIBSSH2_HOSTKEY_TYPE_ED25519</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>LIBSSH2_HOSTKEY_TYPE_ED25519</name></expr>:</case>

<expr_stmt><expr><name>keybit</name> <operator>=</operator> <name>LIBSSH2_KNOWNHOST_KEY_ED25519</name></expr>;</expr_stmt>

<break>break;</break>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<default>default:</default>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"unsupported key type, can't check knownhosts!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>keybit</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>keybit</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <name>CURLKHSTAT_REJECT</name></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LIBSSH2_KNOWNHOST_CHECKP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>keycheck</name> <operator>=</operator> <call><name>libssh2_knownhost_checkp</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>kh</name></name></expr></argument>,

<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>host</name><operator>.</operator><name>name</name></name></expr></argument>,

<argument><expr><ternary><condition><expr><operator>(</operator><name><name>conn</name><operator>-&gt;</operator><name>remote_port</name></name> <operator>!=</operator> <name>PORT_SSH</name><operator>)</operator></expr>?</condition><then>

<expr><name><name>conn</name><operator>-&gt;</operator><name>remote_port</name></name></expr></then><else>:<expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr></argument>,

<argument><expr><name>remotekey</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>,

<argument><expr><name>LIBSSH2_KNOWNHOST_TYPE_PLAIN</name><operator>|</operator>

<name>LIBSSH2_KNOWNHOST_KEYENC_RAW</name><operator>|</operator>

<name>keybit</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>host</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name>keycheck</name> <operator>=</operator> <call><name>libssh2_knownhost_check</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>kh</name></name></expr></argument>,

<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>host</name><operator>.</operator><name>name</name></name></expr></argument>,

<argument><expr><name>remotekey</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>,

<argument><expr><name>LIBSSH2_KNOWNHOST_TYPE_PLAIN</name><operator>|</operator>

<name>LIBSSH2_KNOWNHOST_KEYENC_RAW</name><operator>|</operator>

<name>keybit</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>host</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"SSH host check: %d, key: %s\n"</literal></expr></argument>, <argument><expr><name>keycheck</name></expr></argument>,

<argument><expr><ternary><condition><expr><operator>(</operator><name>keycheck</name> <operator>&lt;=</operator> <name>LIBSSH2_KNOWNHOST_CHECK_MISMATCH</name><operator>)</operator></expr>?</condition><then>

<expr><name><name>host</name><operator>-&gt;</operator><name>key</name></name></expr></then><else>:<expr><literal type="string">"&lt;none&gt;"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>keycheck</name> <operator>&lt;=</operator> <name>LIBSSH2_KNOWNHOST_CHECK_MISMATCH</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>knownkey</name><operator>.</operator><name>key</name></name> <operator>=</operator> <name><name>host</name><operator>-&gt;</operator><name>key</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>knownkey</name><operator>.</operator><name>len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>knownkey</name><operator>.</operator><name>keytype</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>keytype</name> <operator>==</operator> <name>LIBSSH2_HOSTKEY_TYPE_RSA</name><operator>)</operator></expr>?</condition><then>

<expr><name>CURLKHTYPE_RSA</name></expr> </then><else>: <expr><name>CURLKHTYPE_DSS</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>knownkeyp</name> <operator>=</operator> <operator>&amp;</operator><name>knownkey</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>foundkey</name><operator>.</operator><name>key</name></name> <operator>=</operator> <name>remotekey</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>foundkey</name><operator>.</operator><name>len</name></name> <operator>=</operator> <name>keylen</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>foundkey</name><operator>.</operator><name>keytype</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>keytype</name> <operator>==</operator> <name>LIBSSH2_HOSTKEY_TYPE_RSA</name><operator>)</operator></expr>?</condition><then>

<expr><name>CURLKHTYPE_RSA</name></expr> </then><else>: <expr><name>CURLKHTYPE_DSS</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>keymatch</name> <operator>=</operator> <operator>(</operator>enum <name>curl_khmatch</name><operator>)</operator><name>keycheck</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_set_in_callback</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>func</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>knownkeyp</name></expr></argument>, 

<argument><expr><operator>&amp;</operator><name>foundkey</name></expr></argument>, 

<argument><expr><name>keymatch</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>ssh_keyfunc_userp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_set_in_callback</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <name>CURLKHSTAT_REJECT</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<switch>switch<condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>

<default>default:</default> 

<case>case <expr><name>CURLKHSTAT_REJECT</name></expr>:</case>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SESSION_FREE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><name>CURLKHSTAT_DEFER</name></expr>:</case>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name><name>sshc</name><operator>-&gt;</operator><name>actualcode</name></name> <operator>=</operator> <name>CURLE_PEER_FAILED_VERIFICATION</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>CURLKHSTAT_FINE</name></expr>:</case>

<case>case <expr><name>CURLKHSTAT_FINE_ADD_TO_FILE</name></expr>:</case>

<if_stmt><if>if<condition>(<expr><name>keycheck</name> <operator>!=</operator> <name>LIBSSH2_KNOWNHOST_CHECK_MATCH</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>addrc</name> <init>= <expr><call><name>libssh2_knownhost_add</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>kh</name></name></expr></argument>,

<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>host</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><name>remotekey</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>,

<argument><expr><name>LIBSSH2_KNOWNHOST_TYPE_PLAIN</name><operator>|</operator>

<name>LIBSSH2_KNOWNHOST_KEYENC_RAW</name><operator>|</operator>

<name>keybit</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>addrc</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Warning adding the known host %s failed!\n"</literal></expr></argument>,

<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>host</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>(<expr><name>rc</name> <operator>==</operator> <name>CURLKHSTAT_FINE_ADD_TO_FILE</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>wrc</name> <init>=

<expr><call><name>libssh2_knownhost_writefile</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>kh</name></name></expr></argument>,

<argument><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_SSH_KNOWNHOSTS</name></expr>]</index></name></expr></argument>,

<argument><expr><name>LIBSSH2_KNOWNHOST_FILE_OPENSSH</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>wrc</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Warning, writing %s failed!\n"</literal></expr></argument>,

<argument><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_SSH_KNOWNHOSTS</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></if></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>conn</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>ssh_check_fingerprint</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>ssh_conn</name></name> <modifier>*</modifier></type><name>sshc</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>sshc</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pubkey_md5</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_SSH_HOST_PUBLIC_KEY_MD5</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>md5buffer</name><index>[<expr><literal type="number">33</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fingerprint</name> <init>= <expr><call><name>libssh2_hostkey_hash</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>ssh_session</name></name></expr></argument>,

<argument><expr><name>LIBSSH2_HOSTKEY_HASH_MD5</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>fingerprint</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msnprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>md5buffer</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"%02x"</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <name><name>fingerprint</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"SSH MD5 fingerprint: %s\n"</literal></expr></argument>, <argument><expr><name>md5buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>pubkey_md5</name> <operator>&amp;&amp;</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>pubkey_md5</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">32</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>fingerprint</name> <operator>||</operator> <operator>!</operator><call><name>strcasecompare</name><argument_list>(<argument><expr><name>md5buffer</name></expr></argument>, <argument><expr><name>pubkey_md5</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>fingerprint</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>,

<argument><expr><literal type="string">"Denied establishing ssh session: mismatch md5 fingerprint. "</literal>

<literal type="string">"Remote %s is not equal to %s"</literal></expr></argument>, <argument><expr><name>md5buffer</name></expr></argument>, <argument><expr><name>pubkey_md5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>,

<argument><expr><literal type="string">"Denied establishing ssh session: md5 fingerprint not available"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SESSION_FREE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>actualcode</name></name> <operator>=</operator> <name>CURLE_PEER_FAILED_VERIFICATION</name></expr>;</expr_stmt>

<return>return <expr><name><name>sshc</name><operator>-&gt;</operator><name>actualcode</name></name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"MD5 checksum match!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>ssh_knownhost</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>ssh_force_knownhost_key_type</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LIBSSH2_KNOWNHOST_API</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LIBSSH2_KNOWNHOST_KEY_ED25519</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>hostkey_method_ssh_ed25519</name>

<init>= <expr><literal type="string">"ssh-ed25519"</literal></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LIBSSH2_KNOWNHOST_KEY_ECDSA_521</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>hostkey_method_ssh_ecdsa_521</name>

<init>= <expr><literal type="string">"ecdsa-sha2-nistp521"</literal></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LIBSSH2_KNOWNHOST_KEY_ECDSA_384</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>hostkey_method_ssh_ecdsa_384</name>

<init>= <expr><literal type="string">"ecdsa-sha2-nistp384"</literal></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LIBSSH2_KNOWNHOST_KEY_ECDSA_256</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>hostkey_method_ssh_ecdsa_256</name>

<init>= <expr><literal type="string">"ecdsa-sha2-nistp256"</literal></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>hostkey_method_ssh_rsa</name>

<init>= <expr><literal type="string">"ssh-rsa"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>hostkey_method_ssh_dss</name>

<init>= <expr><literal type="string">"ssh-dss"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>hostkey_method</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ssh_conn</name></name> <modifier>*</modifier></type><name>sshc</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>sshc</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>libssh2_knownhost</name></name><modifier>*</modifier></type> <name>store</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>kh_name_end</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>kh_name_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>port</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>found</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>sshc</name><operator>-&gt;</operator><name>kh</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_SSH_HOST_PUBLIC_KEY_MD5</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<while>while<condition>(<expr><operator>!</operator><call><name>libssh2_knownhost_get</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>kh</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>store</name></expr></argument>, <argument><expr><name>store</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>store</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>store</name><operator>-&gt;</operator><name>name</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>store</name><operator>-&gt;</operator><name>name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'['</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>kh_name_end</name> <operator>=</operator> <call><name>strstr</name><argument_list>(<argument><expr><name><name>store</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"]:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>kh_name_end</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Invalid host pattern %s in %s\n"</literal></expr></argument>,

<argument><expr><name><name>store</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_SSH_KNOWNHOSTS</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>port</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>kh_name_end</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>kh_name_end</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>port</name> <operator>==</operator> <name><name>conn</name><operator>-&gt;</operator><name>remote_port</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>kh_name_size</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>store</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>kh_name_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name><name>store</name><operator>-&gt;</operator><name>name</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>host</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name>kh_name_size</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>found</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>store</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>host</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>found</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>found</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if<condition>(<expr><name>found</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Found host %s in %s\n"</literal></expr></argument>,

<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>host</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_SSH_KNOWNHOSTS</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch<condition>(<expr><name><name>store</name><operator>-&gt;</operator><name>typemask</name></name> <operator>&amp;</operator> <name>LIBSSH2_KNOWNHOST_KEY_MASK</name></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LIBSSH2_KNOWNHOST_KEY_ED25519</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>LIBSSH2_KNOWNHOST_KEY_ED25519</name></expr>:</case>

<expr_stmt><expr><name>hostkey_method</name> <operator>=</operator> <name>hostkey_method_ssh_ed25519</name></expr>;</expr_stmt>

<break>break;</break>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LIBSSH2_KNOWNHOST_KEY_ECDSA_521</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>LIBSSH2_KNOWNHOST_KEY_ECDSA_521</name></expr>:</case>

<expr_stmt><expr><name>hostkey_method</name> <operator>=</operator> <name>hostkey_method_ssh_ecdsa_521</name></expr>;</expr_stmt>

<break>break;</break>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LIBSSH2_KNOWNHOST_KEY_ECDSA_384</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>LIBSSH2_KNOWNHOST_KEY_ECDSA_384</name></expr>:</case>

<expr_stmt><expr><name>hostkey_method</name> <operator>=</operator> <name>hostkey_method_ssh_ecdsa_384</name></expr>;</expr_stmt>

<break>break;</break>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LIBSSH2_KNOWNHOST_KEY_ECDSA_256</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>LIBSSH2_KNOWNHOST_KEY_ECDSA_256</name></expr>:</case>

<expr_stmt><expr><name>hostkey_method</name> <operator>=</operator> <name>hostkey_method_ssh_ecdsa_256</name></expr>;</expr_stmt>

<break>break;</break>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<case>case <expr><name>LIBSSH2_KNOWNHOST_KEY_SSHRSA</name></expr>:</case>

<expr_stmt><expr><name>hostkey_method</name> <operator>=</operator> <name>hostkey_method_ssh_rsa</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>LIBSSH2_KNOWNHOST_KEY_SSHDSS</name></expr>:</case>

<expr_stmt><expr><name>hostkey_method</name> <operator>=</operator> <name>hostkey_method_ssh_dss</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>LIBSSH2_KNOWNHOST_KEY_RSA1</name></expr>:</case>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Found host key type RSA1 which is not supported\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_SSH</name></expr>;</return>

<default>default:</default>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Unknown host key type: %i\n"</literal></expr></argument>,

<argument><expr><operator>(</operator><name><name>store</name><operator>-&gt;</operator><name>typemask</name></name> <operator>&amp;</operator> <name>LIBSSH2_KNOWNHOST_KEY_MASK</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_SSH</name></expr>;</return>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Set \"%s\" as SSH hostkey type\n"</literal></expr></argument>, <argument><expr><name>hostkey_method</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>libssh2_session_error_to_CURLE</name><argument_list>(

<argument><expr><call><name>libssh2_session_method_pref</name><argument_list>(

<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>ssh_session</name></name></expr></argument>, <argument><expr><name>LIBSSH2_METHOD_HOSTKEY</name></expr></argument>, <argument><expr><name>hostkey_method</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Did not find host %s in %s\n"</literal></expr></argument>,

<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>host</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_SSH_KNOWNHOSTS</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>ssh_statemach_act</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>block</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>SSHPROTO</name></name> <modifier>*</modifier></type><name>sftp_scp</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>protop</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ssh_conn</name></name> <modifier>*</modifier></type><name>sshc</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>sshc</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>curl_socket_t</name></type> <name>sock</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>sock</name><index>[<expr><name>FIRSTSOCKET</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>new_readdir_line</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>LIBSSH2_ERROR_NONE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>seekerr</name> <init>= <expr><name>CURL_SEEKFUNC_OK</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>block</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<do>do <block>{<block_content>

<switch>switch<condition>(<expr><name><name>sshc</name><operator>-&gt;</operator><name>state</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>SSH_INIT</name></expr>:</case>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>secondCreateDirs</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>nextstate</name></name> <operator>=</operator> <name>SSH_NO_STATE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>actualcode</name></name> <operator>=</operator> <name>CURLE_OK</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>libssh2_session_set_blocking</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>ssh_session</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>ssh_force_knownhost_key_type</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SESSION_FREE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_S_STARTUP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><name>SSH_S_STARTUP</name></expr>:</case>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>libssh2_session_startup</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>ssh_session</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>sock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>==</operator> <name>LIBSSH2_ERROR_EAGAIN</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>err_msg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>libssh2_session_last_error</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>ssh_session</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>err_msg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Failure establishing ssh session: %d, %s"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><name>err_msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SESSION_FREE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>actualcode</name></name> <operator>=</operator> <name>CURLE_FAILED_INIT</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_HOSTKEY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><name>SSH_HOSTKEY</name></expr>:</case>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>ssh_check_fingerprint</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>result</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_AUTHLIST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>SSH_AUTHLIST</name></expr>:</case>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>authlist</name></name> <operator>=</operator> <call><name>libssh2_userauth_list</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>ssh_session</name></name></expr></argument>,

<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>user</name></name></expr></argument>,

<argument><expr><call><name>curlx_uztoui</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>user</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>sshc</name><operator>-&gt;</operator><name>authlist</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>libssh2_userauth_authenticated</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>ssh_session</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>authed</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"SSH user accepted with no authentication\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_AUTH_DONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>libssh2_session_last_errno</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>ssh_session</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>err</name> <operator>==</operator> <name>LIBSSH2_ERROR_EAGAIN</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <name>LIBSSH2_ERROR_EAGAIN</name></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SESSION_FREE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>actualcode</name></name> <operator>=</operator> <call><name>libssh2_session_error_to_CURLE</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"SSH authentication methods available: %s\n"</literal></expr></argument>,

<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>authlist</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_AUTH_PKEY_INIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>SSH_AUTH_PKEY_INIT</name></expr>:</case>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>authed</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>ssh_auth_types</name></name> <operator>&amp;</operator> <name>CURLSSH_AUTH_PUBLICKEY</name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><call><name>strstr</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>authlist</name></name></expr></argument>, <argument><expr><literal type="string">"publickey"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>out_of_memory</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>rsa_pub</name></name> <operator>=</operator> <name><name>sshc</name><operator>-&gt;</operator><name>rsa</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_SSH_PRIVATE_KEY</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>rsa</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_SSH_PRIVATE_KEY</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>home</name> <init>= <expr><call><name>curl_getenv</name><argument_list>(<argument><expr><literal type="string">"HOME"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>home</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>rsa</name></name> <operator>=</operator> <call><name>aprintf</name><argument_list>(<argument><expr><literal type="string">"%s/.ssh/id_rsa"</literal></expr></argument>, <argument><expr><name>home</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>sshc</name><operator>-&gt;</operator><name>rsa</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>out_of_memory</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>(<expr><call><name>access</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>rsa</name></name></expr></argument>, <argument><expr><name>R_OK</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>rsa</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>rsa</name></name> <operator>=</operator> <call><name>aprintf</name><argument_list>(<argument><expr><literal type="string">"%s/.ssh/id_dsa"</literal></expr></argument>, <argument><expr><name>home</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>sshc</name><operator>-&gt;</operator><name>rsa</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>out_of_memory</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>(<expr><call><name>access</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>rsa</name></name></expr></argument>, <argument><expr><name>R_OK</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>rsa</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>home</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>out_of_memory</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>sshc</name><operator>-&gt;</operator><name>rsa</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>rsa</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><literal type="string">"id_rsa"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>sshc</name><operator>-&gt;</operator><name>rsa</name></name> <operator>&amp;&amp;</operator> <call><name>access</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>rsa</name></name></expr></argument>, <argument><expr><name>R_OK</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>rsa</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>rsa</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><literal type="string">"id_dsa"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>sshc</name><operator>-&gt;</operator><name>rsa</name></name> <operator>&amp;&amp;</operator> <call><name>access</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>rsa</name></name></expr></argument>, <argument><expr><name>R_OK</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>rsa</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>rsa</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_SSH_PUBLIC_KEY</name></expr>]</index></name>

<operator>&amp;&amp;</operator> <name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_SSH_PUBLIC_KEY</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>rsa_pub</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_SSH_PUBLIC_KEY</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>sshc</name><operator>-&gt;</operator><name>rsa_pub</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>out_of_memory</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>out_of_memory</name> <operator>||</operator> <name><name>sshc</name><operator>-&gt;</operator><name>rsa</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>rsa</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>rsa_pub</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SESSION_FREE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>actualcode</name></name> <operator>=</operator> <name>CURLE_OUT_OF_MEMORY</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>passphrase</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>ssl</name><operator>.</operator><name>key_passwd</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>sshc</name><operator>-&gt;</operator><name>passphrase</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>passphrase</name></name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>sshc</name><operator>-&gt;</operator><name>rsa_pub</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Using SSH public key file '%s'\n"</literal></expr></argument>, <argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>rsa_pub</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Using SSH private key file '%s'\n"</literal></expr></argument>, <argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>rsa</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_AUTH_PKEY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_AUTH_PASS_INIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>SSH_AUTH_PKEY</name></expr>:</case>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>libssh2_userauth_publickey_fromfile_ex</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>ssh_session</name></name></expr></argument>,

<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>user</name></name></expr></argument>,

<argument><expr><call><name>curlx_uztoui</name><argument_list>(

<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>user</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>rsa_pub</name></name></expr></argument>,

<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>rsa</name></name></expr></argument>, <argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>passphrase</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>==</operator> <name>LIBSSH2_ERROR_EAGAIN</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>rsa_pub</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>rsa</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>authed</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Initialized SSH public key authentication\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_AUTH_DONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>err_msg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>libssh2_session_last_error</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>ssh_session</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>err_msg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"SSH public key authentication failed: %s\n"</literal></expr></argument>, <argument><expr><name>err_msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_AUTH_PASS_INIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>SSH_AUTH_PASS_INIT</name></expr>:</case>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>ssh_auth_types</name></name> <operator>&amp;</operator> <name>CURLSSH_AUTH_PASSWORD</name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><call><name>strstr</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>authlist</name></name></expr></argument>, <argument><expr><literal type="string">"password"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_AUTH_PASS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_AUTH_HOST_INIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>SSH_AUTH_PASS</name></expr>:</case>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>libssh2_userauth_password_ex</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>ssh_session</name></name></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>user</name></name></expr></argument>,

<argument><expr><call><name>curlx_uztoui</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>user</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>passwd</name></name></expr></argument>,

<argument><expr><call><name>curlx_uztoui</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>passwd</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>==</operator> <name>LIBSSH2_ERROR_EAGAIN</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>authed</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Initialized password authentication\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_AUTH_DONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_AUTH_HOST_INIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>SSH_AUTH_HOST_INIT</name></expr>:</case>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>ssh_auth_types</name></name> <operator>&amp;</operator> <name>CURLSSH_AUTH_HOST</name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><call><name>strstr</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>authlist</name></name></expr></argument>, <argument><expr><literal type="string">"hostbased"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_AUTH_HOST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_AUTH_AGENT_INIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>SSH_AUTH_HOST</name></expr>:</case>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_AUTH_AGENT_INIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>SSH_AUTH_AGENT_INIT</name></expr>:</case>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LIBSSH2_AGENT_API</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>ssh_auth_types</name></name> <operator>&amp;</operator> <name>CURLSSH_AUTH_AGENT</name><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>(</operator><call><name>strstr</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>authlist</name></name></expr></argument>, <argument><expr><literal type="string">"publickey"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>sshc</name><operator>-&gt;</operator><name>ssh_agent</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>ssh_agent</name></name> <operator>=</operator> <call><name>libssh2_agent_init</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>ssh_session</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>sshc</name><operator>-&gt;</operator><name>ssh_agent</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Could not create agent object\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_AUTH_KEY_INIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>libssh2_agent_connect</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>ssh_agent</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>==</operator> <name>LIBSSH2_ERROR_EAGAIN</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Failure connecting to agent\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_AUTH_KEY_INIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_AUTH_AGENT_LIST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_AUTH_KEY_INIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>SSH_AUTH_AGENT_LIST</name></expr>:</case>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LIBSSH2_AGENT_API</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>libssh2_agent_list_identities</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>ssh_agent</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>==</operator> <name>LIBSSH2_ERROR_EAGAIN</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Failure requesting identities to agent\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_AUTH_KEY_INIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_AUTH_AGENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>sshagent_prev_identity</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<break>break;</break>

<case>case <expr><name>SSH_AUTH_AGENT</name></expr>:</case>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LIBSSH2_AGENT_API</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>libssh2_agent_get_identity</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>ssh_agent</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>sshc</name><operator>-&gt;</operator><name>sshagent_identity</name></name></expr></argument>,

<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>sshagent_prev_identity</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>==</operator> <name>LIBSSH2_ERROR_EAGAIN</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>libssh2_agent_userauth</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>ssh_agent</name></name></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>user</name></name></expr></argument>,

<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>sshagent_identity</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>!=</operator> <name>LIBSSH2_ERROR_EAGAIN</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>sshagent_prev_identity</name></name> <operator>=</operator> <name><name>sshc</name><operator>-&gt;</operator><name>sshagent_identity</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Failure requesting identities to agent\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>(<expr><name>rc</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"No identity would match\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>==</operator> <name>LIBSSH2_ERROR_NONE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>authed</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Agent based authentication successful\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_AUTH_DONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_AUTH_KEY_INIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

</block_content>}</block></else></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<break>break;</break>

<case>case <expr><name>SSH_AUTH_KEY_INIT</name></expr>:</case>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>ssh_auth_types</name></name> <operator>&amp;</operator> <name>CURLSSH_AUTH_KEYBOARD</name><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>(</operator><call><name>strstr</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>authlist</name></name></expr></argument>, <argument><expr><literal type="string">"keyboard-interactive"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_AUTH_KEY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_AUTH_DONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>SSH_AUTH_KEY</name></expr>:</case>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>libssh2_userauth_keyboard_interactive_ex</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>ssh_session</name></name></expr></argument>,

<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>user</name></name></expr></argument>,

<argument><expr><call><name>curlx_uztoui</name><argument_list>(

<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>user</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><operator>&amp;</operator><name>kbd_callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>==</operator> <name>LIBSSH2_ERROR_EAGAIN</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>authed</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Initialized keyboard interactive authentication\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_AUTH_DONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>SSH_AUTH_DONE</name></expr>:</case>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>sshc</name><operator>-&gt;</operator><name>authed</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Authentication failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SESSION_FREE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>actualcode</name></name> <operator>=</operator> <name>CURLE_LOGIN_DENIED</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Authentication complete\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_pgrsTime</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>TIMER_APPCONNECT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>sockfd</name></name> <operator>=</operator> <name>sock</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>writesockfd</name></name> <operator>=</operator> <name>CURL_SOCKET_BAD</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>handler</name><operator>-&gt;</operator><name>protocol</name></name> <operator>==</operator> <name>CURLPROTO_SFTP</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SFTP_INIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"SSH CONNECT phase done\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_STOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>SSH_SFTP_INIT</name></expr>:</case>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>sftp_session</name></name> <operator>=</operator> <call><name>libssh2_sftp_init</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>ssh_session</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>sshc</name><operator>-&gt;</operator><name>sftp_session</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>err_msg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><call><name>libssh2_session_last_errno</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>ssh_session</name></name></expr></argument>)</argument_list></call> <operator>==</operator>

<name>LIBSSH2_ERROR_EAGAIN</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <name>LIBSSH2_ERROR_EAGAIN</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>libssh2_session_last_error</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>ssh_session</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>err_msg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Failure initializing sftp session: %s"</literal></expr></argument>, <argument><expr><name>err_msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SESSION_FREE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>actualcode</name></name> <operator>=</operator> <name>CURLE_FAILED_INIT</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SFTP_REALPATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>SSH_SFTP_REALPATH</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>tempHome</name><index>[<expr><name>PATH_MAX</name></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sftp_libssh2_realpath</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>sftp_session</name></name></expr></argument>, <argument><expr><literal type="string">"."</literal></expr></argument>,

<argument><expr><name>tempHome</name></expr></argument>, <argument><expr><name>PATH_MAX</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>==</operator> <name>LIBSSH2_ERROR_EAGAIN</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>tempHome</name><index>[<expr><name>rc</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>homedir</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>tempHome</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>sshc</name><operator>-&gt;</operator><name>homedir</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SFTP_CLOSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>actualcode</name></name> <operator>=</operator> <name>CURLE_OUT_OF_MEMORY</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>most_recent_ftp_entrypath</name></name> <operator>=</operator> <name><name>sshc</name><operator>-&gt;</operator><name>homedir</name></name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>sftp_libssh2_last_error</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>sftp_session</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>err</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>sftp_libssh2_error_to_CURLE</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_SSH</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>actualcode</name></name> <operator>=</operator> <name>result</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DEBUGF</name><argument_list>(<argument><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"error = %d makes libcurl = %d\n"</literal></expr></argument>,

<argument><expr><name>err</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_STOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></else></if_stmt>

</block_content>}</block>

<expr_stmt><expr><call><name>DEBUGF</name><argument_list>(<argument><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"SSH CONNECT phase done\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_STOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>SSH_SFTP_QUOTE_INIT</name></expr>:</case>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_getworkingpath</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>homedir</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sftp_scp</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>actualcode</name></name> <operator>=</operator> <name>result</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_STOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>quote</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Sending quote commands\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>quote_item</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>quote</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SFTP_QUOTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SFTP_GETINFO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>SSH_SFTP_POSTQUOTE_INIT</name></expr>:</case>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>postquote</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Sending quote commands\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>quote_item</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>postquote</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SFTP_QUOTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_STOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>SSH_SFTP_QUOTE</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cmd</name> <init>= <expr><name><name>sshc</name><operator>-&gt;</operator><name>quote_item</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>acceptfail</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>cmd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'*'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>cmd</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>acceptfail</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>strcasecompare</name><argument_list>(<argument><expr><literal type="string">"pwd"</literal></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><call><name>aprintf</name><argument_list>(<argument><expr><literal type="string">"257 \"%s\" is current directory.\n"</literal></expr></argument>,

<argument><expr><name><name>sftp_scp</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>tmp</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_OUT_OF_MEMORY</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SFTP_CLOSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>nextstate</name></name> <operator>=</operator> <name>SSH_NO_STATE</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>verbose</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>Curl_debug</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>CURLINFO_HEADER_OUT</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><literal type="string">"PWD\n"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_debug</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>CURLINFO_HEADER_IN</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_client_write</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>CLIENTWRITE_HEADER</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SFTP_CLOSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>nextstate</name></name> <operator>=</operator> <name>SSH_NO_STATE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>actualcode</name></name> <operator>=</operator> <name>result</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SFTP_NEXT_QUOTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<block>{<block_content>

<expr_stmt><expr><name>cp</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>cp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Syntax error in SFTP command. Supply parameter(s)!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SFTP_CLOSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>nextstate</name></name> <operator>=</operator> <name>SSH_NO_STATE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>actualcode</name></name> <operator>=</operator> <name>CURLE_QUOTE_ERROR</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_get_pathname</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sshc</name><operator>-&gt;</operator><name>quote_path1</name></name></expr></argument>, <argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>homedir</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>result</name> <operator>==</operator> <name>CURLE_OUT_OF_MEMORY</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Out of memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Syntax error: Bad first parameter"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SFTP_CLOSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>nextstate</name></name> <operator>=</operator> <name>SSH_NO_STATE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>actualcode</name></name> <operator>=</operator> <name>result</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>strncasecompare</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"chgrp "</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call> <operator>||</operator>

<call><name>strncasecompare</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"chmod "</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call> <operator>||</operator>

<call><name>strncasecompare</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"chown "</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_get_pathname</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sshc</name><operator>-&gt;</operator><name>quote_path2</name></name></expr></argument>, <argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>homedir</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>result</name> <operator>==</operator> <name>CURLE_OUT_OF_MEMORY</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Out of memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Syntax error in chgrp/chmod/chown: "</literal>

<literal type="string">"Bad second parameter"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>quote_path1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SFTP_CLOSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>nextstate</name></name> <operator>=</operator> <name>SSH_NO_STATE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>actualcode</name></name> <operator>=</operator> <name>result</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sshc</name><operator>-&gt;</operator><name>quote_attrs</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>LIBSSH2_SFTP_ATTRIBUTES</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SFTP_QUOTE_STAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>strncasecompare</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"ln "</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>||</operator>

<call><name>strncasecompare</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"symlink "</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_get_pathname</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sshc</name><operator>-&gt;</operator><name>quote_path2</name></name></expr></argument>, <argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>homedir</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>result</name> <operator>==</operator> <name>CURLE_OUT_OF_MEMORY</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Out of memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>,

<argument><expr><literal type="string">"Syntax error in ln/symlink: Bad second parameter"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>quote_path1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SFTP_CLOSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>nextstate</name></name> <operator>=</operator> <name>SSH_NO_STATE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>actualcode</name></name> <operator>=</operator> <name>result</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SFTP_QUOTE_SYMLINK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><call><name>strncasecompare</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"mkdir "</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SFTP_QUOTE_MKDIR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><call><name>strncasecompare</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"rename "</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_get_pathname</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sshc</name><operator>-&gt;</operator><name>quote_path2</name></name></expr></argument>, <argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>homedir</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>result</name> <operator>==</operator> <name>CURLE_OUT_OF_MEMORY</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Out of memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Syntax error in rename: Bad second parameter"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>quote_path1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SFTP_CLOSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>nextstate</name></name> <operator>=</operator> <name>SSH_NO_STATE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>actualcode</name></name> <operator>=</operator> <name>result</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SFTP_QUOTE_RENAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><call><name>strncasecompare</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"rmdir "</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SFTP_QUOTE_RMDIR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><call><name>strncasecompare</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"rm "</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SFTP_QUOTE_UNLINK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAS_STATVFS_SUPPORT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if<condition>(<expr><call><name>strncasecompare</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"statvfs "</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SFTP_QUOTE_STATVFS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Unknown SFTP command"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>quote_path1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>quote_path2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SFTP_CLOSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>nextstate</name></name> <operator>=</operator> <name>SSH_NO_STATE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>actualcode</name></name> <operator>=</operator> <name>CURLE_QUOTE_ERROR</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

</block_content>}</block>

<break>break;</break>

<case>case <expr><name>SSH_SFTP_NEXT_QUOTE</name></expr>:</case>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>quote_path1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>quote_path2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>quote_item</name></name> <operator>=</operator> <name><name>sshc</name><operator>-&gt;</operator><name>quote_item</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>sshc</name><operator>-&gt;</operator><name>quote_item</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SFTP_QUOTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>sshc</name><operator>-&gt;</operator><name>nextstate</name></name> <operator>!=</operator> <name>SSH_NO_STATE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>nextstate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>nextstate</name></name> <operator>=</operator> <name>SSH_NO_STATE</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SFTP_GETINFO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>SSH_SFTP_QUOTE_STAT</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cmd</name> <init>= <expr><name><name>sshc</name><operator>-&gt;</operator><name>quote_item</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>acceptfail</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>cmd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'*'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>cmd</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>acceptfail</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>strncasecompare</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"chmod"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>libssh2_sftp_stat_ex</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>sftp_session</name></name></expr></argument>, <argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>quote_path2</name></name></expr></argument>,

<argument><expr><call><name>curlx_uztoui</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>quote_path2</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>LIBSSH2_SFTP_STAT</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>sshc</name><operator>-&gt;</operator><name>quote_attrs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>==</operator> <name>LIBSSH2_ERROR_EAGAIN</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>sshc</name><operator>-&gt;</operator><name>acceptfail</name></name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>sftp_libssh2_last_error</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>sftp_session</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>quote_path1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>quote_path2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Attempt to get SFTP stats failed: %s"</literal></expr></argument>,

<argument><expr><call><name>sftp_libssh2_strerror</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SFTP_CLOSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>nextstate</name></name> <operator>=</operator> <name>SSH_NO_STATE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>actualcode</name></name> <operator>=</operator> <name>CURLE_QUOTE_ERROR</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>strncasecompare</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"chgrp"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>quote_attrs</name><operator>.</operator><name>gid</name></name> <operator>=</operator> <call><name>strtoul</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>quote_path1</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>quote_attrs</name><operator>.</operator><name>flags</name></name> <operator>=</operator> <name>LIBSSH2_SFTP_ATTR_UIDGID</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>sshc</name><operator>-&gt;</operator><name>quote_attrs</name><operator>.</operator><name>gid</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>ISDIGIT</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>quote_path1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<operator>!</operator><name><name>sshc</name><operator>-&gt;</operator><name>acceptfail</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>quote_path1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>quote_path2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Syntax error: chgrp gid not a number"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SFTP_CLOSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>nextstate</name></name> <operator>=</operator> <name>SSH_NO_STATE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>actualcode</name></name> <operator>=</operator> <name>CURLE_QUOTE_ERROR</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><call><name>strncasecompare</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"chmod"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>quote_attrs</name><operator>.</operator><name>permissions</name></name> <operator>=</operator> <call><name>strtoul</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>quote_path1</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>quote_attrs</name><operator>.</operator><name>flags</name></name> <operator>=</operator> <name>LIBSSH2_SFTP_ATTR_PERMISSIONS</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>sshc</name><operator>-&gt;</operator><name>quote_attrs</name><operator>.</operator><name>permissions</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>

<operator>!</operator><call><name>ISDIGIT</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>quote_path1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>quote_path1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>quote_path2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Syntax error: chmod permissions not a number"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SFTP_CLOSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>nextstate</name></name> <operator>=</operator> <name>SSH_NO_STATE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>actualcode</name></name> <operator>=</operator> <name>CURLE_QUOTE_ERROR</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><call><name>strncasecompare</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"chown"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>quote_attrs</name><operator>.</operator><name>uid</name></name> <operator>=</operator> <call><name>strtoul</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>quote_path1</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>quote_attrs</name><operator>.</operator><name>flags</name></name> <operator>=</operator> <name>LIBSSH2_SFTP_ATTR_UIDGID</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>sshc</name><operator>-&gt;</operator><name>quote_attrs</name><operator>.</operator><name>uid</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>ISDIGIT</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>quote_path1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<operator>!</operator><name><name>sshc</name><operator>-&gt;</operator><name>acceptfail</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>quote_path1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>quote_path2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Syntax error: chown uid not a number"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SFTP_CLOSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>nextstate</name></name> <operator>=</operator> <name>SSH_NO_STATE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>actualcode</name></name> <operator>=</operator> <name>CURLE_QUOTE_ERROR</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SFTP_QUOTE_SETSTAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>SSH_SFTP_QUOTE_SETSTAT</name></expr>:</case>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>libssh2_sftp_stat_ex</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>sftp_session</name></name></expr></argument>, <argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>quote_path2</name></name></expr></argument>,

<argument><expr><call><name>curlx_uztoui</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>quote_path2</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>LIBSSH2_SFTP_SETSTAT</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>sshc</name><operator>-&gt;</operator><name>quote_attrs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>==</operator> <name>LIBSSH2_ERROR_EAGAIN</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>sshc</name><operator>-&gt;</operator><name>acceptfail</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>sftp_libssh2_last_error</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>sftp_session</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>quote_path1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>quote_path2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Attempt to set SFTP stats failed: %s"</literal></expr></argument>,

<argument><expr><call><name>sftp_libssh2_strerror</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SFTP_CLOSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>nextstate</name></name> <operator>=</operator> <name>SSH_NO_STATE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>actualcode</name></name> <operator>=</operator> <name>CURLE_QUOTE_ERROR</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SFTP_NEXT_QUOTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>SSH_SFTP_QUOTE_SYMLINK</name></expr>:</case>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>libssh2_sftp_symlink_ex</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>sftp_session</name></name></expr></argument>, <argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>quote_path1</name></name></expr></argument>,

<argument><expr><call><name>curlx_uztoui</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>quote_path1</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>quote_path2</name></name></expr></argument>,

<argument><expr><call><name>curlx_uztoui</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>quote_path2</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>LIBSSH2_SFTP_SYMLINK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>==</operator> <name>LIBSSH2_ERROR_EAGAIN</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>sshc</name><operator>-&gt;</operator><name>acceptfail</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>sftp_libssh2_last_error</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>sftp_session</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>quote_path1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>quote_path2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"symlink command failed: %s"</literal></expr></argument>,

<argument><expr><call><name>sftp_libssh2_strerror</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SFTP_CLOSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>nextstate</name></name> <operator>=</operator> <name>SSH_NO_STATE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>actualcode</name></name> <operator>=</operator> <name>CURLE_QUOTE_ERROR</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SFTP_NEXT_QUOTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>SSH_SFTP_QUOTE_MKDIR</name></expr>:</case>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>libssh2_sftp_mkdir_ex</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>sftp_session</name></name></expr></argument>, <argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>quote_path1</name></name></expr></argument>,

<argument><expr><call><name>curlx_uztoui</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>quote_path1</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>new_directory_perms</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>==</operator> <name>LIBSSH2_ERROR_EAGAIN</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>sshc</name><operator>-&gt;</operator><name>acceptfail</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>sftp_libssh2_last_error</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>sftp_session</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>quote_path1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"mkdir command failed: %s"</literal></expr></argument>, <argument><expr><call><name>sftp_libssh2_strerror</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SFTP_CLOSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>nextstate</name></name> <operator>=</operator> <name>SSH_NO_STATE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>actualcode</name></name> <operator>=</operator> <name>CURLE_QUOTE_ERROR</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SFTP_NEXT_QUOTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>SSH_SFTP_QUOTE_RENAME</name></expr>:</case>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>libssh2_sftp_rename_ex</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>sftp_session</name></name></expr></argument>, <argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>quote_path1</name></name></expr></argument>,

<argument><expr><call><name>curlx_uztoui</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>quote_path1</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>quote_path2</name></name></expr></argument>,

<argument><expr><call><name>curlx_uztoui</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>quote_path2</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>LIBSSH2_SFTP_RENAME_OVERWRITE</name> <operator>|</operator>

<name>LIBSSH2_SFTP_RENAME_ATOMIC</name> <operator>|</operator>

<name>LIBSSH2_SFTP_RENAME_NATIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>==</operator> <name>LIBSSH2_ERROR_EAGAIN</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>sshc</name><operator>-&gt;</operator><name>acceptfail</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>sftp_libssh2_last_error</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>sftp_session</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>quote_path1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>quote_path2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"rename command failed: %s"</literal></expr></argument>, <argument><expr><call><name>sftp_libssh2_strerror</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SFTP_CLOSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>nextstate</name></name> <operator>=</operator> <name>SSH_NO_STATE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>actualcode</name></name> <operator>=</operator> <name>CURLE_QUOTE_ERROR</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SFTP_NEXT_QUOTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>SSH_SFTP_QUOTE_RMDIR</name></expr>:</case>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>libssh2_sftp_rmdir_ex</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>sftp_session</name></name></expr></argument>, <argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>quote_path1</name></name></expr></argument>,

<argument><expr><call><name>curlx_uztoui</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>quote_path1</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>==</operator> <name>LIBSSH2_ERROR_EAGAIN</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>sshc</name><operator>-&gt;</operator><name>acceptfail</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>sftp_libssh2_last_error</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>sftp_session</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>quote_path1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"rmdir command failed: %s"</literal></expr></argument>, <argument><expr><call><name>sftp_libssh2_strerror</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SFTP_CLOSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>nextstate</name></name> <operator>=</operator> <name>SSH_NO_STATE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>actualcode</name></name> <operator>=</operator> <name>CURLE_QUOTE_ERROR</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SFTP_NEXT_QUOTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>SSH_SFTP_QUOTE_UNLINK</name></expr>:</case>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>libssh2_sftp_unlink_ex</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>sftp_session</name></name></expr></argument>, <argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>quote_path1</name></name></expr></argument>,

<argument><expr><call><name>curlx_uztoui</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>quote_path1</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>==</operator> <name>LIBSSH2_ERROR_EAGAIN</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>sshc</name><operator>-&gt;</operator><name>acceptfail</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>sftp_libssh2_last_error</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>sftp_session</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>quote_path1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"rm command failed: %s"</literal></expr></argument>, <argument><expr><call><name>sftp_libssh2_strerror</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SFTP_CLOSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>nextstate</name></name> <operator>=</operator> <name>SSH_NO_STATE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>actualcode</name></name> <operator>=</operator> <name>CURLE_QUOTE_ERROR</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SFTP_NEXT_QUOTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAS_STATVFS_SUPPORT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>SSH_SFTP_QUOTE_STATVFS</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>LIBSSH2_SFTP_STATVFS</name></type> <name>statvfs</name></decl>;</decl_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>libssh2_sftp_statvfs</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>sftp_session</name></name></expr></argument>, <argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>quote_path1</name></name></expr></argument>,

<argument><expr><call><name>curlx_uztoui</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>quote_path1</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><operator>&amp;</operator><name>statvfs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>==</operator> <name>LIBSSH2_ERROR_EAGAIN</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>sshc</name><operator>-&gt;</operator><name>acceptfail</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>sftp_libssh2_last_error</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>sftp_session</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>quote_path1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"statvfs command failed: %s"</literal></expr></argument>, <argument><expr><call><name>sftp_libssh2_strerror</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SFTP_CLOSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>nextstate</name></name> <operator>=</operator> <name>SSH_NO_STATE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>actualcode</name></name> <operator>=</operator> <name>CURLE_QUOTE_ERROR</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name>rc</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><call><name>aprintf</name><argument_list>(<argument><expr><literal type="string">"statvfs:\n"</literal>

<literal type="string">"f_bsize: %llu\n"</literal> <literal type="string">"f_frsize: %llu\n"</literal>

<literal type="string">"f_blocks: %llu\n"</literal> <literal type="string">"f_bfree: %llu\n"</literal>

<literal type="string">"f_bavail: %llu\n"</literal> <literal type="string">"f_files: %llu\n"</literal>

<literal type="string">"f_ffree: %llu\n"</literal> <literal type="string">"f_favail: %llu\n"</literal>

<literal type="string">"f_fsid: %llu\n"</literal> <literal type="string">"f_flag: %llu\n"</literal>

<literal type="string">"f_namemax: %llu\n"</literal></expr></argument>,

<argument><expr><name><name>statvfs</name><operator>.</operator><name>f_bsize</name></name></expr></argument>, <argument><expr><name><name>statvfs</name><operator>.</operator><name>f_frsize</name></name></expr></argument>,

<argument><expr><name><name>statvfs</name><operator>.</operator><name>f_blocks</name></name></expr></argument>, <argument><expr><name><name>statvfs</name><operator>.</operator><name>f_bfree</name></name></expr></argument>,

<argument><expr><name><name>statvfs</name><operator>.</operator><name>f_bavail</name></name></expr></argument>, <argument><expr><name><name>statvfs</name><operator>.</operator><name>f_files</name></name></expr></argument>,

<argument><expr><name><name>statvfs</name><operator>.</operator><name>f_ffree</name></name></expr></argument>, <argument><expr><name><name>statvfs</name><operator>.</operator><name>f_favail</name></name></expr></argument>,

<argument><expr><name><name>statvfs</name><operator>.</operator><name>f_fsid</name></name></expr></argument>, <argument><expr><name><name>statvfs</name><operator>.</operator><name>f_flag</name></name></expr></argument>,

<argument><expr><name><name>statvfs</name><operator>.</operator><name>f_namemax</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>tmp</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_OUT_OF_MEMORY</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SFTP_CLOSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>nextstate</name></name> <operator>=</operator> <name>SSH_NO_STATE</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_client_write</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>CLIENTWRITE_HEADER</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SFTP_CLOSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>nextstate</name></name> <operator>=</operator> <name>SSH_NO_STATE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>actualcode</name></name> <operator>=</operator> <name>result</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SFTP_NEXT_QUOTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<case>case <expr><name>SSH_SFTP_GETINFO</name></expr>:</case>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>get_filetime</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SFTP_FILETIME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SFTP_TRANS_INIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>SSH_SFTP_FILETIME</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>LIBSSH2_SFTP_ATTRIBUTES</name></type> <name>attrs</name></decl>;</decl_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>libssh2_sftp_stat_ex</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>sftp_session</name></name></expr></argument>, <argument><expr><name><name>sftp_scp</name><operator>-&gt;</operator><name>path</name></name></expr></argument>,

<argument><expr><call><name>curlx_uztoui</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>sftp_scp</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>LIBSSH2_SFTP_STAT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>attrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>==</operator> <name>LIBSSH2_ERROR_EAGAIN</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>filetime</name></name> <operator>=</operator> <name><name>attrs</name><operator>.</operator><name>mtime</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SFTP_TRANS_INIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>SSH_SFTP_TRANS_INIT</name></expr>:</case>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>upload</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SFTP_UPLOAD_INIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>sftp_scp</name><operator>-&gt;</operator><name>path</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>sftp_scp</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SFTP_READDIR_INIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SFTP_DOWNLOAD_INIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>SSH_SFTP_UPLOAD_INIT</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>flags</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>resume_from</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>LIBSSH2_SFTP_ATTRIBUTES</name></type> <name>attrs</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>resume_from</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>libssh2_sftp_stat_ex</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>sftp_session</name></name></expr></argument>, <argument><expr><name><name>sftp_scp</name><operator>-&gt;</operator><name>path</name></name></expr></argument>,

<argument><expr><call><name>curlx_uztoui</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>sftp_scp</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>LIBSSH2_SFTP_STAT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>attrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>==</operator> <name>LIBSSH2_ERROR_EAGAIN</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>resume_from</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<decl_stmt><decl><type><name>curl_off_t</name></type> <name>size</name> <init>= <expr><name><name>attrs</name><operator>.</operator><name>filesize</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>size</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Bad file size (%"</literal> <name>CURL_FORMAT_CURL_OFF_T</name> <literal type="string">")"</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_BAD_DOWNLOAD_RESUME</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>resume_from</name></name> <operator>=</operator> <name><name>attrs</name><operator>.</operator><name>filesize</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>ftp_append</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>flags</name> <operator>=</operator> <name>LIBSSH2_FXF_WRITE</name><operator>|</operator><name>LIBSSH2_FXF_CREAT</name><operator>|</operator><name>LIBSSH2_FXF_APPEND</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>resume_from</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>flags</name> <operator>=</operator> <name>LIBSSH2_FXF_WRITE</name><operator>|</operator><name>LIBSSH2_FXF_APPEND</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>flags</name> <operator>=</operator> <name>LIBSSH2_FXF_WRITE</name><operator>|</operator><name>LIBSSH2_FXF_CREAT</name><operator>|</operator><name>LIBSSH2_FXF_TRUNC</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>sftp_handle</name></name> <operator>=</operator>

<call><name>libssh2_sftp_open_ex</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>sftp_session</name></name></expr></argument>, <argument><expr><name><name>sftp_scp</name><operator>-&gt;</operator><name>path</name></name></expr></argument>,

<argument><expr><call><name>curlx_uztoui</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>sftp_scp</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>flags</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>new_file_perms</name></name></expr></argument>,

<argument><expr><name>LIBSSH2_SFTP_OPENFILE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>sshc</name><operator>-&gt;</operator><name>sftp_handle</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>libssh2_session_last_errno</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>ssh_session</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>LIBSSH2_ERROR_EAGAIN</name> <operator>==</operator> <name>rc</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>LIBSSH2_ERROR_SFTP_PROTOCOL</name> <operator>==</operator> <name>rc</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>sftp_libssh2_last_error</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>sftp_session</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt> 

<if_stmt><if>if<condition>(<expr><name><name>sshc</name><operator>-&gt;</operator><name>secondCreateDirs</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SFTP_CLOSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>actualcode</name></name> <operator>=</operator> <ternary><condition><expr><name>err</name><operator>&gt;=</operator> <name>LIBSSH2_FX_OK</name></expr>?</condition><then>

<expr><call><name>sftp_libssh2_error_to_CURLE</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></then><else>:<expr><name>CURLE_SSH</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Creating the dir/file failed: %s"</literal></expr></argument>,

<argument><expr><call><name>sftp_libssh2_strerror</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><operator>(</operator><name>err</name> <operator>==</operator> <name>LIBSSH2_FX_NO_SUCH_FILE</name><operator>)</operator> <operator>||</operator>

<operator>(</operator><name>err</name> <operator>==</operator> <name>LIBSSH2_FX_FAILURE</name><operator>)</operator> <operator>||</operator>

<operator>(</operator><name>err</name> <operator>==</operator> <name>LIBSSH2_FX_NO_SUCH_PATH</name><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>ftp_create_missing_dirs</name></name> <operator>&amp;&amp;</operator>

<operator>(</operator><call><name>strlen</name><argument_list>(<argument><expr><name><name>sftp_scp</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>secondCreateDirs</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SFTP_CREATE_DIRS_INIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SFTP_CLOSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>actualcode</name></name> <operator>=</operator> <ternary><condition><expr><name>err</name><operator>&gt;=</operator> <name>LIBSSH2_FX_OK</name></expr>?</condition><then>

<expr><call><name>sftp_libssh2_error_to_CURLE</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></then><else>:<expr><name>CURLE_SSH</name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>sshc</name><operator>-&gt;</operator><name>actualcode</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>actualcode</name></name> <operator>=</operator> <name>CURLE_SSH</name></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Upload failed: %s (%d/%d)"</literal></expr></argument>,

<argument><expr><ternary><condition><expr><name>err</name><operator>&gt;=</operator> <name>LIBSSH2_FX_OK</name></expr>?</condition><then><expr><call><name>sftp_libssh2_strerror</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></then><else>:<expr><literal type="string">"ssh error"</literal></expr></else></ternary></expr></argument>,

<argument><expr><name>err</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>resume_from</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>seek_func</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>Curl_set_in_callback</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>seekerr</name> <operator>=</operator> <call><name><name>conn</name><operator>-&gt;</operator><name>seek_func</name></name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>seek_client</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>resume_from</name></name></expr></argument>,

<argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_set_in_callback</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>seekerr</name> <operator>!=</operator> <name>CURL_SEEKFUNC_OK</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>curl_off_t</name></type> <name>passed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>seekerr</name> <operator>!=</operator> <name>CURL_SEEKFUNC_CANTSEEK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Could not seek stream"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_FTP_COULDNT_USE_REST</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<do>do <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>readthisamountnow</name> <init>=

<expr><ternary><condition><expr><operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>resume_from</name></name> <operator>-</operator> <name>passed</name> <operator>&gt;</operator> <name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>buffer_size</name></name><operator>)</operator></expr> ?</condition><then>

<expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>buffer_size</name></name></expr> </then><else>:

<expr><call><name>curlx_sotouz</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>resume_from</name></name> <operator>-</operator> <name>passed</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>actuallyread</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>Curl_set_in_callback</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>actuallyread</name> <operator>=</operator> <call><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>fread_func</name></name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,

<argument><expr><name>readthisamountnow</name></expr></argument>,

<argument><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>in</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_set_in_callback</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>passed</name> <operator>+=</operator> <name>actuallyread</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>actuallyread</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>actuallyread</name> <operator>&gt;</operator> <name>readthisamountnow</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Failed to read data"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_FTP_COULDNT_USE_REST</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block> while<condition>(<expr><name>passed</name> <operator>&lt;</operator> <name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>resume_from</name></name></expr>)</condition>;</do>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>infilesize</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>infilesize</name></name> <operator>-=</operator> <name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>resume_from</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>size</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>infilesize</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_pgrsSetUploadSize</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>infilesize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>SFTP_SEEK</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>sftp_handle</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>resume_from</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>infilesize</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>size</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>infilesize</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_pgrsSetUploadSize</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>infilesize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>Curl_setup_transfer</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FIRSTSOCKET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>sockfd</name></name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>writesockfd</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SFTP_CLOSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>actualcode</name></name> <operator>=</operator> <name>result</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>orig_waitfor</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>keepon</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>cselect_bits</name></name> <operator>=</operator> <name>CURL_CSELECT_OUT</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_expire</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>EXPIRE_RUN_NOW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_STOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>SSH_SFTP_CREATE_DIRS_INIT</name></expr>:</case>

<if_stmt><if>if<condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>sftp_scp</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>slash_pos</name></name> <operator>=</operator> <name><name>sftp_scp</name><operator>-&gt;</operator><name>path</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SFTP_CREATE_DIRS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SFTP_UPLOAD_INIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>SSH_SFTP_CREATE_DIRS</name></expr>:</case>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>slash_pos</name></name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>slash_pos</name></name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>sshc</name><operator>-&gt;</operator><name>slash_pos</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name><name>sshc</name><operator>-&gt;</operator><name>slash_pos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Creating directory '%s'\n"</literal></expr></argument>, <argument><expr><name><name>sftp_scp</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SFTP_CREATE_DIRS_MKDIR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SFTP_UPLOAD_INIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>SSH_SFTP_CREATE_DIRS_MKDIR</name></expr>:</case>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>libssh2_sftp_mkdir_ex</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>sftp_session</name></name></expr></argument>, <argument><expr><name><name>sftp_scp</name><operator>-&gt;</operator><name>path</name></name></expr></argument>,

<argument><expr><call><name>curlx_uztoui</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>sftp_scp</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>new_directory_perms</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>==</operator> <name>LIBSSH2_ERROR_EAGAIN</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name><name>sshc</name><operator>-&gt;</operator><name>slash_pos</name></name> <operator>=</operator> <literal type="char">'/'</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name><name>sshc</name><operator>-&gt;</operator><name>slash_pos</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>sftp_libssh2_last_error</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>sftp_session</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>err</name> <operator>!=</operator> <name>LIBSSH2_FX_FILE_ALREADY_EXISTS</name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name>err</name> <operator>!=</operator> <name>LIBSSH2_FX_FAILURE</name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name>err</name> <operator>!=</operator> <name>LIBSSH2_FX_PERMISSION_DENIED</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>sftp_libssh2_error_to_CURLE</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SFTP_CLOSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>actualcode</name></name> <operator>=</operator> <ternary><condition><expr><name>result</name></expr>?</condition><then><expr><name>result</name></expr></then><else>:<expr><name>CURLE_SSH</name></expr></else></ternary></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SFTP_CREATE_DIRS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>SSH_SFTP_READDIR_INIT</name></expr>:</case>

<expr_stmt><expr><call><name>Curl_pgrsSetDownloadSize</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>opt_no_body</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_STOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>sftp_handle</name></name> <operator>=</operator> <call><name>libssh2_sftp_open_ex</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>sftp_session</name></name></expr></argument>,

<argument><expr><name><name>sftp_scp</name><operator>-&gt;</operator><name>path</name></name></expr></argument>,

<argument><expr><call><name>curlx_uztoui</name><argument_list>(

<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>sftp_scp</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>LIBSSH2_SFTP_OPENDIR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>sshc</name><operator>-&gt;</operator><name>sftp_handle</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>libssh2_session_last_errno</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>ssh_session</name></name></expr></argument>)</argument_list></call> <operator>==</operator>

<name>LIBSSH2_ERROR_EAGAIN</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <name>LIBSSH2_ERROR_EAGAIN</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>sftp_libssh2_last_error</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>sftp_session</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Could not open directory for reading: %s"</literal></expr></argument>,

<argument><expr><call><name>sftp_libssh2_strerror</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SFTP_CLOSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>sftp_libssh2_error_to_CURLE</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>actualcode</name></name> <operator>=</operator> <ternary><condition><expr><name>result</name></expr>?</condition><then><expr><name>result</name></expr></then><else>:<expr><name>CURLE_SSH</name></expr></else></ternary></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>readdir_filename</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>PATH_MAX</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>sshc</name><operator>-&gt;</operator><name>readdir_filename</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SFTP_CLOSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>actualcode</name></name> <operator>=</operator> <name>CURLE_OUT_OF_MEMORY</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>readdir_longentry</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>PATH_MAX</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>sshc</name><operator>-&gt;</operator><name>readdir_longentry</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>readdir_filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SFTP_CLOSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>actualcode</name></name> <operator>=</operator> <name>CURLE_OUT_OF_MEMORY</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SFTP_READDIR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>SSH_SFTP_READDIR</name></expr>:</case>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>libssh2_sftp_readdir_ex</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>sftp_handle</name></name></expr></argument>,

<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>readdir_filename</name></name></expr></argument>,

<argument><expr><name>PATH_MAX</name></expr></argument>,

<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>readdir_longentry</name></name></expr></argument>,

<argument><expr><name>PATH_MAX</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>sshc</name><operator>-&gt;</operator><name>readdir_attrs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>==</operator> <name>LIBSSH2_ERROR_EAGAIN</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>readdir_len</name></name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <name>rc</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>readdir_filename</name><index>[<expr><name><name>sshc</name><operator>-&gt;</operator><name>readdir_len</name></name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>ftp_list_only</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tmpLine</name></decl>;</decl_stmt>

<expr_stmt><expr><name>tmpLine</name> <operator>=</operator> <call><name>aprintf</name><argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>readdir_filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>tmpLine</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SFTP_CLOSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>actualcode</name></name> <operator>=</operator> <name>CURLE_OUT_OF_MEMORY</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_client_write</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>CLIENTWRITE_BODY</name></expr></argument>,

<argument><expr><name>tmpLine</name></expr></argument>, <argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>readdir_len</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>tmpLine</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_STOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>bytecount</name></name> <operator>+=</operator> <name><name>sshc</name><operator>-&gt;</operator><name>readdir_len</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>verbose</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>Curl_debug</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>CURLINFO_DATA_OUT</name></expr></argument>, <argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>readdir_filename</name></name></expr></argument>,

<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>readdir_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>readdir_currLen</name></name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>readdir_longentry</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>readdir_totalLen</name></name> <operator>=</operator> <literal type="number">80</literal> <operator>+</operator> <name><name>sshc</name><operator>-&gt;</operator><name>readdir_currLen</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>readdir_line</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>readdir_totalLen</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>sshc</name><operator>-&gt;</operator><name>readdir_line</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>readdir_filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>readdir_longentry</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SFTP_CLOSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>actualcode</name></name> <operator>=</operator> <name>CURLE_OUT_OF_MEMORY</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>readdir_line</name></name></expr></argument>, <argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>readdir_longentry</name></name></expr></argument>,

<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>readdir_currLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>sshc</name><operator>-&gt;</operator><name>readdir_attrs</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>LIBSSH2_SFTP_ATTR_PERMISSIONS</name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><operator>(</operator><name><name>sshc</name><operator>-&gt;</operator><name>readdir_attrs</name><operator>.</operator><name>permissions</name></name> <operator>&amp;</operator> <name>LIBSSH2_SFTP_S_IFMT</name><operator>)</operator> <operator>==</operator>

<name>LIBSSH2_SFTP_S_IFLNK</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>readdir_linkPath</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>PATH_MAX</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>sshc</name><operator>-&gt;</operator><name>readdir_linkPath</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>readdir_filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>readdir_longentry</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SFTP_CLOSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>actualcode</name></name> <operator>=</operator> <name>CURLE_OUT_OF_MEMORY</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>msnprintf</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>readdir_linkPath</name></name></expr></argument>, <argument><expr><name>PATH_MAX</name></expr></argument>, <argument><expr><literal type="string">"%s%s"</literal></expr></argument>, <argument><expr><name><name>sftp_scp</name><operator>-&gt;</operator><name>path</name></name></expr></argument>,

<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>readdir_filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SFTP_READDIR_LINK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SFTP_READDIR_BOTTOM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name>rc</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>readdir_filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>readdir_longentry</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SFTP_READDIR_DONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name>rc</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>sftp_libssh2_last_error</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>sftp_session</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>sftp_libssh2_error_to_CURLE</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>actualcode</name></name> <operator>=</operator> <ternary><condition><expr><name>result</name></expr>?</condition><then><expr><name>result</name></expr></then><else>:<expr><name>CURLE_SSH</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Could not open remote file for reading: %s :: %d"</literal></expr></argument>,

<argument><expr><call><name>sftp_libssh2_strerror</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>libssh2_session_last_errno</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>ssh_session</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>readdir_filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>readdir_longentry</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SFTP_CLOSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>SSH_SFTP_READDIR_LINK</name></expr>:</case>

<expr_stmt><expr><name>rc</name> <operator>=</operator>

<call><name>libssh2_sftp_symlink_ex</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>sftp_session</name></name></expr></argument>,

<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>readdir_linkPath</name></name></expr></argument>,

<argument><expr><call><name>curlx_uztoui</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>readdir_linkPath</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>readdir_filename</name></name></expr></argument>,

<argument><expr><name>PATH_MAX</name></expr></argument>, <argument><expr><name>LIBSSH2_SFTP_READLINK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>==</operator> <name>LIBSSH2_ERROR_EAGAIN</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>readdir_len</name></name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <name>rc</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>readdir_linkPath</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>readdir_totalLen</name></name> <operator>+=</operator> <literal type="number">4</literal> <operator>+</operator> <name><name>sshc</name><operator>-&gt;</operator><name>readdir_len</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>new_readdir_line</name> <operator>=</operator> <call><name>Curl_saferealloc</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>readdir_line</name></name></expr></argument>,

<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>readdir_totalLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>new_readdir_line</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>readdir_line</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>readdir_filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>readdir_longentry</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SFTP_CLOSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>actualcode</name></name> <operator>=</operator> <name>CURLE_OUT_OF_MEMORY</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>readdir_line</name></name> <operator>=</operator> <name>new_readdir_line</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>readdir_currLen</name></name> <operator>+=</operator> <call><name>msnprintf</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>readdir_line</name></name> <operator>+</operator>

<name><name>sshc</name><operator>-&gt;</operator><name>readdir_currLen</name></name></expr></argument>,

<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>readdir_totalLen</name></name> <operator>-</operator>

<name><name>sshc</name><operator>-&gt;</operator><name>readdir_currLen</name></name></expr></argument>,

<argument><expr><literal type="string">" -&gt; %s"</literal></expr></argument>,

<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>readdir_filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SFTP_READDIR_BOTTOM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>SSH_SFTP_READDIR_BOTTOM</name></expr>:</case>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>readdir_currLen</name></name> <operator>+=</operator> <call><name>msnprintf</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>readdir_line</name></name> <operator>+</operator>

<name><name>sshc</name><operator>-&gt;</operator><name>readdir_currLen</name></name></expr></argument>,

<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>readdir_totalLen</name></name> <operator>-</operator>

<name><name>sshc</name><operator>-&gt;</operator><name>readdir_currLen</name></name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_client_write</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>CLIENTWRITE_BODY</name></expr></argument>,

<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>readdir_line</name></name></expr></argument>,

<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>readdir_currLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>result</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>verbose</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>Curl_debug</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>CURLINFO_DATA_OUT</name></expr></argument>, <argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>readdir_line</name></name></expr></argument>,

<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>readdir_currLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>bytecount</name></name> <operator>+=</operator> <name><name>sshc</name><operator>-&gt;</operator><name>readdir_currLen</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>readdir_line</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_STOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SFTP_READDIR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>SSH_SFTP_READDIR_DONE</name></expr>:</case>

<if_stmt><if>if<condition>(<expr><call><name>libssh2_sftp_closedir</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>sftp_handle</name></name></expr></argument>)</argument_list></call> <operator>==</operator>

<name>LIBSSH2_ERROR_EAGAIN</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <name>LIBSSH2_ERROR_EAGAIN</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>sftp_handle</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>readdir_filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>readdir_longentry</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_setup_transfer</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_STOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>SSH_SFTP_DOWNLOAD_INIT</name></expr>:</case>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>sftp_handle</name></name> <operator>=</operator>

<call><name>libssh2_sftp_open_ex</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>sftp_session</name></name></expr></argument>, <argument><expr><name><name>sftp_scp</name><operator>-&gt;</operator><name>path</name></name></expr></argument>,

<argument><expr><call><name>curlx_uztoui</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>sftp_scp</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>LIBSSH2_FXF_READ</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>new_file_perms</name></name></expr></argument>,

<argument><expr><name>LIBSSH2_SFTP_OPENFILE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>sshc</name><operator>-&gt;</operator><name>sftp_handle</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>libssh2_session_last_errno</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>ssh_session</name></name></expr></argument>)</argument_list></call> <operator>==</operator>

<name>LIBSSH2_ERROR_EAGAIN</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <name>LIBSSH2_ERROR_EAGAIN</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>sftp_libssh2_last_error</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>sftp_session</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Could not open remote file for reading: %s"</literal></expr></argument>,

<argument><expr><call><name>sftp_libssh2_strerror</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SFTP_CLOSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>sftp_libssh2_error_to_CURLE</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>actualcode</name></name> <operator>=</operator> <ternary><condition><expr><name>result</name></expr>?</condition><then><expr><name>result</name></expr></then><else>:<expr><name>CURLE_SSH</name></expr></else></ternary></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SFTP_DOWNLOAD_STAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>SSH_SFTP_DOWNLOAD_STAT</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>LIBSSH2_SFTP_ATTRIBUTES</name></type> <name>attrs</name></decl>;</decl_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>libssh2_sftp_stat_ex</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>sftp_session</name></name></expr></argument>, <argument><expr><name><name>sftp_scp</name><operator>-&gt;</operator><name>path</name></name></expr></argument>,

<argument><expr><call><name>curlx_uztoui</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>sftp_scp</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>LIBSSH2_SFTP_STAT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>attrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>==</operator> <name>LIBSSH2_ERROR_EAGAIN</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>||</operator>

<operator>!</operator><operator>(</operator><name><name>attrs</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>LIBSSH2_SFTP_ATTR_SIZE</name><operator>)</operator> <operator>||</operator>

<operator>(</operator><name><name>attrs</name><operator>.</operator><name>filesize</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>size</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>maxdownload</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_pgrsSetDownloadSize</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<decl_stmt><decl><type><name>curl_off_t</name></type> <name>size</name> <init>= <expr><name><name>attrs</name><operator>.</operator><name>filesize</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>size</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Bad file size (%"</literal> <name>CURL_FORMAT_CURL_OFF_T</name> <literal type="string">")"</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_BAD_DOWNLOAD_RESUME</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>use_range</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>curl_off_t</name></type> <name>from</name></decl>, <decl><type ref="prev"/><name>to</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CURLofft</name></type> <name>to_t</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CURLofft</name></type> <name>from_t</name></decl>;</decl_stmt>

<expr_stmt><expr><name>from_t</name> <operator>=</operator> <call><name>curlx_strtoofft</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>range</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>from_t</name> <operator>==</operator> <name>CURL_OFFT_FLOW</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_RANGE_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<while>while<condition>(<expr><operator>*</operator><name>ptr</name> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>ISSPACE</name><argument_list>(<argument><expr><operator>*</operator><name>ptr</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">'-'</literal><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name>to_t</name> <operator>=</operator> <call><name>curlx_strtoofft</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ptr2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>to</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>to_t</name> <operator>==</operator> <name>CURL_OFFT_FLOW</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_RANGE_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>to_t</name> <operator>==</operator> <name>CURL_OFFT_INVAL</name><operator>)</operator> 

<operator>||</operator> <operator>(</operator><name>to</name> <operator>&gt;=</operator> <name>size</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>to</name> <operator>=</operator> <name>size</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>from_t</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>from</name> <operator>=</operator> <name>size</name> <operator>-</operator> <name>to</name></expr>;</expr_stmt>

<expr_stmt><expr><name>to</name> <operator>=</operator> <name>size</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>from</name> <operator>&gt;</operator> <name>size</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Offset (%"</literal>

<name>CURL_FORMAT_CURL_OFF_T</name> <literal type="string">") was beyond file size (%"</literal>

<name>CURL_FORMAT_CURL_OFF_T</name> <literal type="string">")"</literal></expr></argument>, <argument><expr><name>from</name></expr></argument>, <argument><expr><name><name>attrs</name><operator>.</operator><name>filesize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_BAD_DOWNLOAD_RESUME</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>from</name> <operator>&gt;</operator> <name>to</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>from</name> <operator>=</operator> <name>to</name></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>size</name> <operator>=</operator> <name>to</name> <operator>-</operator> <name>from</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>SFTP_SEEK</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>sshc</name><operator>.</operator><name>sftp_handle</name></name></expr></argument>, <argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>maxdownload</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_pgrsSetDownloadSize</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>resume_from</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>resume_from</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>curl_off_t</name><operator>)</operator><name><name>attrs</name><operator>.</operator><name>filesize</name></name> <operator>&lt;</operator> <operator>-</operator><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>resume_from</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Offset (%"</literal>

<name>CURL_FORMAT_CURL_OFF_T</name> <literal type="string">") was beyond file size (%"</literal>

<name>CURL_FORMAT_CURL_OFF_T</name> <literal type="string">")"</literal></expr></argument>,

<argument><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>resume_from</name></name></expr></argument>, <argument><expr><name><name>attrs</name><operator>.</operator><name>filesize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_BAD_DOWNLOAD_RESUME</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>resume_from</name></name> <operator>+=</operator> <name><name>attrs</name><operator>.</operator><name>filesize</name></name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>curl_off_t</name><operator>)</operator><name><name>attrs</name><operator>.</operator><name>filesize</name></name> <operator>&lt;</operator> <name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>resume_from</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Offset (%"</literal> <name>CURL_FORMAT_CURL_OFF_T</name>

<literal type="string">") was beyond file size (%"</literal> <name>CURL_FORMAT_CURL_OFF_T</name> <literal type="string">")"</literal></expr></argument>,

<argument><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>resume_from</name></name></expr></argument>, <argument><expr><name><name>attrs</name><operator>.</operator><name>filesize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_BAD_DOWNLOAD_RESUME</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>size</name></name> <operator>=</operator> <name><name>attrs</name><operator>.</operator><name>filesize</name></name> <operator>-</operator> <name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>resume_from</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>maxdownload</name></name> <operator>=</operator> <name><name>attrs</name><operator>.</operator><name>filesize</name></name> <operator>-</operator> <name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>resume_from</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_pgrsSetDownloadSize</name><argument_list>(<argument><expr><name>data</name></expr></argument>,

<argument><expr><name><name>attrs</name><operator>.</operator><name>filesize</name></name> <operator>-</operator> <name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>resume_from</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SFTP_SEEK</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>sftp_handle</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>resume_from</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>size</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>Curl_setup_transfer</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"File already completely downloaded\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_STOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>Curl_setup_transfer</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>FIRSTSOCKET</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>size</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>writesockfd</name></name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>sockfd</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>cselect_bits</name></name> <operator>=</operator> <name>CURL_CSELECT_IN</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SFTP_CLOSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>actualcode</name></name> <operator>=</operator> <name>result</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_STOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>SSH_SFTP_CLOSE</name></expr>:</case>

<if_stmt><if>if<condition>(<expr><name><name>sshc</name><operator>-&gt;</operator><name>sftp_handle</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>libssh2_sftp_close</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>sftp_handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>==</operator> <name>LIBSSH2_ERROR_EAGAIN</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>err_msg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>libssh2_session_last_error</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>ssh_session</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>err_msg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Failed to close libssh2 file: %d %s\n"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><name>err_msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>sftp_handle</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>sftp_scp</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DEBUGF</name><argument_list>(<argument><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"SFTP DONE done\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>sshc</name><operator>-&gt;</operator><name>nextstate</name></name> <operator>!=</operator> <name>SSH_NO_STATE</name> <operator>&amp;&amp;</operator>

<name><name>sshc</name><operator>-&gt;</operator><name>nextstate</name></name> <operator>!=</operator> <name>SSH_SFTP_CLOSE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>nextstate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>nextstate</name></name> <operator>=</operator> <name>SSH_SFTP_CLOSE</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_STOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name><name>sshc</name><operator>-&gt;</operator><name>actualcode</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>SSH_SFTP_SHUTDOWN</name></expr>:</case>

<if_stmt><if>if<condition>(<expr><name><name>sshc</name><operator>-&gt;</operator><name>sftp_handle</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>libssh2_sftp_close</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>sftp_handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>==</operator> <name>LIBSSH2_ERROR_EAGAIN</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>err_msg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>libssh2_session_last_error</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>ssh_session</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>err_msg</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Failed to close libssh2 file: %d %s\n"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><name>err_msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>sftp_handle</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>sshc</name><operator>-&gt;</operator><name>sftp_session</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>libssh2_sftp_shutdown</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>sftp_session</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>==</operator> <name>LIBSSH2_ERROR_EAGAIN</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Failed to stop libssh2 sftp subsystem\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>sftp_session</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>homedir</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>most_recent_ftp_entrypath</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SESSION_DISCONNECT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>SSH_SCP_TRANS_INIT</name></expr>:</case>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_getworkingpath</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>homedir</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sftp_scp</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>actualcode</name></name> <operator>=</operator> <name>result</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_STOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>upload</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>infilesize</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"SCP requires a known file size for upload"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>actualcode</name></name> <operator>=</operator> <name>CURLE_UPLOAD_FAILED</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SCP_CHANNEL_FREE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SCP_UPLOAD_INIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SCP_DOWNLOAD_INIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>SSH_SCP_UPLOAD_INIT</name></expr>:</case>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>ssh_channel</name></name> <operator>=</operator>

<call><name>SCP_SEND</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>ssh_session</name></name></expr></argument>, <argument><expr><name><name>sftp_scp</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>new_file_perms</name></name></expr></argument>,

<argument><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>infilesize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>sshc</name><operator>-&gt;</operator><name>ssh_channel</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ssh_err</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>err_msg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><call><name>libssh2_session_last_errno</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>ssh_session</name></name></expr></argument>)</argument_list></call> <operator>==</operator>

<name>LIBSSH2_ERROR_EAGAIN</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <name>LIBSSH2_ERROR_EAGAIN</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ssh_err</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><call><name>libssh2_session_last_error</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>ssh_session</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>err_msg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>err_msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SCP_CHANNEL_FREE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>actualcode</name></name> <operator>=</operator> <call><name>libssh2_session_error_to_CURLE</name><argument_list>(<argument><expr><name>ssh_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>sshc</name><operator>-&gt;</operator><name>actualcode</name></name> <operator>==</operator> <name>CURLE_SSH</name> <operator>||</operator>

<name><name>sshc</name><operator>-&gt;</operator><name>actualcode</name></name> <operator>==</operator> <name>CURLE_REMOTE_FILE_NOT_FOUND</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>actualcode</name></name> <operator>=</operator> <name>CURLE_UPLOAD_FAILED</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>Curl_setup_transfer</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>size</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FIRSTSOCKET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>sockfd</name></name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>writesockfd</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SCP_CHANNEL_FREE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>actualcode</name></name> <operator>=</operator> <name>result</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>orig_waitfor</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>keepon</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>cselect_bits</name></name> <operator>=</operator> <name>CURL_CSELECT_OUT</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_STOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>SSH_SCP_DOWNLOAD_INIT</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>curl_off_t</name></type> <name>bytecount</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LIBSSH2_VERSION_NUM</name> <operator>&lt;</operator> <literal type="number">0x010700</literal></expr></cpp:if>

<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>sb</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>stat</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>ssh_channel</name></name> <operator>=</operator> <call><name>libssh2_scp_recv</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>ssh_session</name></name></expr></argument>,

<argument><expr><name><name>sftp_scp</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>libssh2_struct_stat</name></type> <name>sb</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>libssh2_struct_stat</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>ssh_channel</name></name> <operator>=</operator> <call><name>libssh2_scp_recv2</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>ssh_session</name></name></expr></argument>,

<argument><expr><name><name>sftp_scp</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>sshc</name><operator>-&gt;</operator><name>ssh_channel</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ssh_err</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>err_msg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><call><name>libssh2_session_last_errno</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>ssh_session</name></name></expr></argument>)</argument_list></call> <operator>==</operator>

<name>LIBSSH2_ERROR_EAGAIN</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <name>LIBSSH2_ERROR_EAGAIN</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ssh_err</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><call><name>libssh2_session_last_error</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>ssh_session</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>err_msg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>err_msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SCP_CHANNEL_FREE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>actualcode</name></name> <operator>=</operator> <call><name>libssh2_session_error_to_CURLE</name><argument_list>(<argument><expr><name>ssh_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>bytecount</name> <operator>=</operator> <operator>(</operator><name>curl_off_t</name><operator>)</operator><name><name>sb</name><operator>.</operator><name>st_size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>maxdownload</name></name> <operator>=</operator> <operator>(</operator><name>curl_off_t</name><operator>)</operator><name><name>sb</name><operator>.</operator><name>st_size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_setup_transfer</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>FIRSTSOCKET</name></expr></argument>, <argument><expr><name>bytecount</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>writesockfd</name></name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>sockfd</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>cselect_bits</name></name> <operator>=</operator> <name>CURL_CSELECT_IN</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SCP_CHANNEL_FREE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>actualcode</name></name> <operator>=</operator> <name>result</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_STOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block>

<break>break;</break>

<case>case <expr><name>SSH_SCP_DONE</name></expr>:</case>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>upload</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SCP_SEND_EOF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SCP_CHANNEL_FREE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>SSH_SCP_SEND_EOF</name></expr>:</case>

<if_stmt><if>if<condition>(<expr><name><name>sshc</name><operator>-&gt;</operator><name>ssh_channel</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>libssh2_channel_send_eof</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>ssh_channel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>==</operator> <name>LIBSSH2_ERROR_EAGAIN</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>err_msg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>libssh2_session_last_error</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>ssh_session</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>err_msg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Failed to send libssh2 channel EOF: %d %s\n"</literal></expr></argument>,

<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>err_msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SCP_WAIT_EOF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>SSH_SCP_WAIT_EOF</name></expr>:</case>

<if_stmt><if>if<condition>(<expr><name><name>sshc</name><operator>-&gt;</operator><name>ssh_channel</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>libssh2_channel_wait_eof</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>ssh_channel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>==</operator> <name>LIBSSH2_ERROR_EAGAIN</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>err_msg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>libssh2_session_last_error</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>ssh_session</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>err_msg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Failed to get channel EOF: %d %s\n"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><name>err_msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SCP_WAIT_CLOSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>SSH_SCP_WAIT_CLOSE</name></expr>:</case>

<if_stmt><if>if<condition>(<expr><name><name>sshc</name><operator>-&gt;</operator><name>ssh_channel</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>libssh2_channel_wait_closed</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>ssh_channel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>==</operator> <name>LIBSSH2_ERROR_EAGAIN</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>err_msg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>libssh2_session_last_error</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>ssh_session</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>err_msg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Channel failed to close: %d %s\n"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><name>err_msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SCP_CHANNEL_FREE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>SSH_SCP_CHANNEL_FREE</name></expr>:</case>

<if_stmt><if>if<condition>(<expr><name><name>sshc</name><operator>-&gt;</operator><name>ssh_channel</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>libssh2_channel_free</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>ssh_channel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>==</operator> <name>LIBSSH2_ERROR_EAGAIN</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>err_msg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>libssh2_session_last_error</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>ssh_session</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>err_msg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Failed to free libssh2 scp subsystem: %d %s\n"</literal></expr></argument>,

<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>err_msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>ssh_channel</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>DEBUGF</name><argument_list>(<argument><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"SCP DONE phase complete\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if> 

state(conn, SSH_SESSION_DISCONNECT);

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_STOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name><name>sshc</name><operator>-&gt;</operator><name>actualcode</name></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>SSH_SESSION_DISCONNECT</name></expr>:</case>

<if_stmt><if>if<condition>(<expr><name><name>sshc</name><operator>-&gt;</operator><name>ssh_channel</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>libssh2_channel_free</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>ssh_channel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>==</operator> <name>LIBSSH2_ERROR_EAGAIN</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>err_msg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>libssh2_session_last_error</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>ssh_session</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>err_msg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Failed to free libssh2 scp subsystem: %d %s\n"</literal></expr></argument>,

<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>err_msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>ssh_channel</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>sshc</name><operator>-&gt;</operator><name>ssh_session</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>libssh2_session_disconnect</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>ssh_session</name></name></expr></argument>, <argument><expr><literal type="string">"Shutdown"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>==</operator> <name>LIBSSH2_ERROR_EAGAIN</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>err_msg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>libssh2_session_last_error</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>ssh_session</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>err_msg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Failed to disconnect libssh2 session: %d %s\n"</literal></expr></argument>,

<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>err_msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>homedir</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>most_recent_ftp_entrypath</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SESSION_FREE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>SSH_SESSION_FREE</name></expr>:</case>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LIBSSH2_KNOWNHOST_API</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name><name>sshc</name><operator>-&gt;</operator><name>kh</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>libssh2_knownhost_free</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>kh</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>kh</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LIBSSH2_AGENT_API</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name><name>sshc</name><operator>-&gt;</operator><name>ssh_agent</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>libssh2_agent_disconnect</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>ssh_agent</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>==</operator> <name>LIBSSH2_ERROR_EAGAIN</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>err_msg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>libssh2_session_last_error</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>ssh_session</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>err_msg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Failed to disconnect from libssh2 agent: %d %s\n"</literal></expr></argument>,

<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>err_msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>libssh2_agent_free</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>ssh_agent</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>ssh_agent</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>sshagent_identity</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>sshagent_prev_identity</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if<condition>(<expr><name><name>sshc</name><operator>-&gt;</operator><name>ssh_session</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>libssh2_session_free</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>ssh_session</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>==</operator> <name>LIBSSH2_ERROR_EAGAIN</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>err_msg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>libssh2_session_last_error</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>ssh_session</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>err_msg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Failed to free libssh2 session: %d %s\n"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><name>err_msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>ssh_session</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>DEBUGASSERT</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>ssh_session</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DEBUGASSERT</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>ssh_channel</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DEBUGASSERT</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>sftp_session</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DEBUGASSERT</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>sftp_handle</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LIBSSH2_KNOWNHOST_API</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>DEBUGASSERT</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>kh</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LIBSSH2_AGENT_API</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>DEBUGASSERT</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>ssh_agent</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>rsa_pub</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>rsa</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>quote_path1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>quote_path2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>homedir</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>readdir_filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>readdir_longentry</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>readdir_line</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>readdir_linkPath</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name><name>sshc</name><operator>-&gt;</operator><name>actualcode</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>sshc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>ssh_conn</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>connclose</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><literal type="string">"SSH session free"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>SSH_SESSION_FREE</name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>nextstate</name></name> <operator>=</operator> <name>SSH_NO_STATE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_STOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>SSH_QUIT</name></expr>:</case>

<default>default:</default>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>nextstate</name></name> <operator>=</operator> <name>SSH_NO_STATE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_STOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block> while<condition>(<expr><operator>!</operator><name>rc</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>sshc</name><operator>-&gt;</operator><name>state</name></name> <operator>!=</operator> <name>SSH_STOP</name><operator>)</operator></expr>)</condition>;</do>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>==</operator> <name>LIBSSH2_ERROR_EAGAIN</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>block</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ssh_perform_getsock</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,

<parameter><decl><type><name>curl_socket_t</name> <modifier>*</modifier></type><name>sock</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LIBSSH2_SESSION_BLOCK_DIRECTION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>bitmap</name> <init>= <expr><name>GETSOCK_BLANK</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>sock</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>sock</name><index>[<expr><name>FIRSTSOCKET</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>waitfor</name></name> <operator>&amp;</operator> <name>KEEP_RECV</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>bitmap</name> <operator>|=</operator> <call><name>GETSOCK_READSOCK</name><argument_list>(<argument><expr><name>FIRSTSOCKET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>waitfor</name></name> <operator>&amp;</operator> <name>KEEP_SEND</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>bitmap</name> <operator>|=</operator> <call><name>GETSOCK_WRITESOCK</name><argument_list>(<argument><expr><name>FIRSTSOCKET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>bitmap</name></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<return>return <expr><call><name>Curl_single_getsock</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>sock</name></expr></argument>)</argument_list></call></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ssh_getsock</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,

<parameter><decl><type><name>curl_socket_t</name> <modifier>*</modifier></type><name>sock</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LIBSSH2_SESSION_BLOCK_DIRECTION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>conn</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>sock</name></expr>;</expr_stmt>

<return>return <expr><name>GETSOCK_BLANK</name></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<return>return <expr><call><name>ssh_perform_getsock</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>sock</name></expr></argument>)</argument_list></call></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LIBSSH2_SESSION_BLOCK_DIRECTION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type> <name>ssh_block2waitfor</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>block</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>ssh_conn</name></name> <modifier>*</modifier></type><name>sshc</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>sshc</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dir</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>block</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>dir</name> <operator>=</operator> <call><name>libssh2_session_block_directions</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>ssh_session</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>dir</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>waitfor</name></name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>dir</name><operator>&amp;</operator><name>LIBSSH2_SESSION_BLOCK_INBOUND</name><operator>)</operator></expr>?</condition><then><expr><name>KEEP_RECV</name></expr></then><else>:<expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator> <operator>|</operator>

<operator>(</operator><ternary><condition><expr><operator>(</operator><name>dir</name><operator>&amp;</operator><name>LIBSSH2_SESSION_BLOCK_OUTBOUND</name><operator>)</operator></expr>?</condition><then><expr><name>KEEP_SEND</name></expr></then><else>:<expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>dir</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>waitfor</name></name> <operator>=</operator> <name><name>sshc</name><operator>-&gt;</operator><name>orig_waitfor</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ssh_block2waitfor</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>Curl_nop_stmt</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>ssh_multi_statemach</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>done</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>ssh_conn</name></name> <modifier>*</modifier></type><name>sshc</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>sshc</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>block</name></decl>;</decl_stmt> 

<do>do <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>ssh_statemach_act</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>done</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>sshc</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>SSH_STOP</name><operator>)</operator></expr> ?</condition><then> <expr><name>TRUE</name></expr> </then><else>: <expr><name>FALSE</name></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block> while<condition>(<expr><operator>!</operator><name>result</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>*</operator><name>done</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>block</name></expr>)</condition>;</do>

<expr_stmt><expr><call><name>ssh_block2waitfor</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>ssh_block_statemach</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>disconnect</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>ssh_conn</name></name> <modifier>*</modifier></type><name>sshc</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>sshc</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<while>while<condition>(<expr><operator>(</operator><name><name>sshc</name><operator>-&gt;</operator><name>state</name></name> <operator>!=</operator> <name>SSH_STOP</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name>result</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>block</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>timediff_t</name></type> <name>left</name> <init>= <expr><literal type="number">1000</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>curltime</name></name></type> <name>now</name> <init>= <expr><call><name>Curl_now</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>ssh_statemach_act</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>disconnect</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>Curl_pgrsUpdate</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_ABORTED_BY_CALLBACK</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_speedcheck</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>left</name> <operator>=</operator> <call><name>Curl_timeleft</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>left</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Operation timed out"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OPERATION_TIMEDOUT</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LIBSSH2_SESSION_BLOCK_DIRECTION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name>block</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>dir</name> <init>= <expr><call><name>libssh2_session_block_directions</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>ssh_session</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>curl_socket_t</name></type> <name>sock</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>sock</name><index>[<expr><name>FIRSTSOCKET</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>curl_socket_t</name></type> <name>fd_read</name> <init>= <expr><name>CURL_SOCKET_BAD</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>curl_socket_t</name></type> <name>fd_write</name> <init>= <expr><name>CURL_SOCKET_BAD</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>LIBSSH2_SESSION_BLOCK_INBOUND</name> <operator>&amp;</operator> <name>dir</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>fd_read</name> <operator>=</operator> <name>sock</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>LIBSSH2_SESSION_BLOCK_OUTBOUND</name> <operator>&amp;</operator> <name>dir</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>fd_write</name> <operator>=</operator> <name>sock</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>Curl_socket_check</name><argument_list>(<argument><expr><name>fd_read</name></expr></argument>, <argument><expr><name>CURL_SOCKET_BAD</name></expr></argument>, <argument><expr><name>fd_write</name></expr></argument>,

<argument><expr><ternary><condition><expr><name>left</name><operator>&gt;</operator><literal type="number">1000</literal></expr>?</condition><then><expr><literal type="number">1000</literal></expr></then><else>:<expr><operator>(</operator><name>time_t</name><operator>)</operator><name>left</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></while>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>ssh_setup_connection</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>SSHPROTO</name></name> <modifier>*</modifier></type><name>ssh</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>protop</name></name> <operator>=</operator> <name>ssh</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>SSHPROTO</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>ssh</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>Curl_recv</name></type> <name>scp_recv</name></decl>, <decl><type ref="prev"/><name>sftp_recv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>Curl_send</name></type> <name>scp_send</name></decl>, <decl><type ref="prev"/><name>sftp_send</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>ssh_connect</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>done</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CURL_LIBSSH2_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>curl_socket_t</name></type> <name>sock</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name><name>struct</name> <name>ssh_conn</name></name> <modifier>*</modifier></type><name>ssh</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>protop</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ssh_setup_connection</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>connkeep</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><literal type="string">"SSH default"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>handler</name><operator>-&gt;</operator><name>protocol</name></name> <operator>&amp;</operator> <name>CURLPROTO_SCP</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>recv</name><index>[<expr><name>FIRSTSOCKET</name></expr>]</index></name> <operator>=</operator> <name>scp_recv</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>send</name><index>[<expr><name>FIRSTSOCKET</name></expr>]</index></name> <operator>=</operator> <name>scp_send</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>recv</name><index>[<expr><name>FIRSTSOCKET</name></expr>]</index></name> <operator>=</operator> <name>sftp_recv</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>send</name><index>[<expr><name>FIRSTSOCKET</name></expr>]</index></name> <operator>=</operator> <name>sftp_send</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>ssh</name> <operator>=</operator> <operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>sshc</name></name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CURL_LIBSSH2_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>user</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"User: %s\n"</literal></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>user</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>passwd</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Password: %s\n"</literal></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>passwd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>sock</name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>sock</name><index>[<expr><name>FIRSTSOCKET</name></expr>]</index></name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<expr_stmt><expr><name><name>ssh</name><operator>-&gt;</operator><name>ssh_session</name></name> <operator>=</operator> <call><name>libssh2_session_init_ex</name><argument_list>(<argument><expr><name>my_libssh2_malloc</name></expr></argument>,

<argument><expr><name>my_libssh2_free</name></expr></argument>,

<argument><expr><name>my_libssh2_realloc</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ssh</name><operator>-&gt;</operator><name>ssh_session</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Failure initialising ssh session"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_FAILED_INIT</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>ssh_compression</name></name></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LIBSSH2_VERSION_NUM</name> <operator>&gt;=</operator> <literal type="number">0x010208</literal></expr></cpp:if>

<if_stmt><if>if<condition>(<expr><call><name>libssh2_session_flag</name><argument_list>(<argument><expr><name><name>ssh</name><operator>-&gt;</operator><name>ssh_session</name></name></expr></argument>, <argument><expr><name>LIBSSH2_FLAG_COMPRESS</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Failed to enable compression for ssh session\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LIBSSH2_KNOWNHOST_API</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_SSH_KNOWNHOSTS</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ssh</name><operator>-&gt;</operator><name>kh</name></name> <operator>=</operator> <call><name>libssh2_knownhost_init</name><argument_list>(<argument><expr><name><name>ssh</name><operator>-&gt;</operator><name>ssh_session</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>ssh</name><operator>-&gt;</operator><name>kh</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>libssh2_session_free</name><argument_list>(<argument><expr><name><name>ssh</name><operator>-&gt;</operator><name>ssh_session</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_FAILED_INIT</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>libssh2_knownhost_readfile</name><argument_list>(<argument><expr><name><name>ssh</name><operator>-&gt;</operator><name>kh</name></name></expr></argument>,

<argument><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_SSH_KNOWNHOSTS</name></expr>]</index></name></expr></argument>,

<argument><expr><name>LIBSSH2_KNOWNHOST_FILE_OPENSSH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Failed to read known hosts from %s\n"</literal></expr></argument>,

<argument><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_SSH_KNOWNHOSTS</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CURL_LIBSSH2_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>libssh2_trace</name><argument_list>(<argument><expr><name><name>ssh</name><operator>-&gt;</operator><name>ssh_session</name></name></expr></argument>, <argument><expr><operator>~</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"SSH socket: %d\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>sock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_INIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>ssh_multi_statemach</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>done</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier>

<name>CURLcode</name></type> <name>scp_perform</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,

<parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>connected</name></decl></parameter>,

<parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>dophase_done</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DEBUGF</name><argument_list>(<argument><expr><call><name>infof</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"DO phase starts\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>dophase_done</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SCP_TRANS_INIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>ssh_multi_statemach</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>dophase_done</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>connected</name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>tcpconnect</name><index>[<expr><name>FIRSTSOCKET</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>*</operator><name>dophase_done</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>DEBUGF</name><argument_list>(<argument><expr><call><name>infof</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"DO phase is complete\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>scp_doing</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,

<parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>dophase_done</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name></decl>;</decl_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>ssh_multi_statemach</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>dophase_done</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>*</operator><name>dophase_done</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>DEBUGF</name><argument_list>(<argument><expr><call><name>infof</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"DO phase is complete\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>ssh_do</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>done</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>connected</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ssh_conn</name></name> <modifier>*</modifier></type><name>sshc</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>sshc</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>done</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>size</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>actualcode</name></name> <operator>=</operator> <name>CURLE_OK</name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>secondCreateDirs</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>Curl_pgrsSetUploadCounter</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_pgrsSetDownloadCounter</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_pgrsSetUploadSize</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_pgrsSetDownloadSize</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>handler</name><operator>-&gt;</operator><name>protocol</name></name> <operator>&amp;</operator> <name>CURLPROTO_SCP</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>scp_perform</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>connected</name></expr></argument>, <argument><expr><name>done</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>sftp_perform</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>connected</name></expr></argument>, <argument><expr><name>done</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>scp_disconnect</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>dead_connection</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ssh_conn</name></name> <modifier>*</modifier></type><name>ssh</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>sshc</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>dead_connection</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ssh</name><operator>-&gt;</operator><name>ssh_session</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SESSION_DISCONNECT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>ssh_block_statemach</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>ssh_done</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>CURLcode</name></type> <name>status</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>SSHPROTO</name></name> <modifier>*</modifier></type><name>sftp_scp</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>protop</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>status</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>ssh_block_statemach</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>status</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name>sftp_scp</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>sftp_scp</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>Curl_pgrsDone</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_ABORTED_BY_CALLBACK</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>keepon</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>scp_done</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>CURLcode</name></type> <name>status</name></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>premature</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>premature</name></expr>;</expr_stmt> 

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>status</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SCP_DONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><call><name>ssh_done</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ssize_t</name></type> <name>scp_send</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sockindex</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>mem</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>CURLcode</name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>nwrite</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>sockindex</name></expr>;</expr_stmt> 

<expr_stmt><expr><name>nwrite</name> <operator>=</operator> <operator>(</operator><name>ssize_t</name><operator>)</operator>

<call><name>libssh2_channel_write</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>sshc</name><operator>.</operator><name>ssh_channel</name></name></expr></argument>, <argument><expr><name>mem</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ssh_block2waitfor</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>nwrite</name> <operator>==</operator> <name>LIBSSH2_ERROR_EAGAIN</name><operator>)</operator></expr>?</condition><then><expr><name>TRUE</name></expr></then><else>:<expr><name>FALSE</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>nwrite</name> <operator>==</operator> <name>LIBSSH2_ERROR_EAGAIN</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>err</name> <operator>=</operator> <name>CURLE_AGAIN</name></expr>;</expr_stmt>

<expr_stmt><expr><name>nwrite</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name>nwrite</name> <operator>&lt;</operator> <name>LIBSSH2_ERROR_NONE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>err</name> <operator>=</operator> <call><name>libssh2_session_error_to_CURLE</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>nwrite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>nwrite</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>nwrite</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ssize_t</name></type> <name>scp_recv</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sockindex</name></decl></parameter>,

<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>mem</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>CURLcode</name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>nread</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>sockindex</name></expr>;</expr_stmt> 

<expr_stmt><expr><name>nread</name> <operator>=</operator> <operator>(</operator><name>ssize_t</name><operator>)</operator>

<call><name>libssh2_channel_read</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>sshc</name><operator>.</operator><name>ssh_channel</name></name></expr></argument>, <argument><expr><name>mem</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ssh_block2waitfor</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>nread</name> <operator>==</operator> <name>LIBSSH2_ERROR_EAGAIN</name><operator>)</operator></expr>?</condition><then><expr><name>TRUE</name></expr></then><else>:<expr><name>FALSE</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>nread</name> <operator>==</operator> <name>LIBSSH2_ERROR_EAGAIN</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>err</name> <operator>=</operator> <name>CURLE_AGAIN</name></expr>;</expr_stmt>

<expr_stmt><expr><name>nread</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>nread</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier>

<name>CURLcode</name></type> <name>sftp_perform</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,

<parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>connected</name></decl></parameter>,

<parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>dophase_done</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DEBUGF</name><argument_list>(<argument><expr><call><name>infof</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"DO phase starts\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>dophase_done</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SFTP_QUOTE_INIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>ssh_multi_statemach</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>dophase_done</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>connected</name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>tcpconnect</name><index>[<expr><name>FIRSTSOCKET</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>*</operator><name>dophase_done</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>DEBUGF</name><argument_list>(<argument><expr><call><name>infof</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"DO phase is complete\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>sftp_doing</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,

<parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>dophase_done</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><call><name>ssh_multi_statemach</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>dophase_done</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>*</operator><name>dophase_done</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>DEBUGF</name><argument_list>(<argument><expr><call><name>infof</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"DO phase is complete\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>sftp_disconnect</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>dead_connection</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>dead_connection</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DEBUGF</name><argument_list>(<argument><expr><call><name>infof</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"SSH DISCONNECT starts now\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>sshc</name><operator>.</operator><name>ssh_session</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SFTP_SHUTDOWN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>ssh_block_statemach</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>DEBUGF</name><argument_list>(<argument><expr><call><name>infof</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"SSH DISCONNECT is done\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>sftp_done</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>CURLcode</name></type> <name>status</name></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>premature</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>ssh_conn</name></name> <modifier>*</modifier></type><name>sshc</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>sshc</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>status</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>premature</name> <operator>&amp;&amp;</operator> <name><name>conn</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>postquote</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>retry</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>nextstate</name></name> <operator>=</operator> <name>SSH_SFTP_POSTQUOTE_INIT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SFTP_CLOSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>ssh_done</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ssize_t</name></type> <name>sftp_send</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sockindex</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>mem</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>CURLcode</name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>nwrite</name></decl>;</decl_stmt> 

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>sockindex</name></expr>;</expr_stmt>

<expr_stmt><expr><name>nwrite</name> <operator>=</operator> <call><name>libssh2_sftp_write</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>sshc</name><operator>.</operator><name>sftp_handle</name></name></expr></argument>, <argument><expr><name>mem</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ssh_block2waitfor</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>nwrite</name> <operator>==</operator> <name>LIBSSH2_ERROR_EAGAIN</name><operator>)</operator></expr>?</condition><then><expr><name>TRUE</name></expr></then><else>:<expr><name>FALSE</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>nwrite</name> <operator>==</operator> <name>LIBSSH2_ERROR_EAGAIN</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>err</name> <operator>=</operator> <name>CURLE_AGAIN</name></expr>;</expr_stmt>

<expr_stmt><expr><name>nwrite</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name>nwrite</name> <operator>&lt;</operator> <name>LIBSSH2_ERROR_NONE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>err</name> <operator>=</operator> <call><name>libssh2_session_error_to_CURLE</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>nwrite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>nwrite</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>nwrite</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ssize_t</name></type> <name>sftp_recv</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sockindex</name></decl></parameter>,

<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>mem</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>CURLcode</name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>nread</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>sockindex</name></expr>;</expr_stmt>

<expr_stmt><expr><name>nread</name> <operator>=</operator> <call><name>libssh2_sftp_read</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>sshc</name><operator>.</operator><name>sftp_handle</name></name></expr></argument>, <argument><expr><name>mem</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ssh_block2waitfor</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>nread</name> <operator>==</operator> <name>LIBSSH2_ERROR_EAGAIN</name><operator>)</operator></expr>?</condition><then><expr><name>TRUE</name></expr></then><else>:<expr><name>FALSE</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>nread</name> <operator>==</operator> <name>LIBSSH2_ERROR_EAGAIN</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>err</name> <operator>=</operator> <name>CURLE_AGAIN</name></expr>;</expr_stmt>

<expr_stmt><expr><name>nread</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name>nread</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>err</name> <operator>=</operator> <call><name>libssh2_session_error_to_CURLE</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>nread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>nread</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sftp_libssh2_strerror</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>err</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch<condition>(<expr><name>err</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>LIBSSH2_FX_NO_SUCH_FILE</name></expr>:</case>

<return>return <expr><literal type="string">"No such file or directory"</literal></expr>;</return>

<case>case <expr><name>LIBSSH2_FX_PERMISSION_DENIED</name></expr>:</case>

<return>return <expr><literal type="string">"Permission denied"</literal></expr>;</return>

<case>case <expr><name>LIBSSH2_FX_FAILURE</name></expr>:</case>

<return>return <expr><literal type="string">"Operation failed"</literal></expr>;</return>

<case>case <expr><name>LIBSSH2_FX_BAD_MESSAGE</name></expr>:</case>

<return>return <expr><literal type="string">"Bad message from SFTP server"</literal></expr>;</return>

<case>case <expr><name>LIBSSH2_FX_NO_CONNECTION</name></expr>:</case>

<return>return <expr><literal type="string">"Not connected to SFTP server"</literal></expr>;</return>

<case>case <expr><name>LIBSSH2_FX_CONNECTION_LOST</name></expr>:</case>

<return>return <expr><literal type="string">"Connection to SFTP server lost"</literal></expr>;</return>

<case>case <expr><name>LIBSSH2_FX_OP_UNSUPPORTED</name></expr>:</case>

<return>return <expr><literal type="string">"Operation not supported by SFTP server"</literal></expr>;</return>

<case>case <expr><name>LIBSSH2_FX_INVALID_HANDLE</name></expr>:</case>

<return>return <expr><literal type="string">"Invalid handle"</literal></expr>;</return>

<case>case <expr><name>LIBSSH2_FX_NO_SUCH_PATH</name></expr>:</case>

<return>return <expr><literal type="string">"No such file or directory"</literal></expr>;</return>

<case>case <expr><name>LIBSSH2_FX_FILE_ALREADY_EXISTS</name></expr>:</case>

<return>return <expr><literal type="string">"File already exists"</literal></expr>;</return>

<case>case <expr><name>LIBSSH2_FX_WRITE_PROTECT</name></expr>:</case>

<return>return <expr><literal type="string">"File is write protected"</literal></expr>;</return>

<case>case <expr><name>LIBSSH2_FX_NO_MEDIA</name></expr>:</case>

<return>return <expr><literal type="string">"No media"</literal></expr>;</return>

<case>case <expr><name>LIBSSH2_FX_NO_SPACE_ON_FILESYSTEM</name></expr>:</case>

<return>return <expr><literal type="string">"Disk full"</literal></expr>;</return>

<case>case <expr><name>LIBSSH2_FX_QUOTA_EXCEEDED</name></expr>:</case>

<return>return <expr><literal type="string">"User quota exceeded"</literal></expr>;</return>

<case>case <expr><name>LIBSSH2_FX_UNKNOWN_PRINCIPLE</name></expr>:</case>

<return>return <expr><literal type="string">"Unknown principle"</literal></expr>;</return>

<case>case <expr><name>LIBSSH2_FX_LOCK_CONFlICT</name></expr>:</case>

<return>return <expr><literal type="string">"File lock conflict"</literal></expr>;</return>

<case>case <expr><name>LIBSSH2_FX_DIR_NOT_EMPTY</name></expr>:</case>

<return>return <expr><literal type="string">"Directory not empty"</literal></expr>;</return>

<case>case <expr><name>LIBSSH2_FX_NOT_A_DIRECTORY</name></expr>:</case>

<return>return <expr><literal type="string">"Not a directory"</literal></expr>;</return>

<case>case <expr><name>LIBSSH2_FX_INVALID_FILENAME</name></expr>:</case>

<return>return <expr><literal type="string">"Invalid filename"</literal></expr>;</return>

<case>case <expr><name>LIBSSH2_FX_LINK_LOOP</name></expr>:</case>

<return>return <expr><literal type="string">"Link points to itself"</literal></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><literal type="string">"Unknown error in libssh2"</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>CURLcode</name></type> <name>Curl_ssh_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LIBSSH2_INIT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><call><name>libssh2_init</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>DEBUGF</name><argument_list>(<argument><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Error: libssh2_init failed\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_FAILED_INIT</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>Curl_ssh_cleanup</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LIBSSH2_EXIT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>libssh2_exit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>Curl_ssh_version</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>buflen</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>msnprintf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"libssh2/%s"</literal></expr></argument>, <argument><expr><name>LIBSSH2_VERSION</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</unit>
