<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\curl-analysis\_cppstats\curl\lib\vssh\wolfssh.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_setup.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_WOLFSSH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;wolfssh/ssh.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;wolfssh/wolfsftp.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"urldata.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"connect.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sendf.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"progress.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_path.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"strtoofft.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"transfer.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"speedcheck.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"select.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"multiif.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"warnless.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_printf.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_memory.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memdebug.h"</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>CURLcode</name></type> <name>wssh_connect</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>done</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>CURLcode</name></type> <name>wssh_multi_statemach</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>done</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>CURLcode</name></type> <name>wssh_do</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>done</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

static CURLcode wscp_done(struct connectdata *conn,

CURLcode, bool premature);

static CURLcode wscp_doing(struct connectdata *conn,

bool *dophase_done);

static CURLcode wscp_disconnect(struct connectdata *conn,

bool dead_connection);

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><specifier>static</specifier> <name>CURLcode</name></type> <name>wsftp_done</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,

<parameter><decl><type><name>CURLcode</name></type></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>premature</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>CURLcode</name></type> <name>wsftp_doing</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,

<parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>dophase_done</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>CURLcode</name></type> <name>wsftp_disconnect</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>dead</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>wssh_getsock</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,

<parameter><decl><type><name>curl_socket_t</name> <modifier>*</modifier></type><name>sock</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>wssh_perform_getsock</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,

<parameter><decl><type><name>curl_socket_t</name> <modifier>*</modifier></type><name>sock</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>CURLcode</name></type> <name>wssh_setup_connection</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

const struct Curl_handler Curl_handler_scp = {

"SCP", 

wssh_setup_connection, 

wssh_do, 

wscp_done, 

ZERO_NULL, 

wssh_connect, 

wssh_multi_statemach, 

wscp_doing, 

wssh_getsock, 

wssh_getsock, 

ZERO_NULL, 

wssh_perform_getsock, 

wscp_disconnect, 

ZERO_NULL, 

ZERO_NULL, 

PORT_SSH, 

CURLPROTO_SCP, 

PROTOPT_DIRLOCK | PROTOPT_CLOSEACTION

| PROTOPT_NOURLQUERY 

};

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>Curl_handler</name></name></type> <name>Curl_handler_sftp</name> <init>= <expr><block>{

<expr><literal type="string">"SFTP"</literal></expr>, 

<expr><name>wssh_setup_connection</name></expr>, 

<expr><name>wssh_do</name></expr>, 

<expr><name>wsftp_done</name></expr>, 

<expr><name>ZERO_NULL</name></expr>, 

<expr><name>wssh_connect</name></expr>, 

<expr><name>wssh_multi_statemach</name></expr>, 

<expr><name>wsftp_doing</name></expr>, 

<expr><name>wssh_getsock</name></expr>, 

<expr><name>wssh_getsock</name></expr>, 

<expr><name>ZERO_NULL</name></expr>, 

<expr><name>wssh_perform_getsock</name></expr>, 

<expr><name>wsftp_disconnect</name></expr>, 

<expr><name>ZERO_NULL</name></expr>, 

<expr><name>ZERO_NULL</name></expr>, 

<expr><name>PORT_SSH</name></expr>, 

<expr><name>CURLPROTO_SFTP</name></expr>, 

<expr><name>PROTOPT_DIRLOCK</name> <operator>|</operator> <name>PROTOPT_CLOSEACTION</name>

<operator>|</operator> <name>PROTOPT_NOURLQUERY</name></expr> 

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>state</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>sshstate</name></type> <name>nowstate</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>ssh_conn</name></name> <modifier>*</modifier></type><name>sshc</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>sshc</name></name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUGBUILD</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_VERBOSE_STRINGS</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name><name>names</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"SSH_STOP"</literal></expr>,

<expr><literal type="string">"SSH_INIT"</literal></expr>,

<expr><literal type="string">"SSH_S_STARTUP"</literal></expr>,

<expr><literal type="string">"SSH_HOSTKEY"</literal></expr>,

<expr><literal type="string">"SSH_AUTHLIST"</literal></expr>,

<expr><literal type="string">"SSH_AUTH_PKEY_INIT"</literal></expr>,

<expr><literal type="string">"SSH_AUTH_PKEY"</literal></expr>,

<expr><literal type="string">"SSH_AUTH_PASS_INIT"</literal></expr>,

<expr><literal type="string">"SSH_AUTH_PASS"</literal></expr>,

<expr><literal type="string">"SSH_AUTH_AGENT_INIT"</literal></expr>,

<expr><literal type="string">"SSH_AUTH_AGENT_LIST"</literal></expr>,

<expr><literal type="string">"SSH_AUTH_AGENT"</literal></expr>,

<expr><literal type="string">"SSH_AUTH_HOST_INIT"</literal></expr>,

<expr><literal type="string">"SSH_AUTH_HOST"</literal></expr>,

<expr><literal type="string">"SSH_AUTH_KEY_INIT"</literal></expr>,

<expr><literal type="string">"SSH_AUTH_KEY"</literal></expr>,

<expr><literal type="string">"SSH_AUTH_GSSAPI"</literal></expr>,

<expr><literal type="string">"SSH_AUTH_DONE"</literal></expr>,

<expr><literal type="string">"SSH_SFTP_INIT"</literal></expr>,

<expr><literal type="string">"SSH_SFTP_REALPATH"</literal></expr>,

<expr><literal type="string">"SSH_SFTP_QUOTE_INIT"</literal></expr>,

<expr><literal type="string">"SSH_SFTP_POSTQUOTE_INIT"</literal></expr>,

<expr><literal type="string">"SSH_SFTP_QUOTE"</literal></expr>,

<expr><literal type="string">"SSH_SFTP_NEXT_QUOTE"</literal></expr>,

<expr><literal type="string">"SSH_SFTP_QUOTE_STAT"</literal></expr>,

<expr><literal type="string">"SSH_SFTP_QUOTE_SETSTAT"</literal></expr>,

<expr><literal type="string">"SSH_SFTP_QUOTE_SYMLINK"</literal></expr>,

<expr><literal type="string">"SSH_SFTP_QUOTE_MKDIR"</literal></expr>,

<expr><literal type="string">"SSH_SFTP_QUOTE_RENAME"</literal></expr>,

<expr><literal type="string">"SSH_SFTP_QUOTE_RMDIR"</literal></expr>,

<expr><literal type="string">"SSH_SFTP_QUOTE_UNLINK"</literal></expr>,

<expr><literal type="string">"SSH_SFTP_QUOTE_STATVFS"</literal></expr>,

<expr><literal type="string">"SSH_SFTP_GETINFO"</literal></expr>,

<expr><literal type="string">"SSH_SFTP_FILETIME"</literal></expr>,

<expr><literal type="string">"SSH_SFTP_TRANS_INIT"</literal></expr>,

<expr><literal type="string">"SSH_SFTP_UPLOAD_INIT"</literal></expr>,

<expr><literal type="string">"SSH_SFTP_CREATE_DIRS_INIT"</literal></expr>,

<expr><literal type="string">"SSH_SFTP_CREATE_DIRS"</literal></expr>,

<expr><literal type="string">"SSH_SFTP_CREATE_DIRS_MKDIR"</literal></expr>,

<expr><literal type="string">"SSH_SFTP_READDIR_INIT"</literal></expr>,

<expr><literal type="string">"SSH_SFTP_READDIR"</literal></expr>,

<expr><literal type="string">"SSH_SFTP_READDIR_LINK"</literal></expr>,

<expr><literal type="string">"SSH_SFTP_READDIR_BOTTOM"</literal></expr>,

<expr><literal type="string">"SSH_SFTP_READDIR_DONE"</literal></expr>,

<expr><literal type="string">"SSH_SFTP_DOWNLOAD_INIT"</literal></expr>,

<expr><literal type="string">"SSH_SFTP_DOWNLOAD_STAT"</literal></expr>,

<expr><literal type="string">"SSH_SFTP_CLOSE"</literal></expr>,

<expr><literal type="string">"SSH_SFTP_SHUTDOWN"</literal></expr>,

<expr><literal type="string">"SSH_SCP_TRANS_INIT"</literal></expr>,

<expr><literal type="string">"SSH_SCP_UPLOAD_INIT"</literal></expr>,

<expr><literal type="string">"SSH_SCP_DOWNLOAD_INIT"</literal></expr>,

<expr><literal type="string">"SSH_SCP_DOWNLOAD"</literal></expr>,

<expr><literal type="string">"SSH_SCP_DONE"</literal></expr>,

<expr><literal type="string">"SSH_SCP_SEND_EOF"</literal></expr>,

<expr><literal type="string">"SSH_SCP_WAIT_EOF"</literal></expr>,

<expr><literal type="string">"SSH_SCP_WAIT_CLOSE"</literal></expr>,

<expr><literal type="string">"SSH_SCP_CHANNEL_FREE"</literal></expr>,

<expr><literal type="string">"SSH_SESSION_DISCONNECT"</literal></expr>,

<expr><literal type="string">"SSH_SESSION_FREE"</literal></expr>,

<expr><literal type="string">"QUIT"</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DEBUGASSERT</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>names</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>names</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof> <operator>==</operator> <name>SSH_LAST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>sshc</name><operator>-&gt;</operator><name>state</name></name> <operator>!=</operator> <name>nowstate</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"wolfssh %p state change from %s to %s\n"</literal></expr></argument>,

<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>sshc</name></expr></argument>, <argument><expr><name><name>names</name><index>[<expr><name><name>sshc</name><operator>-&gt;</operator><name>state</name></name></expr>]</index></name></expr></argument>, <argument><expr><name><name>names</name><index>[<expr><name>nowstate</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>nowstate</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ssize_t</name></type> <name>wscp_send</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sockindex</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>mem</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>CURLcode</name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>nwrite</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>conn</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>sockindex</name></expr>;</expr_stmt> 

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>mem</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>len</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>err</name></expr>;</expr_stmt>

<return>return <expr><name>nwrite</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ssize_t</name></type> <name>wscp_recv</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sockindex</name></decl></parameter>,

<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>mem</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>CURLcode</name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>nread</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>conn</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>sockindex</name></expr>;</expr_stmt> 

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>mem</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>len</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>err</name></expr>;</expr_stmt>

<return>return <expr><name>nread</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ssize_t</name></type> <name>wsftp_send</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sockindex</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>mem</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>CURLcode</name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>ssh_conn</name></name> <modifier>*</modifier></type><name>sshc</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>sshc</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>word32</name></type> <name><name>offset</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>sockindex</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>offset</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>word32</name><operator>)</operator><name><name>sshc</name><operator>-&gt;</operator><name>offset</name></name><operator>&amp;</operator><literal type="number">0xFFFFFFFF</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>offset</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>word32</name><operator>)</operator><operator>(</operator><name><name>sshc</name><operator>-&gt;</operator><name>offset</name></name><operator>&gt;&gt;</operator><literal type="number">32</literal><operator>)</operator><operator>&amp;</operator><literal type="number">0xFFFFFFFF</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>wolfSSH_SFTP_SendWritePacket</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>ssh_session</name></name></expr></argument>, <argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>,

<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>handleSz</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>offset</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,

<argument><expr><operator>(</operator><name>byte</name> <operator>*</operator><operator>)</operator><name>mem</name></expr></argument>, <argument><expr><operator>(</operator><name>word32</name><operator>)</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>==</operator> <name>WS_FATAL_ERROR</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>wolfSSH_get_error</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>ssh_session</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>==</operator> <name>WS_WANT_READ</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>waitfor</name></name> <operator>=</operator> <name>KEEP_RECV</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>err</name> <operator>=</operator> <name>CURLE_AGAIN</name></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name>rc</name> <operator>==</operator> <name>WS_WANT_WRITE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>waitfor</name></name> <operator>=</operator> <name>KEEP_SEND</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>err</name> <operator>=</operator> <name>CURLE_AGAIN</name></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"wolfSSH_SFTP_SendWritePacket returned %d\n"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>DEBUGASSERT</name><argument_list>(<argument><expr><name>rc</name> <operator>==</operator> <operator>(</operator><name>int</name><operator>)</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"sent %zd bytes SFTP from offset %zd\n"</literal></expr></argument>,

<argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>offset</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>ssize_t</name><operator>)</operator><name>rc</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ssize_t</name></type> <name>wsftp_recv</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sockindex</name></decl></parameter>,

<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>mem</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>CURLcode</name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ssh_conn</name></name> <modifier>*</modifier></type><name>sshc</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>sshc</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>word32</name></type> <name><name>offset</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>sockindex</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>offset</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>word32</name><operator>)</operator><name><name>sshc</name><operator>-&gt;</operator><name>offset</name></name><operator>&amp;</operator><literal type="number">0xFFFFFFFF</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>offset</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>word32</name><operator>)</operator><operator>(</operator><name><name>sshc</name><operator>-&gt;</operator><name>offset</name></name><operator>&gt;&gt;</operator><literal type="number">32</literal><operator>)</operator><operator>&amp;</operator><literal type="number">0xFFFFFFFF</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>wolfSSH_SFTP_SendReadPacket</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>ssh_session</name></name></expr></argument>, <argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>,

<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>handleSz</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>offset</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,

<argument><expr><operator>(</operator><name>byte</name> <operator>*</operator><operator>)</operator><name>mem</name></expr></argument>, <argument><expr><operator>(</operator><name>word32</name><operator>)</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>==</operator> <name>WS_FATAL_ERROR</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>wolfSSH_get_error</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>ssh_session</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>==</operator> <name>WS_WANT_READ</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>waitfor</name></name> <operator>=</operator> <name>KEEP_RECV</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>err</name> <operator>=</operator> <name>CURLE_AGAIN</name></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name>rc</name> <operator>==</operator> <name>WS_WANT_WRITE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>waitfor</name></name> <operator>=</operator> <name>KEEP_SEND</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>err</name> <operator>=</operator> <name>CURLE_AGAIN</name></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>DEBUGASSERT</name><argument_list>(<argument><expr><name>rc</name> <operator>&lt;=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"wolfSSH_SFTP_SendReadPacket returned %d\n"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>offset</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>ssize_t</name><operator>)</operator><name>rc</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>wssh_setup_connection</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>SSHPROTO</name></name> <modifier>*</modifier></type><name>ssh</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>protop</name></name> <operator>=</operator> <name>ssh</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>SSHPROTO</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>ssh</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>Curl_recv</name></type> <name>wscp_recv</name></decl>, <decl><type ref="prev"/><name>wsftp_recv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>Curl_send</name></type> <name>wscp_send</name></decl>, <decl><type ref="prev"/><name>wsftp_send</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>userauth</name><parameter_list>(<parameter><decl><type><name>byte</name></type> <name>authtype</name></decl></parameter>,

<parameter><decl><type><name>WS_UserAuthData</name><modifier>*</modifier></type> <name>authdata</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name> <init>= <expr><name>ctx</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DEBUGF</name><argument_list>(<argument><expr><call><name>infof</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"wolfssh callback: type %s\n"</literal></expr></argument>,

<argument><expr><ternary><condition><expr><name>authtype</name> <operator>==</operator> <name>WOLFSSH_USERAUTH_PASSWORD</name></expr> ?</condition><then> <expr><literal type="string">"PASSWORD"</literal></expr> </then><else>:

<expr><literal type="string">"PUBLICCKEY"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>authtype</name> <operator>==</operator> <name>WOLFSSH_USERAUTH_PASSWORD</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>authdata</name><operator>-&gt;</operator><name>sf</name><operator>.</operator><name>password</name><operator>.</operator><name>password</name></name> <operator>=</operator> <operator>(</operator><name>byte</name> <operator>*</operator><operator>)</operator><name><name>conn</name><operator>-&gt;</operator><name>passwd</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>authdata</name><operator>-&gt;</operator><name>sf</name><operator>.</operator><name>password</name><operator>.</operator><name>passwordSz</name></name> <operator>=</operator> <operator>(</operator><name>word32</name><operator>)</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>passwd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>wssh_connect</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>done</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ssh_conn</name></name> <modifier>*</modifier></type><name>sshc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>curl_socket_t</name></type> <name>sock</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>sock</name><index>[<expr><name>FIRSTSOCKET</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>protop</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>wssh_setup_connection</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>connkeep</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><literal type="string">"SSH default"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>handler</name><operator>-&gt;</operator><name>protocol</name></name> <operator>&amp;</operator> <name>CURLPROTO_SCP</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>recv</name><index>[<expr><name>FIRSTSOCKET</name></expr>]</index></name> <operator>=</operator> <name>wscp_recv</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>send</name><index>[<expr><name>FIRSTSOCKET</name></expr>]</index></name> <operator>=</operator> <name>wscp_send</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>recv</name><index>[<expr><name>FIRSTSOCKET</name></expr>]</index></name> <operator>=</operator> <name>wsftp_recv</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>send</name><index>[<expr><name>FIRSTSOCKET</name></expr>]</index></name> <operator>=</operator> <name>wsftp_send</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>sshc</name> <operator>=</operator> <operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>sshc</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>ctx</name></name> <operator>=</operator> <call><name>wolfSSH_CTX_new</name><argument_list>(<argument><expr><name>WOLFSSH_ENDPOINT_CLIENT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>sshc</name><operator>-&gt;</operator><name>ctx</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"No wolfSSH context"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>ssh_session</name></name> <operator>=</operator> <call><name>wolfSSH_new</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>sshc</name><operator>-&gt;</operator><name>ssh_session</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"No wolfSSH session"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>wolfSSH_SetUsername</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>ssh_session</name></name></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>user</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>!=</operator> <name>WS_SUCCESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"wolfSSH failed to set user name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>wolfSSH_SetUserAuth</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name>userauth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>wolfSSH_SetUserAuthCtx</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>ssh_session</name></name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>wolfSSH_set_fd</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>ssh_session</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>sock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"wolfSSH failed to set socket"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

wolfSSH_Debugging_ON();

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><operator>*</operator><name>done</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>handler</name><operator>-&gt;</operator><name>protocol</name></name> <operator>&amp;</operator> <name>CURLPROTO_SCP</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_INIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SFTP_INIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><call><name>wssh_multi_statemach</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>done</name></expr></argument>)</argument_list></call></expr>;</return>

<label><name>error</name>:</label>

<expr_stmt><expr><call><name>wolfSSH_free</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>ssh_session</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>wolfSSH_CTX_free</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_FAILED_INIT</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>wssh_statemach_act</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>block</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ssh_conn</name></name> <modifier>*</modifier></type><name>sshc</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>sshc</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>SSHPROTO</name></name> <modifier>*</modifier></type><name>sftp_scp</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>protop</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>WS_SFTPNAME</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>block</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> 

<do>do <block>{<block_content>

<switch>switch<condition>(<expr><name><name>sshc</name><operator>-&gt;</operator><name>state</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>SSH_INIT</name></expr>:</case>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_S_STARTUP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><name>SSH_S_STARTUP</name></expr>:</case>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>wolfSSH_connect</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>ssh_session</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>!=</operator> <name>WS_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>wolfSSH_get_error</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>ssh_session</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>==</operator> <name>WS_WANT_READ</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>block</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>waitfor</name></name> <operator>=</operator> <name>KEEP_RECV</name></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name>rc</name> <operator>==</operator> <name>WS_WANT_WRITE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>block</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>waitfor</name></name> <operator>=</operator> <name>KEEP_SEND</name></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name>rc</name> <operator>!=</operator> <name>WS_SUCCESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_STOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_SSH</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"wolfssh connected!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_STOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>SSH_STOP</name></expr>:</case>

<break>break;</break>

<case>case <expr><name>SSH_SFTP_INIT</name></expr>:</case>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>wolfSSH_SFTP_connect</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>ssh_session</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>!=</operator> <name>WS_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>wolfSSH_get_error</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>ssh_session</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>==</operator> <name>WS_WANT_READ</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>block</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>waitfor</name></name> <operator>=</operator> <name>KEEP_RECV</name></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name>rc</name> <operator>==</operator> <name>WS_WANT_WRITE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>block</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>waitfor</name></name> <operator>=</operator> <name>KEEP_SEND</name></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name>rc</name> <operator>==</operator> <name>WS_SUCCESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"wolfssh SFTP connected!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SFTP_REALPATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"wolfssh SFTP connect error %d"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_SSH</name></expr>;</return>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>SSH_SFTP_REALPATH</name></expr>:</case>

<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>wolfSSH_SFTP_RealPath</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>ssh_session</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><literal type="string">"."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>wolfSSH_get_error</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>ssh_session</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>==</operator> <name>WS_WANT_READ</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>block</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>waitfor</name></name> <operator>=</operator> <name>KEEP_RECV</name></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name>rc</name> <operator>==</operator> <name>WS_WANT_WRITE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>block</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>waitfor</name></name> <operator>=</operator> <name>KEEP_SEND</name></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name>name</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>rc</name> <operator>==</operator> <name>WS_SUCCESS</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>homedir</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name><name>name</name><operator>-&gt;</operator><name>fSz</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>sshc</name><operator>-&gt;</operator><name>homedir</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>actualcode</name></name> <operator>=</operator> <name>CURLE_OUT_OF_MEMORY</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>homedir</name></name></expr></argument>, <argument><expr><name><name>name</name><operator>-&gt;</operator><name>fName</name></name></expr></argument>, <argument><expr><name><name>name</name><operator>-&gt;</operator><name>fSz</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>homedir</name><index>[<expr><name><name>name</name><operator>-&gt;</operator><name>fSz</name></name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"wolfssh SFTP realpath succeeded!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>wolfSSH_SFTPNAME_list_free</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_STOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"wolfssh SFTP realpath %d"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_SSH</name></expr>;</return>

<case>case <expr><name>SSH_SFTP_QUOTE_INIT</name></expr>:</case>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_getworkingpath</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>homedir</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sftp_scp</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>actualcode</name></name> <operator>=</operator> <name>result</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_STOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>quote</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Sending quote commands\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>quote_item</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>quote</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SFTP_QUOTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SFTP_GETINFO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>SSH_SFTP_GETINFO</name></expr>:</case>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>get_filetime</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SFTP_FILETIME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SFTP_TRANS_INIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>SSH_SFTP_TRANS_INIT</name></expr>:</case>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>upload</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SFTP_UPLOAD_INIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>sftp_scp</name><operator>-&gt;</operator><name>path</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>sftp_scp</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SFTP_READDIR_INIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SFTP_DOWNLOAD_INIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>SSH_SFTP_UPLOAD_INIT</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>word32</name></type> <name>flags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>WS_SFTP_FILEATRB</name></type> <name>createattrs</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>resume_from</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>WS_SFTP_FILEATRB</name></type> <name>attrs</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>resume_from</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>wolfSSH_SFTP_STAT</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>ssh_session</name></name></expr></argument>, <argument><expr><name><name>sftp_scp</name><operator>-&gt;</operator><name>path</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>attrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>!=</operator> <name>WS_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>resume_from</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<decl_stmt><decl><type><name>curl_off_t</name></type> <name>size</name> <init>= <expr><operator>(</operator><operator>(</operator><name>curl_off_t</name><operator>)</operator><name><name>attrs</name><operator>.</operator><name>sz</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>|</operator> <name><name>attrs</name><operator>.</operator><name>sz</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>size</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Bad file size (%"</literal> <name>CURL_FORMAT_CURL_OFF_T</name> <literal type="string">")"</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_BAD_DOWNLOAD_RESUME</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>resume_from</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>ftp_append</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>flags</name> <operator>=</operator> <name>WOLFSSH_FXF_WRITE</name><operator>|</operator><name>WOLFSSH_FXF_CREAT</name><operator>|</operator><name>WOLFSSH_FXF_APPEND</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>resume_from</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>flags</name> <operator>=</operator> <name>WOLFSSH_FXF_WRITE</name><operator>|</operator><name>WOLFSSH_FXF_APPEND</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>flags</name> <operator>=</operator> <name>WOLFSSH_FXF_WRITE</name><operator>|</operator><name>WOLFSSH_FXF_CREAT</name><operator>|</operator><name>WOLFSSH_FXF_TRUNC</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>createattrs</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>createattrs</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>createattrs</name><operator>.</operator><name>per</name></name> <operator>=</operator> <operator>(</operator><name>word32</name><operator>)</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>new_file_perms</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>handleSz</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>wolfSSH_SFTP_Open</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>ssh_session</name></name></expr></argument>, <argument><expr><name><name>sftp_scp</name><operator>-&gt;</operator><name>path</name></name></expr></argument>,

<argument><expr><name>flags</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>createattrs</name></expr></argument>,

<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sshc</name><operator>-&gt;</operator><name>handleSz</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>==</operator> <name>WS_FATAL_ERROR</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>wolfSSH_get_error</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>ssh_session</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>==</operator> <name>WS_WANT_READ</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>block</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>waitfor</name></name> <operator>=</operator> <name>KEEP_RECV</name></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name>rc</name> <operator>==</operator> <name>WS_WANT_WRITE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>block</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>waitfor</name></name> <operator>=</operator> <name>KEEP_SEND</name></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name>rc</name> <operator>==</operator> <name>WS_SUCCESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"wolfssh SFTP open succeeded!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"wolfssh SFTP upload open failed: %d"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_SSH</name></expr>;</return>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SFTP_DOWNLOAD_STAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>resume_from</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>seekerr</name> <init>= <expr><name>CURL_SEEKFUNC_OK</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>seek_func</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>Curl_set_in_callback</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>seekerr</name> <operator>=</operator> <call><name><name>conn</name><operator>-&gt;</operator><name>seek_func</name></name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>seek_client</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>resume_from</name></name></expr></argument>,

<argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_set_in_callback</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>seekerr</name> <operator>!=</operator> <name>CURL_SEEKFUNC_OK</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>curl_off_t</name></type> <name>passed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>seekerr</name> <operator>!=</operator> <name>CURL_SEEKFUNC_CANTSEEK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Could not seek stream"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_FTP_COULDNT_USE_REST</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<do>do <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>readthisamountnow</name> <init>=

<expr><ternary><condition><expr><operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>resume_from</name></name> <operator>-</operator> <name>passed</name> <operator>&gt;</operator> <name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>buffer_size</name></name><operator>)</operator></expr> ?</condition><then>

<expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>buffer_size</name></name></expr> </then><else>:

<expr><call><name>curlx_sotouz</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>resume_from</name></name> <operator>-</operator> <name>passed</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>actuallyread</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>Curl_set_in_callback</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>actuallyread</name> <operator>=</operator> <call><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>fread_func</name></name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,

<argument><expr><name>readthisamountnow</name></expr></argument>,

<argument><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>in</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_set_in_callback</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>passed</name> <operator>+=</operator> <name>actuallyread</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>actuallyread</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>actuallyread</name> <operator>&gt;</operator> <name>readthisamountnow</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Failed to read data"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_FTP_COULDNT_USE_REST</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block> while<condition>(<expr><name>passed</name> <operator>&lt;</operator> <name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>resume_from</name></name></expr>)</condition>;</do>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>infilesize</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>infilesize</name></name> <operator>-=</operator> <name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>resume_from</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>size</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>infilesize</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_pgrsSetUploadSize</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>infilesize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>offset</name></name> <operator>+=</operator> <name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>resume_from</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>infilesize</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>size</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>infilesize</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_pgrsSetUploadSize</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>infilesize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>Curl_setup_transfer</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FIRSTSOCKET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>sockfd</name></name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>writesockfd</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SFTP_CLOSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>actualcode</name></name> <operator>=</operator> <name>result</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>orig_waitfor</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>keepon</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>cselect_bits</name></name> <operator>=</operator> <name>CURL_CSELECT_OUT</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_expire</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>EXPIRE_RUN_NOW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_STOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>SSH_SFTP_DOWNLOAD_INIT</name></expr>:</case>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>handleSz</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>wolfSSH_SFTP_Open</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>ssh_session</name></name></expr></argument>, <argument><expr><name><name>sftp_scp</name><operator>-&gt;</operator><name>path</name></name></expr></argument>,

<argument><expr><name>WOLFSSH_FXF_READ</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sshc</name><operator>-&gt;</operator><name>handleSz</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>==</operator> <name>WS_FATAL_ERROR</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>wolfSSH_get_error</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>ssh_session</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>==</operator> <name>WS_WANT_READ</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>block</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>waitfor</name></name> <operator>=</operator> <name>KEEP_RECV</name></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name>rc</name> <operator>==</operator> <name>WS_WANT_WRITE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>block</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>waitfor</name></name> <operator>=</operator> <name>KEEP_SEND</name></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name>rc</name> <operator>==</operator> <name>WS_SUCCESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"wolfssh SFTP open succeeded!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SFTP_DOWNLOAD_STAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"wolfssh SFTP open failed: %d"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_SSH</name></expr>;</return>

<case>case <expr><name>SSH_SFTP_DOWNLOAD_STAT</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>WS_SFTP_FILEATRB</name></type> <name>attrs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>curl_off_t</name></type> <name>size</name></decl>;</decl_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>wolfSSH_SFTP_STAT</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>ssh_session</name></name></expr></argument>, <argument><expr><name><name>sftp_scp</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>attrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>==</operator> <name>WS_FATAL_ERROR</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>wolfSSH_get_error</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>ssh_session</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>==</operator> <name>WS_WANT_READ</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>block</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>waitfor</name></name> <operator>=</operator> <name>KEEP_RECV</name></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name>rc</name> <operator>==</operator> <name>WS_WANT_WRITE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>block</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>waitfor</name></name> <operator>=</operator> <name>KEEP_SEND</name></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name>rc</name> <operator>==</operator> <name>WS_SUCCESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"wolfssh STAT succeeded!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"wolfssh SFTP open failed: %d"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>size</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>maxdownload</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_pgrsSetDownloadSize</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_SSH</name></expr>;</return>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>curl_off_t</name><operator>)</operator><name><name>attrs</name><operator>.</operator><name>sz</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator><literal type="number">32</literal><operator>)</operator> <operator>|</operator> <name><name>attrs</name><operator>.</operator><name>sz</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>maxdownload</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_pgrsSetDownloadSize</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"SFTP download %"</literal> <name>CURL_FORMAT_CURL_OFF_T</name> <literal type="string">" bytes\n"</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>use_range</name></name> <operator>||</operator> <name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>resume_from</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"wolfSSH cannot do range/seek on SFTP\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_BAD_DOWNLOAD_RESUME</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>size</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>Curl_setup_transfer</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"File already completely downloaded\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_STOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>Curl_setup_transfer</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>FIRSTSOCKET</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>size</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>writesockfd</name></name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>sockfd</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>cselect_bits</name></name> <operator>=</operator> <name>CURL_CSELECT_IN</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SFTP_CLOSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>actualcode</name></name> <operator>=</operator> <name>result</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_STOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>SSH_SFTP_CLOSE</name></expr>:</case>

<if_stmt><if>if<condition>(<expr><name><name>sshc</name><operator>-&gt;</operator><name>handleSz</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>wolfSSH_SFTP_Close</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>ssh_session</name></name></expr></argument>, <argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>,

<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>handleSz</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <name>WS_SUCCESS</name></expr>;</expr_stmt></block_content></block></else></if_stmt> 

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>==</operator> <name>WS_WANT_READ</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>block</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>waitfor</name></name> <operator>=</operator> <name>KEEP_RECV</name></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name>rc</name> <operator>==</operator> <name>WS_WANT_WRITE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>block</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>waitfor</name></name> <operator>=</operator> <name>KEEP_SEND</name></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name>rc</name> <operator>==</operator> <name>WS_SUCCESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_STOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"wolfssh SFTP CLOSE failed: %d"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_SSH</name></expr>;</return>

<case>case <expr><name>SSH_SFTP_READDIR_INIT</name></expr>:</case>

<expr_stmt><expr><call><name>Curl_pgrsSetDownloadSize</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>opt_no_body</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_STOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SFTP_READDIR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><name>SSH_SFTP_READDIR</name></expr>:</case>

<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>wolfSSH_SFTP_LS</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>ssh_session</name></name></expr></argument>, <argument><expr><name><name>sftp_scp</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>name</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>wolfSSH_get_error</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>ssh_session</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <name>WS_SUCCESS</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>==</operator> <name>WS_WANT_READ</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>block</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>waitfor</name></name> <operator>=</operator> <name>KEEP_RECV</name></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name>rc</name> <operator>==</operator> <name>WS_WANT_WRITE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>block</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>waitfor</name></name> <operator>=</operator> <name>KEEP_SEND</name></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name>name</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>rc</name> <operator>==</operator> <name>WS_SUCCESS</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>WS_SFTPNAME</name> <modifier>*</modifier></type><name>origname</name> <init>= <expr><name>name</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_OK</name></expr>;</expr_stmt>

<while>while<condition>(<expr><name>name</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>line</name> <init>= <expr><call><name>aprintf</name><argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>ftp_list_only</name></name></expr> ?</condition><then>

<expr><name><name>name</name><operator>-&gt;</operator><name>fName</name></name></expr> </then><else>: <expr><name><name>name</name><operator>-&gt;</operator><name>lName</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>line</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SFTP_CLOSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>actualcode</name></name> <operator>=</operator> <name>CURLE_OUT_OF_MEMORY</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_client_write</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>CLIENTWRITE_BODY</name></expr></argument>,

<argument><expr><name>line</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>actualcode</name></name> <operator>=</operator> <name>result</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>name</name> <operator>=</operator> <name><name>name</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>wolfSSH_SFTPNAME_list_free</name><argument_list>(<argument><expr><name>origname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_STOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"wolfssh SFTP ls failed: %d"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_SSH</name></expr>;</return>

<case>case <expr><name>SSH_SFTP_SHUTDOWN</name></expr>:</case>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>homedir</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>wolfSSH_free</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>ssh_session</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>wolfSSH_CTX_free</name><argument_list>(<argument><expr><name><name>sshc</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_STOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block> while<condition>(<expr><operator>!</operator><name>rc</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>sshc</name><operator>-&gt;</operator><name>state</name></name> <operator>!=</operator> <name>SSH_STOP</name><operator>)</operator></expr>)</condition>;</do>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>wssh_multi_statemach</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>done</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>ssh_conn</name></name> <modifier>*</modifier></type><name>sshc</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>sshc</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>block</name></decl>;</decl_stmt> 

<do>do <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>wssh_statemach_act</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>done</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>sshc</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>SSH_STOP</name><operator>)</operator></expr> ?</condition><then> <expr><name>TRUE</name></expr> </then><else>: <expr><name>FALSE</name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>*</operator><name>done</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>DEBUGF</name><argument_list>(<argument><expr><call><name>infof</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"wssh_statemach_act says DONE\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block> while<condition>(<expr><operator>!</operator><name>result</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>*</operator><name>done</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>block</name></expr>)</condition>;</do>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier>

<name>CURLcode</name></type> <name>wscp_perform</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,

<parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>connected</name></decl></parameter>,

<parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>dophase_done</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>conn</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>connected</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>dophase_done</name></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier>

<name>CURLcode</name></type> <name>wsftp_perform</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,

<parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>connected</name></decl></parameter>,

<parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>dophase_done</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DEBUGF</name><argument_list>(<argument><expr><call><name>infof</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"DO phase starts\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>dophase_done</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SFTP_QUOTE_INIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>wssh_multi_statemach</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>dophase_done</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>connected</name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>tcpconnect</name><index>[<expr><name>FIRSTSOCKET</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>*</operator><name>dophase_done</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>DEBUGF</name><argument_list>(<argument><expr><call><name>infof</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"DO phase is complete\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>wssh_do</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>done</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>connected</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ssh_conn</name></name> <modifier>*</modifier></type><name>sshc</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>sshc</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>done</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>size</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>actualcode</name></name> <operator>=</operator> <name>CURLE_OK</name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>sshc</name><operator>-&gt;</operator><name>secondCreateDirs</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>Curl_pgrsSetUploadCounter</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_pgrsSetDownloadCounter</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_pgrsSetUploadSize</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_pgrsSetDownloadSize</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>handler</name><operator>-&gt;</operator><name>protocol</name></name> <operator>&amp;</operator> <name>CURLPROTO_SCP</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>wscp_perform</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>connected</name></expr></argument>, <argument><expr><name>done</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>wsftp_perform</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>connected</name></expr></argument>, <argument><expr><name>done</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>wssh_block_statemach</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>disconnect</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>ssh_conn</name></name> <modifier>*</modifier></type><name>sshc</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>sshc</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<while>while<condition>(<expr><operator>(</operator><name><name>sshc</name><operator>-&gt;</operator><name>state</name></name> <operator>!=</operator> <name>SSH_STOP</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name>result</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>block</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>timediff_t</name></type> <name>left</name> <init>= <expr><literal type="number">1000</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>curltime</name></name></type> <name>now</name> <init>= <expr><call><name>Curl_now</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>wssh_statemach_act</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>disconnect</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>Curl_pgrsUpdate</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_ABORTED_BY_CALLBACK</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_speedcheck</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>left</name> <operator>=</operator> <call><name>Curl_timeleft</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>left</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Operation timed out"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OPERATION_TIMEDOUT</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>result</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>dir</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>waitfor</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>curl_socket_t</name></type> <name>sock</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>sock</name><index>[<expr><name>FIRSTSOCKET</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>curl_socket_t</name></type> <name>fd_read</name> <init>= <expr><name>CURL_SOCKET_BAD</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>curl_socket_t</name></type> <name>fd_write</name> <init>= <expr><name>CURL_SOCKET_BAD</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>dir</name> <operator>==</operator> <name>KEEP_RECV</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>fd_read</name> <operator>=</operator> <name>sock</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>(<expr><name>dir</name> <operator>==</operator> <name>KEEP_SEND</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>fd_write</name> <operator>=</operator> <name>sock</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>Curl_socket_check</name><argument_list>(<argument><expr><name>fd_read</name></expr></argument>, <argument><expr><name>CURL_SOCKET_BAD</name></expr></argument>, <argument><expr><name>fd_write</name></expr></argument>,

<argument><expr><ternary><condition><expr><name>left</name><operator>&gt;</operator><literal type="number">1000</literal></expr>?</condition><then><expr><literal type="number">1000</literal></expr></then><else>:<expr><name>left</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>wssh_done</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>CURLcode</name></type> <name>status</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>SSHPROTO</name></name> <modifier>*</modifier></type><name>sftp_scp</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>protop</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>status</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>wssh_block_statemach</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>status</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name>sftp_scp</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>sftp_scp</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>Curl_pgrsDone</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_ABORTED_BY_CALLBACK</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>keepon</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

static CURLcode wscp_done(struct connectdata *conn,

CURLcode code, bool premature)

{

CURLcode result = CURLE_OK;

(void)conn;

(void)code;

(void)premature;

return result;

}

static CURLcode wscp_doing(struct connectdata *conn,

bool *dophase_done)

{

CURLcode result = CURLE_OK;

(void)conn;

(void)dophase_done;

return result;

}

static CURLcode wscp_disconnect(struct connectdata *conn, bool dead_connection)

{

CURLcode result = CURLE_OK;

(void)conn;

(void)dead_connection;

return result;

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>wsftp_done</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,

<parameter><decl><type><name>CURLcode</name></type> <name>code</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>premature</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>premature</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SFTP_CLOSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>wssh_done</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>wsftp_doing</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,

<parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>dophase_done</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><call><name>wssh_multi_statemach</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>dophase_done</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>*</operator><name>dophase_done</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>DEBUGF</name><argument_list>(<argument><expr><call><name>infof</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"DO phase is complete\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>wsftp_disconnect</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>dead</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>dead</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DEBUGF</name><argument_list>(<argument><expr><call><name>infof</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"SSH DISCONNECT starts now\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>sshc</name><operator>.</operator><name>ssh_session</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SSH_SFTP_SHUTDOWN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>wssh_block_statemach</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>DEBUGF</name><argument_list>(<argument><expr><call><name>infof</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"SSH DISCONNECT is done\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>wssh_getsock</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,

<parameter><decl><type><name>curl_socket_t</name> <modifier>*</modifier></type><name>sock</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>wssh_perform_getsock</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>sock</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>wssh_perform_getsock</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,

<parameter><decl><type><name>curl_socket_t</name> <modifier>*</modifier></type><name>sock</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>bitmap</name> <init>= <expr><name>GETSOCK_BLANK</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dir</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>waitfor</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>sock</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>sock</name><index>[<expr><name>FIRSTSOCKET</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>dir</name> <operator>==</operator> <name>KEEP_RECV</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>bitmap</name> <operator>|=</operator> <call><name>GETSOCK_READSOCK</name><argument_list>(<argument><expr><name>FIRSTSOCKET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>(<expr><name>dir</name> <operator>==</operator> <name>KEEP_SEND</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>bitmap</name> <operator>|=</operator> <call><name>GETSOCK_WRITESOCK</name><argument_list>(<argument><expr><name>FIRSTSOCKET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>bitmap</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>Curl_ssh_version</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>buflen</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>msnprintf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"wolfssh/%s"</literal></expr></argument>, <argument><expr><name>LIBWOLFSSH_VERSION_STRING</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>CURLcode</name></type> <name>Curl_ssh_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>WS_SUCCESS</name> <operator>!=</operator> <call><name>wolfSSH_Init</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>DEBUGF</name><argument_list>(<argument><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Error: wolfSSH_Init failed\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_FAILED_INIT</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>Curl_ssh_cleanup</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</unit>
