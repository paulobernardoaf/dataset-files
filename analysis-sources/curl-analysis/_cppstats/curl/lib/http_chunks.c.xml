<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\curl-analysis\_cppstats\curl\lib\http_chunks.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_setup.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_HTTP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"urldata.h"</cpp:file></cpp:include> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sendf.h"</cpp:file></cpp:include> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"content_encoding.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"non-ascii.h"</cpp:file></cpp:include> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"strtoofft.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"warnless.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_memory.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memdebug.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DOES_CONVERSIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>bool</name></type> <name>Curl_isxdigit_ascii</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>digit</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><name>digit</name> <operator>&gt;=</operator> <literal type="number">0x30</literal> <operator>&amp;&amp;</operator> <name>digit</name> <operator>&lt;=</operator> <literal type="number">0x39</literal><operator>)</operator> 

<operator>||</operator> <operator>(</operator><name>digit</name> <operator>&gt;=</operator> <literal type="number">0x41</literal> <operator>&amp;&amp;</operator> <name>digit</name> <operator>&lt;=</operator> <literal type="number">0x46</literal><operator>)</operator> 

<operator>||</operator> <operator>(</operator><name>digit</name> <operator>&gt;=</operator> <literal type="number">0x61</literal> <operator>&amp;&amp;</operator> <name>digit</name> <operator>&lt;=</operator> <literal type="number">0x66</literal><operator>)</operator></expr>;</return> 

</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Curl_isxdigit_ascii</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>Curl_isxdigit(x)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type> <name>Curl_httpchunk_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>Curl_chunker</name></name> <modifier>*</modifier></type><name>chunk</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>chunk</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>chunk</name><operator>-&gt;</operator><name>hexindex</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>chunk</name><operator>-&gt;</operator><name>dataleft</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>chunk</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>CHUNK_HEX</name></expr>;</expr_stmt> 

</block_content>}</block></function>

<function><type><name>CHUNKcode</name></type> <name>Curl_httpchunk_read</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,

<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>datap</name></decl></parameter>,

<parameter><decl><type><name>ssize_t</name></type> <name>datalen</name></decl></parameter>,

<parameter><decl><type><name>ssize_t</name> <modifier>*</modifier></type><name>wrotep</name></decl></parameter>,

<parameter><decl><type><name>CURLcode</name> <modifier>*</modifier></type><name>extrap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>Curl_chunker</name></name> <modifier>*</modifier></type><name>ch</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>chunk</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>SingleRequest</name></name> <modifier>*</modifier></type><name>k</name> <init>= <expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>req</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>piece</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>curl_off_t</name></type> <name>length</name> <init>= <expr><operator>(</operator><name>curl_off_t</name><operator>)</operator><name>datalen</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name> <modifier>*</modifier></type><name>wrote</name> <init>= <expr><operator>(</operator><name>size_t</name> <operator>*</operator><operator>)</operator><name>wrotep</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>wrote</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>http_te_skip</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>k</name><operator>-&gt;</operator><name>ignorebody</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_client_write</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>CLIENTWRITE_BODY</name></expr></argument>, <argument><expr><name>datap</name></expr></argument>, <argument><expr><name>datalen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>extrap</name> <operator>=</operator> <name>result</name></expr>;</expr_stmt>

<return>return <expr><name>CHUNKE_PASSTHRU_ERROR</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<while>while<condition>(<expr><name>length</name></expr>)</condition> <block>{<block_content>

<switch>switch<condition>(<expr><name><name>ch</name><operator>-&gt;</operator><name>state</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>CHUNK_HEX</name></expr>:</case>

<if_stmt><if>if<condition>(<expr><call><name>Curl_isxdigit_ascii</name><argument_list>(<argument><expr><operator>*</operator><name>datap</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>ch</name><operator>-&gt;</operator><name>hexindex</name></name> <operator>&lt;</operator> <name>MAXNUM_SIZE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ch</name><operator>-&gt;</operator><name>hexbuffer</name><index>[<expr><name><name>ch</name><operator>-&gt;</operator><name>hexindex</name></name></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>datap</name></expr>;</expr_stmt>

<expr_stmt><expr><name>datap</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>length</name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ch</name><operator>-&gt;</operator><name>hexindex</name></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<return>return <expr><name>CHUNKE_TOO_LONG_HEX</name></expr>;</return> 

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>endptr</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><literal type="number">0</literal> <operator>==</operator> <name><name>ch</name><operator>-&gt;</operator><name>hexindex</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CHUNKE_ILLEGAL_HEX</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ch</name><operator>-&gt;</operator><name>hexbuffer</name><index>[<expr><name><name>ch</name><operator>-&gt;</operator><name>hexindex</name></name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_convert_from_network</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>ch</name><operator>-&gt;</operator><name>hexbuffer</name></name></expr></argument>,

<argument><expr><name><name>ch</name><operator>-&gt;</operator><name>hexindex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>CHUNKE_ILLEGAL_HEX</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>curlx_strtoofft</name><argument_list>(<argument><expr><name><name>ch</name><operator>-&gt;</operator><name>hexbuffer</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>endptr</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ch</name><operator>-&gt;</operator><name>datasize</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CHUNKE_ILLEGAL_HEX</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ch</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>CHUNK_LF</name></expr>;</expr_stmt> 

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>CHUNK_LF</name></expr>:</case>

<if_stmt><if>if<condition>(<expr><operator>*</operator><name>datap</name> <operator>==</operator> <literal type="number">0x0a</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><literal type="number">0</literal> <operator>==</operator> <name><name>ch</name><operator>-&gt;</operator><name>datasize</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ch</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>CHUNK_TRAILER</name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>trlPos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ch</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>CHUNK_DATA</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>datap</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>length</name><operator>--</operator></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>CHUNK_DATA</name></expr>:</case>

<expr_stmt><expr><name>piece</name> <operator>=</operator> <call><name>curlx_sotouz</name><argument_list>(<argument><expr><ternary><condition><expr><operator>(</operator><name><name>ch</name><operator>-&gt;</operator><name>datasize</name></name> <operator>&gt;=</operator> <name>length</name><operator>)</operator></expr>?</condition><then><expr><name>length</name></expr></then><else>:<expr><name><name>ch</name><operator>-&gt;</operator><name>datasize</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>conn</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>http_te_skip</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>k</name><operator>-&gt;</operator><name>ignorebody</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>conn</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>http_ce_skip</name></name> <operator>&amp;&amp;</operator> <name><name>k</name><operator>-&gt;</operator><name>writer_stack</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_unencode_write</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>k</name><operator>-&gt;</operator><name>writer_stack</name></name></expr></argument>, <argument><expr><name>datap</name></expr></argument>, <argument><expr><name>piece</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_client_write</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>CLIENTWRITE_BODY</name></expr></argument>, <argument><expr><name>datap</name></expr></argument>, <argument><expr><name>piece</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>extrap</name> <operator>=</operator> <name>result</name></expr>;</expr_stmt>

<return>return <expr><name>CHUNKE_PASSTHRU_ERROR</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>wrote</name> <operator>+=</operator> <name>piece</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ch</name><operator>-&gt;</operator><name>datasize</name></name> <operator>-=</operator> <name>piece</name></expr>;</expr_stmt> 

<expr_stmt><expr><name>datap</name> <operator>+=</operator> <name>piece</name></expr>;</expr_stmt> 

<expr_stmt><expr><name>length</name> <operator>-=</operator> <name>piece</name></expr>;</expr_stmt> 

<if_stmt><if>if<condition>(<expr><literal type="number">0</literal> <operator>==</operator> <name><name>ch</name><operator>-&gt;</operator><name>datasize</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ch</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>CHUNK_POSTLF</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>CHUNK_POSTLF</name></expr>:</case>

<if_stmt><if>if<condition>(<expr><operator>*</operator><name>datap</name> <operator>==</operator> <literal type="number">0x0a</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>Curl_httpchunk_init</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><operator>*</operator><name>datap</name> <operator>!=</operator> <literal type="number">0x0d</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CHUNKE_BAD_CHUNK</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>datap</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>length</name><operator>--</operator></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>CHUNK_TRAILER</name></expr>:</case>

<if_stmt><if>if<condition>(<expr><operator>(</operator><operator>*</operator><name>datap</name> <operator>==</operator> <literal type="number">0x0d</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>*</operator><name>datap</name> <operator>==</operator> <literal type="number">0x0a</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>trlPos</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>trailer</name><index>[<expr><name><name>conn</name><operator>-&gt;</operator><name>trlPos</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x0d</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>trailer</name><index>[<expr><name><name>conn</name><operator>-&gt;</operator><name>trlPos</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x0a</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>trailer</name><index>[<expr><name><name>conn</name><operator>-&gt;</operator><name>trlPos</name></name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_convert_from_network</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>trailer</name></name></expr></argument>,

<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>trlPos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CHUNKE_BAD_CHUNK</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>http_te_skip</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_client_write</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>CLIENTWRITE_HEADER</name></expr></argument>,

<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>trailer</name></name></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>trlPos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>extrap</name> <operator>=</operator> <name>result</name></expr>;</expr_stmt>

<return>return <expr><name>CHUNKE_PASSTHRU_ERROR</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>trlPos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ch</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>CHUNK_TRAILER_CR</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>*</operator><name>datap</name> <operator>==</operator> <literal type="number">0x0a</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name><name>ch</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>CHUNK_TRAILER_POSTCR</name></expr>;</expr_stmt>

<break>break;</break> 

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>trlPos</name></name> <operator>&gt;=</operator> <name><name>conn</name><operator>-&gt;</operator><name>trlMax</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>trlMax</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>trlMax</name></name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>realloc</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>trailer</name></name></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>trlMax</name></name> <operator>+</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>trlMax</name></name> <operator>=</operator> <literal type="number">128</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>trlMax</name></name> <operator>+</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>ptr</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CHUNKE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>trailer</name></name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>trailer</name><index>[<expr><name><name>conn</name><operator>-&gt;</operator><name>trlPos</name></name><operator>++</operator></expr>]</index></name><operator>=</operator><operator>*</operator><name>datap</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>datap</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>length</name><operator>--</operator></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>CHUNK_TRAILER_CR</name></expr>:</case>

<if_stmt><if>if<condition>(<expr><operator>*</operator><name>datap</name> <operator>==</operator> <literal type="number">0x0a</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ch</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>CHUNK_TRAILER_POSTCR</name></expr>;</expr_stmt>

<expr_stmt><expr><name>datap</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>length</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><name>CHUNKE_BAD_CHUNK</name></expr>;</return></block_content></block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>CHUNK_TRAILER_POSTCR</name></expr>:</case>

<if_stmt><if>if<condition>(<expr><operator>(</operator><operator>*</operator><name>datap</name> <operator>!=</operator> <literal type="number">0x0d</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>datap</name> <operator>!=</operator> <literal type="number">0x0a</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ch</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>CHUNK_TRAILER</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>*</operator><name>datap</name> <operator>==</operator> <literal type="number">0x0d</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>datap</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>length</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ch</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>CHUNK_STOP</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>CHUNK_STOP</name></expr>:</case>

<if_stmt><if>if<condition>(<expr><operator>*</operator><name>datap</name> <operator>==</operator> <literal type="number">0x0a</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>length</name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ch</name><operator>-&gt;</operator><name>dataleft</name></name> <operator>=</operator> <call><name>curlx_sotouz</name><argument_list>(<argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CHUNKE_STOP</name></expr>;</return> 

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><name>CHUNKE_BAD_CHUNK</name></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></switch>

</block_content>}</block></while>

<return>return <expr><name>CHUNKE_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>Curl_chunked_strerror</name><parameter_list>(<parameter><decl><type><name>CHUNKcode</name></type> <name>code</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch<condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>

<default>default:</default>

<return>return <expr><literal type="string">"OK"</literal></expr>;</return>

<case>case <expr><name>CHUNKE_TOO_LONG_HEX</name></expr>:</case>

<return>return <expr><literal type="string">"Too long hexadecimal number"</literal></expr>;</return>

<case>case <expr><name>CHUNKE_ILLEGAL_HEX</name></expr>:</case>

<return>return <expr><literal type="string">"Illegal or missing hexadecimal sequence"</literal></expr>;</return>

<case>case <expr><name>CHUNKE_BAD_CHUNK</name></expr>:</case>

<return>return <expr><literal type="string">"Malformed encoding found"</literal></expr>;</return>

<case>case <expr><name>CHUNKE_PASSTHRU_ERROR</name></expr>:</case>

<expr_stmt><expr><call><name>DEBUGASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<return>return <expr><literal type="string">""</literal></expr>;</return>

<case>case <expr><name>CHUNKE_BAD_ENCODING</name></expr>:</case>

<return>return <expr><literal type="string">"Bad content-encoding found"</literal></expr>;</return>

<case>case <expr><name>CHUNKE_OUT_OF_MEMORY</name></expr>:</case>

<return>return <expr><literal type="string">"Out of memory"</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</unit>
