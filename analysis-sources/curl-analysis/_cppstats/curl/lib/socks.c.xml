<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\curl-analysis\_cppstats\curl\lib\socks.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_setup.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_PROXY</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_NETINET_IN_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet/in.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ARPA_INET_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;arpa/inet.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"urldata.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sendf.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"select.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"connect.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"timeval.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"socks.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"multiif.h"</cpp:file></cpp:include> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_printf.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_memory.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memdebug.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_GSSAPI</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>USE_WINDOWS_SSPI</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>int</name></type> <name>Curl_blockread_all</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, 

<parameter><decl><type><name>curl_socket_t</name></type> <name>sockfd</name></decl></parameter>, 

<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, 

<parameter><decl><type><name>ssize_t</name></type> <name>buffersize</name></decl></parameter>, 

<parameter><decl><type><name>ssize_t</name> <modifier>*</modifier></type><name>n</name></decl></parameter>)</parameter_list> 

<block>{<block_content>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>nread</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>allread</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for<control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>timediff_t</name></type> <name>timeleft</name> <init>= <expr><call><name>Curl_timeleft</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>timeleft</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_OPERATION_TIMEDOUT</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>SOCKET_READABLE</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>, <argument><expr><name>timeleft</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>~</operator><name>CURLE_OK</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_read_plain</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buffersize</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>CURLE_AGAIN</name> <operator>==</operator> <name>result</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>buffersize</name> <operator>==</operator> <name>nread</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>allread</name> <operator>+=</operator> <name>nread</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>n</name> <operator>=</operator> <name>allread</name></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_OK</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>nread</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>~</operator><name>CURLE_OK</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>buffersize</name> <operator>-=</operator> <name>nread</name></expr>;</expr_stmt>

<expr_stmt><expr><name>buf</name> <operator>+=</operator> <name>nread</name></expr>;</expr_stmt>

<expr_stmt><expr><name>allread</name> <operator>+=</operator> <name>nread</name></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DEBUGBUILD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sxstate</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>socksstate(x,y)</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sxstate</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>socksstate(x,y, __LINE__)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type> <name>socksstate</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>connect_t</name></name></type> <name>state</name></decl></parameter>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUGBUILD</name></expr></argument>)</argument_list></call></expr></cpp:if>
, <parameter><decl><type><name>int</name></type> <name>lineno</name></decl></parameter>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>enum</name> <name>connect_t</name></name></type> <name>oldstate</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>cnnct</name><operator>.</operator><name>state</name></name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUGBUILD</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_VERBOSE_STRINGS</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name><name>statename</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"INIT"</literal></expr>,

<expr><literal type="string">"SOCKS_INIT"</literal></expr>,

<expr><literal type="string">"SOCKS_SEND"</literal></expr>,

<expr><literal type="string">"SOCKS_READ_INIT"</literal></expr>,

<expr><literal type="string">"SOCKS_READ"</literal></expr>,

<expr><literal type="string">"GSSAPI_INIT"</literal></expr>,

<expr><literal type="string">"AUTH_INIT"</literal></expr>,

<expr><literal type="string">"AUTH_SEND"</literal></expr>,

<expr><literal type="string">"AUTH_READ"</literal></expr>,

<expr><literal type="string">"REQ_INIT"</literal></expr>,

<expr><literal type="string">"RESOLVING"</literal></expr>,

<expr><literal type="string">"RESOLVED"</literal></expr>,

<expr><literal type="string">"RESOLVE_REMOTE"</literal></expr>,

<expr><literal type="string">"REQ_SEND"</literal></expr>,

<expr><literal type="string">"REQ_SENDING"</literal></expr>,

<expr><literal type="string">"REQ_READ"</literal></expr>,

<expr><literal type="string">"REQ_READ_MORE"</literal></expr>,

<expr><literal type="string">"DONE"</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if<condition>(<expr><name>oldstate</name> <operator>==</operator> <name>state</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>cnnct</name><operator>.</operator><name>state</name></name> <operator>=</operator> <name>state</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUGBUILD</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_VERBOSE_STRINGS</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>,

<argument><expr><literal type="string">"SXSTATE: %s =&gt; %s conn %p; line %d\n"</literal></expr></argument>,

<argument><expr><name><name>statename</name><index>[<expr><name>oldstate</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>statename</name><index>[<expr><name><name>conn</name><operator>-&gt;</operator><name>cnnct</name><operator>.</operator><name>state</name></name></expr>]</index></name></expr></argument>, <argument><expr><name>conn</name></expr></argument>,

<argument><expr><name>lineno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>Curl_SOCKS_getsock</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>curl_socket_t</name> <modifier>*</modifier></type><name>sock</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>sockindex</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>sock</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>sock</name><index>[<expr><name>sockindex</name></expr>]</index></name></expr>;</expr_stmt>

<switch>switch<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>cnnct</name><operator>.</operator><name>state</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>CONNECT_RESOLVING</name></expr>:</case>

<case>case <expr><name>CONNECT_SOCKS_READ</name></expr>:</case>

<case>case <expr><name>CONNECT_AUTH_READ</name></expr>:</case>

<case>case <expr><name>CONNECT_REQ_READ</name></expr>:</case>

<case>case <expr><name>CONNECT_REQ_READ_MORE</name></expr>:</case>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>GETSOCK_READSOCK</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>GETSOCK_WRITESOCK</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<return>return <expr><name>rc</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>CURLcode</name></type> <name>Curl_SOCKS4</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>proxy_user</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>hostname</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>remote_port</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>sockindex</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,

<parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>done</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>protocol4a</name> <init>=

<expr><ternary><condition><expr><operator>(</operator><name><name>conn</name><operator>-&gt;</operator><name>socks_proxy</name><operator>.</operator><name>proxytype</name></name> <operator>==</operator> <name>CURLPROXY_SOCKS4A</name><operator>)</operator></expr> ?</condition><then> <expr><name>TRUE</name></expr> </then><else>: <expr><name>FALSE</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>socksreq</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>cnnct</name><operator>.</operator><name>socksreq</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>curl_socket_t</name></type> <name>sockfd</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>sock</name><index>[<expr><name>sockindex</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>connstate</name></name> <modifier>*</modifier></type><name>sx</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>cnnct</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>Curl_dns_entry</name></name> <modifier>*</modifier></type><name>dns</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>actualread</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>written</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>SOCKS_STATE</name><argument_list>(<argument><expr><name><name>sx</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><operator>*</operator><name>done</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>sxstate</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>CONNECT_SOCKS_INIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<switch>switch<condition>(<expr><name><name>sx</name><operator>-&gt;</operator><name>state</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>CONNECT_SOCKS_INIT</name></expr>:</case>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>ip_version</name></name> <operator>=</operator> <name>CURL_IPRESOLVE_V4</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>httpproxy</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"SOCKS4%s: connecting to HTTP proxy %s port %d\n"</literal></expr></argument>,

<argument><expr><ternary><condition><expr><name>protocol4a</name></expr> ?</condition><then> <expr><literal type="string">"a"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>, <argument><expr><name>hostname</name></expr></argument>, <argument><expr><name>remote_port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"SOCKS4 communication to %s:%d\n"</literal></expr></argument>, <argument><expr><name>hostname</name></expr></argument>, <argument><expr><name>remote_port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>socksreq</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>socksreq</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>socksreq</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><operator>(</operator><name>remote_port</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>socksreq</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><name>remote_port</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator></expr>;</expr_stmt> 

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>protocol4a</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>enum</name> <name>resolve_t</name></name></type> <name>rc</name> <init>=

<expr><call><name>Curl_resolv</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>hostname</name></expr></argument>, <argument><expr><name>remote_port</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dns</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>==</operator> <name>CURLRESOLV_ERROR</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_COULDNT_RESOLVE_PROXY</name></expr>;</return></block_content></block></if>

<if type="elseif">else if<condition>(<expr><name>rc</name> <operator>==</operator> <name>CURLRESOLV_PENDING</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>sxstate</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>CONNECT_RESOLVING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"SOCKS4 non-blocking resolve of %s\n"</literal></expr></argument>, <argument><expr><name>hostname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>sxstate</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>CONNECT_RESOLVED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>CONNECT_RESOLVED</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>sxstate</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>CONNECT_REQ_INIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>CONNECT_REQ_INIT</name>;</goto>

<case>case <expr><name>CONNECT_RESOLVING</name></expr>:</case>

<expr_stmt><expr><name>dns</name> <operator>=</operator> <call><name>Curl_fetch_addr</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>hostname</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>conn</name><operator>-&gt;</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>dns</name></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CURLRES_ASYNCH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>async</name><operator>.</operator><name>dns</name></name> <operator>=</operator> <name>dns</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>async</name><operator>.</operator><name>done</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Hostname '%s' was found\n"</literal></expr></argument>, <argument><expr><name>hostname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sxstate</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>CONNECT_RESOLVED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_resolv_check</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>dns</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<label><name>CONNECT_RESOLVED</name>:</label>

<case>case <expr><name>CONNECT_RESOLVED</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>Curl_addrinfo</name> <modifier>*</modifier></type><name>hp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>dns</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>hp</name> <operator>=</operator> <name><name>dns</name><operator>-&gt;</operator><name>addr</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>hp</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>Curl_printable_address</name><argument_list>(<argument><expr><name>hp</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>hp</name><operator>-&gt;</operator><name>ai_family</name></name> <operator>==</operator> <name>AF_INET</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in</name></name> <modifier>*</modifier></type><name>saddr_in</name></decl>;</decl_stmt>

<expr_stmt><expr><name>saddr_in</name> <operator>=</operator> <operator>(</operator>struct <name>sockaddr_in</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>hp</name><operator>-&gt;</operator><name>ai_addr</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>socksreq</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>saddr_in</name><operator>-&gt;</operator><name>sin_addr</name><operator>.</operator><name>s_addr</name></name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index></expr>;</expr_stmt>

<expr_stmt><expr><name><name>socksreq</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>saddr_in</name><operator>-&gt;</operator><name>sin_addr</name><operator>.</operator><name>s_addr</name></name><operator>)</operator><index>[<expr><literal type="number">1</literal></expr>]</index></expr>;</expr_stmt>

<expr_stmt><expr><name><name>socksreq</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>saddr_in</name><operator>-&gt;</operator><name>sin_addr</name><operator>.</operator><name>s_addr</name></name><operator>)</operator><index>[<expr><literal type="number">2</literal></expr>]</index></expr>;</expr_stmt>

<expr_stmt><expr><name><name>socksreq</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>saddr_in</name><operator>-&gt;</operator><name>sin_addr</name><operator>.</operator><name>s_addr</name></name><operator>)</operator><index>[<expr><literal type="number">3</literal></expr>]</index></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"SOCKS4 connect to IPv4 %s (locally resolved)\n"</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>hp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"SOCKS4 connection to %s not supported\n"</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>Curl_resolv_unlock</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>dns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>hp</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Failed to resolve \"%s\" for SOCKS4 connect."</literal></expr></argument>,

<argument><expr><name>hostname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_COULDNT_RESOLVE_HOST</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<label><name>CONNECT_REQ_INIT</name>:</label>

<case>case <expr><name>CONNECT_REQ_INIT</name></expr>:</case>

<expr_stmt><expr><name><name>socksreq</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<if_stmt><if>if<condition>(<expr><name>proxy_user</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>plen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>proxy_user</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>plen</name> <operator>&gt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>sx</name><operator>-&gt;</operator><name>socksreq</name></name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Too long SOCKS proxy name, can't use!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_COULDNT_CONNECT</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>socksreq</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>proxy_user</name></expr></argument>, <argument><expr><name>plen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<block>{<block_content>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>packetsize</name> <init>= <expr><literal type="number">9</literal> <operator>+</operator>

<call><name>strlen</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>socksreq</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 

<if_stmt><if>if<condition>(<expr><name>protocol4a</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>hostnamelen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>socksreq</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>socksreq</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>socksreq</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>socksreq</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>hostnamelen</name> <operator>=</operator> <operator>(</operator><name>ssize_t</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>hostname</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt> 

<if_stmt><if>if<condition>(<expr><name>hostnamelen</name> <operator>&lt;=</operator> <literal type="number">255</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>socksreq</name> <operator>+</operator> <name>packetsize</name></expr></argument>, <argument><expr><name>hostname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"SOCKS4: too long host name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_COULDNT_CONNECT</name></expr>;</return>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>packetsize</name> <operator>+=</operator> <name>hostnamelen</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sx</name><operator>-&gt;</operator><name>outp</name></name> <operator>=</operator> <name>socksreq</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sx</name><operator>-&gt;</operator><name>outstanding</name></name> <operator>=</operator> <name>packetsize</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sxstate</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>CONNECT_REQ_SENDING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<case>case <expr><name>CONNECT_REQ_SENDING</name></expr>:</case>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_write_plain</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>sockfd</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>sx</name><operator>-&gt;</operator><name>outp</name></name></expr></argument>,

<argument><expr><name><name>sx</name><operator>-&gt;</operator><name>outstanding</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>written</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>CURLE_AGAIN</name> <operator>!=</operator> <name>result</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Failed to send SOCKS4 connect request."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_COULDNT_CONNECT</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>written</name> <operator>!=</operator> <name><name>sx</name><operator>-&gt;</operator><name>outstanding</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sx</name><operator>-&gt;</operator><name>outstanding</name></name> <operator>-=</operator> <name>written</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sx</name><operator>-&gt;</operator><name>outp</name></name> <operator>+=</operator> <name>written</name></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sx</name><operator>-&gt;</operator><name>outstanding</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>sx</name><operator>-&gt;</operator><name>outp</name></name> <operator>=</operator> <name>socksreq</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sxstate</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>CONNECT_SOCKS_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><name>CONNECT_SOCKS_READ</name></expr>:</case>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_read_plain</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>sx</name><operator>-&gt;</operator><name>outp</name></name></expr></argument>,

<argument><expr><name><name>sx</name><operator>-&gt;</operator><name>outstanding</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>actualread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>CURLE_AGAIN</name> <operator>!=</operator> <name>result</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"SOCKS4: Failed receiving connect request ack: %s"</literal></expr></argument>,

<argument><expr><call><name>curl_easy_strerror</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_COULDNT_CONNECT</name></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name>actualread</name> <operator>!=</operator> <name><name>sx</name><operator>-&gt;</operator><name>outstanding</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sx</name><operator>-&gt;</operator><name>outstanding</name></name> <operator>-=</operator> <name>actualread</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sx</name><operator>-&gt;</operator><name>outp</name></name> <operator>+=</operator> <name>actualread</name></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>sxstate</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>CONNECT_DONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default> 

<break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if<condition>(<expr><name><name>socksreq</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>,

<argument><expr><literal type="string">"SOCKS4 reply has wrong version, version should be 0."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_COULDNT_CONNECT</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<switch>switch<condition>(<expr><name><name>socksreq</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">90</literal></expr>:</case>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"SOCKS4%s request granted.\n"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>protocol4a</name></expr>?</condition><then><expr><literal type="string">"a"</literal></expr></then><else>:<expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">91</literal></expr>:</case>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>,

<argument><expr><literal type="string">"Can't complete SOCKS4 connection to %d.%d.%d.%d:%d. (%d)"</literal>

<literal type="string">", request rejected or failed."</literal></expr></argument>,

<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name><name>socksreq</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name><name>socksreq</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>,

<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name><name>socksreq</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name><name>socksreq</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>,

<argument><expr><operator>(</operator><operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name><name>socksreq</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name><name>socksreq</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>)</operator></expr></argument>,

<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name><name>socksreq</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_COULDNT_CONNECT</name></expr>;</return>

<case>case <expr><literal type="number">92</literal></expr>:</case>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>,

<argument><expr><literal type="string">"Can't complete SOCKS4 connection to %d.%d.%d.%d:%d. (%d)"</literal>

<literal type="string">", request rejected because SOCKS server cannot connect to "</literal>

<literal type="string">"identd on the client."</literal></expr></argument>,

<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name><name>socksreq</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name><name>socksreq</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>,

<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name><name>socksreq</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name><name>socksreq</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>,

<argument><expr><operator>(</operator><operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name><name>socksreq</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name><name>socksreq</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>)</operator></expr></argument>,

<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name><name>socksreq</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_COULDNT_CONNECT</name></expr>;</return>

<case>case <expr><literal type="number">93</literal></expr>:</case>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>,

<argument><expr><literal type="string">"Can't complete SOCKS4 connection to %d.%d.%d.%d:%d. (%d)"</literal>

<literal type="string">", request rejected because the client program and identd "</literal>

<literal type="string">"report different user-ids."</literal></expr></argument>,

<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name><name>socksreq</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name><name>socksreq</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>,

<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name><name>socksreq</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name><name>socksreq</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>,

<argument><expr><operator>(</operator><operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name><name>socksreq</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name><name>socksreq</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>)</operator></expr></argument>,

<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name><name>socksreq</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_COULDNT_CONNECT</name></expr>;</return>

<default>default:</default>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>,

<argument><expr><literal type="string">"Can't complete SOCKS4 connection to %d.%d.%d.%d:%d. (%d)"</literal>

<literal type="string">", Unknown."</literal></expr></argument>,

<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name><name>socksreq</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name><name>socksreq</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>,

<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name><name>socksreq</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name><name>socksreq</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>,

<argument><expr><operator>(</operator><operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name><name>socksreq</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name><name>socksreq</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>)</operator></expr></argument>,

<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name><name>socksreq</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_COULDNT_CONNECT</name></expr>;</return>

</block_content>}</block></switch>

<expr_stmt><expr><operator>*</operator><name>done</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return> 

</block_content>}</block></function>

<function><type><name>CURLcode</name></type> <name>Curl_SOCKS5</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>proxy_user</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>proxy_password</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>hostname</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>remote_port</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>sockindex</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,

<parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>done</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>socksreq</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>cnnct</name><operator>.</operator><name>socksreq</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>dest</name><index>[<expr><literal type="number">256</literal></expr>]</index></name> <init>= <expr><literal type="string">"unknown"</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>actualread</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>written</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>curl_socket_t</name></type> <name>sockfd</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>sock</name><index>[<expr><name>sockindex</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>socks5_resolve_local</name> <init>=

<expr><ternary><condition><expr><operator>(</operator><name><name>conn</name><operator>-&gt;</operator><name>socks_proxy</name><operator>.</operator><name>proxytype</name></name> <operator>==</operator> <name>CURLPROXY_SOCKS5</name><operator>)</operator></expr> ?</condition><then> <expr><name>TRUE</name></expr> </then><else>: <expr><name>FALSE</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>hostname_len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>hostname</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>long</name></type> <name>auth</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>socks5auth</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>allow_gssapi</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>connstate</name></name> <modifier>*</modifier></type><name>sx</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>cnnct</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>Curl_dns_entry</name></name> <modifier>*</modifier></type><name>dns</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>SOCKS_STATE</name><argument_list>(<argument><expr><name><name>sx</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><operator>*</operator><name>done</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>sxstate</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>CONNECT_SOCKS_INIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<switch>switch<condition>(<expr><name><name>sx</name><operator>-&gt;</operator><name>state</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>CONNECT_SOCKS_INIT</name></expr>:</case>

<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>httpproxy</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"SOCKS5: connecting to HTTP proxy %s port %d\n"</literal></expr></argument>,

<argument><expr><name>hostname</name></expr></argument>, <argument><expr><name>remote_port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>socks5_resolve_local</name> <operator>&amp;&amp;</operator> <name>hostname_len</name> <operator>&gt;</operator> <literal type="number">255</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"SOCKS5: server resolving disabled for hostnames of "</literal>

<literal type="string">"length &gt; 255 [actual len=%zu]\n"</literal></expr></argument>, <argument><expr><name>hostname_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>socks5_resolve_local</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>auth</name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>CURLAUTH_BASIC</name> <operator>|</operator> <name>CURLAUTH_GSSAPI</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>,

<argument><expr><literal type="string">"warning: unsupported value passed to CURLOPT_SOCKS5_AUTH: %lu\n"</literal></expr></argument>,

<argument><expr><name>auth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><name>auth</name> <operator>&amp;</operator> <name>CURLAUTH_BASIC</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>proxy_user</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_GSSAPI</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>USE_WINDOWS_SSPI</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if<condition>(<expr><name>auth</name> <operator>&amp;</operator> <name>CURLAUTH_GSSAPI</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>allow_gssapi</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>socksreq</name><index>[<expr><name>idx</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name>idx</name><operator>++</operator></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>socksreq</name><index>[<expr><name>idx</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<if_stmt><if>if<condition>(<expr><name>allow_gssapi</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>socksreq</name><index>[<expr><name>idx</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<if_stmt><if>if<condition>(<expr><name>proxy_user</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>socksreq</name><index>[<expr><name>idx</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<expr_stmt><expr><name><name>socksreq</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>(</operator><name>idx</name> <operator>-</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_write_plain</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>sockfd</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>socksreq</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>written</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>CURLE_AGAIN</name> <operator>!=</operator> <name>result</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Unable to send initial SOCKS5 request."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_COULDNT_CONNECT</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>written</name> <operator>!=</operator> <name>idx</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>sxstate</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>CONNECT_SOCKS_SEND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sx</name><operator>-&gt;</operator><name>outstanding</name></name> <operator>=</operator> <name>idx</name> <operator>-</operator> <name>written</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sx</name><operator>-&gt;</operator><name>outp</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>socksreq</name><index>[<expr><name>written</name></expr>]</index></name></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>sxstate</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>CONNECT_SOCKS_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>CONNECT_SOCKS_READ_INIT</name>;</goto>

<case>case <expr><name>CONNECT_SOCKS_SEND</name></expr>:</case>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_write_plain</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>sockfd</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>sx</name><operator>-&gt;</operator><name>outp</name></name></expr></argument>,

<argument><expr><name><name>sx</name><operator>-&gt;</operator><name>outstanding</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>written</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>CURLE_AGAIN</name> <operator>!=</operator> <name>result</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Unable to send initial SOCKS5 request."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_COULDNT_CONNECT</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>written</name> <operator>!=</operator> <name><name>sx</name><operator>-&gt;</operator><name>outstanding</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sx</name><operator>-&gt;</operator><name>outstanding</name></name> <operator>-=</operator> <name>written</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sx</name><operator>-&gt;</operator><name>outp</name></name> <operator>+=</operator> <name>written</name></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<label><name>CONNECT_SOCKS_READ_INIT</name>:</label>

<case>case <expr><name>CONNECT_SOCKS_READ_INIT</name></expr>:</case>

<expr_stmt><expr><name><name>sx</name><operator>-&gt;</operator><name>outstanding</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>sx</name><operator>-&gt;</operator><name>outp</name></name> <operator>=</operator> <name>socksreq</name></expr>;</expr_stmt> 

<case>case <expr><name>CONNECT_SOCKS_READ</name></expr>:</case>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_read_plain</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>sx</name><operator>-&gt;</operator><name>outp</name></name></expr></argument>,

<argument><expr><name><name>sx</name><operator>-&gt;</operator><name>outstanding</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>actualread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>CURLE_AGAIN</name> <operator>!=</operator> <name>result</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Unable to receive initial SOCKS5 response."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_COULDNT_CONNECT</name></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name>actualread</name> <operator>!=</operator> <name><name>sx</name><operator>-&gt;</operator><name>outstanding</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sx</name><operator>-&gt;</operator><name>outstanding</name></name> <operator>-=</operator> <name>actualread</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sx</name><operator>-&gt;</operator><name>outp</name></name> <operator>+=</operator> <name>actualread</name></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name><name>socksreq</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">5</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Received invalid version in initial SOCKS5 response."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_COULDNT_CONNECT</name></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name><name>socksreq</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>sxstate</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>CONNECT_REQ_INIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>CONNECT_REQ_INIT</name>;</goto>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name><name>socksreq</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>sxstate</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>CONNECT_AUTH_INIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>CONNECT_AUTH_INIT</name>;</goto>

</block_content>}</block></if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_GSSAPI</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>USE_WINDOWS_SSPI</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if type="elseif">else if<condition>(<expr><name>allow_gssapi</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>socksreq</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>sxstate</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>CONNECT_GSSAPI_INIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_SOCKS5_gssapi_negotiate</name><argument_list>(<argument><expr><name>sockindex</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Unable to negotiate SOCKS5 GSS-API context."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_COULDNT_CONNECT</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<else>else <block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>allow_gssapi</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>socksreq</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>,

<argument><expr><literal type="string">"SOCKS5 GSSAPI per-message authentication is not supported."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_COULDNT_CONNECT</name></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name><name>socksreq</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">255</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"No authentication method was acceptable."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_COULDNT_CONNECT</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>,

<argument><expr><literal type="string">"Undocumented SOCKS5 mode attempted to be used by server."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_COULDNT_CONNECT</name></expr>;</return>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_GSSAPI</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>USE_WINDOWS_SSPI</name></expr></argument>)</argument_list></call></expr></cpp:if>

<case>case <expr><name>CONNECT_GSSAPI_INIT</name></expr>:</case>

<break>break;</break>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<default>default:</default> 

<break>break;</break>

<label><name>CONNECT_AUTH_INIT</name>:</label>

<case>case <expr><name>CONNECT_AUTH_INIT</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>proxy_user_len</name></decl>, <decl><type ref="prev"/><name>proxy_password_len</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>proxy_user</name> <operator>&amp;&amp;</operator> <name>proxy_password</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>proxy_user_len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>proxy_user</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>proxy_password_len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>proxy_password</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>proxy_user_len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>proxy_password_len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>socksreq</name><index>[<expr><name>len</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>socksreq</name><index>[<expr><name>len</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <name>proxy_user_len</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>proxy_user</name> <operator>&amp;&amp;</operator> <name>proxy_user_len</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>proxy_user_len</name> <operator>&gt;=</operator> <literal type="number">255</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Excessive user name length for proxy auth"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_BAD_FUNCTION_ARGUMENT</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>socksreq</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><name>proxy_user</name></expr></argument>, <argument><expr><name>proxy_user_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>+=</operator> <name>proxy_user_len</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>socksreq</name><index>[<expr><name>len</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <name>proxy_password_len</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>proxy_password</name> <operator>&amp;&amp;</operator> <name>proxy_password_len</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>proxy_password_len</name> <operator>&gt;</operator> <literal type="number">255</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Excessive password length for proxy auth"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_BAD_FUNCTION_ARGUMENT</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>socksreq</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><name>proxy_password</name></expr></argument>, <argument><expr><name>proxy_password_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>+=</operator> <name>proxy_password_len</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sxstate</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>CONNECT_AUTH_SEND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sx</name><operator>-&gt;</operator><name>outstanding</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sx</name><operator>-&gt;</operator><name>outp</name></name> <operator>=</operator> <name>socksreq</name></expr>;</expr_stmt>

</block_content>}</block>

<case>case <expr><name>CONNECT_AUTH_SEND</name></expr>:</case>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_write_plain</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>sockfd</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>sx</name><operator>-&gt;</operator><name>outp</name></name></expr></argument>,

<argument><expr><name><name>sx</name><operator>-&gt;</operator><name>outstanding</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>written</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>CURLE_AGAIN</name> <operator>!=</operator> <name>result</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Failed to send SOCKS5 sub-negotiation request."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_COULDNT_CONNECT</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>sx</name><operator>-&gt;</operator><name>outstanding</name></name> <operator>!=</operator> <name>written</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sx</name><operator>-&gt;</operator><name>outstanding</name></name> <operator>-=</operator> <name>written</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sx</name><operator>-&gt;</operator><name>outp</name></name> <operator>+=</operator> <name>written</name></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sx</name><operator>-&gt;</operator><name>outp</name></name> <operator>=</operator> <name>socksreq</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sx</name><operator>-&gt;</operator><name>outstanding</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sxstate</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>CONNECT_AUTH_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><name>CONNECT_AUTH_READ</name></expr>:</case>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_read_plain</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>sx</name><operator>-&gt;</operator><name>outp</name></name></expr></argument>,

<argument><expr><name><name>sx</name><operator>-&gt;</operator><name>outstanding</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>actualread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>CURLE_AGAIN</name> <operator>!=</operator> <name>result</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Unable to receive SOCKS5 sub-negotiation response."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_COULDNT_CONNECT</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>actualread</name> <operator>!=</operator> <name><name>sx</name><operator>-&gt;</operator><name>outstanding</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sx</name><operator>-&gt;</operator><name>outstanding</name></name> <operator>-=</operator> <name>actualread</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sx</name><operator>-&gt;</operator><name>outp</name></name> <operator>+=</operator> <name>actualread</name></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>socksreq</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"User was rejected by the SOCKS5 server (%d %d)."</literal></expr></argument>,

<argument><expr><name><name>socksreq</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>socksreq</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_COULDNT_CONNECT</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>sxstate</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>CONNECT_REQ_INIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>CONNECT_REQ_INIT</name>:</label>

<case>case <expr><name>CONNECT_REQ_INIT</name></expr>:</case>

<if_stmt><if>if<condition>(<expr><name>socks5_resolve_local</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>enum</name> <name>resolve_t</name></name></type> <name>rc</name> <init>= <expr><call><name>Curl_resolv</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>hostname</name></expr></argument>, <argument><expr><name>remote_port</name></expr></argument>,

<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dns</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>==</operator> <name>CURLRESOLV_ERROR</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_COULDNT_RESOLVE_HOST</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>==</operator> <name>CURLRESOLV_PENDING</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>sxstate</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>CONNECT_RESOLVING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>sxstate</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>CONNECT_RESOLVED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>CONNECT_RESOLVED</name>;</goto>

</block_content>}</block></if></if_stmt>

<goto>goto <name>CONNECT_RESOLVE_REMOTE</name>;</goto>

<case>case <expr><name>CONNECT_RESOLVING</name></expr>:</case>

<expr_stmt><expr><name>dns</name> <operator>=</operator> <call><name>Curl_fetch_addr</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>hostname</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>conn</name><operator>-&gt;</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>dns</name></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CURLRES_ASYNCH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>async</name><operator>.</operator><name>dns</name></name> <operator>=</operator> <name>dns</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>async</name><operator>.</operator><name>done</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"SOCKS5: hostname '%s' found\n"</literal></expr></argument>, <argument><expr><name>hostname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>dns</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_resolv_check</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>dns</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<label><name>CONNECT_RESOLVED</name>:</label>

<case>case <expr><name>CONNECT_RESOLVED</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>Curl_addrinfo</name> <modifier>*</modifier></type><name>hp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>dns</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>hp</name> <operator>=</operator> <name><name>dns</name><operator>-&gt;</operator><name>addr</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>hp</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Failed to resolve \"%s\" for SOCKS5 connect."</literal></expr></argument>,

<argument><expr><name>hostname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_COULDNT_RESOLVE_HOST</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>Curl_printable_address</name><argument_list>(<argument><expr><name>hp</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>dest</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>destlen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msnprintf</name><argument_list>(<argument><expr><name>dest</name> <operator>+</operator> <name>destlen</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>dest</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <name>destlen</name></expr></argument>, <argument><expr><literal type="string">":%d"</literal></expr></argument>, <argument><expr><name>remote_port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><literal type="string">"unknown"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>socksreq</name><index>[<expr><name>len</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>socksreq</name><index>[<expr><name>len</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>socksreq</name><index>[<expr><name>len</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<if_stmt><if>if<condition>(<expr><name><name>hp</name><operator>-&gt;</operator><name>ai_family</name></name> <operator>==</operator> <name>AF_INET</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in</name></name> <modifier>*</modifier></type><name>saddr_in</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>socksreq</name><index>[<expr><name>len</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name>saddr_in</name> <operator>=</operator> <operator>(</operator>struct <name>sockaddr_in</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>hp</name><operator>-&gt;</operator><name>ai_addr</name></name></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>socksreq</name><index>[<expr><name>len</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>saddr_in</name><operator>-&gt;</operator><name>sin_addr</name><operator>.</operator><name>s_addr</name></name><operator>)</operator><index>[<expr><name>i</name></expr>]</index></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"SOCKS5 connect to IPv4 %s (locally resolved)\n"</literal></expr></argument>, <argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_IPV6</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if<condition>(<expr><name><name>hp</name><operator>-&gt;</operator><name>ai_family</name></name> <operator>==</operator> <name>AF_INET6</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in6</name></name> <modifier>*</modifier></type><name>saddr_in6</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>socksreq</name><index>[<expr><name>len</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name>saddr_in6</name> <operator>=</operator> <operator>(</operator>struct <name>sockaddr_in6</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>hp</name><operator>-&gt;</operator><name>ai_addr</name></name></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>socksreq</name><index>[<expr><name>len</name><operator>++</operator></expr>]</index></name> <operator>=</operator>

<operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>saddr_in6</name><operator>-&gt;</operator><name>sin6_addr</name><operator>.</operator><name>s6_addr</name></name><operator>)</operator><index>[<expr><name>i</name></expr>]</index></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"SOCKS5 connect to IPv6 %s (locally resolved)\n"</literal></expr></argument>, <argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<else>else <block>{<block_content>

<expr_stmt><expr><name>hp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"SOCKS5 connection to %s not supported\n"</literal></expr></argument>, <argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>Curl_resolv_unlock</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>dns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<goto>goto <name>CONNECT_REQ_SEND</name>;</goto>

</block_content>}</block>

<label><name>CONNECT_RESOLVE_REMOTE</name>:</label>

<case>case <expr><name>CONNECT_RESOLVE_REMOTE</name></expr>:</case>

<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>socksreq</name><index>[<expr><name>len</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>socksreq</name><index>[<expr><name>len</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>socksreq</name><index>[<expr><name>len</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>socks5_resolve_local</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>socksreq</name><index>[<expr><name>len</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>socksreq</name><index>[<expr><name>len</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator> <name>hostname_len</name></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>socksreq</name><index>[<expr><name>len</name></expr>]</index></name></expr></argument>, <argument><expr><name>hostname</name></expr></argument>, <argument><expr><name>hostname_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>len</name> <operator>+=</operator> <name>hostname_len</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"SOCKS5 connect to %s:%d (remotely resolved)\n"</literal></expr></argument>,

<argument><expr><name>hostname</name></expr></argument>, <argument><expr><name>remote_port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<label><name>CONNECT_REQ_SEND</name>:</label>

<case>case <expr><name>CONNECT_REQ_SEND</name></expr>:</case>

<expr_stmt><expr><name><name>socksreq</name><index>[<expr><name>len</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><operator>(</operator><name>remote_port</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>socksreq</name><index>[<expr><name>len</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><name>remote_port</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_GSSAPI</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>USE_WINDOWS_SSPI</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>socks5_gssapi_enctype</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"SOCKS5 GSS-API protection not yet implemented."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_COULDNT_CONNECT</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>sx</name><operator>-&gt;</operator><name>outp</name></name> <operator>=</operator> <name>socksreq</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sx</name><operator>-&gt;</operator><name>outstanding</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sxstate</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>CONNECT_REQ_SENDING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><name>CONNECT_REQ_SENDING</name></expr>:</case>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_write_plain</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>sockfd</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>sx</name><operator>-&gt;</operator><name>outp</name></name></expr></argument>,

<argument><expr><name><name>sx</name><operator>-&gt;</operator><name>outstanding</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>written</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>CURLE_AGAIN</name> <operator>!=</operator> <name>result</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Failed to send SOCKS5 connect request."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_COULDNT_CONNECT</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>sx</name><operator>-&gt;</operator><name>outstanding</name></name> <operator>!=</operator> <name>written</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sx</name><operator>-&gt;</operator><name>outstanding</name></name> <operator>-=</operator> <name>written</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sx</name><operator>-&gt;</operator><name>outp</name></name> <operator>+=</operator> <name>written</name></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_GSSAPI</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>USE_WINDOWS_SSPI</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>socks5_gssapi_enctype</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"SOCKS5 GSS-API protection not yet implemented."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_COULDNT_CONNECT</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>sx</name><operator>-&gt;</operator><name>outstanding</name></name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>sx</name><operator>-&gt;</operator><name>outp</name></name> <operator>=</operator> <name>socksreq</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sxstate</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>CONNECT_REQ_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><name>CONNECT_REQ_READ</name></expr>:</case>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_read_plain</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>sx</name><operator>-&gt;</operator><name>outp</name></name></expr></argument>,

<argument><expr><name><name>sx</name><operator>-&gt;</operator><name>outstanding</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>actualread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>CURLE_AGAIN</name> <operator>!=</operator> <name>result</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Failed to receive SOCKS5 connect request ack."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_COULDNT_CONNECT</name></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name>actualread</name> <operator>!=</operator> <name><name>sx</name><operator>-&gt;</operator><name>outstanding</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sx</name><operator>-&gt;</operator><name>outstanding</name></name> <operator>-=</operator> <name>actualread</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sx</name><operator>-&gt;</operator><name>outp</name></name> <operator>+=</operator> <name>actualread</name></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>socksreq</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">5</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>,

<argument><expr><literal type="string">"SOCKS5 reply has wrong version, version should be 5."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_COULDNT_CONNECT</name></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name><name>socksreq</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Can't complete SOCKS5 connection to %s. (%d)"</literal></expr></argument>,

<argument><expr><name>hostname</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name><name>socksreq</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_COULDNT_CONNECT</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>socksreq</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>addrlen</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>socksreq</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">5</literal> <operator>+</operator> <name>addrlen</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name><name>socksreq</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">16</literal> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_GSSAPI</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>USE_WINDOWS_SSPI</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>conn</name><operator>-&gt;</operator><name>socks5_gssapi_enctype</name></name></expr>)</condition> <block>{<block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if<condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">10</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sx</name><operator>-&gt;</operator><name>outstanding</name></name> <operator>=</operator> <name>len</name> <operator>-</operator> <literal type="number">10</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>sx</name><operator>-&gt;</operator><name>outp</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>socksreq</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sxstate</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>CONNECT_REQ_READ_MORE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>sxstate</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>CONNECT_DONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_GSSAPI</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>USE_WINDOWS_SSPI</name></expr></argument>)</argument_list></call></expr></cpp:if>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<case>case <expr><name>CONNECT_REQ_READ_MORE</name></expr>:</case>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_read_plain</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>sx</name><operator>-&gt;</operator><name>outp</name></name></expr></argument>,

<argument><expr><name><name>sx</name><operator>-&gt;</operator><name>outstanding</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>actualread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>CURLE_AGAIN</name> <operator>!=</operator> <name>result</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Failed to receive SOCKS5 connect request ack."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_COULDNT_CONNECT</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>actualread</name> <operator>!=</operator> <name><name>sx</name><operator>-&gt;</operator><name>outstanding</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sx</name><operator>-&gt;</operator><name>outstanding</name></name> <operator>-=</operator> <name>actualread</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sx</name><operator>-&gt;</operator><name>outp</name></name> <operator>+=</operator> <name>actualread</name></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>sxstate</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>CONNECT_DONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"SOCKS5 request granted.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>done</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return> 

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</unit>
