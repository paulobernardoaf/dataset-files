<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\curl-analysis\_cppstats\curl\lib\cookie.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_setup.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_HTTP</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_COOKIES</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"urldata.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cookie.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"psl.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"strtok.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sendf.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"slist.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"share.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"strtoofft.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"strcase.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_get_line.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_memrchr.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"inet_pton.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"parsedate.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rand.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rename.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_printf.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_memory.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memdebug.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name></type> <name>freecookie</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Cookie</name></name> <modifier>*</modifier></type><name>co</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>co</name><operator>-&gt;</operator><name>expirestr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>co</name><operator>-&gt;</operator><name>domain</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>co</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>co</name><operator>-&gt;</operator><name>spath</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>co</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>co</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>co</name><operator>-&gt;</operator><name>maxage</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>co</name><operator>-&gt;</operator><name>version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>co</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>tailmatch</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cooke_domain</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>hostname</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>cookie_domain_len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>cooke_domain</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>hostname_len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>hostname</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>hostname_len</name> <operator>&lt;</operator> <name>cookie_domain_len</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>strcasecompare</name><argument_list>(<argument><expr><name>cooke_domain</name></expr></argument>, <argument><expr><name>hostname</name> <operator>+</operator> <name>hostname_len</name><operator>-</operator><name>cookie_domain_len</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>hostname_len</name> <operator>==</operator> <name>cookie_domain_len</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><literal type="char">'.'</literal> <operator>==</operator> <operator>*</operator><operator>(</operator><name>hostname</name> <operator>+</operator> <name>hostname_len</name> <operator>-</operator> <name>cookie_domain_len</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>isip</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>domain</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>in_addr</name></name></type> <name>addr</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_IPV6</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name><name>struct</name> <name>in6_addr</name></name></type> <name>addr6</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if<condition>(<expr><call><name>Curl_inet_pton</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><name>domain</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>)</argument_list></call>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_IPV6</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>||</operator> <call><name>Curl_inet_pton</name><argument_list>(<argument><expr><name>AF_INET6</name></expr></argument>, <argument><expr><name>domain</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addr6</name></expr></argument>)</argument_list></call></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

)</condition> <block>{<block_content>

<return>return <expr><name>TRUE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>pathmatch</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cookie_path</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>request_uri</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>cookie_path_len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>uri_path_len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>uri_path</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>ret</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>cookie_path_len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>cookie_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><literal type="number">1</literal> <operator>==</operator> <name>cookie_path_len</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>TRUE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>uri_path</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>request_uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>uri_path</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>pos</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>uri_path</name></expr></argument>, <argument><expr><literal type="char">'?'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>pos</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>pos</name> <operator>=</operator> <literal type="number">0x0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><literal type="number">0</literal> <operator>==</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>uri_path</name></expr></argument>)</argument_list></call> <operator>||</operator> <name><name>uri_path</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'/'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>uri_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>uri_path</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>uri_path</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>uri_path_len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>uri_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>uri_path_len</name> <operator>&lt;</operator> <name>cookie_path_len</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<goto>goto <name>pathmatched</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>cookie_path</name></expr></argument>, <argument><expr><name>uri_path</name></expr></argument>, <argument><expr><name>cookie_path_len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<goto>goto <name>pathmatched</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>cookie_path_len</name> <operator>==</operator> <name>uri_path_len</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<goto>goto <name>pathmatched</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>uri_path</name><index>[<expr><name>cookie_path_len</name></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<goto>goto <name>pathmatched</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<label><name>pathmatched</name>:</label>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>uri_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>get_top_domain</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>domain</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>outlen</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>first</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>last</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>domain</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>domain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>last</name> <operator>=</operator> <call><name>memrchr</name><argument_list>(<argument><expr><name>domain</name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>last</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>first</name> <operator>=</operator> <call><name>memrchr</name><argument_list>(<argument><expr><name>domain</name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>, <argument><expr><operator>(</operator><name>last</name> <operator>-</operator> <name>domain</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>first</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>len</name> <operator>-=</operator> <operator>(</operator><operator>++</operator><name>first</name> <operator>-</operator> <name>domain</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>outlen</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>outlen</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><ternary><condition><expr><name>first</name></expr>?</condition><then> <expr><name>first</name></expr></then><else>: <expr><name>domain</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type> <name>cookie_hash_domain</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>domain</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>end</name> <init>= <expr><name>domain</name> <operator>+</operator> <name>len</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>h</name> <init>= <expr><literal type="number">5381</literal></expr></init></decl>;</decl_stmt>

<while>while<condition>(<expr><name>domain</name> <operator>&lt;</operator> <name>end</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>h</name> <operator>+=</operator> <name>h</name> <operator>&lt;&lt;</operator> <literal type="number">5</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>h</name> <operator>^=</operator> <call><name>Curl_raw_toupper</name><argument_list>(<argument><expr><operator>*</operator><name>domain</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><operator>(</operator><name>h</name> <operator>%</operator> <name>COOKIE_HASH_SIZE</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type> <name>cookiehash</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>domain</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>top</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>domain</name> <operator>||</operator> <call><name>isip</name><argument_list>(<argument><expr><name>domain</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>top</name> <operator>=</operator> <call><name>get_top_domain</name><argument_list>(<argument><expr><name>domain</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>cookie_hash_domain</name><argument_list>(<argument><expr><name>top</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>sanitize_cookie_path</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cookie_path</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>new_path</name> <init>= <expr><call><name>strdup</name><argument_list>(<argument><expr><name>cookie_path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>new_path</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>new_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>new_path</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\"'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>new_path</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>new_path</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>len</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>new_path</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\"'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>new_path</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>new_path</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'/'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>new_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>new_path</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>new_path</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>len</name> <operator>&amp;&amp;</operator> <name><name>new_path</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>new_path</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>new_path</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>Curl_cookie_loadfiles</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>curl_slist</name></name> <modifier>*</modifier></type><name>list</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>change</name><operator>.</operator><name>cookielist</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>list</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>Curl_share_lock</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>CURL_LOCK_DATA_COOKIE</name></expr></argument>, <argument><expr><name>CURL_LOCK_ACCESS_SINGLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while<condition>(<expr><name>list</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>CookieInfo</name></name> <modifier>*</modifier></type><name>newcookies</name> <init>= <expr><call><name>Curl_cookie_init</name><argument_list>(<argument><expr><name>data</name></expr></argument>,

<argument><expr><name><name>list</name><operator>-&gt;</operator><name>data</name></name></expr></argument>,

<argument><expr><name><name>data</name><operator>-&gt;</operator><name>cookies</name></name></expr></argument>,

<argument><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>cookiesession</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>newcookies</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"ignoring failed cookie_init for %s\n"</literal></expr></argument>, <argument><expr><name><name>list</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>cookies</name></name> <operator>=</operator> <name>newcookies</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>list</name> <operator>=</operator> <name><name>list</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>curl_slist_free_all</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>change</name><operator>.</operator><name>cookielist</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>change</name><operator>.</operator><name>cookielist</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>Curl_share_unlock</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>CURL_LOCK_DATA_COOKIE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>strstore</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>newstr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>*</operator><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>str</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>newstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>remove_expired</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>CookieInfo</name></name> <modifier>*</modifier></type><name>cookies</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>Cookie</name></name> <modifier>*</modifier></type><name>co</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>nx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>curl_off_t</name></type> <name>now</name> <init>= <expr><operator>(</operator><name>curl_off_t</name><operator>)</operator><call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>COOKIE_HASH_SIZE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>Cookie</name></name> <modifier>*</modifier></type><name>pv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>co</name> <operator>=</operator> <name><name>cookies</name><operator>-&gt;</operator><name>cookies</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<while>while<condition>(<expr><name>co</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>nx</name> <operator>=</operator> <name><name>co</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>co</name><operator>-&gt;</operator><name>expires</name></name> <operator>&amp;&amp;</operator> <name><name>co</name><operator>-&gt;</operator><name>expires</name></name> <operator>&lt;</operator> <name>now</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>pv</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>cookies</name><operator>-&gt;</operator><name>cookies</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>co</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name><name>pv</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>co</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>cookies</name><operator>-&gt;</operator><name>numcookies</name></name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>freecookie</name><argument_list>(<argument><expr><name>co</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>pv</name> <operator>=</operator> <name>co</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>co</name> <operator>=</operator> <name>nx</name></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>bad_domain</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>domain</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>!</operator><call><name>strchr</name><argument_list>(<argument><expr><name>domain</name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcasecompare</name><argument_list>(<argument><expr><name>domain</name></expr></argument>, <argument><expr><literal type="string">"localhost"</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name><name>struct</name> <name>Cookie</name></name> <modifier>*</modifier></type>

<name>Curl_cookie_add</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>CookieInfo</name></name> <modifier>*</modifier></type><name>c</name></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>httpheader</name></decl></parameter>, 

<parameter><decl><type><name>bool</name></type> <name>noexpire</name></decl></parameter>, 

<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>lineptr</name></decl></parameter>, 

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>domain</name></decl></parameter>, 

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, 

<parameter><decl><type><name>bool</name></type> <name>secure</name></decl></parameter>)</parameter_list> 

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>Cookie</name></name> <modifier>*</modifier></type><name>clist</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>Cookie</name></name> <modifier>*</modifier></type><name>co</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>Cookie</name></name> <modifier>*</modifier></type><name>lastc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>time_t</name></type> <name>now</name> <init>= <expr><call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>replace_old</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>badcookie</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>size_t</name></type> <name>myhash</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_VERBOSE_STRINGS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>data</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>co</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>Cookie</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>co</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt> 

<if_stmt><if>if<condition>(<expr><name>httpheader</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>name</name><index>[<expr><name>MAX_NAME</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>what</name><index>[<expr><name>MAX_NAME</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>semiptr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>linelength</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>lineptr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>linelength</name> <operator>&gt;</operator> <name>MAX_COOKIE_LINE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>co</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>semiptr</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>lineptr</name></expr></argument>, <argument><expr><literal type="char">';'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<while>while<condition>(<expr><operator>*</operator><name>lineptr</name> <operator>&amp;&amp;</operator> <call><name>ISBLANK</name><argument_list>(<argument><expr><operator>*</operator><name>lineptr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>lineptr</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>lineptr</name></expr>;</expr_stmt>

<do>do <block>{<block_content>

<expr_stmt><expr><name><name>name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>what</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<if_stmt><if>if<condition>(<expr><literal type="number">1</literal> <operator>&lt;=</operator> <call><name>sscanf</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"%"</literal> <name>MAX_NAME_TXT</name> <literal type="string">"[^;\r\n=] =%"</literal>

<name>MAX_NAME_TXT</name> <literal type="string">"[^;\r\n]"</literal></expr></argument>,

<argument><expr><name>name</name></expr></argument>, <argument><expr><name>what</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>whatptr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>done</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>sep</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>what</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>nlen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>endofn</name> <init>= <expr><operator>&amp;</operator><name><name>ptr</name><index>[ <expr><name>nlen</name></expr> ]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>nlen</name> <operator>&gt;=</operator> <operator>(</operator><name>MAX_NAME</name><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>||</operator> <name>len</name> <operator>&gt;=</operator> <operator>(</operator><name>MAX_NAME</name><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>||</operator>

<operator>(</operator><operator>(</operator><name>nlen</name> <operator>+</operator> <name>len</name><operator>)</operator> <operator>&gt;</operator> <name>MAX_NAME</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>freecookie</name><argument_list>(<argument><expr><name>co</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"oversized cookie dropped, name/val %zu + %zu bytes\n"</literal></expr></argument>,

<argument><expr><name>nlen</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>sep</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><operator>*</operator><name>endofn</name> <operator>==</operator> <literal type="char">'='</literal><operator>)</operator></expr>?</condition><then><expr><name>TRUE</name></expr></then><else>:<expr><name>FALSE</name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>nlen</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>endofn</name><operator>--</operator></expr>;</expr_stmt> 

<if_stmt><if>if<condition>(<expr><call><name>ISBLANK</name><argument_list>(<argument><expr><operator>*</operator><name>endofn</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<while>while<condition>(<expr><operator>*</operator><name>endofn</name> <operator>&amp;&amp;</operator> <call><name>ISBLANK</name><argument_list>(<argument><expr><operator>*</operator><name>endofn</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>nlen</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>endofn</name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>nlen</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name><name>name</name><index>[<expr><name>nlen</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<while>while<condition>(<expr><name>len</name> <operator>&amp;&amp;</operator> <call><name>ISBLANK</name><argument_list>(<argument><expr><name><name>what</name><index>[<expr><name>len</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>what</name><index>[<expr><name>len</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>whatptr</name> <operator>=</operator> <name>what</name></expr>;</expr_stmt>

<while>while<condition>(<expr><operator>*</operator><name>whatptr</name> <operator>&amp;&amp;</operator> <call><name>ISBLANK</name><argument_list>(<argument><expr><operator>*</operator><name>whatptr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>whatptr</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if<condition>(<expr><name>nlen</name> <operator>&gt;</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <name><name>name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'_'</literal> <operator>&amp;&amp;</operator> <name><name>name</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'_'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><literal type="string">"__Secure-"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>co</name><operator>-&gt;</operator><name>prefix</name></name> <operator>|=</operator> <name>COOKIE_PREFIX__SECURE</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><literal type="string">"__Host-"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>co</name><operator>-&gt;</operator><name>prefix</name></name> <operator>|=</operator> <name>COOKIE_PREFIX__HOST</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>co</name><operator>-&gt;</operator><name>name</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>sep</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>badcookie</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>co</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>co</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>whatptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>done</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>co</name><operator>-&gt;</operator><name>name</name></name> <operator>||</operator> <operator>!</operator><name><name>co</name><operator>-&gt;</operator><name>value</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>badcookie</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><operator>!</operator><name>len</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>done</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>strcasecompare</name><argument_list>(<argument><expr><literal type="string">"secure"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>secure</name> <operator>||</operator> <operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>running</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>co</name><operator>-&gt;</operator><name>secure</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>badcookie</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><call><name>strcasecompare</name><argument_list>(<argument><expr><literal type="string">"httponly"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>co</name><operator>-&gt;</operator><name>httponly</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>(<expr><name>sep</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>done</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>done</name></expr>)</condition><block type="pseudo"><block_content>

<empty_stmt>;</empty_stmt></block_content></block></if>

<if type="elseif">else if<condition>(<expr><call><name>strcasecompare</name><argument_list>(<argument><expr><literal type="string">"path"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>strstore</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>co</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name>whatptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>co</name><operator>-&gt;</operator><name>path</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>badcookie</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt> 

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>co</name><operator>-&gt;</operator><name>spath</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>co</name><operator>-&gt;</operator><name>spath</name></name> <operator>=</operator> <call><name>sanitize_cookie_path</name><argument_list>(<argument><expr><name><name>co</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>co</name><operator>-&gt;</operator><name>spath</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>badcookie</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt> 

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><call><name>strcasecompare</name><argument_list>(<argument><expr><literal type="string">"domain"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>is_ip</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><literal type="char">'.'</literal> <operator>==</operator> <name><name>whatptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>whatptr</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>USE_LIBPSL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><call><name>bad_domain</name><argument_list>(<argument><expr><name>whatptr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>domain</name> <operator>=</operator> <literal type="string">":"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>is_ip</name> <operator>=</operator> <call><name>isip</name><argument_list>(<argument><expr><ternary><condition><expr><name>domain</name></expr> ?</condition><then> <expr><name>domain</name></expr> </then><else>: <expr><name>whatptr</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>domain</name>

<operator>||</operator> <operator>(</operator><name>is_ip</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>whatptr</name></expr></argument>, <argument><expr><name>domain</name></expr></argument>)</argument_list></call><operator>)</operator>

<operator>||</operator> <operator>(</operator><operator>!</operator><name>is_ip</name> <operator>&amp;&amp;</operator> <call><name>tailmatch</name><argument_list>(<argument><expr><name>whatptr</name></expr></argument>, <argument><expr><name>domain</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>strstore</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>co</name><operator>-&gt;</operator><name>domain</name></name></expr></argument>, <argument><expr><name>whatptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>co</name><operator>-&gt;</operator><name>domain</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>badcookie</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>is_ip</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>co</name><operator>-&gt;</operator><name>tailmatch</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt> 

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>badcookie</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"skipped cookie with bad tailmatch domain: %s\n"</literal></expr></argument>,

<argument><expr><name>whatptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><call><name>strcasecompare</name><argument_list>(<argument><expr><literal type="string">"version"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>strstore</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>co</name><operator>-&gt;</operator><name>version</name></name></expr></argument>, <argument><expr><name>whatptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>co</name><operator>-&gt;</operator><name>version</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>badcookie</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><call><name>strcasecompare</name><argument_list>(<argument><expr><literal type="string">"max-age"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>strstore</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>co</name><operator>-&gt;</operator><name>maxage</name></name></expr></argument>, <argument><expr><name>whatptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>co</name><operator>-&gt;</operator><name>maxage</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>badcookie</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><call><name>strcasecompare</name><argument_list>(<argument><expr><literal type="string">"expires"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>strstore</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>co</name><operator>-&gt;</operator><name>expirestr</name></name></expr></argument>, <argument><expr><name>whatptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>co</name><operator>-&gt;</operator><name>expirestr</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>badcookie</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>semiptr</name> <operator>||</operator> <operator>!</operator><operator>*</operator><name>semiptr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>semiptr</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>semiptr</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<while>while<condition>(<expr><operator>*</operator><name>ptr</name> <operator>&amp;&amp;</operator> <call><name>ISBLANK</name><argument_list>(<argument><expr><operator>*</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name>semiptr</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="char">';'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>semiptr</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>ptr</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>semiptr</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block> while<condition>(<expr><name>semiptr</name></expr>)</condition>;</do>

<if_stmt><if>if<condition>(<expr><name><name>co</name><operator>-&gt;</operator><name>maxage</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>CURLofft</name></type> <name>offt</name></decl>;</decl_stmt>

<expr_stmt><expr><name>offt</name> <operator>=</operator> <call><name>curlx_strtoofft</name><argument_list>(<argument><expr><ternary><condition><expr><operator>(</operator><operator>*</operator><name><name>co</name><operator>-&gt;</operator><name>maxage</name></name> <operator>==</operator> <literal type="char">'\"'</literal><operator>)</operator></expr>?</condition><then>

<expr><operator>&amp;</operator><name><name>co</name><operator>-&gt;</operator><name>maxage</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></then><else>:<expr><operator>&amp;</operator><name><name>co</name><operator>-&gt;</operator><name>maxage</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></else></ternary></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>co</name><operator>-&gt;</operator><name>expires</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>offt</name> <operator>==</operator> <name>CURL_OFFT_FLOW</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>co</name><operator>-&gt;</operator><name>expires</name></name> <operator>=</operator> <name>CURL_OFF_T_MAX</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>(<expr><operator>!</operator><name>offt</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>co</name><operator>-&gt;</operator><name>expires</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>co</name><operator>-&gt;</operator><name>expires</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>(<expr><name>CURL_OFF_T_MAX</name> <operator>-</operator> <name>now</name> <operator>&lt;</operator> <name><name>co</name><operator>-&gt;</operator><name>expires</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>co</name><operator>-&gt;</operator><name>expires</name></name> <operator>=</operator> <name>CURL_OFF_T_MAX</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>co</name><operator>-&gt;</operator><name>expires</name></name> <operator>+=</operator> <name>now</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name><name>co</name><operator>-&gt;</operator><name>expirestr</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>co</name><operator>-&gt;</operator><name>expires</name></name> <operator>=</operator> <call><name>Curl_getdate_capped</name><argument_list>(<argument><expr><name><name>co</name><operator>-&gt;</operator><name>expirestr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>co</name><operator>-&gt;</operator><name>expires</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>co</name><operator>-&gt;</operator><name>expires</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>(<expr><name><name>co</name><operator>-&gt;</operator><name>expires</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>co</name><operator>-&gt;</operator><name>expires</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>badcookie</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>co</name><operator>-&gt;</operator><name>domain</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>domain</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>co</name><operator>-&gt;</operator><name>domain</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>domain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>co</name><operator>-&gt;</operator><name>domain</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>badcookie</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>badcookie</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>co</name><operator>-&gt;</operator><name>path</name></name> <operator>&amp;&amp;</operator> <name>path</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>queryp</name> <init>= <expr><call><name>strchr</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="char">'?'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>endslash</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>queryp</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>endslash</name> <operator>=</operator> <call><name>strrchr</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>endslash</name> <operator>=</operator> <call><name>memrchr</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>, <argument><expr><operator>(</operator><name>queryp</name> <operator>-</operator> <name>path</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name>endslash</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>pathlen</name> <init>= <expr><operator>(</operator><name>endslash</name><operator>-</operator><name>path</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt> 

<expr_stmt><expr><name><name>co</name><operator>-&gt;</operator><name>path</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>pathlen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if<condition>(<expr><name><name>co</name><operator>-&gt;</operator><name>path</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>co</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>pathlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>co</name><operator>-&gt;</operator><name>path</name><index>[<expr><name>pathlen</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>co</name><operator>-&gt;</operator><name>spath</name></name> <operator>=</operator> <call><name>sanitize_cookie_path</name><argument_list>(<argument><expr><name><name>co</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>co</name><operator>-&gt;</operator><name>spath</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>badcookie</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt> 

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>badcookie</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>badcookie</name> <operator>||</operator> <operator>!</operator><name><name>co</name><operator>-&gt;</operator><name>name</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>freecookie</name><argument_list>(<argument><expr><name>co</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>firstptr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tok_buf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>fields</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>lineptr</name></expr></argument>, <argument><expr><literal type="string">"#HttpOnly_"</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>lineptr</name> <operator>+=</operator> <literal type="number">10</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>co</name><operator>-&gt;</operator><name>httponly</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>lineptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><literal type="char">'#'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>co</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>lineptr</name></expr></argument>, <argument><expr><literal type="char">'\r'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>ptr</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>lineptr</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>ptr</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>firstptr</name> <operator>=</operator> <call><name>strtok_r</name><argument_list>(<argument><expr><name>lineptr</name></expr></argument>, <argument><expr><literal type="string">"\t"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>tok_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<for>for<control>(<init><expr><name>ptr</name> <operator>=</operator> <name>firstptr</name></expr><operator>,</operator> <expr><name>fields</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ptr</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>badcookie</name></expr>;</condition>

<incr><expr><name>ptr</name> <operator>=</operator> <call><name>strtok_r</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"\t"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>tok_buf</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><name>fields</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<switch>switch<condition>(<expr><name>fields</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case>

<if_stmt><if>if<condition>(<expr><name><name>ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><literal type="char">'.'</literal></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>co</name><operator>-&gt;</operator><name>domain</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>co</name><operator>-&gt;</operator><name>domain</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>badcookie</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<expr_stmt><expr><name><name>co</name><operator>-&gt;</operator><name>tailmatch</name></name> <operator>=</operator> <ternary><condition><expr><call><name>strcasecompare</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"TRUE"</literal></expr></argument>)</argument_list></call></expr>?</condition><then><expr><name>TRUE</name></expr></then><else>:<expr><name>FALSE</name></expr></else></ternary></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case>

<if_stmt><if>if<condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"TRUE"</literal></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"FALSE"</literal></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>co</name><operator>-&gt;</operator><name>path</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>co</name><operator>-&gt;</operator><name>path</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>badcookie</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name><name>co</name><operator>-&gt;</operator><name>spath</name></name> <operator>=</operator> <call><name>sanitize_cookie_path</name><argument_list>(<argument><expr><name><name>co</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>co</name><operator>-&gt;</operator><name>spath</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>badcookie</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>co</name><operator>-&gt;</operator><name>path</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>co</name><operator>-&gt;</operator><name>path</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>badcookie</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>co</name><operator>-&gt;</operator><name>spath</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>co</name><operator>-&gt;</operator><name>spath</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>badcookie</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>fields</name><operator>++</operator></expr>;</expr_stmt> 

<case>case <expr><literal type="number">3</literal></expr>:</case>

<expr_stmt><expr><name><name>co</name><operator>-&gt;</operator><name>secure</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>strcasecompare</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"TRUE"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>secure</name> <operator>||</operator> <name><name>c</name><operator>-&gt;</operator><name>running</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>co</name><operator>-&gt;</operator><name>secure</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>badcookie</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="number">4</literal></expr>:</case>

<if_stmt><if>if<condition>(<expr><call><name>curlx_strtoofft</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>co</name><operator>-&gt;</operator><name>expires</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>badcookie</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="number">5</literal></expr>:</case>

<expr_stmt><expr><name><name>co</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>co</name><operator>-&gt;</operator><name>name</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>badcookie</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>strncasecompare</name><argument_list>(<argument><expr><literal type="string">"__Secure-"</literal></expr></argument>, <argument><expr><name><name>co</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>co</name><operator>-&gt;</operator><name>prefix</name></name> <operator>|=</operator> <name>COOKIE_PREFIX__SECURE</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>(<expr><call><name>strncasecompare</name><argument_list>(<argument><expr><literal type="string">"__Host-"</literal></expr></argument>, <argument><expr><name><name>co</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>co</name><operator>-&gt;</operator><name>prefix</name></name> <operator>|=</operator> <name>COOKIE_PREFIX__HOST</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><literal type="number">6</literal></expr>:</case>

<expr_stmt><expr><name><name>co</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>co</name><operator>-&gt;</operator><name>value</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>badcookie</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></for>

<if_stmt><if>if<condition>(<expr><literal type="number">6</literal> <operator>==</operator> <name>fields</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>co</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>co</name><operator>-&gt;</operator><name>value</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>badcookie</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>fields</name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>badcookie</name> <operator>&amp;&amp;</operator> <operator>(</operator><literal type="number">7</literal> <operator>!=</operator> <name>fields</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>badcookie</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>badcookie</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>freecookie</name><argument_list>(<argument><expr><name>co</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>co</name><operator>-&gt;</operator><name>prefix</name></name> <operator>&amp;</operator> <name>COOKIE_PREFIX__SECURE</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>co</name><operator>-&gt;</operator><name>secure</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>freecookie</name><argument_list>(<argument><expr><name>co</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>co</name><operator>-&gt;</operator><name>prefix</name></name> <operator>&amp;</operator> <name>COOKIE_PREFIX__HOST</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>co</name><operator>-&gt;</operator><name>secure</name></name> <operator>&amp;&amp;</operator> <name><name>co</name><operator>-&gt;</operator><name>path</name></name> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>co</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>co</name><operator>-&gt;</operator><name>tailmatch</name></name></expr>)</condition><block type="pseudo"><block_content>

<empty_stmt>;</empty_stmt></block_content></block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>freecookie</name><argument_list>(<argument><expr><name>co</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>running</name></name> <operator>&amp;&amp;</operator> 

<name><name>c</name><operator>-&gt;</operator><name>newsession</name></name> <operator>&amp;&amp;</operator> 

<operator>!</operator><name><name>co</name><operator>-&gt;</operator><name>expires</name></name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><call><name>freecookie</name><argument_list>(<argument><expr><name>co</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>co</name><operator>-&gt;</operator><name>livecookie</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>running</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>co</name><operator>-&gt;</operator><name>creationtime</name></name> <operator>=</operator> <operator>++</operator><name><name>c</name><operator>-&gt;</operator><name>lastct</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>noexpire</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>remove_expired</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_LIBPSL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name>domain</name> <operator>&amp;&amp;</operator> <name><name>co</name><operator>-&gt;</operator><name>domain</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>isip</name><argument_list>(<argument><expr><name><name>co</name><operator>-&gt;</operator><name>domain</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>psl_ctx_t</name> <modifier>*</modifier></type><name>psl</name> <init>= <expr><call><name>Curl_psl_use</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>acceptable</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>psl</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>acceptable</name> <operator>=</operator> <call><name>psl_is_cookie_domain_acceptable</name><argument_list>(<argument><expr><name>psl</name></expr></argument>, <argument><expr><name>domain</name></expr></argument>, <argument><expr><name><name>co</name><operator>-&gt;</operator><name>domain</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_psl_release</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>acceptable</name> <operator>=</operator> <operator>!</operator><call><name>bad_domain</name><argument_list>(<argument><expr><name>domain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>acceptable</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"cookie '%s' dropped, domain '%s' must not "</literal>

<literal type="string">"set cookies for '%s'\n"</literal></expr></argument>, <argument><expr><name><name>co</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>domain</name></expr></argument>, <argument><expr><name><name>co</name><operator>-&gt;</operator><name>domain</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>freecookie</name><argument_list>(<argument><expr><name>co</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>myhash</name> <operator>=</operator> <call><name>cookiehash</name><argument_list>(<argument><expr><name><name>co</name><operator>-&gt;</operator><name>domain</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>clist</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>cookies</name><index>[<expr><name>myhash</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>replace_old</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<while>while<condition>(<expr><name>clist</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>strcasecompare</name><argument_list>(<argument><expr><name><name>clist</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>co</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>clist</name><operator>-&gt;</operator><name>domain</name></name> <operator>&amp;&amp;</operator> <name><name>co</name><operator>-&gt;</operator><name>domain</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>strcasecompare</name><argument_list>(<argument><expr><name><name>clist</name><operator>-&gt;</operator><name>domain</name></name></expr></argument>, <argument><expr><name><name>co</name><operator>-&gt;</operator><name>domain</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>clist</name><operator>-&gt;</operator><name>tailmatch</name></name> <operator>==</operator> <name><name>co</name><operator>-&gt;</operator><name>tailmatch</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>replace_old</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><operator>!</operator><name><name>clist</name><operator>-&gt;</operator><name>domain</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>co</name><operator>-&gt;</operator><name>domain</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>replace_old</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>replace_old</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>clist</name><operator>-&gt;</operator><name>spath</name></name> <operator>&amp;&amp;</operator> <name><name>co</name><operator>-&gt;</operator><name>spath</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>clist</name><operator>-&gt;</operator><name>secure</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>co</name><operator>-&gt;</operator><name>secure</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>secure</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>cllen</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sep</name></decl>;</decl_stmt>

<expr_stmt><expr><name>sep</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name><name>clist</name><operator>-&gt;</operator><name>spath</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>sep</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>cllen</name> <operator>=</operator> <name>sep</name> <operator>-</operator> <name><name>clist</name><operator>-&gt;</operator><name>spath</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>cllen</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>clist</name><operator>-&gt;</operator><name>spath</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>strncasecompare</name><argument_list>(<argument><expr><name><name>clist</name><operator>-&gt;</operator><name>spath</name></name></expr></argument>, <argument><expr><name><name>co</name><operator>-&gt;</operator><name>spath</name></name></expr></argument>, <argument><expr><name>cllen</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>freecookie</name><argument_list>(<argument><expr><name>co</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><call><name>strcasecompare</name><argument_list>(<argument><expr><name><name>clist</name><operator>-&gt;</operator><name>spath</name></name></expr></argument>, <argument><expr><name><name>co</name><operator>-&gt;</operator><name>spath</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>replace_old</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>replace_old</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><operator>!</operator><name><name>clist</name><operator>-&gt;</operator><name>spath</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>co</name><operator>-&gt;</operator><name>spath</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>replace_old</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>replace_old</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>replace_old</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>co</name><operator>-&gt;</operator><name>livecookie</name></name> <operator>&amp;&amp;</operator> <name><name>clist</name><operator>-&gt;</operator><name>livecookie</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>freecookie</name><argument_list>(<argument><expr><name>co</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>replace_old</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>co</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>clist</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>co</name><operator>-&gt;</operator><name>creationtime</name></name> <operator>=</operator> <name><name>clist</name><operator>-&gt;</operator><name>creationtime</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>clist</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>clist</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>clist</name><operator>-&gt;</operator><name>domain</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>clist</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>clist</name><operator>-&gt;</operator><name>spath</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>clist</name><operator>-&gt;</operator><name>expirestr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>clist</name><operator>-&gt;</operator><name>version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>clist</name><operator>-&gt;</operator><name>maxage</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>clist</name> <operator>=</operator> <operator>*</operator><name>co</name></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>co</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>co</name> <operator>=</operator> <name>clist</name></expr>;</expr_stmt> 

<do>do <block>{<block_content>

<expr_stmt><expr><name>lastc</name> <operator>=</operator> <name>clist</name></expr>;</expr_stmt>

<expr_stmt><expr><name>clist</name> <operator>=</operator> <name><name>clist</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

</block_content>}</block> while<condition>(<expr><name>clist</name></expr>)</condition>;</do>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>lastc</name> <operator>=</operator> <name>clist</name></expr>;</expr_stmt>

<expr_stmt><expr><name>clist</name> <operator>=</operator> <name><name>clist</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if<condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>running</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"%s cookie %s=\"%s\" for domain %s, path %s, "</literal>

<literal type="string">"expire %"</literal> <name>CURL_FORMAT_CURL_OFF_T</name> <literal type="string">"\n"</literal></expr></argument>,

<argument><expr><ternary><condition><expr><name>replace_old</name></expr>?</condition><then><expr><literal type="string">"Replaced"</literal></expr></then><else>:<expr><literal type="string">"Added"</literal></expr></else></ternary></expr></argument>, <argument><expr><name><name>co</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>co</name><operator>-&gt;</operator><name>value</name></name></expr></argument>,

<argument><expr><name><name>co</name><operator>-&gt;</operator><name>domain</name></name></expr></argument>, <argument><expr><name><name>co</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name><name>co</name><operator>-&gt;</operator><name>expires</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>replace_old</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>lastc</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>lastc</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>co</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>cookies</name><index>[<expr><name>myhash</name></expr>]</index></name> <operator>=</operator> <name>co</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>numcookies</name></name><operator>++</operator></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<return>return <expr><name>co</name></expr>;</return>

</block_content>}</block></function>

<function><type><name><name>struct</name> <name>CookieInfo</name></name> <modifier>*</modifier></type><name>Curl_cookie_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>CookieInfo</name></name> <modifier>*</modifier></type><name>inc</name></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>newsession</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>CookieInfo</name></name> <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>fromfile</name> <init>= <expr><name>TRUE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>line</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>NULL</name> <operator>==</operator> <name>inc</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>CookieInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>c</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>filename</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><ternary><condition><expr><name>file</name></expr>?</condition><then><expr><name>file</name></expr></then><else>:<expr><literal type="string">"none"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>filename</name></name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt> 

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <name>inc</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>running</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> 

<if_stmt><if>if<condition>(<expr><name>file</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><literal type="string">"-"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>fp</name> <operator>=</operator> <name>stdin</name></expr>;</expr_stmt>

<expr_stmt><expr><name>fromfile</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name>file</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>*</operator><name>file</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>fp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>fp</name> <operator>=</operator> <ternary><condition><expr><name>file</name></expr>?</condition><then><expr><call><name>fopen</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>FOPEN_READTEXT</name></expr></argument>)</argument_list></call></expr></then><else>:<expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>newsession</name></name> <operator>=</operator> <name>newsession</name></expr>;</expr_stmt> 

<if_stmt><if>if<condition>(<expr><name>fp</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>lineptr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>headerline</name></decl>;</decl_stmt>

<expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>MAX_COOKIE_LINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>line</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<while>while<condition>(<expr><call><name>Curl_get_line</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>MAX_COOKIE_LINE</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>checkprefix</name><argument_list>(<argument><expr><literal type="string">"Set-Cookie:"</literal></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>lineptr</name> <operator>=</operator> <operator>&amp;</operator><name><name>line</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>headerline</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>lineptr</name> <operator>=</operator> <name>line</name></expr>;</expr_stmt>

<expr_stmt><expr><name>headerline</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<while>while<condition>(<expr><operator>*</operator><name>lineptr</name> <operator>&amp;&amp;</operator> <call><name>ISBLANK</name><argument_list>(<argument><expr><operator>*</operator><name>lineptr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>lineptr</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><call><name>Curl_cookie_add</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>headerline</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>lineptr</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>remove_expired</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if<condition>(<expr><name>fromfile</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>running</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt> 

<if_stmt><if>if<condition>(<expr><name>data</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>cookie_engine</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>c</name></expr>;</return>

<label><name>fail</name>:</label>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>inc</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>Curl_cookie_cleanup</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>fromfile</name> <operator>&amp;&amp;</operator> <name>fp</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return> 

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cookie_sort</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p2</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>Cookie</name></name> <modifier>*</modifier></type><name>c1</name> <init>= <expr><operator>*</operator><operator>(</operator>struct <name>Cookie</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>p1</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>Cookie</name></name> <modifier>*</modifier></type><name>c2</name> <init>= <expr><operator>*</operator><operator>(</operator>struct <name>Cookie</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>p2</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>l1</name></decl>, <decl><type ref="prev"/><name>l2</name></decl>;</decl_stmt>

<expr_stmt><expr><name>l1</name> <operator>=</operator> <ternary><condition><expr><name><name>c1</name><operator>-&gt;</operator><name>path</name></name></expr> ?</condition><then> <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>c1</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>l2</name> <operator>=</operator> <ternary><condition><expr><name><name>c2</name><operator>-&gt;</operator><name>path</name></name></expr> ?</condition><then> <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>c2</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>l1</name> <operator>!=</operator> <name>l2</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><ternary><condition><expr><operator>(</operator><name>l2</name> <operator>&gt;</operator> <name>l1</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr> ;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>l1</name> <operator>=</operator> <ternary><condition><expr><name><name>c1</name><operator>-&gt;</operator><name>domain</name></name></expr> ?</condition><then> <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>c1</name><operator>-&gt;</operator><name>domain</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>l2</name> <operator>=</operator> <ternary><condition><expr><name><name>c2</name><operator>-&gt;</operator><name>domain</name></name></expr> ?</condition><then> <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>c2</name><operator>-&gt;</operator><name>domain</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>l1</name> <operator>!=</operator> <name>l2</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><ternary><condition><expr><operator>(</operator><name>l2</name> <operator>&gt;</operator> <name>l1</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr> ;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>l1</name> <operator>=</operator> <ternary><condition><expr><name><name>c1</name><operator>-&gt;</operator><name>name</name></name></expr> ?</condition><then> <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>c1</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>l2</name> <operator>=</operator> <ternary><condition><expr><name><name>c2</name><operator>-&gt;</operator><name>name</name></name></expr> ?</condition><then> <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>c2</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>l1</name> <operator>!=</operator> <name>l2</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><ternary><condition><expr><operator>(</operator><name>l2</name> <operator>&gt;</operator> <name>l1</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><ternary><condition><expr><operator>(</operator><name><name>c2</name><operator>-&gt;</operator><name>creationtime</name></name> <operator>&gt;</operator> <name><name>c1</name><operator>-&gt;</operator><name>creationtime</name></name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cookie_sort_ct</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p2</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>Cookie</name></name> <modifier>*</modifier></type><name>c1</name> <init>= <expr><operator>*</operator><operator>(</operator>struct <name>Cookie</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>p1</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>Cookie</name></name> <modifier>*</modifier></type><name>c2</name> <init>= <expr><operator>*</operator><operator>(</operator>struct <name>Cookie</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>p2</name></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><operator>(</operator><name><name>c2</name><operator>-&gt;</operator><name>creationtime</name></name> <operator>&gt;</operator> <name><name>c1</name><operator>-&gt;</operator><name>creationtime</name></name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLONE</name><parameter_list>(<parameter><type><name>field</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if(src-&gt;field) { d-&gt;field = strdup(src-&gt;field); if(!d-&gt;field) goto fail; } } while(0)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>Cookie</name></name> <modifier>*</modifier></type><name>dup_cookie</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Cookie</name></name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>Cookie</name></name> <modifier>*</modifier></type><name>d</name> <init>= <expr><call><name>calloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>Cookie</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>d</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>CLONE</name><argument_list>(<argument><expr><name>expirestr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CLONE</name><argument_list>(<argument><expr><name>domain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CLONE</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CLONE</name><argument_list>(<argument><expr><name>spath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CLONE</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CLONE</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CLONE</name><argument_list>(<argument><expr><name>maxage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CLONE</name><argument_list>(<argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>expires</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>expires</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>tailmatch</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>tailmatch</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>secure</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>secure</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>livecookie</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>livecookie</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>httponly</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>httponly</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>creationtime</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>creationtime</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>d</name></expr>;</return>

<label><name>fail</name>:</label>

<expr_stmt><expr><call><name>freecookie</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name><name>struct</name> <name>Cookie</name></name> <modifier>*</modifier></type><name>Curl_cookie_getlist</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>CookieInfo</name></name> <modifier>*</modifier></type><name>c</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>host</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>secure</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>Cookie</name></name> <modifier>*</modifier></type><name>newco</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>Cookie</name></name> <modifier>*</modifier></type><name>co</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>Cookie</name></name> <modifier>*</modifier></type><name>mainco</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>matches</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>is_ip</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>myhash</name> <init>= <expr><call><name>cookiehash</name><argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>c</name> <operator>||</operator> <operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>cookies</name><index>[<expr><name>myhash</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><call><name>remove_expired</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>is_ip</name> <operator>=</operator> <call><name>isip</name><argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>co</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>cookies</name><index>[<expr><name>myhash</name></expr>]</index></name></expr>;</expr_stmt>

<while>while<condition>(<expr><name>co</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><ternary><condition><expr><name><name>co</name><operator>-&gt;</operator><name>secure</name></name></expr>?</condition><then><expr><name>secure</name></expr></then><else>:<expr><name>TRUE</name></expr></else></ternary></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>co</name><operator>-&gt;</operator><name>domain</name></name> <operator>||</operator>

<operator>(</operator><name><name>co</name><operator>-&gt;</operator><name>tailmatch</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>is_ip</name> <operator>&amp;&amp;</operator> <call><name>tailmatch</name><argument_list>(<argument><expr><name><name>co</name><operator>-&gt;</operator><name>domain</name></name></expr></argument>, <argument><expr><name>host</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator>

<operator>(</operator><operator>(</operator><operator>!</operator><name><name>co</name><operator>-&gt;</operator><name>tailmatch</name></name> <operator>||</operator> <name>is_ip</name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>strcasecompare</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><name><name>co</name><operator>-&gt;</operator><name>domain</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr> )</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>co</name><operator>-&gt;</operator><name>spath</name></name> <operator>||</operator> <call><name>pathmatch</name><argument_list>(<argument><expr><name><name>co</name><operator>-&gt;</operator><name>spath</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><name>newco</name> <operator>=</operator> <call><name>dup_cookie</name><argument_list>(<argument><expr><name>co</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>newco</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>newco</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>mainco</name></expr>;</expr_stmt>

<expr_stmt><expr><name>mainco</name> <operator>=</operator> <name>newco</name></expr>;</expr_stmt>

<expr_stmt><expr><name>matches</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>co</name> <operator>=</operator> <name><name>co</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if<condition>(<expr><name>matches</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>Cookie</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>array</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>array</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>Cookie</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>matches</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>array</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>co</name> <operator>=</operator> <name>mainco</name></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>co</name></expr>;</condition> <incr><expr><name>co</name> <operator>=</operator> <name><name>co</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>array</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>co</name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>qsort</name><argument_list>(<argument><expr><name>array</name></expr></argument>, <argument><expr><name>matches</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>Cookie</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>cookie_sort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mainco</name> <operator>=</operator> <name><name>array</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt> 

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>matches</name><operator>-</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>array</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>next</name> <operator>=</operator> <name><name>array</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>array</name><index>[<expr><name>matches</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>next</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>array</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<return>return <expr><name>mainco</name></expr>;</return> 

<label><name>fail</name>:</label>

<expr_stmt><expr><call><name>Curl_cookie_freelist</name><argument_list>(<argument><expr><name>mainco</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>Curl_cookie_clearall</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>CookieInfo</name></name> <modifier>*</modifier></type><name>cookies</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>cookies</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>COOKIE_HASH_SIZE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>Curl_cookie_freelist</name><argument_list>(<argument><expr><name><name>cookies</name><operator>-&gt;</operator><name>cookies</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cookies</name><operator>-&gt;</operator><name>cookies</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>cookies</name><operator>-&gt;</operator><name>numcookies</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>Curl_cookie_freelist</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Cookie</name></name> <modifier>*</modifier></type><name>co</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>Cookie</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>

<while>while<condition>(<expr><name>co</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>next</name> <operator>=</operator> <name><name>co</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>freecookie</name><argument_list>(<argument><expr><name>co</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>co</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>Curl_cookie_clearsess</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>CookieInfo</name></name> <modifier>*</modifier></type><name>cookies</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>Cookie</name></name> <modifier>*</modifier></type><name>first</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>curr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>next</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>prev</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>cookies</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>COOKIE_HASH_SIZE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>cookies</name><operator>-&gt;</operator><name>cookies</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>first</name> <operator>=</operator> <name>curr</name> <operator>=</operator> <name>prev</name> <operator>=</operator> <name><name>cookies</name><operator>-&gt;</operator><name>cookies</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<for>for<control>(<init>;</init> <condition><expr><name>curr</name></expr>;</condition> <incr><expr><name>curr</name> <operator>=</operator> <name>next</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>next</name> <operator>=</operator> <name><name>curr</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>curr</name><operator>-&gt;</operator><name>expires</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>first</name> <operator>==</operator> <name>curr</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>first</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>prev</name> <operator>==</operator> <name>curr</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>prev</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>prev</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>next</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>freecookie</name><argument_list>(<argument><expr><name>curr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cookies</name><operator>-&gt;</operator><name>numcookies</name></name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>prev</name> <operator>=</operator> <name>curr</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>cookies</name><operator>-&gt;</operator><name>cookies</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>first</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>Curl_cookie_cleanup</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>CookieInfo</name></name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>COOKIE_HASH_SIZE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>Curl_cookie_freelist</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>cookies</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>get_netscape_format</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>Cookie</name></name> <modifier>*</modifier></type><name>co</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>aprintf</name><argument_list>(

<argument><expr><literal type="string">"%s"</literal> 

<literal type="string">"%s%s\t"</literal> 

<literal type="string">"%s\t"</literal> 

<literal type="string">"%s\t"</literal> 

<literal type="string">"%s\t"</literal> 

<literal type="string">"%"</literal> <name>CURL_FORMAT_CURL_OFF_T</name> <literal type="string">"\t"</literal> 

<literal type="string">"%s\t"</literal> 

<literal type="string">"%s"</literal></expr></argument>, 

<argument><expr><ternary><condition><expr><name><name>co</name><operator>-&gt;</operator><name>httponly</name></name></expr>?</condition><then><expr><literal type="string">"#HttpOnly_"</literal></expr></then><else>:<expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,

<argument><expr><ternary><condition><expr><operator>(</operator><name><name>co</name><operator>-&gt;</operator><name>tailmatch</name></name> <operator>&amp;&amp;</operator> <name><name>co</name><operator>-&gt;</operator><name>domain</name></name> <operator>&amp;&amp;</operator> <name><name>co</name><operator>-&gt;</operator><name>domain</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'.'</literal><operator>)</operator></expr>?</condition><then> <expr><literal type="string">"."</literal></expr></then><else>:<expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>co</name><operator>-&gt;</operator><name>domain</name></name></expr>?</condition><then><expr><name><name>co</name><operator>-&gt;</operator><name>domain</name></name></expr></then><else>:<expr><literal type="string">"unknown"</literal></expr></else></ternary></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>co</name><operator>-&gt;</operator><name>tailmatch</name></name></expr>?</condition><then><expr><literal type="string">"TRUE"</literal></expr></then><else>:<expr><literal type="string">"FALSE"</literal></expr></else></ternary></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>co</name><operator>-&gt;</operator><name>path</name></name></expr>?</condition><then><expr><name><name>co</name><operator>-&gt;</operator><name>path</name></name></expr></then><else>:<expr><literal type="string">"/"</literal></expr></else></ternary></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>co</name><operator>-&gt;</operator><name>secure</name></name></expr>?</condition><then><expr><literal type="string">"TRUE"</literal></expr></then><else>:<expr><literal type="string">"FALSE"</literal></expr></else></ternary></expr></argument>,

<argument><expr><name><name>co</name><operator>-&gt;</operator><name>expires</name></name></expr></argument>,

<argument><expr><name><name>co</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>co</name><operator>-&gt;</operator><name>value</name></name></expr>?</condition><then><expr><name><name>co</name><operator>-&gt;</operator><name>value</name></name></expr></then><else>:<expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cookie_output</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>CookieInfo</name></name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>Cookie</name></name> <modifier>*</modifier></type><name>co</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>use_stdout</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tempstore</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>error</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>c</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>remove_expired</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"-"</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>out</name> <operator>=</operator> <name>stdout</name></expr>;</expr_stmt>

<expr_stmt><expr><name>use_stdout</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>randsuffix</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><call><name>Curl_rand_hex</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>randsuffix</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>randsuffix</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">2</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>tempstore</name> <operator>=</operator> <call><name>aprintf</name><argument_list>(<argument><expr><literal type="string">"%s.%s.tmp"</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><name>randsuffix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>tempstore</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>tempstore</name></expr></argument>, <argument><expr><name>FOPEN_WRITETEXT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>out</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><literal type="string">"#Netscape HTTP Cookie File\n"</literal>

<literal type="string">"#https://curl.haxx.se/docs/http-cookies.html\n"</literal>

<literal type="string">"#This file was generated by libcurl! Edit at your own risk.\n\n"</literal></expr></argument>,

<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>numcookies</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>nvalid</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>Cookie</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>array</name></decl>;</decl_stmt>

<expr_stmt><expr><name>array</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>Cookie</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>c</name><operator>-&gt;</operator><name>numcookies</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>array</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>COOKIE_HASH_SIZE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for<control>(<init><expr><name>co</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>cookies</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</init> <condition><expr><name>co</name></expr>;</condition> <incr><expr><name>co</name> <operator>=</operator> <name><name>co</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>co</name><operator>-&gt;</operator><name>domain</name></name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>array</name><index>[<expr><name>nvalid</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>co</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><call><name>qsort</name><argument_list>(<argument><expr><name>array</name></expr></argument>, <argument><expr><name>nvalid</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>Cookie</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>cookie_sort_ct</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nvalid</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>format_ptr</name> <init>= <expr><call><name>get_netscape_format</name><argument_list>(<argument><expr><name><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>format_ptr</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"#\n#Fatal libcurl error\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>array</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>format_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>format_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>array</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>use_stdout</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>out</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>Curl_rename</name><argument_list>(<argument><expr><name>tempstore</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>unlink</name><argument_list>(<argument><expr><name>tempstore</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<goto>goto <name>cleanup</name>;</goto>

<label><name>error</name>:</label>

<expr_stmt><expr><name>error</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<label><name>cleanup</name>:</label>

<if_stmt><if>if<condition>(<expr><name>out</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>use_stdout</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>tempstore</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><ternary><condition><expr><name>error</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>curl_slist</name></name> <modifier>*</modifier></type><name>cookie_list</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>curl_slist</name></name> <modifier>*</modifier></type><name>list</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>curl_slist</name></name> <modifier>*</modifier></type><name>beg</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>Cookie</name></name> <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>line</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>cookies</name></name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator>

<operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>cookies</name><operator>-&gt;</operator><name>numcookies</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>COOKIE_HASH_SIZE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for<control>(<init><expr><name>c</name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>cookies</name><operator>-&gt;</operator><name>cookies</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</init> <condition><expr><name>c</name></expr>;</condition> <incr><expr><name>c</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>domain</name></name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>get_netscape_format</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>line</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>curl_slist_free_all</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>beg</name> <operator>=</operator> <call><name>Curl_slist_append_nodup</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>beg</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>curl_slist_free_all</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>list</name> <operator>=</operator> <name>beg</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<return>return <expr><name>list</name></expr>;</return>

</block_content>}</block></function>

<function><type><name><name>struct</name> <name>curl_slist</name></name> <modifier>*</modifier></type><name>Curl_cookie_list</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>curl_slist</name></name> <modifier>*</modifier></type><name>list</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>Curl_share_lock</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>CURL_LOCK_DATA_COOKIE</name></expr></argument>, <argument><expr><name>CURL_LOCK_ACCESS_SINGLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>list</name> <operator>=</operator> <call><name>cookie_list</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_share_unlock</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>CURL_LOCK_DATA_COOKIE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>list</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>Curl_flush_cookies</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>cleanup</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_COOKIEJAR</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>change</name><operator>.</operator><name>cookielist</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>Curl_cookie_loadfiles</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>Curl_share_lock</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>CURL_LOCK_DATA_COOKIE</name></expr></argument>, <argument><expr><name>CURL_LOCK_ACCESS_SINGLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>cookie_output</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>cookies</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_COOKIEJAR</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"WARNING: failed to save cookies in %s\n"</literal></expr></argument>,

<argument><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_COOKIEJAR</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>cleanup</name> <operator>&amp;&amp;</operator> <name><name>data</name><operator>-&gt;</operator><name>change</name><operator>.</operator><name>cookielist</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>curl_slist_free_all</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>change</name><operator>.</operator><name>cookielist</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>change</name><operator>.</operator><name>cookielist</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>Curl_share_lock</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>CURL_LOCK_DATA_COOKIE</name></expr></argument>, <argument><expr><name>CURL_LOCK_ACCESS_SINGLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name>cleanup</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name><name>data</name><operator>-&gt;</operator><name>share</name></name> <operator>||</operator> <operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>cookies</name></name> <operator>!=</operator> <name><name>data</name><operator>-&gt;</operator><name>share</name><operator>-&gt;</operator><name>cookies</name></name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>Curl_cookie_cleanup</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>cookies</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>cookies</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>Curl_share_unlock</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>CURL_LOCK_DATA_COOKIE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</unit>
