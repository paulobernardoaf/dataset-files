<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\curl-analysis\_cppstats\curl\lib\md4.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_setup.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_CRYPTO_AUTH</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_md4.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"warnless.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_OPENSSL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;openssl/opensslconf.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OPENSSL_VERSION_MAJOR</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>OPENSSL_VERSION_MAJOR</name> <operator>&gt;=</operator> <literal type="number">3</literal><operator>)</operator></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPENSSL_NO_MD4</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_MBEDTLS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mbedtls/config.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mbedtls/version.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive><expr><operator>(</operator><name>MBEDTLS_VERSION_NUMBER</name> <operator>&gt;=</operator> <literal type="number">0x02070000</literal><operator>)</operator></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAS_MBEDTLS_RESULT_CODE_BASED_FUNCTIONS</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_GNUTLS_NETTLE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;nettle/md4.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_memory.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memdebug.h"</cpp:file></cpp:include>

<typedef>typedef <type><name><name>struct</name> <name>md4_ctx</name></name></type> <name>MD4_CTX</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type> <name>MD4_Init</name><parameter_list>(<parameter><decl><type><name>MD4_CTX</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>md4_init</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>MD4_Update</name><parameter_list>(<parameter><decl><type><name>MD4_CTX</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>md4_update</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>MD4_Final</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>result</name></decl></parameter>, <parameter><decl><type><name>MD4_CTX</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>md4_digest</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>MD4_DIGEST_SIZE</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_GNUTLS</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;gcrypt.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_memory.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memdebug.h"</cpp:file></cpp:include>

<typedef>typedef <type><name>gcry_md_hd_t</name></type> <name>MD4_CTX</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type> <name>MD4_Init</name><parameter_list>(<parameter><decl><type><name>MD4_CTX</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>gcry_md_open</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>GCRY_MD_MD4</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>MD4_Update</name><parameter_list>(<parameter><decl><type><name>MD4_CTX</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>gcry_md_write</name><argument_list>(<argument><expr><operator>*</operator><name>ctx</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>MD4_Final</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>result</name></decl></parameter>, <parameter><decl><type><name>MD4_CTX</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><call><name>gcry_md_read</name><argument_list>(<argument><expr><operator>*</operator><name>ctx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MD4_DIGEST_LENGTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gcry_md_close</name><argument_list>(<argument><expr><operator>*</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_OPENSSL</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>OPENSSL_NO_MD4</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;openssl/md4.h&gt;</cpp:file></cpp:include>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>__MAC_OS_X_VERSION_MAX_ALLOWED</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>__MAC_OS_X_VERSION_MAX_ALLOWED</name> <operator>&gt;=</operator> <literal type="number">1040</literal><operator>)</operator><operator>)</operator> <operator>||</operator> <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>__IPHONE_OS_VERSION_MAX_ALLOWED</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>__IPHONE_OS_VERSION_MAX_ALLOWED</name> <operator>&gt;=</operator> <literal type="number">20000</literal><operator>)</operator><operator>)</operator></expr></cpp:elif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;CommonCrypto/CommonDigest.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_memory.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memdebug.h"</cpp:file></cpp:include>

<typedef>typedef <type><name>CC_MD4_CTX</name></type> <name>MD4_CTX</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type> <name>MD4_Init</name><parameter_list>(<parameter><decl><type><name>MD4_CTX</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>CC_MD4_Init</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>MD4_Update</name><parameter_list>(<parameter><decl><type><name>MD4_CTX</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>CC_MD4_Update</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><operator>(</operator><name>CC_LONG</name><operator>)</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>MD4_Final</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>result</name></decl></parameter>, <parameter><decl><type><name>MD4_CTX</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>CC_MD4_Final</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_WIN32_CRYPTO</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;wincrypt.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_memory.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memdebug.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>HCRYPTPROV</name></type> <name>hCryptProv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HCRYPTHASH</name></type> <name>hHash</name></decl>;</decl_stmt>

}</block></struct></type> <name>MD4_CTX</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type> <name>MD4_Init</name><parameter_list>(<parameter><decl><type><name>MD4_CTX</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>hCryptProv</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>hHash</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>CryptAcquireContext</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>hCryptProv</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>PROV_RSA_FULL</name></expr></argument>,

<argument><expr><name>CRYPT_VERIFYCONTEXT</name> <operator>|</operator> <name>CRYPT_SILENT</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>CryptCreateHash</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>hCryptProv</name></name></expr></argument>, <argument><expr><name>CALG_MD4</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>hHash</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>MD4_Update</name><parameter_list>(<parameter><decl><type><name>MD4_CTX</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>CryptHashData</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>hHash</name></name></expr></argument>, <argument><expr><operator>(</operator><name>BYTE</name> <operator>*</operator><operator>)</operator><name>data</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <name>size</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>MD4_Final</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>result</name></decl></parameter>, <parameter><decl><type><name>MD4_CTX</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>length</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>CryptGetHashParam</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>hHash</name></name></expr></argument>, <argument><expr><name>HP_HASHVAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>length</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>length</name> <operator>==</operator> <name>MD4_DIGEST_LENGTH</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>CryptGetHashParam</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>hHash</name></name></expr></argument>, <argument><expr><name>HP_HASHVAL</name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>length</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>hHash</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>CryptDestroyHash</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>hHash</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>hCryptProv</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>CryptReleaseContext</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>hCryptProv</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<cpp:elif>#<cpp:directive>elif</cpp:directive><expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>USE_MBEDTLS</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_MD4_C</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:elif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mbedtls/md4.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_memory.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memdebug.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>size</name></decl>;</decl_stmt>

}</block></struct></type> <name>MD4_CTX</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type> <name>MD4_Init</name><parameter_list>(<parameter><decl><type><name>MD4_CTX</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>MD4_Update</name><parameter_list>(<parameter><decl><type><name>MD4_CTX</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>data</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>data</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>MD4_Final</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>result</name></decl></parameter>, <parameter><decl><type><name>MD4_CTX</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>data</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAS_MBEDTLS_RESULT_CODE_BASED_FUNCTIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>mbedtls_md4</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>mbedtls_md4_ret</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<typedef>typedef <type><name>unsigned</name> <name>int</name></type> <name>MD4_u32plus</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>MD4_u32plus</name></type> <name>lo</name></decl>, <name>hi</name>;</decl_stmt>

<decl_stmt><decl><type><name>MD4_u32plus</name></type> <name>a</name></decl>, <name>b</name>, <name>c</name>, <name>d</name>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buffer</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MD4_u32plus</name></type> <name><name>block</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

}</block></struct></type> <name>MD4_CTX</name>;</typedef>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>MD4_Init</name><parameter_list>(<parameter><decl><type><name>MD4_CTX</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>MD4_Update</name><parameter_list>(<parameter><decl><type><name>MD4_CTX</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>MD4_Final</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>result</name></decl></parameter>, <parameter><decl><type><name>MD4_CTX</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>, <parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((z) ^ ((x) &amp; ((y) ^ (z))))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>G</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>, <parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) &amp; ((y) | (z))) | ((y) &amp; (z)))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>H</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>, <parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x) ^ (y) ^ (z))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STEP</name><parameter_list>(<parameter><type><name>f</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>c</name></type></parameter>, <parameter><type><name>d</name></type></parameter>, <parameter><type><name>x</name></type></parameter>, <parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(a) += f((b), (c), (d)) + (x); (a) = (((a) &lt;&lt; (s)) | (((a) &amp; 0xffffffff) &gt;&gt; (32 - (s))));</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__i386__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__x86_64__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__vax__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SET</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(*(MD4_u32plus *)(void *)&amp;ptr[(n) * 4])</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>SET(n)</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SET</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(ctx-&gt;block[(n)] = (MD4_u32plus)ptr[(n) * 4] | ((MD4_u32plus)ptr[(n) * 4 + 1] &lt;&lt; 8) | ((MD4_u32plus)ptr[(n) * 4 + 2] &lt;&lt; 16) | ((MD4_u32plus)ptr[(n) * 4 + 3] &lt;&lt; 24))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(ctx-&gt;block[(n)])</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>body</name><parameter_list>(<parameter><decl><type><name>MD4_CTX</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MD4_u32plus</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>c</name></decl>, <decl><type ref="prev"/><name>d</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>data</name></expr>;</expr_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>a</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>b</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>d</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>d</name></name></expr>;</expr_stmt>

<do>do <block>{<block_content>

<decl_stmt><decl><type><name>MD4_u32plus</name></type> <name>saved_a</name></decl>, <decl><type ref="prev"/><name>saved_b</name></decl>, <decl><type ref="prev"/><name>saved_c</name></decl>, <decl><type ref="prev"/><name>saved_d</name></decl>;</decl_stmt>

<expr_stmt><expr><name>saved_a</name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>

<expr_stmt><expr><name>saved_b</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>

<expr_stmt><expr><name>saved_c</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

<expr_stmt><expr><name>saved_d</name> <operator>=</operator> <name>d</name></expr>;</expr_stmt>

<macro><name>STEP</name><argument_list>(<argument>F</argument>, <argument>a</argument>, <argument>b</argument>, <argument>c</argument>, <argument>d</argument>, <argument>SET(<literal type="number">0</literal>)</argument>, <argument><literal type="number">3</literal></argument>)</argument_list></macro>

<macro><name>STEP</name><argument_list>(<argument>F</argument>, <argument>d</argument>, <argument>a</argument>, <argument>b</argument>, <argument>c</argument>, <argument>SET(<literal type="number">1</literal>)</argument>, <argument><literal type="number">7</literal></argument>)</argument_list></macro>

<macro><name>STEP</name><argument_list>(<argument>F</argument>, <argument>c</argument>, <argument>d</argument>, <argument>a</argument>, <argument>b</argument>, <argument>SET(<literal type="number">2</literal>)</argument>, <argument><literal type="number">11</literal></argument>)</argument_list></macro>

<macro><name>STEP</name><argument_list>(<argument>F</argument>, <argument>b</argument>, <argument>c</argument>, <argument>d</argument>, <argument>a</argument>, <argument>SET(<literal type="number">3</literal>)</argument>, <argument><literal type="number">19</literal></argument>)</argument_list></macro>

<macro><name>STEP</name><argument_list>(<argument>F</argument>, <argument>a</argument>, <argument>b</argument>, <argument>c</argument>, <argument>d</argument>, <argument>SET(<literal type="number">4</literal>)</argument>, <argument><literal type="number">3</literal></argument>)</argument_list></macro>

<macro><name>STEP</name><argument_list>(<argument>F</argument>, <argument>d</argument>, <argument>a</argument>, <argument>b</argument>, <argument>c</argument>, <argument>SET(<literal type="number">5</literal>)</argument>, <argument><literal type="number">7</literal></argument>)</argument_list></macro>

<macro><name>STEP</name><argument_list>(<argument>F</argument>, <argument>c</argument>, <argument>d</argument>, <argument>a</argument>, <argument>b</argument>, <argument>SET(<literal type="number">6</literal>)</argument>, <argument><literal type="number">11</literal></argument>)</argument_list></macro>

<macro><name>STEP</name><argument_list>(<argument>F</argument>, <argument>b</argument>, <argument>c</argument>, <argument>d</argument>, <argument>a</argument>, <argument>SET(<literal type="number">7</literal>)</argument>, <argument><literal type="number">19</literal></argument>)</argument_list></macro>

<macro><name>STEP</name><argument_list>(<argument>F</argument>, <argument>a</argument>, <argument>b</argument>, <argument>c</argument>, <argument>d</argument>, <argument>SET(<literal type="number">8</literal>)</argument>, <argument><literal type="number">3</literal></argument>)</argument_list></macro>

<macro><name>STEP</name><argument_list>(<argument>F</argument>, <argument>d</argument>, <argument>a</argument>, <argument>b</argument>, <argument>c</argument>, <argument>SET(<literal type="number">9</literal>)</argument>, <argument><literal type="number">7</literal></argument>)</argument_list></macro>

<macro><name>STEP</name><argument_list>(<argument>F</argument>, <argument>c</argument>, <argument>d</argument>, <argument>a</argument>, <argument>b</argument>, <argument>SET(<literal type="number">10</literal>)</argument>, <argument><literal type="number">11</literal></argument>)</argument_list></macro>

<macro><name>STEP</name><argument_list>(<argument>F</argument>, <argument>b</argument>, <argument>c</argument>, <argument>d</argument>, <argument>a</argument>, <argument>SET(<literal type="number">11</literal>)</argument>, <argument><literal type="number">19</literal></argument>)</argument_list></macro>

<macro><name>STEP</name><argument_list>(<argument>F</argument>, <argument>a</argument>, <argument>b</argument>, <argument>c</argument>, <argument>d</argument>, <argument>SET(<literal type="number">12</literal>)</argument>, <argument><literal type="number">3</literal></argument>)</argument_list></macro>

<macro><name>STEP</name><argument_list>(<argument>F</argument>, <argument>d</argument>, <argument>a</argument>, <argument>b</argument>, <argument>c</argument>, <argument>SET(<literal type="number">13</literal>)</argument>, <argument><literal type="number">7</literal></argument>)</argument_list></macro>

<macro><name>STEP</name><argument_list>(<argument>F</argument>, <argument>c</argument>, <argument>d</argument>, <argument>a</argument>, <argument>b</argument>, <argument>SET(<literal type="number">14</literal>)</argument>, <argument><literal type="number">11</literal></argument>)</argument_list></macro>

<macro><name>STEP</name><argument_list>(<argument>F</argument>, <argument>b</argument>, <argument>c</argument>, <argument>d</argument>, <argument>a</argument>, <argument>SET(<literal type="number">15</literal>)</argument>, <argument><literal type="number">19</literal></argument>)</argument_list></macro>

<macro><name>STEP</name><argument_list>(<argument>G</argument>, <argument>a</argument>, <argument>b</argument>, <argument>c</argument>, <argument>d</argument>, <argument>GET(<literal type="number">0</literal>) + <literal type="number">0x5a827999</literal></argument>, <argument><literal type="number">3</literal></argument>)</argument_list></macro>

<macro><name>STEP</name><argument_list>(<argument>G</argument>, <argument>d</argument>, <argument>a</argument>, <argument>b</argument>, <argument>c</argument>, <argument>GET(<literal type="number">4</literal>) + <literal type="number">0x5a827999</literal></argument>, <argument><literal type="number">5</literal></argument>)</argument_list></macro>

<macro><name>STEP</name><argument_list>(<argument>G</argument>, <argument>c</argument>, <argument>d</argument>, <argument>a</argument>, <argument>b</argument>, <argument>GET(<literal type="number">8</literal>) + <literal type="number">0x5a827999</literal></argument>, <argument><literal type="number">9</literal></argument>)</argument_list></macro>

<macro><name>STEP</name><argument_list>(<argument>G</argument>, <argument>b</argument>, <argument>c</argument>, <argument>d</argument>, <argument>a</argument>, <argument>GET(<literal type="number">12</literal>) + <literal type="number">0x5a827999</literal></argument>, <argument><literal type="number">13</literal></argument>)</argument_list></macro>

<macro><name>STEP</name><argument_list>(<argument>G</argument>, <argument>a</argument>, <argument>b</argument>, <argument>c</argument>, <argument>d</argument>, <argument>GET(<literal type="number">1</literal>) + <literal type="number">0x5a827999</literal></argument>, <argument><literal type="number">3</literal></argument>)</argument_list></macro>

<macro><name>STEP</name><argument_list>(<argument>G</argument>, <argument>d</argument>, <argument>a</argument>, <argument>b</argument>, <argument>c</argument>, <argument>GET(<literal type="number">5</literal>) + <literal type="number">0x5a827999</literal></argument>, <argument><literal type="number">5</literal></argument>)</argument_list></macro>

<macro><name>STEP</name><argument_list>(<argument>G</argument>, <argument>c</argument>, <argument>d</argument>, <argument>a</argument>, <argument>b</argument>, <argument>GET(<literal type="number">9</literal>) + <literal type="number">0x5a827999</literal></argument>, <argument><literal type="number">9</literal></argument>)</argument_list></macro>

<macro><name>STEP</name><argument_list>(<argument>G</argument>, <argument>b</argument>, <argument>c</argument>, <argument>d</argument>, <argument>a</argument>, <argument>GET(<literal type="number">13</literal>) + <literal type="number">0x5a827999</literal></argument>, <argument><literal type="number">13</literal></argument>)</argument_list></macro>

<macro><name>STEP</name><argument_list>(<argument>G</argument>, <argument>a</argument>, <argument>b</argument>, <argument>c</argument>, <argument>d</argument>, <argument>GET(<literal type="number">2</literal>) + <literal type="number">0x5a827999</literal></argument>, <argument><literal type="number">3</literal></argument>)</argument_list></macro>

<macro><name>STEP</name><argument_list>(<argument>G</argument>, <argument>d</argument>, <argument>a</argument>, <argument>b</argument>, <argument>c</argument>, <argument>GET(<literal type="number">6</literal>) + <literal type="number">0x5a827999</literal></argument>, <argument><literal type="number">5</literal></argument>)</argument_list></macro>

<macro><name>STEP</name><argument_list>(<argument>G</argument>, <argument>c</argument>, <argument>d</argument>, <argument>a</argument>, <argument>b</argument>, <argument>GET(<literal type="number">10</literal>) + <literal type="number">0x5a827999</literal></argument>, <argument><literal type="number">9</literal></argument>)</argument_list></macro>

<macro><name>STEP</name><argument_list>(<argument>G</argument>, <argument>b</argument>, <argument>c</argument>, <argument>d</argument>, <argument>a</argument>, <argument>GET(<literal type="number">14</literal>) + <literal type="number">0x5a827999</literal></argument>, <argument><literal type="number">13</literal></argument>)</argument_list></macro>

<macro><name>STEP</name><argument_list>(<argument>G</argument>, <argument>a</argument>, <argument>b</argument>, <argument>c</argument>, <argument>d</argument>, <argument>GET(<literal type="number">3</literal>) + <literal type="number">0x5a827999</literal></argument>, <argument><literal type="number">3</literal></argument>)</argument_list></macro>

<macro><name>STEP</name><argument_list>(<argument>G</argument>, <argument>d</argument>, <argument>a</argument>, <argument>b</argument>, <argument>c</argument>, <argument>GET(<literal type="number">7</literal>) + <literal type="number">0x5a827999</literal></argument>, <argument><literal type="number">5</literal></argument>)</argument_list></macro>

<macro><name>STEP</name><argument_list>(<argument>G</argument>, <argument>c</argument>, <argument>d</argument>, <argument>a</argument>, <argument>b</argument>, <argument>GET(<literal type="number">11</literal>) + <literal type="number">0x5a827999</literal></argument>, <argument><literal type="number">9</literal></argument>)</argument_list></macro>

<macro><name>STEP</name><argument_list>(<argument>G</argument>, <argument>b</argument>, <argument>c</argument>, <argument>d</argument>, <argument>a</argument>, <argument>GET(<literal type="number">15</literal>) + <literal type="number">0x5a827999</literal></argument>, <argument><literal type="number">13</literal></argument>)</argument_list></macro>

<macro><name>STEP</name><argument_list>(<argument>H</argument>, <argument>a</argument>, <argument>b</argument>, <argument>c</argument>, <argument>d</argument>, <argument>GET(<literal type="number">0</literal>) + <literal type="number">0x6ed9eba1</literal></argument>, <argument><literal type="number">3</literal></argument>)</argument_list></macro>

<macro><name>STEP</name><argument_list>(<argument>H</argument>, <argument>d</argument>, <argument>a</argument>, <argument>b</argument>, <argument>c</argument>, <argument>GET(<literal type="number">8</literal>) + <literal type="number">0x6ed9eba1</literal></argument>, <argument><literal type="number">9</literal></argument>)</argument_list></macro>

<macro><name>STEP</name><argument_list>(<argument>H</argument>, <argument>c</argument>, <argument>d</argument>, <argument>a</argument>, <argument>b</argument>, <argument>GET(<literal type="number">4</literal>) + <literal type="number">0x6ed9eba1</literal></argument>, <argument><literal type="number">11</literal></argument>)</argument_list></macro>

<macro><name>STEP</name><argument_list>(<argument>H</argument>, <argument>b</argument>, <argument>c</argument>, <argument>d</argument>, <argument>a</argument>, <argument>GET(<literal type="number">12</literal>) + <literal type="number">0x6ed9eba1</literal></argument>, <argument><literal type="number">15</literal></argument>)</argument_list></macro>

<macro><name>STEP</name><argument_list>(<argument>H</argument>, <argument>a</argument>, <argument>b</argument>, <argument>c</argument>, <argument>d</argument>, <argument>GET(<literal type="number">2</literal>) + <literal type="number">0x6ed9eba1</literal></argument>, <argument><literal type="number">3</literal></argument>)</argument_list></macro>

<macro><name>STEP</name><argument_list>(<argument>H</argument>, <argument>d</argument>, <argument>a</argument>, <argument>b</argument>, <argument>c</argument>, <argument>GET(<literal type="number">10</literal>) + <literal type="number">0x6ed9eba1</literal></argument>, <argument><literal type="number">9</literal></argument>)</argument_list></macro>

<macro><name>STEP</name><argument_list>(<argument>H</argument>, <argument>c</argument>, <argument>d</argument>, <argument>a</argument>, <argument>b</argument>, <argument>GET(<literal type="number">6</literal>) + <literal type="number">0x6ed9eba1</literal></argument>, <argument><literal type="number">11</literal></argument>)</argument_list></macro>

<macro><name>STEP</name><argument_list>(<argument>H</argument>, <argument>b</argument>, <argument>c</argument>, <argument>d</argument>, <argument>a</argument>, <argument>GET(<literal type="number">14</literal>) + <literal type="number">0x6ed9eba1</literal></argument>, <argument><literal type="number">15</literal></argument>)</argument_list></macro>

<macro><name>STEP</name><argument_list>(<argument>H</argument>, <argument>a</argument>, <argument>b</argument>, <argument>c</argument>, <argument>d</argument>, <argument>GET(<literal type="number">1</literal>) + <literal type="number">0x6ed9eba1</literal></argument>, <argument><literal type="number">3</literal></argument>)</argument_list></macro>

<macro><name>STEP</name><argument_list>(<argument>H</argument>, <argument>d</argument>, <argument>a</argument>, <argument>b</argument>, <argument>c</argument>, <argument>GET(<literal type="number">9</literal>) + <literal type="number">0x6ed9eba1</literal></argument>, <argument><literal type="number">9</literal></argument>)</argument_list></macro>

<macro><name>STEP</name><argument_list>(<argument>H</argument>, <argument>c</argument>, <argument>d</argument>, <argument>a</argument>, <argument>b</argument>, <argument>GET(<literal type="number">5</literal>) + <literal type="number">0x6ed9eba1</literal></argument>, <argument><literal type="number">11</literal></argument>)</argument_list></macro>

<macro><name>STEP</name><argument_list>(<argument>H</argument>, <argument>b</argument>, <argument>c</argument>, <argument>d</argument>, <argument>a</argument>, <argument>GET(<literal type="number">13</literal>) + <literal type="number">0x6ed9eba1</literal></argument>, <argument><literal type="number">15</literal></argument>)</argument_list></macro>

<macro><name>STEP</name><argument_list>(<argument>H</argument>, <argument>a</argument>, <argument>b</argument>, <argument>c</argument>, <argument>d</argument>, <argument>GET(<literal type="number">3</literal>) + <literal type="number">0x6ed9eba1</literal></argument>, <argument><literal type="number">3</literal></argument>)</argument_list></macro>

<macro><name>STEP</name><argument_list>(<argument>H</argument>, <argument>d</argument>, <argument>a</argument>, <argument>b</argument>, <argument>c</argument>, <argument>GET(<literal type="number">11</literal>) + <literal type="number">0x6ed9eba1</literal></argument>, <argument><literal type="number">9</literal></argument>)</argument_list></macro>

<macro><name>STEP</name><argument_list>(<argument>H</argument>, <argument>c</argument>, <argument>d</argument>, <argument>a</argument>, <argument>b</argument>, <argument>GET(<literal type="number">7</literal>) + <literal type="number">0x6ed9eba1</literal></argument>, <argument><literal type="number">11</literal></argument>)</argument_list></macro>

<macro><name>STEP</name><argument_list>(<argument>H</argument>, <argument>b</argument>, <argument>c</argument>, <argument>d</argument>, <argument>a</argument>, <argument>GET(<literal type="number">15</literal>) + <literal type="number">0x6ed9eba1</literal></argument>, <argument><literal type="number">15</literal></argument>)</argument_list></macro>

<expr_stmt><expr><name>a</name> <operator>+=</operator> <name>saved_a</name></expr>;</expr_stmt>

<expr_stmt><expr><name>b</name> <operator>+=</operator> <name>saved_b</name></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>+=</operator> <name>saved_c</name></expr>;</expr_stmt>

<expr_stmt><expr><name>d</name> <operator>+=</operator> <name>saved_d</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <literal type="number">64</literal></expr>;</expr_stmt>

</block_content>}</block> while<condition>(<expr><name>size</name> <operator>-=</operator> <literal type="number">64</literal></expr>)</condition>;</do>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>a</name></name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>b</name></name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>d</name></name> <operator>=</operator> <name>d</name></expr>;</expr_stmt>

<return>return <expr><name>ptr</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>MD4_Init</name><parameter_list>(<parameter><decl><type><name>MD4_CTX</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>a</name></name> <operator>=</operator> <literal type="number">0x67452301</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>b</name></name> <operator>=</operator> <literal type="number">0xefcdab89</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <literal type="number">0x98badcfe</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>d</name></name> <operator>=</operator> <literal type="number">0x10325476</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>lo</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>hi</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>MD4_Update</name><parameter_list>(<parameter><decl><type><name>MD4_CTX</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>MD4_u32plus</name></type> <name>saved_lo</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>used</name></decl>;</decl_stmt>

<expr_stmt><expr><name>saved_lo</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>lo</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>lo</name></name> <operator>=</operator> <operator>(</operator><name>saved_lo</name> <operator>+</operator> <name>size</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x1fffffff</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>lo</name></name> <operator>&lt;</operator> <name>saved_lo</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>hi</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>hi</name></name> <operator>+=</operator> <operator>(</operator><name>MD4_u32plus</name><operator>)</operator><name>size</name> <operator>&gt;&gt;</operator> <literal type="number">29</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>used</name> <operator>=</operator> <name>saved_lo</name> <operator>&amp;</operator> <literal type="number">0x3f</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>used</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>available</name> <init>= <expr><literal type="number">64</literal> <operator>-</operator> <name>used</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>size</name> <operator>&lt;</operator> <name>available</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><name>used</name></expr>]</index></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><name>used</name></expr>]</index></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>available</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>data</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>data</name> <operator>+</operator> <name>available</name></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>-=</operator> <name>available</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>body</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>size</name> <operator>&gt;=</operator> <literal type="number">64</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>body</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>size</name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><literal type="number">0x3f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>&amp;=</operator> <literal type="number">0x3f</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>MD4_Final</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>result</name></decl></parameter>, <parameter><decl><type><name>MD4_CTX</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>used</name></decl>, <decl><type ref="prev"/><name>available</name></decl>;</decl_stmt>

<expr_stmt><expr><name>used</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>lo</name></name> <operator>&amp;</operator> <literal type="number">0x3f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><name>used</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x80</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>available</name> <operator>=</operator> <literal type="number">64</literal> <operator>-</operator> <name>used</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>available</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><name>used</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>available</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>body</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>used</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>available</name> <operator>=</operator> <literal type="number">64</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><name>used</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>available</name> <operator>-</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>lo</name></name> <operator>&lt;&lt;=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><literal type="number">56</literal></expr>]</index></name> <operator>=</operator> <call><name>curlx_ultouc</name><argument_list>(<argument><expr><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>lo</name></name><operator>)</operator><operator>&amp;</operator><literal type="number">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><literal type="number">57</literal></expr>]</index></name> <operator>=</operator> <call><name>curlx_ultouc</name><argument_list>(<argument><expr><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>lo</name></name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator><operator>&amp;</operator><literal type="number">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><literal type="number">58</literal></expr>]</index></name> <operator>=</operator> <call><name>curlx_ultouc</name><argument_list>(<argument><expr><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>lo</name></name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator><operator>&amp;</operator><literal type="number">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><literal type="number">59</literal></expr>]</index></name> <operator>=</operator> <call><name>curlx_ultouc</name><argument_list>(<argument><expr><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>lo</name></name> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator><operator>&amp;</operator><literal type="number">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><literal type="number">60</literal></expr>]</index></name> <operator>=</operator> <call><name>curlx_ultouc</name><argument_list>(<argument><expr><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>hi</name></name><operator>)</operator><operator>&amp;</operator><literal type="number">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><literal type="number">61</literal></expr>]</index></name> <operator>=</operator> <call><name>curlx_ultouc</name><argument_list>(<argument><expr><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>hi</name></name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator><operator>&amp;</operator><literal type="number">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><literal type="number">62</literal></expr>]</index></name> <operator>=</operator> <call><name>curlx_ultouc</name><argument_list>(<argument><expr><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>hi</name></name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator><operator>&amp;</operator><literal type="number">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><literal type="number">63</literal></expr>]</index></name> <operator>=</operator> <call><name>curlx_ultouc</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>hi</name></name> <operator>&gt;&gt;</operator> <literal type="number">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>body</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>result</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>curlx_ultouc</name><argument_list>(<argument><expr><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>a</name></name><operator>)</operator><operator>&amp;</operator><literal type="number">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>result</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>curlx_ultouc</name><argument_list>(<argument><expr><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>a</name></name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator><operator>&amp;</operator><literal type="number">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>result</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>curlx_ultouc</name><argument_list>(<argument><expr><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>a</name></name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator><operator>&amp;</operator><literal type="number">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>result</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>curlx_ultouc</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>a</name></name> <operator>&gt;&gt;</operator> <literal type="number">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>result</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <call><name>curlx_ultouc</name><argument_list>(<argument><expr><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>b</name></name><operator>)</operator><operator>&amp;</operator><literal type="number">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>result</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <call><name>curlx_ultouc</name><argument_list>(<argument><expr><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>b</name></name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator><operator>&amp;</operator><literal type="number">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>result</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <call><name>curlx_ultouc</name><argument_list>(<argument><expr><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>b</name></name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator><operator>&amp;</operator><literal type="number">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>result</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <call><name>curlx_ultouc</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>b</name></name> <operator>&gt;&gt;</operator> <literal type="number">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>result</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <call><name>curlx_ultouc</name><argument_list>(<argument><expr><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>c</name></name><operator>)</operator><operator>&amp;</operator><literal type="number">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>result</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>=</operator> <call><name>curlx_ultouc</name><argument_list>(<argument><expr><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>c</name></name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator><operator>&amp;</operator><literal type="number">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>result</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>=</operator> <call><name>curlx_ultouc</name><argument_list>(<argument><expr><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>c</name></name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator><operator>&amp;</operator><literal type="number">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>result</name><index>[<expr><literal type="number">11</literal></expr>]</index></name> <operator>=</operator> <call><name>curlx_ultouc</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>c</name></name> <operator>&gt;&gt;</operator> <literal type="number">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>result</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <operator>=</operator> <call><name>curlx_ultouc</name><argument_list>(<argument><expr><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>d</name></name><operator>)</operator><operator>&amp;</operator><literal type="number">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>result</name><index>[<expr><literal type="number">13</literal></expr>]</index></name> <operator>=</operator> <call><name>curlx_ultouc</name><argument_list>(<argument><expr><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>d</name></name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator><operator>&amp;</operator><literal type="number">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>result</name><index>[<expr><literal type="number">14</literal></expr>]</index></name> <operator>=</operator> <call><name>curlx_ultouc</name><argument_list>(<argument><expr><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>d</name></name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator><operator>&amp;</operator><literal type="number">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>result</name><index>[<expr><literal type="number">15</literal></expr>]</index></name> <operator>=</operator> <call><name>curlx_ultouc</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>d</name></name> <operator>&gt;&gt;</operator> <literal type="number">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>ctx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><name>void</name></type> <name>Curl_md4it</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>MD4_CTX</name></type> <name>ctx</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>MD4_Init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MD4_Update</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><call><name>curlx_uztoui</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MD4_Final</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</unit>
