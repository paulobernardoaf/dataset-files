<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\curl-analysis\_cppstats\curl\lib\mprintf.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_setup.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;curl/mprintf.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_memory.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memdebug.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LONGLONG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LONG_LONG_TYPE</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_LONG_LONG_TYPE</name></cpp:macro></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>_MSC_VER</name> <operator>&gt;=</operator> <literal type="number">900</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>_INTEGRAL_MAX_BITS</name> <operator>&gt;=</operator> <literal type="number">64</literal><operator>)</operator></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LONG_LONG_TYPE</name></cpp:macro> <cpp:value>__int64</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_LONG_LONG_TYPE</name></cpp:macro></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>LONG_LONG_TYPE</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>HAVE_LONG_LONG_TYPE</name></cpp:undef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>__BORLANDC__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>__BORLANDC__</name> <operator>&gt;=</operator> <literal type="number">0x520</literal><operator>)</operator><operator>)</operator> <operator>||</operator> <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>__WATCOMC__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__386__</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>__POCC__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32_WCE</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>__MINGW32__</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>_MSC_VER</name> <operator>&gt;=</operator> <literal type="number">900</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>_INTEGRAL_MAX_BITS</name> <operator>&gt;=</operator> <literal type="number">64</literal><operator>)</operator><operator>)</operator></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MP_HAVE_INT_EXTENSIONS</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LONG_LONG_TYPE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp_intmax_t</name></cpp:macro> <cpp:value>LONG_LONG_TYPE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp_uintmax_t</name></cpp:macro> <cpp:value>unsigned LONG_LONG_TYPE</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp_intmax_t</name></cpp:macro> <cpp:value>long</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp_uintmax_t</name></cpp:macro> <cpp:value>unsigned long</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUFFSIZE</name></cpp:macro> <cpp:value>326</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_PARAMETERS</name></cpp:macro> <cpp:value>128</cpp:value></cpp:define> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__AMIGA__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>FORMAT_INT</name></cpp:undef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>lower_digits</name><index>[]</index></name> <init>= <expr><literal type="string">"0123456789abcdefghijklmnopqrstuvwxyz"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>upper_digits</name><index>[]</index></name> <init>= <expr><literal type="string">"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"</literal></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OUTCHAR</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do{ if(stream((unsigned char)(x), (FILE *)data) != -1) done++; else return done; } while(0)</cpp:value></cpp:define>

<typedef>typedef <type><enum>enum <block>{

<decl><name>FORMAT_UNKNOWN</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>FORMAT_STRING</name></decl>,

<decl><name>FORMAT_PTR</name></decl>,

<decl><name>FORMAT_INT</name></decl>,

<decl><name>FORMAT_INTPTR</name></decl>,

<decl><name>FORMAT_LONG</name></decl>,

<decl><name>FORMAT_LONGLONG</name></decl>,

<decl><name>FORMAT_DOUBLE</name></decl>,

<decl><name>FORMAT_LONGDOUBLE</name></decl>,

<decl><name>FORMAT_WIDTH</name></decl> 

}</block></enum></type> <name>FormatType</name>;</typedef>

<enum>enum <block>{

<decl><name>FLAGS_NEW</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>FLAGS_SPACE</name> <init>= <expr><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">0</literal></expr></init></decl>,

<decl><name>FLAGS_SHOWSIGN</name> <init>= <expr><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">1</literal></expr></init></decl>,

<decl><name>FLAGS_LEFT</name> <init>= <expr><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">2</literal></expr></init></decl>,

<decl><name>FLAGS_ALT</name> <init>= <expr><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">3</literal></expr></init></decl>,

<decl><name>FLAGS_SHORT</name> <init>= <expr><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">4</literal></expr></init></decl>,

<decl><name>FLAGS_LONG</name> <init>= <expr><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">5</literal></expr></init></decl>,

<decl><name>FLAGS_LONGLONG</name> <init>= <expr><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">6</literal></expr></init></decl>,

<decl><name>FLAGS_LONGDOUBLE</name> <init>= <expr><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">7</literal></expr></init></decl>,

<decl><name>FLAGS_PAD_NIL</name> <init>= <expr><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">8</literal></expr></init></decl>,

<decl><name>FLAGS_UNSIGNED</name> <init>= <expr><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">9</literal></expr></init></decl>,

<decl><name>FLAGS_OCTAL</name> <init>= <expr><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">10</literal></expr></init></decl>,

<decl><name>FLAGS_HEX</name> <init>= <expr><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">11</literal></expr></init></decl>,

<decl><name>FLAGS_UPPER</name> <init>= <expr><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">12</literal></expr></init></decl>,

<decl><name>FLAGS_WIDTH</name> <init>= <expr><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">13</literal></expr></init></decl>, 

<decl><name>FLAGS_WIDTHPARAM</name> <init>= <expr><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">14</literal></expr></init></decl>, 

<decl><name>FLAGS_PREC</name> <init>= <expr><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">15</literal></expr></init></decl>, 

<decl><name>FLAGS_PRECPARAM</name> <init>= <expr><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">16</literal></expr></init></decl>, 

<decl><name>FLAGS_CHAR</name> <init>= <expr><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">17</literal></expr></init></decl>, 

<decl><name>FLAGS_FLOATE</name> <init>= <expr><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">18</literal></expr></init></decl>, 

<decl><name>FLAGS_FLOATG</name> <init>= <expr><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">19</literal></expr></init></decl> 

}</block>;</enum>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>FormatType</name></type> <name>type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>width</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>long</name></type> <name>precision</name></decl>;</decl_stmt> 

<union>union <block>{

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

<union>union <block>{

<decl_stmt><decl><type><name>mp_intmax_t</name></type> <name>as_signed</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mp_uintmax_t</name></type> <name>as_unsigned</name></decl>;</decl_stmt>

}</block> <decl><name>num</name></decl>;</union>

<decl_stmt><decl><type><name>double</name></type> <name>dnum</name></decl>;</decl_stmt>

}</block> <decl><name>data</name></decl>;</union>

}</block></struct></type> <name>va_stack_t</name>;</typedef>

<struct>struct <name>nsprintf</name> <block>{

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>length</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>max</name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>asprintf</name> <block>{

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>size_t</name></type> <name>alloc</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>fail</name></decl>;</decl_stmt> 

}</block>;</struct>

<function><type><specifier>static</specifier> <name>long</name></type> <name>dprintf_DollarString</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>end</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>number</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while<condition>(<expr><call><name>ISDIGIT</name><argument_list>(<argument><expr><operator>*</operator><name>input</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>number</name> <operator>*=</operator> <literal type="number">10</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>number</name> <operator>+=</operator> <operator>*</operator><name>input</name><operator>-</operator><literal type="char">'0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>input</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if<condition>(<expr><name>number</name> <operator>&amp;&amp;</operator> <operator>(</operator><literal type="char">'$'</literal><operator>==</operator><operator>*</operator><name>input</name><operator>++</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>end</name> <operator>=</operator> <name>input</name></expr>;</expr_stmt>

<return>return <expr><name>number</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>dprintf_IsQualifierNoDollar</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MP_HAVE_INT_EXTENSIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>, <argument><expr><literal type="string">"I32"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>, <argument><expr><literal type="string">"I64"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>TRUE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<switch>switch<condition>(<expr><operator>*</operator><name>fmt</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'-'</literal></expr>:</case> <case>case <expr><literal type="char">'+'</literal></expr>:</case> <case>case <expr><literal type="char">' '</literal></expr>:</case> <case>case <expr><literal type="char">'#'</literal></expr>:</case> <case>case <expr><literal type="char">'.'</literal></expr>:</case>

<case>case <expr><literal type="char">'0'</literal></expr>:</case> <case>case <expr><literal type="char">'1'</literal></expr>:</case> <case>case <expr><literal type="char">'2'</literal></expr>:</case> <case>case <expr><literal type="char">'3'</literal></expr>:</case> <case>case <expr><literal type="char">'4'</literal></expr>:</case>

<case>case <expr><literal type="char">'5'</literal></expr>:</case> <case>case <expr><literal type="char">'6'</literal></expr>:</case> <case>case <expr><literal type="char">'7'</literal></expr>:</case> <case>case <expr><literal type="char">'8'</literal></expr>:</case> <case>case <expr><literal type="char">'9'</literal></expr>:</case>

<case>case <expr><literal type="char">'h'</literal></expr>:</case> <case>case <expr><literal type="char">'l'</literal></expr>:</case> <case>case <expr><literal type="char">'L'</literal></expr>:</case> <case>case <expr><literal type="char">'z'</literal></expr>:</case> <case>case <expr><literal type="char">'q'</literal></expr>:</case>

<case>case <expr><literal type="char">'*'</literal></expr>:</case> <case>case <expr><literal type="char">'O'</literal></expr>:</case>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MP_HAVE_INT_EXTENSIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>

<case>case <expr><literal type="char">'I'</literal></expr>:</case>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>TRUE</name></expr>;</return>

<default>default:</default>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dprintf_Pass1</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><name>va_stack_t</name> <modifier>*</modifier></type><name>vto</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>endpos</name></decl></parameter>,

<parameter><decl><type><name>va_list</name></type> <name>arglist</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>fmt</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>format</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>param_num</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>this_param</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>width</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>precision</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>max_param</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>i</name></decl>;</decl_stmt>

<while>while<condition>(<expr><operator>*</operator><name>fmt</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>*</operator><name>fmt</name><operator>++</operator> <operator>==</operator> <literal type="char">'%'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>*</operator><name>fmt</name> <operator>==</operator> <literal type="char">'%'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>fmt</name><operator>++</operator></expr>;</expr_stmt>

<continue>continue;</continue> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>flags</name> <operator>=</operator> <name>FLAGS_NEW</name></expr>;</expr_stmt>

<expr_stmt><expr><name>param_num</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>this_param</name> <operator>=</operator> <call><name>dprintf_DollarString</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><literal type="number">0</literal> <operator>==</operator> <name>this_param</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>this_param</name> <operator>=</operator> <name>param_num</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>this_param</name> <operator>&gt;</operator> <name>max_param</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>max_param</name> <operator>=</operator> <name>this_param</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>width</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>precision</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while<condition>(<expr><call><name>dprintf_IsQualifierNoDollar</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MP_HAVE_INT_EXTENSIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>, <argument><expr><literal type="string">"I32"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>FLAGS_LONG</name></expr>;</expr_stmt>

<expr_stmt><expr><name>fmt</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>, <argument><expr><literal type="string">"I64"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>FLAGS_LONGLONG</name></expr>;</expr_stmt>

<expr_stmt><expr><name>fmt</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<switch>switch<condition>(<expr><operator>*</operator><name>fmt</name><operator>++</operator></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">' '</literal></expr>:</case>

<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>FLAGS_SPACE</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'+'</literal></expr>:</case>

<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>FLAGS_SHOWSIGN</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'-'</literal></expr>:</case>

<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>FLAGS_LEFT</name></expr>;</expr_stmt>

<expr_stmt><expr><name>flags</name> <operator>&amp;=</operator> <operator>~</operator><name>FLAGS_PAD_NIL</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'#'</literal></expr>:</case>

<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>FLAGS_ALT</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'.'</literal></expr>:</case>

<if_stmt><if>if<condition>(<expr><literal type="char">'*'</literal> <operator>==</operator> <operator>*</operator><name>fmt</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>FLAGS_PRECPARAM</name></expr>;</expr_stmt>

<expr_stmt><expr><name>fmt</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>param_num</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>dprintf_DollarString</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>i</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>precision</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>precision</name> <operator>=</operator> <name>param_num</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name>precision</name> <operator>&gt;</operator> <name>max_param</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>max_param</name> <operator>=</operator> <name>precision</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>FLAGS_PREC</name></expr>;</expr_stmt>

<expr_stmt><expr><name>precision</name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'h'</literal></expr>:</case>

<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>FLAGS_SHORT</name></expr>;</expr_stmt>

<break>break;</break>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MP_HAVE_INT_EXTENSIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>

<case>case <expr><literal type="char">'I'</literal></expr>:</case>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>SIZEOF_CURL_OFF_T</name> <operator>&gt;</operator> <name>SIZEOF_LONG</name><operator>)</operator></expr></cpp:if>

<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>FLAGS_LONGLONG</name></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>FLAGS_LONG</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<break>break;</break>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<case>case <expr><literal type="char">'l'</literal></expr>:</case>

<if_stmt><if>if<condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>FLAGS_LONG</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>FLAGS_LONGLONG</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>FLAGS_LONG</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'L'</literal></expr>:</case>

<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>FLAGS_LONGDOUBLE</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'q'</literal></expr>:</case>

<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>FLAGS_LONGLONG</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'z'</literal></expr>:</case>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>SIZEOF_SIZE_T</name> <operator>&gt;</operator> <name>SIZEOF_LONG</name><operator>)</operator></expr></cpp:if>

<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>FLAGS_LONGLONG</name></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>FLAGS_LONG</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<break>break;</break>

<case>case <expr><literal type="char">'O'</literal></expr>:</case>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>SIZEOF_CURL_OFF_T</name> <operator>&gt;</operator> <name>SIZEOF_LONG</name><operator>)</operator></expr></cpp:if>

<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>FLAGS_LONGLONG</name></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>FLAGS_LONG</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<break>break;</break>

<case>case <expr><literal type="char">'0'</literal></expr>:</case>

<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>FLAGS_LEFT</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>FLAGS_PAD_NIL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<case>case <expr><literal type="char">'1'</literal></expr>:</case> <case>case <expr><literal type="char">'2'</literal></expr>:</case> <case>case <expr><literal type="char">'3'</literal></expr>:</case> <case>case <expr><literal type="char">'4'</literal></expr>:</case>

<case>case <expr><literal type="char">'5'</literal></expr>:</case> <case>case <expr><literal type="char">'6'</literal></expr>:</case> <case>case <expr><literal type="char">'7'</literal></expr>:</case> <case>case <expr><literal type="char">'8'</literal></expr>:</case> <case>case <expr><literal type="char">'9'</literal></expr>:</case>

<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>FLAGS_WIDTH</name></expr>;</expr_stmt>

<expr_stmt><expr><name>width</name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name>fmt</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'*'</literal></expr>:</case> 

<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>FLAGS_WIDTHPARAM</name></expr>;</expr_stmt>

<expr_stmt><expr><name>param_num</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>dprintf_DollarString</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>i</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>width</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>width</name> <operator>=</operator> <name>param_num</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name>width</name> <operator>&gt;</operator> <name>max_param</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>max_param</name> <operator>=</operator> <name>width</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch></block_content></block></else></if_stmt>

</block_content>}</block></while> 

<expr_stmt><expr><name>i</name> <operator>=</operator> <name>this_param</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>i</name> <operator>&gt;=</operator> <name>MAX_PARAMETERS</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><operator>*</operator><name>fmt</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'S'</literal></expr>:</case>

<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>FLAGS_ALT</name></expr>;</expr_stmt>

<case>case <expr><literal type="char">'s'</literal></expr>:</case>

<expr_stmt><expr><name><name>vto</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <name>FORMAT_STRING</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'n'</literal></expr>:</case>

<expr_stmt><expr><name><name>vto</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <name>FORMAT_INTPTR</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'p'</literal></expr>:</case>

<expr_stmt><expr><name><name>vto</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <name>FORMAT_PTR</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'d'</literal></expr>:</case> <case>case <expr><literal type="char">'i'</literal></expr>:</case>

<expr_stmt><expr><name><name>vto</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <name>FORMAT_INT</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'u'</literal></expr>:</case>

<expr_stmt><expr><name><name>vto</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <name>FORMAT_INT</name></expr>;</expr_stmt>

<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>FLAGS_UNSIGNED</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'o'</literal></expr>:</case>

<expr_stmt><expr><name><name>vto</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <name>FORMAT_INT</name></expr>;</expr_stmt>

<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>FLAGS_OCTAL</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'x'</literal></expr>:</case>

<expr_stmt><expr><name><name>vto</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <name>FORMAT_INT</name></expr>;</expr_stmt>

<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>FLAGS_HEX</name><operator>|</operator><name>FLAGS_UNSIGNED</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'X'</literal></expr>:</case>

<expr_stmt><expr><name><name>vto</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <name>FORMAT_INT</name></expr>;</expr_stmt>

<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>FLAGS_HEX</name><operator>|</operator><name>FLAGS_UPPER</name><operator>|</operator><name>FLAGS_UNSIGNED</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'c'</literal></expr>:</case>

<expr_stmt><expr><name><name>vto</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <name>FORMAT_INT</name></expr>;</expr_stmt>

<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>FLAGS_CHAR</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'f'</literal></expr>:</case>

<expr_stmt><expr><name><name>vto</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <name>FORMAT_DOUBLE</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'e'</literal></expr>:</case>

<expr_stmt><expr><name><name>vto</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <name>FORMAT_DOUBLE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>FLAGS_FLOATE</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'E'</literal></expr>:</case>

<expr_stmt><expr><name><name>vto</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <name>FORMAT_DOUBLE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>FLAGS_FLOATE</name><operator>|</operator><name>FLAGS_UPPER</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'g'</literal></expr>:</case>

<expr_stmt><expr><name><name>vto</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <name>FORMAT_DOUBLE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>FLAGS_FLOATG</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'G'</literal></expr>:</case>

<expr_stmt><expr><name><name>vto</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <name>FORMAT_DOUBLE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>FLAGS_FLOATG</name><operator>|</operator><name>FLAGS_UPPER</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><name><name>vto</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <name>FORMAT_UNKNOWN</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch> 

<expr_stmt><expr><name><name>vto</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>=</operator> <name>flags</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vto</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>width</name> <operator>=</operator> <name>width</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vto</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>precision</name> <operator>=</operator> <name>precision</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>FLAGS_WIDTHPARAM</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>long</name></type> <name>k</name> <init>= <expr><name>width</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>vto</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>width</name> <operator>=</operator> <name>k</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vto</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <name>FORMAT_WIDTH</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vto</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>=</operator> <name>FLAGS_NEW</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vto</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>width</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vto</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>precision</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>FLAGS_PRECPARAM</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>long</name></type> <name>k</name> <init>= <expr><name>precision</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>vto</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>precision</name> <operator>=</operator> <name>k</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vto</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <name>FORMAT_WIDTH</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vto</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>=</operator> <name>FLAGS_NEW</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vto</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>width</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vto</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>precision</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>endpos</name><operator>++</operator> <operator>=</operator> <name>fmt</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>max_param</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>vto</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>&amp;</operator> <name>FLAGS_WIDTHPARAM</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>vto</name><index>[<expr><name><name>vto</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>width</name></expr>]</index></name><operator>.</operator><name><name>data</name><operator>.</operator><name>num</name><operator>.</operator><name>as_signed</name></name> <operator>=</operator>

<operator>(</operator><name>mp_intmax_t</name><operator>)</operator><call><name>va_arg</name><argument_list>(<argument><expr><name>arglist</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>vto</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>&amp;</operator> <name>FLAGS_PRECPARAM</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>vto</name><index>[<expr><name><name>vto</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>precision</name></expr>]</index></name><operator>.</operator><name><name>data</name><operator>.</operator><name>num</name><operator>.</operator><name>as_signed</name></name> <operator>=</operator>

<operator>(</operator><name>mp_intmax_t</name><operator>)</operator><call><name>va_arg</name><argument_list>(<argument><expr><name>arglist</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<switch>switch<condition>(<expr><name><name>vto</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>FORMAT_STRING</name></expr>:</case>

<expr_stmt><expr><name><name>vto</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>data</name><operator>.</operator><name>str</name></name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>arglist</name></expr></argument>, <argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>FORMAT_INTPTR</name></expr>:</case>

<case>case <expr><name>FORMAT_UNKNOWN</name></expr>:</case>

<case>case <expr><name>FORMAT_PTR</name></expr>:</case>

<expr_stmt><expr><name><name>vto</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>data</name><operator>.</operator><name>ptr</name></name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>arglist</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>FORMAT_INT</name></expr>:</case>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LONG_LONG_TYPE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>vto</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>&amp;</operator> <name>FLAGS_LONGLONG</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>vto</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>&amp;</operator> <name>FLAGS_UNSIGNED</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>vto</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>data</name><operator>.</operator><name>num</name><operator>.</operator><name>as_unsigned</name></name> <operator>=</operator>

<operator>(</operator><name>mp_uintmax_t</name><operator>)</operator><call><name>va_arg</name><argument_list>(<argument><expr><name>arglist</name></expr></argument>, <argument><expr><name>mp_uintmax_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>(<expr><name><name>vto</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>&amp;</operator> <name>FLAGS_LONGLONG</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>vto</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>data</name><operator>.</operator><name>num</name><operator>.</operator><name>as_signed</name></name> <operator>=</operator>

<operator>(</operator><name>mp_intmax_t</name><operator>)</operator><call><name>va_arg</name><argument_list>(<argument><expr><name>arglist</name></expr></argument>, <argument><expr><name>mp_intmax_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>vto</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>&amp;</operator> <name>FLAGS_LONG</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>vto</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>&amp;</operator> <name>FLAGS_UNSIGNED</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>vto</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>data</name><operator>.</operator><name>num</name><operator>.</operator><name>as_unsigned</name></name> <operator>=</operator>

<operator>(</operator><name>mp_uintmax_t</name><operator>)</operator><macro><name>va_arg</name><argument_list>(<argument>arglist</argument>, <argument>unsigned long</argument>)</argument_list></macro></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>(<expr><name><name>vto</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>&amp;</operator> <name>FLAGS_LONG</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>vto</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>data</name><operator>.</operator><name>num</name><operator>.</operator><name>as_signed</name></name> <operator>=</operator>

<operator>(</operator><name>mp_intmax_t</name><operator>)</operator><call><name>va_arg</name><argument_list>(<argument><expr><name>arglist</name></expr></argument>, <argument><expr><name>long</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>(<expr><name><name>vto</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>&amp;</operator> <name>FLAGS_UNSIGNED</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>vto</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>data</name><operator>.</operator><name>num</name><operator>.</operator><name>as_unsigned</name></name> <operator>=</operator>

<operator>(</operator><name>mp_uintmax_t</name><operator>)</operator><macro><name>va_arg</name><argument_list>(<argument>arglist</argument>, <argument>unsigned int</argument>)</argument_list></macro></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>vto</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>data</name><operator>.</operator><name>num</name><operator>.</operator><name>as_signed</name></name> <operator>=</operator>

<operator>(</operator><name>mp_intmax_t</name><operator>)</operator><call><name>va_arg</name><argument_list>(<argument><expr><name>arglist</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>FORMAT_DOUBLE</name></expr>:</case>

<expr_stmt><expr><name><name>vto</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>data</name><operator>.</operator><name>dnum</name></name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>arglist</name></expr></argument>, <argument><expr><name>double</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>FORMAT_WIDTH</name></expr>:</case>

<expr_stmt><expr><name><name>vto</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <name>FORMAT_INT</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dprintf_formatf</name><parameter_list>(

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, 

<parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>stream</name>)<parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, 

<parameter><decl><type><name>va_list</name></type> <name>ap_save</name></decl></parameter>)</parameter_list> 

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>digits</name> <init>= <expr><name>lower_digits</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>done</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>param</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>long</name></type> <name>param_num</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>va_stack_t</name></type> <name><name>vto</name><index>[<expr><name>MAX_PARAMETERS</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name><name>endpos</name><index>[<expr><name>MAX_PARAMETERS</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>work</name><index>[<expr><name>BUFFSIZE</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>va_stack_t</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>workend</name> <init>= <expr><operator>&amp;</operator><name><name>work</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name>work</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><call><name>dprintf_Pass1</name><argument_list>(<argument><expr><name>format</name></expr></argument>, <argument><expr><name>vto</name></expr></argument>, <argument><expr><name>endpos</name></expr></argument>, <argument><expr><name>ap_save</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>end</name> <operator>=</operator> <operator>&amp;</operator><name><name>endpos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt> 

<expr_stmt><expr><name>f</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>format</name></expr>;</expr_stmt>

<while>while<condition>(<expr><operator>*</operator><name>f</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>is_alt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>width</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>prec</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>is_neg</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>base</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mp_uintmax_t</name></type> <name>num</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mp_intmax_t</name></type> <name>signed_num</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>w</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>*</operator><name>f</name> <operator>!=</operator> <literal type="char">'%'</literal></expr>)</condition> <block>{<block_content>

<do>do <block>{<block_content>

<expr_stmt><expr><call><name>OUTCHAR</name><argument_list>(<argument><expr><operator>*</operator><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block> while<condition>(<expr><operator>*</operator><operator>++</operator><name>f</name> <operator>&amp;&amp;</operator> <operator>(</operator><literal type="char">'%'</literal> <operator>!=</operator> <operator>*</operator><name>f</name><operator>)</operator></expr>)</condition>;</do>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>++</operator><name>f</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>*</operator><name>f</name> <operator>==</operator> <literal type="char">'%'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>++</operator><name>f</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>OUTCHAR</name><argument_list>(<argument><expr><literal type="char">'%'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>param</name> <operator>=</operator> <call><name>dprintf_DollarString</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>param</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>param</name> <operator>=</operator> <name>param_num</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><operator>--</operator><name>param</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>param_num</name><operator>++</operator></expr>;</expr_stmt> 

<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>&amp;</operator><name><name>vto</name><index>[<expr><name>param</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FLAGS_WIDTHPARAM</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>width</name> <operator>=</operator> <operator>(</operator><name>long</name><operator>)</operator><name><name>vto</name><index>[<expr><name><name>p</name><operator>-&gt;</operator><name>width</name></name></expr>]</index></name><operator>.</operator><name><name>data</name><operator>.</operator><name>num</name><operator>.</operator><name>as_signed</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>param_num</name><operator>++</operator></expr>;</expr_stmt> 

<if_stmt><if>if<condition>(<expr><name>width</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>width</name> <operator>=</operator> <operator>-</operator><name>width</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>FLAGS_LEFT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>FLAGS_PAD_NIL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>width</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FLAGS_PRECPARAM</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>prec</name> <operator>=</operator> <operator>(</operator><name>long</name><operator>)</operator><name><name>vto</name><index>[<expr><name><name>p</name><operator>-&gt;</operator><name>precision</name></name></expr>]</index></name><operator>.</operator><name><name>data</name><operator>.</operator><name>num</name><operator>.</operator><name>as_signed</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>param_num</name><operator>++</operator></expr>;</expr_stmt> 

<if_stmt><if>if<condition>(<expr><name>prec</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>prec</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FLAGS_PREC</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>prec</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>precision</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>prec</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>is_alt</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FLAGS_ALT</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<switch>switch<condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>FORMAT_INT</name></expr>:</case>

<expr_stmt><expr><name>num</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>num</name><operator>.</operator><name>as_unsigned</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FLAGS_CHAR</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FLAGS_LEFT</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<while>while<condition>(<expr><operator>--</operator><name>width</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>OUTCHAR</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>OUTCHAR</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>)</operator> <name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FLAGS_LEFT</name></expr>)</condition><block type="pseudo"><block_content>

<while>while<condition>(<expr><operator>--</operator><name>width</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>OUTCHAR</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while></block_content></block></if></if_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FLAGS_OCTAL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>base</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<goto>goto <name>unsigned_number</name>;</goto>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FLAGS_HEX</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>digits</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FLAGS_UPPER</name><operator>)</operator></expr>?</condition><then> <expr><name>upper_digits</name></expr> </then><else>: <expr><name>lower_digits</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>base</name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<goto>goto <name>unsigned_number</name>;</goto>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FLAGS_UNSIGNED</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>base</name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt>

<goto>goto <name>unsigned_number</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>base</name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>is_neg</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>num</name><operator>.</operator><name>as_signed</name></name> <operator>&lt;</operator> <operator>(</operator><name>mp_intmax_t</name><operator>)</operator><literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>is_neg</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>signed_num</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>num</name><operator>.</operator><name>as_signed</name></name> <operator>+</operator> <operator>(</operator><name>mp_intmax_t</name><operator>)</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>signed_num</name> <operator>=</operator> <operator>-</operator><name>signed_num</name></expr>;</expr_stmt>

<expr_stmt><expr><name>num</name> <operator>=</operator> <operator>(</operator><name>mp_uintmax_t</name><operator>)</operator><name>signed_num</name></expr>;</expr_stmt>

<expr_stmt><expr><name>num</name> <operator>+=</operator> <operator>(</operator><name>mp_uintmax_t</name><operator>)</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<goto>goto <name>number</name>;</goto>

<label><name>unsigned_number</name>:</label>

<expr_stmt><expr><name>is_neg</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<label><name>number</name>:</label>

<if_stmt><if>if<condition>(<expr><name>prec</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>prec</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>w</name> <operator>=</operator> <name>workend</name></expr>;</expr_stmt>

<while>while<condition>(<expr><name>num</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>w</name><operator>--</operator> <operator>=</operator> <name><name>digits</name><index>[<expr><name>num</name> <operator>%</operator> <name>base</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>num</name> <operator>/=</operator> <name>base</name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>width</name> <operator>-=</operator> <operator>(</operator><name>long</name><operator>)</operator><operator>(</operator><name>workend</name> <operator>-</operator> <name>w</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>prec</name> <operator>-=</operator> <operator>(</operator><name>long</name><operator>)</operator><operator>(</operator><name>workend</name> <operator>-</operator> <name>w</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>is_alt</name> <operator>&amp;&amp;</operator> <name>base</name> <operator>==</operator> <literal type="number">8</literal> <operator>&amp;&amp;</operator> <name>prec</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>w</name><operator>--</operator> <operator>=</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>--</operator><name>width</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>prec</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>width</name> <operator>-=</operator> <name>prec</name></expr>;</expr_stmt>

<while>while<condition>(<expr><name>prec</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>w</name><operator>--</operator> <operator>=</operator> <literal type="char">'0'</literal></expr>;</expr_stmt></block_content></block></while>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>is_alt</name> <operator>&amp;&amp;</operator> <name>base</name> <operator>==</operator> <literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>width</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>is_neg</name> <operator>||</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FLAGS_SHOWSIGN</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FLAGS_SPACE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>--</operator><name>width</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FLAGS_LEFT</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FLAGS_PAD_NIL</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<while>while<condition>(<expr><name>width</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>OUTCHAR</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>is_neg</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>OUTCHAR</name><argument_list>(<argument><expr><literal type="char">'-'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FLAGS_SHOWSIGN</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>OUTCHAR</name><argument_list>(<argument><expr><literal type="char">'+'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FLAGS_SPACE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>OUTCHAR</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>is_alt</name> <operator>&amp;&amp;</operator> <name>base</name> <operator>==</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>OUTCHAR</name><argument_list>(<argument><expr><literal type="char">'0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FLAGS_UPPER</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>OUTCHAR</name><argument_list>(<argument><expr><literal type="char">'X'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>OUTCHAR</name><argument_list>(<argument><expr><literal type="char">'x'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FLAGS_LEFT</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FLAGS_PAD_NIL</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<while>while<condition>(<expr><name>width</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>OUTCHAR</name><argument_list>(<argument><expr><literal type="char">'0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while></block_content></block></if></if_stmt>

<while>while<condition>(<expr><operator>++</operator><name>w</name> <operator>&lt;=</operator> <name>workend</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>OUTCHAR</name><argument_list>(<argument><expr><operator>*</operator><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if<condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FLAGS_LEFT</name></expr>)</condition><block type="pseudo"><block_content>

<while>while<condition>(<expr><name>width</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>OUTCHAR</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>FORMAT_STRING</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>null</name><index>[]</index></name> <init>= <expr><literal type="string">"(nil)"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>

<expr_stmt><expr><name>str</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>str</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>str</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>prec</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name>prec</name> <operator>&gt;=</operator> <operator>(</operator><name>long</name><operator>)</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>null</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>str</name> <operator>=</operator> <name>null</name></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>null</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>(</operator><operator>~</operator><name>FLAGS_ALT</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>str</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name>prec</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>prec</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>width</name> <operator>-=</operator> <ternary><condition><expr><operator>(</operator><name>len</name> <operator>&gt;</operator> <name>LONG_MAX</name><operator>)</operator></expr> ?</condition><then> <expr><name>LONG_MAX</name></expr> </then><else>: <expr><operator>(</operator><name>long</name><operator>)</operator><name>len</name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FLAGS_ALT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>OUTCHAR</name><argument_list>(<argument><expr><literal type="char">'"'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>flags</name></name><operator>&amp;</operator><name>FLAGS_LEFT</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<while>while<condition>(<expr><name>width</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>OUTCHAR</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while></block_content></block></if></if_stmt>

<for>for<control>(<init>;</init> <condition><expr><name>len</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>str</name></expr>;</condition> <incr><expr><name>len</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>OUTCHAR</name><argument_list>(<argument><expr><operator>*</operator><name>str</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if<condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>flags</name></name><operator>&amp;</operator><name>FLAGS_LEFT</name></expr>)</condition><block type="pseudo"><block_content>

<while>while<condition>(<expr><name>width</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>OUTCHAR</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FLAGS_ALT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>OUTCHAR</name><argument_list>(<argument><expr><literal type="char">'"'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block>

<break>break;</break>

<case>case <expr><name>FORMAT_PTR</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>ptr</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>ptr</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>base</name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>digits</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FLAGS_UPPER</name><operator>)</operator></expr>?</condition><then> <expr><name>upper_digits</name></expr> </then><else>: <expr><name>lower_digits</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>is_alt</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>num</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <name>ptr</name></expr>;</expr_stmt>

<expr_stmt><expr><name>is_neg</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<goto>goto <name>number</name>;</goto>

</block_content>}</block></if>

<else>else <block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>strnil</name><index>[]</index></name> <init>= <expr><literal type="string">"(nil)"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>point</name></decl>;</decl_stmt>

<expr_stmt><expr><name>width</name> <operator>-=</operator> <operator>(</operator><name>long</name><operator>)</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>strnil</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FLAGS_LEFT</name></expr>)</condition><block type="pseudo"><block_content>

<while>while<condition>(<expr><name>width</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>OUTCHAR</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while></block_content></block></if></if_stmt>

<for>for<control>(<init><expr><name>point</name> <operator>=</operator> <name>strnil</name></expr>;</init> <condition><expr><operator>*</operator><name>point</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>;</condition> <incr><expr><operator>++</operator><name>point</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>OUTCHAR</name><argument_list>(<argument><expr><operator>*</operator><name>point</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if<condition>(<expr><operator>!</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FLAGS_LEFT</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<while>while<condition>(<expr><name>width</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>OUTCHAR</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block>

<break>break;</break>

<case>case <expr><name>FORMAT_DOUBLE</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>formatbuf</name><index>[<expr><literal type="number">32</literal></expr>]</index></name><init>=<expr><literal type="string">"%"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>fptr</name> <init>= <expr><operator>&amp;</operator><name><name>formatbuf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>left</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>formatbuf</name></expr></argument>)</argument_list></sizeof><operator>-</operator><call><name>strlen</name><argument_list>(<argument><expr><name>formatbuf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<expr_stmt><expr><name>width</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FLAGS_WIDTH</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>width</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FLAGS_WIDTHPARAM</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>width</name> <operator>=</operator> <operator>(</operator><name>long</name><operator>)</operator><name><name>vto</name><index>[<expr><name><name>p</name><operator>-&gt;</operator><name>width</name></name></expr>]</index></name><operator>.</operator><name><name>data</name><operator>.</operator><name>num</name><operator>.</operator><name>as_signed</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>prec</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FLAGS_PREC</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>prec</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>precision</name></name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FLAGS_PRECPARAM</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>prec</name> <operator>=</operator> <operator>(</operator><name>long</name><operator>)</operator><name><name>vto</name><index>[<expr><name><name>p</name><operator>-&gt;</operator><name>precision</name></name></expr>]</index></name><operator>.</operator><name><name>data</name><operator>.</operator><name>num</name><operator>.</operator><name>as_signed</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FLAGS_LEFT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>fptr</name><operator>++</operator> <operator>=</operator> <literal type="char">'-'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FLAGS_SHOWSIGN</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>fptr</name><operator>++</operator> <operator>=</operator> <literal type="char">'+'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FLAGS_SPACE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>fptr</name><operator>++</operator> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FLAGS_ALT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>fptr</name><operator>++</operator> <operator>=</operator> <literal type="char">'#'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>fptr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>width</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>width</name> <operator>&gt;=</operator> <operator>(</operator><name>long</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>work</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>width</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>work</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>curl_msnprintf</name><argument_list>(<argument><expr><name>fptr</name></expr></argument>, <argument><expr><name>left</name></expr></argument>, <argument><expr><literal type="string">"%ld"</literal></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>fptr</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>

<expr_stmt><expr><name>left</name> <operator>-=</operator> <name>len</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>prec</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>maxprec</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>work</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>val</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>dnum</name></name></expr></init></decl>;</decl_stmt>

<while>while<condition>(<expr><name>val</name> <operator>&gt;=</operator> <literal type="number">10.0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>val</name> <operator>/=</operator> <literal type="number">10</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>maxprec</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if<condition>(<expr><name>prec</name> <operator>&gt;</operator> <operator>(</operator><name>long</name><operator>)</operator><name>maxprec</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>prec</name> <operator>=</operator> <operator>(</operator><name>long</name><operator>)</operator><name>maxprec</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>curl_msnprintf</name><argument_list>(<argument><expr><name>fptr</name></expr></argument>, <argument><expr><name>left</name></expr></argument>, <argument><expr><literal type="string">".%ld"</literal></expr></argument>, <argument><expr><name>prec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>fptr</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FLAGS_LONG</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>fptr</name><operator>++</operator> <operator>=</operator> <literal type="char">'l'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FLAGS_FLOATE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>fptr</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><operator>(</operator><ternary><condition><expr><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FLAGS_UPPER</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="char">'E'</literal></expr></then><else>:<expr><literal type="char">'e'</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FLAGS_FLOATG</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>fptr</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><operator>(</operator><ternary><condition><expr><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FLAGS_UPPER</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="char">'G'</literal></expr> </then><else>: <expr><literal type="char">'g'</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>fptr</name><operator>++</operator> <operator>=</operator> <literal type="char">'f'</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><operator>*</operator><name>fptr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<expr_stmt><expr><operator>(</operator><name>sprintf</name><operator>)</operator><operator>(</operator><name>work</name><operator>,</operator> <name>formatbuf</name><operator>,</operator> <name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>dnum</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DEBUGASSERT</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>work</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>work</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>fptr</name> <operator>=</operator> <name>work</name></expr>;</init> <condition><expr><operator>*</operator><name>fptr</name></expr>;</condition> <incr><expr><name>fptr</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>OUTCHAR</name><argument_list>(<argument><expr><operator>*</operator><name>fptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block>

<break>break;</break>

<case>case <expr><name>FORMAT_INTPTR</name></expr>:</case>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LONG_LONG_TYPE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FLAGS_LONGLONG</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>LONG_LONG_TYPE</name> <operator>*</operator><operator>)</operator> <name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>ptr</name></name> <operator>=</operator> <operator>(</operator><name>LONG_LONG_TYPE</name><operator>)</operator><name>done</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

if<condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FLAGS_LONG</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>long</name> <operator>*</operator><operator>)</operator> <name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>ptr</name></name> <operator>=</operator> <operator>(</operator><name>long</name><operator>)</operator><name>done</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>(<expr><operator>!</operator><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FLAGS_SHORT</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator> <name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>ptr</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>done</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>short</name> <operator>*</operator><operator>)</operator> <name><name>p</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>ptr</name></name> <operator>=</operator> <operator>(</operator><name>short</name><operator>)</operator><name>done</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<break>break;</break>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><name>f</name> <operator>=</operator> <operator>*</operator><name>end</name><operator>++</operator></expr>;</expr_stmt> 

</block_content>}</block></while>

<return>return <expr><name>done</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>addbyter</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>output</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>nsprintf</name></name> <modifier>*</modifier></type><name>infop</name> <init>= <expr><operator>(</operator>struct <name>nsprintf</name> <operator>*</operator><operator>)</operator><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>outc</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name>output</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>infop</name><operator>-&gt;</operator><name>length</name></name> <operator>&lt;</operator> <name><name>infop</name><operator>-&gt;</operator><name>max</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>infop</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>outc</name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>infop</name><operator>-&gt;</operator><name>buffer</name></name><operator>++</operator></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>infop</name><operator>-&gt;</operator><name>length</name></name><operator>++</operator></expr>;</expr_stmt> 

<return>return <expr><name>outc</name></expr>;</return> 

</block_content>}</block></if></if_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>curl_mvsnprintf</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>maxlength</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>,

<parameter><decl><type><name>va_list</name></type> <name>ap_save</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>retcode</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>nsprintf</name></name></type> <name>info</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>info</name><operator>.</operator><name>buffer</name></name> <operator>=</operator> <name>buffer</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>.</operator><name>length</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>.</operator><name>max</name></name> <operator>=</operator> <name>maxlength</name></expr>;</expr_stmt>

<expr_stmt><expr><name>retcode</name> <operator>=</operator> <call><name>dprintf_formatf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><name>addbyter</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>ap_save</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>retcode</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>info</name><operator>.</operator><name>max</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>info</name><operator>.</operator><name>max</name></name> <operator>==</operator> <name><name>info</name><operator>.</operator><name>length</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>info</name><operator>.</operator><name>buffer</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>info</name><operator>.</operator><name>buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>retcode</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>curl_msnprintf</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>maxlength</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>retcode</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>va_list</name></type> <name>ap_save</name></decl>;</decl_stmt> 

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap_save</name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>retcode</name> <operator>=</operator> <call><name>curl_mvsnprintf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>maxlength</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>ap_save</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap_save</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>retcode</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>alloc_addbyter</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>output</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>asprintf</name></name> <modifier>*</modifier></type><name>infop</name> <init>= <expr><operator>(</operator>struct <name>asprintf</name> <operator>*</operator><operator>)</operator><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>outc</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name>output</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>infop</name><operator>-&gt;</operator><name>buffer</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>infop</name><operator>-&gt;</operator><name>buffer</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>infop</name><operator>-&gt;</operator><name>buffer</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>infop</name><operator>-&gt;</operator><name>fail</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>infop</name><operator>-&gt;</operator><name>alloc</name></name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>infop</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name><name>infop</name><operator>-&gt;</operator><name>len</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;=</operator> <name><name>infop</name><operator>-&gt;</operator><name>alloc</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>newptr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>newsize</name> <init>= <expr><name><name>infop</name><operator>-&gt;</operator><name>alloc</name></name><operator>*</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>newsize</name> <operator>&gt;</operator> <name><name>infop</name><operator>-&gt;</operator><name>alloc</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>newptr</name> <operator>=</operator> <call><name>realloc</name><argument_list>(<argument><expr><name><name>infop</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><name>newsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>newptr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>infop</name><operator>-&gt;</operator><name>fail</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>infop</name><operator>-&gt;</operator><name>buffer</name></name> <operator>=</operator> <name>newptr</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>infop</name><operator>-&gt;</operator><name>alloc</name></name> <operator>=</operator> <name>newsize</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>infop</name><operator>-&gt;</operator><name>buffer</name><index>[ <expr><name><name>infop</name><operator>-&gt;</operator><name>len</name></name></expr> ]</index></name> <operator>=</operator> <name>outc</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>infop</name><operator>-&gt;</operator><name>len</name></name><operator>++</operator></expr>;</expr_stmt>

<return>return <expr><name>outc</name></expr>;</return> 

</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>curl_maprintf</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>va_list</name></type> <name>ap_save</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>retcode</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>asprintf</name></name></type> <name>info</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>info</name><operator>.</operator><name>buffer</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>.</operator><name>len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>.</operator><name>alloc</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>.</operator><name>fail</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap_save</name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>retcode</name> <operator>=</operator> <call><name>dprintf_formatf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><name>alloc_addbyter</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>ap_save</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap_save</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal> <operator>==</operator> <name>retcode</name><operator>)</operator> <operator>||</operator> <name><name>info</name><operator>.</operator><name>fail</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>info</name><operator>.</operator><name>alloc</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>info</name><operator>.</operator><name>alloc</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>info</name><operator>.</operator><name>buffer</name><index>[<expr><name><name>info</name><operator>.</operator><name>len</name></name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<return>return <expr><name><name>info</name><operator>.</operator><name>buffer</name></name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>strdup</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>curl_mvaprintf</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>ap_save</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>retcode</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>asprintf</name></name></type> <name>info</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>info</name><operator>.</operator><name>buffer</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>.</operator><name>len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>.</operator><name>alloc</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>.</operator><name>fail</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>retcode</name> <operator>=</operator> <call><name>dprintf_formatf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><name>alloc_addbyter</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>ap_save</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal> <operator>==</operator> <name>retcode</name><operator>)</operator> <operator>||</operator> <name><name>info</name><operator>.</operator><name>fail</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>info</name><operator>.</operator><name>alloc</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>info</name><operator>.</operator><name>alloc</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>info</name><operator>.</operator><name>buffer</name><index>[<expr><name><name>info</name><operator>.</operator><name>len</name></name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<return>return <expr><name><name>info</name><operator>.</operator><name>buffer</name></name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>strdup</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>storebuffer</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>output</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>buffer</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>outc</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name>output</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><operator>*</operator><name>buffer</name> <operator>=</operator> <name>outc</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>buffer</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>

<return>return <expr><name>outc</name></expr>;</return> 

</block_content>}</block></function>

<function><type><name>int</name></type> <name>curl_msprintf</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>va_list</name></type> <name>ap_save</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>retcode</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap_save</name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>retcode</name> <operator>=</operator> <call><name>dprintf_formatf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><name>storebuffer</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>ap_save</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap_save</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>buffer</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<return>return <expr><name>retcode</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>curl_mprintf</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>retcode</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>va_list</name></type> <name>ap_save</name></decl>;</decl_stmt> 

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap_save</name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>retcode</name> <operator>=</operator> <call><name>dprintf_formatf</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><name>fputc</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>ap_save</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap_save</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>retcode</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>curl_mfprintf</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>whereto</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>retcode</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>va_list</name></type> <name>ap_save</name></decl>;</decl_stmt> 

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap_save</name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>retcode</name> <operator>=</operator> <call><name>dprintf_formatf</name><argument_list>(<argument><expr><name>whereto</name></expr></argument>, <argument><expr><name>fputc</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>ap_save</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap_save</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>retcode</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>curl_mvsprintf</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>ap_save</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>retcode</name></decl>;</decl_stmt>

<expr_stmt><expr><name>retcode</name> <operator>=</operator> <call><name>dprintf_formatf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><name>storebuffer</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>ap_save</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>buffer</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<return>return <expr><name>retcode</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>curl_mvprintf</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>ap_save</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>dprintf_formatf</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><name>fputc</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>ap_save</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>curl_mvfprintf</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>whereto</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>ap_save</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>dprintf_formatf</name><argument_list>(<argument><expr><name>whereto</name></expr></argument>, <argument><expr><name>fputc</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>ap_save</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

</unit>
