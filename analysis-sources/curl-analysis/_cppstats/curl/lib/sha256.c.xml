<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\curl-analysis\_cppstats\curl\lib\sha256.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_setup.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_CRYPTO_AUTH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"warnless.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_sha256.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_OPENSSL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;openssl/opensslv.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>OPENSSL_VERSION_NUMBER</name> <operator>&gt;=</operator> <literal type="number">0x0090800fL</literal><operator>)</operator></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USE_OPENSSL_SHA256</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_MBEDTLS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mbedtls/version.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive><expr><operator>(</operator><name>MBEDTLS_VERSION_NUMBER</name> <operator>&gt;=</operator> <literal type="number">0x02070000</literal><operator>)</operator></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAS_RESULT_CODE_BASED_FUNCTIONS</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_OPENSSL_SHA256</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;openssl/sha.h&gt;</cpp:file></cpp:include>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_GNUTLS_NETTLE</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;nettle/sha.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_memory.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memdebug.h"</cpp:file></cpp:include>

<typedef>typedef <type><name><name>struct</name> <name>sha256_ctx</name></name></type> <name>SHA256_CTX</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type> <name>SHA256_Init</name><parameter_list>(<parameter><decl><type><name>SHA256_CTX</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>sha256_init</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>SHA256_Update</name><parameter_list>(<parameter><decl><type><name>SHA256_CTX</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>length</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>sha256_update</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>SHA256_Final</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>digest</name></decl></parameter>, <parameter><decl><type><name>SHA256_CTX</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>sha256_digest</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>SHA256_DIGEST_SIZE</name></expr></argument>, <argument><expr><name>digest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_GNUTLS</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;gcrypt.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_memory.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memdebug.h"</cpp:file></cpp:include>

<typedef>typedef <type><name>gcry_md_hd_t</name></type> <name>SHA256_CTX</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type> <name>SHA256_Init</name><parameter_list>(<parameter><decl><type><name>SHA256_CTX</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>gcry_md_open</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>GCRY_MD_SHA256</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>SHA256_Update</name><parameter_list>(<parameter><decl><type><name>SHA256_CTX</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>length</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>gcry_md_write</name><argument_list>(<argument><expr><operator>*</operator><name>ctx</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>SHA256_Final</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>digest</name></decl></parameter>, <parameter><decl><type><name>SHA256_CTX</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>digest</name></expr></argument>, <argument><expr><call><name>gcry_md_read</name><argument_list>(<argument><expr><operator>*</operator><name>ctx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>SHA256_DIGEST_LENGTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gcry_md_close</name><argument_list>(<argument><expr><operator>*</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_MBEDTLS</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mbedtls/sha256.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_memory.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memdebug.h"</cpp:file></cpp:include>

<typedef>typedef <type><name>mbedtls_sha256_context</name></type> <name>SHA256_CTX</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type> <name>SHA256_Init</name><parameter_list>(<parameter><decl><type><name>SHA256_CTX</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAS_RESULT_CODE_BASED_FUNCTIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>mbedtls_sha256_starts</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>mbedtls_sha256_starts_ret</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>SHA256_Update</name><parameter_list>(<parameter><decl><type><name>SHA256_CTX</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>length</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAS_RESULT_CODE_BASED_FUNCTIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>mbedtls_sha256_update</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>mbedtls_sha256_update_ret</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>SHA256_Final</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>digest</name></decl></parameter>, <parameter><decl><type><name>SHA256_CTX</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAS_RESULT_CODE_BASED_FUNCTIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>mbedtls_sha256_finish</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>digest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>mbedtls_sha256_finish_ret</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>digest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>__MAC_OS_X_VERSION_MAX_ALLOWED</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>__MAC_OS_X_VERSION_MAX_ALLOWED</name> <operator>&gt;=</operator> <literal type="number">1040</literal><operator>)</operator><operator>)</operator> <operator>||</operator> <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>__IPHONE_OS_VERSION_MAX_ALLOWED</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>__IPHONE_OS_VERSION_MAX_ALLOWED</name> <operator>&gt;=</operator> <literal type="number">20000</literal><operator>)</operator><operator>)</operator></expr></cpp:elif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;CommonCrypto/CommonDigest.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_memory.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memdebug.h"</cpp:file></cpp:include>

<typedef>typedef <type><name>CC_SHA256_CTX</name></type> <name>SHA256_CTX</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type> <name>SHA256_Init</name><parameter_list>(<parameter><decl><type><name>SHA256_CTX</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>CC_SHA256_Init</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>SHA256_Update</name><parameter_list>(<parameter><decl><type><name>SHA256_CTX</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>length</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>CC_SHA256_Update</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>SHA256_Final</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>digest</name></decl></parameter>, <parameter><decl><type><name>SHA256_CTX</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>CC_SHA256_Final</name><argument_list>(<argument><expr><name>digest</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_WIN32_CRYPTO</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;wincrypt.h&gt;</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>HCRYPTPROV</name></type> <name>hCryptProv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HCRYPTHASH</name></type> <name>hHash</name></decl>;</decl_stmt>

}</block></struct></type> <name>SHA256_CTX</name>;</typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CALG_SHA_256</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CALG_SHA_256</name></cpp:macro> <cpp:value>0x0000800c</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type> <name>SHA256_Init</name><parameter_list>(<parameter><decl><type><name>SHA256_CTX</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>CryptAcquireContext</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>hCryptProv</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>PROV_RSA_AES</name></expr></argument>,

<argument><expr><name>CRYPT_VERIFYCONTEXT</name> <operator>|</operator> <name>CRYPT_SILENT</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>CryptCreateHash</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>hCryptProv</name></name></expr></argument>, <argument><expr><name>CALG_SHA_256</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>hHash</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>SHA256_Update</name><parameter_list>(<parameter><decl><type><name>SHA256_CTX</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>length</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>CryptHashData</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>hHash</name></name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>data</name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>SHA256_Final</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>digest</name></decl></parameter>, <parameter><decl><type><name>SHA256_CTX</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>length</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>CryptGetHashParam</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>hHash</name></name></expr></argument>, <argument><expr><name>HP_HASHVAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>length</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>length</name> <operator>==</operator> <name>SHA256_DIGEST_LENGTH</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>CryptGetHashParam</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>hHash</name></name></expr></argument>, <argument><expr><name>HP_HASHVAL</name></expr></argument>, <argument><expr><name>digest</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>length</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>hHash</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>CryptDestroyHash</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>hHash</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>hCryptProv</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>CryptReleaseContext</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>hCryptProv</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WPA_GET_BE32</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((((unsigned long)(a)[0]) &lt;&lt; 24) | (((unsigned long)(a)[1]) &lt;&lt; 16) | (((unsigned long)(a)[2]) &lt;&lt; 8) | ((unsigned long)(a)[3]))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WPA_PUT_BE32</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>val</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { (a)[0] = (unsigned char)((((unsigned long) (val)) &gt;&gt; 24) &amp; 0xff); (a)[1] = (unsigned char)((((unsigned long) (val)) &gt;&gt; 16) &amp; 0xff); (a)[2] = (unsigned char)((((unsigned long) (val)) &gt;&gt; 8) &amp; 0xff); (a)[3] = (unsigned char)(((unsigned long) (val)) &amp; 0xff); } while(0)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LONGLONG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WPA_PUT_BE64</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>val</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { (a)[0] = (unsigned char)(((unsigned long long)(val)) &gt;&gt; 56); (a)[1] = (unsigned char)(((unsigned long long)(val)) &gt;&gt; 48); (a)[2] = (unsigned char)(((unsigned long long)(val)) &gt;&gt; 40); (a)[3] = (unsigned char)(((unsigned long long)(val)) &gt;&gt; 32); (a)[4] = (unsigned char)(((unsigned long long)(val)) &gt;&gt; 24); (a)[5] = (unsigned char)(((unsigned long long)(val)) &gt;&gt; 16); (a)[6] = (unsigned char)(((unsigned long long)(val)) &gt;&gt; 8); (a)[7] = (unsigned char)(((unsigned long long)(val)) &amp; 0xff); } while(0)</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WPA_PUT_BE64</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>val</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { (a)[0] = (unsigned char)(((unsigned __int64)(val)) &gt;&gt; 56); (a)[1] = (unsigned char)(((unsigned __int64)(val)) &gt;&gt; 48); (a)[2] = (unsigned char)(((unsigned __int64)(val)) &gt;&gt; 40); (a)[3] = (unsigned char)(((unsigned __int64)(val)) &gt;&gt; 32); (a)[4] = (unsigned char)(((unsigned __int64)(val)) &gt;&gt; 24); (a)[5] = (unsigned char)(((unsigned __int64)(val)) &gt;&gt; 16); (a)[6] = (unsigned char)(((unsigned __int64)(val)) &gt;&gt; 8); (a)[7] = (unsigned char)(((unsigned __int64)(val)) &amp; 0xff); } while(0)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><struct>struct <name>sha256_state</name> <block>{

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LONGLONG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>length</name></decl>;</decl_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>unsigned</name> <name>__int64</name></type> <name>length</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name><name>state</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>, <name>curlen</name>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>

}</block></struct></type> <name>SHA256_CTX</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>long</name></type> <name><name>K</name><index>[<expr><literal type="number">64</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="number">0x428a2f98UL</literal></expr>, <expr><literal type="number">0x71374491UL</literal></expr>, <expr><literal type="number">0xb5c0fbcfUL</literal></expr>, <expr><literal type="number">0xe9b5dba5UL</literal></expr>, <expr><literal type="number">0x3956c25bUL</literal></expr>,

<expr><literal type="number">0x59f111f1UL</literal></expr>, <expr><literal type="number">0x923f82a4UL</literal></expr>, <expr><literal type="number">0xab1c5ed5UL</literal></expr>, <expr><literal type="number">0xd807aa98UL</literal></expr>, <expr><literal type="number">0x12835b01UL</literal></expr>,

<expr><literal type="number">0x243185beUL</literal></expr>, <expr><literal type="number">0x550c7dc3UL</literal></expr>, <expr><literal type="number">0x72be5d74UL</literal></expr>, <expr><literal type="number">0x80deb1feUL</literal></expr>, <expr><literal type="number">0x9bdc06a7UL</literal></expr>,

<expr><literal type="number">0xc19bf174UL</literal></expr>, <expr><literal type="number">0xe49b69c1UL</literal></expr>, <expr><literal type="number">0xefbe4786UL</literal></expr>, <expr><literal type="number">0x0fc19dc6UL</literal></expr>, <expr><literal type="number">0x240ca1ccUL</literal></expr>,

<expr><literal type="number">0x2de92c6fUL</literal></expr>, <expr><literal type="number">0x4a7484aaUL</literal></expr>, <expr><literal type="number">0x5cb0a9dcUL</literal></expr>, <expr><literal type="number">0x76f988daUL</literal></expr>, <expr><literal type="number">0x983e5152UL</literal></expr>,

<expr><literal type="number">0xa831c66dUL</literal></expr>, <expr><literal type="number">0xb00327c8UL</literal></expr>, <expr><literal type="number">0xbf597fc7UL</literal></expr>, <expr><literal type="number">0xc6e00bf3UL</literal></expr>, <expr><literal type="number">0xd5a79147UL</literal></expr>,

<expr><literal type="number">0x06ca6351UL</literal></expr>, <expr><literal type="number">0x14292967UL</literal></expr>, <expr><literal type="number">0x27b70a85UL</literal></expr>, <expr><literal type="number">0x2e1b2138UL</literal></expr>, <expr><literal type="number">0x4d2c6dfcUL</literal></expr>,

<expr><literal type="number">0x53380d13UL</literal></expr>, <expr><literal type="number">0x650a7354UL</literal></expr>, <expr><literal type="number">0x766a0abbUL</literal></expr>, <expr><literal type="number">0x81c2c92eUL</literal></expr>, <expr><literal type="number">0x92722c85UL</literal></expr>,

<expr><literal type="number">0xa2bfe8a1UL</literal></expr>, <expr><literal type="number">0xa81a664bUL</literal></expr>, <expr><literal type="number">0xc24b8b70UL</literal></expr>, <expr><literal type="number">0xc76c51a3UL</literal></expr>, <expr><literal type="number">0xd192e819UL</literal></expr>,

<expr><literal type="number">0xd6990624UL</literal></expr>, <expr><literal type="number">0xf40e3585UL</literal></expr>, <expr><literal type="number">0x106aa070UL</literal></expr>, <expr><literal type="number">0x19a4c116UL</literal></expr>, <expr><literal type="number">0x1e376c08UL</literal></expr>,

<expr><literal type="number">0x2748774cUL</literal></expr>, <expr><literal type="number">0x34b0bcb5UL</literal></expr>, <expr><literal type="number">0x391c0cb3UL</literal></expr>, <expr><literal type="number">0x4ed8aa4aUL</literal></expr>, <expr><literal type="number">0x5b9cca4fUL</literal></expr>,

<expr><literal type="number">0x682e6ff3UL</literal></expr>, <expr><literal type="number">0x748f82eeUL</literal></expr>, <expr><literal type="number">0x78a5636fUL</literal></expr>, <expr><literal type="number">0x84c87814UL</literal></expr>, <expr><literal type="number">0x8cc70208UL</literal></expr>,

<expr><literal type="number">0x90befffaUL</literal></expr>, <expr><literal type="number">0xa4506cebUL</literal></expr>, <expr><literal type="number">0xbef9a3f7UL</literal></expr>, <expr><literal type="number">0xc67178f2UL</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RORc</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((((unsigned long)(x) &amp; 0xFFFFFFFFUL) &gt;&gt; (unsigned long)((y) &amp; 31)) | ((unsigned long)(x) &lt;&lt; (unsigned long)(32 - ((y) &amp; 31)))) &amp; 0xFFFFFFFFUL)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Ch</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>,<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(z ^ (x &amp; (y ^ z)))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Maj</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>,<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x | y) &amp; z) | (x &amp; y))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>RORc((x), (n))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x)&amp;0xFFFFFFFFUL)&gt;&gt;(n))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Sigma0</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(S(x, 2) ^ S(x, 13) ^ S(x, 22))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Sigma1</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(S(x, 6) ^ S(x, 11) ^ S(x, 25))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Gamma0</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(S(x, 7) ^ S(x, 18) ^ R(x, 3))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Gamma1</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(S(x, 17) ^ S(x, 19) ^ R(x, 10))</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>sha256_compress</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sha256_state</name></name> <modifier>*</modifier></type><name>md</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name><name>S</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>W</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>S</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>md</name><operator>-&gt;</operator><name>state</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>W</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>WPA_GET_BE32</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>i</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">16</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>W</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>Gamma1</name><argument_list>(<argument><expr><name><name>W</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>W</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">7</literal></expr>]</index></name> <operator>+</operator> <call><name>Gamma0</name><argument_list>(<argument><expr><name><name>W</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">15</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator>

<name><name>W</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">16</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RND</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>,<parameter><type><name>e</name></type></parameter>,<parameter><type><name>f</name></type></parameter>,<parameter><type><name>g</name></type></parameter>,<parameter><type><name>h</name></type></parameter>,<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>unsigned long t0 = h + Sigma1(e) + Ch(e, f, g) + K[i] + W[i]; unsigned long t1 = Sigma0(a) + Maj(a, b, c); d += t0; h = t0 + t1;</cpp:value></cpp:define>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>t</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>RND</name><argument_list>(<argument><expr><name><name>S</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>S</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>S</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>S</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>S</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>S</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>S</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>S</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <name><name>S</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>S</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <name><name>S</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>S</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <name><name>S</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>S</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name><name>S</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>S</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name><name>S</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>S</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>S</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>S</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>S</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>S</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>S</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>S</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>md</name><operator>-&gt;</operator><name>state</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>md</name><operator>-&gt;</operator><name>state</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>S</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>SHA256_Init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sha256_state</name></name> <modifier>*</modifier></type><name>md</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>md</name><operator>-&gt;</operator><name>curlen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>md</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>md</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x6A09E667UL</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>md</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xBB67AE85UL</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>md</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x3C6EF372UL</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>md</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xA54FF53AUL</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>md</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x510E527FUL</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>md</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x9B05688CUL</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>md</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x1F83D9ABUL</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>md</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x5BE0CD19UL</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>SHA256_Update</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sha256_state</name></name> <modifier>*</modifier></type><name>md</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>inlen</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>n</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>block_size</name></cpp:macro> <cpp:value>64</cpp:value></cpp:define>

<if_stmt><if>if<condition>(<expr><name><name>md</name><operator>-&gt;</operator><name>curlen</name></name> <operator>&gt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>md</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<while>while<condition>(<expr><name>inlen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>md</name><operator>-&gt;</operator><name>curlen</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>inlen</name> <operator>&gt;=</operator> <name>block_size</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>sha256_compress</name><argument_list>(<argument><expr><name>md</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>in</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>md</name><operator>-&gt;</operator><name>length</name></name> <operator>+=</operator> <name>block_size</name> <operator>*</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>in</name> <operator>+=</operator> <name>block_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name>inlen</name> <operator>-=</operator> <name>block_size</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>CURLMIN</name><argument_list>(<argument><expr><name>inlen</name></expr></argument>, <argument><expr><operator>(</operator><name>block_size</name> <operator>-</operator> <name><name>md</name><operator>-&gt;</operator><name>curlen</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>md</name><operator>-&gt;</operator><name>buf</name></name> <operator>+</operator> <name><name>md</name><operator>-&gt;</operator><name>curlen</name></name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>md</name><operator>-&gt;</operator><name>curlen</name></name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>

<expr_stmt><expr><name>in</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>

<expr_stmt><expr><name>inlen</name> <operator>-=</operator> <name>n</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>md</name><operator>-&gt;</operator><name>curlen</name></name> <operator>==</operator> <name>block_size</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>sha256_compress</name><argument_list>(<argument><expr><name>md</name></expr></argument>, <argument><expr><name><name>md</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>md</name><operator>-&gt;</operator><name>length</name></name> <operator>+=</operator> <literal type="number">8</literal> <operator>*</operator> <name>block_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>md</name><operator>-&gt;</operator><name>curlen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>SHA256_Final</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>sha256_state</name></name> <modifier>*</modifier></type><name>md</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>md</name><operator>-&gt;</operator><name>curlen</name></name> <operator>&gt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>md</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>md</name><operator>-&gt;</operator><name>length</name></name> <operator>+=</operator> <name><name>md</name><operator>-&gt;</operator><name>curlen</name></name> <operator>*</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>md</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name><name>md</name><operator>-&gt;</operator><name>curlen</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><literal type="number">0x80</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>md</name><operator>-&gt;</operator><name>curlen</name></name> <operator>&gt;</operator> <literal type="number">56</literal></expr>)</condition> <block>{<block_content>

<while>while<condition>(<expr><name><name>md</name><operator>-&gt;</operator><name>curlen</name></name> <operator>&lt;</operator> <literal type="number">64</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>md</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name><name>md</name><operator>-&gt;</operator><name>curlen</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>sha256_compress</name><argument_list>(<argument><expr><name>md</name></expr></argument>, <argument><expr><name><name>md</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>md</name><operator>-&gt;</operator><name>curlen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<while>while<condition>(<expr><name><name>md</name><operator>-&gt;</operator><name>curlen</name></name> <operator>&lt;</operator> <literal type="number">56</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>md</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name><name>md</name><operator>-&gt;</operator><name>curlen</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>WPA_PUT_BE64</name><argument_list>(<argument><expr><name><name>md</name><operator>-&gt;</operator><name>buf</name></name> <operator>+</operator> <literal type="number">56</literal></expr></argument>, <argument><expr><name><name>md</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sha256_compress</name><argument_list>(<argument><expr><name>md</name></expr></argument>, <argument><expr><name><name>md</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>WPA_PUT_BE32</name><argument_list>(<argument><expr><name>out</name> <operator>+</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>i</name><operator>)</operator></expr></argument>, <argument><expr><name><name>md</name><operator>-&gt;</operator><name>state</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><name>void</name></type> <name>Curl_sha256it</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>length</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>SHA256_CTX</name></type> <name>ctx</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>SHA256_Init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SHA256_Update</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><call><name>curlx_uztoui</name><argument_list>(<argument><expr><name>length</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SHA256_Final</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</unit>
