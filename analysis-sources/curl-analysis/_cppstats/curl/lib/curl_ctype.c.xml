<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\curl-analysis\_cppstats\curl\lib\curl_ctype.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_setup.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DOES_CONVERSIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>_U</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_U</name></cpp:macro> <cpp:value>(1&lt;&lt;0)</cpp:value></cpp:define> 

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>_L</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_L</name></cpp:macro> <cpp:value>(1&lt;&lt;1)</cpp:value></cpp:define> 

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>_N</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_N</name></cpp:macro> <cpp:value>(1&lt;&lt;2)</cpp:value></cpp:define> 

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>_S</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_S</name></cpp:macro> <cpp:value>(1&lt;&lt;3)</cpp:value></cpp:define> 

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>_P</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_P</name></cpp:macro> <cpp:value>(1&lt;&lt;4)</cpp:value></cpp:define> 

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>_C</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_C</name></cpp:macro> <cpp:value>(1&lt;&lt;5)</cpp:value></cpp:define> 

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>_X</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_X</name></cpp:macro> <cpp:value>(1&lt;&lt;6)</cpp:value></cpp:define> 

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>_B</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_B</name></cpp:macro> <cpp:value>(1&lt;&lt;7)</cpp:value></cpp:define> 

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>ascii</name><index>[<expr><literal type="number">128</literal></expr>]</index></name> <init>= <expr><block>{

<expr><name>_C</name></expr>, <expr><name>_C</name></expr>, <expr><name>_C</name></expr>, <expr><name>_C</name></expr>, <expr><name>_C</name></expr>, <expr><name>_C</name></expr>, <expr><name>_C</name></expr>, <expr><name>_C</name></expr>,

<expr><name>_C</name></expr>, <expr><name>_C</name><operator>|</operator><name>_S</name></expr>, <expr><name>_C</name><operator>|</operator><name>_S</name></expr>, <expr><name>_C</name><operator>|</operator><name>_S</name></expr>, <expr><name>_C</name><operator>|</operator><name>_S</name></expr>, <expr><name>_C</name><operator>|</operator><name>_S</name></expr>, <expr><name>_C</name></expr>, <expr><name>_C</name></expr>,

<expr><name>_C</name></expr>, <expr><name>_C</name></expr>, <expr><name>_C</name></expr>, <expr><name>_C</name></expr>, <expr><name>_C</name></expr>, <expr><name>_C</name></expr>, <expr><name>_C</name></expr>, <expr><name>_C</name></expr>,

<expr><name>_C</name></expr>, <expr><name>_C</name></expr>, <expr><name>_C</name></expr>, <expr><name>_C</name></expr>, <expr><name>_C</name></expr>, <expr><name>_C</name></expr>, <expr><name>_C</name></expr>, <expr><name>_C</name></expr>,

<expr><name>_S</name><operator>|</operator><name>_B</name></expr>, <expr><name>_P</name></expr>, <expr><name>_P</name></expr>, <expr><name>_P</name></expr>, <expr><name>_P</name></expr>, <expr><name>_P</name></expr>, <expr><name>_P</name></expr>, <expr><name>_P</name></expr>,

<expr><name>_P</name></expr>, <expr><name>_P</name></expr>, <expr><name>_P</name></expr>, <expr><name>_P</name></expr>, <expr><name>_P</name></expr>, <expr><name>_P</name></expr>, <expr><name>_P</name></expr>, <expr><name>_P</name></expr>,

<expr><name>_N</name></expr>, <expr><name>_N</name></expr>, <expr><name>_N</name></expr>, <expr><name>_N</name></expr>, <expr><name>_N</name></expr>, <expr><name>_N</name></expr>, <expr><name>_N</name></expr>, <expr><name>_N</name></expr>,

<expr><name>_N</name></expr>, <expr><name>_N</name></expr>, <expr><name>_P</name></expr>, <expr><name>_P</name></expr>, <expr><name>_P</name></expr>, <expr><name>_P</name></expr>, <expr><name>_P</name></expr>, <expr><name>_P</name></expr>,

<expr><name>_P</name></expr>, <expr><name>_U</name><operator>|</operator><name>_X</name></expr>, <expr><name>_U</name><operator>|</operator><name>_X</name></expr>, <expr><name>_U</name><operator>|</operator><name>_X</name></expr>, <expr><name>_U</name><operator>|</operator><name>_X</name></expr>, <expr><name>_U</name><operator>|</operator><name>_X</name></expr>, <expr><name>_U</name><operator>|</operator><name>_X</name></expr>, <expr><name>_U</name></expr>,

<expr><name>_U</name></expr>, <expr><name>_U</name></expr>, <expr><name>_U</name></expr>, <expr><name>_U</name></expr>, <expr><name>_U</name></expr>, <expr><name>_U</name></expr>, <expr><name>_U</name></expr>, <expr><name>_U</name></expr>,

<expr><name>_U</name></expr>, <expr><name>_U</name></expr>, <expr><name>_U</name></expr>, <expr><name>_U</name></expr>, <expr><name>_U</name></expr>, <expr><name>_U</name></expr>, <expr><name>_U</name></expr>, <expr><name>_U</name></expr>,

<expr><name>_U</name></expr>, <expr><name>_U</name></expr>, <expr><name>_U</name></expr>, <expr><name>_P</name></expr>, <expr><name>_P</name></expr>, <expr><name>_P</name></expr>, <expr><name>_P</name></expr>, <expr><name>_P</name></expr>,

<expr><name>_P</name></expr>, <expr><name>_L</name><operator>|</operator><name>_X</name></expr>, <expr><name>_L</name><operator>|</operator><name>_X</name></expr>, <expr><name>_L</name><operator>|</operator><name>_X</name></expr>, <expr><name>_L</name><operator>|</operator><name>_X</name></expr>, <expr><name>_L</name><operator>|</operator><name>_X</name></expr>, <expr><name>_L</name><operator>|</operator><name>_X</name></expr>, <expr><name>_L</name></expr>,

<expr><name>_L</name></expr>, <expr><name>_L</name></expr>, <expr><name>_L</name></expr>, <expr><name>_L</name></expr>, <expr><name>_L</name></expr>, <expr><name>_L</name></expr>, <expr><name>_L</name></expr>, <expr><name>_L</name></expr>,

<expr><name>_L</name></expr>, <expr><name>_L</name></expr>, <expr><name>_L</name></expr>, <expr><name>_L</name></expr>, <expr><name>_L</name></expr>, <expr><name>_L</name></expr>, <expr><name>_L</name></expr>, <expr><name>_L</name></expr>,

<expr><name>_L</name></expr>, <expr><name>_L</name></expr>, <expr><name>_L</name></expr>, <expr><name>_P</name></expr>, <expr><name>_P</name></expr>, <expr><name>_P</name></expr>, <expr><name>_P</name></expr>, <expr><name>_C</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>Curl_isspace</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>c</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>c</name> <operator>&gt;=</operator> <literal type="number">0x80</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name><name>ascii</name><index>[<expr><name>c</name></expr>]</index></name> <operator>&amp;</operator> <name>_S</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>Curl_isdigit</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>c</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>c</name> <operator>&gt;=</operator> <literal type="number">0x80</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name><name>ascii</name><index>[<expr><name>c</name></expr>]</index></name> <operator>&amp;</operator> <name>_N</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>Curl_isalnum</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>c</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>c</name> <operator>&gt;=</operator> <literal type="number">0x80</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name><name>ascii</name><index>[<expr><name>c</name></expr>]</index></name> <operator>&amp;</operator> <operator>(</operator><name>_N</name><operator>|</operator><name>_U</name><operator>|</operator><name>_L</name><operator>)</operator><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>Curl_isxdigit</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>c</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>c</name> <operator>&gt;=</operator> <literal type="number">0x80</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name><name>ascii</name><index>[<expr><name>c</name></expr>]</index></name> <operator>&amp;</operator> <operator>(</operator><name>_N</name><operator>|</operator><name>_X</name><operator>)</operator><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>Curl_isgraph</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>c</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>c</name> <operator>&gt;=</operator> <literal type="number">0x80</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>c</name> <operator>==</operator> <literal type="char">' '</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name><name>ascii</name><index>[<expr><name>c</name></expr>]</index></name> <operator>&amp;</operator> <operator>(</operator><name>_N</name><operator>|</operator><name>_X</name><operator>|</operator><name>_U</name><operator>|</operator><name>_L</name><operator>|</operator><name>_P</name><operator>|</operator><name>_S</name><operator>)</operator><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>Curl_isprint</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>c</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>c</name> <operator>&gt;=</operator> <literal type="number">0x80</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name><name>ascii</name><index>[<expr><name>c</name></expr>]</index></name> <operator>&amp;</operator> <operator>(</operator><name>_N</name><operator>|</operator><name>_X</name><operator>|</operator><name>_U</name><operator>|</operator><name>_L</name><operator>|</operator><name>_P</name><operator>|</operator><name>_S</name><operator>)</operator><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>Curl_isalpha</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>c</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>c</name> <operator>&gt;=</operator> <literal type="number">0x80</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name><name>ascii</name><index>[<expr><name>c</name></expr>]</index></name> <operator>&amp;</operator> <operator>(</operator><name>_U</name><operator>|</operator><name>_L</name><operator>)</operator><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>Curl_isupper</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>c</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>c</name> <operator>&gt;=</operator> <literal type="number">0x80</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name><name>ascii</name><index>[<expr><name>c</name></expr>]</index></name> <operator>&amp;</operator> <operator>(</operator><name>_U</name><operator>)</operator><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>Curl_islower</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>c</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>c</name> <operator>&gt;=</operator> <literal type="number">0x80</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name><name>ascii</name><index>[<expr><name>c</name></expr>]</index></name> <operator>&amp;</operator> <operator>(</operator><name>_L</name><operator>)</operator><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>Curl_iscntrl</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>c</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>c</name> <operator>&gt;=</operator> <literal type="number">0x80</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name><name>ascii</name><index>[<expr><name>c</name></expr>]</index></name> <operator>&amp;</operator> <operator>(</operator><name>_C</name><operator>)</operator><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</unit>
