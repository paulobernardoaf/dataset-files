<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\curl-analysis\_cppstats\curl\lib\if2ip.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_setup.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IPV6_SCOPE_GLOBAL</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IPV6_SCOPE_LINKLOCAL</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IPV6_SCOPE_SITELOCAL</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IPV6_SCOPE_UNIQUELOCAL</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IPV6_SCOPE_NODELOCAL</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define> 

<function_decl><type><name>unsigned</name> <name>int</name></type> <name>Curl_ipv6_scope</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type><name>sa</name></decl></parameter>)</parameter_list>;</function_decl>

<typedef>typedef <type><enum>enum <block>{

<decl><name>IF2IP_NOT_FOUND</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, 

<decl><name>IF2IP_AF_NOT_SUPPORTED</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, 

<decl><name>IF2IP_FOUND</name> <init>= <expr><literal type="number">2</literal></expr></init></decl> 

}</block></enum></type> <name>if2ip_result_t</name>;</typedef>

<function_decl><type><name>if2ip_result_t</name></type> <name>Curl_if2ip</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>af</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>remote_scope</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>local_scope_id</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>interf</name></decl></parameter>,

<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buf_size</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__INTERIX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<struct>struct <name>ifreq</name> <block>{

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IFNAMSIZ</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IFHWADDRLEN</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>

<union>union <block>{

<decl_stmt><decl><type><name>char</name></type> <name><name>ifrn_name</name><index>[<expr><name>IFNAMSIZ</name></expr>]</index></name></decl>;</decl_stmt> 

}</block> <decl><name>ifr_ifrn</name></decl>;</union>

<union>union <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr</name></name></type> <name>ifru_addr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr</name></name></type> <name>ifru_broadaddr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr</name></name></type> <name>ifru_netmask</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr</name></name></type> <name>ifru_hwaddr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>short</name></type> <name>ifru_flags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ifru_metric</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ifru_mtu</name></decl>;</decl_stmt>

}</block> <decl><name>ifr_ifru</name></decl>;</union>

}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ifr_name</name></cpp:macro> <cpp:value>ifr_ifrn.ifrn_name</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ifr_addr</name></cpp:macro> <cpp:value>ifr_ifru.ifru_addr</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ifr_broadaddr</name></cpp:macro> <cpp:value>ifr_ifru.ifru_broadaddr</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ifr_netmask</name></cpp:macro> <cpp:value>ifr_ifru.ifru_netmask</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ifr_flags</name></cpp:macro> <cpp:value>ifr_ifru.ifru_flags</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ifr_hwaddr</name></cpp:macro> <cpp:value>ifr_ifru.ifru_hwaddr</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ifr_metric</name></cpp:macro> <cpp:value>ifr_ifru.ifru_metric</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ifr_mtu</name></cpp:macro> <cpp:value>ifr_ifru.ifru_mtu</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIOCGIFADDR</name></cpp:macro> <cpp:value>_IOW('s', 102, struct ifreq)</cpp:value></cpp:define> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</unit>
