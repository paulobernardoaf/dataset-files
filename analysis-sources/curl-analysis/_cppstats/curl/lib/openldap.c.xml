<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\curl-analysis\_cppstats\curl\lib\openldap.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_setup.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_LDAP</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>USE_OPENLDAP</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ldap.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"urldata.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;curl/curl.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sendf.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vtls/vtls.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"transfer.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_ldap.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_base64.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"connect.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_printf.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_memory.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memdebug.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LDAP_PVT_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>ldap_pvt_url_scheme2proto</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>ldap_init_fd</name><parameter_list>(<parameter><decl><type><name>ber_socket_t</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>proto</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>url</name></decl></parameter>,

<parameter><decl><type><name>LDAP</name> <modifier>*</modifier><modifier>*</modifier></type><name>ld</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><specifier>static</specifier> <name>CURLcode</name></type> <name>ldap_setup_connection</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>CURLcode</name></type> <name>ldap_do</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>done</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>CURLcode</name></type> <name>ldap_done</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>CURLcode</name></type></decl></parameter>, <parameter><decl><type><name>bool</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>CURLcode</name></type> <name>ldap_connect</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>done</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>CURLcode</name></type> <name>ldap_connecting</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>done</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>CURLcode</name></type> <name>ldap_disconnect</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>dead</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <name>Curl_recv</name></type> <name>ldap_recv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>Curl_handler</name></name></type> <name>Curl_handler_ldap</name> <init>= <expr><block>{

<expr><literal type="string">"LDAP"</literal></expr>, 

<expr><name>ldap_setup_connection</name></expr>, 

<expr><name>ldap_do</name></expr>, 

<expr><name>ldap_done</name></expr>, 

<expr><name>ZERO_NULL</name></expr>, 

<expr><name>ldap_connect</name></expr>, 

<expr><name>ldap_connecting</name></expr>, 

<expr><name>ZERO_NULL</name></expr>, 

<expr><name>ZERO_NULL</name></expr>, 

<expr><name>ZERO_NULL</name></expr>, 

<expr><name>ZERO_NULL</name></expr>, 

<expr><name>ZERO_NULL</name></expr>, 

<expr><name>ldap_disconnect</name></expr>, 

<expr><name>ZERO_NULL</name></expr>, 

<expr><name>ZERO_NULL</name></expr>, 

<expr><name>PORT_LDAP</name></expr>, 

<expr><name>CURLPROTO_LDAP</name></expr>, 

<expr><name>PROTOPT_NONE</name></expr> 

}</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_SSL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>Curl_handler</name></name></type> <name>Curl_handler_ldaps</name> <init>= <expr><block>{

<expr><literal type="string">"LDAPS"</literal></expr>, 

<expr><name>ldap_setup_connection</name></expr>, 

<expr><name>ldap_do</name></expr>, 

<expr><name>ldap_done</name></expr>, 

<expr><name>ZERO_NULL</name></expr>, 

<expr><name>ldap_connect</name></expr>, 

<expr><name>ldap_connecting</name></expr>, 

<expr><name>ZERO_NULL</name></expr>, 

<expr><name>ZERO_NULL</name></expr>, 

<expr><name>ZERO_NULL</name></expr>, 

<expr><name>ZERO_NULL</name></expr>, 

<expr><name>ZERO_NULL</name></expr>, 

<expr><name>ldap_disconnect</name></expr>, 

<expr><name>ZERO_NULL</name></expr>, 

<expr><name>ZERO_NULL</name></expr>, 

<expr><name>PORT_LDAPS</name></expr>, 

<expr><name>CURLPROTO_LDAP</name></expr>, 

<expr><name>PROTOPT_SSL</name></expr> 

}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>url_errs</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"success"</literal></expr>,

<expr><literal type="string">"out of memory"</literal></expr>,

<expr><literal type="string">"bad parameter"</literal></expr>,

<expr><literal type="string">"unrecognized scheme"</literal></expr>,

<expr><literal type="string">"unbalanced delimiter"</literal></expr>,

<expr><literal type="string">"bad URL"</literal></expr>,

<expr><literal type="string">"bad host or port"</literal></expr>,

<expr><literal type="string">"bad or missing attributes"</literal></expr>,

<expr><literal type="string">"bad or missing scope"</literal></expr>,

<expr><literal type="string">"bad or missing filter"</literal></expr>,

<expr><literal type="string">"bad or missing extensions"</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<struct>struct <name>ldapconninfo</name> <block>{

<decl_stmt><decl><type><name>LDAP</name> <modifier>*</modifier></type><name>ld</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Curl_recv</name> <modifier>*</modifier></type><name>recv</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>Curl_send</name> <modifier>*</modifier></type><name>send</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>proto</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>msgid</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>ssldone</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>sslinst</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>didbind</name></decl>;</decl_stmt>

}</block>;</struct>

<typedef>typedef <type><struct>struct <name>ldapreqinfo</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name>msgid</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nument</name></decl>;</decl_stmt>

}</block></struct></type> <name>ldapreqinfo</name>;</typedef>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>ldap_setup_connection</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>ldapconninfo</name></name> <modifier>*</modifier></type><name>li</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LDAPURLDesc</name> <modifier>*</modifier></type><name>lud</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>, <decl><type ref="prev"/><name>proto</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>status</name></decl>;</decl_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>ldap_url_parse</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>change</name><operator>.</operator><name>url</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lud</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>!=</operator> <name>LDAP_URL_SUCCESS</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name> <init>= <expr><literal type="string">"url parsing problem"</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <name>CURLE_URL_MALFORMAT</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>&gt;</operator> <name>LDAP_URL_SUCCESS</name> <operator>&amp;&amp;</operator> <name>rc</name> <operator>&lt;=</operator> <name>LDAP_URL_ERR_BADEXTS</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>==</operator> <name>LDAP_URL_ERR_MEM</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>status</name> <operator>=</operator> <name>CURLE_OUT_OF_MEMORY</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>msg</name> <operator>=</operator> <name><name>url_errs</name><index>[<expr><name>rc</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"LDAP local: %s"</literal></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>status</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>proto</name> <operator>=</operator> <call><name>ldap_pvt_url_scheme2proto</name><argument_list>(<argument><expr><name><name>lud</name><operator>-&gt;</operator><name>lud_scheme</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ldap_free_urldesc</name><argument_list>(<argument><expr><name>lud</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>li</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>ldapconninfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>li</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>li</name><operator>-&gt;</operator><name>proto</name></name> <operator>=</operator> <name>proto</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>ldapc</name></name> <operator>=</operator> <name>li</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>connkeep</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><literal type="string">"OpenLDAP default"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_SSL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>Sockbuf_IO</name></type> <name>ldapsb_tls</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>ldap_connect</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>done</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>ldapconninfo</name></name> <modifier>*</modifier></type><name>li</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>ldapc</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>, <decl><type ref="prev"/><name>proto</name> <init>= <expr><name>LDAP_VERSION3</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>hosturl</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>done</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>hosturl</name></expr></argument>, <argument><expr><literal type="string">"ldap"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>hosturl</name> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>handler</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>PROTOPT_SSL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>ptr</name><operator>++</operator> <operator>=</operator> <literal type="char">'s'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>msnprintf</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hosturl</name></expr></argument>)</argument_list></sizeof><operator>-</operator><operator>(</operator><name>ptr</name><operator>-</operator><name>hosturl</name><operator>)</operator></expr></argument>, <argument><expr><literal type="string">"://%s:%d"</literal></expr></argument>,

<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>host</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>remote_port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CURL_OPENLDAP_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>do_trace</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>env</name> <init>= <expr><call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"CURL_OPENLDAP_TRACE"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>do_trace</name> <operator>=</operator> <operator>(</operator><name>env</name> <operator>&amp;&amp;</operator> <call><name>strtol</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>do_trace</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ldap_set_option</name><argument_list>(<argument><expr><name><name>li</name><operator>-&gt;</operator><name>ld</name></name></expr></argument>, <argument><expr><name>LDAP_OPT_DEBUG_LEVEL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>do_trace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>ldap_init_fd</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>sock</name><index>[<expr><name>FIRSTSOCKET</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>li</name><operator>-&gt;</operator><name>proto</name></name></expr></argument>, <argument><expr><name>hosturl</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>li</name><operator>-&gt;</operator><name>ld</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"LDAP local: Cannot connect to %s, %s"</literal></expr></argument>,

<argument><expr><name>hosturl</name></expr></argument>, <argument><expr><call><name>ldap_err2string</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_COULDNT_CONNECT</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ldap_set_option</name><argument_list>(<argument><expr><name><name>li</name><operator>-&gt;</operator><name>ld</name></name></expr></argument>, <argument><expr><name>LDAP_OPT_PROTOCOL_VERSION</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>proto</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_SSL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>handler</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>PROTOPT_SSL</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name></decl>;</decl_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_ssl_connect_nonblocking</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>FIRSTSOCKET</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>li</name><operator>-&gt;</operator><name>ssldone</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>ldap_connecting</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>done</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>ldapconninfo</name></name> <modifier>*</modifier></type><name>li</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>ldapc</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LDAPMessage</name> <modifier>*</modifier></type><name>msg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>tv</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>tvp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>, <decl><type ref="prev"/><name>err</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>info</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_SSL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>handler</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>PROTOPT_SSL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>li</name><operator>-&gt;</operator><name>ssldone</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><call><name>Curl_ssl_connect_nonblocking</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>FIRSTSOCKET</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>li</name><operator>-&gt;</operator><name>ssldone</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name> <operator>||</operator> <operator>!</operator><name><name>li</name><operator>-&gt;</operator><name>ssldone</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>li</name><operator>-&gt;</operator><name>sslinst</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>Sockbuf</name> <modifier>*</modifier></type><name>sb</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ldap_get_option</name><argument_list>(<argument><expr><name><name>li</name><operator>-&gt;</operator><name>ld</name></name></expr></argument>, <argument><expr><name>LDAP_OPT_SOCKBUF</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ber_sockbuf_add_io</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ldapsb_tls</name></expr></argument>, <argument><expr><name>LBER_SBIOD_LEVEL_TRANSPORT</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>li</name><operator>-&gt;</operator><name>sslinst</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>li</name><operator>-&gt;</operator><name>recv</name></name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>recv</name><index>[<expr><name>FIRSTSOCKET</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>li</name><operator>-&gt;</operator><name>send</name></name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>send</name><index>[<expr><name>FIRSTSOCKET</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>tvp</name> <operator>=</operator> <operator>&amp;</operator><name>tv</name></expr>;</expr_stmt>

<label><name>retry</name>:</label>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>li</name><operator>-&gt;</operator><name>didbind</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>binddn</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>berval</name></name></type> <name>passwd</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>user_passwd</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>binddn</name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>user</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>passwd</name><operator>.</operator><name>bv_val</name></name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>passwd</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>passwd</name><operator>.</operator><name>bv_len</name></name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>passwd</name><operator>.</operator><name>bv_val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>binddn</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>passwd</name><operator>.</operator><name>bv_val</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>passwd</name><operator>.</operator><name>bv_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>ldap_sasl_bind</name><argument_list>(<argument><expr><name><name>li</name><operator>-&gt;</operator><name>ld</name></name></expr></argument>, <argument><expr><name>binddn</name></expr></argument>, <argument><expr><name>LDAP_SASL_SIMPLE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>passwd</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>li</name><operator>-&gt;</operator><name>msgid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_LDAP_CANNOT_BIND</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>li</name><operator>-&gt;</operator><name>didbind</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>tvp</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_OK</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>ldap_result</name><argument_list>(<argument><expr><name><name>li</name><operator>-&gt;</operator><name>ld</name></name></expr></argument>, <argument><expr><name><name>li</name><operator>-&gt;</operator><name>msgid</name></name></expr></argument>, <argument><expr><name>LDAP_MSG_ONE</name></expr></argument>, <argument><expr><name>tvp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"LDAP local: bind ldap_result %s"</literal></expr></argument>, <argument><expr><call><name>ldap_err2string</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_LDAP_CANNOT_BIND</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>ldap_parse_result</name><argument_list>(<argument><expr><name><name>li</name><operator>-&gt;</operator><name>ld</name></name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"LDAP local: bind ldap_parse_result %s"</literal></expr></argument>, <argument><expr><call><name>ldap_err2string</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_LDAP_CANNOT_BIND</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>err</name> <operator>==</operator> <name>LDAP_PROTOCOL_ERROR</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>proto</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ldap_get_option</name><argument_list>(<argument><expr><name><name>li</name><operator>-&gt;</operator><name>ld</name></name></expr></argument>, <argument><expr><name>LDAP_OPT_PROTOCOL_VERSION</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>proto</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>proto</name> <operator>==</operator> <name>LDAP_VERSION3</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>info</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ldap_memfree</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>info</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>proto</name> <operator>=</operator> <name>LDAP_VERSION2</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ldap_set_option</name><argument_list>(<argument><expr><name><name>li</name><operator>-&gt;</operator><name>ld</name></name></expr></argument>, <argument><expr><name>LDAP_OPT_PROTOCOL_VERSION</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>proto</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>li</name><operator>-&gt;</operator><name>didbind</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<goto>goto <name>retry</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>err</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"LDAP remote: bind failed %s %s"</literal></expr></argument>, <argument><expr><call><name>ldap_err2string</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><ternary><condition><expr><name>info</name></expr> ?</condition><then> <expr><name>info</name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>info</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ldap_memfree</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>CURLE_LOGIN_DENIED</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>info</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ldap_memfree</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>recv</name><index>[<expr><name>FIRSTSOCKET</name></expr>]</index></name> <operator>=</operator> <name>ldap_recv</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>done</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>ldap_disconnect</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>dead_connection</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>ldapconninfo</name></name> <modifier>*</modifier></type><name>li</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>ldapc</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>dead_connection</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>li</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>li</name><operator>-&gt;</operator><name>ld</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ldap_unbind_ext</name><argument_list>(<argument><expr><name><name>li</name><operator>-&gt;</operator><name>ld</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>li</name><operator>-&gt;</operator><name>ld</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>ldapc</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>li</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>ldap_do</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>done</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>ldapconninfo</name></name> <modifier>*</modifier></type><name>li</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>ldapc</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ldapreqinfo</name> <modifier>*</modifier></type><name>lr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>status</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LDAPURLDesc</name> <modifier>*</modifier></type><name>ludp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>msgid</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>connkeep</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><literal type="string">"OpenLDAP do"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"LDAP local: %s\n"</literal></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>change</name><operator>.</operator><name>url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>ldap_url_parse</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>change</name><operator>.</operator><name>url</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ludp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>!=</operator> <name>LDAP_URL_SUCCESS</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name> <init>= <expr><literal type="string">"url parsing problem"</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <name>CURLE_URL_MALFORMAT</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>&gt;</operator> <name>LDAP_URL_SUCCESS</name> <operator>&amp;&amp;</operator> <name>rc</name> <operator>&lt;=</operator> <name>LDAP_URL_ERR_BADEXTS</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>==</operator> <name>LDAP_URL_ERR_MEM</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>status</name> <operator>=</operator> <name>CURLE_OUT_OF_MEMORY</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>msg</name> <operator>=</operator> <name><name>url_errs</name><index>[<expr><name>rc</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"LDAP local: %s"</literal></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>status</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>ldap_search_ext</name><argument_list>(<argument><expr><name><name>li</name><operator>-&gt;</operator><name>ld</name></name></expr></argument>, <argument><expr><name><name>ludp</name><operator>-&gt;</operator><name>lud_dn</name></name></expr></argument>, <argument><expr><name><name>ludp</name><operator>-&gt;</operator><name>lud_scope</name></name></expr></argument>,

<argument><expr><name><name>ludp</name><operator>-&gt;</operator><name>lud_filter</name></name></expr></argument>, <argument><expr><name><name>ludp</name><operator>-&gt;</operator><name>lud_attrs</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>msgid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ldap_free_urldesc</name><argument_list>(<argument><expr><name>ludp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>!=</operator> <name>LDAP_SUCCESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"LDAP local: ldap_search_ext %s"</literal></expr></argument>, <argument><expr><call><name>ldap_err2string</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_LDAP_SEARCH_FAILED</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>lr</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ldapreqinfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>lr</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>lr</name><operator>-&gt;</operator><name>msgid</name></name> <operator>=</operator> <name>msgid</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>protop</name></name> <operator>=</operator> <name>lr</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_setup_transfer</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>FIRSTSOCKET</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>done</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>ldap_done</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>CURLcode</name></type> <name>res</name></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>premature</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ldapreqinfo</name> <modifier>*</modifier></type><name>lr</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>protop</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>res</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>premature</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>lr</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>lr</name><operator>-&gt;</operator><name>msgid</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>ldapconninfo</name></name> <modifier>*</modifier></type><name>li</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>ldapc</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ldap_abandon_ext</name><argument_list>(<argument><expr><name><name>li</name><operator>-&gt;</operator><name>ld</name></name></expr></argument>, <argument><expr><name><name>lr</name><operator>-&gt;</operator><name>msgid</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>lr</name><operator>-&gt;</operator><name>msgid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>protop</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>lr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ssize_t</name></type> <name>ldap_recv</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sockindex</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>CURLcode</name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>ldapconninfo</name></name> <modifier>*</modifier></type><name>li</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>ldapc</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ldapreqinfo</name> <modifier>*</modifier></type><name>lr</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>protop</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LDAPMessage</name> <modifier>*</modifier></type><name>msg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LDAPMessage</name> <modifier>*</modifier></type><name>ent</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BerElement</name> <modifier>*</modifier></type><name>ber</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>tv</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>len</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>buf</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>sockindex</name></expr>;</expr_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>ldap_result</name><argument_list>(<argument><expr><name><name>li</name><operator>-&gt;</operator><name>ld</name></name></expr></argument>, <argument><expr><name><name>lr</name><operator>-&gt;</operator><name>msgid</name></name></expr></argument>, <argument><expr><name>LDAP_MSG_RECEIVED</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"LDAP local: search ldap_result %s"</literal></expr></argument>, <argument><expr><call><name>ldap_err2string</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>err</name> <operator>=</operator> <name>CURLE_RECV_ERROR</name></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>err</name> <operator>=</operator> <name>CURLE_AGAIN</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>msg</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<for>for<control>(<init><expr><name>ent</name> <operator>=</operator> <call><name>ldap_first_message</name><argument_list>(<argument><expr><name><name>li</name><operator>-&gt;</operator><name>ld</name></name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>ent</name></expr>;</condition>

<incr><expr><name>ent</name> <operator>=</operator> <call><name>ldap_next_message</name><argument_list>(<argument><expr><name><name>li</name><operator>-&gt;</operator><name>ld</name></name></expr></argument>, <argument><expr><name>ent</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>berval</name></name></type> <name>bv</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>bvals</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>binary</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>msgtype</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>writeerr</name></decl>;</decl_stmt>

<expr_stmt><expr><name>msgtype</name> <operator>=</operator> <call><name>ldap_msgtype</name><argument_list>(<argument><expr><name>ent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>msgtype</name> <operator>==</operator> <name>LDAP_RES_SEARCH_RESULT</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>code</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>info</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>ldap_parse_result</name><argument_list>(<argument><expr><name><name>li</name><operator>-&gt;</operator><name>ld</name></name></expr></argument>, <argument><expr><name>ent</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>code</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"LDAP local: search ldap_parse_result %s"</literal></expr></argument>,

<argument><expr><call><name>ldap_err2string</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>err</name> <operator>=</operator> <name>CURLE_LDAP_SEARCH_FAILED</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name>code</name> <operator>&amp;&amp;</operator> <name>code</name> <operator>!=</operator> <name>LDAP_SIZELIMIT_EXCEEDED</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"LDAP remote: search failed %s %s"</literal></expr></argument>, <argument><expr><call><name>ldap_err2string</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><ternary><condition><expr><name>info</name></expr> ?</condition><then> <expr><name>info</name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>err</name> <operator>=</operator> <name>CURLE_LDAP_SEARCH_FAILED</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>code</name> <operator>==</operator> <name>LDAP_SIZELIMIT_EXCEEDED</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"There are more than %d entries\n"</literal></expr></argument>, <argument><expr><name><name>lr</name><operator>-&gt;</operator><name>nument</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>size</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>bytecount</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>err</name> <operator>=</operator> <name>CURLE_OK</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>lr</name><operator>-&gt;</operator><name>msgid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ldap_memfree</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name>msgtype</name> <operator>!=</operator> <name>LDAP_RES_SEARCH_ENTRY</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>lr</name><operator>-&gt;</operator><name>nument</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>ldap_get_dn_ber</name><argument_list>(<argument><expr><name><name>li</name><operator>-&gt;</operator><name>ld</name></name></expr></argument>, <argument><expr><name>ent</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ber</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>err</name> <operator>=</operator> <name>CURLE_RECV_ERROR</name></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>writeerr</name> <operator>=</operator> <call><name>Curl_client_write</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>CLIENTWRITE_BODY</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><literal type="string">"DN: "</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>writeerr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>err</name> <operator>=</operator> <name>writeerr</name></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>writeerr</name> <operator>=</operator> <call><name>Curl_client_write</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>CLIENTWRITE_BODY</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>bv</name><operator>.</operator><name>bv_val</name></name></expr></argument>,

<argument><expr><name><name>bv</name><operator>.</operator><name>bv_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>writeerr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>err</name> <operator>=</operator> <name>writeerr</name></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>writeerr</name> <operator>=</operator> <call><name>Curl_client_write</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>CLIENTWRITE_BODY</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><literal type="string">"\n"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>writeerr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>err</name> <operator>=</operator> <name>writeerr</name></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>bytecount</name></name> <operator>+=</operator> <name><name>bv</name><operator>.</operator><name>bv_len</name></name> <operator>+</operator> <literal type="number">5</literal></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>rc</name> <operator>=</operator> <call><name>ldap_get_attribute_ber</name><argument_list>(<argument><expr><name><name>li</name><operator>-&gt;</operator><name>ld</name></name></expr></argument>, <argument><expr><name>ent</name></expr></argument>, <argument><expr><name>ber</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bvals</name></expr></argument>)</argument_list></call></expr>;</init>

<condition><expr><name>rc</name> <operator>==</operator> <name>LDAP_SUCCESS</name></expr>;</condition>

<incr><expr><name>rc</name> <operator>=</operator> <call><name>ldap_get_attribute_ber</name><argument_list>(<argument><expr><name><name>li</name><operator>-&gt;</operator><name>ld</name></name></expr></argument>, <argument><expr><name>ent</name></expr></argument>, <argument><expr><name>ber</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bvals</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>bv</name><operator>.</operator><name>bv_val</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>bv</name><operator>.</operator><name>bv_len</name></name> <operator>&gt;</operator> <literal type="number">7</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name><name>bv</name><operator>.</operator><name>bv_val</name></name> <operator>+</operator> <name><name>bv</name><operator>.</operator><name>bv_len</name></name> <operator>-</operator> <literal type="number">7</literal></expr></argument>, <argument><expr><literal type="string">";binary"</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>binary</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>binary</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name>bvals</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>writeerr</name> <operator>=</operator> <call><name>Curl_client_write</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>CLIENTWRITE_BODY</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><literal type="string">"\t"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>writeerr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>err</name> <operator>=</operator> <name>writeerr</name></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>writeerr</name> <operator>=</operator> <call><name>Curl_client_write</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>CLIENTWRITE_BODY</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>bv</name><operator>.</operator><name>bv_val</name></name></expr></argument>,

<argument><expr><name><name>bv</name><operator>.</operator><name>bv_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>writeerr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>err</name> <operator>=</operator> <name>writeerr</name></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>writeerr</name> <operator>=</operator> <call><name>Curl_client_write</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>CLIENTWRITE_BODY</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><literal type="string">":\n"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>writeerr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>err</name> <operator>=</operator> <name>writeerr</name></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>bytecount</name></name> <operator>+=</operator> <name><name>bv</name><operator>.</operator><name>bv_len</name></name> <operator>+</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>bvals</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bv_val</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>binval</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>writeerr</name> <operator>=</operator> <call><name>Curl_client_write</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>CLIENTWRITE_BODY</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><literal type="string">"\t"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>writeerr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>err</name> <operator>=</operator> <name>writeerr</name></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>writeerr</name> <operator>=</operator> <call><name>Curl_client_write</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>CLIENTWRITE_BODY</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>bv</name><operator>.</operator><name>bv_val</name></name></expr></argument>,

<argument><expr><name><name>bv</name><operator>.</operator><name>bv_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>writeerr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>err</name> <operator>=</operator> <name>writeerr</name></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>writeerr</name> <operator>=</operator> <call><name>Curl_client_write</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>CLIENTWRITE_BODY</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><literal type="string">":"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>writeerr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>err</name> <operator>=</operator> <name>writeerr</name></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>bytecount</name></name> <operator>+=</operator> <name><name>bv</name><operator>.</operator><name>bv_len</name></name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>binary</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>ISSPACE</name><argument_list>(<argument><expr><name><name>bvals</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>bv_val</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>||</operator>

<call><name>ISSPACE</name><argument_list>(<argument><expr><name><name>bvals</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>bv_val</name><index>[<expr><name><name>bvals</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bv_len</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>binval</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>j</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name><operator>&lt;</operator><name><name>bvals</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bv_len</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>ISPRINT</name><argument_list>(<argument><expr><name><name>bvals</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>bv_val</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>binval</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt></block_content></block></for>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>binary</name> <operator>||</operator> <name>binval</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>val_b64</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>val_b64_sz</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>error</name> <init>= <expr><call><name>Curl_base64_encode</name><argument_list>(<argument><expr><name>data</name></expr></argument>,

<argument><expr><name><name>bvals</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bv_val</name></expr></argument>,

<argument><expr><name><name>bvals</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bv_len</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>val_b64</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>val_b64_sz</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>error</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ber_memfree</name><argument_list>(<argument><expr><name>bvals</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ber_free</name><argument_list>(<argument><expr><name>ber</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ldap_msgfree</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>err</name> <operator>=</operator> <name>error</name></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>writeerr</name> <operator>=</operator> <call><name>Curl_client_write</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>CLIENTWRITE_BODY</name></expr></argument>,

<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><literal type="string">": "</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>writeerr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>err</name> <operator>=</operator> <name>writeerr</name></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>bytecount</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>val_b64_sz</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>writeerr</name> <operator>=</operator> <call><name>Curl_client_write</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>CLIENTWRITE_BODY</name></expr></argument>, <argument><expr><name>val_b64</name></expr></argument>,

<argument><expr><name>val_b64_sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>writeerr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>err</name> <operator>=</operator> <name>writeerr</name></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>val_b64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>bytecount</name></name> <operator>+=</operator> <name>val_b64_sz</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>writeerr</name> <operator>=</operator> <call><name>Curl_client_write</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>CLIENTWRITE_BODY</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><literal type="string">" "</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>writeerr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>err</name> <operator>=</operator> <name>writeerr</name></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>writeerr</name> <operator>=</operator> <call><name>Curl_client_write</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>CLIENTWRITE_BODY</name></expr></argument>, <argument><expr><name><name>bvals</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bv_val</name></expr></argument>,

<argument><expr><name><name>bvals</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bv_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>writeerr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>err</name> <operator>=</operator> <name>writeerr</name></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>bytecount</name></name> <operator>+=</operator> <name><name>bvals</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bv_len</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>writeerr</name> <operator>=</operator> <call><name>Curl_client_write</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>CLIENTWRITE_BODY</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><literal type="string">"\n"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>writeerr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>err</name> <operator>=</operator> <name>writeerr</name></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>bytecount</name></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>ber_memfree</name><argument_list>(<argument><expr><name>bvals</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>writeerr</name> <operator>=</operator> <call><name>Curl_client_write</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>CLIENTWRITE_BODY</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><literal type="string">"\n"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>writeerr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>err</name> <operator>=</operator> <name>writeerr</name></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>bytecount</name></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>writeerr</name> <operator>=</operator> <call><name>Curl_client_write</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>CLIENTWRITE_BODY</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><literal type="string">"\n"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>writeerr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>err</name> <operator>=</operator> <name>writeerr</name></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>bytecount</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ber_free</name><argument_list>(<argument><expr><name>ber</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>ldap_msgfree</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_SSL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type>

<name>ldapsb_tls_setup</name><parameter_list>(<parameter><decl><type><name>Sockbuf_IO_Desc</name> <modifier>*</modifier></type><name>sbiod</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>sbiod</name><operator>-&gt;</operator><name>sbiod_pvt</name></name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>ldapsb_tls_remove</name><parameter_list>(<parameter><decl><type><name>Sockbuf_IO_Desc</name> <modifier>*</modifier></type><name>sbiod</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>sbiod</name><operator>-&gt;</operator><name>sbiod_pvt</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>ldapsb_tls_close</name><parameter_list>(<parameter><decl><type><name>Sockbuf_IO_Desc</name> <modifier>*</modifier></type><name>sbiod</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>sbiod</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>ldapsb_tls_ctrl</name><parameter_list>(<parameter><decl><type><name>Sockbuf_IO_Desc</name> <modifier>*</modifier></type><name>sbiod</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>opt</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>arg</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>opt</name> <operator>==</operator> <name>LBER_SB_OPT_DATA_READY</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name> <init>= <expr><name><name>sbiod</name><operator>-&gt;</operator><name>sbiod_pvt</name></name></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>Curl_ssl_data_pending</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>FIRSTSOCKET</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ber_slen_t</name></type>

<name>ldapsb_tls_read</name><parameter_list>(<parameter><decl><type><name>Sockbuf_IO_Desc</name> <modifier>*</modifier></type><name>sbiod</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>ber_len_t</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name> <init>= <expr><name><name>sbiod</name><operator>-&gt;</operator><name>sbiod_pvt</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ldapconninfo</name></name> <modifier>*</modifier></type><name>li</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>ldapc</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ber_slen_t</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>err</name> <init>= <expr><name>CURLE_RECV_ERROR</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>(</operator><name><name>li</name><operator>-&gt;</operator><name>recv</name></name><operator>)</operator><operator>(</operator><name>conn</name><operator>,</operator> <name>FIRSTSOCKET</name><operator>,</operator> <name>buf</name><operator>,</operator> <name>len</name><operator>,</operator> <operator>&amp;</operator><name>err</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>err</name> <operator>==</operator> <name>CURLE_AGAIN</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>SET_SOCKERRNO</name><argument_list>(<argument><expr><name>EWOULDBLOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ber_slen_t</name></type>

<name>ldapsb_tls_write</name><parameter_list>(<parameter><decl><type><name>Sockbuf_IO_Desc</name> <modifier>*</modifier></type><name>sbiod</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>ber_len_t</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name> <init>= <expr><name><name>sbiod</name><operator>-&gt;</operator><name>sbiod_pvt</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ldapconninfo</name></name> <modifier>*</modifier></type><name>li</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>ldapc</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ber_slen_t</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>err</name> <init>= <expr><name>CURLE_SEND_ERROR</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>(</operator><name><name>li</name><operator>-&gt;</operator><name>send</name></name><operator>)</operator><operator>(</operator><name>conn</name><operator>,</operator> <name>FIRSTSOCKET</name><operator>,</operator> <name>buf</name><operator>,</operator> <name>len</name><operator>,</operator> <operator>&amp;</operator><name>err</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>err</name> <operator>==</operator> <name>CURLE_AGAIN</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>SET_SOCKERRNO</name><argument_list>(<argument><expr><name>EWOULDBLOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>Sockbuf_IO</name></type> <name>ldapsb_tls</name> <init>=

<expr><block>{

<expr><name>ldapsb_tls_setup</name></expr>,

<expr><name>ldapsb_tls_remove</name></expr>,

<expr><name>ldapsb_tls_ctrl</name></expr>,

<expr><name>ldapsb_tls_read</name></expr>,

<expr><name>ldapsb_tls_write</name></expr>,

<expr><name>ldapsb_tls_close</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</unit>
