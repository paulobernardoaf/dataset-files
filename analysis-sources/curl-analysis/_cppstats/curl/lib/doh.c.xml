<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\curl-analysis\_cppstats\curl\lib\doh.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_setup.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_DOH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"urldata.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_addrinfo.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"doh.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sendf.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"multiif.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"url.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"share.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_base64.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"connect.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"strdup.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_printf.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_memory.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memdebug.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DNS_CLASS_IN</name></cpp:macro> <cpp:value>0x01</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DOH_MAX_RESPONSE_SIZE</name></cpp:macro> <cpp:value>3000</cpp:value></cpp:define> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_VERBOSE_STRINGS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name><name>errors</name><index>[]</index></name><init>=<expr><block>{

<expr><literal type="string">""</literal></expr>,

<expr><literal type="string">"Bad label"</literal></expr>,

<expr><literal type="string">"Out of range"</literal></expr>,

<expr><literal type="string">"Label loop"</literal></expr>,

<expr><literal type="string">"Too small"</literal></expr>,

<expr><literal type="string">"Out of memory"</literal></expr>,

<expr><literal type="string">"RDATA length"</literal></expr>,

<expr><literal type="string">"Malformat"</literal></expr>,

<expr><literal type="string">"Bad RCODE"</literal></expr>,

<expr><literal type="string">"Unexpected TYPE"</literal></expr>,

<expr><literal type="string">"Unexpected CLASS"</literal></expr>,

<expr><literal type="string">"No content"</literal></expr>,

<expr><literal type="string">"Bad ID"</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>doh_strerror</name><parameter_list>(<parameter><decl><type><name>DOHcode</name></type> <name>code</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>code</name> <operator>&gt;=</operator> <name>DOH_OK</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>code</name> <operator>&lt;=</operator> <name>DOH_DNS_BAD_ID</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>errors</name><index>[<expr><name>code</name></expr>]</index></name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="string">"bad error code"</literal></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUGBUILD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNITTEST</name></cpp:macro></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNITTEST</name></cpp:macro> <cpp:value>static</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>UNITTEST</name> <name>DOHcode</name></type> <name>doh_encode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>host</name></decl></parameter>,

<parameter><decl><type><name>DNStype</name></type> <name>dnstype</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>dnsp</name></decl></parameter>, 

<parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, 

<parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>olen</name></decl></parameter>)</parameter_list> 

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>hostlen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>orig</name> <init>= <expr><name>dnsp</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>hostp</name> <init>= <expr><name>host</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>expected_len</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DEBUGASSERT</name><argument_list>(<argument><expr><name>hostlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>expected_len</name> <operator>=</operator> <literal type="number">12</literal> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>hostlen</name> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>host</name><index>[<expr><name>hostlen</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>!=</operator><literal type="char">'.'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>expected_len</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>expected_len</name> <operator>&gt;</operator> <operator>(</operator><literal type="number">256</literal> <operator>+</operator> <literal type="number">16</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> 

<return>return <expr><name>DOH_DNS_NAME_TOO_LONG</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>len</name> <operator>&lt;</operator> <name>expected_len</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>DOH_TOO_SMALL_BUFFER</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>dnsp</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<expr_stmt><expr><operator>*</operator><name>dnsp</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>dnsp</name><operator>++</operator> <operator>=</operator> <literal type="number">0x01</literal></expr>;</expr_stmt> 

<expr_stmt><expr><operator>*</operator><name>dnsp</name><operator>++</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt> 

<expr_stmt><expr><operator>*</operator><name>dnsp</name><operator>++</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>dnsp</name><operator>++</operator> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 

<expr_stmt><expr><operator>*</operator><name>dnsp</name><operator>++</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>dnsp</name><operator>++</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt> 

<expr_stmt><expr><operator>*</operator><name>dnsp</name><operator>++</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>dnsp</name><operator>++</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt> 

<expr_stmt><expr><operator>*</operator><name>dnsp</name><operator>++</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>dnsp</name><operator>++</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt> 

<while>while<condition>(<expr><operator>*</operator><name>hostp</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>labellen</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>dot</name> <init>= <expr><call><name>strchr</name><argument_list>(<argument><expr><name>hostp</name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>dot</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>labellen</name> <operator>=</operator> <name>dot</name> <operator>-</operator> <name>hostp</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>labellen</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>hostp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>labellen</name> <operator>&gt;</operator> <literal type="number">63</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>!</operator><name>labellen</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>olen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>DOH_DNS_BAD_LABEL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>dnsp</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name>labellen</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dnsp</name></expr></argument>, <argument><expr><name>hostp</name></expr></argument>, <argument><expr><name>labellen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dnsp</name> <operator>+=</operator> <name>labellen</name></expr>;</expr_stmt>

<expr_stmt><expr><name>hostp</name> <operator>+=</operator> <name>labellen</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>dot</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>hostp</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></while> 

<expr_stmt><expr><operator>*</operator><name>dnsp</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<expr_stmt><expr><operator>*</operator><name>dnsp</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><literal type="number">255</literal> <operator>&amp;</operator> <operator>(</operator><name>dnstype</name><operator>&gt;&gt;</operator><literal type="number">8</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt> 

<expr_stmt><expr><operator>*</operator><name>dnsp</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><literal type="number">255</literal> <operator>&amp;</operator> <name>dnstype</name><operator>)</operator></expr>;</expr_stmt> 

<expr_stmt><expr><operator>*</operator><name>dnsp</name><operator>++</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt> 

<expr_stmt><expr><operator>*</operator><name>dnsp</name><operator>++</operator> <operator>=</operator> <name>DNS_CLASS_IN</name></expr>;</expr_stmt> 

<expr_stmt><expr><operator>*</operator><name>olen</name> <operator>=</operator> <name>dnsp</name> <operator>-</operator> <name>orig</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DEBUGASSERT</name><argument_list>(<argument><expr><operator>*</operator><name>olen</name> <operator>==</operator> <name>expected_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>DOH_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type>

<name>doh_write_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>contents</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>nmemb</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>realsize</name> <init>= <expr><name>size</name> <operator>*</operator> <name>nmemb</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>dohresponse</name></name> <modifier>*</modifier></type><name>mem</name> <init>= <expr><operator>(</operator>struct <name>dohresponse</name> <operator>*</operator><operator>)</operator><name>userp</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>mem</name><operator>-&gt;</operator><name>size</name></name> <operator>+</operator> <name>realsize</name><operator>)</operator> <operator>&gt;</operator> <name>DOH_MAX_RESPONSE_SIZE</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>mem</name><operator>-&gt;</operator><name>memory</name></name> <operator>=</operator> <call><name>Curl_saferealloc</name><argument_list>(<argument><expr><name><name>mem</name><operator>-&gt;</operator><name>memory</name></name></expr></argument>, <argument><expr><name><name>mem</name><operator>-&gt;</operator><name>size</name></name> <operator>+</operator> <name>realsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>mem</name><operator>-&gt;</operator><name>memory</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>mem</name><operator>-&gt;</operator><name>memory</name><index>[<expr><name><name>mem</name><operator>-&gt;</operator><name>size</name></name></expr>]</index></name><operator>)</operator></expr></argument>, <argument><expr><name>contents</name></expr></argument>, <argument><expr><name>realsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mem</name><operator>-&gt;</operator><name>size</name></name> <operator>+=</operator> <name>realsize</name></expr>;</expr_stmt>

<return>return <expr><name>realsize</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Curl_doh_done</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>doh</name></decl></parameter>, <parameter><decl><type><name>CURLcode</name></type> <name>result</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>doh</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>dohfor</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>doh</name><operator>.</operator><name>pending</name></name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"a DOH request is completed, %u to go\n"</literal></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>doh</name><operator>.</operator><name>pending</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"DOH request %s\n"</literal></expr></argument>, <argument><expr><call><name>curl_easy_strerror</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>doh</name><operator>.</operator><name>pending</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>curl_slist_free_all</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>doh</name><operator>.</operator><name>headers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>doh</name><operator>.</operator><name>headers</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_expire</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>EXPIRE_RUN_NOW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ERROR_CHECK_SETOPT</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { result = curl_easy_setopt(doh, x, y); if(result) goto error; } while(0)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>dohprobe</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>dnsprobe</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>DNStype</name></type> <name>dnstype</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>host</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>url</name></decl></parameter>, <parameter><decl><type><name>CURLM</name> <modifier>*</modifier></type><name>multi</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>curl_slist</name></name> <modifier>*</modifier></type><name>headers</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>doh</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>nurl</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>timediff_t</name></type> <name>timeout_ms</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DOHcode</name></type> <name>d</name> <init>= <expr><call><name>doh_encode</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><name>dnstype</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>dohbuffer</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>dohbuffer</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>dohlen</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>d</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Failed to encode DOH packet [%d]\n"</literal></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>dnstype</name></name> <operator>=</operator> <name>dnstype</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>serverdoh</name><operator>.</operator><name>memory</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>serverdoh</name><operator>.</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>doh_get</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>b64</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>b64len</name></decl>;</decl_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_base64url_encode</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>p</name><operator>-&gt;</operator><name>dohbuffer</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>dohlen</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>b64</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b64len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>nurl</name> <operator>=</operator> <call><name>aprintf</name><argument_list>(<argument><expr><literal type="string">"%s?dns=%s"</literal></expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr><name>b64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>b64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>nurl</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_OUT_OF_MEMORY</name></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>url</name> <operator>=</operator> <name>nurl</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>timeout_ms</name> <operator>=</operator> <call><name>Curl_timeleft</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>timeout_ms</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_OPERATION_TIMEDOUT</name></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_open</name><argument_list>(<argument><expr><operator>&amp;</operator><name>doh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>result</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>dohresponse</name></name> <modifier>*</modifier></type><name>resp</name> <init>= <expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>serverdoh</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ERROR_CHECK_SETOPT</name><argument_list>(<argument><expr><name>CURLOPT_URL</name></expr></argument>, <argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ERROR_CHECK_SETOPT</name><argument_list>(<argument><expr><name>CURLOPT_WRITEFUNCTION</name></expr></argument>, <argument><expr><name>doh_write_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ERROR_CHECK_SETOPT</name><argument_list>(<argument><expr><name>CURLOPT_WRITEDATA</name></expr></argument>, <argument><expr><name>resp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>doh_get</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ERROR_CHECK_SETOPT</name><argument_list>(<argument><expr><name>CURLOPT_POSTFIELDS</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>dohbuffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ERROR_CHECK_SETOPT</name><argument_list>(<argument><expr><name>CURLOPT_POSTFIELDSIZE</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><name><name>p</name><operator>-&gt;</operator><name>dohlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ERROR_CHECK_SETOPT</name><argument_list>(<argument><expr><name>CURLOPT_HTTPHEADER</name></expr></argument>, <argument><expr><name>headers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_NGHTTP2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>ERROR_CHECK_SETOPT</name><argument_list>(<argument><expr><name>CURLOPT_HTTP_VERSION</name></expr></argument>, <argument><expr><name>CURL_HTTP_VERSION_2TLS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURLDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>ERROR_CHECK_SETOPT</name><argument_list>(<argument><expr><name>CURLOPT_PROTOCOLS</name></expr></argument>, <argument><expr><name>CURLPROTO_HTTPS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>ERROR_CHECK_SETOPT</name><argument_list>(<argument><expr><name>CURLOPT_PROTOCOLS</name></expr></argument>, <argument><expr><name>CURLPROTO_HTTP</name><operator>|</operator><name>CURLPROTO_HTTPS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>ERROR_CHECK_SETOPT</name><argument_list>(<argument><expr><name>CURLOPT_TIMEOUT_MS</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><name>timeout_ms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>verbose</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ERROR_CHECK_SETOPT</name><argument_list>(<argument><expr><name>CURLOPT_VERBOSE</name></expr></argument>, <argument><expr><literal type="number">1L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>no_signal</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ERROR_CHECK_SETOPT</name><argument_list>(<argument><expr><name>CURLOPT_NOSIGNAL</name></expr></argument>, <argument><expr><literal type="number">1L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>ssl</name><operator>.</operator><name>falsestart</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ERROR_CHECK_SETOPT</name><argument_list>(<argument><expr><name>CURLOPT_SSL_FALSESTART</name></expr></argument>, <argument><expr><literal type="number">1L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>ssl</name><operator>.</operator><name>primary</name><operator>.</operator><name>verifyhost</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ERROR_CHECK_SETOPT</name><argument_list>(<argument><expr><name>CURLOPT_SSL_VERIFYHOST</name></expr></argument>, <argument><expr><literal type="number">2L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_PROXY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>proxy_ssl</name><operator>.</operator><name>primary</name><operator>.</operator><name>verifyhost</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ERROR_CHECK_SETOPT</name><argument_list>(<argument><expr><name>CURLOPT_PROXY_SSL_VERIFYHOST</name></expr></argument>, <argument><expr><literal type="number">2L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>proxy_ssl</name><operator>.</operator><name>primary</name><operator>.</operator><name>verifypeer</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ERROR_CHECK_SETOPT</name><argument_list>(<argument><expr><name>CURLOPT_PROXY_SSL_VERIFYPEER</name></expr></argument>, <argument><expr><literal type="number">1L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_SSL_CAFILE_PROXY</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ERROR_CHECK_SETOPT</name><argument_list>(<argument><expr><name>CURLOPT_PROXY_CAINFO</name></expr></argument>,

<argument><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_SSL_CAFILE_PROXY</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_SSL_CRLFILE_PROXY</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ERROR_CHECK_SETOPT</name><argument_list>(<argument><expr><name>CURLOPT_PROXY_CRLFILE</name></expr></argument>,

<argument><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_SSL_CRLFILE_PROXY</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>proxy_ssl</name><operator>.</operator><name>no_revoke</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ERROR_CHECK_SETOPT</name><argument_list>(<argument><expr><name>CURLOPT_PROXY_SSL_OPTIONS</name></expr></argument>, <argument><expr><name>CURLSSLOPT_NO_REVOKE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>proxy_ssl</name><operator>.</operator><name>revoke_best_effort</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ERROR_CHECK_SETOPT</name><argument_list>(<argument><expr><name>CURLOPT_PROXY_SSL_OPTIONS</name></expr></argument>,

<argument><expr><name>CURLSSLOPT_REVOKE_BEST_EFFORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_SSL_CAPATH_PROXY</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ERROR_CHECK_SETOPT</name><argument_list>(<argument><expr><name>CURLOPT_PROXY_CAPATH</name></expr></argument>,

<argument><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_SSL_CAPATH_PROXY</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>ssl</name><operator>.</operator><name>primary</name><operator>.</operator><name>verifypeer</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ERROR_CHECK_SETOPT</name><argument_list>(<argument><expr><name>CURLOPT_SSL_VERIFYPEER</name></expr></argument>, <argument><expr><literal type="number">1L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>ssl</name><operator>.</operator><name>primary</name><operator>.</operator><name>verifystatus</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ERROR_CHECK_SETOPT</name><argument_list>(<argument><expr><name>CURLOPT_SSL_VERIFYSTATUS</name></expr></argument>, <argument><expr><literal type="number">1L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_SSL_CAFILE_ORIG</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ERROR_CHECK_SETOPT</name><argument_list>(<argument><expr><name>CURLOPT_CAINFO</name></expr></argument>,

<argument><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_SSL_CAFILE_ORIG</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_SSL_CAPATH_ORIG</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ERROR_CHECK_SETOPT</name><argument_list>(<argument><expr><name>CURLOPT_CAPATH</name></expr></argument>,

<argument><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_SSL_CAPATH_ORIG</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_SSL_CRLFILE_ORIG</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ERROR_CHECK_SETOPT</name><argument_list>(<argument><expr><name>CURLOPT_CRLFILE</name></expr></argument>,

<argument><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_SSL_CRLFILE_ORIG</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>ssl</name><operator>.</operator><name>certinfo</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ERROR_CHECK_SETOPT</name><argument_list>(<argument><expr><name>CURLOPT_CERTINFO</name></expr></argument>, <argument><expr><literal type="number">1L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_SSL_RANDOM_FILE</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ERROR_CHECK_SETOPT</name><argument_list>(<argument><expr><name>CURLOPT_RANDOM_FILE</name></expr></argument>,

<argument><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_SSL_RANDOM_FILE</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_SSL_EGDSOCKET</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ERROR_CHECK_SETOPT</name><argument_list>(<argument><expr><name>CURLOPT_EGDSOCKET</name></expr></argument>,

<argument><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_SSL_EGDSOCKET</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>ssl</name><operator>.</operator><name>no_revoke</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ERROR_CHECK_SETOPT</name><argument_list>(<argument><expr><name>CURLOPT_SSL_OPTIONS</name></expr></argument>, <argument><expr><name>CURLSSLOPT_NO_REVOKE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>ssl</name><operator>.</operator><name>revoke_best_effort</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ERROR_CHECK_SETOPT</name><argument_list>(<argument><expr><name>CURLOPT_SSL_OPTIONS</name></expr></argument>, <argument><expr><name>CURLSSLOPT_REVOKE_BEST_EFFORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>ssl</name><operator>.</operator><name>fsslctx</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ERROR_CHECK_SETOPT</name><argument_list>(<argument><expr><name>CURLOPT_SSL_CTX_FUNCTION</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>ssl</name><operator>.</operator><name>fsslctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>ssl</name><operator>.</operator><name>fsslctxp</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ERROR_CHECK_SETOPT</name><argument_list>(<argument><expr><name>CURLOPT_SSL_CTX_DATA</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>ssl</name><operator>.</operator><name>fsslctxp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>doh</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>fmultidone</name></name> <operator>=</operator> <name>Curl_doh_done</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>doh</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>dohfor</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>easy</name></name> <operator>=</operator> <name>doh</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>curl_multi_add_handle</name><argument_list>(<argument><expr><name>multi</name></expr></argument>, <argument><expr><name>doh</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>nurl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

<label><name>error</name>:</label>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>nurl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_close</name><argument_list>(<argument><expr><operator>&amp;</operator><name>doh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>Curl_addrinfo</name> <modifier>*</modifier></type><name>Curl_doh</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>hostname</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>port</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>waitp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>slot</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>waitp</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt> 

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>conn</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>hostname</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>port</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>doh</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>dohdata</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>doh</name><operator>.</operator><name>host</name></name> <operator>=</operator> <name>hostname</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>doh</name><operator>.</operator><name>port</name></name> <operator>=</operator> <name>port</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>doh</name><operator>.</operator><name>headers</name></name> <operator>=</operator>

<call><name>curl_slist_append</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>,

<argument><expr><literal type="string">"Content-Type: application/dns-message"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>doh</name><operator>.</operator><name>headers</name></name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>ip_version</name></name> <operator>!=</operator> <name>CURL_IPRESOLVE_V6</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>dohprobe</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>doh</name><operator>.</operator><name>probe</name><index>[<expr><name>DOH_PROBE_SLOT_IPADDR_V4</name></expr>]</index></name></expr></argument>,

<argument><expr><name>DNS_TYPE_A</name></expr></argument>, <argument><expr><name>hostname</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_DOH</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>data</name><operator>-&gt;</operator><name>multi</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>doh</name><operator>.</operator><name>headers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>doh</name><operator>.</operator><name>pending</name></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>ip_version</name></name> <operator>!=</operator> <name>CURL_IPRESOLVE_V4</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>dohprobe</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>doh</name><operator>.</operator><name>probe</name><index>[<expr><name>DOH_PROBE_SLOT_IPADDR_V6</name></expr>]</index></name></expr></argument>,

<argument><expr><name>DNS_TYPE_AAAA</name></expr></argument>, <argument><expr><name>hostname</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_DOH</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>data</name><operator>-&gt;</operator><name>multi</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>doh</name><operator>.</operator><name>headers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>doh</name><operator>.</operator><name>pending</name></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

<label><name>error</name>:</label>

<expr_stmt><expr><call><name>curl_slist_free_all</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>doh</name><operator>.</operator><name>headers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>doh</name><operator>.</operator><name>headers</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>slot</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>slot</name> <operator>&lt;</operator> <name>DOH_PROBE_SLOTS</name></expr>;</condition> <incr><expr><name>slot</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>Curl_close</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>doh</name><operator>.</operator><name>probe</name><index>[<expr><name>slot</name></expr>]</index></name><operator>.</operator><name>easy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>DOHcode</name></type> <name>skipqname</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>doh</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>dohlen</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>indexp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>length</name></decl>;</decl_stmt>

<do>do <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>dohlen</name> <operator>&lt;</operator> <operator>(</operator><operator>*</operator><name>indexp</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>DOH_DNS_OUT_OF_RANGE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>length</name> <operator>=</operator> <name><name>doh</name><index>[<expr><operator>*</operator><name>indexp</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>length</name> <operator>&amp;</operator> <literal type="number">0xc0</literal><operator>)</operator> <operator>==</operator> <literal type="number">0xc0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>dohlen</name> <operator>&lt;</operator> <operator>(</operator><operator>*</operator><name>indexp</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>DOH_DNS_OUT_OF_RANGE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>indexp</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>length</name> <operator>&amp;</operator> <literal type="number">0xc0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>DOH_DNS_BAD_LABEL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>dohlen</name> <operator>&lt;</operator> <operator>(</operator><operator>*</operator><name>indexp</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>length</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>DOH_DNS_OUT_OF_RANGE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>indexp</name> <operator>+=</operator> <literal type="number">1</literal> <operator>+</operator> <name>length</name></expr>;</expr_stmt>

</block_content>}</block> while<condition>(<expr><name>length</name></expr>)</condition>;</do>

<return>return <expr><name>DOH_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name> <name>short</name></type> <name>get16bit</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>doh</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><name>unsigned</name> <name>short</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>doh</name><index>[<expr><name>index</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name><name>doh</name><index>[<expr><name>index</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name>get32bit</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>doh</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>doh</name> <operator>+=</operator> <name>index</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name><name>doh</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>doh</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator><operator>(</operator><name><name>doh</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name><name>doh</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>DOHcode</name></type> <name>store_a</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>doh</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>dohentry</name></name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>d</name><operator>-&gt;</operator><name>numaddr</name></name> <operator>&lt;</operator> <name>DOH_MAX_ADDR</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>dohaddr</name></name> <modifier>*</modifier></type><name>a</name> <init>= <expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>addr</name><index>[<expr><name><name>d</name><operator>-&gt;</operator><name>numaddr</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>DNS_TYPE_A</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>ip</name><operator>.</operator><name>v4</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>doh</name><index>[<expr><name>index</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>numaddr</name></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>DOH_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>DOHcode</name></type> <name>store_aaaa</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>doh</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>dohentry</name></name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>d</name><operator>-&gt;</operator><name>numaddr</name></name> <operator>&lt;</operator> <name>DOH_MAX_ADDR</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>dohaddr</name></name> <modifier>*</modifier></type><name>a</name> <init>= <expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>addr</name><index>[<expr><name><name>d</name><operator>-&gt;</operator><name>numaddr</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>DNS_TYPE_AAAA</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>ip</name><operator>.</operator><name>v6</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>doh</name><index>[<expr><name>index</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>numaddr</name></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>DOH_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>DOHcode</name></type> <name>cnameappend</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cnamestore</name></name> <modifier>*</modifier></type><name>c</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>alloc</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>allocsize</name></name> <operator>=</operator> <name>len</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>alloc</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>allocsize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>alloc</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>DOH_OUT_OF_MEM</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>allocsize</name></name> <operator>&lt;</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>allocsize</name></name> <operator>+</operator> <name>len</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>allocsize</name></name> <operator>+=</operator> <name>len</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>realloc</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>alloc</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>allocsize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>ptr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>DOH_OUT_OF_MEM</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>alloc</name></name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>alloc</name><index>[<expr><name><name>c</name><operator>-&gt;</operator><name>len</name></name></expr>]</index></name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>len</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>alloc</name><index>[<expr><name><name>c</name><operator>-&gt;</operator><name>len</name></name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<return>return <expr><name>DOH_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>DOHcode</name></type> <name>store_cname</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>doh</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>dohlen</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>index</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>dohentry</name></name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>cnamestore</name></name> <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>loop</name> <init>= <expr><literal type="number">128</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>length</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>d</name><operator>-&gt;</operator><name>numcname</name></name> <operator>==</operator> <name>DOH_MAX_CNAME</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>DOH_OK</name></expr>;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>cname</name><index>[<expr><name><name>d</name><operator>-&gt;</operator><name>numcname</name></name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>

<do>do <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>index</name> <operator>&gt;=</operator> <name>dohlen</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>DOH_DNS_OUT_OF_RANGE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>length</name> <operator>=</operator> <name><name>doh</name><index>[<expr><name>index</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>length</name> <operator>&amp;</operator> <literal type="number">0xc0</literal><operator>)</operator> <operator>==</operator> <literal type="number">0xc0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>newpos</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>index</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;=</operator> <name>dohlen</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>DOH_DNS_OUT_OF_RANGE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>newpos</name> <operator>=</operator> <operator>(</operator><name>length</name> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal> <operator>|</operator> <name><name>doh</name><index>[<expr><name>index</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>index</name> <operator>=</operator> <name>newpos</name></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name>length</name> <operator>&amp;</operator> <literal type="number">0xc0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>DOH_DNS_BAD_LABEL</name></expr>;</return></block_content></block></if> 

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>index</name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name>length</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>DOHcode</name></type> <name>rc</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>len</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>cnameappend</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><literal type="string">"."</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>rc</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>index</name> <operator>+</operator> <name>length</name><operator>)</operator> <operator>&gt;</operator> <name>dohlen</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>DOH_DNS_BAD_LABEL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>cnameappend</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>doh</name><index>[<expr><name>index</name></expr>]</index></name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>rc</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>index</name> <operator>+=</operator> <name>length</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block> while<condition>(<expr><name>length</name> <operator>&amp;&amp;</operator> <operator>--</operator><name>loop</name></expr>)</condition>;</do>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>loop</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>DOH_DNS_LABEL_LOOP</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>DOH_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>DOHcode</name></type> <name>rdata</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>doh</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>dohlen</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>short</name></type> <name>rdlength</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>short</name></type> <name>type</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>dohentry</name></name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>DOHcode</name></type> <name>rc</name></decl>;</decl_stmt>

<switch>switch<condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>DNS_TYPE_A</name></expr>:</case>

<if_stmt><if>if<condition>(<expr><name>rdlength</name> <operator>!=</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>DOH_DNS_RDATA_LEN</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>store_a</name><argument_list>(<argument><expr><name>doh</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>rc</name></expr>;</return></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>DNS_TYPE_AAAA</name></expr>:</case>

<if_stmt><if>if<condition>(<expr><name>rdlength</name> <operator>!=</operator> <literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>DOH_DNS_RDATA_LEN</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>store_aaaa</name><argument_list>(<argument><expr><name>doh</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>rc</name></expr>;</return></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>DNS_TYPE_CNAME</name></expr>:</case>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>store_cname</name><argument_list>(<argument><expr><name>doh</name></expr></argument>, <argument><expr><name>dohlen</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>rc</name></expr>;</return></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>DNS_TYPE_DNAME</name></expr>:</case>

<break>break;</break>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch>

<return>return <expr><name>DOH_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>init_dohentry</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dohentry</name></name> <modifier>*</modifier></type><name>de</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>de</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>de</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>de</name><operator>-&gt;</operator><name>ttl</name></name> <operator>=</operator> <name>INT_MAX</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>UNITTEST</name> <name>DOHcode</name></type> <name>doh_decode</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>doh</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>dohlen</name></decl></parameter>,

<parameter><decl><type><name>DNStype</name></type> <name>dnstype</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>dohentry</name></name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>rcode</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>qdcount</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>ancount</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>type</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>rdlength</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>nscount</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>arcount</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>index</name> <init>= <expr><literal type="number">12</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DOHcode</name></type> <name>rc</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>dohlen</name> <operator>&lt;</operator> <literal type="number">12</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>DOH_TOO_SMALL_BUFFER</name></expr>;</return></block_content></block></if></if_stmt> 

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>doh</name> <operator>||</operator> <name><name>doh</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>||</operator> <name><name>doh</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>DOH_DNS_BAD_ID</name></expr>;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>rcode</name> <operator>=</operator> <name><name>doh</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x0f</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rcode</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>DOH_DNS_BAD_RCODE</name></expr>;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>qdcount</name> <operator>=</operator> <call><name>get16bit</name><argument_list>(<argument><expr><name>doh</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while<condition>(<expr><name>qdcount</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>skipqname</name><argument_list>(<argument><expr><name>doh</name></expr></argument>, <argument><expr><name>dohlen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>rc</name></expr>;</return></block_content></block></if></if_stmt> 

<if_stmt><if>if<condition>(<expr><name>dohlen</name> <operator>&lt;</operator> <operator>(</operator><name>index</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>DOH_DNS_OUT_OF_RANGE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>index</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name>qdcount</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>ancount</name> <operator>=</operator> <call><name>get16bit</name><argument_list>(<argument><expr><name>doh</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while<condition>(<expr><name>ancount</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>class</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>ttl</name></decl>;</decl_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>skipqname</name><argument_list>(<argument><expr><name>doh</name></expr></argument>, <argument><expr><name>dohlen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>rc</name></expr>;</return></block_content></block></if></if_stmt> 

<if_stmt><if>if<condition>(<expr><name>dohlen</name> <operator>&lt;</operator> <operator>(</operator><name>index</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>DOH_DNS_OUT_OF_RANGE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>type</name> <operator>=</operator> <call><name>get16bit</name><argument_list>(<argument><expr><name>doh</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>type</name> <operator>!=</operator> <name>DNS_TYPE_CNAME</name><operator>)</operator> 

<operator>&amp;&amp;</operator> <operator>(</operator><name>type</name> <operator>!=</operator> <name>DNS_TYPE_DNAME</name><operator>)</operator> 

<operator>&amp;&amp;</operator> <operator>(</operator><name>type</name> <operator>!=</operator> <name>dnstype</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>DOH_DNS_UNEXPECTED_TYPE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>index</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>dohlen</name> <operator>&lt;</operator> <operator>(</operator><name>index</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>DOH_DNS_OUT_OF_RANGE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>class</name> <operator>=</operator> <call><name>get16bit</name><argument_list>(<argument><expr><name>doh</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>DNS_CLASS_IN</name> <operator>!=</operator> <name>class</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>DOH_DNS_UNEXPECTED_CLASS</name></expr>;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>index</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>dohlen</name> <operator>&lt;</operator> <operator>(</operator><name>index</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>DOH_DNS_OUT_OF_RANGE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ttl</name> <operator>=</operator> <call><name>get32bit</name><argument_list>(<argument><expr><name>doh</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>ttl</name> <operator>&lt;</operator> <name><name>d</name><operator>-&gt;</operator><name>ttl</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>ttl</name></name> <operator>=</operator> <name>ttl</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>index</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>dohlen</name> <operator>&lt;</operator> <operator>(</operator><name>index</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>DOH_DNS_OUT_OF_RANGE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>rdlength</name> <operator>=</operator> <call><name>get16bit</name><argument_list>(<argument><expr><name>doh</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>index</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>dohlen</name> <operator>&lt;</operator> <operator>(</operator><name>index</name> <operator>+</operator> <name>rdlength</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>DOH_DNS_OUT_OF_RANGE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>rdata</name><argument_list>(<argument><expr><name>doh</name></expr></argument>, <argument><expr><name>dohlen</name></expr></argument>, <argument><expr><name>rdlength</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>rc</name></expr>;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>index</name> <operator>+=</operator> <name>rdlength</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ancount</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>nscount</name> <operator>=</operator> <call><name>get16bit</name><argument_list>(<argument><expr><name>doh</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while<condition>(<expr><name>nscount</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>skipqname</name><argument_list>(<argument><expr><name>doh</name></expr></argument>, <argument><expr><name>dohlen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>rc</name></expr>;</return></block_content></block></if></if_stmt> 

<if_stmt><if>if<condition>(<expr><name>dohlen</name> <operator>&lt;</operator> <operator>(</operator><name>index</name> <operator>+</operator> <literal type="number">8</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>DOH_DNS_OUT_OF_RANGE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>index</name> <operator>+=</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt> 

<if_stmt><if>if<condition>(<expr><name>dohlen</name> <operator>&lt;</operator> <operator>(</operator><name>index</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>DOH_DNS_OUT_OF_RANGE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>rdlength</name> <operator>=</operator> <call><name>get16bit</name><argument_list>(<argument><expr><name>doh</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>index</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>dohlen</name> <operator>&lt;</operator> <operator>(</operator><name>index</name> <operator>+</operator> <name>rdlength</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>DOH_DNS_OUT_OF_RANGE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>index</name> <operator>+=</operator> <name>rdlength</name></expr>;</expr_stmt>

<expr_stmt><expr><name>nscount</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>arcount</name> <operator>=</operator> <call><name>get16bit</name><argument_list>(<argument><expr><name>doh</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while<condition>(<expr><name>arcount</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>skipqname</name><argument_list>(<argument><expr><name>doh</name></expr></argument>, <argument><expr><name>dohlen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>rc</name></expr>;</return></block_content></block></if></if_stmt> 

<if_stmt><if>if<condition>(<expr><name>dohlen</name> <operator>&lt;</operator> <operator>(</operator><name>index</name> <operator>+</operator> <literal type="number">8</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>DOH_DNS_OUT_OF_RANGE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>index</name> <operator>+=</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt> 

<if_stmt><if>if<condition>(<expr><name>dohlen</name> <operator>&lt;</operator> <operator>(</operator><name>index</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>DOH_DNS_OUT_OF_RANGE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>rdlength</name> <operator>=</operator> <call><name>get16bit</name><argument_list>(<argument><expr><name>doh</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>index</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>dohlen</name> <operator>&lt;</operator> <operator>(</operator><name>index</name> <operator>+</operator> <name>rdlength</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>DOH_DNS_OUT_OF_RANGE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>index</name> <operator>+=</operator> <name>rdlength</name></expr>;</expr_stmt>

<expr_stmt><expr><name>arcount</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if<condition>(<expr><name>index</name> <operator>!=</operator> <name>dohlen</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>DOH_DNS_MALFORMAT</name></expr>;</return></block_content></block></if></if_stmt> 

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>type</name> <operator>!=</operator> <name>DNS_TYPE_NS</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>d</name><operator>-&gt;</operator><name>numcname</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>d</name><operator>-&gt;</operator><name>numaddr</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>DOH_NO_CONTENT</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>DOH_OK</name></expr>;</return> 

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_VERBOSE_STRINGS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type> <name>showdoh</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>dohentry</name></name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"TTL: %u seconds\n"</literal></expr></argument>, <argument><expr><name><name>d</name><operator>-&gt;</operator><name>ttl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>d</name><operator>-&gt;</operator><name>numaddr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>dohaddr</name></name> <modifier>*</modifier></type><name>a</name> <init>= <expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>addr</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>DNS_TYPE_A</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"DOH A: %u.%u.%u.%u\n"</literal></expr></argument>,

<argument><expr><name><name>a</name><operator>-&gt;</operator><name>ip</name><operator>.</operator><name>v4</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>ip</name><operator>.</operator><name>v4</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>a</name><operator>-&gt;</operator><name>ip</name><operator>.</operator><name>v4</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>ip</name><operator>.</operator><name>v4</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>DNS_TYPE_AAAA</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msnprintf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>, <argument><expr><literal type="string">"DOH AAAA: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <operator>&amp;</operator><name><name>buffer</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">118</literal></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>j</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>l</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msnprintf</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="string">"%s%02x%02x"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>j</name></expr>?</condition><then><expr><literal type="string">":"</literal></expr></then><else>:<expr><literal type="string">""</literal></expr></else></ternary></expr></argument>, <argument><expr><name><name>d</name><operator>-&gt;</operator><name>addr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>ip</name><operator>.</operator><name>v6</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>d</name><operator>-&gt;</operator><name>addr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>ip</name><operator>.</operator><name>v6</name><index>[<expr><name>j</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>l</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>-=</operator> <name>l</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <name>l</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>d</name><operator>-&gt;</operator><name>numcname</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"CNAME: %s\n"</literal></expr></argument>, <argument><expr><name><name>d</name><operator>-&gt;</operator><name>cname</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>alloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>showdoh</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>Curl_addrinfo</name> <modifier>*</modifier></type>

<name>doh2ai</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>dohentry</name></name> <modifier>*</modifier></type><name>de</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>hostname</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>port</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>Curl_addrinfo</name> <modifier>*</modifier></type><name>ai</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Curl_addrinfo</name> <modifier>*</modifier></type><name>prevai</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Curl_addrinfo</name> <modifier>*</modifier></type><name>firstai</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in</name></name> <modifier>*</modifier></type><name>addr</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_IPV6</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in6</name></name> <modifier>*</modifier></type><name>addr6</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>de</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>de</name><operator>-&gt;</operator><name>numaddr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>ss_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CURL_SA_FAMILY_T</name></type> <name>addrtype</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>de</name><operator>-&gt;</operator><name>addr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>DNS_TYPE_AAAA</name></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_IPV6</name></expr></argument>)</argument_list></call></expr></cpp:if>
<continue>continue;</continue>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name>ss_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>sockaddr_in6</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name>addrtype</name> <operator>=</operator> <name>AF_INET6</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>ss_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>sockaddr_in</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name>addrtype</name> <operator>=</operator> <name>AF_INET</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>ai</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Curl_addrinfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>ai</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_OUT_OF_MEMORY</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ai</name><operator>-&gt;</operator><name>ai_canonname</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>hostname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>ai</name><operator>-&gt;</operator><name>ai_canonname</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_OUT_OF_MEMORY</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ai</name><operator>-&gt;</operator><name>ai_addr</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>ss_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>ai</name><operator>-&gt;</operator><name>ai_addr</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_OUT_OF_MEMORY</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>ai</name><operator>-&gt;</operator><name>ai_canonname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>firstai</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>firstai</name> <operator>=</operator> <name>ai</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>prevai</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>prevai</name><operator>-&gt;</operator><name>ai_next</name></name> <operator>=</operator> <name>ai</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ai</name><operator>-&gt;</operator><name>ai_family</name></name> <operator>=</operator> <name>addrtype</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ai</name><operator>-&gt;</operator><name>ai_socktype</name></name> <operator>=</operator> <name>SOCK_STREAM</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ai</name><operator>-&gt;</operator><name>ai_addrlen</name></name> <operator>=</operator> <operator>(</operator><name>curl_socklen_t</name><operator>)</operator><name>ss_size</name></expr>;</expr_stmt>

<switch>switch<condition>(<expr><name><name>ai</name><operator>-&gt;</operator><name>ai_family</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AF_INET</name></expr>:</case>

<expr_stmt><expr><name>addr</name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>ai</name><operator>-&gt;</operator><name>ai_addr</name></name></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>DEBUGASSERT</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>in_addr</name></expr></argument>)</argument_list></sizeof> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>de</name><operator>-&gt;</operator><name>addr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>ip</name><operator>.</operator><name>v4</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>addr</name><operator>-&gt;</operator><name>sin_addr</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>de</name><operator>-&gt;</operator><name>addr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>ip</name><operator>.</operator><name>v4</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>in_addr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>addr</name><operator>-&gt;</operator><name>sin_family</name></name> <operator>=</operator> <operator>(</operator><name>CURL_SA_FAMILY_T</name><operator>)</operator><name>addrtype</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>addr</name><operator>-&gt;</operator><name>sin_port</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>short</name><operator>)</operator><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_IPV6</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>AF_INET6</name></expr>:</case>

<expr_stmt><expr><name>addr6</name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>ai</name><operator>-&gt;</operator><name>ai_addr</name></name></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>DEBUGASSERT</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>in6_addr</name></expr></argument>)</argument_list></sizeof> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>de</name><operator>-&gt;</operator><name>addr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>ip</name><operator>.</operator><name>v6</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>addr6</name><operator>-&gt;</operator><name>sin6_addr</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>de</name><operator>-&gt;</operator><name>addr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>ip</name><operator>.</operator><name>v6</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>in6_addr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>addr6</name><operator>-&gt;</operator><name>sin6_family</name></name> <operator>=</operator> <operator>(</operator><name>CURL_SA_FAMILY_T</name><operator>)</operator><name>addrtype</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>addr6</name><operator>-&gt;</operator><name>sin6_port</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>short</name><operator>)</operator><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></switch>

<expr_stmt><expr><name>prevai</name> <operator>=</operator> <name>ai</name></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>Curl_freeaddrinfo</name><argument_list>(<argument><expr><name>firstai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>firstai</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>firstai</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_VERBOSE_STRINGS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>type2name</name><parameter_list>(<parameter><decl><type><name>DNStype</name></type> <name>dnstype</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><ternary><condition><expr><operator>(</operator><name>dnstype</name> <operator>==</operator> <name>DNS_TYPE_A</name><operator>)</operator></expr>?</condition><then><expr><literal type="string">"A"</literal></expr></then><else>:<expr><literal type="string">"AAAA"</literal></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>UNITTEST</name> <name>void</name></type> <name>de_cleanup</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dohentry</name></name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>d</name><operator>-&gt;</operator><name>numcname</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>cname</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>alloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>CURLcode</name></type> <name>Curl_doh_is_resolved</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>Curl_dns_entry</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>dnsp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>dnsp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt> 

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>doh</name><operator>.</operator><name>probe</name><index>[<expr><name>DOH_PROBE_SLOT_IPADDR_V4</name></expr>]</index></name><operator>.</operator><name>easy</name> <operator>&amp;&amp;</operator>

<operator>!</operator><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>doh</name><operator>.</operator><name>probe</name><index>[<expr><name>DOH_PROBE_SLOT_IPADDR_V6</name></expr>]</index></name><operator>.</operator><name>easy</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Could not DOH-resolve: %s"</literal></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>async</name><operator>.</operator><name>hostname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><ternary><condition><expr><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>proxy</name></name></expr>?</condition><then><expr><name>CURLE_COULDNT_RESOLVE_PROXY</name></expr></then><else>:

<expr><name>CURLE_COULDNT_RESOLVE_HOST</name></expr></else></ternary></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><operator>!</operator><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>doh</name><operator>.</operator><name>pending</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>DOHcode</name></type> <name><name>rc</name><index>[<expr><name>DOH_PROBE_SLOTS</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>dohentry</name></name></type> <name>de</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>slot</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>slot</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>slot</name> <operator>&lt;</operator> <name>DOH_PROBE_SLOTS</name></expr>;</condition> <incr><expr><name>slot</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>curl_multi_remove_handle</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>multi</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>doh</name><operator>.</operator><name>probe</name><index>[<expr><name>slot</name></expr>]</index></name><operator>.</operator><name>easy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_close</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>doh</name><operator>.</operator><name>probe</name><index>[<expr><name>slot</name></expr>]</index></name><operator>.</operator><name>easy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>init_dohentry</name><argument_list>(<argument><expr><operator>&amp;</operator><name>de</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>slot</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>slot</name> <operator>&lt;</operator> <name>DOH_PROBE_SLOTS</name></expr>;</condition> <incr><expr><name>slot</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>rc</name><index>[<expr><name>slot</name></expr>]</index></name> <operator>=</operator> <call><name>doh_decode</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>doh</name><operator>.</operator><name>probe</name><index>[<expr><name>slot</name></expr>]</index></name><operator>.</operator><name><name>serverdoh</name><operator>.</operator><name>memory</name></name></expr></argument>,

<argument><expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>doh</name><operator>.</operator><name>probe</name><index>[<expr><name>slot</name></expr>]</index></name><operator>.</operator><name><name>serverdoh</name><operator>.</operator><name>size</name></name></expr></argument>,

<argument><expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>doh</name><operator>.</operator><name>probe</name><index>[<expr><name>slot</name></expr>]</index></name><operator>.</operator><name>dnstype</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>de</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>doh</name><operator>.</operator><name>probe</name><index>[<expr><name>slot</name></expr>]</index></name><operator>.</operator><name><name>serverdoh</name><operator>.</operator><name>memory</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>rc</name><index>[<expr><name>slot</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"DOH: %s type %s for %s\n"</literal></expr></argument>, <argument><expr><call><name>doh_strerror</name><argument_list>(<argument><expr><name><name>rc</name><index>[<expr><name>slot</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>type2name</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>doh</name><operator>.</operator><name>probe</name><index>[<expr><name>slot</name></expr>]</index></name><operator>.</operator><name>dnstype</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>doh</name><operator>.</operator><name>host</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for> 

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_COULDNT_RESOLVE_HOST</name></expr>;</expr_stmt> 

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>rc</name><index>[<expr><name>DOH_PROBE_SLOT_IPADDR_V4</name></expr>]</index></name> <operator>||</operator> <operator>!</operator><name><name>rc</name><index>[<expr><name>DOH_PROBE_SLOT_IPADDR_V6</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>Curl_dns_entry</name></name> <modifier>*</modifier></type><name>dns</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>Curl_addrinfo</name></name> <modifier>*</modifier></type><name>ai</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"DOH Host name: %s\n"</literal></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>doh</name><operator>.</operator><name>host</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>showdoh</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>de</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ai</name> <operator>=</operator> <call><name>doh2ai</name><argument_list>(<argument><expr><operator>&amp;</operator><name>de</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>doh</name><operator>.</operator><name>host</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>doh</name><operator>.</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>ai</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>de_cleanup</name><argument_list>(<argument><expr><operator>&amp;</operator><name>de</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>share</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>Curl_share_lock</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>CURL_LOCK_DATA_DNS</name></expr></argument>, <argument><expr><name>CURL_LOCK_ACCESS_SINGLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>dns</name> <operator>=</operator> <call><name>Curl_cache_addr</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>ai</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>doh</name><operator>.</operator><name>host</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>doh</name><operator>.</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>share</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>Curl_share_unlock</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>CURL_LOCK_DATA_DNS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>dns</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>Curl_freeaddrinfo</name><argument_list>(<argument><expr><name>ai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>async</name><operator>.</operator><name>dns</name></name> <operator>=</operator> <name>dns</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>dnsp</name> <operator>=</operator> <name>dns</name></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_OK</name></expr>;</expr_stmt> 

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt> 

<expr_stmt><expr><call><name>de_cleanup</name><argument_list>(<argument><expr><operator>&amp;</operator><name>de</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></if></if_stmt> 

<return>return <expr><name>CURLE_OK</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</unit>
