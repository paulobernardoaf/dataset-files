<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\curl-analysis\_cppstats\curl\lib\altsvc.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_setup.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_HTTP</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>USE_ALTSVC</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;curl/curl.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"urldata.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"altsvc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_get_line.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"strcase.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"parsedate.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sendf.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"warnless.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rand.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rename.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_printf.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_memory.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memdebug.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_ALTSVC_LINE</name></cpp:macro> <cpp:value>4095</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_ALTSVC_DATELENSTR</name></cpp:macro> <cpp:value>"64"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_ALTSVC_DATELEN</name></cpp:macro> <cpp:value>64</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_ALTSVC_HOSTLENSTR</name></cpp:macro> <cpp:value>"512"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_ALTSVC_HOSTLEN</name></cpp:macro> <cpp:value>512</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_ALTSVC_ALPNLENSTR</name></cpp:macro> <cpp:value>"10"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_ALTSVC_ALPNLEN</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>USE_QUICHE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>USE_NGTCP2</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>UNITTESTS</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>H3VERSION</name></cpp:macro> <cpp:value>"h3-27"</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>H3VERSION</name></cpp:macro> <cpp:value>"h3"</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name><name>enum</name> <name>alpnid</name></name></type> <name>alpn2alpnid</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>strcasecompare</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"h1"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ALPN_h1</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>strcasecompare</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"h2"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ALPN_h2</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>strcasecompare</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>H3VERSION</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ALPN_h3</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>ALPN_none</name></expr>;</return> 

</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>Curl_alpnid2str</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>alpnid</name></name></type> <name>id</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch<condition>(<expr><name>id</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>ALPN_h1</name></expr>:</case>

<return>return <expr><literal type="string">"h1"</literal></expr>;</return>

<case>case <expr><name>ALPN_h2</name></expr>:</case>

<return>return <expr><literal type="string">"h2"</literal></expr>;</return>

<case>case <expr><name>ALPN_h3</name></expr>:</case>

<return>return <expr><name>H3VERSION</name></expr>;</return>

<default>default:</default>

<return>return <expr><literal type="string">""</literal></expr>;</return> 

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>altsvc_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>altsvc</name></name> <modifier>*</modifier></type><name>as</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>as</name><operator>-&gt;</operator><name>src</name><operator>.</operator><name>host</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>as</name><operator>-&gt;</operator><name>dst</name><operator>.</operator><name>host</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>as</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>altsvc</name></name> <modifier>*</modifier></type><name>altsvc_createid</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>srchost</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dsthost</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>alpnid</name></name></type> <name>srcalpnid</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>alpnid</name></name></type> <name>dstalpnid</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>srcport</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>dstport</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>altsvc</name></name> <modifier>*</modifier></type><name>as</name> <init>= <expr><call><name>calloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>altsvc</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>as</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>as</name><operator>-&gt;</operator><name>src</name><operator>.</operator><name>host</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>srchost</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>as</name><operator>-&gt;</operator><name>src</name><operator>.</operator><name>host</name></name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>as</name><operator>-&gt;</operator><name>dst</name><operator>.</operator><name>host</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>dsthost</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>as</name><operator>-&gt;</operator><name>dst</name><operator>.</operator><name>host</name></name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>as</name><operator>-&gt;</operator><name>src</name><operator>.</operator><name>alpnid</name></name> <operator>=</operator> <name>srcalpnid</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>as</name><operator>-&gt;</operator><name>dst</name><operator>.</operator><name>alpnid</name></name> <operator>=</operator> <name>dstalpnid</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>as</name><operator>-&gt;</operator><name>src</name><operator>.</operator><name>port</name></name> <operator>=</operator> <call><name>curlx_ultous</name><argument_list>(<argument><expr><name>srcport</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>as</name><operator>-&gt;</operator><name>dst</name><operator>.</operator><name>port</name></name> <operator>=</operator> <call><name>curlx_ultous</name><argument_list>(<argument><expr><name>dstport</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>as</name></expr>;</return>

<label><name>error</name>:</label>

<expr_stmt><expr><call><name>altsvc_free</name><argument_list>(<argument><expr><name>as</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>altsvc</name></name> <modifier>*</modifier></type><name>altsvc_create</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>srchost</name></decl></parameter>,

<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>dsthost</name></decl></parameter>,

<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>srcalpn</name></decl></parameter>,

<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>dstalpn</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>srcport</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>dstport</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>enum</name> <name>alpnid</name></name></type> <name>dstalpnid</name> <init>= <expr><call><name>alpn2alpnid</name><argument_list>(<argument><expr><name>dstalpn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>alpnid</name></name></type> <name>srcalpnid</name> <init>= <expr><call><name>alpn2alpnid</name><argument_list>(<argument><expr><name>srcalpn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>srcalpnid</name> <operator>||</operator> <operator>!</operator><name>dstalpnid</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>altsvc_createid</name><argument_list>(<argument><expr><name>srchost</name></expr></argument>, <argument><expr><name>dsthost</name></expr></argument>, <argument><expr><name>srcalpnid</name></expr></argument>, <argument><expr><name>dstalpnid</name></expr></argument>,

<argument><expr><name>srcport</name></expr></argument>, <argument><expr><name>dstport</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>altsvc_add</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>altsvcinfo</name></name> <modifier>*</modifier></type><name>asi</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>line</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>srchost</name><index>[<expr><name>MAX_ALTSVC_HOSTLEN</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>dsthost</name><index>[<expr><name>MAX_ALTSVC_HOSTLEN</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>srcalpn</name><index>[<expr><name>MAX_ALTSVC_ALPNLEN</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>dstalpn</name><index>[<expr><name>MAX_ALTSVC_ALPNLEN</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>date</name><index>[<expr><name>MAX_ALTSVC_DATELEN</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>srcport</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>dstport</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>prio</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>persist</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sscanf</name><argument_list>(<argument><expr><name>line</name></expr></argument>,

<argument><expr><literal type="string">"%"</literal> <name>MAX_ALTSVC_ALPNLENSTR</name> <literal type="string">"s %"</literal> <name>MAX_ALTSVC_HOSTLENSTR</name> <literal type="string">"s %u "</literal>

<literal type="string">"%"</literal> <name>MAX_ALTSVC_ALPNLENSTR</name> <literal type="string">"s %"</literal> <name>MAX_ALTSVC_HOSTLENSTR</name> <literal type="string">"s %u "</literal>

<literal type="string">"\"%"</literal> <name>MAX_ALTSVC_DATELENSTR</name> <literal type="string">"[^\"]\" %u %u"</literal></expr></argument>,

<argument><expr><name>srcalpn</name></expr></argument>, <argument><expr><name>srchost</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>srcport</name></expr></argument>,

<argument><expr><name>dstalpn</name></expr></argument>, <argument><expr><name>dsthost</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dstport</name></expr></argument>,

<argument><expr><name>date</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>persist</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>prio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><literal type="number">9</literal> <operator>==</operator> <name>rc</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>altsvc</name></name> <modifier>*</modifier></type><name>as</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>time_t</name></type> <name>expires</name> <init>= <expr><call><name>Curl_getdate_capped</name><argument_list>(<argument><expr><name>date</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>as</name> <operator>=</operator> <call><name>altsvc_create</name><argument_list>(<argument><expr><name>srchost</name></expr></argument>, <argument><expr><name>dsthost</name></expr></argument>, <argument><expr><name>srcalpn</name></expr></argument>, <argument><expr><name>dstalpn</name></expr></argument>, <argument><expr><name>srcport</name></expr></argument>, <argument><expr><name>dstport</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>as</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>as</name><operator>-&gt;</operator><name>expires</name></name> <operator>=</operator> <name>expires</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>as</name><operator>-&gt;</operator><name>prio</name></name> <operator>=</operator> <name>prio</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>as</name><operator>-&gt;</operator><name>persist</name></name> <operator>=</operator> <ternary><condition><expr><name>persist</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_llist_insert_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>asi</name><operator>-&gt;</operator><name>list</name></name></expr></argument>, <argument><expr><name><name>asi</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>tail</name></name></expr></argument>, <argument><expr><name>as</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>as</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>asi</name><operator>-&gt;</operator><name>num</name></name><operator>++</operator></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>altsvc_load</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>altsvcinfo</name></name> <modifier>*</modifier></type><name>asi</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>line</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>asi</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>asi</name><operator>-&gt;</operator><name>filename</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>asi</name><operator>-&gt;</operator><name>filename</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>fp</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>FOPEN_READTEXT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>fp</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>MAX_ALTSVC_LINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>line</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<while>while<condition>(<expr><call><name>Curl_get_line</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>MAX_ALTSVC_LINE</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>lineptr</name> <init>= <expr><name>line</name></expr></init></decl>;</decl_stmt>

<while>while<condition>(<expr><operator>*</operator><name>lineptr</name> <operator>&amp;&amp;</operator> <call><name>ISBLANK</name><argument_list>(<argument><expr><operator>*</operator><name>lineptr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>lineptr</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if<condition>(<expr><operator>*</operator><name>lineptr</name> <operator>==</operator> <literal type="char">'#'</literal></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>altsvc_add</name><argument_list>(<argument><expr><name>asi</name></expr></argument>, <argument><expr><name>lineptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>

<label><name>fail</name>:</label>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>asi</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>altsvc_out</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>altsvc</name></name> <modifier>*</modifier></type><name>as</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name></type> <name>stamp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><call><name>Curl_gmtime</name><argument_list>(<argument><expr><name><name>as</name><operator>-&gt;</operator><name>expires</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stamp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>,

<argument><expr><literal type="string">"%s %s %u "</literal>

<literal type="string">"%s %s %u "</literal>

<literal type="string">"\"%d%02d%02d "</literal>

<literal type="string">"%02d:%02d:%02d\" "</literal>

<literal type="string">"%u %d\n"</literal></expr></argument>,

<argument><expr><call><name>Curl_alpnid2str</name><argument_list>(<argument><expr><name><name>as</name><operator>-&gt;</operator><name>src</name><operator>.</operator><name>alpnid</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>as</name><operator>-&gt;</operator><name>src</name><operator>.</operator><name>host</name></name></expr></argument>, <argument><expr><name><name>as</name><operator>-&gt;</operator><name>src</name><operator>.</operator><name>port</name></name></expr></argument>,

<argument><expr><call><name>Curl_alpnid2str</name><argument_list>(<argument><expr><name><name>as</name><operator>-&gt;</operator><name>dst</name><operator>.</operator><name>alpnid</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>as</name><operator>-&gt;</operator><name>dst</name><operator>.</operator><name>host</name></name></expr></argument>, <argument><expr><name><name>as</name><operator>-&gt;</operator><name>dst</name><operator>.</operator><name>port</name></name></expr></argument>,

<argument><expr><name><name>stamp</name><operator>.</operator><name>tm_year</name></name> <operator>+</operator> <literal type="number">1900</literal></expr></argument>, <argument><expr><name><name>stamp</name><operator>.</operator><name>tm_mon</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>stamp</name><operator>.</operator><name>tm_mday</name></name></expr></argument>,

<argument><expr><name><name>stamp</name><operator>.</operator><name>tm_hour</name></name></expr></argument>, <argument><expr><name><name>stamp</name><operator>.</operator><name>tm_min</name></name></expr></argument>, <argument><expr><name><name>stamp</name><operator>.</operator><name>tm_sec</name></name></expr></argument>,

<argument><expr><name><name>as</name><operator>-&gt;</operator><name>persist</name></name></expr></argument>, <argument><expr><name><name>as</name><operator>-&gt;</operator><name>prio</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><name><name>struct</name> <name>altsvcinfo</name></name> <modifier>*</modifier></type><name>Curl_altsvc_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>altsvcinfo</name></name> <modifier>*</modifier></type><name>asi</name> <init>= <expr><call><name>calloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>altsvcinfo</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>asi</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>Curl_llist_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>asi</name><operator>-&gt;</operator><name>list</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>asi</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name>CURLALTSVC_H1</name>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_NGHTTP2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>|</operator> <name>CURLALTSVC_H2</name>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_QUIC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>|</operator> <name>CURLALTSVC_H3</name></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

;</expr_stmt>

<return>return <expr><name>asi</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>CURLcode</name></type> <name>Curl_altsvc_load</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>altsvcinfo</name></name> <modifier>*</modifier></type><name>asi</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DEBUGASSERT</name><argument_list>(<argument><expr><name>asi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>altsvc_load</name><argument_list>(<argument><expr><name>asi</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>CURLcode</name></type> <name>Curl_altsvc_ctrl</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>altsvcinfo</name></name> <modifier>*</modifier></type><name>asi</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>long</name></type> <name>ctrl</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>DEBUGASSERT</name><argument_list>(<argument><expr><name>asi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>ctrl</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_BAD_FUNCTION_ARGUMENT</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>asi</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name>ctrl</name></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>Curl_altsvc_cleanup</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>altsvcinfo</name></name> <modifier>*</modifier></type><name>altsvc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>curl_llist_element</name></name> <modifier>*</modifier></type><name>e</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>curl_llist_element</name></name> <modifier>*</modifier></type><name>n</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>altsvc</name></expr>)</condition> <block>{<block_content>

<for>for<control>(<init><expr><name>e</name> <operator>=</operator> <name><name>altsvc</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>head</name></name></expr>;</init> <condition><expr><name>e</name></expr>;</condition> <incr><expr><name>e</name> <operator>=</operator> <name>n</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>altsvc</name></name> <modifier>*</modifier></type><name>as</name> <init>= <expr><name><name>e</name><operator>-&gt;</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>e</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>altsvc_free</name><argument_list>(<argument><expr><name>as</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>altsvc</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>altsvc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>CURLcode</name></type> <name>Curl_altsvc_save</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>altsvcinfo</name></name> <modifier>*</modifier></type><name>altsvc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>curl_llist_element</name></name> <modifier>*</modifier></type><name>e</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>curl_llist_element</name></name> <modifier>*</modifier></type><name>n</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>out</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tempstore</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>randsuffix</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>altsvc</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_OK</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>file</name> <operator>&amp;&amp;</operator> <name><name>altsvc</name><operator>-&gt;</operator><name>filename</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>file</name> <operator>=</operator> <name><name>altsvc</name><operator>-&gt;</operator><name>filename</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>altsvc</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CURLALTSVC_READONLYFILE</name><operator>)</operator> <operator>||</operator> <operator>!</operator><name>file</name> <operator>||</operator> <operator>!</operator><name><name>file</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_OK</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>Curl_rand_hex</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>randsuffix</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>randsuffix</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_FAILED_INIT</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>tempstore</name> <operator>=</operator> <call><name>aprintf</name><argument_list>(<argument><expr><literal type="string">"%s.%s.tmp"</literal></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>randsuffix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>tempstore</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>tempstore</name></expr></argument>, <argument><expr><name>FOPEN_WRITETEXT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>out</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_WRITE_ERROR</name></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><literal type="string">"#Your alt-svc cache. https://curl.haxx.se/docs/alt-svc.html\n"</literal>

<literal type="string">"#This file was generated by libcurl! Edit at your own risk.\n"</literal></expr></argument>,

<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>e</name> <operator>=</operator> <name><name>altsvc</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>head</name></name></expr>;</init> <condition><expr><name>e</name></expr>;</condition> <incr><expr><name>e</name> <operator>=</operator> <name>n</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>altsvc</name></name> <modifier>*</modifier></type><name>as</name> <init>= <expr><name><name>e</name><operator>-&gt;</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>e</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>altsvc_out</name><argument_list>(<argument><expr><name>as</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>result</name> <operator>&amp;&amp;</operator> <call><name>Curl_rename</name><argument_list>(<argument><expr><name>tempstore</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_WRITE_ERROR</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>unlink</name><argument_list>(<argument><expr><name>tempstore</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>tempstore</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>getalnum</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>alpnbuf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>buflen</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>protop</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>*</operator><name>ptr</name></expr></init></decl>;</decl_stmt>

<while>while<condition>(<expr><operator>*</operator><name>p</name> <operator>&amp;&amp;</operator> <call><name>ISBLANK</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name>protop</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

<while>while<condition>(<expr><operator>*</operator><name>p</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>ISBLANK</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">';'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'='</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name>p</name> <operator>-</operator> <name>protop</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>len</name> <operator>||</operator> <operator>(</operator><name>len</name> <operator>&gt;=</operator> <name>buflen</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_BAD_FUNCTION_ARGUMENT</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>alpnbuf</name></expr></argument>, <argument><expr><name>protop</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>alpnbuf</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>altsvc_flush</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>altsvcinfo</name></name> <modifier>*</modifier></type><name>asi</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>alpnid</name></name></type> <name>srcalpnid</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>srchost</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>short</name></type> <name>srcport</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>curl_llist_element</name></name> <modifier>*</modifier></type><name>e</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>curl_llist_element</name></name> <modifier>*</modifier></type><name>n</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>e</name> <operator>=</operator> <name><name>asi</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>head</name></name></expr>;</init> <condition><expr><name>e</name></expr>;</condition> <incr><expr><name>e</name> <operator>=</operator> <name>n</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>altsvc</name></name> <modifier>*</modifier></type><name>as</name> <init>= <expr><name><name>e</name><operator>-&gt;</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>e</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>srcalpnid</name> <operator>==</operator> <name><name>as</name><operator>-&gt;</operator><name>src</name><operator>.</operator><name>alpnid</name></name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name>srcport</name> <operator>==</operator> <name><name>as</name><operator>-&gt;</operator><name>src</name><operator>.</operator><name>port</name></name><operator>)</operator> <operator>&amp;&amp;</operator>

<call><name>strcasecompare</name><argument_list>(<argument><expr><name>srchost</name></expr></argument>, <argument><expr><name><name>as</name><operator>-&gt;</operator><name>src</name><operator>.</operator><name>host</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>Curl_llist_remove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>asi</name><operator>-&gt;</operator><name>list</name></name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>altsvc_free</name><argument_list>(<argument><expr><name>as</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>asi</name><operator>-&gt;</operator><name>num</name></name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUGBUILD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>time_t</name></type> <name>debugtime</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>unused</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>timestr</name> <init>= <expr><call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"CURL_TIME"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>unused</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>timestr</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>val</name> <init>= <expr><call><name>strtol</name><argument_list>(<argument><expr><name>timestr</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><operator>(</operator><name>time_t</name><operator>)</operator><name>val</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>time</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>debugtime(x)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>CURLcode</name></type> <name>Curl_altsvc_parse</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>altsvcinfo</name></name> <modifier>*</modifier></type><name>asi</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>alpnid</name></name></type> <name>srcalpnid</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>srchost</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>short</name></type> <name>srcport</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>value</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>alpnid</name></name></type> <name>dstalpnid</name> <init>= <expr><name>srcalpnid</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name></type> <name><name>namebuf</name><index>[<expr><name>MAX_ALTSVC_HOSTLEN</name></expr>]</index></name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>alpnbuf</name><index>[<expr><name>MAX_ALTSVC_ALPNLEN</name></expr>]</index></name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>altsvc</name></name> <modifier>*</modifier></type><name>as</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>dstport</name> <init>= <expr><name>srcport</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><call><name>getalnum</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>alpnbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>alpnbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Excessive alt-svc header, ignoring...\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>DEBUGASSERT</name><argument_list>(<argument><expr><name>asi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>altsvc_flush</name><argument_list>(<argument><expr><name>asi</name></expr></argument>, <argument><expr><name>srcalpnid</name></expr></argument>, <argument><expr><name>srchost</name></expr></argument>, <argument><expr><name>srcport</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>strcasecompare</name><argument_list>(<argument><expr><name>alpnbuf</name></expr></argument>, <argument><expr><literal type="string">"clear"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<do>do <block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'='</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>dstalpnid</name> <operator>=</operator> <call><name>alpn2alpnid</name><argument_list>(<argument><expr><name>alpnbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'\"'</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dsthost</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value_ptr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>option</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>num</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>end_ptr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>quoted</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>time_t</name></type> <name>maxage</name> <init>= <expr><literal type="number">24</literal> <operator>*</operator> <literal type="number">3600</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>bool</name></type> <name>persist</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">':'</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>hostp</name> <init>= <expr><name>p</name></expr></init></decl>;</decl_stmt>

<while>while<condition>(<expr><operator>*</operator><name>p</name> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>ISALNUM</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'.'</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'-'</literal><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name>p</name> <operator>-</operator> <name>hostp</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>len</name> <operator>||</operator> <operator>(</operator><name>len</name> <operator>&gt;=</operator> <name>MAX_ALTSVC_HOSTLEN</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Excessive alt-svc host name, ignoring...\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dstalpnid</name> <operator>=</operator> <name>ALPN_none</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>namebuf</name></expr></argument>, <argument><expr><name>hostp</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>namebuf</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>dsthost</name> <operator>=</operator> <name>namebuf</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>dsthost</name> <operator>=</operator> <name>srchost</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">':'</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>port</name> <init>= <expr><call><name>strtoul</name><argument_list>(<argument><expr><operator>++</operator><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>end_ptr</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>port</name> <operator>&gt;</operator> <name>USHRT_MAX</name> <operator>||</operator> <name>end_ptr</name> <operator>==</operator> <name>p</name> <operator>||</operator> <operator>*</operator><name>end_ptr</name> <operator>!=</operator> <literal type="char">'\"'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Unknown alt-svc port number, ignoring...\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dstalpnid</name> <operator>=</operator> <name>ALPN_none</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>end_ptr</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dstport</name> <operator>=</operator> <call><name>curlx_ultous</name><argument_list>(<argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>*</operator><name>p</name><operator>++</operator> <operator>!=</operator> <literal type="char">'\"'</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<for>for<control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<while>while<condition>(<expr><operator>*</operator><name>p</name> <operator>&amp;&amp;</operator> <call><name>ISBLANK</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">';'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">','</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>*</operator><name>p</name> <operator>||</operator> <operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">','</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt> 

<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>*</operator><name>p</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>getalnum</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>option</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>option</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>option</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<while>while<condition>(<expr><operator>*</operator><name>p</name> <operator>&amp;&amp;</operator> <call><name>ISBLANK</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if<condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'='</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_OK</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>

<while>while<condition>(<expr><operator>*</operator><name>p</name> <operator>&amp;&amp;</operator> <call><name>ISBLANK</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>*</operator><name>p</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_OK</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'\"'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>quoted</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>value_ptr</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>quoted</name></expr>)</condition> <block>{<block_content>

<while>while<condition>(<expr><operator>*</operator><name>p</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'\"'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>*</operator><name>p</name><operator>++</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_OK</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<while>while<condition>(<expr><operator>*</operator><name>p</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>ISBLANK</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name><operator>!=</operator> <literal type="char">';'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">','</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>num</name> <operator>=</operator> <call><name>strtoul</name><argument_list>(<argument><expr><name>value_ptr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>end_ptr</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>end_ptr</name> <operator>!=</operator> <name>value_ptr</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>num</name> <operator>&lt;</operator> <name>ULONG_MAX</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>strcasecompare</name><argument_list>(<argument><expr><literal type="string">"ma"</literal></expr></argument>, <argument><expr><name>option</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>maxage</name> <operator>=</operator> <name>num</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>(<expr><call><name>strcasecompare</name><argument_list>(<argument><expr><literal type="string">"persist"</literal></expr></argument>, <argument><expr><name>option</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>num</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>persist</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if<condition>(<expr><name>dstalpnid</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>as</name> <operator>=</operator> <call><name>altsvc_createid</name><argument_list>(<argument><expr><name>srchost</name></expr></argument>, <argument><expr><name>dsthost</name></expr></argument>,

<argument><expr><name>srcalpnid</name></expr></argument>, <argument><expr><name>dstalpnid</name></expr></argument>,

<argument><expr><name>srcport</name></expr></argument>, <argument><expr><name>dstport</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>as</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>as</name><operator>-&gt;</operator><name>expires</name></name> <operator>=</operator> <name>maxage</name> <operator>+</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>as</name><operator>-&gt;</operator><name>persist</name></name> <operator>=</operator> <name>persist</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_llist_insert_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>asi</name><operator>-&gt;</operator><name>list</name></name></expr></argument>, <argument><expr><name><name>asi</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>tail</name></name></expr></argument>, <argument><expr><name>as</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>as</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>asi</name><operator>-&gt;</operator><name>num</name></name><operator>++</operator></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Added alt-svc: %s:%d over %s\n"</literal></expr></argument>, <argument><expr><name>dsthost</name></expr></argument>, <argument><expr><name>dstport</name></expr></argument>,

<argument><expr><call><name>Curl_alpnid2str</name><argument_list>(<argument><expr><name>dstalpnid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Unknown alt-svc protocol \"%s\", skipping...\n"</literal></expr></argument>,

<argument><expr><name>alpnbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<break>break;</break></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">','</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>getalnum</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>alpnbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>alpnbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<break>break;</break></block_content></block></else></if_stmt>

</block_content>}</block> while<condition>(<expr><operator>*</operator><name>p</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">';'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'\n'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'\r'</literal><operator>)</operator></expr>)</condition>;</do>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>Curl_altsvc_lookup</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>altsvcinfo</name></name> <modifier>*</modifier></type><name>asi</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>alpnid</name></name></type> <name>srcalpnid</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>srchost</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>srcport</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>altsvc</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>dstentry</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>versions</name></decl></parameter>)</parameter_list> 

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>curl_llist_element</name></name> <modifier>*</modifier></type><name>e</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>curl_llist_element</name></name> <modifier>*</modifier></type><name>n</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>time_t</name></type> <name>now</name> <init>= <expr><call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DEBUGASSERT</name><argument_list>(<argument><expr><name>asi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DEBUGASSERT</name><argument_list>(<argument><expr><name>srchost</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DEBUGASSERT</name><argument_list>(<argument><expr><name>dstentry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>e</name> <operator>=</operator> <name><name>asi</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>head</name></name></expr>;</init> <condition><expr><name>e</name></expr>;</condition> <incr><expr><name>e</name> <operator>=</operator> <name>n</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>altsvc</name></name> <modifier>*</modifier></type><name>as</name> <init>= <expr><name><name>e</name><operator>-&gt;</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>e</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>as</name><operator>-&gt;</operator><name>expires</name></name> <operator>&lt;</operator> <name>now</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>Curl_llist_remove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>asi</name><operator>-&gt;</operator><name>list</name></name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>altsvc_free</name><argument_list>(<argument><expr><name>as</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>as</name><operator>-&gt;</operator><name>src</name><operator>.</operator><name>alpnid</name></name> <operator>==</operator> <name>srcalpnid</name><operator>)</operator> <operator>&amp;&amp;</operator>

<call><name>strcasecompare</name><argument_list>(<argument><expr><name><name>as</name><operator>-&gt;</operator><name>src</name><operator>.</operator><name>host</name></name></expr></argument>, <argument><expr><name>srchost</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>as</name><operator>-&gt;</operator><name>src</name><operator>.</operator><name>port</name></name> <operator>==</operator> <name>srcport</name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name>versions</name> <operator>&amp;</operator> <name><name>as</name><operator>-&gt;</operator><name>dst</name><operator>.</operator><name>alpnid</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>dstentry</name> <operator>=</operator> <name>as</name></expr>;</expr_stmt>

<return>return <expr><name>TRUE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</unit>
