<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\curl-analysis\_cppstats\curl\lib\curl_sspi.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_setup.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_WINDOWS_SSPI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;curl/curl.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_sspi.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_multibyte.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"system_win32.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"warnless.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_memory.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memdebug.h"</cpp:file></cpp:include>

<typedef>typedef <function_decl><type><name>PSecurityFunctionTable</name></type> (<name>APIENTRY</name> <modifier>*</modifier><name>INITSECURITYINTERFACE_FN</name>)<parameter_list>(<parameter><decl><type><name>VOID</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNICODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32_WCE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SECURITYENTRYPOINT</name></cpp:macro> <cpp:value>L"InitSecurityInterfaceW"</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SECURITYENTRYPOINT</name></cpp:macro> <cpp:value>"InitSecurityInterfaceW"</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SECURITYENTRYPOINT</name></cpp:macro> <cpp:value>"InitSecurityInterfaceA"</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>HMODULE</name></type> <name>s_hSecDll</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PSecurityFunctionTable</name></type> <name>s_pSecFn</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<function><type><name>CURLcode</name></type> <name>Curl_sspi_global_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>INITSECURITYINTERFACE_FN</name></type> <name>pInitSecurityInterface</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>s_hSecDll</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>Curl_verify_windows_version</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>PLATFORM_WINNT</name></expr></argument>, <argument><expr><name>VERSION_EQUAL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>s_hSecDll</name> <operator>=</operator> <call><name>Curl_load_library</name><argument_list>(<argument><expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"security.dll"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>s_hSecDll</name> <operator>=</operator> <call><name>Curl_load_library</name><argument_list>(<argument><expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"secur32.dll"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>s_hSecDll</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_FAILED_INIT</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>pInitSecurityInterface</name> <operator>=</operator>

<call><name>CURLX_FUNCTION_CAST</name><argument_list>(<argument><expr><name>INITSECURITYINTERFACE_FN</name></expr></argument>,

<argument><expr><operator>(</operator><call><name>GetProcAddress</name><argument_list>(<argument><expr><name>s_hSecDll</name></expr></argument>, <argument><expr><name>SECURITYENTRYPOINT</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>pInitSecurityInterface</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_FAILED_INIT</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>s_pSecFn</name> <operator>=</operator> <call><name>pInitSecurityInterface</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>s_pSecFn</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_FAILED_INIT</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>Curl_sspi_global_cleanup</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>s_hSecDll</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>FreeLibrary</name><argument_list>(<argument><expr><name>s_hSecDll</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>s_hSecDll</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>s_pSecFn</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>CURLcode</name></type> <name>Curl_create_sspi_identity</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>userp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>passwdp</name></decl></parameter>,

<parameter><decl><type><name>SEC_WINNT_AUTH_IDENTITY</name> <modifier>*</modifier></type><name>identity</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>xcharp_u</name></type> <name>useranddomain</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>xcharp_u</name></type> <name>user</name></decl>, <decl><type ref="prev"/><name>dup_user</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>xcharp_u</name></type> <name>domain</name></decl>, <decl><type ref="prev"/><name>dup_domain</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>xcharp_u</name></type> <name>passwd</name></decl>, <decl><type ref="prev"/><name>dup_passwd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>domlen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>domain</name><operator>.</operator><name>const_tchar_ptr</name></name> <operator>=</operator> <call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>identity</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>identity</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>useranddomain</name><operator>.</operator><name>tchar_ptr</name></name> <operator>=</operator> <call><name>Curl_convert_UTF8_to_tchar</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>userp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>useranddomain</name><operator>.</operator><name>tchar_ptr</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>user</name><operator>.</operator><name>const_tchar_ptr</name></name> <operator>=</operator> <call><name>_tcschr</name><argument_list>(<argument><expr><name><name>useranddomain</name><operator>.</operator><name>const_tchar_ptr</name></name></expr></argument>, <argument><expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="char">'\\'</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>user</name><operator>.</operator><name>const_tchar_ptr</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>user</name><operator>.</operator><name>const_tchar_ptr</name></name> <operator>=</operator> <call><name>_tcschr</name><argument_list>(<argument><expr><name><name>useranddomain</name><operator>.</operator><name>const_tchar_ptr</name></name></expr></argument>, <argument><expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>user</name><operator>.</operator><name>tchar_ptr</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>domain</name><operator>.</operator><name>tchar_ptr</name></name> <operator>=</operator> <name><name>useranddomain</name><operator>.</operator><name>tchar_ptr</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>domlen</name> <operator>=</operator> <name><name>user</name><operator>.</operator><name>tchar_ptr</name></name> <operator>-</operator> <name><name>useranddomain</name><operator>.</operator><name>tchar_ptr</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>user</name><operator>.</operator><name>tchar_ptr</name></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name><name>user</name><operator>.</operator><name>tchar_ptr</name></name> <operator>=</operator> <name><name>useranddomain</name><operator>.</operator><name>tchar_ptr</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>domain</name><operator>.</operator><name>const_tchar_ptr</name></name> <operator>=</operator> <call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>domlen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>dup_user</name><operator>.</operator><name>tchar_ptr</name></name> <operator>=</operator> <call><name>_tcsdup</name><argument_list>(<argument><expr><name><name>user</name><operator>.</operator><name>tchar_ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>dup_user</name><operator>.</operator><name>tchar_ptr</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>Curl_unicodefree</name><argument_list>(<argument><expr><name><name>useranddomain</name><operator>.</operator><name>tchar_ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>identity</name><operator>-&gt;</operator><name>User</name></name> <operator>=</operator> <name><name>dup_user</name><operator>.</operator><name>tbyte_ptr</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>identity</name><operator>-&gt;</operator><name>UserLength</name></name> <operator>=</operator> <call><name>curlx_uztoul</name><argument_list>(<argument><expr><call><name>_tcslen</name><argument_list>(<argument><expr><name><name>dup_user</name><operator>.</operator><name>tchar_ptr</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dup_user</name><operator>.</operator><name>tchar_ptr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dup_domain</name><operator>.</operator><name>tchar_ptr</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TCHAR</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>domlen</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>dup_domain</name><operator>.</operator><name>tchar_ptr</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>Curl_unicodefree</name><argument_list>(<argument><expr><name><name>useranddomain</name><operator>.</operator><name>tchar_ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>_tcsncpy</name><argument_list>(<argument><expr><name><name>dup_domain</name><operator>.</operator><name>tchar_ptr</name></name></expr></argument>, <argument><expr><name><name>domain</name><operator>.</operator><name>tchar_ptr</name></name></expr></argument>, <argument><expr><name>domlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>dup_domain</name><operator>.</operator><name>tchar_ptr</name></name> <operator>+</operator> <name>domlen</name><operator>)</operator> <operator>=</operator> <call><name>TEXT</name><argument_list>(<argument><expr><literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>identity</name><operator>-&gt;</operator><name>Domain</name></name> <operator>=</operator> <name><name>dup_domain</name><operator>.</operator><name>tbyte_ptr</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>identity</name><operator>-&gt;</operator><name>DomainLength</name></name> <operator>=</operator> <call><name>curlx_uztoul</name><argument_list>(<argument><expr><name>domlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dup_domain</name><operator>.</operator><name>tchar_ptr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_unicodefree</name><argument_list>(<argument><expr><name><name>useranddomain</name><operator>.</operator><name>tchar_ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>passwd</name><operator>.</operator><name>tchar_ptr</name></name> <operator>=</operator> <call><name>Curl_convert_UTF8_to_tchar</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>passwdp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>passwd</name><operator>.</operator><name>tchar_ptr</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>dup_passwd</name><operator>.</operator><name>tchar_ptr</name></name> <operator>=</operator> <call><name>_tcsdup</name><argument_list>(<argument><expr><name><name>passwd</name><operator>.</operator><name>tchar_ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>dup_passwd</name><operator>.</operator><name>tchar_ptr</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>Curl_unicodefree</name><argument_list>(<argument><expr><name><name>passwd</name><operator>.</operator><name>tchar_ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>identity</name><operator>-&gt;</operator><name>Password</name></name> <operator>=</operator> <name><name>dup_passwd</name><operator>.</operator><name>tbyte_ptr</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>identity</name><operator>-&gt;</operator><name>PasswordLength</name></name> <operator>=</operator> <call><name>curlx_uztoul</name><argument_list>(<argument><expr><call><name>_tcslen</name><argument_list>(<argument><expr><name><name>dup_passwd</name><operator>.</operator><name>tchar_ptr</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dup_passwd</name><operator>.</operator><name>tchar_ptr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_unicodefree</name><argument_list>(<argument><expr><name><name>passwd</name><operator>.</operator><name>tchar_ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>identity</name><operator>-&gt;</operator><name>Flags</name></name> <operator>=</operator> <name>SECFLAG_WINNT_AUTH_IDENTITY</name></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>Curl_sspi_free_identity</name><parameter_list>(<parameter><decl><type><name>SEC_WINNT_AUTH_IDENTITY</name> <modifier>*</modifier></type><name>identity</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>identity</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>identity</name><operator>-&gt;</operator><name>User</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>identity</name><operator>-&gt;</operator><name>Password</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>identity</name><operator>-&gt;</operator><name>Domain</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</unit>
