<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\curl-analysis\_cppstats\curl\lib\conncache.h"><struct>struct <name>conncache</name> <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>curl_hash</name></name></type> <name>hash</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>num_conn</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>next_connection_id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>curltime</name></name></type> <name>last_cleanup</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>closure_handle</name></decl>;</decl_stmt>

}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUNDLE_NO_MULTIUSE</name></cpp:macro> <cpp:value>-1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUNDLE_UNKNOWN</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUNDLE_MULTIPLEX</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CURLDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONN_LOCK</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if((x)-&gt;share) { Curl_share_lock((x), CURL_LOCK_DATA_CONNECT, CURL_LOCK_ACCESS_SINGLE); DEBUGASSERT(!(x)-&gt;state.conncache_lock); (x)-&gt;state.conncache_lock = TRUE; }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONN_UNLOCK</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if((x)-&gt;share) { DEBUGASSERT((x)-&gt;state.conncache_lock); (x)-&gt;state.conncache_lock = FALSE; Curl_share_unlock((x), CURL_LOCK_DATA_CONNECT); }</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONN_LOCK</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if((x)-&gt;share) Curl_share_lock((x), CURL_LOCK_DATA_CONNECT, CURL_LOCK_ACCESS_SINGLE)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONN_UNLOCK</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if((x)-&gt;share) Curl_share_unlock((x), CURL_LOCK_DATA_CONNECT)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<struct>struct <name>connectbundle</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name>multiuse</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>size_t</name></type> <name>num_connections</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name><name>struct</name> <name>curl_llist</name></name></type> <name>conn_list</name></decl>;</decl_stmt> 

}</block>;</struct>

<function_decl><type><name>int</name></type> <name>Curl_conncache_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>conncache</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>Curl_conncache_destroy</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>conncache</name></name> <modifier>*</modifier></type><name>connc</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name><name>struct</name> <name>connectbundle</name></name> <modifier>*</modifier></type><name>Curl_conncache_find_bundle</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>conncache</name></name> <modifier>*</modifier></type><name>connc</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>hostp</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>Curl_conncache_unlock</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>size_t</name></type> <name>Curl_conncache_size</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>Curl_conncache_return_conn</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>Curl_conncache_add_conn</name><argument_list>(<argument><expr>struct <name>conncache</name> <operator>*</operator><name>connc</name></expr></argument>,

<argument><expr>struct <name>connectdata</name> <operator>*</operator><name>conn</name></expr></argument>)</argument_list> <name>WARN_UNUSED_RESULT</name></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> <name>Curl_conncache_remove_conn</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>lock</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>Curl_conncache_foreach</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>conncache</name></name> <modifier>*</modifier></type><name>connc</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>,

<parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>func</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type>

<name>Curl_conncache_find_first_connection</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>conncache</name></name> <modifier>*</modifier></type><name>connc</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type>

<name>Curl_conncache_extract_bundle</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>connectbundle</name></name> <modifier>*</modifier></type><name>bundle</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type>

<name>Curl_conncache_extract_oldest</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>Curl_conncache_close_all_connections</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>conncache</name></name> <modifier>*</modifier></type><name>connc</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>Curl_conncache_print</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>conncache</name></name> <modifier>*</modifier></type><name>connc</name></decl></parameter>)</parameter_list>;</function_decl>

</unit>
