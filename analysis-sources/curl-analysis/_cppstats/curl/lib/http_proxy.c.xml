<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\curl-analysis\_cppstats\curl\lib\http_proxy.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_setup.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_proxy.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_PROXY</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_HTTP</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;curl/curl.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sendf.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"url.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"select.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"progress.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"non-ascii.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"connect.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curlx.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vtls/vtls.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_printf.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_memory.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memdebug.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>https_proxy_connect</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sockindex</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_SSL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DEBUGASSERT</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>http_proxy</name><operator>.</operator><name>proxytype</name></name> <operator>==</operator> <name>CURLPROXY_HTTPS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>proxy_ssl_connected</name><index>[<expr><name>sockindex</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator>

<call><name>Curl_ssl_connect_nonblocking</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>sockindex</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>proxy_ssl_connected</name><index>[<expr><name>sockindex</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>connclose</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><literal type="string">"TLS handshake failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>conn</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>sockindex</name></expr>;</expr_stmt>

<return>return <expr><name>CURLE_NOT_BUILT_IN</name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>CURLcode</name></type> <name>Curl_proxy_connect</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sockindex</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>http_proxy</name><operator>.</operator><name>proxytype</name></name> <operator>==</operator> <name>CURLPROXY_HTTPS</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>CURLcode</name></type> <name>result</name> <init>= <expr><call><name>https_proxy_connect</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>sockindex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>proxy_ssl_connected</name><index>[<expr><name>sockindex</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt> 

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>tunnel_proxy</name></name> <operator>&amp;&amp;</operator> <name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>httpproxy</name></name></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_PROXY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name><name>struct</name> <name>HTTP</name></name></type> <name>http_proxy</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>prot_save</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>hostname</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>remote_port</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name></decl>;</decl_stmt>

<expr_stmt><expr><name>prot_save</name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>protop</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>http_proxy</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>http_proxy</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>protop</name></name> <operator>=</operator> <operator>&amp;</operator><name>http_proxy</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>connkeep</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><literal type="string">"HTTP proxy CONNECT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>conn_to_host</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>hostname</name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>conn_to_host</name><operator>.</operator><name>name</name></name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>(<expr><name>sockindex</name> <operator>==</operator> <name>SECONDARYSOCKET</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>hostname</name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>secondaryhostname</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>hostname</name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>host</name><operator>.</operator><name>name</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name>sockindex</name> <operator>==</operator> <name>SECONDARYSOCKET</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>remote_port</name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>secondary_port</name></name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>conn_to_port</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>remote_port</name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>conn_to_port</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>remote_port</name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>remote_port</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_proxyCONNECT</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>sockindex</name></expr></argument>, <argument><expr><name>hostname</name></expr></argument>, <argument><expr><name>remote_port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>protop</name></name> <operator>=</operator> <name>prot_save</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>CURLE_OK</name> <operator>!=</operator> <name>result</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>allocptr</name><operator>.</operator><name>proxyuserpwd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<return>return <expr><name>CURLE_NOT_BUILT_IN</name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>Curl_connect_complete</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>!</operator><name><name>conn</name><operator>-&gt;</operator><name>connect_state</name></name> <operator>||</operator>

<operator>(</operator><name><name>conn</name><operator>-&gt;</operator><name>connect_state</name><operator>-&gt;</operator><name>tunnel_state</name></name> <operator>==</operator> <name>TUNNEL_COMPLETE</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>Curl_connect_ongoing</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>conn</name><operator>-&gt;</operator><name>connect_state</name></name> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>conn</name><operator>-&gt;</operator><name>connect_state</name><operator>-&gt;</operator><name>tunnel_state</name></name> <operator>!=</operator> <name>TUNNEL_COMPLETE</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>connect_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>reinit</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>http_connect_state</name></name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>reinit</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>DEBUGASSERT</name><argument_list>(<argument><expr><operator>!</operator><name><name>conn</name><operator>-&gt;</operator><name>connect_state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>http_connect_state</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>s</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"allocate connect buffer!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>connect_state</name></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>DEBUGASSERT</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>connect_state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>connect_state</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>tunnel_state</name></name> <operator>=</operator> <name>TUNNEL_INIT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>keepon</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>line_start</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>connect_buffer</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>line_start</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>cl</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>close_connection</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>connect_done</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>http_connect_state</name></name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>connect_state</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>tunnel_state</name></name> <operator>=</operator> <name>TUNNEL_COMPLETE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"CONNECT phase completed!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>CONNECT</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>sockindex</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>hostname</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>remote_port</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>subversion</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>SingleRequest</name></name> <modifier>*</modifier></type><name>k</name> <init>= <expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>req</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>curl_socket_t</name></type> <name>tunnelsocket</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>sock</name><index>[<expr><name>sockindex</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>http_connect_state</name></name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>connect_state</name></name></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SELECT_OK</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SELECT_ERROR</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<if_stmt><if>if<condition>(<expr><call><name>Curl_connect_complete</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_OK</name></expr>;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>proxy_connect_closed</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<do>do <block>{<block_content>

<decl_stmt><decl><type><name>timediff_t</name></type> <name>check</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>TUNNEL_INIT</name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>tunnel_state</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>host_port</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Curl_send_buffer</name> <modifier>*</modifier></type><name>req_buffer</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Establish HTTP proxy tunnel to %s:%d\n"</literal></expr></argument>,

<argument><expr><name>hostname</name></expr></argument>, <argument><expr><name>remote_port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>newurl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>newurl</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>req_buffer</name> <operator>=</operator> <call><name>Curl_add_buffer_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>req_buffer</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>host_port</name> <operator>=</operator> <call><name>aprintf</name><argument_list>(<argument><expr><literal type="string">"%s:%d"</literal></expr></argument>, <argument><expr><name>hostname</name></expr></argument>, <argument><expr><name>remote_port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>host_port</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>Curl_add_buffer_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>req_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_http_output_auth</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><literal type="string">"CONNECT"</literal></expr></argument>, <argument><expr><name>host_port</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>host_port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>result</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>host</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>proxyconn</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>useragent</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>http</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>conn</name><operator>-&gt;</operator><name>http_proxy</name><operator>.</operator><name>proxytype</name></name> <operator>==</operator> <name>CURLPROXY_HTTP_1_0</name><operator>)</operator></expr> ?</condition><then>

<expr><literal type="string">"1.0"</literal></expr> </then><else>: <expr><literal type="string">"1.1"</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>ipv6_ip</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>ipv6_ip</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>hostheader</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>hostname</name> <operator>!=</operator> <name><name>conn</name><operator>-&gt;</operator><name>host</name><operator>.</operator><name>name</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ipv6_ip</name> <operator>=</operator> <operator>(</operator><call><name>strchr</name><argument_list>(<argument><expr><name>hostname</name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>hostheader</name> <operator>=</operator> 

<call><name>aprintf</name><argument_list>(<argument><expr><literal type="string">"%s%s%s:%d"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>ipv6_ip</name></expr>?</condition><then><expr><literal type="string">"["</literal></expr></then><else>:<expr><literal type="string">""</literal></expr></else></ternary></expr></argument>, <argument><expr><name>hostname</name></expr></argument>, <argument><expr><ternary><condition><expr><name>ipv6_ip</name></expr>?</condition><then><expr><literal type="string">"]"</literal></expr></then><else>:<expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,

<argument><expr><name>remote_port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>hostheader</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>Curl_add_buffer_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>req_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>Curl_checkProxyheaders</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><literal type="string">"Host"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>host</name> <operator>=</operator> <call><name>aprintf</name><argument_list>(<argument><expr><literal type="string">"Host: %s\r\n"</literal></expr></argument>, <argument><expr><name>hostheader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>host</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>hostheader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_add_buffer_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>req_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>Curl_checkProxyheaders</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><literal type="string">"Proxy-Connection"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>proxyconn</name> <operator>=</operator> <literal type="string">"Proxy-Connection: Keep-Alive\r\n"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>Curl_checkProxyheaders</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><literal type="string">"User-Agent"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_USERAGENT</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>useragent</name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>allocptr</name><operator>.</operator><name>uagent</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator>

<call><name>Curl_add_bufferf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>req_buffer</name></expr></argument>,

<argument><expr><literal type="string">"CONNECT %s HTTP/%s\r\n"</literal>

<literal type="string">"%s"</literal> 

<literal type="string">"%s"</literal> 

<literal type="string">"%s"</literal> 

<literal type="string">"%s"</literal></expr></argument>, 

<argument><expr><name>hostheader</name></expr></argument>,

<argument><expr><name>http</name></expr></argument>,

<argument><expr><ternary><condition><expr><name>host</name></expr>?</condition><then><expr><name>host</name></expr></then><else>:<expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>conn</name><operator>-&gt;</operator><name>allocptr</name><operator>.</operator><name>proxyuserpwd</name></name></expr>?</condition><then>

<expr><name><name>conn</name><operator>-&gt;</operator><name>allocptr</name><operator>.</operator><name>proxyuserpwd</name></name></expr></then><else>:<expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,

<argument><expr><name>useragent</name></expr></argument>,

<argument><expr><name>proxyconn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>host</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>hostheader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>result</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_add_custom_headers</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>req_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>result</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_add_bufferf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>req_buffer</name></expr></argument>, <argument><expr><literal type="string">"\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>result</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator>

<call><name>Curl_add_buffer_send</name><argument_list>(<argument><expr><operator>&amp;</operator><name>req_buffer</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>request_size</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>sockindex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>req_buffer</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Failed sending CONNECT to proxy"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>Curl_add_buffer_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>req_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>tunnel_state</name></name> <operator>=</operator> <name>TUNNEL_CONNECT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>perline</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt> 

<expr_stmt><expr><name>check</name> <operator>=</operator> <call><name>Curl_timeleft</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>check</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Proxy CONNECT aborted due to timeout"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OPERATION_TIMEDOUT</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>Curl_conn_data_pending</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>sockindex</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_OK</name></expr>;</return></block_content></block></if></if_stmt>

<block>{<block_content> 

<decl_stmt><decl><type><name>int</name></type> <name>error</name> <init>= <expr><name>SELECT_OK</name></expr></init></decl>;</decl_stmt>

<while>while<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>keepon</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>gotbytes</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>ptr</name></name> <operator>&gt;=</operator> <operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>connect_buffer</name><index>[<expr><name>CONNECT_BUFFER_SIZE</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"CONNECT response too large!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_RECV_ERROR</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_read</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>tunnelsocket</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>gotbytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name> <operator>==</operator> <name>CURLE_AGAIN</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_OK</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>Curl_pgrsUpdate</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_ABORTED_BY_CALLBACK</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>keepon</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name>gotbytes</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>proxyauth</name></name> <operator>&amp;&amp;</operator> <name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>authproxy</name><operator>.</operator><name>avail</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>proxy_connect_closed</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Proxy CONNECT connection closed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>error</name> <operator>=</operator> <name>SELECT_ERROR</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Proxy CONNECT aborted"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>keepon</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>keepon</name></name> <operator>&gt;</operator> <name>TRUE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>connect_buffer</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>cl</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>cl</name></name><operator>--</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>cl</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>keepon</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>tunnel_state</name></name> <operator>=</operator> <name>TUNNEL_COMPLETE</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<decl_stmt><decl><type><name>CHUNKcode</name></type> <name>r</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>extra</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>tookcareof</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>Curl_httpchunk_read</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>tookcareof</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>extra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>r</name> <operator>==</operator> <name>CHUNKE_STOP</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"chunk reading DONE\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>keepon</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>tunnel_state</name></name> <operator>=</operator> <name>TUNNEL_COMPLETE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>perline</name></name><operator>++</operator></expr>;</expr_stmt> 

<if_stmt><if>if<condition>(<expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>ptr</name></name> <operator>!=</operator> <literal type="number">0x0a</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>ptr</name></name><operator>++</operator></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_convert_from_network</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>line_start</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>perline</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>verbose</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>Curl_debug</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>CURLINFO_HEADER_IN</name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>line_start</name></name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>perline</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>suppress_connect_headers</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>writetype</name> <init>= <expr><name>CLIENTWRITE_HEADER</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>include_header</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>writetype</name> <operator>|=</operator> <name>CLIENTWRITE_BODY</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_client_write</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>writetype</name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>line_start</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>perline</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>header_size</name></name> <operator>+=</operator> <operator>(</operator><name>long</name><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>perline</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>headerbytecount</name></name> <operator>+=</operator> <operator>(</operator><name>long</name><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>perline</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><literal type="char">'\r'</literal> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>line_start</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>||</operator>

<operator>(</operator><literal type="char">'\n'</literal> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>line_start</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>connect_buffer</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><literal type="number">407</literal> <operator>==</operator> <name><name>k</name><operator>-&gt;</operator><name>httpcode</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>authproblem</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>keepon</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>cl</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Ignore %"</literal> <name>CURL_FORMAT_CURL_OFF_T</name>

<literal type="string">" bytes of response-body\n"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>cl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>chunked_encoding</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>CHUNKcode</name></type> <name>r</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>extra</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Ignore chunked response-body\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>k</name><operator>-&gt;</operator><name>ignorebody</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>line_start</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>line_start</name></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>Curl_httpchunk_read</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>line_start</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>gotbytes</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>extra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>r</name> <operator>==</operator> <name>CHUNKE_STOP</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"chunk reading DONE\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>keepon</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>tunnel_state</name></name> <operator>=</operator> <name>TUNNEL_COMPLETE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>keepon</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>keepon</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>cl</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>tunnel_state</name></name> <operator>=</operator> <name>TUNNEL_COMPLETE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>line_start</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>perline</name></name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<if_stmt><if>if<condition>(<expr><operator>(</operator><call><name>checkprefix</name><argument_list>(<argument><expr><literal type="string">"WWW-Authenticate:"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>line_start</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<operator>(</operator><literal type="number">401</literal> <operator>==</operator> <name><name>k</name><operator>-&gt;</operator><name>httpcode</name></name><operator>)</operator><operator>)</operator> <operator>||</operator>

<operator>(</operator><call><name>checkprefix</name><argument_list>(<argument><expr><literal type="string">"Proxy-authenticate:"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>line_start</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<operator>(</operator><literal type="number">407</literal> <operator>==</operator> <name><name>k</name><operator>-&gt;</operator><name>httpcode</name></name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>proxy</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>k</name><operator>-&gt;</operator><name>httpcode</name></name> <operator>==</operator> <literal type="number">407</literal><operator>)</operator></expr> ?</condition><then> <expr><name>TRUE</name></expr> </then><else>: <expr><name>FALSE</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>auth</name> <init>= <expr><call><name>Curl_copy_header_value</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>line_start</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>auth</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_http_input_auth</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>proxy</name></expr></argument>, <argument><expr><name>auth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>auth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><call><name>checkprefix</name><argument_list>(<argument><expr><literal type="string">"Content-Length:"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>line_start</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>k</name><operator>-&gt;</operator><name>httpcode</name></name><operator>/</operator><literal type="number">100</literal> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Ignoring Content-Length in CONNECT %03d response\n"</literal></expr></argument>,

<argument><expr><name><name>k</name><operator>-&gt;</operator><name>httpcode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>curlx_strtoofft</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>line_start</name></name> <operator>+</operator>

<call><name>strlen</name><argument_list>(<argument><expr><literal type="string">"Content-Length:"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>cl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><call><name>Curl_compareheader</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>line_start</name></name></expr></argument>, <argument><expr><literal type="string">"Connection:"</literal></expr></argument>, <argument><expr><literal type="string">"close"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>close_connection</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>(<expr><call><name>checkprefix</name><argument_list>(<argument><expr><literal type="string">"Transfer-Encoding:"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>line_start</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>k</name><operator>-&gt;</operator><name>httpcode</name></name><operator>/</operator><literal type="number">100</literal> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Ignoring Transfer-Encoding in "</literal>

<literal type="string">"CONNECT %03d response\n"</literal></expr></argument>, <argument><expr><name><name>k</name><operator>-&gt;</operator><name>httpcode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><call><name>Curl_compareheader</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>line_start</name></name></expr></argument>,

<argument><expr><literal type="string">"Transfer-Encoding:"</literal></expr></argument>, <argument><expr><literal type="string">"chunked"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"CONNECT responded chunked\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>chunked_encoding</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_httpchunk_init</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><call><name>Curl_compareheader</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>line_start</name></name></expr></argument>,

<argument><expr><literal type="string">"Proxy-Connection:"</literal></expr></argument>, <argument><expr><literal type="string">"close"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>close_connection</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>(<expr><literal type="number">2</literal> <operator>==</operator> <call><name>sscanf</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>line_start</name></name></expr></argument>, <argument><expr><literal type="string">"HTTP/1.%d %d"</literal></expr></argument>,

<argument><expr><operator>&amp;</operator><name>subversion</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>k</name><operator>-&gt;</operator><name>httpcode</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>httpproxycode</name></name> <operator>=</operator> <name><name>k</name><operator>-&gt;</operator><name>httpcode</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>perline</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>connect_buffer</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>line_start</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>ptr</name></name></expr>;</expr_stmt>

</block_content>}</block></while> 

<if_stmt><if>if<condition>(<expr><call><name>Curl_pgrsUpdate</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_ABORTED_BY_CALLBACK</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>error</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_RECV_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>httpproxycode</name></name><operator>/</operator><literal type="number">100</literal> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_http_auth_act</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>close</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>close_connection</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>close_connection</name></name> <operator>&amp;&amp;</operator> <name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>newurl</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>Curl_closesocket</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>sock</name><index>[<expr><name>sockindex</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>sock</name><index>[<expr><name>sockindex</name></expr>]</index></name> <operator>=</operator> <name>CURL_SOCKET_BAD</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block> 

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>newurl</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name>TUNNEL_COMPLETE</name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>tunnel_state</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>connect_init</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

</block_content>}</block> while<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>newurl</name></name></expr>)</condition>;</do>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>httpproxycode</name></name><operator>/</operator><literal type="number">100</literal> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>close_connection</name></name> <operator>&amp;&amp;</operator> <name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>newurl</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>proxy_connect_closed</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Connect me again please\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>connect_done</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>newurl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>newurl</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>streamclose</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><literal type="string">"proxy CONNECT failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_closesocket</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>sock</name><index>[<expr><name>sockindex</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>sock</name><index>[<expr><name>sockindex</name></expr>]</index></name> <operator>=</operator> <name>CURL_SOCKET_BAD</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>tunnel_state</name></name> <operator>=</operator> <name>TUNNEL_INIT</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>proxy_connect_closed</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_OK</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Received HTTP code %d from proxy after CONNECT"</literal></expr></argument>,

<argument><expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>httpcode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_RECV_ERROR</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>tunnel_state</name></name> <operator>=</operator> <name>TUNNEL_COMPLETE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>allocptr</name><operator>.</operator><name>proxyuserpwd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>allocptr</name><operator>.</operator><name>proxyuserpwd</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>authproxy</name><operator>.</operator><name>done</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>authproxy</name><operator>.</operator><name>multipass</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Proxy replied %d to CONNECT request\n"</literal></expr></argument>,

<argument><expr><name><name>data</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>httpproxycode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>ignorebody</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>rewindaftersend</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> 

<return>return <expr><name>CURLE_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>Curl_connect_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>conn</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>http_connect_state</name></name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>connect_state</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>s</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>connect_state</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>CURLcode</name></type> <name>Curl_proxyCONNECT</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>sockindex</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>hostname</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>remote_port</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>conn</name><operator>-&gt;</operator><name>connect_state</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>connect_init</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>CONNECT</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>sockindex</name></expr></argument>, <argument><expr><name>hostname</name></expr></argument>, <argument><expr><name>remote_port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name> <operator>||</operator> <call><name>Curl_connect_complete</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>connect_done</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<function><type><name>void</name></type> <name>Curl_connect_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>data</name></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</unit>
