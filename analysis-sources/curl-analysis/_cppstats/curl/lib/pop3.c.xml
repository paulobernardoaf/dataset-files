<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\curl-analysis\_cppstats\curl\lib\pop3.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_setup.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_POP3</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_NETINET_IN_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet/in.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ARPA_INET_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;arpa/inet.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_UTSNAME_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/utsname.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_NETDB_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netdb.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VMS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;in.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inet.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>NETWARE</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__NOVELL_LIBC__</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>in_addr_t</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>in_addr_t</name></cpp:macro> <cpp:value>unsigned long</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;curl/curl.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"urldata.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sendf.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hostip.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"progress.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"transfer.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"escape.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http.h"</cpp:file></cpp:include> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"socks.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pop3.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"strtoofft.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"strcase.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vtls/vtls.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"connect.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"strerror.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"select.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"multiif.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"url.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_sasl.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_md5.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"warnless.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_printf.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_memory.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memdebug.h"</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>CURLcode</name></type> <name>pop3_regular_transfer</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>done</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>CURLcode</name></type> <name>pop3_do</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>done</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>CURLcode</name></type> <name>pop3_done</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>CURLcode</name></type> <name>status</name></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>premature</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>CURLcode</name></type> <name>pop3_connect</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>done</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>CURLcode</name></type> <name>pop3_disconnect</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>dead</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>CURLcode</name></type> <name>pop3_multi_statemach</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>done</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>pop3_getsock</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>curl_socket_t</name> <modifier>*</modifier></type><name>socks</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>CURLcode</name></type> <name>pop3_doing</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>dophase_done</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>CURLcode</name></type> <name>pop3_setup_connection</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>CURLcode</name></type> <name>pop3_parse_url_options</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>CURLcode</name></type> <name>pop3_parse_url_path</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>CURLcode</name></type> <name>pop3_parse_custom_request</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>CURLcode</name></type> <name>pop3_perform_auth</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mech</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>initresp</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>CURLcode</name></type> <name>pop3_continue_auth</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>resp</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>pop3_get_message</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>outptr</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>Curl_handler</name></name></type> <name>Curl_handler_pop3</name> <init>= <expr><block>{

<expr><literal type="string">"POP3"</literal></expr>, 

<expr><name>pop3_setup_connection</name></expr>, 

<expr><name>pop3_do</name></expr>, 

<expr><name>pop3_done</name></expr>, 

<expr><name>ZERO_NULL</name></expr>, 

<expr><name>pop3_connect</name></expr>, 

<expr><name>pop3_multi_statemach</name></expr>, 

<expr><name>pop3_doing</name></expr>, 

<expr><name>pop3_getsock</name></expr>, 

<expr><name>pop3_getsock</name></expr>, 

<expr><name>ZERO_NULL</name></expr>, 

<expr><name>ZERO_NULL</name></expr>, 

<expr><name>pop3_disconnect</name></expr>, 

<expr><name>ZERO_NULL</name></expr>, 

<expr><name>ZERO_NULL</name></expr>, 

<expr><name>PORT_POP3</name></expr>, 

<expr><name>CURLPROTO_POP3</name></expr>, 

<expr><name>PROTOPT_CLOSEACTION</name> <operator>|</operator> <name>PROTOPT_NOURLQUERY</name> <operator>|</operator> 

<name>PROTOPT_URLOPTIONS</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_SSL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>Curl_handler</name></name></type> <name>Curl_handler_pop3s</name> <init>= <expr><block>{

<expr><literal type="string">"POP3S"</literal></expr>, 

<expr><name>pop3_setup_connection</name></expr>, 

<expr><name>pop3_do</name></expr>, 

<expr><name>pop3_done</name></expr>, 

<expr><name>ZERO_NULL</name></expr>, 

<expr><name>pop3_connect</name></expr>, 

<expr><name>pop3_multi_statemach</name></expr>, 

<expr><name>pop3_doing</name></expr>, 

<expr><name>pop3_getsock</name></expr>, 

<expr><name>pop3_getsock</name></expr>, 

<expr><name>ZERO_NULL</name></expr>, 

<expr><name>ZERO_NULL</name></expr>, 

<expr><name>pop3_disconnect</name></expr>, 

<expr><name>ZERO_NULL</name></expr>, 

<expr><name>ZERO_NULL</name></expr>, 

<expr><name>PORT_POP3S</name></expr>, 

<expr><name>CURLPROTO_POP3S</name></expr>, 

<expr><name>PROTOPT_CLOSEACTION</name> <operator>|</operator> <name>PROTOPT_SSL</name>

<operator>|</operator> <name>PROTOPT_NOURLQUERY</name> <operator>|</operator> <name>PROTOPT_URLOPTIONS</name></expr> 

}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>SASLproto</name></name></type> <name>saslpop3</name> <init>= <expr><block>{

<expr><literal type="string">"pop"</literal></expr>, 

<expr><literal type="char">'*'</literal></expr>, 

<expr><literal type="char">'+'</literal></expr>, 

<expr><literal type="number">255</literal> <operator>-</operator> <literal type="number">8</literal></expr>, 

<expr><name>pop3_perform_auth</name></expr>, 

<expr><name>pop3_continue_auth</name></expr>, 

<expr><name>pop3_get_message</name></expr> 

}</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_SSL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type> <name>pop3_to_pop3s</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>handler</name></name> <operator>=</operator> <operator>&amp;</operator><name>Curl_handler_pop3s</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>tls_upgraded</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pop3_to_pop3s</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>Curl_nop_stmt</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>pop3_endofresp</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>line</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>resp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>pop3_conn</name></name> <modifier>*</modifier></type><name>pop3c</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>pop3c</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>len</name> <operator>&gt;=</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><literal type="string">"-ERR"</literal></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>resp</name> <operator>=</operator> <literal type="char">'-'</literal></expr>;</expr_stmt>

<return>return <expr><name>TRUE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>pop3c</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>POP3_CAPA</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>len</name> <operator>&gt;=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>line</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>resp</name> <operator>=</operator> <literal type="char">'+'</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>resp</name> <operator>=</operator> <literal type="char">'*'</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><name>TRUE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>len</name> <operator>&gt;=</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><literal type="string">"+OK"</literal></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>resp</name> <operator>=</operator> <literal type="char">'+'</literal></expr>;</expr_stmt>

<return>return <expr><name>TRUE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>len</name> <operator>&gt;=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>line</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'+'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>resp</name> <operator>=</operator> <literal type="char">'*'</literal></expr>;</expr_stmt>

<return>return <expr><name>TRUE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>FALSE</name></expr>;</return> 

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>pop3_get_message</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>outptr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>message</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>message</name> <operator>=</operator> <name>buffer</name> <operator>+</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><operator>*</operator><name>message</name> <operator>==</operator> <literal type="char">' '</literal> <operator>||</operator> <operator>*</operator><name>message</name> <operator>==</operator> <literal type="char">'\t'</literal></expr>;</condition>

<incr><expr><name>message</name><operator>++</operator></expr><operator>,</operator> <expr><name>len</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>

<empty_stmt>;</empty_stmt></block_content></block></for>

<for>for<control>(<init>;</init> <condition><expr><name>len</name><operator>--</operator></expr>;</condition><incr/>)</control><block type="pseudo"><block_content>

<if_stmt><if>if<condition>(<expr><name><name>message</name><index>[<expr><name>len</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\r'</literal> <operator>&amp;&amp;</operator> <name><name>message</name><index>[<expr><name>len</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\n'</literal> <operator>&amp;&amp;</operator> <name><name>message</name><index>[<expr><name>len</name></expr>]</index></name> <operator>!=</operator> <literal type="char">' '</literal> <operator>&amp;&amp;</operator>

<name><name>message</name><index>[<expr><name>len</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\t'</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

<if_stmt><if>if<condition>(<expr><operator>++</operator><name>len</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>message</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>message</name> <operator>=</operator> <operator>&amp;</operator><name><name>buffer</name><index>[<expr><name>len</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><operator>*</operator><name>outptr</name> <operator>=</operator> <name>message</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>state</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>pop3state</name></type> <name>newstate</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>pop3_conn</name></name> <modifier>*</modifier></type><name>pop3c</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>pop3c</name></name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUGBUILD</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_VERBOSE_STRINGS</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name><name>names</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"STOP"</literal></expr>,

<expr><literal type="string">"SERVERGREET"</literal></expr>,

<expr><literal type="string">"CAPA"</literal></expr>,

<expr><literal type="string">"STARTTLS"</literal></expr>,

<expr><literal type="string">"UPGRADETLS"</literal></expr>,

<expr><literal type="string">"AUTH"</literal></expr>,

<expr><literal type="string">"APOP"</literal></expr>,

<expr><literal type="string">"USER"</literal></expr>,

<expr><literal type="string">"PASS"</literal></expr>,

<expr><literal type="string">"COMMAND"</literal></expr>,

<expr><literal type="string">"QUIT"</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>pop3c</name><operator>-&gt;</operator><name>state</name></name> <operator>!=</operator> <name>newstate</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"POP3 %p state change from %s to %s\n"</literal></expr></argument>,

<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>pop3c</name></expr></argument>, <argument><expr><name><name>names</name><index>[<expr><name><name>pop3c</name><operator>-&gt;</operator><name>state</name></name></expr>]</index></name></expr></argument>, <argument><expr><name><name>names</name><index>[<expr><name>newstate</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>pop3c</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>newstate</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>pop3_perform_capa</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>pop3_conn</name></name> <modifier>*</modifier></type><name>pop3c</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>pop3c</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>pop3c</name><operator>-&gt;</operator><name>sasl</name><operator>.</operator><name>authmechs</name></name> <operator>=</operator> <name>SASL_AUTH_NONE</name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>pop3c</name><operator>-&gt;</operator><name>sasl</name><operator>.</operator><name>authused</name></name> <operator>=</operator> <name>SASL_AUTH_NONE</name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>pop3c</name><operator>-&gt;</operator><name>tls_supported</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> 

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_pp_sendf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pop3c</name><operator>-&gt;</operator><name>pp</name></name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><literal type="string">"CAPA"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>result</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>POP3_CAPA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>pop3_perform_starttls</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><call><name>Curl_pp_sendf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>pop3c</name><operator>.</operator><name>pp</name></name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><literal type="string">"STLS"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>result</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>POP3_STARTTLS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>pop3_perform_upgrade_tls</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>pop3_conn</name></name> <modifier>*</modifier></type><name>pop3c</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>pop3c</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><call><name>Curl_ssl_connect_nonblocking</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>FIRSTSOCKET</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>pop3c</name><operator>-&gt;</operator><name>ssldone</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>result</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>pop3c</name><operator>-&gt;</operator><name>state</name></name> <operator>!=</operator> <name>POP3_UPGRADETLS</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>POP3_UPGRADETLS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>pop3c</name><operator>-&gt;</operator><name>ssldone</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>pop3_to_pop3s</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>pop3_perform_capa</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>pop3_perform_user</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>user_passwd</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>POP3_STOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_pp_sendf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>pop3c</name><operator>.</operator><name>pp</name></name></expr></argument>, <argument><expr><literal type="string">"USER %s"</literal></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>conn</name><operator>-&gt;</operator><name>user</name></name></expr> ?</condition><then> <expr><name><name>conn</name><operator>-&gt;</operator><name>user</name></name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>result</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>POP3_USER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_CRYPTO_AUTH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>pop3_perform_apop</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>pop3_conn</name></name> <modifier>*</modifier></type><name>pop3c</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>pop3c</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MD5_context</name> <modifier>*</modifier></type><name>ctxt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>digest</name><index>[<expr><name>MD5_DIGEST_LEN</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>secret</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>MD5_DIGEST_LEN</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>user_passwd</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>POP3_STOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ctxt</name> <operator>=</operator> <call><name>Curl_MD5_init</name><argument_list>(<argument><expr><name>Curl_DIGEST_MD5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>ctxt</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>Curl_MD5_update</name><argument_list>(<argument><expr><name>ctxt</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name><name>pop3c</name><operator>-&gt;</operator><name>apoptimestamp</name></name></expr></argument>,

<argument><expr><call><name>curlx_uztoui</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>pop3c</name><operator>-&gt;</operator><name>apoptimestamp</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_MD5_update</name><argument_list>(<argument><expr><name>ctxt</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name><name>conn</name><operator>-&gt;</operator><name>passwd</name></name></expr></argument>,

<argument><expr><call><name>curlx_uztoui</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>passwd</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_MD5_final</name><argument_list>(<argument><expr><name>ctxt</name></expr></argument>, <argument><expr><name>digest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MD5_DIGEST_LEN</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msnprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>secret</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"%02x"</literal></expr></argument>, <argument><expr><name><name>digest</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_pp_sendf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pop3c</name><operator>-&gt;</operator><name>pp</name></name></expr></argument>, <argument><expr><literal type="string">"APOP %s %s"</literal></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>user</name></name></expr></argument>, <argument><expr><name>secret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>result</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>POP3_APOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>pop3_perform_auth</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mech</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>initresp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>pop3_conn</name></name> <modifier>*</modifier></type><name>pop3c</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>pop3c</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>initresp</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_pp_sendf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pop3c</name><operator>-&gt;</operator><name>pp</name></name></expr></argument>, <argument><expr><literal type="string">"AUTH %s %s"</literal></expr></argument>, <argument><expr><name>mech</name></expr></argument>, <argument><expr><name>initresp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_pp_sendf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pop3c</name><operator>-&gt;</operator><name>pp</name></name></expr></argument>, <argument><expr><literal type="string">"AUTH %s"</literal></expr></argument>, <argument><expr><name>mech</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>pop3_continue_auth</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>resp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>pop3_conn</name></name> <modifier>*</modifier></type><name>pop3c</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>pop3c</name></name></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>Curl_pp_sendf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pop3c</name><operator>-&gt;</operator><name>pp</name></name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>resp</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>pop3_perform_authentication</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>pop3_conn</name></name> <modifier>*</modifier></type><name>pop3c</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>pop3c</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>saslprogress</name></type> <name>progress</name> <init>= <expr><name>SASL_IDLE</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>Curl_sasl_can_authenticate</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pop3c</name><operator>-&gt;</operator><name>sasl</name></name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>POP3_STOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>pop3c</name><operator>-&gt;</operator><name>authtypes</name></name> <operator>&amp;</operator> <name><name>pop3c</name><operator>-&gt;</operator><name>preftype</name></name> <operator>&amp;</operator> <name>POP3_TYPE_SASL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_sasl_start</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pop3c</name><operator>-&gt;</operator><name>sasl</name></name></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>progress</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>result</name></expr>)</condition><block type="pseudo"><block_content>

<if_stmt><if>if<condition>(<expr><name>progress</name> <operator>==</operator> <name>SASL_INPROGRESS</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>POP3_AUTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>result</name> <operator>&amp;&amp;</operator> <name>progress</name> <operator>==</operator> <name>SASL_IDLE</name></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_CRYPTO_AUTH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name><name>pop3c</name><operator>-&gt;</operator><name>authtypes</name></name> <operator>&amp;</operator> <name><name>pop3c</name><operator>-&gt;</operator><name>preftype</name></name> <operator>&amp;</operator> <name>POP3_TYPE_APOP</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>pop3_perform_apop</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

if<condition>(<expr><name><name>pop3c</name><operator>-&gt;</operator><name>authtypes</name></name> <operator>&amp;</operator> <name><name>pop3c</name><operator>-&gt;</operator><name>preftype</name></name> <operator>&amp;</operator> <name>POP3_TYPE_CLEARTEXT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>pop3_perform_user</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"No known authentication mechanisms supported!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_LOGIN_DENIED</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>pop3_perform_command</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>POP3</name></name> <modifier>*</modifier></type><name>pop3</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>protop</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>command</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>pop3</name><operator>-&gt;</operator><name>id</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal> <operator>||</operator> <name><name>conn</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>ftp_list_only</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>command</name> <operator>=</operator> <literal type="string">"LIST"</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>pop3</name><operator>-&gt;</operator><name>id</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>pop3</name><operator>-&gt;</operator><name>transfer</name></name> <operator>=</operator> <name>FTPTRANSFER_INFO</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>command</name> <operator>=</operator> <literal type="string">"RETR"</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>pop3</name><operator>-&gt;</operator><name>id</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_pp_sendf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>pop3c</name><operator>.</operator><name>pp</name></name></expr></argument>, <argument><expr><literal type="string">"%s %s"</literal></expr></argument>,

<argument><expr><operator>(</operator><ternary><condition><expr><name><name>pop3</name><operator>-&gt;</operator><name>custom</name></name> <operator>&amp;&amp;</operator> <name><name>pop3</name><operator>-&gt;</operator><name>custom</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr> ?</condition><then>

<expr><name><name>pop3</name><operator>-&gt;</operator><name>custom</name></name></expr> </then><else>: <expr><name>command</name></expr></else></ternary><operator>)</operator></expr></argument>, <argument><expr><name><name>pop3</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_pp_sendf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>pop3c</name><operator>.</operator><name>pp</name></name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>,

<argument><expr><operator>(</operator><ternary><condition><expr><name><name>pop3</name><operator>-&gt;</operator><name>custom</name></name> <operator>&amp;&amp;</operator> <name><name>pop3</name><operator>-&gt;</operator><name>custom</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr> ?</condition><then>

<expr><name><name>pop3</name><operator>-&gt;</operator><name>custom</name></name></expr> </then><else>: <expr><name>command</name></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>result</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>POP3_COMMAND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>pop3_perform_quit</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><call><name>Curl_pp_sendf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>pop3c</name><operator>.</operator><name>pp</name></name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><literal type="string">"QUIT"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>result</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>POP3_QUIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>pop3_state_servergreet_resp</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>pop3code</name></decl></parameter>,

<parameter><decl><type><name>pop3state</name></type> <name>instate</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>pop3_conn</name></name> <modifier>*</modifier></type><name>pop3c</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>pop3c</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>line</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>buffer</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>instate</name></expr>;</expr_stmt> 

<if_stmt><if>if<condition>(<expr><name>pop3code</name> <operator>!=</operator> <literal type="char">'+'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Got unexpected pop3-server response"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_WEIRD_SERVER_REPLY</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>len</name> <operator>&gt;=</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <name><name>line</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'&gt;'</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">3</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name> <operator>-</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>line</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'&lt;'</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>timestamplen</name> <init>= <expr><name>len</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>i</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>at</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>timestamplen</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>pop3c</name><operator>-&gt;</operator><name>apoptimestamp</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>timestamplen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>pop3c</name><operator>-&gt;</operator><name>apoptimestamp</name></name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pop3c</name><operator>-&gt;</operator><name>apoptimestamp</name></name></expr></argument>, <argument><expr><name>line</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>timestamplen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pop3c</name><operator>-&gt;</operator><name>apoptimestamp</name><index>[<expr><name>timestamplen</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>at</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name><name>pop3c</name><operator>-&gt;</operator><name>apoptimestamp</name></name></expr></argument>, <argument><expr><literal type="char">'@'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>at</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>pop3c</name><operator>-&gt;</operator><name>apoptimestamp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>pop3c</name><operator>-&gt;</operator><name>authtypes</name></name> <operator>|=</operator> <name>POP3_TYPE_APOP</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>pop3_perform_capa</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>pop3_state_capa_resp</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pop3code</name></decl></parameter>,

<parameter><decl><type><name>pop3state</name></type> <name>instate</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>pop3_conn</name></name> <modifier>*</modifier></type><name>pop3c</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>pop3c</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>line</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>buffer</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>instate</name></expr>;</expr_stmt> 

<if_stmt><if>if<condition>(<expr><name>pop3code</name> <operator>==</operator> <literal type="char">'*'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>len</name> <operator>&gt;=</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">"STLS"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>pop3c</name><operator>-&gt;</operator><name>tls_supported</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>(<expr><name>len</name> <operator>&gt;=</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">"USER"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>pop3c</name><operator>-&gt;</operator><name>authtypes</name></name> <operator>|=</operator> <name>POP3_TYPE_CLEARTEXT</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>(<expr><name>len</name> <operator>&gt;=</operator> <literal type="number">5</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">"SASL "</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pop3c</name><operator>-&gt;</operator><name>authtypes</name></name> <operator>|=</operator> <name>POP3_TYPE_SASL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>line</name> <operator>+=</operator> <literal type="number">5</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>-=</operator> <literal type="number">5</literal></expr>;</expr_stmt>

<for>for<control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>llen</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>wordlen</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>mechbit</name></decl>;</decl_stmt>

<while>while<condition>(<expr><name>len</name> <operator>&amp;&amp;</operator>

<operator>(</operator><operator>*</operator><name>line</name> <operator>==</operator> <literal type="char">' '</literal> <operator>||</operator> <operator>*</operator><name>line</name> <operator>==</operator> <literal type="char">'\t'</literal> <operator>||</operator>

<operator>*</operator><name>line</name> <operator>==</operator> <literal type="char">'\r'</literal> <operator>||</operator> <operator>*</operator><name>line</name> <operator>==</operator> <literal type="char">'\n'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>line</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>len</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<for>for<control>(<init><expr><name>wordlen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>wordlen</name> <operator>&lt;</operator> <name>len</name> <operator>&amp;&amp;</operator> <name><name>line</name><index>[<expr><name>wordlen</name></expr>]</index></name> <operator>!=</operator> <literal type="char">' '</literal> <operator>&amp;&amp;</operator>

<name><name>line</name><index>[<expr><name>wordlen</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\t'</literal> <operator>&amp;&amp;</operator> <name><name>line</name><index>[<expr><name>wordlen</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\r'</literal> <operator>&amp;&amp;</operator>

<name><name>line</name><index>[<expr><name>wordlen</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\n'</literal></expr>;</condition><incr/>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>wordlen</name><operator>++</operator></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>mechbit</name> <operator>=</operator> <call><name>Curl_sasl_decode_mech</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>wordlen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>llen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>mechbit</name> <operator>&amp;&amp;</operator> <name>llen</name> <operator>==</operator> <name>wordlen</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>pop3c</name><operator>-&gt;</operator><name>sasl</name><operator>.</operator><name>authmechs</name></name> <operator>|=</operator> <name>mechbit</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>line</name> <operator>+=</operator> <name>wordlen</name></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>-=</operator> <name>wordlen</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name>pop3code</name> <operator>==</operator> <literal type="char">'+'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>use_ssl</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>conn</name><operator>-&gt;</operator><name>ssl</name><index>[<expr><name>FIRSTSOCKET</name></expr>]</index></name><operator>.</operator><name>use</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>pop3c</name><operator>-&gt;</operator><name>tls_supported</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>pop3_perform_starttls</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>use_ssl</name></name> <operator>==</operator> <name>CURLUSESSL_TRY</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>pop3_perform_authentication</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"STLS not supported."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_USE_SSL_FAILED</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>pop3_perform_authentication</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name><name>pop3c</name><operator>-&gt;</operator><name>authtypes</name></name> <operator>|=</operator> <name>POP3_TYPE_CLEARTEXT</name></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>pop3_perform_authentication</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>pop3_state_starttls_resp</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>pop3code</name></decl></parameter>,

<parameter><decl><type><name>pop3state</name></type> <name>instate</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>instate</name></expr>;</expr_stmt> 

<if_stmt><if>if<condition>(<expr><name>pop3code</name> <operator>!=</operator> <literal type="char">'+'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>use_ssl</name></name> <operator>!=</operator> <name>CURLUSESSL_TRY</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"STARTTLS denied"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_USE_SSL_FAILED</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>pop3_perform_authentication</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>pop3_perform_upgrade_tls</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>pop3_state_auth_resp</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>pop3code</name></decl></parameter>,

<parameter><decl><type><name>pop3state</name></type> <name>instate</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>pop3_conn</name></name> <modifier>*</modifier></type><name>pop3c</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>pop3c</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>saslprogress</name></type> <name>progress</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>instate</name></expr>;</expr_stmt> 

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_sasl_continue</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pop3c</name><operator>-&gt;</operator><name>sasl</name></name></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><name>pop3code</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>progress</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>result</name></expr>)</condition><block type="pseudo"><block_content>

<switch>switch<condition>(<expr><name>progress</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>SASL_DONE</name></expr>:</case>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>POP3_STOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<break>break;</break>

<case>case <expr><name>SASL_IDLE</name></expr>:</case> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_CRYPTO_AUTH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name><name>pop3c</name><operator>-&gt;</operator><name>authtypes</name></name> <operator>&amp;</operator> <name><name>pop3c</name><operator>-&gt;</operator><name>preftype</name></name> <operator>&amp;</operator> <name>POP3_TYPE_APOP</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>pop3_perform_apop</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

if<condition>(<expr><name><name>pop3c</name><operator>-&gt;</operator><name>authtypes</name></name> <operator>&amp;</operator> <name><name>pop3c</name><operator>-&gt;</operator><name>preftype</name></name> <operator>&amp;</operator> <name>POP3_TYPE_CLEARTEXT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>pop3_perform_user</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Authentication cancelled"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_LOGIN_DENIED</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch></block_content></block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_CRYPTO_AUTH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>pop3_state_apop_resp</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pop3code</name></decl></parameter>,

<parameter><decl><type><name>pop3state</name></type> <name>instate</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>instate</name></expr>;</expr_stmt> 

<if_stmt><if>if<condition>(<expr><name>pop3code</name> <operator>!=</operator> <literal type="char">'+'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Authentication failed: %d"</literal></expr></argument>, <argument><expr><name>pop3code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_LOGIN_DENIED</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>POP3_STOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>pop3_state_user_resp</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pop3code</name></decl></parameter>,

<parameter><decl><type><name>pop3state</name></type> <name>instate</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>instate</name></expr>;</expr_stmt> 

<if_stmt><if>if<condition>(<expr><name>pop3code</name> <operator>!=</operator> <literal type="char">'+'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Access denied. %c"</literal></expr></argument>, <argument><expr><name>pop3code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_LOGIN_DENIED</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_pp_sendf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>pop3c</name><operator>.</operator><name>pp</name></name></expr></argument>, <argument><expr><literal type="string">"PASS %s"</literal></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>conn</name><operator>-&gt;</operator><name>passwd</name></name></expr> ?</condition><then> <expr><name><name>conn</name><operator>-&gt;</operator><name>passwd</name></name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>result</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>POP3_PASS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>pop3_state_pass_resp</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pop3code</name></decl></parameter>,

<parameter><decl><type><name>pop3state</name></type> <name>instate</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>instate</name></expr>;</expr_stmt> 

<if_stmt><if>if<condition>(<expr><name>pop3code</name> <operator>!=</operator> <literal type="char">'+'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Access denied. %c"</literal></expr></argument>, <argument><expr><name>pop3code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_LOGIN_DENIED</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>POP3_STOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>pop3_state_command_resp</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>pop3code</name></decl></parameter>,

<parameter><decl><type><name>pop3state</name></type> <name>instate</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>POP3</name></name> <modifier>*</modifier></type><name>pop3</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>protop</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>pop3_conn</name></name> <modifier>*</modifier></type><name>pop3c</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>pop3c</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>pingpong</name></name> <modifier>*</modifier></type><name>pp</name> <init>= <expr><operator>&amp;</operator><name><name>pop3c</name><operator>-&gt;</operator><name>pp</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>instate</name></expr>;</expr_stmt> 

<if_stmt><if>if<condition>(<expr><name>pop3code</name> <operator>!=</operator> <literal type="char">'+'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>POP3_STOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_RECV_ERROR</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>pop3c</name><operator>-&gt;</operator><name>eob</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pop3c</name><operator>-&gt;</operator><name>strip</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>pop3</name><operator>-&gt;</operator><name>transfer</name></name> <operator>==</operator> <name>FTPTRANSFER_BODY</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>Curl_setup_transfer</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>FIRSTSOCKET</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>pp</name><operator>-&gt;</operator><name>cache</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>opt_no_body</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_pop3_write</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>pp</name><operator>-&gt;</operator><name>cache</name></name></expr></argument>, <argument><expr><name><name>pp</name><operator>-&gt;</operator><name>cache_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>pp</name><operator>-&gt;</operator><name>cache</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>cache_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>POP3_STOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>pop3_statemach_act</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>curl_socket_t</name></type> <name>sock</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>sock</name><index>[<expr><name>FIRSTSOCKET</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pop3code</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>pop3_conn</name></name> <modifier>*</modifier></type><name>pop3c</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>pop3c</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>pingpong</name></name> <modifier>*</modifier></type><name>pp</name> <init>= <expr><operator>&amp;</operator><name><name>pop3c</name><operator>-&gt;</operator><name>pp</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>nread</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>pop3c</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>POP3_UPGRADETLS</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>pop3_perform_upgrade_tls</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>pp</name><operator>-&gt;</operator><name>sendleft</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>Curl_pp_flushsend</name><argument_list>(<argument><expr><name>pp</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<do>do <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_pp_readresp</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>pp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pop3code</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>pop3code</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<switch>switch<condition>(<expr><name><name>pop3c</name><operator>-&gt;</operator><name>state</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>POP3_SERVERGREET</name></expr>:</case>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>pop3_state_servergreet_resp</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>pop3code</name></expr></argument>, <argument><expr><name><name>pop3c</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>POP3_CAPA</name></expr>:</case>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>pop3_state_capa_resp</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>pop3code</name></expr></argument>, <argument><expr><name><name>pop3c</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>POP3_STARTTLS</name></expr>:</case>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>pop3_state_starttls_resp</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>pop3code</name></expr></argument>, <argument><expr><name><name>pop3c</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>POP3_AUTH</name></expr>:</case>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>pop3_state_auth_resp</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>pop3code</name></expr></argument>, <argument><expr><name><name>pop3c</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_CRYPTO_AUTH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>POP3_APOP</name></expr>:</case>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>pop3_state_apop_resp</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>pop3code</name></expr></argument>, <argument><expr><name><name>pop3c</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<case>case <expr><name>POP3_USER</name></expr>:</case>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>pop3_state_user_resp</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>pop3code</name></expr></argument>, <argument><expr><name><name>pop3c</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>POP3_PASS</name></expr>:</case>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>pop3_state_pass_resp</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>pop3code</name></expr></argument>, <argument><expr><name><name>pop3c</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>POP3_COMMAND</name></expr>:</case>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>pop3_state_command_resp</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>pop3code</name></expr></argument>, <argument><expr><name><name>pop3c</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>POP3_QUIT</name></expr>:</case>

<default>default:</default>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>POP3_STOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block> while<condition>(<expr><operator>!</operator><name>result</name> <operator>&amp;&amp;</operator> <name><name>pop3c</name><operator>-&gt;</operator><name>state</name></name> <operator>!=</operator> <name>POP3_STOP</name> <operator>&amp;&amp;</operator> <call><name>Curl_pp_moredata</name><argument_list>(<argument><expr><name>pp</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>pop3_multi_statemach</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>done</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>pop3_conn</name></name> <modifier>*</modifier></type><name>pop3c</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>pop3c</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>conn</name><operator>-&gt;</operator><name>handler</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>PROTOPT_SSL</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>pop3c</name><operator>-&gt;</operator><name>ssldone</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_ssl_connect_nonblocking</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>FIRSTSOCKET</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pop3c</name><operator>-&gt;</operator><name>ssldone</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name> <operator>||</operator> <operator>!</operator><name><name>pop3c</name><operator>-&gt;</operator><name>ssldone</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_pp_statemach</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pop3c</name><operator>-&gt;</operator><name>pp</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>done</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>pop3c</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>POP3_STOP</name><operator>)</operator></expr> ?</condition><then> <expr><name>TRUE</name></expr> </then><else>: <expr><name>FALSE</name></expr></else></ternary></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>pop3_block_statemach</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>disconnecting</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>pop3_conn</name></name> <modifier>*</modifier></type><name>pop3c</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>pop3c</name></name></expr></init></decl>;</decl_stmt>

<while>while<condition>(<expr><name><name>pop3c</name><operator>-&gt;</operator><name>state</name></name> <operator>!=</operator> <name>POP3_STOP</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>result</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_pp_statemach</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pop3c</name><operator>-&gt;</operator><name>pp</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>disconnecting</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>pop3_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>POP3</name></name> <modifier>*</modifier></type><name>pop3</name></decl>;</decl_stmt>

<expr_stmt><expr><name>pop3</name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>protop</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>POP3</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>pop3</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_OUT_OF_MEMORY</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>pop3_getsock</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>curl_socket_t</name> <modifier>*</modifier></type><name>socks</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>Curl_pp_getsock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>pop3c</name><operator>.</operator><name>pp</name></name></expr></argument>, <argument><expr><name>socks</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>pop3_connect</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>done</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>pop3_conn</name></name> <modifier>*</modifier></type><name>pop3c</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>pop3c</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>pingpong</name></name> <modifier>*</modifier></type><name>pp</name> <init>= <expr><operator>&amp;</operator><name><name>pop3c</name><operator>-&gt;</operator><name>pp</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>done</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>connkeep</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><literal type="string">"POP3 default"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>response_time</name></name> <operator>=</operator> <name>RESP_TIMEOUT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>statemach_act</name></name> <operator>=</operator> <name>pop3_statemach_act</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>endofresp</name></name> <operator>=</operator> <name>pop3_endofresp</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>conn</name></name> <operator>=</operator> <name>conn</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pop3c</name><operator>-&gt;</operator><name>preftype</name></name> <operator>=</operator> <name>POP3_TYPE_ANY</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_sasl_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pop3c</name><operator>-&gt;</operator><name>sasl</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>saslpop3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_pp_init</name><argument_list>(<argument><expr><name>pp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>pop3_parse_url_options</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>POP3_SERVERGREET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>pop3_multi_statemach</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>done</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>pop3_done</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>CURLcode</name></type> <name>status</name></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>premature</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>POP3</name></name> <modifier>*</modifier></type><name>pop3</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>protop</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>premature</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>pop3</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_OK</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>status</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>connclose</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><literal type="string">"POP3 done with bad status"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>status</name></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>pop3</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>pop3</name><operator>-&gt;</operator><name>custom</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pop3</name><operator>-&gt;</operator><name>transfer</name></name> <operator>=</operator> <name>FTPTRANSFER_BODY</name></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>pop3_perform</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>connected</name></decl></parameter>,

<parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>dophase_done</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>POP3</name></name> <modifier>*</modifier></type><name>pop3</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>protop</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DEBUGF</name><argument_list>(<argument><expr><call><name>infof</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"DO phase starts\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>opt_no_body</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pop3</name><operator>-&gt;</operator><name>transfer</name></name> <operator>=</operator> <name>FTPTRANSFER_INFO</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>dophase_done</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> 

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>pop3_perform_command</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>pop3_multi_statemach</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>dophase_done</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>connected</name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>tcpconnect</name><index>[<expr><name>FIRSTSOCKET</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>*</operator><name>dophase_done</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>DEBUGF</name><argument_list>(<argument><expr><call><name>infof</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"DO phase is complete\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>pop3_do</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>done</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>done</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> 

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>pop3_parse_url_path</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>pop3_parse_custom_request</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>pop3_regular_transfer</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>done</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>pop3_disconnect</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>dead_connection</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>pop3_conn</name></name> <modifier>*</modifier></type><name>pop3c</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>pop3c</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>dead_connection</name> <operator>&amp;&amp;</operator> <name><name>pop3c</name><operator>-&gt;</operator><name>pp</name><operator>.</operator><name>conn</name></name> <operator>&amp;&amp;</operator> <name><name>pop3c</name><operator>-&gt;</operator><name>pp</name><operator>.</operator><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>protoconnstart</name></name></expr>)</condition><block type="pseudo"><block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>pop3_perform_quit</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>pop3_block_statemach</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt> 

<expr_stmt><expr><call><name>Curl_pp_disconnect</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pop3c</name><operator>-&gt;</operator><name>pp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_sasl_cleanup</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>pop3c</name><operator>-&gt;</operator><name>sasl</name><operator>.</operator><name>authused</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>pop3c</name><operator>-&gt;</operator><name>apoptimestamp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>pop3_dophase_done</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>connected</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>conn</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>connected</name></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>pop3_doing</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>dophase_done</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><call><name>pop3_multi_statemach</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>dophase_done</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>DEBUGF</name><argument_list>(<argument><expr><call><name>infof</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"DO phase failed\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>(<expr><operator>*</operator><name>dophase_done</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>pop3_dophase_done</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DEBUGF</name><argument_list>(<argument><expr><call><name>infof</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"DO phase is complete\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>pop3_regular_transfer</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,

<parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>dophase_done</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>connected</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>size</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_pgrsSetUploadCounter</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_pgrsSetDownloadCounter</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_pgrsSetUploadSize</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_pgrsSetDownloadSize</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>pop3_perform</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>connected</name></expr></argument>, <argument><expr><name>dophase_done</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>result</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>dophase_done</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>pop3_dophase_done</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>connected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>pop3_setup_connection</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><call><name>pop3_init</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>tls_upgraded</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>pop3_parse_url_options</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>pop3_conn</name></name> <modifier>*</modifier></type><name>pop3c</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>pop3c</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>options</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>pop3c</name><operator>-&gt;</operator><name>sasl</name><operator>.</operator><name>resetprefs</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<while>while<condition>(<expr><operator>!</operator><name>result</name> <operator>&amp;&amp;</operator> <name>ptr</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>ptr</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name> <init>= <expr><name>ptr</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl>;</decl_stmt>

<while>while<condition>(<expr><operator>*</operator><name>ptr</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>ptr</name> <operator>!=</operator> <literal type="char">'='</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name>value</name> <operator>=</operator> <name>ptr</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<while>while<condition>(<expr><operator>*</operator><name>ptr</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>ptr</name> <operator>!=</operator> <literal type="char">';'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if<condition>(<expr><call><name>strncasecompare</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"AUTH="</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_sasl_parse_url_auth_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pop3c</name><operator>-&gt;</operator><name>sasl</name></name></expr></argument>,

<argument><expr><name>value</name></expr></argument>, <argument><expr><name>ptr</name> <operator>-</operator> <name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name> <operator>&amp;&amp;</operator> <call><name>strncasecompare</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"+APOP"</literal></expr></argument>, <argument><expr><name>ptr</name> <operator>-</operator> <name>value</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pop3c</name><operator>-&gt;</operator><name>preftype</name></name> <operator>=</operator> <name>POP3_TYPE_APOP</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pop3c</name><operator>-&gt;</operator><name>sasl</name><operator>.</operator><name>prefmech</name></name> <operator>=</operator> <name>SASL_AUTH_NONE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_OK</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_URL_MALFORMAT</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">';'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if<condition>(<expr><name><name>pop3c</name><operator>-&gt;</operator><name>preftype</name></name> <operator>!=</operator> <name>POP3_TYPE_APOP</name></expr>)</condition><block type="pseudo"><block_content>

<switch>switch<condition>(<expr><name><name>pop3c</name><operator>-&gt;</operator><name>sasl</name><operator>.</operator><name>prefmech</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>SASL_AUTH_NONE</name></expr>:</case>

<expr_stmt><expr><name><name>pop3c</name><operator>-&gt;</operator><name>preftype</name></name> <operator>=</operator> <name>POP3_TYPE_NONE</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>SASL_AUTH_DEFAULT</name></expr>:</case>

<expr_stmt><expr><name><name>pop3c</name><operator>-&gt;</operator><name>preftype</name></name> <operator>=</operator> <name>POP3_TYPE_ANY</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><name><name>pop3c</name><operator>-&gt;</operator><name>preftype</name></name> <operator>=</operator> <name>POP3_TYPE_SASL</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch></block_content></block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>pop3_parse_url_path</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>POP3</name></name> <modifier>*</modifier></type><name>pop3</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>protop</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name> <init>= <expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>up</name><operator>.</operator><name>path</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt> 

<return>return <expr><call><name>Curl_urldecode</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pop3</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>pop3_parse_custom_request</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>POP3</name></name> <modifier>*</modifier></type><name>pop3</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>protop</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>custom</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_CUSTOMREQUEST</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>custom</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_urldecode</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>custom</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pop3</name><operator>-&gt;</operator><name>custom</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>CURLcode</name></type> <name>Curl_pop3_write</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>nread</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>SingleRequest</name></name> <modifier>*</modifier></type><name>k</name> <init>= <expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>req</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>pop3_conn</name></name> <modifier>*</modifier></type><name>pop3c</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>pop3c</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>strip_dot</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>last</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nread</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>prev</name> <init>= <expr><name><name>pop3c</name><operator>-&gt;</operator><name>eob</name></name></expr></init></decl>;</decl_stmt>

<switch>switch<condition>(<expr><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0x0d</literal></expr>:</case>

<if_stmt><if>if<condition>(<expr><name><name>pop3c</name><operator>-&gt;</operator><name>eob</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pop3c</name><operator>-&gt;</operator><name>eob</name></name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>i</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_client_write</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>CLIENTWRITE_BODY</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>str</name><index>[<expr><name>last</name></expr>]</index></name></expr></argument>,

<argument><expr><name>i</name> <operator>-</operator> <name>last</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>last</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name><name>pop3c</name><operator>-&gt;</operator><name>eob</name></name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>pop3c</name><operator>-&gt;</operator><name>eob</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>pop3c</name><operator>-&gt;</operator><name>eob</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x0a</literal></expr>:</case>

<if_stmt><if>if<condition>(<expr><name><name>pop3c</name><operator>-&gt;</operator><name>eob</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>pop3c</name><operator>-&gt;</operator><name>eob</name></name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>pop3c</name><operator>-&gt;</operator><name>eob</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>pop3c</name><operator>-&gt;</operator><name>eob</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x2e</literal></expr>:</case>

<if_stmt><if>if<condition>(<expr><name><name>pop3c</name><operator>-&gt;</operator><name>eob</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>pop3c</name><operator>-&gt;</operator><name>eob</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>(<expr><name><name>pop3c</name><operator>-&gt;</operator><name>eob</name></name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>strip_dot</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pop3c</name><operator>-&gt;</operator><name>eob</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>pop3c</name><operator>-&gt;</operator><name>eob</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><name><name>pop3c</name><operator>-&gt;</operator><name>eob</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if<condition>(<expr><name>prev</name> <operator>&amp;&amp;</operator> <name>prev</name> <operator>&gt;=</operator> <name><name>pop3c</name><operator>-&gt;</operator><name>eob</name></name></expr>)</condition> <block>{<block_content>

<while>while<condition>(<expr><name>prev</name> <operator>&amp;&amp;</operator> <name><name>pop3c</name><operator>-&gt;</operator><name>strip</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>prev</name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pop3c</name><operator>-&gt;</operator><name>strip</name></name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if<condition>(<expr><name>prev</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_client_write</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>CLIENTWRITE_BODY</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>POP3_EOB</name></expr></argument>,

<argument><expr><ternary><condition><expr><name>strip_dot</name></expr> ?</condition><then> <expr><name>prev</name> <operator>-</operator> <literal type="number">1</literal></expr> </then><else>: <expr><name>prev</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>last</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><name>strip_dot</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if<condition>(<expr><name><name>pop3c</name><operator>-&gt;</operator><name>eob</name></name> <operator>==</operator> <name>POP3_EOB_LEN</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_client_write</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>CLIENTWRITE_BODY</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>POP3_EOB</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>k</name><operator>-&gt;</operator><name>keepon</name></name> <operator>&amp;=</operator> <operator>~</operator><name>KEEP_RECV</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pop3c</name><operator>-&gt;</operator><name>eob</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>pop3c</name><operator>-&gt;</operator><name>eob</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_OK</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>nread</name> <operator>-</operator> <name>last</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_client_write</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>CLIENTWRITE_BODY</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>str</name><index>[<expr><name>last</name></expr>]</index></name></expr></argument>,

<argument><expr><name>nread</name> <operator>-</operator> <name>last</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</unit>
