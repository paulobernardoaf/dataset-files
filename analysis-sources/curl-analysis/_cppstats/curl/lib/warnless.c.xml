<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\curl-analysis\_cppstats\curl\lib\warnless.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_setup.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__INTEL_COMPILER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__unix__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_NETINET_IN_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet/in.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ARPA_INET_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;arpa/inet.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUILDING_WARNLESS_C</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"warnless.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CURL_MASK_SCHAR</name></cpp:macro> <cpp:value>0x7F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CURL_MASK_UCHAR</name></cpp:macro> <cpp:value>0xFF</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>SIZEOF_SHORT</name> <operator>==</operator> <literal type="number">2</literal><operator>)</operator></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CURL_MASK_SSHORT</name></cpp:macro> <cpp:value>0x7FFF</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CURL_MASK_USHORT</name></cpp:macro> <cpp:value>0xFFFF</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><operator>(</operator><name>SIZEOF_SHORT</name> <operator>==</operator> <literal type="number">4</literal><operator>)</operator></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CURL_MASK_SSHORT</name></cpp:macro> <cpp:value>0x7FFFFFFF</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CURL_MASK_USHORT</name></cpp:macro> <cpp:value>0xFFFFFFFF</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><operator>(</operator><name>SIZEOF_SHORT</name> <operator>==</operator> <literal type="number">8</literal><operator>)</operator></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CURL_MASK_SSHORT</name></cpp:macro> <cpp:value>0x7FFFFFFFFFFFFFFF</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CURL_MASK_USHORT</name></cpp:macro> <cpp:value>0xFFFFFFFFFFFFFFFF</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"SIZEOF_SHORT not defined"</cpp:literal></cpp:error>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>SIZEOF_INT</name> <operator>==</operator> <literal type="number">2</literal><operator>)</operator></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CURL_MASK_SINT</name></cpp:macro> <cpp:value>0x7FFF</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CURL_MASK_UINT</name></cpp:macro> <cpp:value>0xFFFF</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><operator>(</operator><name>SIZEOF_INT</name> <operator>==</operator> <literal type="number">4</literal><operator>)</operator></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CURL_MASK_SINT</name></cpp:macro> <cpp:value>0x7FFFFFFF</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CURL_MASK_UINT</name></cpp:macro> <cpp:value>0xFFFFFFFF</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><operator>(</operator><name>SIZEOF_INT</name> <operator>==</operator> <literal type="number">8</literal><operator>)</operator></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CURL_MASK_SINT</name></cpp:macro> <cpp:value>0x7FFFFFFFFFFFFFFF</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CURL_MASK_UINT</name></cpp:macro> <cpp:value>0xFFFFFFFFFFFFFFFF</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><operator>(</operator><name>SIZEOF_INT</name> <operator>==</operator> <literal type="number">16</literal><operator>)</operator></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CURL_MASK_SINT</name></cpp:macro> <cpp:value>0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CURL_MASK_UINT</name></cpp:macro> <cpp:value>0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"SIZEOF_INT not defined"</cpp:literal></cpp:error>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>SIZEOF_LONG</name> <operator>==</operator> <literal type="number">2</literal><operator>)</operator></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CURL_MASK_SLONG</name></cpp:macro> <cpp:value>0x7FFFL</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CURL_MASK_ULONG</name></cpp:macro> <cpp:value>0xFFFFUL</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><operator>(</operator><name>SIZEOF_LONG</name> <operator>==</operator> <literal type="number">4</literal><operator>)</operator></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CURL_MASK_SLONG</name></cpp:macro> <cpp:value>0x7FFFFFFFL</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CURL_MASK_ULONG</name></cpp:macro> <cpp:value>0xFFFFFFFFUL</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><operator>(</operator><name>SIZEOF_LONG</name> <operator>==</operator> <literal type="number">8</literal><operator>)</operator></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CURL_MASK_SLONG</name></cpp:macro> <cpp:value>0x7FFFFFFFFFFFFFFFL</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CURL_MASK_ULONG</name></cpp:macro> <cpp:value>0xFFFFFFFFFFFFFFFFUL</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><operator>(</operator><name>SIZEOF_LONG</name> <operator>==</operator> <literal type="number">16</literal><operator>)</operator></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CURL_MASK_SLONG</name></cpp:macro> <cpp:value>0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFL</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CURL_MASK_ULONG</name></cpp:macro> <cpp:value>0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFUL</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"SIZEOF_LONG not defined"</cpp:literal></cpp:error>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>SIZEOF_CURL_OFF_T</name> <operator>==</operator> <literal type="number">2</literal><operator>)</operator></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CURL_MASK_SCOFFT</name></cpp:macro> <cpp:value>CURL_OFF_T_C(0x7FFF)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CURL_MASK_UCOFFT</name></cpp:macro> <cpp:value>CURL_OFF_TU_C(0xFFFF)</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><operator>(</operator><name>SIZEOF_CURL_OFF_T</name> <operator>==</operator> <literal type="number">4</literal><operator>)</operator></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CURL_MASK_SCOFFT</name></cpp:macro> <cpp:value>CURL_OFF_T_C(0x7FFFFFFF)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CURL_MASK_UCOFFT</name></cpp:macro> <cpp:value>CURL_OFF_TU_C(0xFFFFFFFF)</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><operator>(</operator><name>SIZEOF_CURL_OFF_T</name> <operator>==</operator> <literal type="number">8</literal><operator>)</operator></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CURL_MASK_SCOFFT</name></cpp:macro> <cpp:value>CURL_OFF_T_C(0x7FFFFFFFFFFFFFFF)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CURL_MASK_UCOFFT</name></cpp:macro> <cpp:value>CURL_OFF_TU_C(0xFFFFFFFFFFFFFFFF)</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><operator>(</operator><name>SIZEOF_CURL_OFF_T</name> <operator>==</operator> <literal type="number">16</literal><operator>)</operator></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CURL_MASK_SCOFFT</name></cpp:macro> <cpp:value>CURL_OFF_T_C(0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CURL_MASK_UCOFFT</name></cpp:macro> <cpp:value>CURL_OFF_TU_C(0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"SIZEOF_CURL_OFF_T not defined"</cpp:literal></cpp:error>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>SIZEOF_SIZE_T</name> <operator>==</operator> <name>SIZEOF_SHORT</name><operator>)</operator></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CURL_MASK_SSIZE_T</name></cpp:macro> <cpp:value>CURL_MASK_SSHORT</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CURL_MASK_USIZE_T</name></cpp:macro> <cpp:value>CURL_MASK_USHORT</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><operator>(</operator><name>SIZEOF_SIZE_T</name> <operator>==</operator> <name>SIZEOF_INT</name><operator>)</operator></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CURL_MASK_SSIZE_T</name></cpp:macro> <cpp:value>CURL_MASK_SINT</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CURL_MASK_USIZE_T</name></cpp:macro> <cpp:value>CURL_MASK_UINT</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><operator>(</operator><name>SIZEOF_SIZE_T</name> <operator>==</operator> <name>SIZEOF_LONG</name><operator>)</operator></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CURL_MASK_SSIZE_T</name></cpp:macro> <cpp:value>CURL_MASK_SLONG</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CURL_MASK_USIZE_T</name></cpp:macro> <cpp:value>CURL_MASK_ULONG</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><operator>(</operator><name>SIZEOF_SIZE_T</name> <operator>==</operator> <name>SIZEOF_CURL_OFF_T</name><operator>)</operator></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CURL_MASK_SSIZE_T</name></cpp:macro> <cpp:value>CURL_MASK_SCOFFT</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CURL_MASK_USIZE_T</name></cpp:macro> <cpp:value>CURL_MASK_UCOFFT</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"SIZEOF_SIZE_T not defined"</cpp:literal></cpp:error>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>unsigned</name> <name>short</name></type> <name>curlx_ultous</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>ulnum</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__INTEL_COMPILER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name><name>(</name><name>push</name><name>)</name></cpp:pragma>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name><name>(</name><name>disable</name><name>:</name><name>810</name><name>)</name></cpp:pragma> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>DEBUGASSERT</name><argument_list>(<argument><expr><name>ulnum</name> <operator>&lt;=</operator> <operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name>CURL_MASK_USHORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>unsigned</name> <name>short</name><operator>)</operator><operator>(</operator><name>ulnum</name> <operator>&amp;</operator> <operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name>CURL_MASK_USHORT</name><operator>)</operator></expr>;</return>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__INTEL_COMPILER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name><name>(</name><name>pop</name><name>)</name></cpp:pragma>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>unsigned</name> <name>char</name></type> <name>curlx_ultouc</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>ulnum</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__INTEL_COMPILER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name><name>(</name><name>push</name><name>)</name></cpp:pragma>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name><name>(</name><name>disable</name><name>:</name><name>810</name><name>)</name></cpp:pragma> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>DEBUGASSERT</name><argument_list>(<argument><expr><name>ulnum</name> <operator>&lt;=</operator> <operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name>CURL_MASK_UCHAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><name>ulnum</name> <operator>&amp;</operator> <operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name>CURL_MASK_UCHAR</name><operator>)</operator></expr>;</return>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__INTEL_COMPILER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name><name>(</name><name>pop</name><name>)</name></cpp:pragma>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>curlx_ultosi</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>ulnum</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__INTEL_COMPILER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name><name>(</name><name>push</name><name>)</name></cpp:pragma>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name><name>(</name><name>disable</name><name>:</name><name>810</name><name>)</name></cpp:pragma> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>DEBUGASSERT</name><argument_list>(<argument><expr><name>ulnum</name> <operator>&lt;=</operator> <operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name>CURL_MASK_SINT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>ulnum</name> <operator>&amp;</operator> <operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name>CURL_MASK_SINT</name><operator>)</operator></expr>;</return>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__INTEL_COMPILER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name><name>(</name><name>pop</name><name>)</name></cpp:pragma>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>curl_off_t</name></type> <name>curlx_uztoso</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>uznum</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__INTEL_COMPILER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name><name>(</name><name>push</name><name>)</name></cpp:pragma>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name><name>(</name><name>disable</name><name>:</name><name>810</name><name>)</name></cpp:pragma> 

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name><name>(</name><name>push</name><name>)</name></cpp:pragma>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name><name>(</name><name>disable</name><name>:</name><name>4310</name><name>)</name></cpp:pragma> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>DEBUGASSERT</name><argument_list>(<argument><expr><name>uznum</name> <operator>&lt;=</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <name>CURL_MASK_SCOFFT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>curl_off_t</name><operator>)</operator><operator>(</operator><name>uznum</name> <operator>&amp;</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <name>CURL_MASK_SCOFFT</name><operator>)</operator></expr>;</return>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__INTEL_COMPILER</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name><name>(</name><name>pop</name><name>)</name></cpp:pragma>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>curlx_uztosi</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>uznum</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__INTEL_COMPILER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name><name>(</name><name>push</name><name>)</name></cpp:pragma>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name><name>(</name><name>disable</name><name>:</name><name>810</name><name>)</name></cpp:pragma> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>DEBUGASSERT</name><argument_list>(<argument><expr><name>uznum</name> <operator>&lt;=</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <name>CURL_MASK_SINT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>uznum</name> <operator>&amp;</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <name>CURL_MASK_SINT</name><operator>)</operator></expr>;</return>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__INTEL_COMPILER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name><name>(</name><name>pop</name><name>)</name></cpp:pragma>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>unsigned</name> <name>long</name></type> <name>curlx_uztoul</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>uznum</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__INTEL_COMPILER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name><name>(</name><name>push</name><name>)</name></cpp:pragma>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name><name>(</name><name>disable</name><name>:</name><name>810</name><name>)</name></cpp:pragma> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>SIZEOF_LONG</name> <operator>&lt;</operator> <name>SIZEOF_SIZE_T</name><operator>)</operator></expr></cpp:if>

<expr_stmt><expr><call><name>DEBUGASSERT</name><argument_list>(<argument><expr><name>uznum</name> <operator>&lt;=</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <name>CURL_MASK_ULONG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><operator>(</operator><name>uznum</name> <operator>&amp;</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <name>CURL_MASK_ULONG</name><operator>)</operator></expr>;</return>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__INTEL_COMPILER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name><name>(</name><name>pop</name><name>)</name></cpp:pragma>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>unsigned</name> <name>int</name></type> <name>curlx_uztoui</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>uznum</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__INTEL_COMPILER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name><name>(</name><name>push</name><name>)</name></cpp:pragma>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name><name>(</name><name>disable</name><name>:</name><name>810</name><name>)</name></cpp:pragma> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>SIZEOF_INT</name> <operator>&lt;</operator> <name>SIZEOF_SIZE_T</name><operator>)</operator></expr></cpp:if>

<expr_stmt><expr><call><name>DEBUGASSERT</name><argument_list>(<argument><expr><name>uznum</name> <operator>&lt;=</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <name>CURL_MASK_UINT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><operator>(</operator><name>uznum</name> <operator>&amp;</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <name>CURL_MASK_UINT</name><operator>)</operator></expr>;</return>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__INTEL_COMPILER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name><name>(</name><name>pop</name><name>)</name></cpp:pragma>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>curlx_sltosi</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>slnum</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__INTEL_COMPILER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name><name>(</name><name>push</name><name>)</name></cpp:pragma>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name><name>(</name><name>disable</name><name>:</name><name>810</name><name>)</name></cpp:pragma> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>DEBUGASSERT</name><argument_list>(<argument><expr><name>slnum</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>SIZEOF_INT</name> <operator>&lt;</operator> <name>SIZEOF_LONG</name><operator>)</operator></expr></cpp:if>

<expr_stmt><expr><call><name>DEBUGASSERT</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name>slnum</name> <operator>&lt;=</operator> <operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name>CURL_MASK_SINT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>slnum</name> <operator>&amp;</operator> <operator>(</operator><name>long</name><operator>)</operator> <name>CURL_MASK_SINT</name><operator>)</operator></expr>;</return>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__INTEL_COMPILER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name><name>(</name><name>pop</name><name>)</name></cpp:pragma>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>unsigned</name> <name>int</name></type> <name>curlx_sltoui</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>slnum</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__INTEL_COMPILER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name><name>(</name><name>push</name><name>)</name></cpp:pragma>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name><name>(</name><name>disable</name><name>:</name><name>810</name><name>)</name></cpp:pragma> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>DEBUGASSERT</name><argument_list>(<argument><expr><name>slnum</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>SIZEOF_INT</name> <operator>&lt;</operator> <name>SIZEOF_LONG</name><operator>)</operator></expr></cpp:if>

<expr_stmt><expr><call><name>DEBUGASSERT</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name>slnum</name> <operator>&lt;=</operator> <operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name>CURL_MASK_UINT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><operator>(</operator><name>slnum</name> <operator>&amp;</operator> <operator>(</operator><name>long</name><operator>)</operator> <name>CURL_MASK_UINT</name><operator>)</operator></expr>;</return>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__INTEL_COMPILER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name><name>(</name><name>pop</name><name>)</name></cpp:pragma>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>unsigned</name> <name>short</name></type> <name>curlx_sltous</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>slnum</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__INTEL_COMPILER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name><name>(</name><name>push</name><name>)</name></cpp:pragma>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name><name>(</name><name>disable</name><name>:</name><name>810</name><name>)</name></cpp:pragma> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>DEBUGASSERT</name><argument_list>(<argument><expr><name>slnum</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DEBUGASSERT</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name>slnum</name> <operator>&lt;=</operator> <operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name>CURL_MASK_USHORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>unsigned</name> <name>short</name><operator>)</operator><operator>(</operator><name>slnum</name> <operator>&amp;</operator> <operator>(</operator><name>long</name><operator>)</operator> <name>CURL_MASK_USHORT</name><operator>)</operator></expr>;</return>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__INTEL_COMPILER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name><name>(</name><name>pop</name><name>)</name></cpp:pragma>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>ssize_t</name></type> <name>curlx_uztosz</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>uznum</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__INTEL_COMPILER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name><name>(</name><name>push</name><name>)</name></cpp:pragma>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name><name>(</name><name>disable</name><name>:</name><name>810</name><name>)</name></cpp:pragma> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>DEBUGASSERT</name><argument_list>(<argument><expr><name>uznum</name> <operator>&lt;=</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <name>CURL_MASK_SSIZE_T</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>ssize_t</name><operator>)</operator><operator>(</operator><name>uznum</name> <operator>&amp;</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <name>CURL_MASK_SSIZE_T</name><operator>)</operator></expr>;</return>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__INTEL_COMPILER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name><name>(</name><name>pop</name><name>)</name></cpp:pragma>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>curlx_sotouz</name><parameter_list>(<parameter><decl><type><name>curl_off_t</name></type> <name>sonum</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__INTEL_COMPILER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name><name>(</name><name>push</name><name>)</name></cpp:pragma>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name><name>(</name><name>disable</name><name>:</name><name>810</name><name>)</name></cpp:pragma> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>DEBUGASSERT</name><argument_list>(<argument><expr><name>sonum</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>sonum</name> <operator>&amp;</operator> <operator>(</operator><name>curl_off_t</name><operator>)</operator> <name>CURL_MASK_USIZE_T</name><operator>)</operator></expr>;</return>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__INTEL_COMPILER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name><name>(</name><name>pop</name><name>)</name></cpp:pragma>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>curlx_sztosi</name><parameter_list>(<parameter><decl><type><name>ssize_t</name></type> <name>sznum</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__INTEL_COMPILER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name><name>(</name><name>push</name><name>)</name></cpp:pragma>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name><name>(</name><name>disable</name><name>:</name><name>810</name><name>)</name></cpp:pragma> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>DEBUGASSERT</name><argument_list>(<argument><expr><name>sznum</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>SIZEOF_INT</name> <operator>&lt;</operator> <name>SIZEOF_SIZE_T</name><operator>)</operator></expr></cpp:if>

<expr_stmt><expr><call><name>DEBUGASSERT</name><argument_list>(<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <name>sznum</name> <operator>&lt;=</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <name>CURL_MASK_SINT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>sznum</name> <operator>&amp;</operator> <operator>(</operator><name>ssize_t</name><operator>)</operator> <name>CURL_MASK_SINT</name><operator>)</operator></expr>;</return>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__INTEL_COMPILER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name><name>(</name><name>pop</name><name>)</name></cpp:pragma>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>unsigned</name> <name>short</name></type> <name>curlx_uitous</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>uinum</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__INTEL_COMPILER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name><name>(</name><name>push</name><name>)</name></cpp:pragma>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name><name>(</name><name>disable</name><name>:</name><name>810</name><name>)</name></cpp:pragma> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>DEBUGASSERT</name><argument_list>(<argument><expr><name>uinum</name> <operator>&lt;=</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <name>CURL_MASK_USHORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>unsigned</name> <name>short</name><operator>)</operator> <operator>(</operator><name>uinum</name> <operator>&amp;</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <name>CURL_MASK_USHORT</name><operator>)</operator></expr>;</return>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__INTEL_COMPILER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name><name>(</name><name>pop</name><name>)</name></cpp:pragma>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>curlx_sitouz</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>sinum</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__INTEL_COMPILER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name><name>(</name><name>push</name><name>)</name></cpp:pragma>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name><name>(</name><name>disable</name><name>:</name><name>810</name><name>)</name></cpp:pragma> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>DEBUGASSERT</name><argument_list>(<argument><expr><name>sinum</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>size_t</name><operator>)</operator> <name>sinum</name></expr>;</return>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__INTEL_COMPILER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name><name>(</name><name>pop</name><name>)</name></cpp:pragma>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_WINSOCK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>int</name></type> <name>curlx_sktosi</name><parameter_list>(<parameter><decl><type><name>curl_socket_t</name></type> <name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>ssize_t</name><operator>)</operator> <name>s</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><name>curl_socket_t</name></type> <name>curlx_sitosk</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><name>curl_socket_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>ssize_t</name><operator>)</operator> <name>i</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>ssize_t</name></type> <name>curlx_read</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>count</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><name>ssize_t</name><operator>)</operator><call><name>read</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><call><name>curlx_uztoui</name><argument_list>(<argument><expr><name>count</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>ssize_t</name></type> <name>curlx_write</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>count</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><name>ssize_t</name><operator>)</operator><call><name>write</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><call><name>curlx_uztoui</name><argument_list>(<argument><expr><name>count</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__INTEL_COMPILER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__unix__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>int</name></type> <name>curlx_FD_ISSET</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>fd_set</name> <modifier>*</modifier></type><name>fdset</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name><name>(</name><name>push</name><name>)</name></cpp:pragma>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name><name>(</name><name>disable</name><name>:</name><name>1469</name><name>)</name></cpp:pragma> 

<return>return <expr><call><name>FD_ISSET</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>fdset</name></expr></argument>)</argument_list></call></expr>;</return>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name><name>(</name><name>pop</name><name>)</name></cpp:pragma>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>curlx_FD_SET</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>fd_set</name> <modifier>*</modifier></type><name>fdset</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name><name>(</name><name>push</name><name>)</name></cpp:pragma>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name><name>(</name><name>disable</name><name>:</name><name>1469</name><name>)</name></cpp:pragma> 

<expr_stmt><expr><call><name>FD_SET</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>fdset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name><name>(</name><name>pop</name><name>)</name></cpp:pragma>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>curlx_FD_ZERO</name><parameter_list>(<parameter><decl><type><name>fd_set</name> <modifier>*</modifier></type><name>fdset</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name><name>(</name><name>push</name><name>)</name></cpp:pragma>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name><name>(</name><name>disable</name><name>:</name><name>593</name><name>)</name></cpp:pragma> 

<expr_stmt><expr><call><name>FD_ZERO</name><argument_list>(<argument><expr><name>fdset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name><name>(</name><name>pop</name><name>)</name></cpp:pragma>

</block_content>}</block></function>

<function><type><name>unsigned</name> <name>short</name></type> <name>curlx_htons</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>short</name></type> <name>usnum</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>__INTEL_COMPILER</name> <operator>==</operator> <literal type="number">910</literal><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__i386__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<return>return <expr><operator>(</operator><name>unsigned</name> <name>short</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>usnum</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF00</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>usnum</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x00FF</literal><operator>)</operator><operator>)</operator></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name><name>(</name><name>push</name><name>)</name></cpp:pragma>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name><name>(</name><name>disable</name><name>:</name><name>810</name><name>)</name></cpp:pragma> 

<return>return <expr><call><name>htons</name><argument_list>(<argument><expr><name>usnum</name></expr></argument>)</argument_list></call></expr>;</return>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name><name>(</name><name>pop</name><name>)</name></cpp:pragma>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>unsigned</name> <name>short</name></type> <name>curlx_ntohs</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>short</name></type> <name>usnum</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>__INTEL_COMPILER</name> <operator>==</operator> <literal type="number">910</literal><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__i386__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<return>return <expr><operator>(</operator><name>unsigned</name> <name>short</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>usnum</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF00</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>usnum</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x00FF</literal><operator>)</operator><operator>)</operator></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name><name>(</name><name>push</name><name>)</name></cpp:pragma>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name><name>(</name><name>disable</name><name>:</name><name>810</name><name>)</name></cpp:pragma> 

<return>return <expr><call><name>ntohs</name><argument_list>(<argument><expr><name>usnum</name></expr></argument>)</argument_list></call></expr>;</return>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name><name>(</name><name>pop</name><name>)</name></cpp:pragma>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</unit>
