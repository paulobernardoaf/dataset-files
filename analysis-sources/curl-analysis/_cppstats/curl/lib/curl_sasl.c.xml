<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\curl-analysis\_cppstats\curl\lib\curl_sasl.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_setup.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_IMAP</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_SMTP</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_POP3</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;curl/curl.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"urldata.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_base64.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_md5.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vauth/vauth.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vtls/vtls.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_hmac.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_sasl.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"warnless.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"strtok.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sendf.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"non-ascii.h"</cpp:file></cpp:include> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_printf.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_memory.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memdebug.h"</cpp:file></cpp:include>

<struct><specifier>static</specifier> <specifier>const</specifier> struct <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>bit</name></decl>;</decl_stmt> 

}</block> <decl><name><name>mechtable</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"LOGIN"</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><name>SASL_MECH_LOGIN</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"PLAIN"</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><name>SASL_MECH_PLAIN</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"CRAM-MD5"</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><name>SASL_MECH_CRAM_MD5</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"DIGEST-MD5"</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><name>SASL_MECH_DIGEST_MD5</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"GSSAPI"</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><name>SASL_MECH_GSSAPI</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"EXTERNAL"</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><name>SASL_MECH_EXTERNAL</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"NTLM"</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><name>SASL_MECH_NTLM</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"XOAUTH2"</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><name>SASL_MECH_XOAUTH2</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"OAUTHBEARER"</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><name>SASL_MECH_OAUTHBEARER</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ZERO_NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>

}</block></expr></init></decl>;</struct>

<function><type><name>void</name></type> <name>Curl_sasl_cleanup</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>authused</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_KERBEROS5</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if<condition>(<expr><name>authused</name> <operator>==</operator> <name>SASL_MECH_GSSAPI</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>Curl_auth_cleanup_gssapi</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>krb5</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_NTLM</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if<condition>(<expr><name>authused</name> <operator>==</operator> <name>SASL_MECH_NTLM</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>Curl_auth_cleanup_ntlm</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>ntlm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>USE_KERBEROS5</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>USE_NTLM</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>conn</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>authused</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>unsigned</name> <name>int</name></type> <name>Curl_sasl_decode_mech</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>maxlen</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name>c</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>mechtable</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>maxlen</name> <operator>&gt;=</operator> <name><name>mechtable</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>len</name> <operator>&amp;&amp;</operator>

<operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name><name>mechtable</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name><name>mechtable</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>len</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>len</name> <operator>=</operator> <name><name>mechtable</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>len</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>maxlen</name> <operator>==</operator> <name><name>mechtable</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>len</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>mechtable</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bit</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>ptr</name><index>[<expr><name><name>mechtable</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>len</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>ISUPPER</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>ISDIGIT</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>c</name> <operator>!=</operator> <literal type="char">'-'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>!=</operator> <literal type="char">'_'</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>mechtable</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bit</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>CURLcode</name></type> <name>Curl_sasl_parse_url_auth_option</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SASL</name></name> <modifier>*</modifier></type><name>sasl</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>mechlen</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>len</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_URL_MALFORMAT</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>sasl</name><operator>-&gt;</operator><name>resetprefs</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sasl</name><operator>-&gt;</operator><name>resetprefs</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sasl</name><operator>-&gt;</operator><name>prefmech</name></name> <operator>=</operator> <name>SASL_AUTH_NONE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"*"</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>sasl</name><operator>-&gt;</operator><name>prefmech</name></name> <operator>=</operator> <name>SASL_AUTH_DEFAULT</name></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>mechbit</name> <init>= <expr><call><name>Curl_sasl_decode_mech</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mechlen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>mechbit</name> <operator>&amp;&amp;</operator> <name>mechlen</name> <operator>==</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>sasl</name><operator>-&gt;</operator><name>prefmech</name></name> <operator>|=</operator> <name>mechbit</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_URL_MALFORMAT</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>Curl_sasl_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SASL</name></name> <modifier>*</modifier></type><name>sasl</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>SASLproto</name></name> <modifier>*</modifier></type><name>params</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>sasl</name><operator>-&gt;</operator><name>params</name></name> <operator>=</operator> <name>params</name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>sasl</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>SASL_STOP</name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>sasl</name><operator>-&gt;</operator><name>authmechs</name></name> <operator>=</operator> <name>SASL_AUTH_NONE</name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>sasl</name><operator>-&gt;</operator><name>prefmech</name></name> <operator>=</operator> <name>SASL_AUTH_DEFAULT</name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>sasl</name><operator>-&gt;</operator><name>authused</name></name> <operator>=</operator> <name>SASL_AUTH_NONE</name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>sasl</name><operator>-&gt;</operator><name>resetprefs</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>sasl</name><operator>-&gt;</operator><name>mutual_auth</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>sasl</name><operator>-&gt;</operator><name>force_ir</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> 

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>state</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SASL</name></name> <modifier>*</modifier></type><name>sasl</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,

<parameter><decl><type><name>saslstate</name></type> <name>newstate</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUGBUILD</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_VERBOSE_STRINGS</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name><name>names</name><index>[]</index></name><init>=<expr><block>{

<expr><literal type="string">"STOP"</literal></expr>,

<expr><literal type="string">"PLAIN"</literal></expr>,

<expr><literal type="string">"LOGIN"</literal></expr>,

<expr><literal type="string">"LOGIN_PASSWD"</literal></expr>,

<expr><literal type="string">"EXTERNAL"</literal></expr>,

<expr><literal type="string">"CRAMMD5"</literal></expr>,

<expr><literal type="string">"DIGESTMD5"</literal></expr>,

<expr><literal type="string">"DIGESTMD5_RESP"</literal></expr>,

<expr><literal type="string">"NTLM"</literal></expr>,

<expr><literal type="string">"NTLM_TYPE2MSG"</literal></expr>,

<expr><literal type="string">"GSSAPI"</literal></expr>,

<expr><literal type="string">"GSSAPI_TOKEN"</literal></expr>,

<expr><literal type="string">"GSSAPI_NO_DATA"</literal></expr>,

<expr><literal type="string">"OAUTH2"</literal></expr>,

<expr><literal type="string">"OAUTH2_RESP"</literal></expr>,

<expr><literal type="string">"CANCEL"</literal></expr>,

<expr><literal type="string">"FINAL"</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>sasl</name><operator>-&gt;</operator><name>state</name></name> <operator>!=</operator> <name>newstate</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"SASL %p state change from %s to %s\n"</literal></expr></argument>,

<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>sasl</name></expr></argument>, <argument><expr><name><name>names</name><index>[<expr><name><name>sasl</name><operator>-&gt;</operator><name>state</name></name></expr>]</index></name></expr></argument>, <argument><expr><name><name>names</name><index>[<expr><name>newstate</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>conn</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>sasl</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>newstate</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>Curl_sasl_can_authenticate</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SASL</name></name> <modifier>*</modifier></type><name>sasl</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>user_passwd</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>sasl</name><operator>-&gt;</operator><name>authmechs</name></name> <operator>&amp;</operator> <name><name>sasl</name><operator>-&gt;</operator><name>prefmech</name></name> <operator>&amp;</operator> <name>SASL_MECH_EXTERNAL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>CURLcode</name></type> <name>Curl_sasl_start</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SASL</name></name> <modifier>*</modifier></type><name>sasl</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>force_ir</name></decl></parameter>, <parameter><decl><type><name>saslprogress</name> <modifier>*</modifier></type><name>progress</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>enabledmechs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mech</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>resp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>saslstate</name></type> <name>state1</name> <init>= <expr><name>SASL_STOP</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>saslstate</name></type> <name>state2</name> <init>= <expr><name>SASL_FINAL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>hostname</name> <init>= <expr><ternary><condition><expr><call><name>SSL_IS_PROXY</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><name><name>conn</name><operator>-&gt;</operator><name>http_proxy</name><operator>.</operator><name>host</name><operator>.</operator><name>name</name></name></expr> </then><else>:

<expr><name><name>conn</name><operator>-&gt;</operator><name>host</name><operator>.</operator><name>name</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>long</name> <name>int</name></type> <name>port</name> <init>= <expr><ternary><condition><expr><call><name>SSL_IS_PROXY</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><name><name>conn</name><operator>-&gt;</operator><name>port</name></name></expr> </then><else>: <expr><name><name>conn</name><operator>-&gt;</operator><name>remote_port</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_KERBEROS5</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>USE_NTLM</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>service</name> <init>= <expr><ternary><condition><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_SERVICE_NAME</name></expr>]</index></name></expr> ?</condition><then>

<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_SERVICE_NAME</name></expr>]</index></name></expr> </then><else>:

<expr><name><name>sasl</name><operator>-&gt;</operator><name>params</name><operator>-&gt;</operator><name>service</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>oauth_bearer</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_BEARER</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>sasl</name><operator>-&gt;</operator><name>force_ir</name></name> <operator>=</operator> <name>force_ir</name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>sasl</name><operator>-&gt;</operator><name>authused</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name>enabledmechs</name> <operator>=</operator> <name><name>sasl</name><operator>-&gt;</operator><name>authmechs</name></name> <operator>&amp;</operator> <name><name>sasl</name><operator>-&gt;</operator><name>prefmech</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>progress</name> <operator>=</operator> <name>SASL_IDLE</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>enabledmechs</name> <operator>&amp;</operator> <name>SASL_MECH_EXTERNAL</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>conn</name><operator>-&gt;</operator><name>passwd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mech</name> <operator>=</operator> <name>SASL_MECH_STRING_EXTERNAL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>state1</name> <operator>=</operator> <name>SASL_EXTERNAL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sasl</name><operator>-&gt;</operator><name>authused</name></name> <operator>=</operator> <name>SASL_MECH_EXTERNAL</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>force_ir</name> <operator>||</operator> <name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>sasl_ir</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_auth_create_external_message</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>user</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>resp</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>user_passwd</name></name></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_KERBEROS5</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>enabledmechs</name> <operator>&amp;</operator> <name>SASL_MECH_GSSAPI</name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>Curl_auth_is_gssapi_supported</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator>

<call><name>Curl_auth_user_contains_domain</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>user</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sasl</name><operator>-&gt;</operator><name>mutual_auth</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>mech</name> <operator>=</operator> <name>SASL_MECH_STRING_GSSAPI</name></expr>;</expr_stmt>

<expr_stmt><expr><name>state1</name> <operator>=</operator> <name>SASL_GSSAPI</name></expr>;</expr_stmt>

<expr_stmt><expr><name>state2</name> <operator>=</operator> <name>SASL_GSSAPI_TOKEN</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sasl</name><operator>-&gt;</operator><name>authused</name></name> <operator>=</operator> <name>SASL_MECH_GSSAPI</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>force_ir</name> <operator>||</operator> <name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>sasl_ir</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_auth_create_gssapi_user_message</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>user</name></name></expr></argument>,

<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>passwd</name></name></expr></argument>,

<argument><expr><name>service</name></expr></argument>,

<argument><expr><name><name>data</name><operator>-&gt;</operator><name>conn</name><operator>-&gt;</operator><name>host</name><operator>.</operator><name>name</name></name></expr></argument>,

<argument><expr><name><name>sasl</name><operator>-&gt;</operator><name>mutual_auth</name></name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>krb5</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>resp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_CRYPTO_AUTH</name></expr></argument>)</argument_list></call></expr></cpp:if>
if<condition>(<expr><operator>(</operator><name>enabledmechs</name> <operator>&amp;</operator> <name>SASL_MECH_DIGEST_MD5</name><operator>)</operator> <operator>&amp;&amp;</operator>

<call><name>Curl_auth_is_digest_supported</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mech</name> <operator>=</operator> <name>SASL_MECH_STRING_DIGEST_MD5</name></expr>;</expr_stmt>

<expr_stmt><expr><name>state1</name> <operator>=</operator> <name>SASL_DIGESTMD5</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sasl</name><operator>-&gt;</operator><name>authused</name></name> <operator>=</operator> <name>SASL_MECH_DIGEST_MD5</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name>enabledmechs</name> <operator>&amp;</operator> <name>SASL_MECH_CRAM_MD5</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mech</name> <operator>=</operator> <name>SASL_MECH_STRING_CRAM_MD5</name></expr>;</expr_stmt>

<expr_stmt><expr><name>state1</name> <operator>=</operator> <name>SASL_CRAMMD5</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sasl</name><operator>-&gt;</operator><name>authused</name></name> <operator>=</operator> <name>SASL_MECH_CRAM_MD5</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_NTLM</name></expr></argument>)</argument_list></call></expr></cpp:if>
if<condition>(<expr><operator>(</operator><name>enabledmechs</name> <operator>&amp;</operator> <name>SASL_MECH_NTLM</name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>Curl_auth_is_ntlm_supported</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mech</name> <operator>=</operator> <name>SASL_MECH_STRING_NTLM</name></expr>;</expr_stmt>

<expr_stmt><expr><name>state1</name> <operator>=</operator> <name>SASL_NTLM</name></expr>;</expr_stmt>

<expr_stmt><expr><name>state2</name> <operator>=</operator> <name>SASL_NTLM_TYPE2MSG</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sasl</name><operator>-&gt;</operator><name>authused</name></name> <operator>=</operator> <name>SASL_MECH_NTLM</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>force_ir</name> <operator>||</operator> <name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>sasl_ir</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_auth_create_ntlm_type1_message</name><argument_list>(<argument><expr><name>data</name></expr></argument>,

<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>user</name></name></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>passwd</name></name></expr></argument>,

<argument><expr><name>service</name></expr></argument>,

<argument><expr><name>hostname</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>ntlm</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>resp</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

if<condition>(<expr><operator>(</operator><name>enabledmechs</name> <operator>&amp;</operator> <name>SASL_MECH_OAUTHBEARER</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>oauth_bearer</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mech</name> <operator>=</operator> <name>SASL_MECH_STRING_OAUTHBEARER</name></expr>;</expr_stmt>

<expr_stmt><expr><name>state1</name> <operator>=</operator> <name>SASL_OAUTH2</name></expr>;</expr_stmt>

<expr_stmt><expr><name>state2</name> <operator>=</operator> <name>SASL_OAUTH2_RESP</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sasl</name><operator>-&gt;</operator><name>authused</name></name> <operator>=</operator> <name>SASL_MECH_OAUTHBEARER</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>force_ir</name> <operator>||</operator> <name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>sasl_ir</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_auth_create_oauth_bearer_message</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>user</name></name></expr></argument>,

<argument><expr><name>hostname</name></expr></argument>,

<argument><expr><name>port</name></expr></argument>,

<argument><expr><name>oauth_bearer</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>resp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><operator>(</operator><name>enabledmechs</name> <operator>&amp;</operator> <name>SASL_MECH_XOAUTH2</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>oauth_bearer</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mech</name> <operator>=</operator> <name>SASL_MECH_STRING_XOAUTH2</name></expr>;</expr_stmt>

<expr_stmt><expr><name>state1</name> <operator>=</operator> <name>SASL_OAUTH2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sasl</name><operator>-&gt;</operator><name>authused</name></name> <operator>=</operator> <name>SASL_MECH_XOAUTH2</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>force_ir</name> <operator>||</operator> <name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>sasl_ir</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_auth_create_xoauth_bearer_message</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>user</name></name></expr></argument>,

<argument><expr><name>oauth_bearer</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>resp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name>enabledmechs</name> <operator>&amp;</operator> <name>SASL_MECH_PLAIN</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mech</name> <operator>=</operator> <name>SASL_MECH_STRING_PLAIN</name></expr>;</expr_stmt>

<expr_stmt><expr><name>state1</name> <operator>=</operator> <name>SASL_PLAIN</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sasl</name><operator>-&gt;</operator><name>authused</name></name> <operator>=</operator> <name>SASL_MECH_PLAIN</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>force_ir</name> <operator>||</operator> <name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>sasl_ir</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_auth_create_plain_message</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>sasl_authzid</name></name></expr></argument>,

<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>user</name></name></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>passwd</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>resp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name>enabledmechs</name> <operator>&amp;</operator> <name>SASL_MECH_LOGIN</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mech</name> <operator>=</operator> <name>SASL_MECH_STRING_LOGIN</name></expr>;</expr_stmt>

<expr_stmt><expr><name>state1</name> <operator>=</operator> <name>SASL_LOGIN</name></expr>;</expr_stmt>

<expr_stmt><expr><name>state2</name> <operator>=</operator> <name>SASL_LOGIN_PASSWD</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sasl</name><operator>-&gt;</operator><name>authused</name></name> <operator>=</operator> <name>SASL_MECH_LOGIN</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>force_ir</name> <operator>||</operator> <name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>sasl_ir</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_auth_create_login_message</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>user</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>resp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>result</name> <operator>&amp;&amp;</operator> <name>mech</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>resp</name> <operator>&amp;&amp;</operator> <name><name>sasl</name><operator>-&gt;</operator><name>params</name><operator>-&gt;</operator><name>maxirlen</name></name> <operator>&amp;&amp;</operator>

<call><name>strlen</name><argument_list>(<argument><expr><name>mech</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>len</name> <operator>&gt;</operator> <name><name>sasl</name><operator>-&gt;</operator><name>params</name><operator>-&gt;</operator><name>maxirlen</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>resp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>resp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name><name>sasl</name><operator>-&gt;</operator><name>params</name><operator>-&gt;</operator><name>sendauth</name></name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>mech</name></expr></argument>, <argument><expr><name>resp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>result</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>progress</name> <operator>=</operator> <name>SASL_INPROGRESS</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>sasl</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><ternary><condition><expr><name>resp</name></expr> ?</condition><then> <expr><name>state2</name></expr> </then><else>: <expr><name>state1</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>resp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>CURLcode</name></type> <name>Curl_sasl_continue</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SASL</name></name> <modifier>*</modifier></type><name>sasl</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>code</name></decl></parameter>, <parameter><decl><type><name>saslprogress</name> <modifier>*</modifier></type><name>progress</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>saslstate</name></type> <name>newstate</name> <init>= <expr><name>SASL_FINAL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>resp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>hostname</name> <init>= <expr><ternary><condition><expr><call><name>SSL_IS_PROXY</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><name><name>conn</name><operator>-&gt;</operator><name>http_proxy</name><operator>.</operator><name>host</name><operator>.</operator><name>name</name></name></expr> </then><else>:

<expr><name><name>conn</name><operator>-&gt;</operator><name>host</name><operator>.</operator><name>name</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>long</name> <name>int</name></type> <name>port</name> <init>= <expr><ternary><condition><expr><call><name>SSL_IS_PROXY</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><name><name>conn</name><operator>-&gt;</operator><name>port</name></name></expr> </then><else>: <expr><name><name>conn</name><operator>-&gt;</operator><name>remote_port</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_CRYPTO_AUTH</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>chlg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>chlglen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_CRYPTO_AUTH</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>USE_KERBEROS5</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>USE_NTLM</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>service</name> <init>= <expr><ternary><condition><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_SERVICE_NAME</name></expr>]</index></name></expr> ?</condition><then>

<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_SERVICE_NAME</name></expr>]</index></name></expr> </then><else>:

<expr><name><name>sasl</name><operator>-&gt;</operator><name>params</name><operator>-&gt;</operator><name>service</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>serverdata</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>oauth_bearer</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_BEARER</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>progress</name> <operator>=</operator> <name>SASL_INPROGRESS</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>sasl</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>SASL_FINAL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>code</name> <operator>!=</operator> <name><name>sasl</name><operator>-&gt;</operator><name>params</name><operator>-&gt;</operator><name>finalcode</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_LOGIN_DENIED</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>progress</name> <operator>=</operator> <name>SASL_DONE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>sasl</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SASL_STOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>sasl</name><operator>-&gt;</operator><name>state</name></name> <operator>!=</operator> <name>SASL_CANCEL</name> <operator>&amp;&amp;</operator> <name><name>sasl</name><operator>-&gt;</operator><name>state</name></name> <operator>!=</operator> <name>SASL_OAUTH2_RESP</name> <operator>&amp;&amp;</operator>

<name>code</name> <operator>!=</operator> <name><name>sasl</name><operator>-&gt;</operator><name>params</name><operator>-&gt;</operator><name>contcode</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>progress</name> <operator>=</operator> <name>SASL_DONE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>sasl</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SASL_STOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_LOGIN_DENIED</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<switch>switch<condition>(<expr><name><name>sasl</name><operator>-&gt;</operator><name>state</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>SASL_STOP</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>progress</name> <operator>=</operator> <name>SASL_DONE</name></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>

<case>case <expr><name>SASL_PLAIN</name></expr>:</case>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_auth_create_plain_message</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>sasl_authzid</name></name></expr></argument>,

<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>user</name></name></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>passwd</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>resp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>SASL_LOGIN</name></expr>:</case>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_auth_create_login_message</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>user</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>resp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>newstate</name> <operator>=</operator> <name>SASL_LOGIN_PASSWD</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>SASL_LOGIN_PASSWD</name></expr>:</case>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_auth_create_login_message</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>passwd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>resp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>SASL_EXTERNAL</name></expr>:</case>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_auth_create_external_message</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>user</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>resp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_CRYPTO_AUTH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>SASL_CRAMMD5</name></expr>:</case>

<expr_stmt><expr><call><name><name>sasl</name><operator>-&gt;</operator><name>params</name><operator>-&gt;</operator><name>getmessage</name></name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>buffer</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>serverdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_auth_decode_cram_md5_message</name><argument_list>(<argument><expr><name>serverdata</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>chlg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>chlglen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>result</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_auth_create_cram_md5_message</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>chlg</name></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>user</name></name></expr></argument>,

<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>passwd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>resp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>chlg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>SASL_DIGESTMD5</name></expr>:</case>

<expr_stmt><expr><call><name><name>sasl</name><operator>-&gt;</operator><name>params</name><operator>-&gt;</operator><name>getmessage</name></name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>buffer</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>serverdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_auth_create_digest_md5_message</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>serverdata</name></expr></argument>,

<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>user</name></name></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>passwd</name></name></expr></argument>,

<argument><expr><name>service</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>resp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>newstate</name> <operator>=</operator> <name>SASL_DIGESTMD5_RESP</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>SASL_DIGESTMD5_RESP</name></expr>:</case>

<expr_stmt><expr><name>resp</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>resp</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_OUT_OF_MEMORY</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_NTLM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>SASL_NTLM</name></expr>:</case>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_auth_create_ntlm_type1_message</name><argument_list>(<argument><expr><name>data</name></expr></argument>,

<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>user</name></name></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>passwd</name></name></expr></argument>,

<argument><expr><name>service</name></expr></argument>, <argument><expr><name>hostname</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>ntlm</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>resp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>newstate</name> <operator>=</operator> <name>SASL_NTLM_TYPE2MSG</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>SASL_NTLM_TYPE2MSG</name></expr>:</case>

<expr_stmt><expr><call><name><name>sasl</name><operator>-&gt;</operator><name>params</name><operator>-&gt;</operator><name>getmessage</name></name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>buffer</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>serverdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_auth_decode_ntlm_type2_message</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>serverdata</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>ntlm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>result</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_auth_create_ntlm_type3_message</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>user</name></name></expr></argument>,

<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>passwd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>ntlm</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>resp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_KERBEROS5</name></expr></argument>)</argument_list></call></expr></cpp:if>

<case>case <expr><name>SASL_GSSAPI</name></expr>:</case>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_auth_create_gssapi_user_message</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>user</name></name></expr></argument>,

<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>passwd</name></name></expr></argument>,

<argument><expr><name>service</name></expr></argument>,

<argument><expr><name><name>data</name><operator>-&gt;</operator><name>conn</name><operator>-&gt;</operator><name>host</name><operator>.</operator><name>name</name></name></expr></argument>,

<argument><expr><name><name>sasl</name><operator>-&gt;</operator><name>mutual_auth</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>krb5</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>resp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>newstate</name> <operator>=</operator> <name>SASL_GSSAPI_TOKEN</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>SASL_GSSAPI_TOKEN</name></expr>:</case>

<expr_stmt><expr><call><name><name>sasl</name><operator>-&gt;</operator><name>params</name><operator>-&gt;</operator><name>getmessage</name></name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>buffer</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>serverdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>sasl</name><operator>-&gt;</operator><name>mutual_auth</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_auth_create_gssapi_user_message</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><name><name>sasl</name><operator>-&gt;</operator><name>mutual_auth</name></name></expr></argument>,

<argument><expr><name>serverdata</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>krb5</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>resp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>newstate</name> <operator>=</operator> <name>SASL_GSSAPI_NO_DATA</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_auth_create_gssapi_security_message</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>serverdata</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>krb5</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>resp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>SASL_GSSAPI_NO_DATA</name></expr>:</case>

<expr_stmt><expr><call><name><name>sasl</name><operator>-&gt;</operator><name>params</name><operator>-&gt;</operator><name>getmessage</name></name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>buffer</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>serverdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_auth_create_gssapi_security_message</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>serverdata</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>krb5</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>resp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<case>case <expr><name>SASL_OAUTH2</name></expr>:</case>

<if_stmt><if>if<condition>(<expr><name><name>sasl</name><operator>-&gt;</operator><name>authused</name></name> <operator>==</operator> <name>SASL_MECH_OAUTHBEARER</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_auth_create_oauth_bearer_message</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>user</name></name></expr></argument>,

<argument><expr><name>hostname</name></expr></argument>,

<argument><expr><name>port</name></expr></argument>,

<argument><expr><name>oauth_bearer</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>resp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>newstate</name> <operator>=</operator> <name>SASL_OAUTH2_RESP</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_auth_create_xoauth_bearer_message</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>user</name></name></expr></argument>,

<argument><expr><name>oauth_bearer</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>resp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>SASL_OAUTH2_RESP</name></expr>:</case>

<if_stmt><if>if<condition>(<expr><name>code</name> <operator>==</operator> <name><name>sasl</name><operator>-&gt;</operator><name>params</name><operator>-&gt;</operator><name>finalcode</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>progress</name> <operator>=</operator> <name>SASL_DONE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>sasl</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SASL_STOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name>code</name> <operator>==</operator> <name><name>sasl</name><operator>-&gt;</operator><name>params</name><operator>-&gt;</operator><name>contcode</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>resp</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><literal type="string">"AQ=="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>resp</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_OUT_OF_MEMORY</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>progress</name> <operator>=</operator> <name>SASL_DONE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>sasl</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><name>SASL_STOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_LOGIN_DENIED</name></expr>;</return>

</block_content>}</block></else></if_stmt>

<case>case <expr><name>SASL_CANCEL</name></expr>:</case>

<expr_stmt><expr><name><name>sasl</name><operator>-&gt;</operator><name>authmechs</name></name> <operator>^=</operator> <name><name>sasl</name><operator>-&gt;</operator><name>authused</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_sasl_start</name><argument_list>(<argument><expr><name>sasl</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>sasl</name><operator>-&gt;</operator><name>force_ir</name></name></expr></argument>, <argument><expr><name>progress</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>newstate</name> <operator>=</operator> <name><name>sasl</name><operator>-&gt;</operator><name>state</name></name></expr>;</expr_stmt> 

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Unsupported SASL authentication mechanism"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_UNSUPPORTED_PROTOCOL</name></expr>;</expr_stmt> 

<break>break;</break>

</block_content>}</block></switch>

<switch>switch<condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>CURLE_BAD_CONTENT_ENCODING</name></expr>:</case>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name><name>sasl</name><operator>-&gt;</operator><name>params</name><operator>-&gt;</operator><name>sendcont</name></name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><literal type="string">"*"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>newstate</name> <operator>=</operator> <name>SASL_CANCEL</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>CURLE_OK</name></expr>:</case>

<if_stmt><if>if<condition>(<expr><name>resp</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name><name>sasl</name><operator>-&gt;</operator><name>params</name><operator>-&gt;</operator><name>sendcont</name></name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>resp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><name>newstate</name> <operator>=</operator> <name>SASL_STOP</name></expr>;</expr_stmt> 

<expr_stmt><expr><operator>*</operator><name>progress</name> <operator>=</operator> <name>SASL_DONE</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>resp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>state</name><argument_list>(<argument><expr><name>sasl</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><name>newstate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</unit>
