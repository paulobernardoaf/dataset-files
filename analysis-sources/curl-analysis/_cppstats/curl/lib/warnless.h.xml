<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\curl-analysis\_cppstats\curl\lib\warnless.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_WINSOCK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;curl/curl.h&gt;</cpp:file></cpp:include> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CURLX_FUNCTION_CAST</name><parameter_list>(<parameter><type><name>target_type</name></type></parameter>, <parameter><type><name>func</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(target_type)(void (*) (void))(func)</cpp:value></cpp:define>

<function_decl><type><name>unsigned</name> <name>short</name></type> <name>curlx_ultous</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>ulnum</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>unsigned</name> <name>char</name></type> <name>curlx_ultouc</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>ulnum</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>curlx_ultosi</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>ulnum</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>curlx_uztosi</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>uznum</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>curl_off_t</name></type> <name>curlx_uztoso</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>uznum</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>unsigned</name> <name>long</name></type> <name>curlx_uztoul</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>uznum</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>unsigned</name> <name>int</name></type> <name>curlx_uztoui</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>uznum</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>curlx_sltosi</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>slnum</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>unsigned</name> <name>int</name></type> <name>curlx_sltoui</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>slnum</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>unsigned</name> <name>short</name></type> <name>curlx_sltous</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>slnum</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>ssize_t</name></type> <name>curlx_uztosz</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>uznum</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>size_t</name></type> <name>curlx_sotouz</name><parameter_list>(<parameter><decl><type><name>curl_off_t</name></type> <name>sonum</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>curlx_sztosi</name><parameter_list>(<parameter><decl><type><name>ssize_t</name></type> <name>sznum</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>unsigned</name> <name>short</name></type> <name>curlx_uitous</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>uinum</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>size_t</name></type> <name>curlx_sitouz</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>sinum</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_WINSOCK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>int</name></type> <name>curlx_sktosi</name><parameter_list>(<parameter><decl><type><name>curl_socket_t</name></type> <name>s</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>curl_socket_t</name></type> <name>curlx_sitosk</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function_decl><type><name>ssize_t</name></type> <name>curlx_read</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>count</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>ssize_t</name></type> <name>curlx_write</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>count</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>BUILDING_WARNLESS_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>read</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>read</name><parameter_list>(<parameter><type><name>fd</name></type></parameter>, <parameter><type><name>buf</name></type></parameter>, <parameter><type><name>count</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>curlx_read(fd, buf, count)</cpp:value></cpp:define>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>write</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>write</name><parameter_list>(<parameter><type><name>fd</name></type></parameter>, <parameter><type><name>buf</name></type></parameter>, <parameter><type><name>count</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>curlx_write(fd, buf, count)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__INTEL_COMPILER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__unix__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function_decl><type><name>int</name></type> <name>curlx_FD_ISSET</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>fd_set</name> <modifier>*</modifier></type><name>fdset</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>curlx_FD_SET</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>fd_set</name> <modifier>*</modifier></type><name>fdset</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>curlx_FD_ZERO</name><parameter_list>(<parameter><decl><type><name>fd_set</name> <modifier>*</modifier></type><name>fdset</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>unsigned</name> <name>short</name></type> <name>curlx_htons</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>short</name></type> <name>usnum</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>unsigned</name> <name>short</name></type> <name>curlx_ntohs</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>short</name></type> <name>usnum</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>BUILDING_WARNLESS_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>FD_ISSET</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FD_ISSET</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>curlx_FD_ISSET((a),(b))</cpp:value></cpp:define>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>FD_SET</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FD_SET</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>curlx_FD_SET((a),(b))</cpp:value></cpp:define>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>FD_ZERO</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FD_ZERO</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>curlx_FD_ZERO((a))</cpp:value></cpp:define>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>htons</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>htons</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>curlx_htons((a))</cpp:value></cpp:define>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ntohs</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ntohs</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>curlx_ntohs((a))</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</unit>
