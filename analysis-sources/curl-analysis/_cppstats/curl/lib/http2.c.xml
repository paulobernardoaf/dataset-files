<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\curl-analysis\_cppstats\curl\lib\http2.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_setup.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_NGHTTP2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;nghttp2/nghttp2.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"urldata.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http2.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sendf.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"select.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_base64.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"strcase.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"multiif.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"url.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"connect.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"strtoofft.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"strdup.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_printf.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_memory.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memdebug.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>H2_BUFSIZE</name></cpp:macro> <cpp:value>32768</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>NGHTTP2_VERSION_NUM</name> <operator>&lt;</operator> <literal type="number">0x010c00</literal><operator>)</operator></expr></cpp:if>

<cpp:error>#<cpp:directive>error</cpp:directive> too old nghttp2 version, upgrade!</cpp:error>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_VERBOSE_STRINGS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nghttp2_session_callbacks_set_error_callback</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>NGHTTP2_VERSION_NUM</name> <operator>&gt;=</operator> <literal type="number">0x010c00</literal><operator>)</operator></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NGHTTP2_HAS_SET_LOCAL_WINDOW_SIZE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HTTP2_HUGE_WINDOW_SIZE</name></cpp:macro> <cpp:value>(32 * 1024 * 1024)</cpp:value></cpp:define> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG_HTTP2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>H2BUGF</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>x</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>H2BUGF</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { } while(0)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><specifier>static</specifier> <name>ssize_t</name></type> <name>http2_recv</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sockindex</name></decl></parameter>,

<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>mem</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>CURLcode</name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>http2_connisdead</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>h2_session_send</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><name>nghttp2_session</name> <modifier>*</modifier></type><name>h2</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>h2_process_pending_input</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>http_conn</name></name> <modifier>*</modifier></type><name>httpc</name></decl></parameter>,

<parameter><decl><type><name>CURLcode</name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>void</name></type> <name>Curl_http2_init_state</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>UrlState</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>stream_weight</name></name> <operator>=</operator> <name>NGHTTP2_DEFAULT_WEIGHT</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>Curl_http2_init_userset</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>UserDefined</name></name> <modifier>*</modifier></type><name>set</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>set</name><operator>-&gt;</operator><name>stream_weight</name></name> <operator>=</operator> <name>NGHTTP2_DEFAULT_WEIGHT</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>http2_perform_getsock</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,

<parameter><decl><type><name>curl_socket_t</name> <modifier>*</modifier></type><name>sock</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>http_conn</name></name> <modifier>*</modifier></type><name>c</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>httpc</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>SingleRequest</name></name> <modifier>*</modifier></type><name>k</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>req</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bitmap</name> <init>= <expr><name>GETSOCK_BLANK</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>sock</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>sock</name><index>[<expr><name>FIRSTSOCKET</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>bitmap</name> <operator>|=</operator> <call><name>GETSOCK_READSOCK</name><argument_list>(<argument><expr><name>FIRSTSOCKET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><operator>(</operator><name><name>k</name><operator>-&gt;</operator><name>keepon</name></name> <operator>&amp;</operator> <operator>(</operator><name>KEEP_SEND</name><operator>|</operator><name>KEEP_SEND_PAUSE</name><operator>)</operator><operator>)</operator> <operator>==</operator> <name>KEEP_SEND</name><operator>)</operator> <operator>||</operator>

<call><name>nghttp2_session_want_write</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>h2</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>bitmap</name> <operator>|=</operator> <call><name>GETSOCK_WRITESOCK</name><argument_list>(<argument><expr><name>FIRSTSOCKET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>bitmap</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>http2_getsock</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,

<parameter><decl><type><name>curl_socket_t</name> <modifier>*</modifier></type><name>socks</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>http2_perform_getsock</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>socks</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>http2_stream_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>HTTP</name></name> <modifier>*</modifier></type><name>http</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>http</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>Curl_add_buffer_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>http</name><operator>-&gt;</operator><name>header_recvbuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_add_buffer_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>http</name><operator>-&gt;</operator><name>trailer_recvbuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init>;</init> <condition><expr><name><name>http</name><operator>-&gt;</operator><name>push_headers_used</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>--</operator><name><name>http</name><operator>-&gt;</operator><name>push_headers_used</name></name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>http</name><operator>-&gt;</operator><name>push_headers</name><index>[<expr><name><name>http</name><operator>-&gt;</operator><name>push_headers_used</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>http</name><operator>-&gt;</operator><name>push_headers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>http</name><operator>-&gt;</operator><name>push_headers</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>http2_disconnect</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>dead_connection</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>http_conn</name></name> <modifier>*</modifier></type><name>c</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>httpc</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>dead_connection</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>H2BUGF</name><argument_list>(<argument><expr><call><name>infof</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"HTTP/2 DISCONNECT starts now\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>nghttp2_session_del</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>h2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>inbuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>H2BUGF</name><argument_list>(<argument><expr><call><name>infof</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"HTTP/2 DISCONNECT done\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>http2_connisdead</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>sval</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>dead</name> <init>= <expr><name>TRUE</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>close</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>sval</name> <operator>=</operator> <call><name>SOCKET_READABLE</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>sock</name><index>[<expr><name>FIRSTSOCKET</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>sval</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>dead</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name>sval</name> <operator>&amp;</operator> <name>CURL_CSELECT_ERR</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>dead</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name>sval</name> <operator>&amp;</operator> <name>CURL_CSELECT_IN</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>dead</name> <operator>=</operator> <operator>!</operator><call><name>Curl_connalive</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>dead</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>http_conn</name></name> <modifier>*</modifier></type><name>httpc</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>httpc</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>nread</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>httpc</name><operator>-&gt;</operator><name>recv_underlying</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>nread</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>Curl_recv</name> <operator>*</operator><operator>)</operator><name><name>httpc</name><operator>-&gt;</operator><name>recv_underlying</name></name><operator>)</operator><operator>(</operator>

<name>conn</name><operator>,</operator> <name>FIRSTSOCKET</name><operator>,</operator> <name><name>httpc</name><operator>-&gt;</operator><name>inbuf</name></name><operator>,</operator> <name>H2_BUFSIZE</name><operator>,</operator> <operator>&amp;</operator><name>result</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>nread</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>,

<argument><expr><literal type="string">"%d bytes stray data read before trying h2 connection\n"</literal></expr></argument>,

<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>nread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>httpc</name><operator>-&gt;</operator><name>nread_inbuf</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>httpc</name><operator>-&gt;</operator><name>inbuflen</name></name> <operator>=</operator> <name>nread</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>h2_process_pending_input</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>httpc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>dead</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>dead</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name>http2_conncheck</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>check</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>checks_to_perform</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>ret_val</name> <init>= <expr><name>CONNRESULT_NONE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>http_conn</name></name> <modifier>*</modifier></type><name>c</name> <init>= <expr><operator>&amp;</operator><name><name>check</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>httpc</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>send_frames</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>checks_to_perform</name> <operator>&amp;</operator> <name>CONNCHECK_ISDEAD</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>http2_connisdead</name><argument_list>(<argument><expr><name>check</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ret_val</name> <operator>|=</operator> <name>CONNRESULT_DEAD</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>checks_to_perform</name> <operator>&amp;</operator> <name>CONNCHECK_KEEPALIVE</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>curltime</name></name></type> <name>now</name> <init>= <expr><call><name>Curl_now</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>timediff_t</name></type> <name>elapsed</name> <init>= <expr><call><name>Curl_timediff</name><argument_list>(<argument><expr><name>now</name></expr></argument>, <argument><expr><name><name>check</name><operator>-&gt;</operator><name>keepalive</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>elapsed</name> <operator>&gt;</operator> <name><name>check</name><operator>-&gt;</operator><name>upkeep_interval_ms</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>nghttp2_submit_ping</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>h2</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ZERO_NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>rc</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>send_frames</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name><name>check</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"nghttp2_submit_ping() failed: %s(%d)"</literal></expr></argument>,

<argument><expr><call><name>nghttp2_strerror</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>check</name><operator>-&gt;</operator><name>keepalive</name></name> <operator>=</operator> <name>now</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>send_frames</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>nghttp2_session_send</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>h2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name><name>check</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"nghttp2_session_send() failed: %s(%d)"</literal></expr></argument>,

<argument><expr><call><name>nghttp2_strerror</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret_val</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>Curl_http2_setup_req</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>HTTP</name></name> <modifier>*</modifier></type><name>http</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>protop</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>http</name><operator>-&gt;</operator><name>nread_header_recvbuf</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>http</name><operator>-&gt;</operator><name>bodystarted</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>http</name><operator>-&gt;</operator><name>status_code</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>http</name><operator>-&gt;</operator><name>pausedata</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>http</name><operator>-&gt;</operator><name>pauselen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>http</name><operator>-&gt;</operator><name>closed</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>http</name><operator>-&gt;</operator><name>close_handled</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>http</name><operator>-&gt;</operator><name>mem</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>buffer</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>http</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>buffer_size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>http</name><operator>-&gt;</operator><name>memlen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>Curl_http2_setup_conn</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>httpc</name><operator>.</operator><name>settings</name><operator>.</operator><name>max_concurrent_streams</name></name> <operator>=</operator>

<name>DEFAULT_MAX_CONCURRENT_STREAMS</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>httpc</name><operator>.</operator><name>error_code</name></name> <operator>=</operator> <name>NGHTTP2_NO_ERROR</name></expr>;</expr_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>Curl_handler</name></name></type> <name>Curl_handler_http2</name> <init>= <expr><block>{

<expr><literal type="string">"HTTP"</literal></expr>, 

<expr><name>ZERO_NULL</name></expr>, 

<expr><name>Curl_http</name></expr>, 

<expr><name>Curl_http_done</name></expr>, 

<expr><name>ZERO_NULL</name></expr>, 

<expr><name>ZERO_NULL</name></expr>, 

<expr><name>ZERO_NULL</name></expr>, 

<expr><name>ZERO_NULL</name></expr>, 

<expr><name>http2_getsock</name></expr>, 

<expr><name>http2_getsock</name></expr>, 

<expr><name>ZERO_NULL</name></expr>, 

<expr><name>http2_perform_getsock</name></expr>, 

<expr><name>http2_disconnect</name></expr>, 

<expr><name>ZERO_NULL</name></expr>, 

<expr><name>http2_conncheck</name></expr>, 

<expr><name>PORT_HTTP</name></expr>, 

<expr><name>CURLPROTO_HTTP</name></expr>, 

<expr><name>PROTOPT_STREAM</name></expr> 

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>Curl_handler</name></name></type> <name>Curl_handler_http2_ssl</name> <init>= <expr><block>{

<expr><literal type="string">"HTTPS"</literal></expr>, 

<expr><name>ZERO_NULL</name></expr>, 

<expr><name>Curl_http</name></expr>, 

<expr><name>Curl_http_done</name></expr>, 

<expr><name>ZERO_NULL</name></expr>, 

<expr><name>ZERO_NULL</name></expr>, 

<expr><name>ZERO_NULL</name></expr>, 

<expr><name>ZERO_NULL</name></expr>, 

<expr><name>http2_getsock</name></expr>, 

<expr><name>http2_getsock</name></expr>, 

<expr><name>ZERO_NULL</name></expr>, 

<expr><name>http2_perform_getsock</name></expr>, 

<expr><name>http2_disconnect</name></expr>, 

<expr><name>ZERO_NULL</name></expr>, 

<expr><name>http2_conncheck</name></expr>, 

<expr><name>PORT_HTTP</name></expr>, 

<expr><name>CURLPROTO_HTTPS</name></expr>, 

<expr><name>PROTOPT_SSL</name> <operator>|</operator> <name>PROTOPT_STREAM</name></expr> 

}</block></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>Curl_http2_ver</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>nghttp2_info</name> <modifier>*</modifier></type><name>h2</name> <init>= <expr><call><name>nghttp2_version</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>msnprintf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="string">"nghttp2/%s"</literal></expr></argument>, <argument><expr><name><name>h2</name><operator>-&gt;</operator><name>version_str</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ssize_t</name></type> <name>send_callback</name><parameter_list>(<parameter><decl><type><name>nghttp2_session</name> <modifier>*</modifier></type><name>h2</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name> <init>= <expr><operator>(</operator>struct <name>connectdata</name> <operator>*</operator><operator>)</operator><name>userp</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>http_conn</name></name> <modifier>*</modifier></type><name>c</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>httpc</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>written</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>h2</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>flags</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>send_underlying</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NGHTTP2_ERR_CALLBACK_FAILURE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>written</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>Curl_send</name><operator>*</operator><operator>)</operator><name><name>c</name><operator>-&gt;</operator><name>send_underlying</name></name><operator>)</operator><operator>(</operator><name>conn</name><operator>,</operator> <name>FIRSTSOCKET</name><operator>,</operator>

<name>data</name><operator>,</operator> <name>length</name><operator>,</operator> <operator>&amp;</operator><name>result</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name> <operator>==</operator> <name>CURLE_AGAIN</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NGHTTP2_ERR_WOULDBLOCK</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>written</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"Failed sending HTTP2 data"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NGHTTP2_ERR_CALLBACK_FAILURE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>written</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NGHTTP2_ERR_WOULDBLOCK</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>written</name></expr>;</return>

</block_content>}</block></function>

<struct>struct <name>curl_pushheaders</name> <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>nghttp2_push_promise</name> <modifier>*</modifier></type><name>frame</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><name>char</name> <modifier>*</modifier></type><name>curl_pushheader_bynum</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>curl_pushheaders</name></name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>num</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>h</name> <operator>||</operator> <operator>!</operator><call><name>GOOD_EASY_HANDLE</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if>

<else>else <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>HTTP</name></name> <modifier>*</modifier></type><name>stream</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>protop</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>num</name> <operator>&lt;</operator> <name><name>stream</name><operator>-&gt;</operator><name>push_headers_used</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>stream</name><operator>-&gt;</operator><name>push_headers</name><index>[<expr><name>num</name></expr>]</index></name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>curl_pushheader_byname</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>curl_pushheaders</name></name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>header</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>h</name> <operator>||</operator> <operator>!</operator><call><name>GOOD_EASY_HANDLE</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><name>header</name> <operator>||</operator> <operator>!</operator><name><name>header</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>||</operator>

<operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><literal type="string">":"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>header</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if>

<else>else <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>HTTP</name></name> <modifier>*</modifier></type><name>stream</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>protop</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>header</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>stream</name><operator>-&gt;</operator><name>push_headers_used</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name><name>stream</name><operator>-&gt;</operator><name>push_headers</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>push_headers</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>len</name></expr>]</index></name> <operator>!=</operator> <literal type="char">':'</literal></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<return>return <expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>push_headers</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>drained_transfer</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>http_conn</name></name> <modifier>*</modifier></type><name>httpc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>DEBUGASSERT</name><argument_list>(<argument><expr><name><name>httpc</name><operator>-&gt;</operator><name>drain_total</name></name> <operator>&gt;=</operator> <name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>drain</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>httpc</name><operator>-&gt;</operator><name>drain_total</name></name> <operator>-=</operator> <name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>drain</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>drain</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>drain_this</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>http_conn</name></name> <modifier>*</modifier></type><name>httpc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>drain</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>httpc</name><operator>-&gt;</operator><name>drain_total</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DEBUGASSERT</name><argument_list>(<argument><expr><name><name>httpc</name><operator>-&gt;</operator><name>drain_total</name></name> <operator>&gt;=</operator> <name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>drain</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>duphandle</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>second</name> <init>= <expr><call><name>curl_easy_duphandle</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>second</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>HTTP</name></name> <modifier>*</modifier></type><name>http</name> <init>= <expr><call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>HTTP</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>http</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>Curl_close</name><argument_list>(<argument><expr><operator>&amp;</operator><name>second</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name><name>second</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>protop</name></name> <operator>=</operator> <name>http</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>http</name><operator>-&gt;</operator><name>header_recvbuf</name></name> <operator>=</operator> <call><name>Curl_add_buffer_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>http</name><operator>-&gt;</operator><name>header_recvbuf</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>http</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>Curl_close</name><argument_list>(<argument><expr><operator>&amp;</operator><name>second</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>Curl_http2_setup_req</name><argument_list>(<argument><expr><name>second</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>second</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>stream_weight</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>stream_weight</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>second</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>push_promise</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>nghttp2_push_promise</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>rv</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>H2BUGF</name><argument_list>(<argument><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"PUSH_PROMISE received, stream %u!\n"</literal></expr></argument>,

<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>promised_stream_id</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>multi</name><operator>-&gt;</operator><name>push_cb</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>HTTP</name></name> <modifier>*</modifier></type><name>stream</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>HTTP</name></name> <modifier>*</modifier></type><name>newstream</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>curl_pushheaders</name></name></type> <name>heads</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CURLMcode</name></type> <name>rc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>http_conn</name></name> <modifier>*</modifier></type><name>httpc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>newhandle</name> <init>= <expr><call><name>duphandle</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>newhandle</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"failed to duplicate handle\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rv</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>heads</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>heads</name><operator>.</operator><name>frame</name></name> <operator>=</operator> <name>frame</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>H2BUGF</name><argument_list>(<argument><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Got PUSH_PROMISE, ask application!\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>stream</name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>protop</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>stream</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Internal NULL stream!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>Curl_close</name><argument_list>(<argument><expr><operator>&amp;</operator><name>newhandle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rv</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>Curl_set_in_callback</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name><name>data</name><operator>-&gt;</operator><name>multi</name><operator>-&gt;</operator><name>push_cb</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>newhandle</name></expr></argument>,

<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>push_headers_used</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>heads</name></expr></argument>,

<argument><expr><name><name>data</name><operator>-&gt;</operator><name>multi</name><operator>-&gt;</operator><name>push_userp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_set_in_callback</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>stream</name><operator>-&gt;</operator><name>push_headers_used</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>push_headers</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>push_headers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>push_headers</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>push_headers_used</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rv</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>http2_stream_free</name><argument_list>(<argument><expr><name><name>newhandle</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>protop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>newhandle</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>protop</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>Curl_close</name><argument_list>(<argument><expr><operator>&amp;</operator><name>newhandle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>newstream</name> <operator>=</operator> <name><name>newhandle</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>protop</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>newstream</name><operator>-&gt;</operator><name>stream_id</name></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>promised_stream_id</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>newhandle</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>maxdownload</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>newhandle</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>size</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>Curl_multi_add_perform</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>multi</name></name></expr></argument>, <argument><expr><name>newhandle</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"failed to add handle to multi\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>http2_stream_free</name><argument_list>(<argument><expr><name><name>newhandle</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>protop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>newhandle</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>protop</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_close</name><argument_list>(<argument><expr><operator>&amp;</operator><name>newhandle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rv</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>httpc</name> <operator>=</operator> <operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>httpc</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>nghttp2_session_set_stream_user_data</name><argument_list>(<argument><expr><name><name>httpc</name><operator>-&gt;</operator><name>h2</name></name></expr></argument>,

<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>promised_stream_id</name></name></expr></argument>,

<argument><expr><name>newhandle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rv</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"failed to set user_data for stream %d\n"</literal></expr></argument>,

<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>promised_stream_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DEBUGASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>H2BUGF</name><argument_list>(<argument><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Got PUSH_PROMISE, ignore it!\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rv</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<label><name>fail</name>:</label>

<return>return <expr><name>rv</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>multi_connchanged</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_multi</name></name> <modifier>*</modifier></type><name>multi</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>multi</name><operator>-&gt;</operator><name>recheckstate</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>on_frame_recv</name><parameter_list>(<parameter><decl><type><name>nghttp2_session</name> <modifier>*</modifier></type><name>session</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>nghttp2_frame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name> <init>= <expr><operator>(</operator>struct <name>connectdata</name> <operator>*</operator><operator>)</operator><name>userp</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>http_conn</name></name> <modifier>*</modifier></type><name>httpc</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>httpc</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data_s</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>HTTP</name></name> <modifier>*</modifier></type><name>stream</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>left</name></decl>, <decl><type ref="prev"/><name>ncopy</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>stream_id</name> <init>= <expr><name><name>frame</name><operator>-&gt;</operator><name>hd</name><operator>.</operator><name>stream_id</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>stream_id</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>frame</name><operator>-&gt;</operator><name>hd</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>NGHTTP2_SETTINGS</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>max_conn</name> <init>= <expr><name><name>httpc</name><operator>-&gt;</operator><name>settings</name><operator>.</operator><name>max_concurrent_streams</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>H2BUGF</name><argument_list>(<argument><expr><call><name>infof</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"Got SETTINGS\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>httpc</name><operator>-&gt;</operator><name>settings</name><operator>.</operator><name>max_concurrent_streams</name></name> <operator>=</operator>

<call><name>nghttp2_session_get_remote_settings</name><argument_list>(

<argument><expr><name>session</name></expr></argument>, <argument><expr><name>NGHTTP2_SETTINGS_MAX_CONCURRENT_STREAMS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>httpc</name><operator>-&gt;</operator><name>settings</name><operator>.</operator><name>enable_push</name></name> <operator>=</operator>

<call><name>nghttp2_session_get_remote_settings</name><argument_list>(

<argument><expr><name>session</name></expr></argument>, <argument><expr><name>NGHTTP2_SETTINGS_ENABLE_PUSH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>H2BUGF</name><argument_list>(<argument><expr><call><name>infof</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"MAX_CONCURRENT_STREAMS == %d\n"</literal></expr></argument>,

<argument><expr><name><name>httpc</name><operator>-&gt;</operator><name>settings</name><operator>.</operator><name>max_concurrent_streams</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>H2BUGF</name><argument_list>(<argument><expr><call><name>infof</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"ENABLE_PUSH == %s\n"</literal></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>httpc</name><operator>-&gt;</operator><name>settings</name><operator>.</operator><name>enable_push</name></name></expr>?</condition><then><expr><literal type="string">"TRUE"</literal></expr></then><else>:<expr><literal type="string">"false"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>max_conn</name> <operator>!=</operator> <name><name>httpc</name><operator>-&gt;</operator><name>settings</name><operator>.</operator><name>max_concurrent_streams</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>,

<argument><expr><literal type="string">"Connection state changed (MAX_CONCURRENT_STREAMS == %u)!\n"</literal></expr></argument>,

<argument><expr><name><name>httpc</name><operator>-&gt;</operator><name>settings</name><operator>.</operator><name>max_concurrent_streams</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>multi_connchanged</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>multi</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>data_s</name> <operator>=</operator> <call><name>nghttp2_session_get_stream_user_data</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>stream_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>data_s</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>H2BUGF</name><argument_list>(<argument><expr><call><name>infof</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>,

<argument><expr><literal type="string">"No Curl_easy associated with stream: %x\n"</literal></expr></argument>,

<argument><expr><name>stream_id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>stream</name> <operator>=</operator> <name><name>data_s</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>protop</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>stream</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>H2BUGF</name><argument_list>(<argument><expr><call><name>infof</name><argument_list>(<argument><expr><name>data_s</name></expr></argument>, <argument><expr><literal type="string">"No proto pointer for stream: %x\n"</literal></expr></argument>,

<argument><expr><name>stream_id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NGHTTP2_ERR_CALLBACK_FAILURE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>H2BUGF</name><argument_list>(<argument><expr><call><name>infof</name><argument_list>(<argument><expr><name>data_s</name></expr></argument>, <argument><expr><literal type="string">"on_frame_recv() header %x stream %x\n"</literal></expr></argument>,

<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>hd</name><operator>.</operator><name>type</name></name></expr></argument>, <argument><expr><name>stream_id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch<condition>(<expr><name><name>frame</name><operator>-&gt;</operator><name>hd</name><operator>.</operator><name>type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>NGHTTP2_DATA</name></expr>:</case>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>stream</name><operator>-&gt;</operator><name>bodystarted</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>nghttp2_submit_rst_stream</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>NGHTTP2_FLAG_NONE</name></expr></argument>,

<argument><expr><name>stream_id</name></expr></argument>, <argument><expr><name>NGHTTP2_PROTOCOL_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>nghttp2_is_fatal</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NGHTTP2_ERR_CALLBACK_FAILURE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>NGHTTP2_HEADERS</name></expr>:</case>

<if_stmt><if>if<condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>bodystarted</name></name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>status_code</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NGHTTP2_ERR_CALLBACK_FAILURE</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>status_code</name></name> <operator>/</operator> <literal type="number">100</literal> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>bodystarted</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>status_code</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_add_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>header_recvbuf</name></name></expr></argument>, <argument><expr><literal type="string">"\r\n"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NGHTTP2_ERR_CALLBACK_FAILURE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>left</name> <operator>=</operator> <name><name>stream</name><operator>-&gt;</operator><name>header_recvbuf</name><operator>-&gt;</operator><name>size_used</name></name> <operator>-</operator> <name><name>stream</name><operator>-&gt;</operator><name>nread_header_recvbuf</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ncopy</name> <operator>=</operator> <call><name>CURLMIN</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><name>left</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>mem</name><index>[<expr><name><name>stream</name><operator>-&gt;</operator><name>memlen</name></name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>header_recvbuf</name><operator>-&gt;</operator><name>buffer</name></name> <operator>+</operator> <name><name>stream</name><operator>-&gt;</operator><name>nread_header_recvbuf</name></name></expr></argument>,

<argument><expr><name>ncopy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>nread_header_recvbuf</name></name> <operator>+=</operator> <name>ncopy</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>H2BUGF</name><argument_list>(<argument><expr><call><name>infof</name><argument_list>(<argument><expr><name>data_s</name></expr></argument>, <argument><expr><literal type="string">"Store %zu bytes headers from stream %u at %p\n"</literal></expr></argument>,

<argument><expr><name>ncopy</name></expr></argument>, <argument><expr><name>stream_id</name></expr></argument>, <argument><expr><name><name>stream</name><operator>-&gt;</operator><name>mem</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>len</name></name> <operator>-=</operator> <name>ncopy</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>memlen</name></name> <operator>+=</operator> <name>ncopy</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>drain_this</name><argument_list>(<argument><expr><name>data_s</name></expr></argument>, <argument><expr><name>httpc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn_s</name> <init>= <expr><operator>(</operator>struct <name>connectdata</name> <operator>*</operator><operator>)</operator><name>userp</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>conn_s</name><operator>-&gt;</operator><name>data</name></name> <operator>!=</operator> <name>data_s</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>Curl_expire</name><argument_list>(<argument><expr><name>data_s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>EXPIRE_RUN_NOW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block>

<break>break;</break>

<case>case <expr><name>NGHTTP2_PUSH_PROMISE</name></expr>:</case>

<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>push_promise</name><argument_list>(<argument><expr><name>data_s</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>frame</name><operator>-&gt;</operator><name>push_promise</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rv</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>nghttp2_submit_rst_stream</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>NGHTTP2_FLAG_NONE</name></expr></argument>,

<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>push_promise</name><operator>.</operator><name>promised_stream_id</name></name></expr></argument>,

<argument><expr><name>NGHTTP2_CANCEL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>nghttp2_is_fatal</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>rv</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>H2BUGF</name><argument_list>(<argument><expr><call><name>infof</name><argument_list>(<argument><expr><name>data_s</name></expr></argument>, <argument><expr><literal type="string">"Got frame type %x for stream %u!\n"</literal></expr></argument>,

<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>hd</name><operator>.</operator><name>type</name></name></expr></argument>, <argument><expr><name>stream_id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>on_data_chunk_recv</name><parameter_list>(<parameter><decl><type><name>nghttp2_session</name> <modifier>*</modifier></type><name>session</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>flags</name></decl></parameter>,

<parameter><decl><type><name>int32_t</name></type> <name>stream_id</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>HTTP</name></name> <modifier>*</modifier></type><name>stream</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data_s</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>nread</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name> <init>= <expr><operator>(</operator>struct <name>connectdata</name> <operator>*</operator><operator>)</operator><name>userp</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>session</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>flags</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>data</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DEBUGASSERT</name><argument_list>(<argument><expr><name>stream_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>data_s</name> <operator>=</operator> <call><name>nghttp2_session_get_stream_user_data</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>stream_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>data_s</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NGHTTP2_ERR_CALLBACK_FAILURE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>stream</name> <operator>=</operator> <name><name>data_s</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>protop</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>stream</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NGHTTP2_ERR_CALLBACK_FAILURE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>nread</name> <operator>=</operator> <call><name>CURLMIN</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>mem</name><index>[<expr><name><name>stream</name><operator>-&gt;</operator><name>memlen</name></name></expr>]</index></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>nread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>len</name></name> <operator>-=</operator> <name>nread</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>memlen</name></name> <operator>+=</operator> <name>nread</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>drain_this</name><argument_list>(<argument><expr><name>data_s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>httpc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name> <operator>!=</operator> <name>data_s</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>Curl_expire</name><argument_list>(<argument><expr><name>data_s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>EXPIRE_RUN_NOW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>H2BUGF</name><argument_list>(<argument><expr><call><name>infof</name><argument_list>(<argument><expr><name>data_s</name></expr></argument>, <argument><expr><literal type="string">"%zu data received for stream %u "</literal>

<literal type="string">"(%zu left in buffer %p, total %zu)\n"</literal></expr></argument>,

<argument><expr><name>nread</name></expr></argument>, <argument><expr><name>stream_id</name></expr></argument>,

<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><name><name>stream</name><operator>-&gt;</operator><name>mem</name></name></expr></argument>,

<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>memlen</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>nread</name> <operator>&lt;</operator> <name>len</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>pausedata</name></name> <operator>=</operator> <name>data</name> <operator>+</operator> <name>nread</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>pauselen</name></name> <operator>=</operator> <name>len</name> <operator>-</operator> <name>nread</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>H2BUGF</name><argument_list>(<argument><expr><call><name>infof</name><argument_list>(<argument><expr><name>data_s</name></expr></argument>, <argument><expr><literal type="string">"NGHTTP2_ERR_PAUSE - %zu bytes out of buffer"</literal>

<literal type="string">", stream %u\n"</literal></expr></argument>,

<argument><expr><name>len</name> <operator>-</operator> <name>nread</name></expr></argument>, <argument><expr><name>stream_id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data_s</name><operator>-&gt;</operator><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>httpc</name><operator>.</operator><name>pause_stream_id</name></name> <operator>=</operator> <name>stream_id</name></expr>;</expr_stmt>

<return>return <expr><name>NGHTTP2_ERR_PAUSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name> <operator>!=</operator> <name>data_s</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data_s</name><operator>-&gt;</operator><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>httpc</name><operator>.</operator><name>pause_stream_id</name></name> <operator>=</operator> <name>stream_id</name></expr>;</expr_stmt>

<return>return <expr><name>NGHTTP2_ERR_PAUSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>on_stream_close</name><parameter_list>(<parameter><decl><type><name>nghttp2_session</name> <modifier>*</modifier></type><name>session</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>stream_id</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>error_code</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data_s</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>HTTP</name></name> <modifier>*</modifier></type><name>stream</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name> <init>= <expr><operator>(</operator>struct <name>connectdata</name> <operator>*</operator><operator>)</operator><name>userp</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rv</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>session</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>stream_id</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>stream_id</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>http_conn</name></name> <modifier>*</modifier></type><name>httpc</name></decl>;</decl_stmt>

<expr_stmt><expr><name>data_s</name> <operator>=</operator> <call><name>nghttp2_session_get_stream_user_data</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>stream_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>data_s</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>H2BUGF</name><argument_list>(<argument><expr><call><name>infof</name><argument_list>(<argument><expr><name>data_s</name></expr></argument>, <argument><expr><literal type="string">"on_stream_close(), %s (err %d), stream %u\n"</literal></expr></argument>,

<argument><expr><call><name>nghttp2_strerror</name><argument_list>(<argument><expr><name>error_code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>error_code</name></expr></argument>, <argument><expr><name>stream_id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>stream</name> <operator>=</operator> <name><name>data_s</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>protop</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>stream</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NGHTTP2_ERR_CALLBACK_FAILURE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>closed</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>httpc</name> <operator>=</operator> <operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>httpc</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>drain_this</name><argument_list>(<argument><expr><name>data_s</name></expr></argument>, <argument><expr><name>httpc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_expire</name><argument_list>(<argument><expr><name>data_s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>EXPIRE_RUN_NOW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>httpc</name><operator>-&gt;</operator><name>error_code</name></name> <operator>=</operator> <name>error_code</name></expr>;</expr_stmt>

<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>nghttp2_session_set_stream_user_data</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>stream_id</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rv</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data_s</name></expr></argument>, <argument><expr><literal type="string">"http/2: failed to clear user_data for stream %d!\n"</literal></expr></argument>,

<argument><expr><name>stream_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DEBUGASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>stream_id</name> <operator>==</operator> <name><name>httpc</name><operator>-&gt;</operator><name>pause_stream_id</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>H2BUGF</name><argument_list>(<argument><expr><call><name>infof</name><argument_list>(<argument><expr><name>data_s</name></expr></argument>, <argument><expr><literal type="string">"Stopped the pause stream!\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>httpc</name><operator>-&gt;</operator><name>pause_stream_id</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>H2BUGF</name><argument_list>(<argument><expr><call><name>infof</name><argument_list>(<argument><expr><name>data_s</name></expr></argument>, <argument><expr><literal type="string">"Removed stream %u hash!\n"</literal></expr></argument>, <argument><expr><name>stream_id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>stream_id</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>on_begin_headers</name><parameter_list>(<parameter><decl><type><name>nghttp2_session</name> <modifier>*</modifier></type><name>session</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>nghttp2_frame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>HTTP</name></name> <modifier>*</modifier></type><name>stream</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data_s</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>userp</name></expr>;</expr_stmt>

<expr_stmt><expr><name>data_s</name> <operator>=</operator> <call><name>nghttp2_session_get_stream_user_data</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>hd</name><operator>.</operator><name>stream_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>data_s</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>H2BUGF</name><argument_list>(<argument><expr><call><name>infof</name><argument_list>(<argument><expr><name>data_s</name></expr></argument>, <argument><expr><literal type="string">"on_begin_headers() was called\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>frame</name><operator>-&gt;</operator><name>hd</name><operator>.</operator><name>type</name></name> <operator>!=</operator> <name>NGHTTP2_HEADERS</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>stream</name> <operator>=</operator> <name><name>data_s</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>protop</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>stream</name> <operator>||</operator> <operator>!</operator><name><name>stream</name><operator>-&gt;</operator><name>bodystarted</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>stream</name><operator>-&gt;</operator><name>trailer_recvbuf</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>trailer_recvbuf</name></name> <operator>=</operator> <call><name>Curl_add_buffer_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>stream</name><operator>-&gt;</operator><name>trailer_recvbuf</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NGHTTP2_ERR_TEMPORAL_CALLBACK_FAILURE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_status_code</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>len</name> <operator>!=</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name>c</name> <init>= <expr><name><name>value</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>c</name> <argument_list type="generic">&lt; <argument><expr><literal type="char">'0'</literal> <operator>||</operator> <name>c</name></expr></argument> &gt;</argument_list></name> <literal type="char">'9'</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>res</name> <operator>*=</operator> <literal type="number">10</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>+=</operator> <name>c</name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>on_header</name><parameter_list>(<parameter><decl><type><name>nghttp2_session</name> <modifier>*</modifier></type><name>session</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>nghttp2_frame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>namelen</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>valuelen</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name></type> <name>flags</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>HTTP</name></name> <modifier>*</modifier></type><name>stream</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data_s</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>stream_id</name> <init>= <expr><name><name>frame</name><operator>-&gt;</operator><name>hd</name><operator>.</operator><name>stream_id</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name> <init>= <expr><operator>(</operator>struct <name>connectdata</name> <operator>*</operator><operator>)</operator><name>userp</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>flags</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DEBUGASSERT</name><argument_list>(<argument><expr><name>stream_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>data_s</name> <operator>=</operator> <call><name>nghttp2_session_get_stream_user_data</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>stream_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>data_s</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NGHTTP2_ERR_CALLBACK_FAILURE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>stream</name> <operator>=</operator> <name><name>data_s</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>protop</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>stream</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data_s</name></expr></argument>, <argument><expr><literal type="string">"Internal NULL stream! 5\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NGHTTP2_ERR_CALLBACK_FAILURE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>frame</name><operator>-&gt;</operator><name>hd</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>NGHTTP2_PUSH_PROMISE</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>h</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">":authority"</literal></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>check</name> <init>= <expr><call><name>aprintf</name><argument_list>(<argument><expr><literal type="string">"%s:%d"</literal></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>host</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>remote_port</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>check</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NGHTTP2_ERR_CALLBACK_FAILURE</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>Curl_strcasecompare</name><argument_list>(<argument><expr><name>check</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>value</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<operator>(</operator><operator>(</operator><name><name>conn</name><operator>-&gt;</operator><name>remote_port</name></name> <operator>!=</operator> <name><name>conn</name><operator>-&gt;</operator><name>given</name><operator>-&gt;</operator><name>defport</name></name><operator>)</operator> <operator>||</operator>

<operator>!</operator><call><name>Curl_strcasecompare</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>host</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>value</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>nghttp2_submit_rst_stream</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>NGHTTP2_FLAG_NONE</name></expr></argument>,

<argument><expr><name>stream_id</name></expr></argument>, <argument><expr><name>NGHTTP2_PROTOCOL_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <name>NGHTTP2_ERR_CALLBACK_FAILURE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>rc</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>stream</name><operator>-&gt;</operator><name>push_headers</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>push_headers_alloc</name></name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>push_headers</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>push_headers_alloc</name></name> <operator>*</operator>

<sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>stream</name><operator>-&gt;</operator><name>push_headers</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NGHTTP2_ERR_TEMPORAL_CALLBACK_FAILURE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>push_headers_used</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>push_headers_used</name></name> <operator>==</operator>

<name><name>stream</name><operator>-&gt;</operator><name>push_headers_alloc</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>headp</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>push_headers_alloc</name></name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>headp</name> <operator>=</operator> <call><name>Curl_saferealloc</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>push_headers</name></name></expr></argument>,

<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>push_headers_alloc</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>headp</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>push_headers</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><name>NGHTTP2_ERR_TEMPORAL_CALLBACK_FAILURE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>push_headers</name></name> <operator>=</operator> <name>headp</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>h</name> <operator>=</operator> <call><name>aprintf</name><argument_list>(<argument><expr><literal type="string">"%s:%s"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>h</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>push_headers</name><index>[<expr><name><name>stream</name><operator>-&gt;</operator><name>push_headers_used</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>h</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>bodystarted</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>n</name> <init>= <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>namelen</name> <operator>+</operator> <name>valuelen</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>H2BUGF</name><argument_list>(<argument><expr><call><name>infof</name><argument_list>(<argument><expr><name>data_s</name></expr></argument>, <argument><expr><literal type="string">"h2 trailer: %.*s: %.*s\n"</literal></expr></argument>, <argument><expr><name>namelen</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>valuelen</name></expr></argument>,

<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_add_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>trailer_recvbuf</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NGHTTP2_ERR_CALLBACK_FAILURE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_add_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>trailer_recvbuf</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>namelen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NGHTTP2_ERR_CALLBACK_FAILURE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_add_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>trailer_recvbuf</name></name></expr></argument>, <argument><expr><literal type="string">": "</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NGHTTP2_ERR_CALLBACK_FAILURE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_add_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>trailer_recvbuf</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>valuelen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NGHTTP2_ERR_CALLBACK_FAILURE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_add_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>trailer_recvbuf</name></name></expr></argument>, <argument><expr><literal type="string">"\r\n\0"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NGHTTP2_ERR_CALLBACK_FAILURE</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>namelen</name> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><literal type="string">":status"</literal></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator>

<call><name>memcmp</name><argument_list>(<argument><expr><literal type="string">":status"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>namelen</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>status_code</name></name> <operator>=</operator> <call><name>decode_status_code</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>valuelen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DEBUGASSERT</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>status_code</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_add_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>header_recvbuf</name></name></expr></argument>, <argument><expr><literal type="string">"HTTP/2 "</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NGHTTP2_ERR_CALLBACK_FAILURE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_add_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>header_recvbuf</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>valuelen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NGHTTP2_ERR_CALLBACK_FAILURE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_add_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>header_recvbuf</name></name></expr></argument>, <argument><expr><literal type="string">" \r\n"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NGHTTP2_ERR_CALLBACK_FAILURE</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name> <operator>!=</operator> <name>data_s</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>Curl_expire</name><argument_list>(<argument><expr><name>data_s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>EXPIRE_RUN_NOW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>H2BUGF</name><argument_list>(<argument><expr><call><name>infof</name><argument_list>(<argument><expr><name>data_s</name></expr></argument>, <argument><expr><literal type="string">"h2 status: HTTP/2 %03d (easy %p)\n"</literal></expr></argument>,

<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>status_code</name></name></expr></argument>, <argument><expr><name>data_s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_add_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>header_recvbuf</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>namelen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NGHTTP2_ERR_CALLBACK_FAILURE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_add_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>header_recvbuf</name></name></expr></argument>, <argument><expr><literal type="string">": "</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NGHTTP2_ERR_CALLBACK_FAILURE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_add_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>header_recvbuf</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>valuelen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NGHTTP2_ERR_CALLBACK_FAILURE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_add_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>header_recvbuf</name></name></expr></argument>, <argument><expr><literal type="string">"\r\n"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NGHTTP2_ERR_CALLBACK_FAILURE</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name> <operator>!=</operator> <name>data_s</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>Curl_expire</name><argument_list>(<argument><expr><name>data_s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>EXPIRE_RUN_NOW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>H2BUGF</name><argument_list>(<argument><expr><call><name>infof</name><argument_list>(<argument><expr><name>data_s</name></expr></argument>, <argument><expr><literal type="string">"h2 header: %.*s: %.*s\n"</literal></expr></argument>, <argument><expr><name>namelen</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>valuelen</name></expr></argument>,

<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return> 

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ssize_t</name></type> <name>data_source_read_callback</name><parameter_list>(<parameter><decl><type><name>nghttp2_session</name> <modifier>*</modifier></type><name>session</name></decl></parameter>,

<parameter><decl><type><name>int32_t</name></type> <name>stream_id</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>length</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>data_flags</name></decl></parameter>,

<parameter><decl><type><name>nghttp2_data_source</name> <modifier>*</modifier></type><name>source</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data_s</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>HTTP</name></name> <modifier>*</modifier></type><name>stream</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>nread</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>source</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>userp</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>stream_id</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>data_s</name> <operator>=</operator> <call><name>nghttp2_session_get_stream_user_data</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>stream_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>data_s</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NGHTTP2_ERR_CALLBACK_FAILURE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>stream</name> <operator>=</operator> <name><name>data_s</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>protop</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>stream</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NGHTTP2_ERR_CALLBACK_FAILURE</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><name>NGHTTP2_ERR_INVALID_ARGUMENT</name></expr>;</return></block_content></block></else></if_stmt>

<expr_stmt><expr><name>nread</name> <operator>=</operator> <call><name>CURLMIN</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>upload_len</name></name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>nread</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>stream</name><operator>-&gt;</operator><name>upload_mem</name></name></expr></argument>, <argument><expr><name>nread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>upload_mem</name></name> <operator>+=</operator> <name>nread</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>upload_len</name></name> <operator>-=</operator> <name>nread</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>data_s</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>infilesize</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>upload_left</name></name> <operator>-=</operator> <name>nread</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>upload_left</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>data_flags</name> <operator>=</operator> <name>NGHTTP2_DATA_FLAG_EOF</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>(<expr><name>nread</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NGHTTP2_ERR_DEFERRED</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>H2BUGF</name><argument_list>(<argument><expr><call><name>infof</name><argument_list>(<argument><expr><name>data_s</name></expr></argument>, <argument><expr><literal type="string">"data_source_read_callback: "</literal>

<literal type="string">"returns %zu bytes stream %u\n"</literal></expr></argument>,

<argument><expr><name>nread</name></expr></argument>, <argument><expr><name>stream_id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>nread</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_VERBOSE_STRINGS</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>int</name></type> <name>error_callback</name><parameter_list>(<parameter><decl><type><name>nghttp2_session</name> <modifier>*</modifier></type><name>session</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name> <init>= <expr><operator>(</operator>struct <name>connectdata</name> <operator>*</operator><operator>)</operator><name>userp</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>session</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"http2 error: %.*s\n"</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type> <name>populate_settings</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>http_conn</name></name> <modifier>*</modifier></type><name>httpc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>nghttp2_settings_entry</name> <modifier>*</modifier></type><name>iv</name> <init>= <expr><name><name>httpc</name><operator>-&gt;</operator><name>local_settings</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DEBUGASSERT</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>iv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>settings_id</name> <operator>=</operator> <name>NGHTTP2_SETTINGS_MAX_CONCURRENT_STREAMS</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>iv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <call><name>Curl_multi_max_concurrent_streams</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>multi</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>iv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>settings_id</name> <operator>=</operator> <name>NGHTTP2_SETTINGS_INITIAL_WINDOW_SIZE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>iv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <name>HTTP2_HUGE_WINDOW_SIZE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>iv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>settings_id</name> <operator>=</operator> <name>NGHTTP2_SETTINGS_ENABLE_PUSH</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>iv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>multi</name><operator>-&gt;</operator><name>push_cb</name></name> <operator>!=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>httpc</name><operator>-&gt;</operator><name>local_settings_num</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>Curl_http2_done</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>premature</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>HTTP</name></name> <modifier>*</modifier></type><name>http</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>protop</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>http_conn</name></name> <modifier>*</modifier></type><name>httpc</name> <init>= <expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>httpc</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>http</name><operator>-&gt;</operator><name>header_recvbuf</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>Curl_add_buffer_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>http</name><operator>-&gt;</operator><name>header_recvbuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_add_buffer_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>http</name><operator>-&gt;</operator><name>trailer_recvbuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>http</name><operator>-&gt;</operator><name>push_headers</name></name></expr>)</condition> <block>{<block_content>

<for>for<control>(<init>;</init> <condition><expr><name><name>http</name><operator>-&gt;</operator><name>push_headers_used</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>--</operator><name><name>http</name><operator>-&gt;</operator><name>push_headers_used</name></name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>http</name><operator>-&gt;</operator><name>push_headers</name><index>[<expr><name><name>http</name><operator>-&gt;</operator><name>push_headers_used</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>http</name><operator>-&gt;</operator><name>push_headers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>http</name><operator>-&gt;</operator><name>push_headers</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>httpc</name><operator>-&gt;</operator><name>h2</name></name></expr>)</condition><block type="pseudo"><block_content> 

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>premature</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>nghttp2_submit_rst_stream</name><argument_list>(<argument><expr><name><name>httpc</name><operator>-&gt;</operator><name>h2</name></name></expr></argument>, <argument><expr><name>NGHTTP2_FLAG_NONE</name></expr></argument>,

<argument><expr><name><name>http</name><operator>-&gt;</operator><name>stream_id</name></name></expr></argument>, <argument><expr><name>NGHTTP2_STREAM_CLOSED</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>nghttp2_session_send</name><argument_list>(<argument><expr><name><name>httpc</name><operator>-&gt;</operator><name>h2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>http</name><operator>-&gt;</operator><name>stream_id</name></name> <operator>==</operator> <name><name>httpc</name><operator>-&gt;</operator><name>pause_stream_id</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"stopped the pause stream!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>httpc</name><operator>-&gt;</operator><name>pause_stream_id</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>drain</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>drained_transfer</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>httpc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>http</name><operator>-&gt;</operator><name>stream_id</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>rv</name> <init>= <expr><call><name>nghttp2_session_set_stream_user_data</name><argument_list>(<argument><expr><name><name>httpc</name><operator>-&gt;</operator><name>h2</name></name></expr></argument>,

<argument><expr><name><name>http</name><operator>-&gt;</operator><name>stream_id</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>rv</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"http/2: failed to clear user_data for stream %d!\n"</literal></expr></argument>,

<argument><expr><name><name>http</name><operator>-&gt;</operator><name>stream_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DEBUGASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>http</name><operator>-&gt;</operator><name>stream_id</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>http2_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>httpc</name><operator>.</operator><name>h2</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>nghttp2_session_callbacks</name> <modifier>*</modifier></type><name>callbacks</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>httpc</name><operator>.</operator><name>inbuf</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>H2_BUFSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>httpc</name><operator>.</operator><name>inbuf</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>nghttp2_session_callbacks_new</name><argument_list>(<argument><expr><operator>&amp;</operator><name>callbacks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"Couldn't initialize nghttp2 callbacks!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>nghttp2_session_callbacks_set_send_callback</name><argument_list>(<argument><expr><name>callbacks</name></expr></argument>, <argument><expr><name>send_callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>nghttp2_session_callbacks_set_on_frame_recv_callback</name>

<argument_list>(<argument><expr><name>callbacks</name></expr></argument>, <argument><expr><name>on_frame_recv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>nghttp2_session_callbacks_set_on_data_chunk_recv_callback</name>

<argument_list>(<argument><expr><name>callbacks</name></expr></argument>, <argument><expr><name>on_data_chunk_recv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>nghttp2_session_callbacks_set_on_stream_close_callback</name>

<argument_list>(<argument><expr><name>callbacks</name></expr></argument>, <argument><expr><name>on_stream_close</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>nghttp2_session_callbacks_set_on_begin_headers_callback</name>

<argument_list>(<argument><expr><name>callbacks</name></expr></argument>, <argument><expr><name>on_begin_headers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>nghttp2_session_callbacks_set_on_header_callback</name><argument_list>(<argument><expr><name>callbacks</name></expr></argument>, <argument><expr><name>on_header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>nghttp2_session_callbacks_set_error_callback</name><argument_list>(<argument><expr><name>callbacks</name></expr></argument>, <argument><expr><name>error_callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>nghttp2_session_client_new</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>httpc</name><operator>.</operator><name>h2</name></name></expr></argument>, <argument><expr><name>callbacks</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>nghttp2_session_callbacks_del</name><argument_list>(<argument><expr><name>callbacks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"Couldn't initialize nghttp2!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return> 

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>CURLcode</name></type> <name>Curl_http2_request_upgrade</name><parameter_list>(<parameter><decl><type><name>Curl_send_buffer</name> <modifier>*</modifier></type><name>req</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>binlen</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>base64</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>blen</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>SingleRequest</name></name> <modifier>*</modifier></type><name>k</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>req</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>binsettings</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>httpc</name><operator>.</operator><name>binsettings</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>http_conn</name></name> <modifier>*</modifier></type><name>httpc</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>httpc</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>populate_settings</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>httpc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>binlen</name> <operator>=</operator> <call><name>nghttp2_pack_settings_payload</name><argument_list>(<argument><expr><name>binsettings</name></expr></argument>, <argument><expr><name>H2_BINSETTINGS_LEN</name></expr></argument>,

<argument><expr><name><name>httpc</name><operator>-&gt;</operator><name>local_settings</name></name></expr></argument>,

<argument><expr><name><name>httpc</name><operator>-&gt;</operator><name>local_settings_num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>binlen</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"nghttp2 unexpectedly failed on pack_settings_payload"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_add_buffer_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_FAILED_INIT</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>httpc</name><operator>.</operator><name>binlen</name></name> <operator>=</operator> <name>binlen</name></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_base64url_encode</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>binsettings</name></expr></argument>, <argument><expr><name>binlen</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>base64</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>blen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>Curl_add_buffer_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_add_bufferf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>req</name></expr></argument>,

<argument><expr><literal type="string">"Connection: Upgrade, HTTP2-Settings\r\n"</literal>

<literal type="string">"Upgrade: %s\r\n"</literal>

<literal type="string">"HTTP2-Settings: %s\r\n"</literal></expr></argument>,

<argument><expr><name>NGHTTP2_CLEARTEXT_PROTO_VERSION_ID</name></expr></argument>, <argument><expr><name>base64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>base64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>k</name><operator>-&gt;</operator><name>upgr101</name></name> <operator>=</operator> <name>UPGR101_REQUESTED</name></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>should_close_session</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>http_conn</name></name> <modifier>*</modifier></type><name>httpc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>httpc</name><operator>-&gt;</operator><name>drain_total</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>nghttp2_session_want_read</name><argument_list>(<argument><expr><name><name>httpc</name><operator>-&gt;</operator><name>h2</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<operator>!</operator><call><name>nghttp2_session_want_write</name><argument_list>(<argument><expr><name><name>httpc</name><operator>-&gt;</operator><name>h2</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>h2_process_pending_input</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>http_conn</name></name> <modifier>*</modifier></type><name>httpc</name></decl></parameter>,

<parameter><decl><type><name>CURLcode</name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>nread</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>inbuf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>rv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>nread</name> <operator>=</operator> <name><name>httpc</name><operator>-&gt;</operator><name>inbuflen</name></name> <operator>-</operator> <name><name>httpc</name><operator>-&gt;</operator><name>nread_inbuf</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>inbuf</name> <operator>=</operator> <name><name>httpc</name><operator>-&gt;</operator><name>inbuf</name></name> <operator>+</operator> <name><name>httpc</name><operator>-&gt;</operator><name>nread_inbuf</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>nghttp2_session_mem_recv</name><argument_list>(<argument><expr><name><name>httpc</name><operator>-&gt;</operator><name>h2</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>)</operator><name>inbuf</name></expr></argument>, <argument><expr><name>nread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rv</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>,

<argument><expr><literal type="string">"h2_process_pending_input: nghttp2_session_mem_recv() returned "</literal>

<literal type="string">"%zd:%s\n"</literal></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><call><name>nghttp2_strerror</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>rv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>err</name> <operator>=</operator> <name>CURLE_RECV_ERROR</name></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>nread</name> <operator>==</operator> <name>rv</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>H2BUGF</name><argument_list>(<argument><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>,

<argument><expr><literal type="string">"h2_process_pending_input: All data in connection buffer "</literal>

<literal type="string">"processed\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>httpc</name><operator>-&gt;</operator><name>inbuflen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>httpc</name><operator>-&gt;</operator><name>nread_inbuf</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name><name>httpc</name><operator>-&gt;</operator><name>nread_inbuf</name></name> <operator>+=</operator> <name>rv</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>H2BUGF</name><argument_list>(<argument><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>,

<argument><expr><literal type="string">"h2_process_pending_input: %zu bytes left in connection "</literal>

<literal type="string">"buffer\n"</literal></expr></argument>,

<argument><expr><name><name>httpc</name><operator>-&gt;</operator><name>inbuflen</name></name> <operator>-</operator> <name><name>httpc</name><operator>-&gt;</operator><name>nread_inbuf</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>h2_session_send</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>httpc</name><operator>-&gt;</operator><name>h2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rv</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>err</name> <operator>=</operator> <name>CURLE_SEND_ERROR</name></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>should_close_session</name><argument_list>(<argument><expr><name>httpc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>H2BUGF</name><argument_list>(<argument><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>,

<argument><expr><literal type="string">"h2_process_pending_input: nothing to do in this session\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>httpc</name><operator>-&gt;</operator><name>error_code</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>err</name> <operator>=</operator> <name>CURLE_HTTP2</name></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>connclose</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><literal type="string">"GOAWAY received"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>err</name> <operator>=</operator> <name>CURLE_OK</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>CURLcode</name></type> <name>Curl_http2_done_sending</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>conn</name><operator>-&gt;</operator><name>handler</name></name> <operator>==</operator> <operator>&amp;</operator><name>Curl_handler_http2_ssl</name><operator>)</operator> <operator>||</operator>

<operator>(</operator><name><name>conn</name><operator>-&gt;</operator><name>handler</name></name> <operator>==</operator> <operator>&amp;</operator><name>Curl_handler_http2</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>HTTP</name></name> <modifier>*</modifier></type><name>stream</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>protop</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>upload_left</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>http_conn</name></name> <modifier>*</modifier></type><name>httpc</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>httpc</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>nghttp2_session</name> <modifier>*</modifier></type><name>h2</name> <init>= <expr><name><name>httpc</name><operator>-&gt;</operator><name>h2</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>upload_left</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>nghttp2_session_resume_data</name><argument_list>(<argument><expr><name>h2</name></expr></argument>, <argument><expr><name><name>stream</name><operator>-&gt;</operator><name>stream_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>h2_process_pending_input</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>httpc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ssize_t</name></type> <name>http2_handle_stream_close</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>HTTP</name></name> <modifier>*</modifier></type><name>stream</name></decl></parameter>, <parameter><decl><type><name>CURLcode</name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>trailer_pos</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>trailer_end</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>http_conn</name></name> <modifier>*</modifier></type><name>httpc</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>httpc</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>httpc</name><operator>-&gt;</operator><name>pause_stream_id</name></name> <operator>==</operator> <name><name>stream</name><operator>-&gt;</operator><name>stream_id</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>httpc</name><operator>-&gt;</operator><name>pause_stream_id</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>drained_transfer</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>httpc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>httpc</name><operator>-&gt;</operator><name>pause_stream_id</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>h2_process_pending_input</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>httpc</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>DEBUGASSERT</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>drain</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>closed</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>httpc</name><operator>-&gt;</operator><name>error_code</name></name> <operator>==</operator> <name>NGHTTP2_REFUSED_STREAM</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>H2BUGF</name><argument_list>(<argument><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"REFUSED_STREAM (%d), try again on a new connection!\n"</literal></expr></argument>,

<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>stream_id</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>connclose</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><literal type="string">"REFUSED_STREAM"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>refused_stream</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>err</name> <operator>=</operator> <name>CURLE_RECV_ERROR</name></expr>;</expr_stmt> 

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name><name>httpc</name><operator>-&gt;</operator><name>error_code</name></name> <operator>!=</operator> <name>NGHTTP2_NO_ERROR</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"HTTP/2 stream %d was not closed cleanly: %s (err %u)"</literal></expr></argument>,

<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>stream_id</name></name></expr></argument>, <argument><expr><call><name>nghttp2_strerror</name><argument_list>(<argument><expr><name><name>httpc</name><operator>-&gt;</operator><name>error_code</name></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>httpc</name><operator>-&gt;</operator><name>error_code</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>err</name> <operator>=</operator> <name>CURLE_HTTP2_STREAM</name></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>stream</name><operator>-&gt;</operator><name>bodystarted</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"HTTP/2 stream %d was closed cleanly, but before getting "</literal>

<literal type="string">" all response header fields, treated as error"</literal></expr></argument>,

<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>stream_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>err</name> <operator>=</operator> <name>CURLE_HTTP2_STREAM</name></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>trailer_recvbuf</name></name> <operator>&amp;&amp;</operator> <name><name>stream</name><operator>-&gt;</operator><name>trailer_recvbuf</name><operator>-&gt;</operator><name>buffer</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>trailer_pos</name> <operator>=</operator> <name><name>stream</name><operator>-&gt;</operator><name>trailer_recvbuf</name><operator>-&gt;</operator><name>buffer</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>trailer_end</name> <operator>=</operator> <name>trailer_pos</name> <operator>+</operator> <name><name>stream</name><operator>-&gt;</operator><name>trailer_recvbuf</name><operator>-&gt;</operator><name>size_used</name></name></expr>;</expr_stmt>

<for>for<control>(<init>;</init> <condition><expr><name>trailer_pos</name> <operator>&lt;</operator> <name>trailer_end</name></expr>;</condition><incr/>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>n</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><name>trailer_pos</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>trailer_pos</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_client_write</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>CLIENTWRITE_HEADER</name></expr></argument>, <argument><expr><name>trailer_pos</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>err</name> <operator>=</operator> <name>result</name></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>trailer_pos</name> <operator>+=</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>close_handled</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>H2BUGF</name><argument_list>(<argument><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"http2_recv returns 0, http2_handle_stream_close\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>h2_pri_spec</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><name>nghttp2_priority_spec</name> <modifier>*</modifier></type><name>pri_spec</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>HTTP</name></name> <modifier>*</modifier></type><name>depstream</name> <init>= <expr><operator>(</operator><ternary><condition><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>stream_depends_on</name></name></expr>?</condition><then>

<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>stream_depends_on</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>protop</name></name></expr></then><else>:<expr><name>NULL</name></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>depstream_id</name> <init>= <expr><ternary><condition><expr><name>depstream</name></expr>?</condition><then> <expr><name><name>depstream</name><operator>-&gt;</operator><name>stream_id</name></name></expr></then><else>:<expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>nghttp2_priority_spec_init</name><argument_list>(<argument><expr><name>pri_spec</name></expr></argument>, <argument><expr><name>depstream_id</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>stream_weight</name></name></expr></argument>,

<argument><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>stream_depends_e</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>stream_weight</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>stream_weight</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>stream_depends_e</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>stream_depends_e</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>stream_depends_on</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>stream_depends_on</name></name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>h2_session_send</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><name>nghttp2_session</name> <modifier>*</modifier></type><name>h2</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>HTTP</name></name> <modifier>*</modifier></type><name>stream</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>protop</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>stream_weight</name></name> <operator>!=</operator> <name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>stream_weight</name></name><operator>)</operator> <operator>||</operator>

<operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>stream_depends_e</name></name> <operator>!=</operator> <name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>stream_depends_e</name></name><operator>)</operator> <operator>||</operator>

<operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>stream_depends_on</name></name> <operator>!=</operator> <name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>stream_depends_on</name></name><operator>)</operator></expr> )</condition> <block>{<block_content>

<decl_stmt><decl><type><name>nghttp2_priority_spec</name></type> <name>pri_spec</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rv</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>h2_pri_spec</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pri_spec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>H2BUGF</name><argument_list>(<argument><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Queuing PRIORITY on stream %u (easy %p)\n"</literal></expr></argument>,

<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>stream_id</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DEBUGASSERT</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>stream_id</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>nghttp2_submit_priority</name><argument_list>(<argument><expr><name>h2</name></expr></argument>, <argument><expr><name>NGHTTP2_FLAG_NONE</name></expr></argument>, <argument><expr><name><name>stream</name><operator>-&gt;</operator><name>stream_id</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>pri_spec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rv</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>rv</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>nghttp2_session_send</name><argument_list>(<argument><expr><name>h2</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ssize_t</name></type> <name>http2_recv</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sockindex</name></decl></parameter>,

<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>mem</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>CURLcode</name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>rv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>nread</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>http_conn</name></name> <modifier>*</modifier></type><name>httpc</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>httpc</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>HTTP</name></name> <modifier>*</modifier></type><name>stream</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>protop</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>sockindex</name></expr>;</expr_stmt> 

<if_stmt><if>if<condition>(<expr><call><name>should_close_session</name><argument_list>(<argument><expr><name>httpc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>H2BUGF</name><argument_list>(<argument><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>,

<argument><expr><literal type="string">"http2_recv: nothing to do in this session\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>close</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>err</name> <operator>=</operator> <name>CURLE_OK</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>err</name> <operator>=</operator> <name>CURLE_HTTP2</name></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>upload_mem</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>upload_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>bodystarted</name></name> <operator>&amp;&amp;</operator>

<name><name>stream</name><operator>-&gt;</operator><name>nread_header_recvbuf</name></name> <operator>&lt;</operator> <name><name>stream</name><operator>-&gt;</operator><name>header_recvbuf</name><operator>-&gt;</operator><name>size_used</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>left</name> <init>=

<expr><name><name>stream</name><operator>-&gt;</operator><name>header_recvbuf</name><operator>-&gt;</operator><name>size_used</name></name> <operator>-</operator> <name><name>stream</name><operator>-&gt;</operator><name>nread_header_recvbuf</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>ncopy</name> <init>= <expr><call><name>CURLMIN</name><argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><name>left</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>mem</name></expr></argument>, <argument><expr><name><name>stream</name><operator>-&gt;</operator><name>header_recvbuf</name><operator>-&gt;</operator><name>buffer</name></name> <operator>+</operator> <name><name>stream</name><operator>-&gt;</operator><name>nread_header_recvbuf</name></name></expr></argument>,

<argument><expr><name>ncopy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>nread_header_recvbuf</name></name> <operator>+=</operator> <name>ncopy</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>H2BUGF</name><argument_list>(<argument><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"http2_recv: Got %d bytes from header_recvbuf\n"</literal></expr></argument>,

<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>ncopy</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ncopy</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>H2BUGF</name><argument_list>(<argument><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"http2_recv: easy %p (stream %u) win %u/%u\n"</literal></expr></argument>,

<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>stream</name><operator>-&gt;</operator><name>stream_id</name></name></expr></argument>,

<argument><expr><call><name>nghttp2_session_get_local_window_size</name><argument_list>(<argument><expr><name><name>httpc</name><operator>-&gt;</operator><name>h2</name></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>nghttp2_session_get_stream_local_window_size</name><argument_list>(<argument><expr><name><name>httpc</name><operator>-&gt;</operator><name>h2</name></name></expr></argument>,

<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>stream_id</name></name></expr></argument>)</argument_list></call></expr></argument>

)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>drain</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>stream</name><operator>-&gt;</operator><name>memlen</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>H2BUGF</name><argument_list>(<argument><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"http2_recv: DRAIN %zu bytes stream %u!! (%p =&gt; %p)\n"</literal></expr></argument>,

<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>memlen</name></name></expr></argument>, <argument><expr><name><name>stream</name><operator>-&gt;</operator><name>stream_id</name></name></expr></argument>,

<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>mem</name></name></expr></argument>, <argument><expr><name>mem</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>mem</name> <operator>!=</operator> <name><name>stream</name><operator>-&gt;</operator><name>mem</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>mem</name></expr></argument>, <argument><expr><name><name>stream</name><operator>-&gt;</operator><name>mem</name></name></expr></argument>, <argument><expr><name><name>stream</name><operator>-&gt;</operator><name>memlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name>len</name> <operator>-</operator> <name><name>stream</name><operator>-&gt;</operator><name>memlen</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>mem</name></name> <operator>=</operator> <name>mem</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>httpc</name><operator>-&gt;</operator><name>pause_stream_id</name></name> <operator>==</operator> <name><name>stream</name><operator>-&gt;</operator><name>stream_id</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>stream</name><operator>-&gt;</operator><name>pausedata</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>httpc</name><operator>-&gt;</operator><name>pause_stream_id</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>h2_process_pending_input</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>httpc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>result</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>err</name> <operator>=</operator> <name>result</name></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>pausedata</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>DEBUGASSERT</name><argument_list>(<argument><expr><name><name>httpc</name><operator>-&gt;</operator><name>pause_stream_id</name></name> <operator>==</operator> <name><name>stream</name><operator>-&gt;</operator><name>stream_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>nread</name> <operator>=</operator> <call><name>CURLMIN</name><argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>stream</name><operator>-&gt;</operator><name>pauselen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>mem</name></expr></argument>, <argument><expr><name><name>stream</name><operator>-&gt;</operator><name>pausedata</name></name></expr></argument>, <argument><expr><name>nread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>pausedata</name></name> <operator>+=</operator> <name>nread</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>pauselen</name></name> <operator>-=</operator> <name>nread</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>pauselen</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>H2BUGF</name><argument_list>(<argument><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Unpaused by stream %u\n"</literal></expr></argument>, <argument><expr><name><name>stream</name><operator>-&gt;</operator><name>stream_id</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DEBUGASSERT</name><argument_list>(<argument><expr><name><name>httpc</name><operator>-&gt;</operator><name>pause_stream_id</name></name> <operator>==</operator> <name><name>stream</name><operator>-&gt;</operator><name>stream_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>httpc</name><operator>-&gt;</operator><name>pause_stream_id</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>pausedata</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>pauselen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>h2_process_pending_input</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>httpc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>result</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>err</name> <operator>=</operator> <name>result</name></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>H2BUGF</name><argument_list>(<argument><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"http2_recv: returns unpaused %zd bytes on stream %u\n"</literal></expr></argument>,

<argument><expr><name>nread</name></expr></argument>, <argument><expr><name><name>stream</name><operator>-&gt;</operator><name>stream_id</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>nread</name></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name><name>httpc</name><operator>-&gt;</operator><name>pause_stream_id</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>closed</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>H2BUGF</name><argument_list>(<argument><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"stream %x is paused, pause id: %x\n"</literal></expr></argument>,

<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>stream_id</name></name></expr></argument>, <argument><expr><name><name>httpc</name><operator>-&gt;</operator><name>pause_stream_id</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>err</name> <operator>=</operator> <name>CURLE_AGAIN</name></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if>

<else>else <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>inbuf</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>mem</name></name> <operator>=</operator> <name>mem</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>memlen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>httpc</name><operator>-&gt;</operator><name>inbuflen</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>nread</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>Curl_recv</name> <operator>*</operator><operator>)</operator><name><name>httpc</name><operator>-&gt;</operator><name>recv_underlying</name></name><operator>)</operator><operator>(</operator>

<name>conn</name><operator>,</operator> <name>FIRSTSOCKET</name><operator>,</operator> <name><name>httpc</name><operator>-&gt;</operator><name>inbuf</name></name><operator>,</operator> <name>H2_BUFSIZE</name><operator>,</operator> <operator>&amp;</operator><name>result</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>nread</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>result</name> <operator>!=</operator> <name>CURLE_AGAIN</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Failed receiving HTTP2 data"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>closed</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>http2_handle_stream_close</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>stream</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>err</name> <operator>=</operator> <name>result</name></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>nread</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>H2BUGF</name><argument_list>(<argument><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"end of stream\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>err</name> <operator>=</operator> <name>CURLE_OK</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>H2BUGF</name><argument_list>(<argument><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"nread=%zd\n"</literal></expr></argument>, <argument><expr><name>nread</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>httpc</name><operator>-&gt;</operator><name>inbuflen</name></name> <operator>=</operator> <name>nread</name></expr>;</expr_stmt>

<expr_stmt><expr><name>inbuf</name> <operator>=</operator> <name><name>httpc</name><operator>-&gt;</operator><name>inbuf</name></name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>nread</name> <operator>=</operator> <name><name>httpc</name><operator>-&gt;</operator><name>inbuflen</name></name> <operator>-</operator> <name><name>httpc</name><operator>-&gt;</operator><name>nread_inbuf</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>inbuf</name> <operator>=</operator> <name><name>httpc</name><operator>-&gt;</operator><name>inbuf</name></name> <operator>+</operator> <name><name>httpc</name><operator>-&gt;</operator><name>nread_inbuf</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>H2BUGF</name><argument_list>(<argument><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Use data left in connection buffer, nread=%zd\n"</literal></expr></argument>,

<argument><expr><name>nread</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>nghttp2_session_mem_recv</name><argument_list>(<argument><expr><name><name>httpc</name><operator>-&gt;</operator><name>h2</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>)</operator><name>inbuf</name></expr></argument>, <argument><expr><name>nread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>nghttp2_is_fatal</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"nghttp2_session_mem_recv() returned %zd:%s\n"</literal></expr></argument>,

<argument><expr><name>rv</name></expr></argument>, <argument><expr><call><name>nghttp2_strerror</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>rv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>err</name> <operator>=</operator> <name>CURLE_RECV_ERROR</name></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>H2BUGF</name><argument_list>(<argument><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"nghttp2_session_mem_recv() returns %zd\n"</literal></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>nread</name> <operator>==</operator> <name>rv</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>H2BUGF</name><argument_list>(<argument><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"All data in connection buffer processed\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>httpc</name><operator>-&gt;</operator><name>inbuflen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>httpc</name><operator>-&gt;</operator><name>nread_inbuf</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name><name>httpc</name><operator>-&gt;</operator><name>nread_inbuf</name></name> <operator>+=</operator> <name>rv</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>H2BUGF</name><argument_list>(<argument><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"%zu bytes left in connection buffer\n"</literal></expr></argument>,

<argument><expr><name><name>httpc</name><operator>-&gt;</operator><name>inbuflen</name></name> <operator>-</operator> <name><name>httpc</name><operator>-&gt;</operator><name>nread_inbuf</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>h2_session_send</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>httpc</name><operator>-&gt;</operator><name>h2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rv</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>err</name> <operator>=</operator> <name>CURLE_SEND_ERROR</name></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>should_close_session</name><argument_list>(<argument><expr><name>httpc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>H2BUGF</name><argument_list>(<argument><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"http2_recv: nothing to do in this session\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>err</name> <operator>=</operator> <name>CURLE_HTTP2</name></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>memlen</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>retlen</name> <init>= <expr><name><name>stream</name><operator>-&gt;</operator><name>memlen</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>H2BUGF</name><argument_list>(<argument><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"http2_recv: returns %zd for stream %u\n"</literal></expr></argument>,

<argument><expr><name>retlen</name></expr></argument>, <argument><expr><name><name>stream</name><operator>-&gt;</operator><name>stream_id</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>memlen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>httpc</name><operator>-&gt;</operator><name>pause_stream_id</name></name> <operator>==</operator> <name><name>stream</name><operator>-&gt;</operator><name>stream_id</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>H2BUGF</name><argument_list>(<argument><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Data returned for PAUSED stream %u\n"</literal></expr></argument>,

<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>stream_id</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><operator>!</operator><name><name>stream</name><operator>-&gt;</operator><name>closed</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>drained_transfer</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>httpc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>Curl_expire</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>EXPIRE_RUN_NOW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><name>retlen</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>closed</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>err</name> <operator>=</operator> <name>CURLE_AGAIN</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>H2BUGF</name><argument_list>(<argument><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"http2_recv returns AGAIN for stream %u\n"</literal></expr></argument>,

<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>stream_id</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AUTHORITY_DST_IDX</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEADER_OVERFLOW</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x.namelen &gt; 0xffff || x.valuelen &gt; 0xffff - x.namelen)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>contains_trailers</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>end</name> <init>= <expr><name>p</name> <operator>+</operator> <name>len</name></expr></init></decl>;</decl_stmt>

<for>for<control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<for>for<control>(<init>;</init> <condition><expr><name>p</name> <operator>!=</operator> <name>end</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">' '</literal> <operator>||</operator> <operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'\t'</literal><operator>)</operator></expr>;</condition> <incr><expr><operator>++</operator><name>p</name></expr></incr>)</control><block type="pseudo"><block_content>

<empty_stmt>;</empty_stmt></block_content></block></for>

<if_stmt><if>if<condition>(<expr><name>p</name> <operator>==</operator> <name>end</name> <operator>||</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>end</name> <operator>-</operator> <name>p</name><operator>)</operator> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"trailers"</literal></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>strncasecompare</name><argument_list>(<argument><expr><literal type="string">"trailers"</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"trailers"</literal></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"trailers"</literal></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<for>for<control>(<init>;</init> <condition><expr><name>p</name> <operator>!=</operator> <name>end</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">' '</literal> <operator>||</operator> <operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'\t'</literal><operator>)</operator></expr>;</condition> <incr><expr><operator>++</operator><name>p</name></expr></incr>)</control><block type="pseudo"><block_content>

<empty_stmt>;</empty_stmt></block_content></block></for>

<if_stmt><if>if<condition>(<expr><name>p</name> <operator>==</operator> <name>end</name> <operator>||</operator> <operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">','</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<for>for<control>(<init>;</init> <condition><expr><name>p</name> <operator>!=</operator> <name>end</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">','</literal></expr>;</condition> <incr><expr><operator>++</operator><name>p</name></expr></incr>)</control><block type="pseudo"><block_content>

<empty_stmt>;</empty_stmt></block_content></block></for>

<if_stmt><if>if<condition>(<expr><name>p</name> <operator>==</operator> <name>end</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>++</operator><name>p</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<typedef>typedef <type><enum>enum <block>{

<decl><name>HEADERINST_FORWARD</name></decl>,

<decl><name>HEADERINST_IGNORE</name></decl>,

<decl><name>HEADERINST_TE_TRAILERS</name></decl>

}</block></enum></type> <name>header_instruction</name>;</typedef>

<function><type><specifier>static</specifier> <name>header_instruction</name></type> <name>inspect_header</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>namelen</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>valuelen</name></decl></parameter>)</parameter_list> <block>{<block_content>

<switch>switch<condition>(<expr><name>namelen</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">2</literal></expr>:</case>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>strncasecompare</name><argument_list>(<argument><expr><literal type="string">"te"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>namelen</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>HEADERINST_FORWARD</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><ternary><condition><expr><call><name>contains_trailers</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>valuelen</name></expr></argument>)</argument_list></call></expr> ?</condition><then>

<expr><name>HEADERINST_TE_TRAILERS</name></expr> </then><else>: <expr><name>HEADERINST_IGNORE</name></expr></else></ternary></expr>;</return>

<case>case <expr><literal type="number">7</literal></expr>:</case>

<return>return <expr><ternary><condition><expr><call><name>strncasecompare</name><argument_list>(<argument><expr><literal type="string">"upgrade"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>namelen</name></expr></argument>)</argument_list></call></expr> ?</condition><then>

<expr><name>HEADERINST_IGNORE</name></expr> </then><else>: <expr><name>HEADERINST_FORWARD</name></expr></else></ternary></expr>;</return>

<case>case <expr><literal type="number">10</literal></expr>:</case>

<return>return <expr><ternary><condition><expr><operator>(</operator><call><name>strncasecompare</name><argument_list>(<argument><expr><literal type="string">"connection"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>namelen</name></expr></argument>)</argument_list></call> <operator>||</operator>

<call><name>strncasecompare</name><argument_list>(<argument><expr><literal type="string">"keep-alive"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>namelen</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ?</condition><then>

<expr><name>HEADERINST_IGNORE</name></expr> </then><else>: <expr><name>HEADERINST_FORWARD</name></expr></else></ternary></expr>;</return>

<case>case <expr><literal type="number">16</literal></expr>:</case>

<return>return <expr><ternary><condition><expr><call><name>strncasecompare</name><argument_list>(<argument><expr><literal type="string">"proxy-connection"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>namelen</name></expr></argument>)</argument_list></call></expr> ?</condition><then>

<expr><name>HEADERINST_IGNORE</name></expr> </then><else>: <expr><name>HEADERINST_FORWARD</name></expr></else></ternary></expr>;</return>

<case>case <expr><literal type="number">17</literal></expr>:</case>

<return>return <expr><ternary><condition><expr><call><name>strncasecompare</name><argument_list>(<argument><expr><literal type="string">"transfer-encoding"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>namelen</name></expr></argument>)</argument_list></call></expr> ?</condition><then>

<expr><name>HEADERINST_IGNORE</name></expr> </then><else>: <expr><name>HEADERINST_FORWARD</name></expr></else></ternary></expr>;</return>

<default>default:</default>

<return>return <expr><name>HEADERINST_FORWARD</name></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ssize_t</name></type> <name>http2_send</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sockindex</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>mem</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>CURLcode</name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>rv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>http_conn</name></name> <modifier>*</modifier></type><name>httpc</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>httpc</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>HTTP</name></name> <modifier>*</modifier></type><name>stream</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>protop</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>nghttp2_nv</name> <modifier>*</modifier></type><name>nva</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>nheader</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>authority_idx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>hdbuf</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>mem</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>end</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>line_end</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>nghttp2_data_provider</name></type> <name>data_prd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>stream_id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>nghttp2_session</name> <modifier>*</modifier></type><name>h2</name> <init>= <expr><name><name>httpc</name><operator>-&gt;</operator><name>h2</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>nghttp2_priority_spec</name></type> <name>pri_spec</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>sockindex</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>H2BUGF</name><argument_list>(<argument><expr><call><name>infof</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"http2_send len=%zu\n"</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>stream_id</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>close_handled</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"stream %d closed\n"</literal></expr></argument>, <argument><expr><name><name>stream</name><operator>-&gt;</operator><name>stream_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>err</name> <operator>=</operator> <name>CURLE_HTTP2_STREAM</name></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>closed</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>http2_handle_stream_close</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>upload_mem</name></name> <operator>=</operator> <name>mem</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>upload_len</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>nghttp2_session_resume_data</name><argument_list>(<argument><expr><name>h2</name></expr></argument>, <argument><expr><name><name>stream</name><operator>-&gt;</operator><name>stream_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>nghttp2_is_fatal</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>err</name> <operator>=</operator> <name>CURLE_SEND_ERROR</name></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>h2_session_send</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>h2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>nghttp2_is_fatal</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>err</name> <operator>=</operator> <name>CURLE_SEND_ERROR</name></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>-=</operator> <name><name>stream</name><operator>-&gt;</operator><name>upload_len</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>upload_mem</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>upload_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>should_close_session</name><argument_list>(<argument><expr><name>httpc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>H2BUGF</name><argument_list>(<argument><expr><call><name>infof</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"http2_send: nothing to do in this session\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>err</name> <operator>=</operator> <name>CURLE_HTTP2</name></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>upload_left</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>nghttp2_session_resume_data</name><argument_list>(<argument><expr><name>h2</name></expr></argument>, <argument><expr><name><name>stream</name><operator>-&gt;</operator><name>stream_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>H2BUGF</name><argument_list>(<argument><expr><call><name>infof</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"http2_send returns %zu for stream %u\n"</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>,

<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>stream_id</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>len</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>nheader</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>hdbuf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal> <operator>&amp;&amp;</operator> <name><name>hdbuf</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\r'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>++</operator><name>nheader</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if<condition>(<expr><name>nheader</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>nheader</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>nva</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>nghttp2_nv</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>nheader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>nva</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>err</name> <operator>=</operator> <name>CURLE_OUT_OF_MEMORY</name></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>line_end</name> <operator>=</operator> <call><name>memchr</name><argument_list>(<argument><expr><name>hdbuf</name></expr></argument>, <argument><expr><literal type="char">'\r'</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>line_end</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>end</name> <operator>=</operator> <call><name>memchr</name><argument_list>(<argument><expr><name>hdbuf</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><name>line_end</name> <operator>-</operator> <name>hdbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>end</name> <operator>||</operator> <name>end</name> <operator>==</operator> <name>hdbuf</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>nva</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>name</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><literal type="string">":method"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>nva</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>namelen</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>nva</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>nva</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>hdbuf</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>nva</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>valuelen</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>end</name> <operator>-</operator> <name>hdbuf</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>nva</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>flags</name> <operator>=</operator> <name>NGHTTP2_NV_FLAG_NONE</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>HEADER_OVERFLOW</name><argument_list>(<argument><expr><name><name>nva</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"Failed sending HTTP request: Header overflow"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>hdbuf</name> <operator>=</operator> <name>end</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>end</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>line_end</name> <operator>-</operator> <name>hdbuf</name><operator>)</operator></expr>;</init> <condition><expr><name>i</name></expr>;</condition> <incr><expr><operator>--</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>hdbuf</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>end</name> <operator>=</operator> <operator>&amp;</operator><name><name>hdbuf</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>end</name> <operator>||</operator> <name>end</name> <operator>==</operator> <name>hdbuf</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>nva</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>name</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><literal type="string">":path"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>nva</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>namelen</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>nva</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>nva</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>hdbuf</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>nva</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>valuelen</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>end</name> <operator>-</operator> <name>hdbuf</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>nva</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>flags</name> <operator>=</operator> <name>NGHTTP2_NV_FLAG_NONE</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>HEADER_OVERFLOW</name><argument_list>(<argument><expr><name><name>nva</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"Failed sending HTTP request: Header overflow"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>nva</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>name</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><literal type="string">":scheme"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>nva</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>namelen</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>nva</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>handler</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>PROTOPT_SSL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>nva</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><literal type="string">"https"</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>nva</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><literal type="string">"http"</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>nva</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>valuelen</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>nva</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>nva</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>flags</name> <operator>=</operator> <name>NGHTTP2_NV_FLAG_NONE</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>HEADER_OVERFLOW</name><argument_list>(<argument><expr><name><name>nva</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"Failed sending HTTP request: Header overflow"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>authority_idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<while>while<condition>(<expr><name>i</name> <operator>&lt;</operator> <name>nheader</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>hlen</name></decl>;</decl_stmt>

<expr_stmt><expr><name>hdbuf</name> <operator>=</operator> <name>line_end</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>line_end</name> <operator>=</operator> <call><name>memchr</name><argument_list>(<argument><expr><name>hdbuf</name></expr></argument>, <argument><expr><literal type="char">'\r'</literal></expr></argument>, <argument><expr><name>len</name> <operator>-</operator> <operator>(</operator><name>hdbuf</name> <operator>-</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>mem</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>line_end</name> <operator>||</operator> <operator>(</operator><name>line_end</name> <operator>==</operator> <name>hdbuf</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>*</operator><name>hdbuf</name> <operator>==</operator> <literal type="char">' '</literal> <operator>||</operator> <operator>*</operator><name>hdbuf</name> <operator>==</operator> <literal type="char">'\t'</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<for>for<control>(<init><expr><name>end</name> <operator>=</operator> <name>hdbuf</name></expr>;</init> <condition><expr><name>end</name> <operator>&lt;</operator> <name>line_end</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>end</name> <operator>!=</operator> <literal type="char">':'</literal></expr>;</condition> <incr><expr><operator>++</operator><name>end</name></expr></incr>)</control><block type="pseudo"><block_content>

<empty_stmt>;</empty_stmt></block_content></block></for>

<if_stmt><if>if<condition>(<expr><name>end</name> <operator>==</operator> <name>hdbuf</name> <operator>||</operator> <name>end</name> <operator>==</operator> <name>line_end</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>hlen</name> <operator>=</operator> <name>end</name> <operator>-</operator> <name>hdbuf</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>hlen</name> <operator>==</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <call><name>strncasecompare</name><argument_list>(<argument><expr><literal type="string">"host"</literal></expr></argument>, <argument><expr><name>hdbuf</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>authority_idx</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>nva</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><literal type="string">":authority"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>nva</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>namelen</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>nva</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name><name>nva</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>namelen</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>end</name> <operator>-</operator> <name>hdbuf</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_strntolower</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>hdbuf</name></expr></argument>, <argument><expr><name>hdbuf</name></expr></argument>, <argument><expr><name><name>nva</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>namelen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>nva</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>hdbuf</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>hdbuf</name> <operator>=</operator> <name>end</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<while>while<condition>(<expr><operator>*</operator><name>hdbuf</name> <operator>==</operator> <literal type="char">' '</literal> <operator>||</operator> <operator>*</operator><name>hdbuf</name> <operator>==</operator> <literal type="char">'\t'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>hdbuf</name></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name>end</name> <operator>=</operator> <name>line_end</name></expr>;</expr_stmt>

<switch>switch<condition>(<expr><call><name>inspect_header</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name><name>nva</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name><name>nva</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>namelen</name></expr></argument>, <argument><expr><name>hdbuf</name></expr></argument>,

<argument><expr><name>end</name> <operator>-</operator> <name>hdbuf</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<case>case <expr><name>HEADERINST_IGNORE</name></expr>:</case>

<expr_stmt><expr><operator>--</operator><name>nheader</name></expr>;</expr_stmt>

<continue>continue;</continue>

<case>case <expr><name>HEADERINST_TE_TRAILERS</name></expr>:</case>

<expr_stmt><expr><name><name>nva</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><literal type="string">"trailers"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>nva</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>valuelen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"trailers"</literal></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><name><name>nva</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>hdbuf</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>nva</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>valuelen</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>end</name> <operator>-</operator> <name>hdbuf</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></switch>

<expr_stmt><expr><name><name>nva</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>=</operator> <name>NGHTTP2_NV_FLAG_NONE</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>HEADER_OVERFLOW</name><argument_list>(<argument><expr><name><name>nva</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"Failed sending HTTP request: Header overflow"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if<condition>(<expr><name>authority_idx</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>authority_idx</name> <operator>!=</operator> <name>AUTHORITY_DST_IDX</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>nghttp2_nv</name></type> <name>authority</name> <init>= <expr><name><name>nva</name><index>[<expr><name>authority_idx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <name>authority_idx</name></expr>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <name>AUTHORITY_DST_IDX</name></expr>;</condition> <incr><expr><operator>--</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>nva</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>nva</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>nva</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>authority</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_ACC</name></cpp:macro> <cpp:value>60000</cpp:value></cpp:define> 

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>acc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nheader</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>acc</name> <operator>+=</operator> <name><name>nva</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>namelen</name> <operator>+</operator> <name><name>nva</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>valuelen</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>H2BUGF</name><argument_list>(<argument><expr><call><name>infof</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"h2 header: %.*s:%.*s\n"</literal></expr></argument>,

<argument><expr><name><name>nva</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>namelen</name></expr></argument>, <argument><expr><name><name>nva</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>,

<argument><expr><name><name>nva</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>valuelen</name></expr></argument>, <argument><expr><name><name>nva</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if<condition>(<expr><name>acc</name> <operator>&gt;</operator> <name>MAX_ACC</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"http2_send: Warning: The cumulative length of all "</literal>

<literal type="string">"headers exceeds %zu bytes and that could cause the "</literal>

<literal type="string">"stream to be rejected.\n"</literal></expr></argument>, <argument><expr><name>MAX_ACC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<expr_stmt><expr><call><name>h2_pri_spec</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pri_spec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>httpreq</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>HTTPREQ_POST</name></expr>:</case>

<case>case <expr><name>HTTPREQ_POST_FORM</name></expr>:</case>

<case>case <expr><name>HTTPREQ_POST_MIME</name></expr>:</case>

<case>case <expr><name>HTTPREQ_PUT</name></expr>:</case>

<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>infilesize</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>upload_left</name></name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>infilesize</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>upload_left</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt> 

<expr_stmt><expr><name><name>data_prd</name><operator>.</operator><name>read_callback</name></name> <operator>=</operator> <name>data_source_read_callback</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data_prd</name><operator>.</operator><name>source</name><operator>.</operator><name>ptr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>stream_id</name> <operator>=</operator> <call><name>nghttp2_submit_request</name><argument_list>(<argument><expr><name>h2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pri_spec</name></expr></argument>, <argument><expr><name>nva</name></expr></argument>, <argument><expr><name>nheader</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>data_prd</name></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><name>stream_id</name> <operator>=</operator> <call><name>nghttp2_submit_request</name><argument_list>(<argument><expr><name>h2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pri_spec</name></expr></argument>, <argument><expr><name>nva</name></expr></argument>, <argument><expr><name>nheader</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name>nva</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>stream_id</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>H2BUGF</name><argument_list>(<argument><expr><call><name>infof</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"http2_send() send error\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>err</name> <operator>=</operator> <name>CURLE_SEND_ERROR</name></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"Using Stream ID: %x (easy handle %p)\n"</literal></expr></argument>,

<argument><expr><name>stream_id</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>stream_id</name></name> <operator>=</operator> <name>stream_id</name></expr>;</expr_stmt>

<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>nghttp2_session_send</name><argument_list>(<argument><expr><name>h2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rv</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>err</name> <operator>=</operator> <name>CURLE_SEND_ERROR</name></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>should_close_session</name><argument_list>(<argument><expr><name>httpc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>H2BUGF</name><argument_list>(<argument><expr><call><name>infof</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"http2_send: nothing to do in this session\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>err</name> <operator>=</operator> <name>CURLE_HTTP2</name></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>nghttp2_session_resume_data</name><argument_list>(<argument><expr><name>h2</name></expr></argument>, <argument><expr><name><name>stream</name><operator>-&gt;</operator><name>stream_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>len</name></expr>;</return>

<label><name>fail</name>:</label>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>nva</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>err</name> <operator>=</operator> <name>CURLE_SEND_ERROR</name></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>CURLcode</name></type> <name>Curl_http2_setup</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>http_conn</name></name> <modifier>*</modifier></type><name>httpc</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>httpc</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>HTTP</name></name> <modifier>*</modifier></type><name>stream</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>protop</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>stream_id</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>stream</name><operator>-&gt;</operator><name>header_recvbuf</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>header_recvbuf</name></name> <operator>=</operator> <call><name>Curl_add_buffer_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>stream</name><operator>-&gt;</operator><name>header_recvbuf</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>conn</name><operator>-&gt;</operator><name>handler</name></name> <operator>==</operator> <operator>&amp;</operator><name>Curl_handler_http2_ssl</name><operator>)</operator> <operator>||</operator>

<operator>(</operator><name><name>conn</name><operator>-&gt;</operator><name>handler</name></name> <operator>==</operator> <operator>&amp;</operator><name>Curl_handler_http2</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_OK</name></expr>;</return></block_content></block></if></if_stmt> 

<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>handler</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>PROTOPT_SSL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>handler</name></name> <operator>=</operator> <operator>&amp;</operator><name>Curl_handler_http2_ssl</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>handler</name></name> <operator>=</operator> <operator>&amp;</operator><name>Curl_handler_http2</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>http2_init</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>Curl_add_buffer_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>header_recvbuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"Using HTTP2, server supports multi-use\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>upload_left</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>upload_mem</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>upload_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>httpc</name><operator>-&gt;</operator><name>inbuflen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>httpc</name><operator>-&gt;</operator><name>nread_inbuf</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>httpc</name><operator>-&gt;</operator><name>pause_stream_id</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>httpc</name><operator>-&gt;</operator><name>drain_total</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>multiplex</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>httpversion</name></name> <operator>=</operator> <literal type="number">20</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>bundle</name><operator>-&gt;</operator><name>multiuse</name></name> <operator>=</operator> <name>BUNDLE_MULTIPLEX</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"Connection state changed (HTTP/2 confirmed)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>multi_connchanged</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>multi</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>CURLcode</name></type> <name>Curl_http2_switched</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mem</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>nread</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>http_conn</name></name> <modifier>*</modifier></type><name>httpc</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>httpc</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>nproc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>HTTP</name></name> <modifier>*</modifier></type><name>stream</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>protop</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_http2_setup</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>httpc</name><operator>-&gt;</operator><name>recv_underlying</name></name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>recv</name><index>[<expr><name>FIRSTSOCKET</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>httpc</name><operator>-&gt;</operator><name>send_underlying</name></name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>send</name><index>[<expr><name>FIRSTSOCKET</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>recv</name><index>[<expr><name>FIRSTSOCKET</name></expr>]</index></name> <operator>=</operator> <name>http2_recv</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>send</name><index>[<expr><name>FIRSTSOCKET</name></expr>]</index></name> <operator>=</operator> <name>http2_send</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>upgr101</name></name> <operator>==</operator> <name>UPGR101_RECEIVED</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>stream_id</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>nghttp2_session_upgrade</name><argument_list>(<argument><expr><name><name>httpc</name><operator>-&gt;</operator><name>h2</name></name></expr></argument>, <argument><expr><name><name>httpc</name><operator>-&gt;</operator><name>binsettings</name></name></expr></argument>,

<argument><expr><name><name>httpc</name><operator>-&gt;</operator><name>binlen</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rv</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"nghttp2_session_upgrade() failed: %s(%d)"</literal></expr></argument>,

<argument><expr><call><name>nghttp2_strerror</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_HTTP2</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>nghttp2_session_set_stream_user_data</name><argument_list>(<argument><expr><name><name>httpc</name><operator>-&gt;</operator><name>h2</name></name></expr></argument>,

<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>stream_id</name></name></expr></argument>,

<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rv</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"http/2: failed to set user_data for stream %d!\n"</literal></expr></argument>,

<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>stream_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DEBUGASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>populate_settings</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>httpc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>stream_id</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>nghttp2_submit_settings</name><argument_list>(<argument><expr><name><name>httpc</name><operator>-&gt;</operator><name>h2</name></name></expr></argument>, <argument><expr><name>NGHTTP2_FLAG_NONE</name></expr></argument>,

<argument><expr><name><name>httpc</name><operator>-&gt;</operator><name>local_settings</name></name></expr></argument>,

<argument><expr><name><name>httpc</name><operator>-&gt;</operator><name>local_settings_num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rv</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"nghttp2_submit_settings() failed: %s(%d)"</literal></expr></argument>,

<argument><expr><call><name>nghttp2_strerror</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_HTTP2</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>nghttp2_session_set_local_window_size</name><argument_list>(<argument><expr><name><name>httpc</name><operator>-&gt;</operator><name>h2</name></name></expr></argument>, <argument><expr><name>NGHTTP2_FLAG_NONE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name>HTTP2_HUGE_WINDOW_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rv</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"nghttp2_session_set_local_window_size() failed: %s(%d)"</literal></expr></argument>,

<argument><expr><call><name>nghttp2_strerror</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_HTTP2</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>H2_BUFSIZE</name> <operator>&lt;</operator> <name>nread</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"connection buffer size is too small to store data following "</literal>

<literal type="string">"HTTP Upgrade response header: buflen=%zu, datalen=%zu"</literal></expr></argument>,

<argument><expr><name>H2_BUFSIZE</name></expr></argument>, <argument><expr><name>nread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_HTTP2</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"Copying HTTP/2 data in stream buffer to connection buffer"</literal>

<literal type="string">" after upgrade: len=%zu\n"</literal></expr></argument>,

<argument><expr><name>nread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>nread</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>httpc</name><operator>-&gt;</operator><name>inbuf</name></name></expr></argument>, <argument><expr><name>mem</name></expr></argument>, <argument><expr><name>nread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>httpc</name><operator>-&gt;</operator><name>inbuflen</name></name> <operator>=</operator> <name>nread</name></expr>;</expr_stmt>

<expr_stmt><expr><name>nproc</name> <operator>=</operator> <call><name>nghttp2_session_mem_recv</name><argument_list>(<argument><expr><name><name>httpc</name><operator>-&gt;</operator><name>h2</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>)</operator><name><name>httpc</name><operator>-&gt;</operator><name>inbuf</name></name></expr></argument>,

<argument><expr><name><name>httpc</name><operator>-&gt;</operator><name>inbuflen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>nghttp2_is_fatal</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>nproc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"nghttp2_session_mem_recv() failed: %s(%d)"</literal></expr></argument>,

<argument><expr><call><name>nghttp2_strerror</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>nproc</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>nproc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_HTTP2</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>H2BUGF</name><argument_list>(<argument><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"nghttp2_session_mem_recv() returns %zd\n"</literal></expr></argument>, <argument><expr><name>nproc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>ssize_t</name><operator>)</operator><name>nread</name> <operator>==</operator> <name>nproc</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>httpc</name><operator>-&gt;</operator><name>inbuflen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>httpc</name><operator>-&gt;</operator><name>nread_inbuf</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name><name>httpc</name><operator>-&gt;</operator><name>nread_inbuf</name></name> <operator>+=</operator> <name>nproc</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>h2_session_send</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>httpc</name><operator>-&gt;</operator><name>h2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rv</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"nghttp2_session_send() failed: %s(%d)"</literal></expr></argument>,

<argument><expr><call><name>nghttp2_strerror</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_HTTP2</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>should_close_session</name><argument_list>(<argument><expr><name>httpc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>H2BUGF</name><argument_list>(<argument><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>,

<argument><expr><literal type="string">"nghttp2_session_send(): nothing to do in this session\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_HTTP2</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>CURLcode</name></type> <name>Curl_http2_stream_pause</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>pause</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>DEBUGASSERT</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DEBUGASSERT</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>data</name><operator>-&gt;</operator><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>httpc</name><operator>.</operator><name>h2</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_OK</name></expr>;</return></block_content></block></if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NGHTTP2_HAS_SET_LOCAL_WINDOW_SIZE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<else>else <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>HTTP</name></name> <modifier>*</modifier></type><name>stream</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>protop</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>http_conn</name></name> <modifier>*</modifier></type><name>httpc</name> <init>= <expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>httpc</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>window</name> <init>= <expr><operator>!</operator><name>pause</name> <operator>*</operator> <name>HTTP2_HUGE_WINDOW_SIZE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rv</name> <init>= <expr><call><name>nghttp2_session_set_local_window_size</name><argument_list>(<argument><expr><name><name>httpc</name><operator>-&gt;</operator><name>h2</name></name></expr></argument>,

<argument><expr><name>NGHTTP2_FLAG_NONE</name></expr></argument>,

<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>stream_id</name></name></expr></argument>,

<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>rv</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"nghttp2_session_set_local_window_size() failed: %s(%d)"</literal></expr></argument>,

<argument><expr><call><name>nghttp2_strerror</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_HTTP2</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>h2_session_send</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>httpc</name><operator>-&gt;</operator><name>h2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rv</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_SEND_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>DEBUGF</name><argument_list>(<argument><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Set HTTP/2 window size to %u for stream %u\n"</literal></expr></argument>,

<argument><expr><name>window</name></expr></argument>, <argument><expr><name><name>stream</name><operator>-&gt;</operator><name>stream_id</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUGBUILD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>window2</name> <init>=

<expr><call><name>nghttp2_session_get_stream_local_window_size</name><argument_list>(<argument><expr><name><name>httpc</name><operator>-&gt;</operator><name>h2</name></name></expr></argument>,

<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>stream_id</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DEBUGF</name><argument_list>(<argument><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"HTTP/2 window size is now %u for stream %u\n"</literal></expr></argument>,

<argument><expr><name>window2</name></expr></argument>, <argument><expr><name><name>stream</name><operator>-&gt;</operator><name>stream_id</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></else></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>CURLcode</name></type> <name>Curl_http2_add_child</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>parent</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>child</name></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>exclusive</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>parent</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>Curl_http2_dep</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>tail</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>Curl_http2_dep</name></name> <modifier>*</modifier></type><name>dep</name> <init>= <expr><call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>Curl_http2_dep</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>dep</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>dep</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>child</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>parent</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>stream_dependents</name></name> <operator>&amp;&amp;</operator> <name>exclusive</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>Curl_http2_dep</name></name> <modifier>*</modifier></type><name>node</name> <init>= <expr><name><name>parent</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>stream_dependents</name></name></expr></init></decl>;</decl_stmt>

<while>while<condition>(<expr><name>node</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>stream_depends_on</name></name> <operator>=</operator> <name>child</name></expr>;</expr_stmt>

<expr_stmt><expr><name>node</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>tail</name> <operator>=</operator> <operator>&amp;</operator><name><name>child</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>stream_dependents</name></name></expr>;</expr_stmt>

<while>while<condition>(<expr><operator>*</operator><name>tail</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>tail</name> <operator>=</operator> <operator>&amp;</operator><name><operator>(</operator><operator>*</operator><name>tail</name><operator>)</operator><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><call><name>DEBUGASSERT</name><argument_list>(<argument><expr><operator>!</operator><operator>*</operator><name>tail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>tail</name> <operator>=</operator> <name><name>parent</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>stream_dependents</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>parent</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>stream_dependents</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>tail</name> <operator>=</operator> <operator>&amp;</operator><name><name>parent</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>stream_dependents</name></name></expr>;</expr_stmt>

<while>while<condition>(<expr><operator>*</operator><name>tail</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>tail</name><operator>)</operator><operator>-&gt;</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>stream_depends_e</name></name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>tail</name> <operator>=</operator> <operator>&amp;</operator><name><operator>(</operator><operator>*</operator><name>tail</name><operator>)</operator><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>DEBUGASSERT</name><argument_list>(<argument><expr><operator>!</operator><operator>*</operator><name>tail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>tail</name> <operator>=</operator> <name>dep</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>child</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>stream_depends_on</name></name> <operator>=</operator> <name>parent</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>child</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>stream_depends_e</name></name> <operator>=</operator> <name>exclusive</name></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>Curl_http2_remove_child</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>parent</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>child</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>Curl_http2_dep</name></name> <modifier>*</modifier></type><name>last</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>Curl_http2_dep</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>parent</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>stream_dependents</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DEBUGASSERT</name><argument_list>(<argument><expr><name><name>child</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>stream_depends_on</name></name> <operator>==</operator> <name>parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while<condition>(<expr><name>data</name> <operator>&amp;&amp;</operator> <name><name>data</name><operator>-&gt;</operator><name>data</name></name> <operator>!=</operator> <name>child</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>last</name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>

<expr_stmt><expr><name>data</name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>DEBUGASSERT</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>data</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>last</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>last</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name><name>parent</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>stream_dependents</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>child</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>stream_depends_on</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>child</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>stream_depends_e</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>Curl_http2_cleanup_dependencies</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<while>while<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>stream_dependents</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>stream_dependents</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>Curl_http2_remove_child</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>stream_depends_on</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>Curl_http2_add_child</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>stream_depends_on</name></name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>stream_depends_on</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>Curl_http2_remove_child</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>stream_depends_on</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>Curl_h2_http_1_1_error</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>http_conn</name></name> <modifier>*</modifier></type><name>httpc</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>proto</name><operator>.</operator><name>httpc</name></name></expr></init></decl>;</decl_stmt>

<return>return <expr><operator>(</operator><name><name>httpc</name><operator>-&gt;</operator><name>error_code</name></name> <operator>==</operator> <name>NGHTTP2_HTTP_1_1_REQUIRED</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;curl/curl.h&gt;</cpp:file></cpp:include>

<function><type><name>char</name> <modifier>*</modifier></type><name>curl_pushheader_bynum</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>curl_pushheaders</name></name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>num</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>h</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>num</name></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>curl_pushheader_byname</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>curl_pushheaders</name></name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>header</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>h</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>header</name></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</unit>
