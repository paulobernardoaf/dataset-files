<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\curl-analysis\_cppstats\curl\lib\vquic\ngtcp2.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_setup.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_NGTCP2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ngtcp2/ngtcp2.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ngtcp2/ngtcp2_crypto.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;nghttp3/nghttp3.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_OPENSSL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;openssl/err.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"urldata.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sendf.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"strdup.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rand.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ngtcp2.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"multiif.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"strcase.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"connect.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"strerror.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_printf.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_memory.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memdebug.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CURLDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEBUG_HTTP3</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG_HTTP3</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>H3BUGF</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>x</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>H3BUGF</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { } while(0)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>H3_SEND_SIZE</name></cpp:macro> <cpp:value>(20*1024)</cpp:value></cpp:define>

<struct>struct <name>h3out</name> <block>{

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>buf</name><index>[<expr><name>H3_SEND_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>used</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>size_t</name></type> <name>windex</name></decl>;</decl_stmt> 

}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QUIC_MAX_STREAMS</name></cpp:macro> <cpp:value>(256*1024)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QUIC_MAX_DATA</name></cpp:macro> <cpp:value>(1*1024*1024)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QUIC_IDLE_TIMEOUT</name></cpp:macro> <cpp:value>60000</cpp:value></cpp:define> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_OPENSSL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QUIC_CIPHERS</name></cpp:macro> <cpp:value>"TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_" "POLY1305_SHA256:TLS_AES_128_CCM_SHA256"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QUIC_GROUPS</name></cpp:macro> <cpp:value>"P-256:X25519:P-384:P-521"</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_GNUTLS</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QUIC_PRIORITY</name></cpp:macro> <cpp:value>"NORMAL:-VERS-ALL:+VERS-TLS1.3:-CIPHER-ALL:+AES-128-GCM:+AES-256-GCM:" "+CHACHA20-POLY1305:+AES-128-CCM:-GROUP-ALL:+GROUP-SECP256R1:" "+GROUP-X25519:+GROUP-SECP384R1:+GROUP-SECP521R1"</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><specifier>static</specifier> <name>CURLcode</name></type> <name>ng_process_ingress</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,

<parameter><decl><type><name>curl_socket_t</name></type> <name>sockfd</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>quicsocket</name></name> <modifier>*</modifier></type><name>qs</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>CURLcode</name></type> <name>ng_flush_egress</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sockfd</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>quicsocket</name></name> <modifier>*</modifier></type><name>qs</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>cb_h3_acked_stream_data</name><parameter_list>(<parameter><decl><type><name>nghttp3_conn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>stream_id</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>datalen</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user_data</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>stream_user_data</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>ngtcp2_tstamp</name></type> <name>timestamp</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>curltime</name></name></type> <name>ct</name> <init>= <expr><call><name>Curl_now</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><name><name>ct</name><operator>.</operator><name>tv_sec</name></name> <operator>*</operator> <name>NGTCP2_SECONDS</name> <operator>+</operator> <name><name>ct</name><operator>.</operator><name>tv_usec</name></name> <operator>*</operator> <name>NGTCP2_MICROSECONDS</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG_NGTCP2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type> <name>quic_printf</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user_data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>user_data</name></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vfprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_OPENSSL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>ngtcp2_crypto_level</name></type>

<name>quic_from_ossl_level</name><parameter_list>(<parameter><decl><type><name>OSSL_ENCRYPTION_LEVEL</name></type> <name>ossl_level</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch<condition>(<expr><name>ossl_level</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>ssl_encryption_initial</name></expr>:</case>

<return>return <expr><name>NGTCP2_CRYPTO_LEVEL_INITIAL</name></expr>;</return>

<case>case <expr><name>ssl_encryption_early_data</name></expr>:</case>

<return>return <expr><name>NGTCP2_CRYPTO_LEVEL_EARLY</name></expr>;</return>

<case>case <expr><name>ssl_encryption_handshake</name></expr>:</case>

<return>return <expr><name>NGTCP2_CRYPTO_LEVEL_HANDSHAKE</name></expr>;</return>

<case>case <expr><name>ssl_encryption_application</name></expr>:</case>

<return>return <expr><name>NGTCP2_CRYPTO_LEVEL_APP</name></expr>;</return>

<default>default:</default>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

</block_content>}</block></function>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_GNUTLS</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<function><type><specifier>static</specifier> <name>ngtcp2_crypto_level</name></type>

<name>quic_from_gtls_level</name><parameter_list>(<parameter><decl><type><name>gnutls_record_encryption_level_t</name></type> <name>gtls_level</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch<condition>(<expr><name>gtls_level</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>GNUTLS_ENCRYPTION_LEVEL_INITIAL</name></expr>:</case>

<return>return <expr><name>NGTCP2_CRYPTO_LEVEL_INITIAL</name></expr>;</return>

<case>case <expr><name>GNUTLS_ENCRYPTION_LEVEL_EARLY</name></expr>:</case>

<return>return <expr><name>NGTCP2_CRYPTO_LEVEL_EARLY</name></expr>;</return>

<case>case <expr><name>GNUTLS_ENCRYPTION_LEVEL_HANDSHAKE</name></expr>:</case>

<return>return <expr><name>NGTCP2_CRYPTO_LEVEL_HANDSHAKE</name></expr>;</return>

<case>case <expr><name>GNUTLS_ENCRYPTION_LEVEL_APPLICATION</name></expr>:</case>

<return>return <expr><name>NGTCP2_CRYPTO_LEVEL_APP</name></expr>;</return>

<default>default:</default>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name></type> <name>setup_initial_crypto_context</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>quicsocket</name></name> <modifier>*</modifier></type><name>qs</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>ngtcp2_cid</name> <modifier>*</modifier></type><name>dcid</name> <init>= <expr><call><name>ngtcp2_conn_get_dcid</name><argument_list>(<argument><expr><name><name>qs</name><operator>-&gt;</operator><name>qconn</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><call><name>ngtcp2_crypto_derive_and_install_initial_key</name><argument_list>(

<argument><expr><name><name>qs</name><operator>-&gt;</operator><name>qconn</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><name>dcid</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>quic_settings</name><parameter_list>(<parameter><decl><type><name>ngtcp2_settings</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,

<parameter><decl><type><name>uint64_t</name></type> <name>stream_buffer_size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ngtcp2_settings_default</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG_NGTCP2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>log_printf</name></name> <operator>=</operator> <name>quic_printf</name></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>log_printf</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>initial_ts</name></name> <operator>=</operator> <call><name>timestamp</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>transport_params</name><operator>.</operator><name>initial_max_stream_data_bidi_local</name></name> <operator>=</operator> <name>stream_buffer_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>transport_params</name><operator>.</operator><name>initial_max_stream_data_bidi_remote</name></name> <operator>=</operator> <name>QUIC_MAX_STREAMS</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>transport_params</name><operator>.</operator><name>initial_max_stream_data_uni</name></name> <operator>=</operator> <name>QUIC_MAX_STREAMS</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>transport_params</name><operator>.</operator><name>initial_max_data</name></name> <operator>=</operator> <name>QUIC_MAX_DATA</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>transport_params</name><operator>.</operator><name>initial_max_streams_bidi</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>transport_params</name><operator>.</operator><name>initial_max_streams_uni</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>transport_params</name><operator>.</operator><name>max_idle_timeout</name></name> <operator>=</operator> <name>QUIC_IDLE_TIMEOUT</name></expr>;</expr_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>FILE</name> <modifier>*</modifier></type><name>keylog_file</name></decl>;</decl_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_OPENSSL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type> <name>keylog_callback</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SSL</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>line</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>ssl</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>keylog_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fputc</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><name>keylog_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>keylog_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_GNUTLS</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<function><type><specifier>static</specifier> <name>int</name></type> <name>keylog_callback</name><parameter_list>(<parameter><decl><type><name>gnutls_session_t</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>label</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>gnutls_datum_t</name> <modifier>*</modifier></type><name>secret</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>gnutls_datum_t</name></type> <name>crandom</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>gnutls_datum_t</name></type> <name>srandom</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>gnutls_datum_t</name></type> <name>crandom_hex</name> <init>= <expr><block>{ <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>gnutls_datum_t</name></type> <name>secret_hex</name> <init>= <expr><block>{ <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>gnutls_session_get_random</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>crandom</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>srandom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>crandom</name><operator>.</operator><name>size</name></name> <operator>!=</operator> <literal type="number">32</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>gnutls_hex_encode2</name><argument_list>(<argument><expr><operator>&amp;</operator><name>crandom</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>crandom_hex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"gnutls_hex_encode2 failed: %s\n"</literal></expr></argument>,

<argument><expr><call><name>gnutls_strerror</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>out</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>gnutls_hex_encode2</name><argument_list>(<argument><expr><name>secret</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>secret_hex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"gnutls_hex_encode2 failed: %s\n"</literal></expr></argument>,

<argument><expr><call><name>gnutls_strerror</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>out</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>keylog_file</name></expr></argument>, <argument><expr><literal type="string">"%s %s %s\n"</literal></expr></argument>, <argument><expr><name>label</name></expr></argument>, <argument><expr><name><name>crandom_hex</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>secret_hex</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>keylog_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>out</name>:</label>

<expr_stmt><expr><call><name>gnutls_free</name><argument_list>(<argument><expr><name><name>crandom_hex</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gnutls_free</name><argument_list>(<argument><expr><name><name>secret_hex</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>rc</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>init_ngh3_conn</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>quicsocket</name></name> <modifier>*</modifier></type><name>qs</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>int</name></type> <name>write_client_handshake</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>quicsocket</name></name> <modifier>*</modifier></type><name>qs</name></decl></parameter>,

<parameter><decl><type><name>ngtcp2_crypto_level</name></type> <name>level</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>quic_handshake</name></name> <modifier>*</modifier></type><name>crypto_data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rv</name></decl>;</decl_stmt>

<expr_stmt><expr><name>crypto_data</name> <operator>=</operator> <operator>&amp;</operator><name><name>qs</name><operator>-&gt;</operator><name>crypto_data</name><index>[<expr><name>level</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>crypto_data</name><operator>-&gt;</operator><name>buf</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>crypto_data</name><operator>-&gt;</operator><name>buf</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><literal type="number">4096</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>crypto_data</name><operator>-&gt;</operator><name>buf</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>crypto_data</name><operator>-&gt;</operator><name>alloclen</name></name> <operator>=</operator> <literal type="number">4096</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>crypto_data</name><operator>-&gt;</operator><name>len</name></name> <operator>+</operator> <name>len</name> <operator>&lt;=</operator> <name><name>crypto_data</name><operator>-&gt;</operator><name>alloclen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>crypto_data</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name><name>crypto_data</name><operator>-&gt;</operator><name>len</name></name></expr>]</index></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>crypto_data</name><operator>-&gt;</operator><name>len</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>

<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>ngtcp2_conn_submit_crypto_data</name><argument_list>(

<argument><expr><name><name>qs</name><operator>-&gt;</operator><name>qconn</name></name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>&amp;</operator><name><name>crypto_data</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name><name>crypto_data</name><operator>-&gt;</operator><name>len</name></name></expr>]</index></name> <operator>-</operator> <name>len</name><operator>)</operator></expr></argument>,

<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rv</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>H3BUGF</name><argument_list>(<argument><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"write_client_handshake failed\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>==</operator> <name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_OPENSSL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type> <name>quic_set_encryption_secrets</name><parameter_list>(<parameter><decl><type><name>SSL</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter>,

<parameter><decl><type><name>OSSL_ENCRYPTION_LEVEL</name></type> <name>ossl_level</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>rx_secret</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>tx_secret</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>secretlen</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>quicsocket</name></name> <modifier>*</modifier></type><name>qs</name> <init>= <expr><operator>(</operator>struct <name>quicsocket</name> <operator>*</operator><operator>)</operator><call><name>SSL_get_app_data</name><argument_list>(<argument><expr><name>ssl</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>level</name> <init>= <expr><call><name>quic_from_ossl_level</name><argument_list>(<argument><expr><name>ossl_level</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>level</name> <operator>!=</operator> <name>NGTCP2_CRYPTO_LEVEL_EARLY</name> <operator>&amp;&amp;</operator>

<call><name>ngtcp2_crypto_derive_and_install_rx_key</name><argument_list>(

<argument><expr><name><name>qs</name><operator>-&gt;</operator><name>qconn</name></name></expr></argument>, <argument><expr><name>ssl</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><name>rx_secret</name></expr></argument>, <argument><expr><name>secretlen</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>ngtcp2_crypto_derive_and_install_tx_key</name><argument_list>(

<argument><expr><name><name>qs</name><operator>-&gt;</operator><name>qconn</name></name></expr></argument>, <argument><expr><name>ssl</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><name>tx_secret</name></expr></argument>, <argument><expr><name>secretlen</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>level</name> <operator>==</operator> <name>NGTCP2_CRYPTO_LEVEL_APP</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>init_ngh3_conn</name><argument_list>(<argument><expr><name>qs</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>CURLE_OK</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>quic_add_handshake_data</name><parameter_list>(<parameter><decl><type><name>SSL</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter>, <parameter><decl><type><name>OSSL_ENCRYPTION_LEVEL</name></type> <name>ossl_level</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>quicsocket</name></name> <modifier>*</modifier></type><name>qs</name> <init>= <expr><operator>(</operator>struct <name>quicsocket</name> <operator>*</operator><operator>)</operator><call><name>SSL_get_app_data</name><argument_list>(<argument><expr><name>ssl</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ngtcp2_crypto_level</name></type> <name>level</name> <init>= <expr><call><name>quic_from_ossl_level</name><argument_list>(<argument><expr><name>ossl_level</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>write_client_handshake</name><argument_list>(<argument><expr><name>qs</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>quic_flush_flight</name><parameter_list>(<parameter><decl><type><name>SSL</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>ssl</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>quic_send_alert</name><parameter_list>(<parameter><decl><type><name>SSL</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>ssl_encryption_level_t</name></name></type> <name>level</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name></type> <name>alert</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>quicsocket</name></name> <modifier>*</modifier></type><name>qs</name> <init>= <expr><operator>(</operator>struct <name>quicsocket</name> <operator>*</operator><operator>)</operator><call><name>SSL_get_app_data</name><argument_list>(<argument><expr><name>ssl</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>level</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>qs</name><operator>-&gt;</operator><name>tls_alert</name></name> <operator>=</operator> <name>alert</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>SSL_QUIC_METHOD</name></type> <name>quic_method</name> <init>= <expr><block>{<expr><name>quic_set_encryption_secrets</name></expr>,

<expr><name>quic_add_handshake_data</name></expr>,

<expr><name>quic_flush_flight</name></expr>, <expr><name>quic_send_alert</name></expr>}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>SSL_CTX</name> <modifier>*</modifier></type><name>quic_ssl_ctx</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>SSL_CTX</name> <modifier>*</modifier></type><name>ssl_ctx</name> <init>= <expr><call><name>SSL_CTX_new</name><argument_list>(<argument><expr><call><name>TLS_method</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>keylog_filename</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>SSL_CTX_set_min_proto_version</name><argument_list>(<argument><expr><name>ssl_ctx</name></expr></argument>, <argument><expr><name>TLS1_3_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SSL_CTX_set_max_proto_version</name><argument_list>(<argument><expr><name>ssl_ctx</name></expr></argument>, <argument><expr><name>TLS1_3_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SSL_CTX_set_default_verify_paths</name><argument_list>(<argument><expr><name>ssl_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>SSL_CTX_set_ciphersuites</name><argument_list>(<argument><expr><name>ssl_ctx</name></expr></argument>, <argument><expr><name>QUIC_CIPHERS</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>error_buffer</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ERR_error_string_n</name><argument_list>(<argument><expr><call><name>ERR_get_error</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>error_buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>error_buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"SSL_CTX_set_ciphersuites: %s"</literal></expr></argument>, <argument><expr><name>error_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>SSL_CTX_set1_groups_list</name><argument_list>(<argument><expr><name>ssl_ctx</name></expr></argument>, <argument><expr><name>QUIC_GROUPS</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"SSL_CTX_set1_groups_list failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>SSL_CTX_set_quic_method</name><argument_list>(<argument><expr><name>ssl_ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>quic_method</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>keylog_filename</name> <operator>=</operator> <call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"SSLKEYLOGFILE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>keylog_filename</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>keylog_file</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>keylog_filename</name></expr></argument>, <argument><expr><literal type="string">"wb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>keylog_file</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>SSL_CTX_set_keylog_callback</name><argument_list>(<argument><expr><name>ssl_ctx</name></expr></argument>, <argument><expr><name>keylog_callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>ssl_ctx</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>quic_init_ssl</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>quicsocket</name></name> <modifier>*</modifier></type><name>qs</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>alpn</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>alpnlen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>hostname</name> <init>= <expr><name><name>qs</name><operator>-&gt;</operator><name>conn</name><operator>-&gt;</operator><name>host</name><operator>.</operator><name>name</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>qs</name><operator>-&gt;</operator><name>ssl</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>SSL_free</name><argument_list>(<argument><expr><name><name>qs</name><operator>-&gt;</operator><name>ssl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>qs</name><operator>-&gt;</operator><name>ssl</name></name> <operator>=</operator> <call><name>SSL_new</name><argument_list>(<argument><expr><name><name>qs</name><operator>-&gt;</operator><name>sslctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SSL_set_app_data</name><argument_list>(<argument><expr><name><name>qs</name><operator>-&gt;</operator><name>ssl</name></name></expr></argument>, <argument><expr><name>qs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SSL_set_connect_state</name><argument_list>(<argument><expr><name><name>qs</name><operator>-&gt;</operator><name>ssl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch<condition>(<expr><name><name>qs</name><operator>-&gt;</operator><name>version</name></name></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NGTCP2_PROTO_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>NGTCP2_PROTO_VER</name></expr>:</case>

<expr_stmt><expr><name>alpn</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>)</operator><name>NGTCP2_ALPN_H3</name></expr>;</expr_stmt>

<expr_stmt><expr><name>alpnlen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>NGTCP2_ALPN_H3</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></switch>

<if_stmt><if>if<condition>(<expr><name>alpn</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>SSL_set_alpn_protos</name><argument_list>(<argument><expr><name><name>qs</name><operator>-&gt;</operator><name>ssl</name></name></expr></argument>, <argument><expr><name>alpn</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>alpnlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>SSL_set_tlsext_host_name</name><argument_list>(<argument><expr><name><name>qs</name><operator>-&gt;</operator><name>ssl</name></name></expr></argument>, <argument><expr><name>hostname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_GNUTLS</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<function><type><specifier>static</specifier> <name>int</name></type> <name>secret_func</name><parameter_list>(<parameter><decl><type><name>gnutls_session_t</name></type> <name>ssl</name></decl></parameter>,

<parameter><decl><type><name>gnutls_record_encryption_level_t</name></type> <name>gtls_level</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>rx_secret</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>tx_secret</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>secretlen</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>quicsocket</name></name> <modifier>*</modifier></type><name>qs</name> <init>= <expr><call><name>gnutls_session_get_ptr</name><argument_list>(<argument><expr><name>ssl</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>level</name> <init>= <expr><call><name>quic_from_gtls_level</name><argument_list>(<argument><expr><name>gtls_level</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>level</name> <operator>!=</operator> <name>NGTCP2_CRYPTO_LEVEL_EARLY</name> <operator>&amp;&amp;</operator>

<call><name>ngtcp2_crypto_derive_and_install_rx_key</name><argument_list>(

<argument><expr><name><name>qs</name><operator>-&gt;</operator><name>qconn</name></name></expr></argument>, <argument><expr><name>ssl</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><name>rx_secret</name></expr></argument>, <argument><expr><name>secretlen</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>ngtcp2_crypto_derive_and_install_tx_key</name><argument_list>(

<argument><expr><name><name>qs</name><operator>-&gt;</operator><name>qconn</name></name></expr></argument>, <argument><expr><name>ssl</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><name>tx_secret</name></expr></argument>, <argument><expr><name>secretlen</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>level</name> <operator>==</operator> <name>NGTCP2_CRYPTO_LEVEL_APP</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>init_ngh3_conn</name><argument_list>(<argument><expr><name>qs</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>CURLE_OK</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>read_func</name><parameter_list>(<parameter><decl><type><name>gnutls_session_t</name></type> <name>ssl</name></decl></parameter>,

<parameter><decl><type><name>gnutls_record_encryption_level_t</name></type> <name>gtls_level</name></decl></parameter>,

<parameter><decl><type><name>gnutls_handshake_description_t</name></type> <name>htype</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>quicsocket</name></name> <modifier>*</modifier></type><name>qs</name> <init>= <expr><call><name>gnutls_session_get_ptr</name><argument_list>(<argument><expr><name>ssl</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ngtcp2_crypto_level</name></type> <name>level</name> <init>= <expr><call><name>quic_from_gtls_level</name><argument_list>(<argument><expr><name>gtls_level</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rv</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>htype</name> <operator>==</operator> <name>GNUTLS_HANDSHAKE_CHANGE_CIPHER_SPEC</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>write_client_handshake</name><argument_list>(<argument><expr><name>qs</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rv</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>alert_read_func</name><parameter_list>(<parameter><decl><type><name>gnutls_session_t</name></type> <name>ssl</name></decl></parameter>,

<parameter><decl><type><name>gnutls_record_encryption_level_t</name></type> <name>gtls_level</name></decl></parameter>,

<parameter><decl><type><name>gnutls_alert_level_t</name></type> <name>alert_level</name></decl></parameter>,

<parameter><decl><type><name>gnutls_alert_description_t</name></type> <name>alert_desc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>quicsocket</name></name> <modifier>*</modifier></type><name>qs</name> <init>= <expr><call><name>gnutls_session_get_ptr</name><argument_list>(<argument><expr><name>ssl</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>gtls_level</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>alert_level</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>qs</name><operator>-&gt;</operator><name>tls_alert</name></name> <operator>=</operator> <name>alert_desc</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>tp_recv_func</name><parameter_list>(<parameter><decl><type><name>gnutls_session_t</name></type> <name>ssl</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>data_size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>quicsocket</name></name> <modifier>*</modifier></type><name>qs</name> <init>= <expr><call><name>gnutls_session_get_ptr</name><argument_list>(<argument><expr><name>ssl</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ngtcp2_transport_params</name></type> <name>params</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><call><name>ngtcp2_decode_transport_params</name><argument_list>(

<argument><expr><operator>&amp;</operator><name>params</name></expr></argument>, <argument><expr><name>NGTCP2_TRANSPORT_PARAMS_TYPE_ENCRYPTED_EXTENSIONS</name></expr></argument>,

<argument><expr><name>data</name></expr></argument>, <argument><expr><name>data_size</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>ngtcp2_conn_set_remote_transport_params</name><argument_list>(<argument><expr><name><name>qs</name><operator>-&gt;</operator><name>qconn</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>params</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>tp_send_func</name><parameter_list>(<parameter><decl><type><name>gnutls_session_t</name></type> <name>ssl</name></decl></parameter>, <parameter><decl><type><name>gnutls_buffer_t</name></type> <name>extdata</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>quicsocket</name></name> <modifier>*</modifier></type><name>qs</name> <init>= <expr><call><name>gnutls_session_get_ptr</name><argument_list>(<argument><expr><name>ssl</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>paramsbuf</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ngtcp2_transport_params</name></type> <name>params</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>nwrite</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ngtcp2_conn_get_local_transport_params</name><argument_list>(<argument><expr><name><name>qs</name><operator>-&gt;</operator><name>qconn</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>nwrite</name> <operator>=</operator> <call><name>ngtcp2_encode_transport_params</name><argument_list>(

<argument><expr><name>paramsbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>paramsbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NGTCP2_TRANSPORT_PARAMS_TYPE_CLIENT_HELLO</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>nwrite</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"ngtcp2_encode_transport_params: %s\n"</literal></expr></argument>,

<argument><expr><call><name>ngtcp2_strerror</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>nwrite</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>gnutls_buffer_append_data</name><argument_list>(<argument><expr><name>extdata</name></expr></argument>, <argument><expr><name>paramsbuf</name></expr></argument>, <argument><expr><name>nwrite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>rc</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><name>nwrite</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>quic_init_ssl</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>quicsocket</name></name> <modifier>*</modifier></type><name>qs</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>gnutls_datum_t</name></type> <name>alpn</name> <init>= <expr><block>{<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>hostname</name> <init>= <expr><name><name>qs</name><operator>-&gt;</operator><name>conn</name><operator>-&gt;</operator><name>host</name><operator>.</operator><name>name</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>keylog_filename</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>qs</name><operator>-&gt;</operator><name>ssl</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gnutls_deinit</name><argument_list>(<argument><expr><name><name>qs</name><operator>-&gt;</operator><name>ssl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>gnutls_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>qs</name><operator>-&gt;</operator><name>ssl</name></name></expr></argument>, <argument><expr><name>GNUTLS_CLIENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gnutls_session_set_ptr</name><argument_list>(<argument><expr><name><name>qs</name><operator>-&gt;</operator><name>ssl</name></name></expr></argument>, <argument><expr><name>qs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>gnutls_priority_set_direct</name><argument_list>(<argument><expr><name><name>qs</name><operator>-&gt;</operator><name>ssl</name></name></expr></argument>, <argument><expr><name>QUIC_PRIORITY</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"gnutls_priority_set_direct failed: %s\n"</literal></expr></argument>,

<argument><expr><call><name>gnutls_strerror</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>gnutls_handshake_set_secret_function</name><argument_list>(<argument><expr><name><name>qs</name><operator>-&gt;</operator><name>ssl</name></name></expr></argument>, <argument><expr><name>secret_func</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gnutls_handshake_set_read_function</name><argument_list>(<argument><expr><name><name>qs</name><operator>-&gt;</operator><name>ssl</name></name></expr></argument>, <argument><expr><name>read_func</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gnutls_alert_set_read_function</name><argument_list>(<argument><expr><name><name>qs</name><operator>-&gt;</operator><name>ssl</name></name></expr></argument>, <argument><expr><name>alert_read_func</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>gnutls_session_ext_register</name><argument_list>(<argument><expr><name><name>qs</name><operator>-&gt;</operator><name>ssl</name></name></expr></argument>, <argument><expr><literal type="string">"QUIC Transport Parameters"</literal></expr></argument>,

<argument><expr><literal type="number">0xffa5</literal></expr></argument>, <argument><expr><name>GNUTLS_EXT_TLS</name></expr></argument>,

<argument><expr><name>tp_recv_func</name></expr></argument>, <argument><expr><name>tp_send_func</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><name>GNUTLS_EXT_FLAG_TLS</name> <operator>|</operator>

<name>GNUTLS_EXT_FLAG_CLIENT_HELLO</name> <operator>|</operator>

<name>GNUTLS_EXT_FLAG_EE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"gnutls_session_ext_register failed: %s\n"</literal></expr></argument>,

<argument><expr><call><name>gnutls_strerror</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>keylog_filename</name> <operator>=</operator> <call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"SSLKEYLOGFILE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>keylog_filename</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>keylog_file</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>keylog_filename</name></expr></argument>, <argument><expr><literal type="string">"wb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>keylog_file</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>gnutls_session_set_keylog_function</name><argument_list>(<argument><expr><name><name>qs</name><operator>-&gt;</operator><name>ssl</name></name></expr></argument>, <argument><expr><name>keylog_callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>qs</name><operator>-&gt;</operator><name>cred</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gnutls_certificate_free_credentials</name><argument_list>(<argument><expr><name><name>qs</name><operator>-&gt;</operator><name>cred</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>gnutls_certificate_allocate_credentials</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>qs</name><operator>-&gt;</operator><name>cred</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"gnutls_certificate_allocate_credentials failed: %s\n"</literal></expr></argument>,

<argument><expr><call><name>gnutls_strerror</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>gnutls_certificate_set_x509_system_trust</name><argument_list>(<argument><expr><name><name>qs</name><operator>-&gt;</operator><name>cred</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"gnutls_certificate_set_x509_system_trust failed: %s\n"</literal></expr></argument>,

<argument><expr><call><name>gnutls_strerror</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>gnutls_credentials_set</name><argument_list>(<argument><expr><name><name>qs</name><operator>-&gt;</operator><name>ssl</name></name></expr></argument>, <argument><expr><name>GNUTLS_CRD_CERTIFICATE</name></expr></argument>, <argument><expr><name><name>qs</name><operator>-&gt;</operator><name>cred</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"gnutls_credentials_set failed: %s\n"</literal></expr></argument>,

<argument><expr><call><name>gnutls_strerror</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<switch>switch<condition>(<expr><name><name>qs</name><operator>-&gt;</operator><name>version</name></name></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NGTCP2_PROTO_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>NGTCP2_PROTO_VER</name></expr>:</case>

<expr_stmt><expr><name><name>alpn</name><operator>.</operator><name>data</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>NGTCP2_ALPN_H3</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>alpn</name><operator>.</operator><name>size</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>NGTCP2_ALPN_H3</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<break>break;</break>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></switch>

<if_stmt><if>if<condition>(<expr><name><name>alpn</name><operator>.</operator><name>data</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gnutls_alpn_set_protocols</name><argument_list>(<argument><expr><name><name>qs</name><operator>-&gt;</operator><name>ssl</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>alpn</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>gnutls_server_name_set</name><argument_list>(<argument><expr><name><name>qs</name><operator>-&gt;</operator><name>ssl</name></name></expr></argument>, <argument><expr><name>GNUTLS_NAME_DNS</name></expr></argument>, <argument><expr><name>hostname</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>hostname</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cb_initial</name><parameter_list>(<parameter><decl><type><name>ngtcp2_conn</name> <modifier>*</modifier></type><name>quic</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user_data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>quicsocket</name></name> <modifier>*</modifier></type><name>qs</name> <init>= <expr><operator>(</operator>struct <name>quicsocket</name> <operator>*</operator><operator>)</operator><name>user_data</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><call><name>ngtcp2_crypto_read_write_crypto_data</name><argument_list>(

<argument><expr><name>quic</name></expr></argument>, <argument><expr><name><name>qs</name><operator>-&gt;</operator><name>ssl</name></name></expr></argument>, <argument><expr><name>NGTCP2_CRYPTO_LEVEL_INITIAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NGTCP2_ERR_CALLBACK_FAILURE</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>cb_recv_crypto_data</name><parameter_list>(<parameter><decl><type><name>ngtcp2_conn</name> <modifier>*</modifier></type><name>tconn</name></decl></parameter>, <parameter><decl><type><name>ngtcp2_crypto_level</name></type> <name>crypto_level</name></decl></parameter>,

<parameter><decl><type><name>uint64_t</name></type> <name>offset</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>datalen</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user_data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>quicsocket</name></name> <modifier>*</modifier></type><name>qs</name> <init>= <expr><operator>(</operator>struct <name>quicsocket</name> <operator>*</operator><operator>)</operator><name>user_data</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>offset</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>ngtcp2_crypto_read_write_crypto_data</name><argument_list>(<argument><expr><name>tconn</name></expr></argument>, <argument><expr><name><name>qs</name><operator>-&gt;</operator><name>ssl</name></name></expr></argument>, <argument><expr><name>crypto_level</name></expr></argument>, <argument><expr><name>data</name></expr></argument>,

<argument><expr><name>datalen</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NGTCP2_ERR_CRYPTO</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cb_handshake_completed</name><parameter_list>(<parameter><decl><type><name>ngtcp2_conn</name> <modifier>*</modifier></type><name>tconn</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user_data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>quicsocket</name></name> <modifier>*</modifier></type><name>qs</name> <init>= <expr><operator>(</operator>struct <name>quicsocket</name> <operator>*</operator><operator>)</operator><name>user_data</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>tconn</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name><name>qs</name><operator>-&gt;</operator><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"QUIC handshake is completed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>extend_stream_window</name><parameter_list>(<parameter><decl><type><name>ngtcp2_conn</name> <modifier>*</modifier></type><name>tconn</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>HTTP</name></name> <modifier>*</modifier></type><name>stream</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>thismuch</name> <init>= <expr><name><name>stream</name><operator>-&gt;</operator><name>unacked_window</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ngtcp2_conn_extend_max_stream_offset</name><argument_list>(<argument><expr><name>tconn</name></expr></argument>, <argument><expr><name><name>stream</name><operator>-&gt;</operator><name>stream3_id</name></name></expr></argument>, <argument><expr><name>thismuch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ngtcp2_conn_extend_max_offset</name><argument_list>(<argument><expr><name>tconn</name></expr></argument>, <argument><expr><name>thismuch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>unacked_window</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cb_recv_stream_data</name><parameter_list>(<parameter><decl><type><name>ngtcp2_conn</name> <modifier>*</modifier></type><name>tconn</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>stream_id</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>fin</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>offset</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>buflen</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user_data</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>stream_user_data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>quicsocket</name></name> <modifier>*</modifier></type><name>qs</name> <init>= <expr><operator>(</operator>struct <name>quicsocket</name> <operator>*</operator><operator>)</operator><name>user_data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>nconsumed</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>offset</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>stream_user_data</name></expr>;</expr_stmt>

<expr_stmt><expr><name>nconsumed</name> <operator>=</operator>

<call><name>nghttp3_conn_read_stream</name><argument_list>(<argument><expr><name><name>qs</name><operator>-&gt;</operator><name>h3conn</name></name></expr></argument>, <argument><expr><name>stream_id</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><name>fin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>nconsumed</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name><name>qs</name><operator>-&gt;</operator><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"nghttp3_conn_read_stream returned error: %s\n"</literal></expr></argument>,

<argument><expr><call><name>nghttp3_strerror</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>nconsumed</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NGTCP2_ERR_CALLBACK_FAILURE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ngtcp2_conn_extend_max_stream_offset</name><argument_list>(<argument><expr><name>tconn</name></expr></argument>, <argument><expr><name>stream_id</name></expr></argument>, <argument><expr><name>nconsumed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ngtcp2_conn_extend_max_offset</name><argument_list>(<argument><expr><name>tconn</name></expr></argument>, <argument><expr><name>nconsumed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>cb_acked_stream_data_offset</name><parameter_list>(<parameter><decl><type><name>ngtcp2_conn</name> <modifier>*</modifier></type><name>tconn</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>stream_id</name></decl></parameter>,

<parameter><decl><type><name>uint64_t</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>datalen</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user_data</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>stream_user_data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>quicsocket</name></name> <modifier>*</modifier></type><name>qs</name> <init>= <expr><operator>(</operator>struct <name>quicsocket</name> <operator>*</operator><operator>)</operator><name>user_data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rv</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>stream_id</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>tconn</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>offset</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>datalen</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>stream_user_data</name></expr>;</expr_stmt>

<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>nghttp3_conn_add_ack_offset</name><argument_list>(<argument><expr><name><name>qs</name><operator>-&gt;</operator><name>h3conn</name></name></expr></argument>, <argument><expr><name>stream_id</name></expr></argument>, <argument><expr><name>datalen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rv</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name><name>qs</name><operator>-&gt;</operator><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"nghttp3_conn_add_ack_offset returned error: %s\n"</literal></expr></argument>,

<argument><expr><call><name>nghttp3_strerror</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NGTCP2_ERR_CALLBACK_FAILURE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cb_stream_close</name><parameter_list>(<parameter><decl><type><name>ngtcp2_conn</name> <modifier>*</modifier></type><name>tconn</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>stream_id</name></decl></parameter>,

<parameter><decl><type><name>uint64_t</name></type> <name>app_error_code</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user_data</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>stream_user_data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>quicsocket</name></name> <modifier>*</modifier></type><name>qs</name> <init>= <expr><operator>(</operator>struct <name>quicsocket</name> <operator>*</operator><operator>)</operator><name>user_data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rv</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>tconn</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>stream_user_data</name></expr>;</expr_stmt>

<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>nghttp3_conn_close_stream</name><argument_list>(<argument><expr><name><name>qs</name><operator>-&gt;</operator><name>h3conn</name></name></expr></argument>, <argument><expr><name>stream_id</name></expr></argument>,

<argument><expr><name>app_error_code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rv</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name><name>qs</name><operator>-&gt;</operator><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"nghttp3_conn_close_stream returned error: %s\n"</literal></expr></argument>,

<argument><expr><call><name>nghttp3_strerror</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NGTCP2_ERR_CALLBACK_FAILURE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cb_stream_reset</name><parameter_list>(<parameter><decl><type><name>ngtcp2_conn</name> <modifier>*</modifier></type><name>tconn</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>stream_id</name></decl></parameter>,

<parameter><decl><type><name>uint64_t</name></type> <name>final_size</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>app_error_code</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user_data</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>stream_user_data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>quicsocket</name></name> <modifier>*</modifier></type><name>qs</name> <init>= <expr><operator>(</operator>struct <name>quicsocket</name> <operator>*</operator><operator>)</operator><name>user_data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rv</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>tconn</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>final_size</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>app_error_code</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>stream_user_data</name></expr>;</expr_stmt>

<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>nghttp3_conn_reset_stream</name><argument_list>(<argument><expr><name><name>qs</name><operator>-&gt;</operator><name>h3conn</name></name></expr></argument>, <argument><expr><name>stream_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rv</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name><name>qs</name><operator>-&gt;</operator><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"nghttp3_conn_reset_stream returned error: %s\n"</literal></expr></argument>,

<argument><expr><call><name>nghttp3_strerror</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NGTCP2_ERR_CALLBACK_FAILURE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cb_recv_retry</name><parameter_list>(<parameter><decl><type><name>ngtcp2_conn</name> <modifier>*</modifier></type><name>tconn</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ngtcp2_pkt_hd</name> <modifier>*</modifier></type><name>hd</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>ngtcp2_pkt_retry</name> <modifier>*</modifier></type><name>retry</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user_data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>quicsocket</name></name> <modifier>*</modifier></type><name>qs</name> <init>= <expr><operator>(</operator>struct <name>quicsocket</name> <operator>*</operator><operator>)</operator><name>user_data</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>tconn</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>hd</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>retry</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>setup_initial_crypto_context</name><argument_list>(<argument><expr><name>qs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cb_extend_max_local_streams_bidi</name><parameter_list>(<parameter><decl><type><name>ngtcp2_conn</name> <modifier>*</modifier></type><name>tconn</name></decl></parameter>,

<parameter><decl><type><name>uint64_t</name></type> <name>max_streams</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user_data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>tconn</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>max_streams</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>user_data</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cb_extend_max_stream_data</name><parameter_list>(<parameter><decl><type><name>ngtcp2_conn</name> <modifier>*</modifier></type><name>tconn</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>stream_id</name></decl></parameter>,

<parameter><decl><type><name>uint64_t</name></type> <name>max_data</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user_data</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>stream_user_data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>quicsocket</name></name> <modifier>*</modifier></type><name>qs</name> <init>= <expr><operator>(</operator>struct <name>quicsocket</name> <operator>*</operator><operator>)</operator><name>user_data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rv</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>tconn</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>max_data</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>stream_user_data</name></expr>;</expr_stmt>

<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>nghttp3_conn_unblock_stream</name><argument_list>(<argument><expr><name><name>qs</name><operator>-&gt;</operator><name>h3conn</name></name></expr></argument>, <argument><expr><name>stream_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rv</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name><name>qs</name><operator>-&gt;</operator><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"nghttp3_conn_unblock_stream returned error: %s\n"</literal></expr></argument>,

<argument><expr><call><name>nghttp3_strerror</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NGTCP2_ERR_CALLBACK_FAILURE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cb_get_new_connection_id</name><parameter_list>(<parameter><decl><type><name>ngtcp2_conn</name> <modifier>*</modifier></type><name>tconn</name></decl></parameter>, <parameter><decl><type><name>ngtcp2_cid</name> <modifier>*</modifier></type><name>cid</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>token</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>cidlen</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user_data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>quicsocket</name></name> <modifier>*</modifier></type><name>qs</name> <init>= <expr><operator>(</operator>struct <name>quicsocket</name> <operator>*</operator><operator>)</operator><name>user_data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>tconn</name></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_rand</name><argument_list>(<argument><expr><name><name>qs</name><operator>-&gt;</operator><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>cid</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>cidlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NGTCP2_ERR_CALLBACK_FAILURE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>cid</name><operator>-&gt;</operator><name>datalen</name></name> <operator>=</operator> <name>cidlen</name></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_rand</name><argument_list>(<argument><expr><name><name>qs</name><operator>-&gt;</operator><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>token</name></expr></argument>, <argument><expr><name>NGTCP2_STATELESS_RESET_TOKENLEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NGTCP2_ERR_CALLBACK_FAILURE</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>ngtcp2_conn_callbacks</name></type> <name>ng_callbacks</name> <init>= <expr><block>{

<expr><name>cb_initial</name></expr>,

<expr><name>NULL</name></expr>, 

<expr><name>cb_recv_crypto_data</name></expr>,

<expr><name>cb_handshake_completed</name></expr>,

<expr><name>NULL</name></expr>, 

<expr><name>ngtcp2_crypto_encrypt_cb</name></expr>,

<expr><name>ngtcp2_crypto_decrypt_cb</name></expr>,

<expr><name>ngtcp2_crypto_hp_mask_cb</name></expr>,

<expr><name>cb_recv_stream_data</name></expr>,

<expr><name>NULL</name></expr>, 

<expr><name>cb_acked_stream_data_offset</name></expr>,

<expr><name>NULL</name></expr>, 

<expr><name>cb_stream_close</name></expr>,

<expr><name>NULL</name></expr>, 

<expr><name>cb_recv_retry</name></expr>,

<expr><name>cb_extend_max_local_streams_bidi</name></expr>,

<expr><name>NULL</name></expr>, 

<expr><name>NULL</name></expr>, 

<expr><name>cb_get_new_connection_id</name></expr>,

<expr><name>NULL</name></expr>, 

<expr><name>ngtcp2_crypto_update_key_cb</name></expr>, 

<expr><name>NULL</name></expr>, 

<expr><name>NULL</name></expr>, 

<expr><name>cb_stream_reset</name></expr>,

<expr><name>NULL</name></expr>, 

<expr><name>NULL</name></expr>, 

<expr><name>cb_extend_max_stream_data</name></expr>,

<expr><name>NULL</name></expr>, 

<expr><name>NULL</name></expr> 

}</block></expr></init></decl>;</decl_stmt>

<function><type><name>CURLcode</name></type> <name>Curl_quic_connect</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,

<parameter><decl><type><name>curl_socket_t</name></type> <name>sockfd</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>sockindex</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type><name>addr</name></decl></parameter>,

<parameter><decl><type><name>socklen_t</name></type> <name>addrlen</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ngtcp2_path</name></type> <name>path</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>quicsocket</name></name> <modifier>*</modifier></type><name>qs</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>hequic</name><index>[<expr><name>sockindex</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>ipbuf</name><index>[<expr><literal type="number">40</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>port</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_OPENSSL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>paramsbuf</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ngtcp2_transport_params</name></type> <name>params</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>nwrite</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>qs</name><operator>-&gt;</operator><name>conn</name></name> <operator>=</operator> <name>conn</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>Curl_addr2string</name><argument_list>(<argument><expr><operator>(</operator>struct <name>sockaddr</name><operator>*</operator><operator>)</operator><name>addr</name></expr></argument>, <argument><expr><name>addrlen</name></expr></argument>, <argument><expr><name>ipbuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>port</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr><name>STRERROR_LEN</name></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"ssrem inet_ntop() failed with errno %d: %s"</literal></expr></argument>,

<argument><expr><name>SOCKERRNO</name></expr></argument>, <argument><expr><call><name>Curl_strerror</name><argument_list>(<argument><expr><name>SOCKERRNO</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_BAD_FUNCTION_ARGUMENT</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Connect socket %d over QUIC to %s:%ld\n"</literal></expr></argument>,

<argument><expr><name>sockfd</name></expr></argument>, <argument><expr><name>ipbuf</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>qs</name><operator>-&gt;</operator><name>version</name></name> <operator>=</operator> <name>NGTCP2_PROTO_VER</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_OPENSSL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>qs</name><operator>-&gt;</operator><name>sslctx</name></name> <operator>=</operator> <call><name>quic_ssl_ctx</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>qs</name><operator>-&gt;</operator><name>sslctx</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_QUIC_CONNECT_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if<condition>(<expr><call><name>quic_init_ssl</name><argument_list>(<argument><expr><name>qs</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_QUIC_CONNECT_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>qs</name><operator>-&gt;</operator><name>dcid</name><operator>.</operator><name>datalen</name></name> <operator>=</operator> <name>NGTCP2_MAX_CIDLEN</name></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_rand</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>qs</name><operator>-&gt;</operator><name>dcid</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name>NGTCP2_MAX_CIDLEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>qs</name><operator>-&gt;</operator><name>scid</name><operator>.</operator><name>datalen</name></name> <operator>=</operator> <name>NGTCP2_MAX_CIDLEN</name></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_rand</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>qs</name><operator>-&gt;</operator><name>scid</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name>NGTCP2_MAX_CIDLEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>quic_settings</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>qs</name><operator>-&gt;</operator><name>settings</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>buffer_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>qs</name><operator>-&gt;</operator><name>local_addrlen</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>qs</name><operator>-&gt;</operator><name>local_addr</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>getsockname</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>, <argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>qs</name><operator>-&gt;</operator><name>local_addr</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>qs</name><operator>-&gt;</operator><name>local_addrlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rv</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_QUIC_CONNECT_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ngtcp2_addr_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>path</name><operator>.</operator><name>local</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>qs</name><operator>-&gt;</operator><name>local_addr</name></name></expr></argument>, <argument><expr><name><name>qs</name><operator>-&gt;</operator><name>local_addrlen</name></name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ngtcp2_addr_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>path</name><operator>.</operator><name>remote</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><name>addr</name></expr></argument>, <argument><expr><name>addrlen</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NGTCP2_PROTO_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QUICVER</name></cpp:macro> <cpp:value>NGTCP2_PROTO_VER</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"unsupported ngtcp2 version"</cpp:literal></cpp:error>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>ngtcp2_conn_client_new</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>qs</name><operator>-&gt;</operator><name>qconn</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>qs</name><operator>-&gt;</operator><name>dcid</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>qs</name><operator>-&gt;</operator><name>scid</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>path</name></expr></argument>, <argument><expr><name>QUICVER</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>ng_callbacks</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>qs</name><operator>-&gt;</operator><name>settings</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>qs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_QUIC_CONNECT_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_OPENSSL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>ngtcp2_conn_get_local_transport_params</name><argument_list>(<argument><expr><name><name>qs</name><operator>-&gt;</operator><name>qconn</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>nwrite</name> <operator>=</operator> <call><name>ngtcp2_encode_transport_params</name><argument_list>(

<argument><expr><name>paramsbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>paramsbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NGTCP2_TRANSPORT_PARAMS_TYPE_CLIENT_HELLO</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>nwrite</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"ngtcp2_encode_transport_params: %s\n"</literal></expr></argument>,

<argument><expr><call><name>ngtcp2_strerror</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>nwrite</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_QUIC_CONNECT_ERROR</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>SSL_set_quic_transport_params</name><argument_list>(<argument><expr><name><name>qs</name><operator>-&gt;</operator><name>ssl</name></name></expr></argument>, <argument><expr><name>paramsbuf</name></expr></argument>, <argument><expr><name>nwrite</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_QUIC_CONNECT_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>setup_initial_crypto_context</name><argument_list>(<argument><expr><name>qs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_QUIC_CONNECT_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>Curl_quic_ver</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ngtcp2_info</name> <modifier>*</modifier></type><name>ng2</name> <init>= <expr><call><name>ngtcp2_version</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>nghttp3_info</name> <modifier>*</modifier></type><name>ht3</name> <init>= <expr><call><name>nghttp3_version</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>msnprintf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="string">"ngtcp2/%s nghttp3/%s"</literal></expr></argument>,

<argument><expr><name><name>ng2</name><operator>-&gt;</operator><name>version_str</name></name></expr></argument>, <argument><expr><name><name>ht3</name><operator>-&gt;</operator><name>version_str</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ng_getsock</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>curl_socket_t</name> <modifier>*</modifier></type><name>socks</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>SingleRequest</name></name> <modifier>*</modifier></type><name>k</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>req</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bitmap</name> <init>= <expr><name>GETSOCK_BLANK</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>socks</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>sock</name><index>[<expr><name>FIRSTSOCKET</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>bitmap</name> <operator>|=</operator> <call><name>GETSOCK_READSOCK</name><argument_list>(<argument><expr><name>FIRSTSOCKET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>k</name><operator>-&gt;</operator><name>keepon</name></name> <operator>&amp;</operator> <operator>(</operator><name>KEEP_SEND</name><operator>|</operator><name>KEEP_SEND_PAUSE</name><operator>)</operator><operator>)</operator> <operator>==</operator> <name>KEEP_SEND</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>bitmap</name> <operator>|=</operator> <call><name>GETSOCK_WRITESOCK</name><argument_list>(<argument><expr><name>FIRSTSOCKET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>bitmap</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ng_perform_getsock</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,

<parameter><decl><type><name>curl_socket_t</name> <modifier>*</modifier></type><name>socks</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>ng_getsock</name><argument_list>(<argument><expr><operator>(</operator>struct <name>connectdata</name> <operator>*</operator><operator>)</operator><name>conn</name></expr></argument>, <argument><expr><name>socks</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>ng_disconnect</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>dead_connection</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>quicsocket</name></name> <modifier>*</modifier></type><name>qs</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>hequic</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>dead_connection</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>qs</name><operator>-&gt;</operator><name>ssl</name></name></expr>)</condition><block type="pseudo"><block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_OPENSSL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>SSL_free</name><argument_list>(<argument><expr><name><name>qs</name><operator>-&gt;</operator><name>ssl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_GNUTLS</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<expr_stmt><expr><call><name>gnutls_deinit</name><argument_list>(<argument><expr><name><name>qs</name><operator>-&gt;</operator><name>ssl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_GNUTLS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name><name>qs</name><operator>-&gt;</operator><name>cred</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gnutls_certificate_free_credentials</name><argument_list>(<argument><expr><name><name>qs</name><operator>-&gt;</operator><name>cred</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>qs</name><operator>-&gt;</operator><name>crypto_data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>nghttp3_conn_del</name><argument_list>(<argument><expr><name><name>qs</name><operator>-&gt;</operator><name>h3conn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ngtcp2_conn_del</name><argument_list>(<argument><expr><name><name>qs</name><operator>-&gt;</operator><name>qconn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_OPENSSL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>SSL_CTX_free</name><argument_list>(<argument><expr><name><name>qs</name><operator>-&gt;</operator><name>sslctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name>ng_conncheck</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>checks_to_perform</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>conn</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>checks_to_perform</name></expr>;</expr_stmt>

<return>return <expr><name>CONNRESULT_NONE</name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>Curl_handler</name></name></type> <name>Curl_handler_http3</name> <init>= <expr><block>{

<expr><literal type="string">"HTTPS"</literal></expr>, 

<expr><name>ZERO_NULL</name></expr>, 

<expr><name>Curl_http</name></expr>, 

<expr><name>Curl_http_done</name></expr>, 

<expr><name>ZERO_NULL</name></expr>, 

<expr><name>ZERO_NULL</name></expr>, 

<expr><name>ZERO_NULL</name></expr>, 

<expr><name>ZERO_NULL</name></expr>, 

<expr><name>ng_getsock</name></expr>, 

<expr><name>ng_getsock</name></expr>, 

<expr><name>ZERO_NULL</name></expr>, 

<expr><name>ng_perform_getsock</name></expr>, 

<expr><name>ng_disconnect</name></expr>, 

<expr><name>ZERO_NULL</name></expr>, 

<expr><name>ng_conncheck</name></expr>, 

<expr><name>PORT_HTTP</name></expr>, 

<expr><name>CURLPROTO_HTTPS</name></expr>, 

<expr><name>PROTOPT_SSL</name> <operator>|</operator> <name>PROTOPT_STREAM</name></expr> 

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cb_h3_stream_close</name><parameter_list>(<parameter><decl><type><name>nghttp3_conn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>stream_id</name></decl></parameter>,

<parameter><decl><type><name>uint64_t</name></type> <name>app_error_code</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user_data</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>stream_user_data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name>stream_user_data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>HTTP</name></name> <modifier>*</modifier></type><name>stream</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>protop</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>conn</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>stream_id</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>app_error_code</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>user_data</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>H3BUGF</name><argument_list>(<argument><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"cb_h3_stream_close CALLED\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>closed</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_expire</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>EXPIRE_QUIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>drain</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OVERFLOWSIZE</name></cpp:macro> <cpp:value>1024</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>allocate_overflow</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>HTTP</name></name> <modifier>*</modifier></type><name>stream</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>length</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>maxleft</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>newsize</name></decl>;</decl_stmt>

<expr_stmt><expr><name>maxleft</name> <operator>=</operator> <name>CURL_MAX_READ_SIZE</name> <operator>-</operator> <name><name>stream</name><operator>-&gt;</operator><name>overflow_buflen</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>length</name> <operator>&gt;</operator> <name>maxleft</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Rejected %zu bytes of overflow data (max is %d)!"</literal></expr></argument>,

<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>overflow_buflen</name></name> <operator>+</operator> <name>length</name></expr></argument>, <argument><expr><name>CURL_MAX_READ_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>newsize</name> <operator>=</operator> <name><name>stream</name><operator>-&gt;</operator><name>overflow_buflen</name></name> <operator>+</operator> <name>length</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>newsize</name> <operator>&gt;</operator> <name><name>stream</name><operator>-&gt;</operator><name>overflow_bufsize</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>newbuff</name></decl>;</decl_stmt>

<expr_stmt><expr><name>newsize</name> <operator>=</operator> <call><name>CURLMAX</name><argument_list>(<argument><expr><name>newsize</name> <operator>*</operator> <literal type="number">3</literal> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name><name>stream</name><operator>-&gt;</operator><name>overflow_bufsize</name></name><operator>*</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>newsize</name> <operator>=</operator> <call><name>CURLMIN</name><argument_list>(<argument><expr><call><name>CURLMAX</name><argument_list>(<argument><expr><name>OVERFLOWSIZE</name></expr></argument>, <argument><expr><name>newsize</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>CURL_MAX_READ_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>newbuff</name> <operator>=</operator> <call><name>realloc</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>overflow_buf</name></name></expr></argument>, <argument><expr><name>newsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>newbuff</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Failed to alloc memory for overflow buffer!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>overflow_buf</name></name> <operator>=</operator> <name>newbuff</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>overflow_bufsize</name></name> <operator>=</operator> <name>newsize</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Grew HTTP/3 overflow buffer to %zu bytes\n"</literal></expr></argument>, <argument><expr><name>newsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>write_data</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>HTTP</name></name> <modifier>*</modifier></type><name>stream</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>mem</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>memlen</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name>mem</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>ncopy</name> <init>= <expr><name>memlen</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>len</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>CURLMIN</name><argument_list>(<argument><expr><name>ncopy</name></expr></argument>, <argument><expr><name><name>stream</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if> 

fprintf(stderr, "!! Copies %zd bytes to %p (total %zd)\n",

len, stream-&gt;mem, stream-&gt;memlen);

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>mem</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>len</name></name> <operator>-=</operator> <name>len</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>memlen</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>mem</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>

<expr_stmt><expr><name>buf</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ncopy</name> <operator>-=</operator> <name>len</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>ncopy</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>allocate_overflow</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>stream</name></expr></argument>, <argument><expr><name>ncopy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if> 

fprintf(stderr, "!! Copies %zd overflow bytes to %p (total %zd)\n",

ncopy, stream-&gt;overflow_buf, stream-&gt;overflow_buflen);

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>overflow_buf</name></name> <operator>+</operator> <name><name>stream</name><operator>-&gt;</operator><name>overflow_buflen</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>ncopy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>overflow_buflen</name></name> <operator>+=</operator> <name>ncopy</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if> 

{

size_t i;

for(i = 0; i &lt; memlen; i++) {

fprintf(stderr, "!! data[%d]: %02x '%c'\n", i, buf[i], buf[i]);

}

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cb_h3_recv_data</name><parameter_list>(<parameter><decl><type><name>nghttp3_conn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>stream_id</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>buflen</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user_data</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>stream_user_data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name>stream_user_data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>HTTP</name></name> <modifier>*</modifier></type><name>stream</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>protop</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>conn</name></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>write_data</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>stream</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>unacked_window</name></name> <operator>+=</operator> <name>buflen</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>stream_id</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>user_data</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cb_h3_deferred_consume</name><parameter_list>(<parameter><decl><type><name>nghttp3_conn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>stream_id</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>consumed</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user_data</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>stream_user_data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>quicsocket</name></name> <modifier>*</modifier></type><name>qs</name> <init>= <expr><name>user_data</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>conn</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>stream_user_data</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>stream_id</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ngtcp2_conn_extend_max_stream_offset</name><argument_list>(<argument><expr><name><name>qs</name><operator>-&gt;</operator><name>qconn</name></name></expr></argument>, <argument><expr><name>stream_id</name></expr></argument>, <argument><expr><name>consumed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ngtcp2_conn_extend_max_offset</name><argument_list>(<argument><expr><name><name>qs</name><operator>-&gt;</operator><name>qconn</name></name></expr></argument>, <argument><expr><name>consumed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_status_code</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>len</name> <operator>!=</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name>c</name> <init>= <expr><name><name>value</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>c</name> <argument_list type="generic">&lt; <argument><expr><literal type="char">'0'</literal> <operator>||</operator> <name>c</name></expr></argument> &gt;</argument_list></name> <literal type="char">'9'</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>res</name> <operator>*=</operator> <literal type="number">10</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>+=</operator> <name>c</name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cb_h3_end_headers</name><parameter_list>(<parameter><decl><type><name>nghttp3_conn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>stream_id</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user_data</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>stream_user_data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name>stream_user_data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>HTTP</name></name> <modifier>*</modifier></type><name>stream</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>protop</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>conn</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>stream_id</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>user_data</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>firstheader</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>write_data</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">"\r\n"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cb_h3_recv_header</name><parameter_list>(<parameter><decl><type><name>nghttp3_conn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>stream_id</name></decl></parameter>,

<parameter><decl><type><name>int32_t</name></type> <name>token</name></decl></parameter>, <parameter><decl><type><name>nghttp3_rcbuf</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,

<parameter><decl><type><name>nghttp3_rcbuf</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>flags</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user_data</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>stream_user_data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>nghttp3_vec</name></type> <name>h3name</name> <init>= <expr><call><name>nghttp3_rcbuf_get_buf</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>nghttp3_vec</name></type> <name>h3val</name> <init>= <expr><call><name>nghttp3_rcbuf_get_buf</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name>stream_user_data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>HTTP</name></name> <modifier>*</modifier></type><name>stream</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>protop</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>conn</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>stream_id</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>token</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>flags</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>user_data</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>h3name</name><operator>.</operator><name>len</name></name> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><literal type="string">":status"</literal></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator>

<operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><literal type="string">":status"</literal></expr></argument>, <argument><expr><name><name>h3name</name><operator>.</operator><name>base</name></name></expr></argument>, <argument><expr><name><name>h3name</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>line</name><index>[<expr><literal type="number">14</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>size_t</name></type> <name>ncopy</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>status</name> <init>= <expr><call><name>decode_status_code</name><argument_list>(<argument><expr><name><name>h3val</name><operator>.</operator><name>base</name></name></expr></argument>, <argument><expr><name><name>h3val</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DEBUGASSERT</name><argument_list>(<argument><expr><name>status</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ncopy</name> <operator>=</operator> <call><name>msnprintf</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"HTTP/3 %03d \r\n"</literal></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>write_data</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>stream</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>ncopy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>write_data</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>stream</name></expr></argument>, <argument><expr><name><name>h3name</name><operator>.</operator><name>base</name></name></expr></argument>, <argument><expr><name><name>h3name</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>write_data</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">": "</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>write_data</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>stream</name></expr></argument>, <argument><expr><name><name>h3val</name><operator>.</operator><name>base</name></name></expr></argument>, <argument><expr><name><name>h3val</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>write_data</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">"\r\n"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>firstheader</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cb_h3_send_stop_sending</name><parameter_list>(<parameter><decl><type><name>nghttp3_conn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>stream_id</name></decl></parameter>,

<parameter><decl><type><name>uint64_t</name></type> <name>app_error_code</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user_data</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>stream_user_data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>conn</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>stream_id</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>app_error_code</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>user_data</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>stream_user_data</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>nghttp3_conn_callbacks</name></type> <name>ngh3_callbacks</name> <init>= <expr><block>{

<expr><name>cb_h3_acked_stream_data</name></expr>, 

<expr><name>cb_h3_stream_close</name></expr>,

<expr><name>cb_h3_recv_data</name></expr>,

<expr><name>cb_h3_deferred_consume</name></expr>,

<expr><name>NULL</name></expr>, 

<expr><name>cb_h3_recv_header</name></expr>,

<expr><name>cb_h3_end_headers</name></expr>,

<expr><name>NULL</name></expr>, 

<expr><name>cb_h3_recv_header</name></expr>,

<expr><name>NULL</name></expr>, 

<expr><name>NULL</name></expr>, 

<expr><name>NULL</name></expr>, 

<expr><name>NULL</name></expr>, 

<expr><name>NULL</name></expr>, 

<expr><name>cb_h3_send_stop_sending</name></expr>,

<expr><name>NULL</name></expr>, 

<expr><name>NULL</name></expr>, 

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>init_ngh3_conn</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>quicsocket</name></name> <modifier>*</modifier></type><name>qs</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>ctrl_stream_id</name></decl>, <decl><type ref="prev"/><name>qpack_enc_stream_id</name></decl>, <decl><type ref="prev"/><name>qpack_dec_stream_id</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><call><name>ngtcp2_conn_get_max_local_streams_uni</name><argument_list>(<argument><expr><name><name>qs</name><operator>-&gt;</operator><name>qconn</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name><name>qs</name><operator>-&gt;</operator><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"too few available QUIC streams"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_QUIC_CONNECT_ERROR</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>nghttp3_conn_settings_default</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>qs</name><operator>-&gt;</operator><name>h3settings</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>nghttp3_conn_client_new</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>qs</name><operator>-&gt;</operator><name>h3conn</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>ngh3_callbacks</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>qs</name><operator>-&gt;</operator><name>h3settings</name></name></expr></argument>,

<argument><expr><call><name>nghttp3_mem_default</name><argument_list>()</argument_list></call></expr></argument>,

<argument><expr><name>qs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_OUT_OF_MEMORY</name></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>ngtcp2_conn_open_uni_stream</name><argument_list>(<argument><expr><name><name>qs</name><operator>-&gt;</operator><name>qconn</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ctrl_stream_id</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_QUIC_CONNECT_ERROR</name></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>nghttp3_conn_bind_control_stream</name><argument_list>(<argument><expr><name><name>qs</name><operator>-&gt;</operator><name>h3conn</name></name></expr></argument>, <argument><expr><name>ctrl_stream_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_QUIC_CONNECT_ERROR</name></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>ngtcp2_conn_open_uni_stream</name><argument_list>(<argument><expr><name><name>qs</name><operator>-&gt;</operator><name>qconn</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>qpack_enc_stream_id</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_QUIC_CONNECT_ERROR</name></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>ngtcp2_conn_open_uni_stream</name><argument_list>(<argument><expr><name><name>qs</name><operator>-&gt;</operator><name>qconn</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>qpack_dec_stream_id</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_QUIC_CONNECT_ERROR</name></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>nghttp3_conn_bind_qpack_streams</name><argument_list>(<argument><expr><name><name>qs</name><operator>-&gt;</operator><name>h3conn</name></name></expr></argument>, <argument><expr><name>qpack_enc_stream_id</name></expr></argument>,

<argument><expr><name>qpack_dec_stream_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_QUIC_CONNECT_ERROR</name></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

<label><name>fail</name>:</label>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>Curl_recv</name></type> <name>ngh3_stream_recv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>Curl_send</name></type> <name>ngh3_stream_send</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>size_t</name></type> <name>drain_overflow_buffer</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>HTTP</name></name> <modifier>*</modifier></type><name>stream</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>ncopy</name> <init>= <expr><call><name>CURLMIN</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>overflow_buflen</name></name></expr></argument>, <argument><expr><name><name>stream</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>ncopy</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>mem</name></name></expr></argument>, <argument><expr><name><name>stream</name><operator>-&gt;</operator><name>overflow_buf</name></name></expr></argument>, <argument><expr><name>ncopy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>len</name></name> <operator>-=</operator> <name>ncopy</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>mem</name></name> <operator>+=</operator> <name>ncopy</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>memlen</name></name> <operator>+=</operator> <name>ncopy</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>overflow_buflen</name></name> <operator>-=</operator> <name>ncopy</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>overflow_buf</name></name></expr></argument>, <argument><expr><name><name>stream</name><operator>-&gt;</operator><name>overflow_buf</name></name> <operator>+</operator> <name>ncopy</name></expr></argument>,

<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>overflow_buflen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>ncopy</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ssize_t</name></type> <name>ngh3_stream_recv</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>sockindex</name></decl></parameter>,

<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>buffersize</name></decl></parameter>,

<parameter><decl><type><name>CURLcode</name> <modifier>*</modifier></type><name>curlcode</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>curl_socket_t</name></type> <name>sockfd</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>sock</name><index>[<expr><name>sockindex</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>HTTP</name></name> <modifier>*</modifier></type><name>stream</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>protop</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>quicsocket</name></name> <modifier>*</modifier></type><name>qs</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>quic</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>stream</name><operator>-&gt;</operator><name>memlen</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>mem</name></name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name>buffersize</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>drain_overflow_buffer</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>ng_process_ingress</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>sockfd</name></expr></argument>, <argument><expr><name>qs</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>curlcode</name> <operator>=</operator> <name>CURLE_RECV_ERROR</name></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>ng_flush_egress</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>sockfd</name></expr></argument>, <argument><expr><name>qs</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>curlcode</name> <operator>=</operator> <name>CURLE_SEND_ERROR</name></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>memlen</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>memlen</name> <init>= <expr><name><name>stream</name><operator>-&gt;</operator><name>memlen</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>curlcode</name> <operator>=</operator> <name>CURLE_OK</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>memlen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>mem</name></name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name>buffersize</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>extend_stream_window</name><argument_list>(<argument><expr><name><name>qs</name><operator>-&gt;</operator><name>qconn</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>ng_flush_egress</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>sockfd</name></expr></argument>, <argument><expr><name>qs</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>curlcode</name> <operator>=</operator> <name>CURLE_SEND_ERROR</name></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>memlen</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>closed</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>curlcode</name> <operator>=</operator> <name>CURLE_OK</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"ngh3_stream_recv returns 0 bytes and EAGAIN\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>curlcode</name> <operator>=</operator> <name>CURLE_AGAIN</name></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cb_h3_acked_stream_data</name><parameter_list>(<parameter><decl><type><name>nghttp3_conn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>stream_id</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>datalen</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user_data</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>stream_user_data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name>stream_user_data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>HTTP</name></name> <modifier>*</modifier></type><name>stream</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>protop</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>conn</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>stream_id</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>user_data</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>postfields</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>h3out</name><operator>-&gt;</operator><name>used</name></name> <operator>-=</operator> <name>datalen</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>H3BUGF</name><argument_list>(<argument><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>,

<argument><expr><literal type="string">"cb_h3_acked_stream_data, %zd bytes, %zd left unacked\n"</literal></expr></argument>,

<argument><expr><name>datalen</name></expr></argument>, <argument><expr><name><name>stream</name><operator>-&gt;</operator><name>h3out</name><operator>-&gt;</operator><name>used</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DEBUGASSERT</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>h3out</name><operator>-&gt;</operator><name>used</name></name> <operator>&lt;</operator> <name>H3_SEND_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ssize_t</name></type> <name>cb_h3_readfunction</name><parameter_list>(<parameter><decl><type><name>nghttp3_conn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>stream_id</name></decl></parameter>,

<parameter><decl><type><name>nghttp3_vec</name> <modifier>*</modifier></type><name>vec</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>veccnt</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>pflags</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user_data</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>stream_user_data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name>stream_user_data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>nread</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>HTTP</name></name> <modifier>*</modifier></type><name>stream</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>protop</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>conn</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>stream_id</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>user_data</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>veccnt</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>postfields</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>vec</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>base</name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>postfields</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vec</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>len</name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>infilesize</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pflags</name> <operator>=</operator> <name>NGHTTP3_DATA_FLAG_EOF</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>nread</name> <operator>=</operator> <call><name>CURLMIN</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>upload_len</name></name></expr></argument>, <argument><expr><name>H3_SEND_SIZE</name> <operator>-</operator> <name><name>stream</name><operator>-&gt;</operator><name>h3out</name><operator>-&gt;</operator><name>used</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>nread</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>h3out</name></name> <modifier>*</modifier></type><name>out</name> <init>= <expr><name><name>stream</name><operator>-&gt;</operator><name>h3out</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>nread</name> <operator>+</operator> <name><name>out</name><operator>-&gt;</operator><name>windex</name></name> <operator>&gt;</operator> <name>H3_SEND_SIZE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>nread</name> <operator>=</operator> <name>H3_SEND_SIZE</name> <operator>-</operator> <name><name>out</name><operator>-&gt;</operator><name>windex</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>out</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name><name>out</name><operator>-&gt;</operator><name>windex</name></name></expr>]</index></name></expr></argument>, <argument><expr><name><name>stream</name><operator>-&gt;</operator><name>upload_mem</name></name></expr></argument>, <argument><expr><name>nread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>windex</name></name> <operator>+=</operator> <name>nread</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>used</name></name> <operator>+=</operator> <name>nread</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vec</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>base</name> <operator>=</operator> <operator>&amp;</operator><name><name>out</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name><name>out</name><operator>-&gt;</operator><name>windex</name></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vec</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>len</name> <operator>=</operator> <name>nread</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>out</name><operator>-&gt;</operator><name>windex</name></name> <operator>==</operator> <name>H3_SEND_SIZE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>windex</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>upload_mem</name></name> <operator>+=</operator> <name>nread</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>upload_len</name></name> <operator>-=</operator> <name>nread</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>infilesize</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>upload_left</name></name> <operator>-=</operator> <name>nread</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>stream</name><operator>-&gt;</operator><name>upload_left</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>pflags</name> <operator>=</operator> <name>NGHTTP3_DATA_FLAG_EOF</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>H3BUGF</name><argument_list>(<argument><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"cb_h3_readfunction %zd bytes%s (at %zd unacked)\n"</literal></expr></argument>,

<argument><expr><name>nread</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>*</operator><name>pflags</name> <operator>==</operator> <name>NGHTTP3_DATA_FLAG_EOF</name></expr>?</condition><then><expr><literal type="string">" EOF"</literal></expr></then><else>:<expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,

<argument><expr><name><name>out</name><operator>-&gt;</operator><name>used</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>upload_done</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>stream</name><operator>-&gt;</operator><name>upload_len</name></name> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>stream</name><operator>-&gt;</operator><name>upload_left</name></name> <operator>&lt;=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>H3BUGF</name><argument_list>(<argument><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"!!!!!!!!! cb_h3_readfunction sets EOF\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pflags</name> <operator>=</operator> <name>NGHTTP3_DATA_FLAG_EOF</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><operator>!</operator><name>nread</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NGHTTP3_ERR_WOULDBLOCK</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AUTHORITY_DST_IDX</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>http_request</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>mem</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>HTTP</name></name> <modifier>*</modifier></type><name>stream</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>protop</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>nheader</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>authority_idx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>hdbuf</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>mem</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>end</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>line_end</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>quicsocket</name></name> <modifier>*</modifier></type><name>qs</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>quic</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>nghttp3_nv</name> <modifier>*</modifier></type><name>nva</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>stream3_id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>h3out</name></name> <modifier>*</modifier></type><name>h3out</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>ngtcp2_conn_open_bidi_stream</name><argument_list>(<argument><expr><name><name>qs</name><operator>-&gt;</operator><name>qconn</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stream3_id</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"can get bidi streams"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_SEND_ERROR</name></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>stream3_id</name></name> <operator>=</operator> <name>stream3_id</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>h3req</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt> 

<expr_stmt><expr><name>nheader</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>hdbuf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal> <operator>&amp;&amp;</operator> <name><name>hdbuf</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\r'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>++</operator><name>nheader</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if<condition>(<expr><name>nheader</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>nheader</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>nva</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>nghttp3_nv</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>nheader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>nva</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_OUT_OF_MEMORY</name></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>line_end</name> <operator>=</operator> <call><name>memchr</name><argument_list>(<argument><expr><name>hdbuf</name></expr></argument>, <argument><expr><literal type="char">'\r'</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>line_end</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_BAD_FUNCTION_ARGUMENT</name></expr>;</expr_stmt> 

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>end</name> <operator>=</operator> <call><name>memchr</name><argument_list>(<argument><expr><name>hdbuf</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><name>line_end</name> <operator>-</operator> <name>hdbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>end</name> <operator>||</operator> <name>end</name> <operator>==</operator> <name>hdbuf</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>nva</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>name</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><literal type="string">":method"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>nva</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>namelen</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>nva</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>nva</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>hdbuf</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>nva</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>valuelen</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>end</name> <operator>-</operator> <name>hdbuf</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>nva</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>flags</name> <operator>=</operator> <name>NGHTTP3_NV_FLAG_NONE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>hdbuf</name> <operator>=</operator> <name>end</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>end</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>line_end</name> <operator>-</operator> <name>hdbuf</name><operator>)</operator></expr>;</init> <condition><expr><name>i</name></expr>;</condition> <incr><expr><operator>--</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>hdbuf</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>end</name> <operator>=</operator> <operator>&amp;</operator><name><name>hdbuf</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>end</name> <operator>||</operator> <name>end</name> <operator>==</operator> <name>hdbuf</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>nva</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>name</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><literal type="string">":path"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>nva</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>namelen</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>nva</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>nva</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>hdbuf</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>nva</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>valuelen</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>end</name> <operator>-</operator> <name>hdbuf</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>nva</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>flags</name> <operator>=</operator> <name>NGHTTP3_NV_FLAG_NONE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>nva</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>name</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><literal type="string">":scheme"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>nva</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>namelen</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>nva</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>handler</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>PROTOPT_SSL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>nva</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><literal type="string">"https"</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>nva</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><literal type="string">"http"</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>nva</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>valuelen</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>nva</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>nva</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>flags</name> <operator>=</operator> <name>NGHTTP3_NV_FLAG_NONE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>authority_idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<while>while<condition>(<expr><name>i</name> <operator>&lt;</operator> <name>nheader</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>hlen</name></decl>;</decl_stmt>

<expr_stmt><expr><name>hdbuf</name> <operator>=</operator> <name>line_end</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>line_end</name> <operator>=</operator> <call><name>memchr</name><argument_list>(<argument><expr><name>hdbuf</name></expr></argument>, <argument><expr><literal type="char">'\r'</literal></expr></argument>, <argument><expr><name>len</name> <operator>-</operator> <operator>(</operator><name>hdbuf</name> <operator>-</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>mem</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>line_end</name> <operator>||</operator> <operator>(</operator><name>line_end</name> <operator>==</operator> <name>hdbuf</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>*</operator><name>hdbuf</name> <operator>==</operator> <literal type="char">' '</literal> <operator>||</operator> <operator>*</operator><name>hdbuf</name> <operator>==</operator> <literal type="char">'\t'</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<for>for<control>(<init><expr><name>end</name> <operator>=</operator> <name>hdbuf</name></expr>;</init> <condition><expr><name>end</name> <operator>&lt;</operator> <name>line_end</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>end</name> <operator>!=</operator> <literal type="char">':'</literal></expr>;</condition> <incr><expr><operator>++</operator><name>end</name></expr></incr>)</control><block type="pseudo"><block_content>

<empty_stmt>;</empty_stmt></block_content></block></for>

<if_stmt><if>if<condition>(<expr><name>end</name> <operator>==</operator> <name>hdbuf</name> <operator>||</operator> <name>end</name> <operator>==</operator> <name>line_end</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>hlen</name> <operator>=</operator> <name>end</name> <operator>-</operator> <name>hdbuf</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>hlen</name> <operator>==</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <call><name>strncasecompare</name><argument_list>(<argument><expr><literal type="string">"host"</literal></expr></argument>, <argument><expr><name>hdbuf</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>authority_idx</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>nva</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><literal type="string">":authority"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>nva</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>namelen</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>nva</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name><name>nva</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>namelen</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>end</name> <operator>-</operator> <name>hdbuf</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_strntolower</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>hdbuf</name></expr></argument>, <argument><expr><name>hdbuf</name></expr></argument>, <argument><expr><name><name>nva</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>namelen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>nva</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>hdbuf</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>nva</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>=</operator> <name>NGHTTP3_NV_FLAG_NONE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>hdbuf</name> <operator>=</operator> <name>end</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<while>while<condition>(<expr><operator>*</operator><name>hdbuf</name> <operator>==</operator> <literal type="char">' '</literal> <operator>||</operator> <operator>*</operator><name>hdbuf</name> <operator>==</operator> <literal type="char">'\t'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>hdbuf</name></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name>end</name> <operator>=</operator> <name>line_end</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if> 

switch(inspect_header((const char *)nva[i].name, nva[i].namelen, hdbuf,

end - hdbuf)) {

case HEADERINST_IGNORE:

--nheader;

continue;

case HEADERINST_TE_TRAILERS:

nva[i].value = (uint8_t*)"trailers";

nva[i].value_len = sizeof("trailers") - 1;

break;

default:

nva[i].value = (unsigned char *)hdbuf;

nva[i].value_len = (size_t)(end - hdbuf);

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>nva</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>hdbuf</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>nva</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>valuelen</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>end</name> <operator>-</operator> <name>hdbuf</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>nva</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>=</operator> <name>NGHTTP3_NV_FLAG_NONE</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if<condition>(<expr><name>authority_idx</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>authority_idx</name> <operator>!=</operator> <name>AUTHORITY_DST_IDX</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>nghttp3_nv</name></type> <name>authority</name> <init>= <expr><name><name>nva</name><index>[<expr><name>authority_idx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <name>authority_idx</name></expr>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <name>AUTHORITY_DST_IDX</name></expr>;</condition> <incr><expr><operator>--</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>nva</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>nva</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>nva</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>authority</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_ACC</name></cpp:macro> <cpp:value>60000</cpp:value></cpp:define> 

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>acc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nheader</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>acc</name> <operator>+=</operator> <name><name>nva</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>namelen</name> <operator>+</operator> <name><name>nva</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>valuelen</name></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if<condition>(<expr><name>acc</name> <operator>&gt;</operator> <name>MAX_ACC</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"http_request: Warning: The cumulative length of all "</literal>

<literal type="string">"headers exceeds %zu bytes and that could cause the "</literal>

<literal type="string">"stream to be rejected.\n"</literal></expr></argument>, <argument><expr><name>MAX_ACC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<switch>switch<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>httpreq</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>HTTPREQ_POST</name></expr>:</case>

<case>case <expr><name>HTTPREQ_POST_FORM</name></expr>:</case>

<case>case <expr><name>HTTPREQ_POST_MIME</name></expr>:</case>

<case>case <expr><name>HTTPREQ_PUT</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>nghttp3_data_reader</name></type> <name>data_reader</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>infilesize</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>upload_left</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>infilesize</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>upload_left</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt> 

<expr_stmt><expr><name><name>data_reader</name><operator>.</operator><name>read_data</name></name> <operator>=</operator> <name>cb_h3_readfunction</name></expr>;</expr_stmt>

<expr_stmt><expr><name>h3out</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>h3out</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>h3out</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_OUT_OF_MEMORY</name></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>h3out</name></name> <operator>=</operator> <name>h3out</name></expr>;</expr_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>nghttp3_conn_submit_request</name><argument_list>(<argument><expr><name><name>qs</name><operator>-&gt;</operator><name>h3conn</name></name></expr></argument>, <argument><expr><name><name>stream</name><operator>-&gt;</operator><name>stream3_id</name></name></expr></argument>,

<argument><expr><name>nva</name></expr></argument>, <argument><expr><name>nheader</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data_reader</name></expr></argument>,

<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_SEND_ERROR</name></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block>

<default>default:</default>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>upload_left</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>nghttp3_conn_submit_request</name><argument_list>(<argument><expr><name><name>qs</name><operator>-&gt;</operator><name>h3conn</name></name></expr></argument>, <argument><expr><name><name>stream</name><operator>-&gt;</operator><name>stream3_id</name></name></expr></argument>,

<argument><expr><name>nva</name></expr></argument>, <argument><expr><name>nheader</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, 

<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_SEND_ERROR</name></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name>nva</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Using HTTP/3 Stream ID: %x (easy handle %p)\n"</literal></expr></argument>,

<argument><expr><name>stream3_id</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

<label><name>fail</name>:</label>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>nva</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ssize_t</name></type> <name>ngh3_stream_send</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>sockindex</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>mem</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>,

<parameter><decl><type><name>CURLcode</name> <modifier>*</modifier></type><name>curlcode</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>sent</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>quicsocket</name></name> <modifier>*</modifier></type><name>qs</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>quic</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>curl_socket_t</name></type> <name>sockfd</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>sock</name><index>[<expr><name>sockindex</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>HTTP</name></name> <modifier>*</modifier></type><name>stream</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>protop</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>stream</name><operator>-&gt;</operator><name>h3req</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><call><name>http_request</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>mem</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>curlcode</name> <operator>=</operator> <name>CURLE_SEND_ERROR</name></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>sent</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>H3BUGF</name><argument_list>(<argument><expr><call><name>infof</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"ngh3_stream_send() wants to send %zd bytes\n"</literal></expr></argument>,

<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>stream</name><operator>-&gt;</operator><name>upload_len</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>upload_mem</name></name> <operator>=</operator> <name>mem</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>upload_len</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>nghttp3_conn_resume_stream</name><argument_list>(<argument><expr><name><name>qs</name><operator>-&gt;</operator><name>h3conn</name></name></expr></argument>, <argument><expr><name><name>stream</name><operator>-&gt;</operator><name>stream3_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sent</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>curlcode</name> <operator>=</operator> <name>CURLE_AGAIN</name></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>ng_flush_egress</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>sockfd</name></expr></argument>, <argument><expr><name>qs</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>curlcode</name> <operator>=</operator> <name>CURLE_SEND_ERROR</name></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>curlcode</name> <operator>=</operator> <name>CURLE_OK</name></expr>;</expr_stmt>

<return>return <expr><name>sent</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ng_has_connected</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tempindex</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>recv</name><index>[<expr><name>FIRSTSOCKET</name></expr>]</index></name> <operator>=</operator> <name>ngh3_stream_recv</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>send</name><index>[<expr><name>FIRSTSOCKET</name></expr>]</index></name> <operator>=</operator> <name>ngh3_stream_send</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>handler</name></name> <operator>=</operator> <operator>&amp;</operator><name>Curl_handler_http3</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>multiplex</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>httpversion</name></name> <operator>=</operator> <literal type="number">30</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>bundle</name><operator>-&gt;</operator><name>multiuse</name></name> <operator>=</operator> <name>BUNDLE_MULTIPLEX</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>quic</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>hequic</name><index>[<expr><name>tempindex</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DEBUGF</name><argument_list>(<argument><expr><call><name>infof</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"ngtcp2 established connection!\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>CURLcode</name></type> <name>Curl_quic_is_connected</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>sockindex</name></decl></parameter>,

<parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>done</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>quicsocket</name></name> <modifier>*</modifier></type><name>qs</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>hequic</name><index>[<expr><name>sockindex</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>curl_socket_t</name></type> <name>sockfd</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>tempsock</name><index>[<expr><name>sockindex</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>ng_process_ingress</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>sockfd</name></expr></argument>, <argument><expr><name>qs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>ng_flush_egress</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>sockfd</name></expr></argument>, <argument><expr><name>qs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>ngtcp2_conn_get_handshake_completed</name><argument_list>(<argument><expr><name><name>qs</name><operator>-&gt;</operator><name>qconn</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>done</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ng_has_connected</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>sockindex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>ng_process_ingress</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sockfd</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>quicsocket</name></name> <modifier>*</modifier></type><name>qs</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>recvd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>buf</name><index>[<expr><literal type="number">65536</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>bufsize</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_storage</name></name></type> <name>remote_addr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>socklen_t</name></type> <name>remote_addrlen</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ngtcp2_path</name></type> <name>path</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ngtcp2_tstamp</name></type> <name>ts</name> <init>= <expr><call><name>timestamp</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for<control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<expr_stmt><expr><name>remote_addrlen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>remote_addr</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<while>while<condition>(<expr><operator>(</operator><name>recvd</name> <operator>=</operator> <call><name>recvfrom</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>bufsize</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>remote_addr</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>remote_addrlen</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator>

<name>SOCKERRNO</name> <operator>==</operator> <name>EINTR</name></expr>)</condition><block type="pseudo"><block_content>

<empty_stmt>;</empty_stmt></block_content></block></while>

<if_stmt><if>if<condition>(<expr><name>recvd</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>SOCKERRNO</name> <operator>==</operator> <name>EAGAIN</name> <operator>||</operator> <name>SOCKERRNO</name> <operator>==</operator> <name>EWOULDBLOCK</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"ngtcp2: recvfrom() unexpectedly returned %d"</literal></expr></argument>, <argument><expr><name>recvd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_RECV_ERROR</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ngtcp2_addr_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>path</name><operator>.</operator><name>local</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>qs</name><operator>-&gt;</operator><name>local_addr</name></name></expr></argument>,

<argument><expr><name><name>qs</name><operator>-&gt;</operator><name>local_addrlen</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ngtcp2_addr_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>path</name><operator>.</operator><name>remote</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>remote_addr</name></expr></argument>, <argument><expr><name>remote_addrlen</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>ngtcp2_conn_read_pkt</name><argument_list>(<argument><expr><name><name>qs</name><operator>-&gt;</operator><name>qconn</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>path</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>recvd</name></expr></argument>, <argument><expr><name>ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rv</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>CURLE_RECV_ERROR</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>ng_flush_egress</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sockfd</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>quicsocket</name></name> <modifier>*</modifier></type><name>qs</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>rv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>sent</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>outlen</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>out</name><index>[<expr><name>NGTCP2_MAX_PKTLEN_IPV4</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>pktlen</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ngtcp2_path_storage</name></type> <name>ps</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ngtcp2_tstamp</name></type> <name>ts</name> <init>= <expr><call><name>timestamp</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_storage</name></name></type> <name>remote_addr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ngtcp2_tstamp</name></type> <name>expiry</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ngtcp2_duration</name></type> <name>timeout</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>stream_id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>veccnt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>fin</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>nghttp3_vec</name></type> <name><name>vec</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>ndatalen</name></decl>;</decl_stmt>

<switch>switch<condition>(<expr><name><name>qs</name><operator>-&gt;</operator><name>local_addr</name><operator>.</operator><name>ss_family</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AF_INET</name></expr>:</case>

<expr_stmt><expr><name>pktlen</name> <operator>=</operator> <name>NGTCP2_MAX_PKTLEN_IPV4</name></expr>;</expr_stmt>

<break>break;</break>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_IPV6</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>AF_INET6</name></expr>:</case>

<expr_stmt><expr><name>pktlen</name> <operator>=</operator> <name>NGTCP2_MAX_PKTLEN_IPV6</name></expr>;</expr_stmt>

<break>break;</break>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<default>default:</default>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>ngtcp2_conn_handle_expiry</name><argument_list>(<argument><expr><name><name>qs</name><operator>-&gt;</operator><name>qconn</name></name></expr></argument>, <argument><expr><name>ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rv</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"ngtcp2_conn_handle_expiry returned error: %s\n"</literal></expr></argument>,

<argument><expr><call><name>ngtcp2_strerror</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_SEND_ERROR</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ngtcp2_path_storage_zero</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<expr_stmt><expr><name>outlen</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>qs</name><operator>-&gt;</operator><name>h3conn</name></name> <operator>&amp;&amp;</operator> <call><name>ngtcp2_conn_get_max_data_left</name><argument_list>(<argument><expr><name><name>qs</name><operator>-&gt;</operator><name>qconn</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>veccnt</name> <operator>=</operator> <call><name>nghttp3_conn_writev_stream</name><argument_list>(<argument><expr><name><name>qs</name><operator>-&gt;</operator><name>h3conn</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stream_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fin</name></expr></argument>, <argument><expr><name>vec</name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>vec</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>vec</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>veccnt</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"nghttp3_conn_writev_stream returned error: %s\n"</literal></expr></argument>,

<argument><expr><call><name>nghttp3_strerror</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>veccnt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_SEND_ERROR</name></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name>veccnt</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>outlen</name> <operator>=</operator>

<call><name>ngtcp2_conn_writev_stream</name><argument_list>(<argument><expr><name><name>qs</name><operator>-&gt;</operator><name>qconn</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ps</name><operator>.</operator><name>path</name></name></expr></argument>,

<argument><expr><name>out</name></expr></argument>, <argument><expr><name>pktlen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ndatalen</name></expr></argument>,

<argument><expr><name>NGTCP2_WRITE_STREAM_FLAG_MORE</name></expr></argument>,

<argument><expr><name>stream_id</name></expr></argument>, <argument><expr><name>fin</name></expr></argument>,

<argument><expr><operator>(</operator><specifier>const</specifier> <name>ngtcp2_vec</name> <operator>*</operator><operator>)</operator><name>vec</name></expr></argument>, <argument><expr><name>veccnt</name></expr></argument>, <argument><expr><name>ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>outlen</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>outlen</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>outlen</name> <operator>==</operator> <name>NGTCP2_ERR_STREAM_DATA_BLOCKED</name> <operator>||</operator>

<name>outlen</name> <operator>==</operator> <name>NGTCP2_ERR_STREAM_SHUT_WR</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>nghttp3_conn_block_stream</name><argument_list>(<argument><expr><name><name>qs</name><operator>-&gt;</operator><name>h3conn</name></name></expr></argument>, <argument><expr><name>stream_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rv</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>,

<argument><expr><literal type="string">"nghttp3_conn_block_stream returned error: %s\n"</literal></expr></argument>,

<argument><expr><call><name>nghttp3_strerror</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_SEND_ERROR</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<continue>continue;</continue>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name>outlen</name> <operator>==</operator> <name>NGTCP2_ERR_WRITE_STREAM_MORE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ndatalen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>nghttp3_conn_add_write_offset</name><argument_list>(<argument><expr><name><name>qs</name><operator>-&gt;</operator><name>h3conn</name></name></expr></argument>, <argument><expr><name>stream_id</name></expr></argument>,

<argument><expr><name>ndatalen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rv</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>,

<argument><expr><literal type="string">"nghttp3_conn_add_write_offset returned error: %s\n"</literal></expr></argument>,

<argument><expr><call><name>nghttp3_strerror</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_SEND_ERROR</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<continue>continue;</continue>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"ngtcp2_conn_writev_stream returned error: %s\n"</literal></expr></argument>,

<argument><expr><call><name>ngtcp2_strerror</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>outlen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_SEND_ERROR</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name>ndatalen</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>nghttp3_conn_add_write_offset</name><argument_list>(<argument><expr><name><name>qs</name><operator>-&gt;</operator><name>h3conn</name></name></expr></argument>, <argument><expr><name>stream_id</name></expr></argument>, <argument><expr><name>ndatalen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rv</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>,

<argument><expr><literal type="string">"nghttp3_conn_add_write_offset returned error: %s\n"</literal></expr></argument>,

<argument><expr><call><name>nghttp3_strerror</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_SEND_ERROR</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>outlen</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>outlen</name> <operator>=</operator> <call><name>ngtcp2_conn_write_pkt</name><argument_list>(<argument><expr><name><name>qs</name><operator>-&gt;</operator><name>qconn</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ps</name><operator>.</operator><name>path</name></name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>pktlen</name></expr></argument>, <argument><expr><name>ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>outlen</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"ngtcp2_conn_write_pkt returned error: %s\n"</literal></expr></argument>,

<argument><expr><call><name>ngtcp2_strerror</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>outlen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_SEND_ERROR</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>outlen</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>remote_addr</name></expr></argument>, <argument><expr><name><name>ps</name><operator>.</operator><name>path</name><operator>.</operator><name>remote</name><operator>.</operator><name>addr</name></name></expr></argument>, <argument><expr><name><name>ps</name><operator>.</operator><name>path</name><operator>.</operator><name>remote</name><operator>.</operator><name>addrlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while<condition>(<expr><operator>(</operator><name>sent</name> <operator>=</operator> <call><name>send</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>outlen</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator>

<name>SOCKERRNO</name> <operator>==</operator> <name>EINTR</name></expr>)</condition><block type="pseudo"><block_content>

<empty_stmt>;</empty_stmt></block_content></block></while>

<if_stmt><if>if<condition>(<expr><name>sent</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>SOCKERRNO</name> <operator>==</operator> <name>EAGAIN</name> <operator>||</operator> <name>SOCKERRNO</name> <operator>==</operator> <name>EWOULDBLOCK</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"send() returned %zd (errno %d)\n"</literal></expr></argument>, <argument><expr><name>sent</name></expr></argument>,

<argument><expr><name>SOCKERRNO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_SEND_ERROR</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>expiry</name> <operator>=</operator> <call><name>ngtcp2_conn_get_expiry</name><argument_list>(<argument><expr><name><name>qs</name><operator>-&gt;</operator><name>qconn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>expiry</name> <operator>!=</operator> <name>UINT64_MAX</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>expiry</name> <operator>&lt;=</operator> <name>ts</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>timeout</name> <operator>=</operator> <name>NGTCP2_MILLISECONDS</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>timeout</name> <operator>=</operator> <name>expiry</name> <operator>-</operator> <name>ts</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>Curl_expire</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>timeout</name> <operator>/</operator> <name>NGTCP2_MILLISECONDS</name></expr></argument>, <argument><expr><name>EXPIRE_QUIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>CURLcode</name></type> <name>Curl_quic_done_sending</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>handler</name></name> <operator>==</operator> <operator>&amp;</operator><name>Curl_handler_http3</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>HTTP</name></name> <modifier>*</modifier></type><name>stream</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>protop</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>quicsocket</name></name> <modifier>*</modifier></type><name>qs</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>quic</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>upload_done</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>nghttp3_conn_resume_stream</name><argument_list>(<argument><expr><name><name>qs</name><operator>-&gt;</operator><name>h3conn</name></name></expr></argument>, <argument><expr><name><name>stream</name><operator>-&gt;</operator><name>stream3_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>Curl_quic_done</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>premature</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>premature</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>conn</name><operator>-&gt;</operator><name>handler</name></name> <operator>==</operator> <operator>&amp;</operator><name>Curl_handler_http3</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>HTTP</name></name> <modifier>*</modifier></type><name>stream</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>protop</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>overflow_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>Curl_quic_data_pending</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>HTTP</name></name> <modifier>*</modifier></type><name>stream</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>protop</name></name></expr></init></decl>;</decl_stmt>

<return>return <expr><name><name>stream</name><operator>-&gt;</operator><name>overflow_buflen</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
