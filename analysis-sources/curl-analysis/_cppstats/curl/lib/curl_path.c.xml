<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\curl-analysis\_cppstats\curl\lib\curl_path.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_setup.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_SSH</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;curl/curl.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_memory.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_path.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"escape.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memdebug.h"</cpp:file></cpp:include>

<function><type><name>CURLcode</name></type> <name>Curl_getworkingpath</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,

<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>homedir</name></decl></parameter>, 

<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list> 

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>real_path</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>working_path</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>working_path_len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>=

<expr><call><name>Curl_urldecode</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>up</name><operator>.</operator><name>path</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>working_path</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>working_path_len</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>handler</name><operator>-&gt;</operator><name>protocol</name></name> <operator>&amp;</operator> <name>CURLPROTO_SCP</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>real_path</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>working_path_len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>real_path</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>working_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>working_path_len</name> <operator>&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name>working_path</name></expr></argument>, <argument><expr><literal type="string">"/~/"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>real_path</name></expr></argument>, <argument><expr><name>working_path</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><name>working_path_len</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>real_path</name></expr></argument>, <argument><expr><name>working_path</name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>+</operator> <name>working_path_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>handler</name><operator>-&gt;</operator><name>protocol</name></name> <operator>&amp;</operator> <name>CURLPROTO_SFTP</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>working_path_len</name> <operator>&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>working_path</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'~'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>homelen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>homedir</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>real_path</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>homelen</name> <operator>+</operator> <name>working_path_len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>real_path</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>working_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>real_path</name></expr></argument>, <argument><expr><name>homedir</name></expr></argument>, <argument><expr><name>homelen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>real_path</name><index>[<expr><name>homelen</name></expr>]</index></name> <operator>=</operator> <literal type="char">'/'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>real_path</name><index>[<expr><name>homelen</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>working_path_len</name> <operator>&gt;</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>real_path</name> <operator>+</operator> <name>homelen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>working_path</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>,

<argument><expr><literal type="number">1</literal> <operator>+</operator> <name>working_path_len</name> <operator>-</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>real_path</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>working_path_len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>real_path</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>working_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>real_path</name></expr></argument>, <argument><expr><name>working_path</name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>+</operator> <name>working_path_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>working_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>path</name> <operator>=</operator> <name>real_path</name></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>CURLcode</name></type> <name>Curl_get_pathname</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>cpp</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>homedir</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cp</name> <init>= <expr><operator>*</operator><name>cpp</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name>quot</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>fullPathLength</name></decl>, <decl><type ref="prev"/><name>pathLength</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>relativePath</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>WHITESPACE</name><index>[]</index></name> <init>= <expr><literal type="string">" \t\r\n"</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>*</operator><name>cp</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>cpp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>path</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><name>CURLE_QUOTE_ERROR</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>cp</name> <operator>+=</operator> <call><name>strspn</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><name>WHITESPACE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>fullPathLength</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>cp</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>homedir</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>path</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>fullPathLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>*</operator><name>path</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>*</operator><name>cp</name> <operator>==</operator> <literal type="char">'\"'</literal> <operator>||</operator> <operator>*</operator><name>cp</name> <operator>==</operator> <literal type="char">'\''</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>quot</name> <operator>=</operator> <operator>*</operator><name>cp</name><operator>++</operator></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>cp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>quot</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>path</name><operator>)</operator><index>[<expr><name>j</name></expr>]</index> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>cp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content> 

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>cp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>cp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\''</literal> <operator>&amp;&amp;</operator> <name><name>cp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\"'</literal> <operator>&amp;&amp;</operator>

<name><name>cp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\\'</literal></expr>)</condition> <block>{<block_content>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>path</name><operator>)</operator><index>[<expr><name>j</name><operator>++</operator></expr>]</index> <operator>=</operator> <name><name>cp</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if<condition>(<expr><name>j</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>cpp</name> <operator>=</operator> <name>cp</name> <operator>+</operator> <name>i</name> <operator>+</operator> <call><name>strspn</name><argument_list>(<argument><expr><name>cp</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>WHITESPACE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>end</name> <operator>=</operator> <call><name>strpbrk</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><name>WHITESPACE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>end</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>end</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>cpp</name> <operator>=</operator> <name>end</name> <operator>+</operator> <call><name>strspn</name><argument_list>(<argument><expr><name>end</name></expr></argument>, <argument><expr><name>WHITESPACE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pathLength</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>relativePath</name> <operator>=</operator> <operator>(</operator><name><name>cp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal> <operator>&amp;&amp;</operator> <name><name>cp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'~'</literal> <operator>&amp;&amp;</operator> <name><name>cp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>relativePath</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><operator>*</operator><name>path</name></expr></argument>, <argument><expr><name>homedir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pathLength</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>homedir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>path</name><operator>)</operator><index>[<expr><name>pathLength</name><operator>++</operator></expr>]</index> <operator>=</operator> <literal type="char">'/'</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>path</name><operator>)</operator><index>[<expr><name>pathLength</name></expr>]</index> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>cp</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>path</name><operator>)</operator><index>[<expr><name>pathLength</name></expr>]</index></expr></argument>, <argument><expr><name>cp</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>end</name> <operator>-</operator> <name>cp</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pathLength</name> <operator>+=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>end</name> <operator>-</operator> <name>cp</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>path</name><operator>)</operator><index>[<expr><name>pathLength</name></expr>]</index> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

<label><name>fail</name>:</label>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><operator>*</operator><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_QUOTE_ERROR</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</unit>
