<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\curl-analysis\_cppstats\curl\lib\hash.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_setup.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;curl/curl.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hash.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llist.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_memory.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memdebug.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>hash_element_dtor</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>element</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>curl_hash</name></name> <modifier>*</modifier></type><name>h</name> <init>= <expr><operator>(</operator>struct <name>curl_hash</name> <operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>curl_hash_element</name></name> <modifier>*</modifier></type><name>e</name> <init>= <expr><operator>(</operator>struct <name>curl_hash_element</name> <operator>*</operator><operator>)</operator> <name>element</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>e</name><operator>-&gt;</operator><name>ptr</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>h</name><operator>-&gt;</operator><name>dtor</name></name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>key_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>Curl_hash_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>curl_hash</name></name> <modifier>*</modifier></type><name>h</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>slots</name></decl></parameter>,

<parameter><decl><type><name>hash_function</name></type> <name>hfunc</name></decl></parameter>,

<parameter><decl><type><name>comp_function</name></type> <name>comparator</name></decl></parameter>,

<parameter><decl><type><name>curl_hash_dtor</name></type> <name>dtor</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>slots</name> <operator>||</operator> <operator>!</operator><name>hfunc</name> <operator>||</operator> <operator>!</operator><name>comparator</name> <operator>||</operator><operator>!</operator><name>dtor</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>hash_func</name></name> <operator>=</operator> <name>hfunc</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>comp_func</name></name> <operator>=</operator> <name>comparator</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>dtor</name></name> <operator>=</operator> <name>dtor</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>slots</name></name> <operator>=</operator> <name>slots</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>table</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>slots</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>curl_llist</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>table</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>slots</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>Curl_llist_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>table</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>curl_llist_dtor</name><operator>)</operator> <name>hash_element_dtor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>slots</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return> 

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>curl_hash_element</name></name> <modifier>*</modifier></type>

<name>mk_hash_element</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>key_len</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>curl_hash_element</name></name> <modifier>*</modifier></type><name>he</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>curl_hash_element</name></expr></argument>)</argument_list></sizeof> <operator>+</operator>

<name>key_len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>he</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>he</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>key_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>he</name><operator>-&gt;</operator><name>key_len</name></name> <operator>=</operator> <name>key_len</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>he</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>p</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>he</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FETCH_LIST</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>,<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>&amp;x-&gt;table[x-&gt;hash_func(y, z, x-&gt;slots)]</cpp:value></cpp:define>

<function><type><name>void</name> <modifier>*</modifier></type>

<name>Curl_hash_add</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>curl_hash</name></name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>key_len</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>curl_hash_element</name></name> <modifier>*</modifier></type><name>he</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>curl_llist_element</name></name> <modifier>*</modifier></type><name>le</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>curl_llist</name></name> <modifier>*</modifier></type><name>l</name> <init>= <expr><call><name>FETCH_LIST</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>key_len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>le</name> <operator>=</operator> <name><name>l</name><operator>-&gt;</operator><name>head</name></name></expr>;</init> <condition><expr><name>le</name></expr>;</condition> <incr><expr><name>le</name> <operator>=</operator> <name><name>le</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>he</name> <operator>=</operator> <operator>(</operator>struct <name>curl_hash_element</name> <operator>*</operator><operator>)</operator> <name><name>le</name><operator>-&gt;</operator><name>ptr</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name><name>h</name><operator>-&gt;</operator><name>comp_func</name></name><argument_list>(<argument><expr><name><name>he</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name><name>he</name><operator>-&gt;</operator><name>key_len</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>key_len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>Curl_llist_remove</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>le</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>--</operator><name><name>h</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>he</name> <operator>=</operator> <call><name>mk_hash_element</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>key_len</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>he</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>Curl_llist_insert_next</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>tail</name></name></expr></argument>, <argument><expr><name>he</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>he</name><operator>-&gt;</operator><name>list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name><name>h</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>

<return>return <expr><name>p</name></expr>;</return> 

</block_content>}</block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return> 

</block_content>}</block></function>

<function><type><name>int</name></type> <name>Curl_hash_delete</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>curl_hash</name></name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>key_len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>curl_llist_element</name></name> <modifier>*</modifier></type><name>le</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>curl_llist</name></name> <modifier>*</modifier></type><name>l</name> <init>= <expr><call><name>FETCH_LIST</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>key_len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>le</name> <operator>=</operator> <name><name>l</name><operator>-&gt;</operator><name>head</name></name></expr>;</init> <condition><expr><name>le</name></expr>;</condition> <incr><expr><name>le</name> <operator>=</operator> <name><name>le</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>curl_hash_element</name></name> <modifier>*</modifier></type><name>he</name> <init>= <expr><name><name>le</name><operator>-&gt;</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><call><name><name>h</name><operator>-&gt;</operator><name>comp_func</name></name><argument_list>(<argument><expr><name><name>he</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name><name>he</name><operator>-&gt;</operator><name>key_len</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>key_len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>Curl_llist_remove</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>le</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>--</operator><name><name>h</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type>

<name>Curl_hash_pick</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>curl_hash</name></name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>key_len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>curl_llist_element</name></name> <modifier>*</modifier></type><name>le</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>curl_llist</name></name> <modifier>*</modifier></type><name>l</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>h</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>l</name> <operator>=</operator> <call><name>FETCH_LIST</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>key_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>le</name> <operator>=</operator> <name><name>l</name><operator>-&gt;</operator><name>head</name></name></expr>;</init> <condition><expr><name>le</name></expr>;</condition> <incr><expr><name>le</name> <operator>=</operator> <name><name>le</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>curl_hash_element</name></name> <modifier>*</modifier></type><name>he</name> <init>= <expr><name><name>le</name><operator>-&gt;</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><call><name><name>h</name><operator>-&gt;</operator><name>comp_func</name></name><argument_list>(<argument><expr><name><name>he</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name><name>he</name><operator>-&gt;</operator><name>key_len</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>key_len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name><name>he</name><operator>-&gt;</operator><name>ptr</name></name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUGBUILD</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>AGGRESIVE_TEST</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>void</name></type>

<name>Curl_hash_apply</name><parameter_list>(<parameter><decl><type><name>curl_hash</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>,

<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>cb</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>curl_llist_element</name></name> <modifier>*</modifier></type><name>le</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>h</name><operator>-&gt;</operator><name>slots</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<for>for<control>(<init><expr><name>le</name> <operator>=</operator> <operator>(</operator><name><name>h</name><operator>-&gt;</operator><name>table</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator><operator>-&gt;</operator><name>head</name></expr>;</init>

<condition><expr><name>le</name></expr>;</condition>

<incr><expr><name>le</name> <operator>=</operator> <name><name>le</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>curl_hash_element</name> <modifier>*</modifier></type><name>el</name> <init>= <expr><name><name>le</name><operator>-&gt;</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>cb</name><argument_list>(<argument><expr><name>user</name></expr></argument>, <argument><expr><name><name>el</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type>

<name>Curl_hash_destroy</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>curl_hash</name></name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>h</name><operator>-&gt;</operator><name>slots</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>Curl_llist_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>table</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>table</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>slots</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>Curl_hash_clean</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>curl_hash</name></name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>Curl_hash_clean_with_criterium</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>Curl_hash_clean_with_criterium</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>curl_hash</name></name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>,

<parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>comp</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>curl_llist_element</name></name> <modifier>*</modifier></type><name>le</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>curl_llist_element</name></name> <modifier>*</modifier></type><name>lnext</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>curl_llist</name></name> <modifier>*</modifier></type><name>list</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>h</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>h</name><operator>-&gt;</operator><name>slots</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>list</name> <operator>=</operator> <operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>table</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>le</name> <operator>=</operator> <name><name>list</name><operator>-&gt;</operator><name>head</name></name></expr>;</expr_stmt> 

<while>while<condition>(<expr><name>le</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>curl_hash_element</name></name> <modifier>*</modifier></type><name>he</name> <init>= <expr><name><name>le</name><operator>-&gt;</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>lnext</name> <operator>=</operator> <name><name>le</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>comp</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>comp</name><argument_list>(<argument><expr><name>user</name></expr></argument>, <argument><expr><name><name>he</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>Curl_llist_remove</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>le</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>--</operator><name><name>h</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>le</name> <operator>=</operator> <name>lnext</name></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>Curl_hash_str</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>key_length</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>slots_num</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key_str</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <name>key</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>end</name> <init>= <expr><name>key_str</name> <operator>+</operator> <name>key_length</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>h</name> <init>= <expr><literal type="number">5381</literal></expr></init></decl>;</decl_stmt>

<while>while<condition>(<expr><name>key_str</name> <operator>&lt;</operator> <name>end</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>h</name> <operator>+=</operator> <name>h</name> <operator>&lt;&lt;</operator> <literal type="number">5</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>h</name> <operator>^=</operator> <operator>*</operator><name>key_str</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><operator>(</operator><name>h</name> <operator>%</operator> <name>slots_num</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>Curl_str_key_compare</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>k1</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>key1_len</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>k2</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>key2_len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>key1_len</name> <operator>==</operator> <name>key2_len</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name>k1</name></expr></argument>, <argument><expr><name>k2</name></expr></argument>, <argument><expr><name>key1_len</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>Curl_hash_start_iterate</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>curl_hash</name></name> <modifier>*</modifier></type><name>hash</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>curl_hash_iterator</name></name> <modifier>*</modifier></type><name>iter</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>hash</name></name> <operator>=</operator> <name>hash</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>slot_index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>current_element</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name><name>struct</name> <name>curl_hash_element</name></name> <modifier>*</modifier></type>

<name>Curl_hash_next_element</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>curl_hash_iterator</name></name> <modifier>*</modifier></type><name>iter</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>curl_hash</name></name> <modifier>*</modifier></type><name>h</name> <init>= <expr><name><name>iter</name><operator>-&gt;</operator><name>hash</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>iter</name><operator>-&gt;</operator><name>current_element</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>current_element</name></name> <operator>=</operator> <name><name>iter</name><operator>-&gt;</operator><name>current_element</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>iter</name><operator>-&gt;</operator><name>current_element</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <name><name>iter</name><operator>-&gt;</operator><name>slot_index</name></name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>h</name><operator>-&gt;</operator><name>slots</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>head</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>current_element</name></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>head</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>slot_index</name></name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>iter</name><operator>-&gt;</operator><name>current_element</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>curl_hash_element</name></name> <modifier>*</modifier></type><name>he</name> <init>= <expr><name><name>iter</name><operator>-&gt;</operator><name>current_element</name><operator>-&gt;</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>

<return>return <expr><name>he</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>current_element</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if> 

void Curl_hash_print(struct curl_hash *h,

void (*func)(void *))

{

struct curl_hash_iterator iter;

struct curl_hash_element *he;

int last_index = -1;

if(!h)

return;

fprintf(stderr, "=Hash dump=\n");

Curl_hash_start_iterate(h, &amp;iter);

he = Curl_hash_next_element(&amp;iter);

while(he) {

if(iter.slot_index != last_index) {

fprintf(stderr, "index %d:", iter.slot_index);

if(last_index &gt;= 0) {

fprintf(stderr, "\n");

}

last_index = iter.slot_index;

}

if(func)

func(he-&gt;ptr);

else

fprintf(stderr, " [%p]", (void *)he-&gt;ptr);

he = Curl_hash_next_element(&amp;iter);

}

fprintf(stderr, "\n");

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
