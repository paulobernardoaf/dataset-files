<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\curl-analysis\_cppstats\curl\lib\if2ip.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_setup.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_NETINET_IN_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet/in.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ARPA_INET_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;arpa/inet.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_NET_IF_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;net/if.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SYS_IOCTL_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/ioctl.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_NETDB_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netdb.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SYS_SOCKIO_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/sockio.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_IFADDRS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ifaddrs.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_STROPTS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stropts.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VMS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inet.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"inet_ntop.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"strcase.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"if2ip.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_printf.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_memory.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memdebug.h"</cpp:file></cpp:include>

<function><type><name>unsigned</name> <name>int</name></type> <name>Curl_ipv6_scope</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type><name>sa</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_IPV6</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>sa</name></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<if_stmt><if>if<condition>(<expr><name><name>sa</name><operator>-&gt;</operator><name>sa_family</name></name> <operator>==</operator> <name>AF_INET6</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>sockaddr_in6</name></name> <modifier>*</modifier></type> <name>sa6</name> <init>= <expr><operator>(</operator><specifier>const</specifier> struct <name>sockaddr_in6</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>sa</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>b</name> <init>= <expr><name><name>sa6</name><operator>-&gt;</operator><name>sin6_addr</name><operator>.</operator><name>s6_addr</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>w</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>short</name><operator>)</operator> <operator>(</operator><operator>(</operator><name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name><name>b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xFE</literal><operator>)</operator> <operator>==</operator> <literal type="number">0xFC</literal></expr>)</condition><block type="pseudo"><block_content> 

<return>return <expr><name>IPV6_SCOPE_UNIQUELOCAL</name></expr>;</return></block_content></block></if></if_stmt>

<switch>switch<condition>(<expr><name>w</name> <operator>&amp;</operator> <literal type="number">0xFFC0</literal></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0xFE80</literal></expr>:</case>

<return>return <expr><name>IPV6_SCOPE_LINKLOCAL</name></expr>;</return>

<case>case <expr><literal type="number">0xFEC0</literal></expr>:</case>

<return>return <expr><name>IPV6_SCOPE_SITELOCAL</name></expr>;</return>

<case>case <expr><literal type="number">0x0000</literal></expr>:</case>

<expr_stmt><expr><name>w</name> <operator>=</operator> <name><name>b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>|</operator> <name><name>b</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>|</operator> <name><name>b</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>|</operator> <name><name>b</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>|</operator> <name><name>b</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>|</operator> <name><name>b</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>|</operator> <name><name>b</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>|</operator> <name><name>b</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>|</operator> <name><name>b</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>|</operator>

<name><name>b</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>|</operator> <name><name>b</name><index>[<expr><literal type="number">11</literal></expr>]</index></name> <operator>|</operator> <name><name>b</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <operator>|</operator> <name><name>b</name><index>[<expr><literal type="number">13</literal></expr>]</index></name> <operator>|</operator> <name><name>b</name><index>[<expr><literal type="number">14</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>w</name> <operator>||</operator> <name><name>b</name><index>[<expr><literal type="number">15</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0x01</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<return>return <expr><name>IPV6_SCOPE_NODELOCAL</name></expr>;</return>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>IPV6_SCOPE_GLOBAL</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_GETIFADDRS</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>if2ip_result_t</name></type> <name>Curl_if2ip</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>af</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>remote_scope</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>local_scope_id</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>interf</name></decl></parameter>,

<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buf_size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>ifaddrs</name></name> <modifier>*</modifier></type><name>iface</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>head</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>if2ip_result_t</name></type> <name>res</name> <init>= <expr><name>IF2IP_NOT_FOUND</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_IPV6</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>remote_scope</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SOCKADDR_IN6_SIN6_SCOPE_ID</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_IPV6</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>local_scope_id</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if<condition>(<expr><call><name>getifaddrs</name><argument_list>(<argument><expr><operator>&amp;</operator><name>head</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<for>for<control>(<init><expr><name>iface</name> <operator>=</operator> <name>head</name></expr>;</init> <condition><expr><name>iface</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>iface</name> <operator>=</operator> <name><name>iface</name><operator>-&gt;</operator><name>ifa_next</name></name></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>iface</name><operator>-&gt;</operator><name>ifa_addr</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>iface</name><operator>-&gt;</operator><name>ifa_addr</name><operator>-&gt;</operator><name>sa_family</name></name> <operator>==</operator> <name>af</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>strcasecompare</name><argument_list>(<argument><expr><name><name>iface</name><operator>-&gt;</operator><name>ifa_name</name></name></expr></argument>, <argument><expr><name>interf</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>addr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ip</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>scope</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>ipstr</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_IPV6</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name>af</name> <operator>==</operator> <name>AF_INET6</name></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SOCKADDR_IN6_SIN6_SCOPE_ID</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>scopeid</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>ifscope</name> <init>= <expr><call><name>Curl_ipv6_scope</name><argument_list>(<argument><expr><name><name>iface</name><operator>-&gt;</operator><name>ifa_addr</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>ifscope</name> <operator>!=</operator> <name>remote_scope</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>res</name> <operator>==</operator> <name>IF2IP_NOT_FOUND</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>res</name> <operator>=</operator> <name>IF2IP_AF_NOT_SUPPORTED</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>addr</name> <operator>=</operator>

<operator>&amp;</operator><operator>(</operator><operator>(</operator>struct <name>sockaddr_in6</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>iface</name><operator>-&gt;</operator><name>ifa_addr</name></name><operator>)</operator><operator>-&gt;</operator><name>sin6_addr</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SOCKADDR_IN6_SIN6_SCOPE_ID</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>scopeid</name> <operator>=</operator> <operator>(</operator><operator>(</operator>struct <name>sockaddr_in6</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>iface</name><operator>-&gt;</operator><name>ifa_addr</name></name><operator>)</operator>

<operator>-&gt;</operator><name>sin6_scope_id</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>local_scope_id</name> <operator>&amp;&amp;</operator> <name>scopeid</name> <operator>!=</operator> <name>local_scope_id</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>res</name> <operator>==</operator> <name>IF2IP_NOT_FOUND</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>res</name> <operator>=</operator> <name>IF2IP_AF_NOT_SUPPORTED</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>scopeid</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msnprintf</name><argument_list>(<argument><expr><name>scope</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>scope</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%%%u"</literal></expr></argument>, <argument><expr><name>scopeid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>addr</name> <operator>=</operator>

<operator>&amp;</operator><operator>(</operator><operator>(</operator>struct <name>sockaddr_in</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>iface</name><operator>-&gt;</operator><name>ifa_addr</name></name><operator>)</operator><operator>-&gt;</operator><name>sin_addr</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <name>IF2IP_FOUND</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ip</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>Curl_inet_ntop</name><argument_list>(<argument><expr><name>af</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>ipstr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ipstr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msnprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>, <argument><expr><literal type="string">"%s%s"</literal></expr></argument>, <argument><expr><name>ip</name></expr></argument>, <argument><expr><name>scope</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><operator>(</operator><name>res</name> <operator>==</operator> <name>IF2IP_NOT_FOUND</name><operator>)</operator> <operator>&amp;&amp;</operator>

<call><name>strcasecompare</name><argument_list>(<argument><expr><name><name>iface</name><operator>-&gt;</operator><name>ifa_name</name></name></expr></argument>, <argument><expr><name>interf</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>res</name> <operator>=</operator> <name>IF2IP_AF_NOT_SUPPORTED</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>freeifaddrs</name><argument_list>(<argument><expr><name>head</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></function>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_IOCTL_SIOCGIFADDR</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<function><type><name>if2ip_result_t</name></type> <name>Curl_if2ip</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>af</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>remote_scope</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>local_scope_id</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>interf</name></decl></parameter>,

<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buf_size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>ifreq</name></name></type> <name>req</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>in_addr</name></name></type> <name>in</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in</name></name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>curl_socket_t</name></type> <name>dummy</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>remote_scope</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>local_scope_id</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>interf</name> <operator>||</operator> <operator>(</operator><name>af</name> <operator>!=</operator> <name>AF_INET</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>IF2IP_NOT_FOUND</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>interf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>len</name> <operator>&gt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>req</name><operator>.</operator><name>ifr_name</name></name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>IF2IP_NOT_FOUND</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>dummy</name> <operator>=</operator> <call><name>socket</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><name>SOCK_STREAM</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>CURL_SOCKET_BAD</name> <operator>==</operator> <name>dummy</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>IF2IP_NOT_FOUND</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>req</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>req</name><operator>.</operator><name>ifr_name</name></name></expr></argument>, <argument><expr><name>interf</name></expr></argument>, <argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>req</name><operator>.</operator><name>ifr_addr</name><operator>.</operator><name>sa_family</name></name> <operator>=</operator> <name>AF_INET</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name>dummy</name></expr></argument>, <argument><expr><name>SIOCGIFADDR</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>req</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>sclose</name><argument_list>(<argument><expr><name>dummy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>IF2IP_NOT_FOUND</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <operator>(</operator>struct <name>sockaddr_in</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>req</name><operator>.</operator><name>ifr_addr</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>in</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>sin_addr</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_inet_ntop</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>sin_family</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>in</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sclose</name><argument_list>(<argument><expr><name>dummy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>IF2IP_FOUND</name></expr>;</return>

</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<function><type><name>if2ip_result_t</name></type> <name>Curl_if2ip</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>af</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>remote_scope</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>local_scope_id</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>interf</name></decl></parameter>,

<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buf_size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>af</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>remote_scope</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>local_scope_id</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>interf</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>buf</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>buf_size</name></expr>;</expr_stmt>

<return>return <expr><name>IF2IP_NOT_FOUND</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
