<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\curl-analysis\_cppstats\curl\lib\transfer.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_setup.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"strtoofft.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_NETINET_IN_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet/in.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_NETDB_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netdb.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ARPA_INET_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;arpa/inet.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_NET_IF_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;net/if.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SYS_IOCTL_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/ioctl.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SIGNAL_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;signal.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SYS_PARAM_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/param.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SYS_SELECT_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/select.h&gt;</cpp:file></cpp:include>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_UNISTD_H</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SOCKET</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"We can't compile without socket() support!"</cpp:literal></cpp:error>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"urldata.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;curl/curl.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"netrc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"content_encoding.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hostip.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"transfer.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sendf.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"speedcheck.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"progress.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"url.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"getinfo.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vtls/vtls.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"select.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"multiif.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"connect.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"non-ascii.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http2.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mime.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"strcase.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"urlapi-int.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_printf.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_memory.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memdebug.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_HTTP</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_SMTP</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_IMAP</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>char</name> <modifier>*</modifier></type><name>Curl_checkheaders</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>thisheader</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>curl_slist</name></name> <modifier>*</modifier></type><name>head</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>thislen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>thisheader</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>head</name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>headers</name></name></expr>;</init> <condition><expr><name>head</name></expr>;</condition> <incr><expr><name>head</name> <operator>=</operator> <name><name>head</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>strncasecompare</name><argument_list>(<argument><expr><name><name>head</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>thisheader</name></expr></argument>, <argument><expr><name>thislen</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<call><name>Curl_headersep</name><argument_list>(<argument><expr><name><name>head</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>thislen</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>head</name><operator>-&gt;</operator><name>data</name></name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>CURLcode</name></type> <name>Curl_get_upload_buffer</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>ulbuf</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>ulbuf</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>upload_buffer_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>ulbuf</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_HTTP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>size_t</name></type> <name>Curl_trailers_read</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>nitems</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>raw</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><operator>(</operator>struct <name>Curl_easy</name> <operator>*</operator><operator>)</operator><name>raw</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Curl_send_buffer</name> <modifier>*</modifier></type><name>trailers_buf</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>trailers_buf</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>bytes_left</name> <init>= <expr><name><name>trailers_buf</name><operator>-&gt;</operator><name>size_used</name></name><operator>-</operator><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>trailers_bytes_sent</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>to_copy</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>size</name><operator>*</operator><name>nitems</name> <operator>&lt;</operator> <name>bytes_left</name><operator>)</operator></expr> ?</condition><then> <expr><name>size</name><operator>*</operator><name>nitems</name></expr> </then><else>: <expr><name>bytes_left</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>to_copy</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>trailers_buf</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>trailers_bytes_sent</name></name></expr>]</index></name></expr></argument>,

<argument><expr><name>to_copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>trailers_bytes_sent</name></name> <operator>+=</operator> <name>to_copy</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>to_copy</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type> <name>Curl_trailers_left</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>raw</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><operator>(</operator>struct <name>Curl_easy</name> <operator>*</operator><operator>)</operator><name>raw</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Curl_send_buffer</name> <modifier>*</modifier></type><name>trailers_buf</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>trailers_buf</name></name></expr></init></decl>;</decl_stmt>

<return>return <expr><name><name>trailers_buf</name><operator>-&gt;</operator><name>size_used</name></name> <operator>-</operator> <name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>trailers_bytes_sent</name></name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>CURLcode</name></type> <name>Curl_fillreadbuffer</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>bytes</name></decl></parameter>,

<parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>nreadp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>buffersize</name> <init>= <expr><name>bytes</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>nread</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>curl_read_callback</name></type> <name>readfunc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>extra_data</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DOES_CONVERSIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>bool</name></type> <name>sending_http_headers</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>handler</name><operator>-&gt;</operator><name>protocol</name></name><operator>&amp;</operator><operator>(</operator><name>PROTO_FAMILY_HTTP</name><operator>|</operator><name>CURLPROTO_RTSP</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>HTTP</name></name> <modifier>*</modifier></type><name>http</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>protop</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>http</name><operator>-&gt;</operator><name>sending</name></name> <operator>==</operator> <name>HTTPSEND_REQUEST</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>sending_http_headers</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_HTTP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>trailers_state</name></name> <operator>==</operator> <name>TRAILERS_INITIALIZED</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>curl_slist</name></name> <modifier>*</modifier></type><name>trailers</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>trailers_ret_code</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>,

<argument><expr><literal type="string">"Moving trailers state machine from initialized to sending.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>trailers_state</name></name> <operator>=</operator> <name>TRAILERS_SENDING</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>trailers_buf</name></name> <operator>=</operator> <call><name>Curl_add_buffer_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>trailers_buf</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Unable to allocate trailing headers buffer !"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>trailers_bytes_sent</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_set_in_callback</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>trailers_ret_code</name> <operator>=</operator> <call><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>trailer_callback</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>trailers</name></expr></argument>,

<argument><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>trailer_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_set_in_callback</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>trailers_ret_code</name> <operator>==</operator> <name>CURL_TRAILERFUNC_OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_http_compile_trailers</name><argument_list>(<argument><expr><name>trailers</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>trailers_buf</name></name></expr></argument>,

<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"operation aborted by trailing headers callback"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>nreadp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_ABORTED_BY_CALLBACK</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>Curl_add_buffer_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>trailers_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>curl_slist_free_all</name><argument_list>(<argument><expr><name>trailers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Successfully compiled trailers.\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>curl_slist_free_all</name><argument_list>(<argument><expr><name>trailers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>upload_chunky</name></name> <operator>&amp;&amp;</operator>

<name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>trailers_state</name></name> <operator>==</operator> <name>TRAILERS_NONE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>buffersize</name> <operator>-=</operator> <operator>(</operator><literal type="number">8</literal> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>upload_fromhere</name></name> <operator>+=</operator> <operator>(</operator><literal type="number">8</literal> <operator>+</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_HTTP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>trailers_state</name></name> <operator>==</operator> <name>TRAILERS_SENDING</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>readfunc</name> <operator>=</operator> <name>Curl_trailers_read</name></expr>;</expr_stmt>

<expr_stmt><expr><name>extra_data</name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>data</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<block>{<block_content>

<expr_stmt><expr><name>readfunc</name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>fread_func</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>extra_data</name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>in</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>Curl_set_in_callback</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>nread</name> <operator>=</operator> <call><name>readfunc</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>upload_fromhere</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,

<argument><expr><name>buffersize</name></expr></argument>, <argument><expr><name>extra_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_set_in_callback</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>nread</name> <operator>==</operator> <name>CURL_READFUNC_ABORT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"operation aborted by callback"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>nreadp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>CURLE_ABORTED_BY_CALLBACK</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>nread</name> <operator>==</operator> <name>CURL_READFUNC_PAUSE</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>SingleRequest</name></name> <modifier>*</modifier></type><name>k</name> <init>= <expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>req</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>handler</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>PROTOPT_NONETWORK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Read callback asked for PAUSE when not supported!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_READ_ERROR</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>k</name><operator>-&gt;</operator><name>keepon</name></name> <operator>|=</operator> <name>KEEP_SEND_PAUSE</name></expr>;</expr_stmt> 

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>upload_chunky</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>upload_fromhere</name></name> <operator>-=</operator> <operator>(</operator><literal type="number">8</literal> <operator>+</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>nreadp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return> 

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name>nread</name> <operator>&gt;</operator> <name>buffersize</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>nreadp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"read function returned funny value"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_READ_ERROR</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>forbidchunk</name></name> <operator>&amp;&amp;</operator> <name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>upload_chunky</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>added_crlf</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>hexlen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>endofline_native</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>endofline_network</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DO_LINEEND_CONV</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>prefer_ascii</name></name><operator>)</operator> <operator>||</operator>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>crlf</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>endofline_native</name> <operator>=</operator> <literal type="string">"\n"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>endofline_network</name> <operator>=</operator> <literal type="string">"\x0a"</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>endofline_native</name> <operator>=</operator> <literal type="string">"\r\n"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>endofline_network</name> <operator>=</operator> <literal type="string">"\x0d\x0a"</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>trailers_state</name></name> <operator>!=</operator> <name>TRAILERS_SENDING</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>hexbuffer</name><index>[<expr><literal type="number">11</literal></expr>]</index></name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>hexlen</name> <operator>=</operator> <call><name>msnprintf</name><argument_list>(<argument><expr><name>hexbuffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hexbuffer</name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><literal type="string">"%zx%s"</literal></expr></argument>, <argument><expr><name>nread</name></expr></argument>, <argument><expr><name>endofline_native</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>upload_fromhere</name></name> <operator>-=</operator> <name>hexlen</name></expr>;</expr_stmt>

<expr_stmt><expr><name>nread</name> <operator>+=</operator> <name>hexlen</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>upload_fromhere</name></name></expr></argument>, <argument><expr><name>hexbuffer</name></expr></argument>, <argument><expr><name>hexlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_HTTP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><operator>(</operator><name>nread</name><operator>-</operator><name>hexlen</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>

<name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>trailer_callback</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator>

<name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>trailers_state</name></name> <operator>==</operator> <name>TRAILERS_NONE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>trailers_state</name></name> <operator>=</operator> <name>TRAILERS_INITIALIZED</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>upload_fromhere</name></name> <operator>+</operator> <name>nread</name></expr></argument>,

<argument><expr><name>endofline_network</name></expr></argument>,

<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>endofline_network</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>added_crlf</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DOES_CONVERSIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<block>{<block_content>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>length</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>prefer_ascii</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>length</name> <operator>=</operator> <name>nread</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>length</name> <operator>=</operator> <name>hexlen</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name>length</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_convert_to_network</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>upload_fromhere</name></name></expr></argument>,

<argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_HTTP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>trailers_state</name></name> <operator>==</operator> <name>TRAILERS_SENDING</name> <operator>&amp;&amp;</operator>

<operator>!</operator><call><name>Curl_trailers_left</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>Curl_add_buffer_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>trailers_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>trailers_state</name></name> <operator>=</operator> <name>TRAILERS_DONE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>trailer_data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>trailer_callback</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>upload_done</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Signaling end of chunked upload after trailers.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

if<condition>(<expr><operator>(</operator><name>nread</name> <operator>-</operator> <name>hexlen</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>

<name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>trailers_state</name></name> <operator>!=</operator> <name>TRAILERS_INITIALIZED</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>upload_done</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>,

<argument><expr><literal type="string">"Signaling end of chunked upload via terminating chunk.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>added_crlf</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>nread</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>endofline_network</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 

</block_content>}</block></if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DOES_CONVERSIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if<condition>(<expr><operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>prefer_ascii</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name>sending_http_headers</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name></decl>;</decl_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_convert_to_network</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>upload_fromhere</name></name></expr></argument>, <argument><expr><name>nread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<expr_stmt><expr><operator>*</operator><name>nreadp</name> <operator>=</operator> <name>nread</name></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>CURLcode</name></type> <name>Curl_readrewind</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>curl_mimepart</name> <modifier>*</modifier></type><name>mimepart</name> <init>= <expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>mimepost</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>rewindaftersend</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>keepon</name></name> <operator>&amp;=</operator> <operator>~</operator><name>KEEP_SEND</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>handler</name><operator>-&gt;</operator><name>protocol</name></name> <operator>&amp;</operator> <name>PROTO_FAMILY_HTTP</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>HTTP</name></name> <modifier>*</modifier></type><name>http</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>protop</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>http</name><operator>-&gt;</operator><name>sendit</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>mimepart</name> <operator>=</operator> <name><name>http</name><operator>-&gt;</operator><name>sendit</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>postfields</name></name></expr>)</condition><block type="pseudo"><block_content>

<empty_stmt>;</empty_stmt></block_content></block></if> 

<if type="elseif">else if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>httpreq</name></name> <operator>==</operator> <name>HTTPREQ_POST_MIME</name> <operator>||</operator>

<name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>httpreq</name></name> <operator>==</operator> <name>HTTPREQ_POST_FORM</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>Curl_mime_rewind</name><argument_list>(<argument><expr><name>mimepart</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Cannot rewind mime/post data"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_SEND_FAIL_REWIND</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>seek_func</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>Curl_set_in_callback</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>seek_func</name></name><operator>)</operator><operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>seek_client</name></name><operator>,</operator> <literal type="number">0</literal><operator>,</operator> <name>SEEK_SET</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_set_in_callback</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>err</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"seek callback returned error %d"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_SEND_FAIL_REWIND</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>ioctl_func</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>curlioerr</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>Curl_set_in_callback</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>ioctl_func</name></name><operator>)</operator><operator>(</operator><name>data</name><operator>,</operator> <name>CURLIOCMD_RESTARTREAD</name><operator>,</operator>

<name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>ioctl_client</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_set_in_callback</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"the ioctl callback returned %d\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>err</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"ioctl callback returned error %d"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_SEND_FAIL_REWIND</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>fread_func</name></name> <operator>==</operator> <operator>(</operator><name>curl_read_callback</name><operator>)</operator><name>fread</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>-</operator><literal type="number">1</literal> <operator>!=</operator> <call><name>fseek</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>in</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_OK</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"necessary data rewind wasn't possible"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_SEND_FAIL_REWIND</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>data_pending</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>conn</name></name></expr></init></decl>;</decl_stmt>

<return>return <expr><name><name>conn</name><operator>-&gt;</operator><name>handler</name><operator>-&gt;</operator><name>protocol</name></name><operator>&amp;</operator><operator>(</operator><name>CURLPROTO_SCP</name><operator>|</operator><name>CURLPROTO_SFTP</name><operator>)</operator> <operator>||</operator>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_NGHTTP2</name></expr></argument>)</argument_list></call></expr></cpp:if>

<call><name>Curl_ssl_data_pending</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>FIRSTSOCKET</name></expr></argument>)</argument_list></call> <operator>||</operator>

<operator>(</operator><operator>(</operator><name><name>conn</name><operator>-&gt;</operator><name>handler</name><operator>-&gt;</operator><name>protocol</name></name><operator>&amp;</operator><name>PROTO_FAMILY_HTTP</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>conn</name><operator>-&gt;</operator><name>httpversion</name></name> <operator>&gt;=</operator> <literal type="number">20</literal><operator>)</operator></expr>;</return>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_QUIC</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<expr_stmt><expr><call><name>Curl_ssl_data_pending</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>FIRSTSOCKET</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>Curl_quic_data_pending</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>Curl_ssl_data_pending</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>FIRSTSOCKET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>Curl_meets_timecondition</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>time_t</name></type> <name>timeofdoc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>timeofdoc</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>timevalue</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt>

<switch>switch<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>timecondition</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>CURL_TIMECOND_IFMODSINCE</name></expr>:</case>

<default>default:</default>

<if_stmt><if>if<condition>(<expr><name>timeofdoc</name> <operator>&lt;=</operator> <name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>timevalue</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>,

<argument><expr><literal type="string">"The requested document is not new enough\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>timecond</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>CURL_TIMECOND_IFUNMODSINCE</name></expr>:</case>

<if_stmt><if>if<condition>(<expr><name>timeofdoc</name> <operator>&gt;=</operator> <name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>timevalue</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>,

<argument><expr><literal type="string">"The requested document is not old enough\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>timecond</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block></switch>

<return>return <expr><name>TRUE</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>readwrite_data</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>SingleRequest</name></name> <modifier>*</modifier></type><name>k</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>didwhat</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>done</name></decl></parameter>,

<parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>comeback</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>nread</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>size_t</name></type> <name>excess</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>bool</name></type> <name>readmore</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>maxloops</name> <init>= <expr><literal type="number">100</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>done</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>comeback</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<do>do <block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>is_empty_data</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>buffersize</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>buffer_size</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>bytestoread</name> <init>= <expr><name>buffersize</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_NGHTTP2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>bool</name></type> <name>is_http2</name> <init>= <expr><operator>(</operator><operator>(</operator><name><name>conn</name><operator>-&gt;</operator><name>handler</name><operator>-&gt;</operator><name>protocol</name></name> <operator>&amp;</operator> <name>PROTO_FAMILY_HTTP</name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>conn</name><operator>-&gt;</operator><name>httpversion</name></name> <operator>==</operator> <literal type="number">20</literal><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if<condition>(

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_NGHTTP2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>!</operator><name>is_http2</name> <operator>&amp;&amp;</operator>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name><name>k</name><operator>-&gt;</operator><name>size</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>k</name><operator>-&gt;</operator><name>header</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>curl_off_t</name></type> <name>totalleft</name> <init>= <expr><name><name>k</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <name><name>k</name><operator>-&gt;</operator><name>bytecount</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>totalleft</name> <operator>&lt;</operator> <operator>(</operator><name>curl_off_t</name><operator>)</operator><name>bytestoread</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>bytestoread</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>totalleft</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>bytestoread</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_read</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>sockfd</name></name></expr></argument>, <argument><expr><name><name>k</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>bytestoread</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>CURLE_AGAIN</name> <operator>==</operator> <name>result</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt> 

<if_stmt><if>if<condition>(<expr><name>result</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>DEBUGF</name><argument_list>(<argument><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"readwrite_data: we're done!\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>nread</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>k</name><operator>-&gt;</operator><name>bytecount</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>Curl_pgrsTime</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>TIMER_STARTTRANSFER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>k</name><operator>-&gt;</operator><name>exp100</name></name> <operator>&gt;</operator> <name>EXP100_SEND_DATA</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>k</name><operator>-&gt;</operator><name>start100</name></name> <operator>=</operator> <call><name>Curl_now</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>didwhat</name> <operator>|=</operator> <name>KEEP_RECV</name></expr>;</expr_stmt>

<expr_stmt><expr><name>is_empty_data</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><operator>(</operator><name>nread</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>k</name><operator>-&gt;</operator><name>bodywrites</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator><operator>)</operator></expr> ?</condition><then> <expr><name>TRUE</name></expr> </then><else>: <expr><name>FALSE</name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><literal type="number">0</literal> <operator>&lt;</operator> <name>nread</name> <operator>||</operator> <name>is_empty_data</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>k</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>nread</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_NGHTTP2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name>is_http2</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>nread</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>DEBUGF</name><argument_list>(<argument><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"nread == 0, stream closed, bailing\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>DEBUGF</name><argument_list>(<argument><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"nread &lt;= 0, server closed connection, bailing\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>k</name><operator>-&gt;</operator><name>keepon</name></name> <operator>&amp;=</operator> <operator>~</operator><name>KEEP_RECV</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>k</name><operator>-&gt;</operator><name>str</name></name> <operator>=</operator> <name><name>k</name><operator>-&gt;</operator><name>buf</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>handler</name><operator>-&gt;</operator><name>readwrite</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name><name>conn</name><operator>-&gt;</operator><name>handler</name><operator>-&gt;</operator><name>readwrite</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nread</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>readmore</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>readmore</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_HTTP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name><name>k</name><operator>-&gt;</operator><name>header</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>stop_reading</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_http_readwrite_headers</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nread</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stop_reading</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>handler</name><operator>-&gt;</operator><name>readwrite</name></name> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>k</name><operator>-&gt;</operator><name>maxdownload</name></name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>nread</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name><name>conn</name><operator>-&gt;</operator><name>handler</name><operator>-&gt;</operator><name>readwrite</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nread</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>readmore</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>readmore</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>stop_reading</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>nread</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>,

<argument><expr><literal type="string">"Excess found:"</literal>

<literal type="string">" excess = %zd"</literal>

<literal type="string">" url = %s (zero-length body)\n"</literal></expr></argument>,

<argument><expr><name>nread</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>up</name><operator>.</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<if_stmt><if>if<condition>(<expr><name><name>k</name><operator>-&gt;</operator><name>str</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>k</name><operator>-&gt;</operator><name>header</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name>nread</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>is_empty_data</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>opt_no_body</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>streamclose</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><literal type="string">"ignoring body"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>done</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<return>return <expr><name>CURLE_WEIRD_SERVER_REPLY</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_HTTP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><literal type="number">0</literal> <operator>==</operator> <name><name>k</name><operator>-&gt;</operator><name>bodywrites</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>is_empty_data</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>handler</name><operator>-&gt;</operator><name>protocol</name></name><operator>&amp;</operator><operator>(</operator><name>PROTO_FAMILY_HTTP</name><operator>|</operator><name>CURLPROTO_RTSP</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>newurl</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>close</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>k</name><operator>-&gt;</operator><name>keepon</name></name> <operator>&amp;=</operator> <operator>~</operator><name>KEEP_RECV</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>done</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>k</name><operator>-&gt;</operator><name>ignorebody</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Ignoring the response-body\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>resume_from</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>k</name><operator>-&gt;</operator><name>content_range</name></name> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>httpreq</name></name> <operator>==</operator> <name>HTTPREQ_GET</name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>!</operator><name><name>k</name><operator>-&gt;</operator><name>ignorebody</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>k</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>resume_from</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"The entire document is already downloaded"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>connclose</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><literal type="string">"already downloaded"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>k</name><operator>-&gt;</operator><name>keepon</name></name> <operator>&amp;=</operator> <operator>~</operator><name>KEEP_RECV</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>done</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"HTTP server doesn't seem to support "</literal>

<literal type="string">"byte ranges. Cannot resume."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_RANGE_ERROR</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>timecondition</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>range</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>Curl_meets_timecondition</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>k</name><operator>-&gt;</operator><name>timeofdoc</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>done</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>httpcode</name></name> <operator>=</operator> <literal type="number">304</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Simulate a HTTP 304 response!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>connclose</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><literal type="string">"Simulated 304 handling"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt> 

</block_content>}</block></if></if_stmt> 

</block_content>}</block></if></if_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<expr_stmt><expr><name><name>k</name><operator>-&gt;</operator><name>bodywrites</name></name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>verbose</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>k</name><operator>-&gt;</operator><name>badheader</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>Curl_debug</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>CURLINFO_DATA_IN</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>headerbuff</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>k</name><operator>-&gt;</operator><name>hbuflen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>k</name><operator>-&gt;</operator><name>badheader</name></name> <operator>==</operator> <name>HEADER_PARTHEADER</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>Curl_debug</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>CURLINFO_DATA_IN</name></expr></argument>,

<argument><expr><name><name>k</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>nread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>Curl_debug</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>CURLINFO_DATA_IN</name></expr></argument>,

<argument><expr><name><name>k</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>nread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_HTTP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name><name>k</name><operator>-&gt;</operator><name>chunk</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>extra</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CHUNKcode</name></type> <name>res</name> <init>=

<expr><call><name>Curl_httpchunk_read</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>k</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name>nread</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nread</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>extra</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>CHUNKE_OK</name> <operator>&lt;</operator> <name>res</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>CHUNKE_PASSTHRU_ERROR</name> <operator>==</operator> <name>res</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Failed reading the chunked-encoded stream"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>extra</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"%s in chunked-encoding"</literal></expr></argument>, <argument><expr><call><name>Curl_chunked_strerror</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_RECV_ERROR</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>CHUNKE_STOP</name> <operator>==</operator> <name>res</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>dataleft</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>k</name><operator>-&gt;</operator><name>keepon</name></name> <operator>&amp;=</operator> <operator>~</operator><name>KEEP_RECV</name></expr>;</expr_stmt> 

<expr_stmt><expr><name>dataleft</name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>chunk</name><operator>.</operator><name>dataleft</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>dataleft</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"Leftovers after chunking: %zu bytes\n"</literal></expr></argument>,

<argument><expr><name>dataleft</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>k</name><operator>-&gt;</operator><name>badheader</name></name> <operator>==</operator> <name>HEADER_PARTHEADER</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>k</name><operator>-&gt;</operator><name>ignorebody</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>DEBUGF</name><argument_list>(<argument><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Increasing bytecount by %zu from hbuflen\n"</literal></expr></argument>,

<argument><expr><name><name>k</name><operator>-&gt;</operator><name>hbuflen</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>k</name><operator>-&gt;</operator><name>bytecount</name></name> <operator>+=</operator> <name><name>k</name><operator>-&gt;</operator><name>hbuflen</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal> <operator>!=</operator> <name><name>k</name><operator>-&gt;</operator><name>maxdownload</name></name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>k</name><operator>-&gt;</operator><name>bytecount</name></name> <operator>+</operator> <name>nread</name> <operator>&gt;=</operator> <name><name>k</name><operator>-&gt;</operator><name>maxdownload</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>excess</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name><name>k</name><operator>-&gt;</operator><name>bytecount</name></name> <operator>+</operator> <name>nread</name> <operator>-</operator> <name><name>k</name><operator>-&gt;</operator><name>maxdownload</name></name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>excess</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>k</name><operator>-&gt;</operator><name>ignorebody</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>,

<argument><expr><literal type="string">"Excess found in a read:"</literal>

<literal type="string">" excess = %zu"</literal>

<literal type="string">", size = %"</literal> <name>CURL_FORMAT_CURL_OFF_T</name>

<literal type="string">", maxdownload = %"</literal> <name>CURL_FORMAT_CURL_OFF_T</name>

<literal type="string">", bytecount = %"</literal> <name>CURL_FORMAT_CURL_OFF_T</name> <literal type="string">"\n"</literal></expr></argument>,

<argument><expr><name>excess</name></expr></argument>, <argument><expr><name><name>k</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name><name>k</name><operator>-&gt;</operator><name>maxdownload</name></name></expr></argument>, <argument><expr><name><name>k</name><operator>-&gt;</operator><name>bytecount</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>nread</name> <operator>=</operator> <operator>(</operator><name>ssize_t</name><operator>)</operator> <operator>(</operator><name><name>k</name><operator>-&gt;</operator><name>maxdownload</name></name> <operator>-</operator> <name><name>k</name><operator>-&gt;</operator><name>bytecount</name></name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>nread</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name>nread</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>k</name><operator>-&gt;</operator><name>keepon</name></name> <operator>&amp;=</operator> <operator>~</operator><name>KEEP_RECV</name></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>k</name><operator>-&gt;</operator><name>bytecount</name></name> <operator>+=</operator> <name>nread</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_pgrsSetDownloadCounter</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>k</name><operator>-&gt;</operator><name>bytecount</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>k</name><operator>-&gt;</operator><name>chunk</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name>nread</name> <operator>||</operator> <name><name>k</name><operator>-&gt;</operator><name>badheader</name></name> <operator>||</operator> <name>is_empty_data</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>k</name><operator>-&gt;</operator><name>badheader</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>k</name><operator>-&gt;</operator><name>ignorebody</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>k</name><operator>-&gt;</operator><name>maxdownload</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <operator>(</operator><name>curl_off_t</name><operator>)</operator><name><name>k</name><operator>-&gt;</operator><name>hbuflen</name></name> <operator>&lt;=</operator> <name><name>k</name><operator>-&gt;</operator><name>maxdownload</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_client_write</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>CLIENTWRITE_BODY</name></expr></argument>,

<argument><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>headerbuff</name></name></expr></argument>,

<argument><expr><name><name>k</name><operator>-&gt;</operator><name>hbuflen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_client_write</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>CLIENTWRITE_BODY</name></expr></argument>,

<argument><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>headerbuff</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>k</name><operator>-&gt;</operator><name>maxdownload</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>k</name><operator>-&gt;</operator><name>badheader</name></name> <operator>&lt;</operator> <name>HEADER_ALLBAD</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>http_ce_skip</name></name> <operator>||</operator> <operator>!</operator><name><name>k</name><operator>-&gt;</operator><name>writer_stack</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>k</name><operator>-&gt;</operator><name>ignorebody</name></name></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_POP3</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>handler</name><operator>-&gt;</operator><name>protocol</name></name> <operator>&amp;</operator> <name>PROTO_FAMILY_POP3</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_pop3_write</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>k</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name>nread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_client_write</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>CLIENTWRITE_BODY</name></expr></argument>, <argument><expr><name><name>k</name><operator>-&gt;</operator><name>str</name></name></expr></argument>,

<argument><expr><name>nread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><operator>!</operator><name><name>k</name><operator>-&gt;</operator><name>ignorebody</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_unencode_write</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>k</name><operator>-&gt;</operator><name>writer_stack</name></name></expr></argument>, <argument><expr><name><name>k</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name>nread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>k</name><operator>-&gt;</operator><name>badheader</name></name> <operator>=</operator> <name>HEADER_NORMAL</name></expr>;</expr_stmt> 

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt> 

<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>handler</name><operator>-&gt;</operator><name>readwrite</name></name> <operator>&amp;&amp;</operator> <name>excess</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>k</name><operator>-&gt;</operator><name>str</name></name> <operator>+=</operator> <name>nread</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>&amp;</operator><name><name>k</name><operator>-&gt;</operator><name>str</name><index>[<expr><name>excess</name></expr>]</index></name> <operator>&gt;</operator> <operator>&amp;</operator><name><name>k</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>buffer_size</name></name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>excess</name> <operator>=</operator> <operator>&amp;</operator><name><name>k</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>buffer_size</name></name></expr>]</index></name> <operator>-</operator> <name><name>k</name><operator>-&gt;</operator><name>str</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>nread</name> <operator>=</operator> <operator>(</operator><name>ssize_t</name><operator>)</operator><name>excess</name></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name><name>conn</name><operator>-&gt;</operator><name>handler</name><operator>-&gt;</operator><name>readwrite</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nread</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>readmore</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>readmore</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>k</name><operator>-&gt;</operator><name>keepon</name></name> <operator>|=</operator> <name>KEEP_RECV</name></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>is_empty_data</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>k</name><operator>-&gt;</operator><name>keepon</name></name> <operator>&amp;=</operator> <operator>~</operator><name>KEEP_RECV</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>k</name><operator>-&gt;</operator><name>keepon</name></name> <operator>&amp;</operator> <name>KEEP_RECV_PAUSE</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block> while<condition>(<expr><call><name>data_pending</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>maxloops</name><operator>--</operator></expr>)</condition>;</do>

<if_stmt><if>if<condition>(<expr><name>maxloops</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>cselect_bits</name></name> <operator>=</operator> <name>CURL_CSELECT_IN</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>comeback</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><operator>(</operator><name><name>k</name><operator>-&gt;</operator><name>keepon</name></name> <operator>&amp;</operator> <operator>(</operator><name>KEEP_RECV</name><operator>|</operator><name>KEEP_SEND</name><operator>)</operator><operator>)</operator> <operator>==</operator> <name>KEEP_SEND</name><operator>)</operator> <operator>&amp;&amp;</operator>

<name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>close</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"we are done reading and this is set to close, stop send\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>k</name><operator>-&gt;</operator><name>keepon</name></name> <operator>&amp;=</operator> <operator>~</operator><name>KEEP_SEND</name></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>CURLcode</name></type> <name>Curl_done_sending</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>SingleRequest</name></name> <modifier>*</modifier></type><name>k</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>k</name><operator>-&gt;</operator><name>keepon</name></name> <operator>&amp;=</operator> <operator>~</operator><name>KEEP_SEND</name></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>Curl_http2_done_sending</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_quic_done_sending</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>rewindaftersend</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><call><name>Curl_readrewind</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>USE_LWIPSOCK</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SIO_IDEAL_SEND_BACKLOG_QUERY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIO_IDEAL_SEND_BACKLOG_QUERY</name></cpp:macro> <cpp:value>0x4004747B</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type> <name>win_update_buffer_size</name><parameter_list>(<parameter><decl><type><name>curl_socket_t</name></type> <name>sockfd</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ULONG</name></type> <name>ideal</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>ideallen</name></decl>;</decl_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>WSAIoctl</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>, <argument><expr><name>SIO_IDEAL_SEND_BACKLOG_QUERY</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><operator>&amp;</operator><name>ideal</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ideal</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>ideallen</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>setsockopt</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>, <argument><expr><name>SOL_SOCKET</name></expr></argument>, <argument><expr><name>SO_SNDBUF</name></expr></argument>,

<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>ideal</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ideal</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>win_update_buffer_size</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>readwrite_upload</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>didwhat</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>si</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>bytes_written</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>nread</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>bool</name></type> <name>sending_http_headers</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>SingleRequest</name></name> <modifier>*</modifier></type><name>k</name> <init>= <expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>req</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>k</name><operator>-&gt;</operator><name>bytecount</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>k</name><operator>-&gt;</operator><name>writebytecount</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>Curl_pgrsTime</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>TIMER_STARTTRANSFER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>didwhat</name> <operator>|=</operator> <name>KEEP_SEND</name></expr>;</expr_stmt>

<do>do <block>{<block_content>

<if_stmt><if>if<condition>(<expr><literal type="number">0</literal> <operator>==</operator> <name><name>k</name><operator>-&gt;</operator><name>upload_present</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_get_upload_buffer</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>k</name><operator>-&gt;</operator><name>upload_fromhere</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>ulbuf</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>k</name><operator>-&gt;</operator><name>upload_done</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>fillcount</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>HTTP</name></name> <modifier>*</modifier></type><name>http</name> <init>= <expr><name><name>k</name><operator>-&gt;</operator><name>protop</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>k</name><operator>-&gt;</operator><name>exp100</name></name> <operator>==</operator> <name>EXP100_SENDING_REQUEST</name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>http</name><operator>-&gt;</operator><name>sending</name></name> <operator>==</operator> <name>HTTPSEND_BODY</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>k</name><operator>-&gt;</operator><name>exp100</name></name> <operator>=</operator> <name>EXP100_AWAITING_CONTINUE</name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>k</name><operator>-&gt;</operator><name>keepon</name></name> <operator>&amp;=</operator> <operator>~</operator><name>KEEP_SEND</name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>k</name><operator>-&gt;</operator><name>start100</name></name> <operator>=</operator> <call><name>Curl_now</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><operator>*</operator><name>didwhat</name> <operator>&amp;=</operator> <operator>~</operator><name>KEEP_SEND</name></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>Curl_expire</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>expect_100_timeout</name></name></expr></argument>, <argument><expr><name>EXPIRE_100_TIMEOUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>handler</name><operator>-&gt;</operator><name>protocol</name></name><operator>&amp;</operator><operator>(</operator><name>PROTO_FAMILY_HTTP</name><operator>|</operator><name>CURLPROTO_RTSP</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>http</name><operator>-&gt;</operator><name>sending</name></name> <operator>==</operator> <name>HTTPSEND_REQUEST</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>sending_http_headers</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>sending_http_headers</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_fillreadbuffer</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>upload_buffer_size</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>fillcount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>nread</name> <operator>=</operator> <name>fillcount</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>nread</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt> 

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>nread</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>k</name><operator>-&gt;</operator><name>keepon</name></name> <operator>&amp;</operator> <name>KEEP_SEND_PAUSE</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>nread</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_done_sending</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>k</name><operator>-&gt;</operator><name>upload_present</name></name> <operator>=</operator> <name>nread</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><operator>!</operator><name>sending_http_headers</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DO_LINEEND_CONV</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>prefer_ascii</name></name><operator>)</operator> <operator>||</operator>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>crlf</name></name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>scratch</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>scratch</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><literal type="number">2</literal> <operator>*</operator> <name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>upload_buffer_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>scratch</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Failed to alloc scratch buffer!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>si</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nread</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>si</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>k</name><operator>-&gt;</operator><name>upload_fromhere</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">0x0a</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>scratch</name><index>[<expr><name>si</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x0d</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>scratch</name><index>[<expr><name>si</name></expr>]</index></name> <operator>=</operator> <literal type="number">0x0a</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>crlf</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>infilesize</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>infilesize</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>scratch</name><index>[<expr><name>si</name></expr>]</index></name> <operator>=</operator> <name><name>k</name><operator>-&gt;</operator><name>upload_fromhere</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if<condition>(<expr><name>si</name> <operator>!=</operator> <name>nread</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>nread</name> <operator>=</operator> <name>si</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>k</name><operator>-&gt;</operator><name>upload_fromhere</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>scratch</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>k</name><operator>-&gt;</operator><name>upload_present</name></name> <operator>=</operator> <name>nread</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_SMTP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>handler</name><operator>-&gt;</operator><name>protocol</name></name> <operator>&amp;</operator> <name>PROTO_FAMILY_SMTP</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_smtp_escape_eob</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>nread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</block_content>}</block></if> 

<else>else <block>{<block_content>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_write</name><argument_list>(<argument><expr><name>conn</name></expr></argument>,

<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>writesockfd</name></name></expr></argument>, 

<argument><expr><name><name>k</name><operator>-&gt;</operator><name>upload_fromhere</name></name></expr></argument>, 

<argument><expr><name><name>k</name><operator>-&gt;</operator><name>upload_present</name></name></expr></argument>, 

<argument><expr><operator>&amp;</operator><name>bytes_written</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>win_update_buffer_size</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>writesockfd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>verbose</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>Curl_debug</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>CURLINFO_DATA_OUT</name></expr></argument>, <argument><expr><name><name>k</name><operator>-&gt;</operator><name>upload_fromhere</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>bytes_written</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>k</name><operator>-&gt;</operator><name>writebytecount</name></name> <operator>+=</operator> <name>bytes_written</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_pgrsSetUploadCounter</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>k</name><operator>-&gt;</operator><name>writebytecount</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><operator>!</operator><name><name>k</name><operator>-&gt;</operator><name>upload_chunky</name></name> <operator>||</operator> <name><name>k</name><operator>-&gt;</operator><name>forbidchunk</name></name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>k</name><operator>-&gt;</operator><name>writebytecount</name></name> <operator>==</operator> <name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>infilesize</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>k</name><operator>-&gt;</operator><name>upload_done</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"We are completely uploaded and fine\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>k</name><operator>-&gt;</operator><name>upload_present</name></name> <operator>!=</operator> <name>bytes_written</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>k</name><operator>-&gt;</operator><name>upload_present</name></name> <operator>-=</operator> <name>bytes_written</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>k</name><operator>-&gt;</operator><name>upload_fromhere</name></name> <operator>+=</operator> <name>bytes_written</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_get_upload_buffer</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>k</name><operator>-&gt;</operator><name>upload_fromhere</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>ulbuf</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>k</name><operator>-&gt;</operator><name>upload_present</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<if_stmt><if>if<condition>(<expr><name><name>k</name><operator>-&gt;</operator><name>upload_done</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_done_sending</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block> while<condition>(<expr><literal type="number">0</literal></expr>)</condition>;</do> 

<return>return <expr><name>CURLE_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>CURLcode</name></type> <name>Curl_readwrite</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>done</name></decl></parameter>,

<parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>comeback</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>SingleRequest</name></name> <modifier>*</modifier></type><name>k</name> <init>= <expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>req</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>didwhat</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>curl_socket_t</name></type> <name>fd_read</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>curl_socket_t</name></type> <name>fd_write</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>select_res</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>cselect_bits</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>cselect_bits</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>k</name><operator>-&gt;</operator><name>keepon</name></name> <operator>&amp;</operator> <name>KEEP_RECVBITS</name><operator>)</operator> <operator>==</operator> <name>KEEP_RECV</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>fd_read</name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>sockfd</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>fd_read</name> <operator>=</operator> <name>CURL_SOCKET_BAD</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>k</name><operator>-&gt;</operator><name>keepon</name></name> <operator>&amp;</operator> <name>KEEP_SENDBITS</name><operator>)</operator> <operator>==</operator> <name>KEEP_SEND</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>fd_write</name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>writesockfd</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>fd_write</name> <operator>=</operator> <name>CURL_SOCKET_BAD</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>drain</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>select_res</name> <operator>|=</operator> <name>CURL_CSELECT_IN</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DEBUGF</name><argument_list>(<argument><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Curl_readwrite: forcibly told to drain data\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>select_res</name></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name>select_res</name> <operator>=</operator> <call><name>Curl_socket_check</name><argument_list>(<argument><expr><name>fd_read</name></expr></argument>, <argument><expr><name>CURL_SOCKET_BAD</name></expr></argument>, <argument><expr><name>fd_write</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>select_res</name> <operator>==</operator> <name>CURL_CSELECT_ERR</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"select/poll returned error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_SEND_ERROR</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>k</name><operator>-&gt;</operator><name>keepon</name></name> <operator>&amp;</operator> <name>KEEP_RECV</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>select_res</name> <operator>&amp;</operator> <name>CURL_CSELECT_IN</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>readwrite_data</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>didwhat</name></expr></argument>, <argument><expr><name>done</name></expr></argument>, <argument><expr><name>comeback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name> <operator>||</operator> <operator>*</operator><name>done</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>k</name><operator>-&gt;</operator><name>keepon</name></name> <operator>&amp;</operator> <name>KEEP_SEND</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>select_res</name> <operator>&amp;</operator> <name>CURL_CSELECT_OUT</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>readwrite_upload</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>didwhat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>k</name><operator>-&gt;</operator><name>now</name></name> <operator>=</operator> <call><name>Curl_now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>didwhat</name></expr>)</condition> <block>{<block_content>

<empty_stmt>;</empty_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>k</name><operator>-&gt;</operator><name>exp100</name></name> <operator>==</operator> <name>EXP100_AWAITING_CONTINUE</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>timediff_t</name></type> <name>ms</name> <init>= <expr><call><name>Curl_timediff</name><argument_list>(<argument><expr><name><name>k</name><operator>-&gt;</operator><name>now</name></name></expr></argument>, <argument><expr><name><name>k</name><operator>-&gt;</operator><name>start100</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>ms</name> <operator>&gt;=</operator> <name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>expect_100_timeout</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>k</name><operator>-&gt;</operator><name>exp100</name></name> <operator>=</operator> <name>EXP100_SEND_DATA</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>k</name><operator>-&gt;</operator><name>keepon</name></name> <operator>|=</operator> <name>KEEP_SEND</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_expire_done</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>EXPIRE_100_TIMEOUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Done waiting for 100-continue\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>Curl_pgrsUpdate</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_ABORTED_BY_CALLBACK</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_speedcheck</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>k</name><operator>-&gt;</operator><name>now</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>k</name><operator>-&gt;</operator><name>keepon</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><literal type="number">0</literal> <operator>&gt;</operator> <call><name>Curl_timeleft</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>k</name><operator>-&gt;</operator><name>now</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>k</name><operator>-&gt;</operator><name>size</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Operation timed out after %"</literal> <name>CURL_FORMAT_TIMEDIFF_T</name>

<literal type="string">" milliseconds with %"</literal> <name>CURL_FORMAT_CURL_OFF_T</name> <literal type="string">" out of %"</literal>

<name>CURL_FORMAT_CURL_OFF_T</name> <literal type="string">" bytes received"</literal></expr></argument>,

<argument><expr><call><name>Curl_timediff</name><argument_list>(<argument><expr><name><name>k</name><operator>-&gt;</operator><name>now</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>progress</name><operator>.</operator><name>t_startsingle</name></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>k</name><operator>-&gt;</operator><name>bytecount</name></name></expr></argument>, <argument><expr><name><name>k</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Operation timed out after %"</literal> <name>CURL_FORMAT_TIMEDIFF_T</name>

<literal type="string">" milliseconds with %"</literal> <name>CURL_FORMAT_CURL_OFF_T</name> <literal type="string">" bytes received"</literal></expr></argument>,

<argument><expr><call><name>Curl_timediff</name><argument_list>(<argument><expr><name><name>k</name><operator>-&gt;</operator><name>now</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>progress</name><operator>.</operator><name>t_startsingle</name></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>k</name><operator>-&gt;</operator><name>bytecount</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>CURLE_OPERATION_TIMEDOUT</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>opt_no_body</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>k</name><operator>-&gt;</operator><name>size</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>k</name><operator>-&gt;</operator><name>bytecount</name></name> <operator>!=</operator> <name><name>k</name><operator>-&gt;</operator><name>size</name></name><operator>)</operator> <operator>&amp;&amp;</operator>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DO_LINEEND_CONV</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>(</operator><name><name>k</name><operator>-&gt;</operator><name>bytecount</name></name> <operator>!=</operator> <operator>(</operator><name><name>k</name><operator>-&gt;</operator><name>size</name></name> <operator>+</operator> <name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>crlf_conversions</name></name><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<operator>!</operator><name><name>k</name><operator>-&gt;</operator><name>newurl</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"transfer closed with %"</literal> <name>CURL_FORMAT_CURL_OFF_T</name>

<literal type="string">" bytes remaining to read"</literal></expr></argument>, <argument><expr><name><name>k</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <name><name>k</name><operator>-&gt;</operator><name>bytecount</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_PARTIAL_FILE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>opt_no_body</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>k</name><operator>-&gt;</operator><name>chunk</name></name> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>conn</name><operator>-&gt;</operator><name>chunk</name><operator>.</operator><name>state</name></name> <operator>!=</operator> <name>CHUNK_STOP</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"transfer closed with outstanding read data remaining"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_PARTIAL_FILE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>Curl_pgrsUpdate</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_ABORTED_BY_CALLBACK</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><operator>*</operator><name>done</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><literal type="number">0</literal> <operator>==</operator> <operator>(</operator><name><name>k</name><operator>-&gt;</operator><name>keepon</name></name><operator>&amp;</operator><operator>(</operator><name>KEEP_RECV</name><operator>|</operator><name>KEEP_SEND</name><operator>|</operator>

<name>KEEP_RECV_PAUSE</name><operator>|</operator><name>KEEP_SEND_PAUSE</name><operator>)</operator><operator>)</operator><operator>)</operator></expr> ?</condition><then> <expr><name>TRUE</name></expr> </then><else>: <expr><name>FALSE</name></expr></else></ternary></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>Curl_single_getsock</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,

<parameter><decl><type><name>curl_socket_t</name> <modifier>*</modifier></type><name>sock</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bitmap</name> <init>= <expr><name>GETSOCK_BLANK</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>sockindex</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>handler</name><operator>-&gt;</operator><name>perform_getsock</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name><name>conn</name><operator>-&gt;</operator><name>handler</name><operator>-&gt;</operator><name>perform_getsock</name></name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>sock</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>keepon</name></name> <operator>&amp;</operator> <name>KEEP_RECVBITS</name><operator>)</operator> <operator>==</operator> <name>KEEP_RECV</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>DEBUGASSERT</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>sockfd</name></name> <operator>!=</operator> <name>CURL_SOCKET_BAD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bitmap</name> <operator>|=</operator> <call><name>GETSOCK_READSOCK</name><argument_list>(<argument><expr><name>sockindex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sock</name><index>[<expr><name>sockindex</name></expr>]</index></name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>sockfd</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>keepon</name></name> <operator>&amp;</operator> <name>KEEP_SENDBITS</name><operator>)</operator> <operator>==</operator> <name>KEEP_SEND</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>conn</name><operator>-&gt;</operator><name>sockfd</name></name> <operator>!=</operator> <name><name>conn</name><operator>-&gt;</operator><name>writesockfd</name></name><operator>)</operator> <operator>||</operator>

<name>bitmap</name> <operator>==</operator> <name>GETSOCK_BLANK</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>bitmap</name> <operator>!=</operator> <name>GETSOCK_BLANK</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>sockindex</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<expr_stmt><expr><call><name>DEBUGASSERT</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>writesockfd</name></name> <operator>!=</operator> <name>CURL_SOCKET_BAD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sock</name><index>[<expr><name>sockindex</name></expr>]</index></name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>writesockfd</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>bitmap</name> <operator>|=</operator> <call><name>GETSOCK_WRITESOCK</name><argument_list>(<argument><expr><name>sockindex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>bitmap</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>Curl_init_CONNECT</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>fread_func</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>fread_func_set</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>in</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>in_set</name></name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>CURLcode</name></type> <name>Curl_pretransfer</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>data</name><operator>-&gt;</operator><name>change</name><operator>.</operator><name>url</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>uh</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"No URL set!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_URL_MALFORMAT</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>change</name><operator>.</operator><name>url_alloc</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>change</name><operator>.</operator><name>url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>change</name><operator>.</operator><name>url_alloc</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>data</name><operator>-&gt;</operator><name>change</name><operator>.</operator><name>url</name></name> <operator>&amp;&amp;</operator> <name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>uh</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>CURLUcode</name></type> <name>uc</name></decl>;</decl_stmt>

<expr_stmt><expr><name>uc</name> <operator>=</operator> <call><name>curl_url_get</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>uh</name></name></expr></argument>,

<argument><expr><name>CURLUPART_URL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_SET_URL</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>uc</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"No URL set!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_URL_MALFORMAT</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>change</name><operator>.</operator><name>url</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_SET_URL</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_ssl_initsessions</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>general_ssl</name><operator>.</operator><name>max_ssl_sessions</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>wildcardmatch</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>wildcard_enabled</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>followlocation</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>this_is_a_follow</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>errorbuf</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>httpversion</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>authproblem</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>authhost</name><operator>.</operator><name>want</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>httpauth</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>authproxy</name><operator>.</operator><name>want</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>proxyauth</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>wouldredirect</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>wouldredirect</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>httpreq</name></name> <operator>==</operator> <name>HTTPREQ_PUT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>infilesize</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>filesize</name></name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>(<expr><operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>httpreq</name></name> <operator>!=</operator> <name>HTTPREQ_GET</name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>httpreq</name></name> <operator>!=</operator> <name>HTTPREQ_HEAD</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>infilesize</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>postfieldsize</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>postfields</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>infilesize</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>infilesize</name></name> <operator>=</operator> <operator>(</operator><name>curl_off_t</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>postfields</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>infilesize</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>change</name><operator>.</operator><name>cookielist</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>Curl_cookie_loadfiles</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>change</name><operator>.</operator><name>resolve</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_loadhostpairs</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>result</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>allow_port</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SIGNAL</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>SIGPIPE</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_MSG_NOSIGNAL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>no_signal</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>prev_signal</name></name> <operator>=</operator> <call><name>signal</name><argument_list>(<argument><expr><name>SIGPIPE</name></expr></argument>, <argument><expr><name>SIG_IGN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>Curl_initinfo</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>Curl_pgrsResetTransferSizes</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_pgrsStartNow</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>authhost</name><operator>.</operator><name>picked</name></name> <operator>&amp;=</operator> <name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>authhost</name><operator>.</operator><name>want</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>authproxy</name><operator>.</operator><name>picked</name></name> <operator>&amp;=</operator> <name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>authproxy</name><operator>.</operator><name>want</name></name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_FTP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>wildcardmatch</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>WildcardData</name></name> <modifier>*</modifier></type><name>wc</name> <init>= <expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>wildcard</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>wc</name><operator>-&gt;</operator><name>state</name></name> <operator>&lt;</operator> <name>CURLWC_INIT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_wildcard_init</name><argument_list>(<argument><expr><name>wc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>Curl_http2_init_state</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>CURLcode</name></type> <name>Curl_posttransfer</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SIGNAL</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>SIGPIPE</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_MSG_NOSIGNAL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>no_signal</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGPIPE</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>prev_signal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>data</name></expr>;</expr_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>CURLcode</name></type> <name>Curl_follow</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>newurl</name></decl></parameter>, 

<parameter><decl><type><name>followtype</name></type> <name>type</name></decl></parameter>)</parameter_list> 

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_HTTP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>data</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>newurl</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>type</name></expr>;</expr_stmt>

<return>return <expr><name>CURLE_TOO_MANY_REDIRECTS</name></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>bool</name></type> <name>disallowport</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>reachedmax</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CURLUcode</name></type> <name>uc</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>type</name> <operator>==</operator> <name>FOLLOW_REDIR</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>maxredirs</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>followlocation</name></name> <operator>&gt;=</operator> <name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>maxredirs</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>reachedmax</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>type</name> <operator>=</operator> <name>FOLLOW_FAKE</name></expr>;</expr_stmt> 

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>this_is_a_follow</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>followlocation</name></name><operator>++</operator></expr>;</expr_stmt> 

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>http_auto_referer</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>change</name><operator>.</operator><name>referer_alloc</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>change</name><operator>.</operator><name>referer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>change</name><operator>.</operator><name>referer_alloc</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>change</name><operator>.</operator><name>referer</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>change</name><operator>.</operator><name>url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>data</name><operator>-&gt;</operator><name>change</name><operator>.</operator><name>referer</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>change</name><operator>.</operator><name>referer_alloc</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>Curl_is_absolute_url</name><argument_list>(<argument><expr><name>newurl</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>MAX_SCHEME_LEN</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>disallowport</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>DEBUGASSERT</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>uh</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>uc</name> <operator>=</operator> <call><name>curl_url_set</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>uh</name></name></expr></argument>, <argument><expr><name>CURLUPART_URL</name></expr></argument>, <argument><expr><name>newurl</name></expr></argument>,

<argument><expr><ternary><condition><expr><operator>(</operator><name>type</name> <operator>==</operator> <name>FOLLOW_FAKE</name><operator>)</operator></expr> ?</condition><then> <expr><name>CURLU_NON_SUPPORT_SCHEME</name></expr> </then><else>:

<expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name>type</name> <operator>==</operator> <name>FOLLOW_REDIR</name><operator>)</operator></expr> ?</condition><then> <expr><name>CURLU_URLENCODE</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></else></ternary></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>uc</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>type</name> <operator>!=</operator> <name>FOLLOW_FAKE</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>Curl_uc_to_curlcode</name><argument_list>(<argument><expr><name>uc</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>newurl</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>newurl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>newurl</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>uc</name> <operator>=</operator> <call><name>curl_url_get</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>uh</name></name></expr></argument>, <argument><expr><name>CURLUPART_URL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>newurl</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>uc</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>Curl_uc_to_curlcode</name><argument_list>(<argument><expr><name>uc</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name>type</name> <operator>==</operator> <name>FOLLOW_FAKE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>wouldredirect</name></name> <operator>=</operator> <name>newurl</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>reachedmax</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Maximum (%ld) redirects followed"</literal></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>maxredirs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_TOO_MANY_REDIRECTS</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>disallowport</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>allow_port</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>change</name><operator>.</operator><name>url_alloc</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>change</name><operator>.</operator><name>url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>change</name><operator>.</operator><name>url</name></name> <operator>=</operator> <name>newurl</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>change</name><operator>.</operator><name>url_alloc</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Issue another request to this URL: '%s'\n"</literal></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>change</name><operator>.</operator><name>url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>httpcode</name></name></expr>)</condition> <block>{<block_content>

<default>default:</default> 

<break>break;</break>

<case>case <expr><literal type="number">301</literal></expr>:</case> 

<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>httpreq</name></name> <operator>==</operator> <name>HTTPREQ_POST</name>

<operator>||</operator> <name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>httpreq</name></name> <operator>==</operator> <name>HTTPREQ_POST_FORM</name>

<operator>||</operator> <name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>httpreq</name></name> <operator>==</operator> <name>HTTPREQ_POST_MIME</name><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>keep_post</name></name> <operator>&amp;</operator> <name>CURL_REDIR_POST_301</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Switch from POST to GET\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>httpreq</name></name> <operator>=</operator> <name>HTTPREQ_GET</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="number">302</literal></expr>:</case> 

<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>httpreq</name></name> <operator>==</operator> <name>HTTPREQ_POST</name>

<operator>||</operator> <name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>httpreq</name></name> <operator>==</operator> <name>HTTPREQ_POST_FORM</name>

<operator>||</operator> <name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>httpreq</name></name> <operator>==</operator> <name>HTTPREQ_POST_MIME</name><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>keep_post</name></name> <operator>&amp;</operator> <name>CURL_REDIR_POST_302</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Switch from POST to GET\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>httpreq</name></name> <operator>=</operator> <name>HTTPREQ_GET</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="number">303</literal></expr>:</case> 

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>httpreq</name></name> <operator>!=</operator> <name>HTTPREQ_GET</name>

<operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>keep_post</name></name> <operator>&amp;</operator> <name>CURL_REDIR_POST_303</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>httpreq</name></name> <operator>=</operator> <name>HTTPREQ_GET</name></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Disables POST, goes with %s\n"</literal></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>opt_no_body</name></name></expr>?</condition><then><expr><literal type="string">"HEAD"</literal></expr></then><else>:<expr><literal type="string">"GET"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="number">304</literal></expr>:</case> 

<break>break;</break>

<case>case <expr><literal type="number">305</literal></expr>:</case> 

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>Curl_pgrsTime</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>TIMER_REDIRECT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_pgrsResetTransferSizes</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</block_content>}</block></function>

<function><type><name>CURLcode</name></type> <name>Curl_retry_request</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,

<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>url</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>retry</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>url</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>upload</name></name> <operator>&amp;&amp;</operator>

<operator>!</operator><operator>(</operator><name><name>conn</name><operator>-&gt;</operator><name>handler</name><operator>-&gt;</operator><name>protocol</name></name><operator>&amp;</operator><operator>(</operator><name>PROTO_FAMILY_HTTP</name><operator>|</operator><name>CURLPROTO_RTSP</name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_OK</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>bytecount</name></name> <operator>+</operator> <name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>headerbytecount</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator>

<name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>reuse</name></name> <operator>&amp;&amp;</operator>

<operator>(</operator><operator>!</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>opt_no_body</name></name>

<operator>||</operator> <operator>(</operator><name><name>conn</name><operator>-&gt;</operator><name>handler</name><operator>-&gt;</operator><name>protocol</name></name> <operator>&amp;</operator> <name>PROTO_FAMILY_HTTP</name><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>rtspreq</name></name> <operator>!=</operator> <name>RTSPREQ_RECEIVE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>retry</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>refused_stream</name></name> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>bytecount</name></name> <operator>+</operator> <name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>headerbytecount</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"REFUSED_STREAM, retrying a fresh connect\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>refused_stream</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> 

<expr_stmt><expr><name>retry</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>retry</name></expr>)</condition> <block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONN_MAX_RETRIES</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>

<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>retrycount</name></name><operator>++</operator> <operator>&gt;=</operator> <name>CONN_MAX_RETRIES</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Connection died, tried %d times before giving up"</literal></expr></argument>,

<argument><expr><name>CONN_MAX_RETRIES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_SEND_ERROR</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"Connection died, retrying a fresh connect\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>url</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>change</name><operator>.</operator><name>url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>*</operator><name>url</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>connclose</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><literal type="string">"retry"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>retry</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt> 

<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>handler</name><operator>-&gt;</operator><name>protocol</name></name><operator>&amp;</operator><name>PROTO_FAMILY_HTTP</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>writebytecount</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><call><name>Curl_readrewind</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><operator>*</operator><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>Curl_setup_transfer</name><parameter_list>(

<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>, 

<parameter><decl><type><name>int</name></type> <name>sockindex</name></decl></parameter>, 

<parameter><decl><type><name>curl_off_t</name></type> <name>size</name></decl></parameter>, 

<parameter><decl><type><name>bool</name></type> <name>getheader</name></decl></parameter>, 

<parameter><decl><type><name>int</name></type> <name>writesockindex</name></decl></parameter> 

)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>SingleRequest</name></name> <modifier>*</modifier></type><name>k</name> <init>= <expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>req</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>conn</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DEBUGASSERT</name><argument_list>(<argument><expr><name>conn</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DEBUGASSERT</name><argument_list>(<argument><expr><operator>(</operator><name>sockindex</name> <operator>&lt;=</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>sockindex</name> <operator>&gt;=</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>multiplex</name></name> <operator>||</operator> <name><name>conn</name><operator>-&gt;</operator><name>httpversion</name></name> <operator>==</operator> <literal type="number">20</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>sockfd</name></name> <operator>=</operator> <ternary><condition><expr><name>sockindex</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> ?</condition><then>

<expr><operator>(</operator><operator>(</operator><ternary><condition><expr><name>writesockindex</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> ?</condition><then> <expr><name>CURL_SOCKET_BAD</name></expr> </then><else>: <expr><name><name>conn</name><operator>-&gt;</operator><name>sock</name><index>[<expr><name>writesockindex</name></expr>]</index></name></expr></else></ternary><operator>)</operator><operator>)</operator></expr> </then><else>:

<expr><name><name>conn</name><operator>-&gt;</operator><name>sock</name><index>[<expr><name>sockindex</name></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>writesockfd</name></name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>sockfd</name></name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>sockfd</name></name> <operator>=</operator> <ternary><condition><expr><name>sockindex</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> ?</condition><then>

<expr><name>CURL_SOCKET_BAD</name></expr> </then><else>: <expr><name><name>conn</name><operator>-&gt;</operator><name>sock</name><index>[<expr><name>sockindex</name></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>writesockfd</name></name> <operator>=</operator> <ternary><condition><expr><name>writesockindex</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> ?</condition><then>

<expr><name>CURL_SOCKET_BAD</name></expr></then><else>:<expr><name><name>conn</name><operator>-&gt;</operator><name>sock</name><index>[<expr><name>writesockindex</name></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>k</name><operator>-&gt;</operator><name>getheader</name></name> <operator>=</operator> <name>getheader</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>k</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>k</name><operator>-&gt;</operator><name>getheader</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>k</name><operator>-&gt;</operator><name>header</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>Curl_pgrsSetDownloadSize</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>k</name><operator>-&gt;</operator><name>getheader</name></name> <operator>||</operator> <operator>!</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>opt_no_body</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>sockindex</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>k</name><operator>-&gt;</operator><name>keepon</name></name> <operator>|=</operator> <name>KEEP_RECV</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>writesockindex</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>HTTP</name></name> <modifier>*</modifier></type><name>http</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>protop</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>expect100header</name></name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>conn</name><operator>-&gt;</operator><name>handler</name><operator>-&gt;</operator><name>protocol</name></name><operator>&amp;</operator><name>PROTO_FAMILY_HTTP</name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>http</name><operator>-&gt;</operator><name>sending</name></name> <operator>==</operator> <name>HTTPSEND_BODY</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>k</name><operator>-&gt;</operator><name>exp100</name></name> <operator>=</operator> <name>EXP100_AWAITING_CONTINUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>k</name><operator>-&gt;</operator><name>start100</name></name> <operator>=</operator> <call><name>Curl_now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_expire</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>expect_100_timeout</name></name></expr></argument>, <argument><expr><name>EXPIRE_100_TIMEOUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>expect100header</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>k</name><operator>-&gt;</operator><name>exp100</name></name> <operator>=</operator> <name>EXP100_SENDING_REQUEST</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>k</name><operator>-&gt;</operator><name>keepon</name></name> <operator>|=</operator> <name>KEEP_SEND</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt> 

</block_content>}</block></if></if_stmt> 

</block_content>}</block></function>

</unit>
