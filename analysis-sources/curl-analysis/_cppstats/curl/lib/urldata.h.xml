<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\curl-analysis\_cppstats\curl\lib\urldata.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_setup.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PORT_FTP</name></cpp:macro> <cpp:value>21</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PORT_FTPS</name></cpp:macro> <cpp:value>990</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PORT_TELNET</name></cpp:macro> <cpp:value>23</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PORT_HTTP</name></cpp:macro> <cpp:value>80</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PORT_HTTPS</name></cpp:macro> <cpp:value>443</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PORT_DICT</name></cpp:macro> <cpp:value>2628</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PORT_LDAP</name></cpp:macro> <cpp:value>389</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PORT_LDAPS</name></cpp:macro> <cpp:value>636</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PORT_TFTP</name></cpp:macro> <cpp:value>69</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PORT_SSH</name></cpp:macro> <cpp:value>22</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PORT_IMAP</name></cpp:macro> <cpp:value>143</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PORT_IMAPS</name></cpp:macro> <cpp:value>993</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PORT_POP3</name></cpp:macro> <cpp:value>110</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PORT_POP3S</name></cpp:macro> <cpp:value>995</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PORT_SMB</name></cpp:macro> <cpp:value>445</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PORT_SMBS</name></cpp:macro> <cpp:value>445</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PORT_SMTP</name></cpp:macro> <cpp:value>25</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PORT_SMTPS</name></cpp:macro> <cpp:value>465</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PORT_RTSP</name></cpp:macro> <cpp:value>554</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PORT_RTMP</name></cpp:macro> <cpp:value>1935</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PORT_RTMPT</name></cpp:macro> <cpp:value>PORT_HTTP</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PORT_RTMPS</name></cpp:macro> <cpp:value>PORT_HTTPS</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PORT_GOPHER</name></cpp:macro> <cpp:value>70</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DICT_MATCH</name></cpp:macro> <cpp:value>"/MATCH:"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DICT_MATCH2</name></cpp:macro> <cpp:value>"/M:"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DICT_MATCH3</name></cpp:macro> <cpp:value>"/FIND:"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DICT_DEFINE</name></cpp:macro> <cpp:value>"/DEFINE:"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DICT_DEFINE2</name></cpp:macro> <cpp:value>"/D:"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DICT_DEFINE3</name></cpp:macro> <cpp:value>"/LOOKUP:"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CURL_DEFAULT_USER</name></cpp:macro> <cpp:value>"anonymous"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CURL_DEFAULT_PASSWORD</name></cpp:macro> <cpp:value>"ftp@example.com"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROTO_FAMILY_HTTP</name></cpp:macro> <cpp:value>(CURLPROTO_HTTP|CURLPROTO_HTTPS)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROTO_FAMILY_FTP</name></cpp:macro> <cpp:value>(CURLPROTO_FTP|CURLPROTO_FTPS)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROTO_FAMILY_POP3</name></cpp:macro> <cpp:value>(CURLPROTO_POP3|CURLPROTO_POP3S)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROTO_FAMILY_SMB</name></cpp:macro> <cpp:value>(CURLPROTO_SMB|CURLPROTO_SMBS)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROTO_FAMILY_SMTP</name></cpp:macro> <cpp:value>(CURLPROTO_SMTP|CURLPROTO_SMTPS)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROTO_FAMILY_SSH</name></cpp:macro> <cpp:value>(CURLPROTO_SCP|CURLPROTO_SFTP)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_CONNCACHE_SIZE</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_IPADR_LEN</name></cpp:macro> <cpp:value>sizeof("ffff:ffff:ffff:ffff:ffff:ffff:255.255.255.255")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RESP_TIMEOUT</name></cpp:macro> <cpp:value>(120*1000)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CURL_MAX_INPUT_LENGTH</name></cpp:macro> <cpp:value>8000000</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cookie.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"psl.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"formdata.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_NETINET_IN_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet/in.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_NETINET_IN6_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet/in6.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"timeval.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;curl/curl.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_chunks.h"</cpp:file></cpp:include> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hostip.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hash.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"splay.h"</cpp:file></cpp:include>

<typedef>typedef <function_decl><type><name>ssize_t</name></type> (<name>Curl_send</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, 

<parameter><decl><type><name>int</name></type> <name>sockindex</name></decl></parameter>, 

<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, 

<parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, 

<parameter><decl><type><name>CURLcode</name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>;</function_decl></typedef> 

<typedef>typedef <function_decl><type><name>ssize_t</name></type> (<name>Curl_recv</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, 

<parameter><decl><type><name>int</name></type> <name>sockindex</name></decl></parameter>, 

<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, 

<parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, 

<parameter><decl><type><name>CURLcode</name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>;</function_decl></typedef> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mime.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"imap.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pop3.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"smtp.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ftp.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"file.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vssh/ssh.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rtsp.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"smb.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"wildcard.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"multihandle.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"quic.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_GSSAPI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_GSSGNU</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;gss.h&gt;</cpp:file></cpp:include>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>defined</name> <name>HAVE_GSSAPI_GSSAPI_H</name></expr></cpp:elif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;gssapi/gssapi.h&gt;</cpp:file></cpp:include>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;gssapi.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_GSSAPI_GSSAPI_GENERIC_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;gssapi/gssapi_generic.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LIBSSH2_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libssh2.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libssh2_sftp.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEADERSIZE</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CURLEASY_MAGIC_NUMBER</name></cpp:macro> <cpp:value>0xc0dedbadU</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GOOD_EASY_HANDLE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x) &amp;&amp; ((x)-&gt;magic == CURLEASY_MAGIC_NUMBER))</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><name>bool</name></type> <name>bit</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIT</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>bool x</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<typedef>typedef <type><name>unsigned</name> <name>int</name></type> <name>bit</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIT</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>bit x:1</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_GSSAPI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<struct>struct <name>krb5buffer</name> <block>{

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>index</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>BIT</name><argument_list>(<argument><expr><name>eof_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

}</block>;</struct>

<enum>enum <name>protection_level</name> <block>{

<decl><name>PROT_NONE</name></decl>, 

<decl><name>PROT_CLEAR</name></decl>,

<decl><name>PROT_SAFE</name></decl>,

<decl><name>PROT_CONFIDENTIAL</name></decl>,

<decl><name>PROT_PRIVATE</name></decl>,

<decl><name>PROT_CMD</name></decl>,

<decl><name>PROT_LAST</name></decl> 

}</block>;</enum>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><enum>enum <block>{

<decl><name>ssl_connect_1</name></decl>,

<decl><name>ssl_connect_2</name></decl>,

<decl><name>ssl_connect_2_reading</name></decl>,

<decl><name>ssl_connect_2_writing</name></decl>,

<decl><name>ssl_connect_3</name></decl>,

<decl><name>ssl_connect_done</name></decl>

}</block></enum></type> <name>ssl_connect_state</name>;</typedef>

<typedef>typedef <type><enum>enum <block>{

<decl><name>ssl_connection_none</name></decl>,

<decl><name>ssl_connection_negotiating</name></decl>,

<decl><name>ssl_connection_complete</name></decl>

}</block></enum></type> <name>ssl_connection_state</name>;</typedef>

<struct_decl>struct <name>ssl_backend_data</name>;</struct_decl>

<struct>struct <name>ssl_connect_data</name> <block>{

<decl_stmt><decl><type><name>ssl_connection_state</name></type> <name>state</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ssl_connect_state</name></type> <name>connecting_state</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_SSL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name><name>struct</name> <name>ssl_backend_data</name></name> <modifier>*</modifier></type><name>backend</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>BIT</name><argument_list>(<argument><expr><name>use</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

}</block>;</struct>

<struct>struct <name>ssl_primary_config</name> <block>{

<decl_stmt><decl><type><name>long</name></type> <name>version</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>long</name></type> <name>version_max</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>CApath</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>CAfile</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>clientcert</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>random_file</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>egdsocket</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cipher_list</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cipher_list13</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pinned_key</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>BIT</name><argument_list>(<argument><expr><name>verifypeer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>BIT</name><argument_list>(<argument><expr><name>verifyhost</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>BIT</name><argument_list>(<argument><expr><name>verifystatus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>BIT</name><argument_list>(<argument><expr><name>sessionid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

}</block>;</struct>

<struct>struct <name>ssl_config_data</name> <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>ssl_primary_config</name></name></type> <name>primary</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>certverifyresult</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>CRLfile</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>issuercert</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>curl_ssl_ctx_callback</name></type> <name>fsslctx</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>fsslctxp</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cert</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cert_type</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>key</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>key_type</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>key_passwd</name></decl>;</decl_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_TLS_SRP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>username</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>password</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name><name>enum</name> <name>CURL_TLSAUTH</name></name></type> <name>authtype</name></decl>;</decl_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>BIT</name><argument_list>(<argument><expr><name>certinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>BIT</name><argument_list>(<argument><expr><name>falsestart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BIT</name><argument_list>(<argument><expr><name>enable_beast</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>BIT</name><argument_list>(<argument><expr><name>no_revoke</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>BIT</name><argument_list>(<argument><expr><name>no_partialchain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>BIT</name><argument_list>(<argument><expr><name>revoke_best_effort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

}</block>;</struct>

<struct>struct <name>ssl_general_config</name> <block>{

<decl_stmt><decl><type><name>size_t</name></type> <name>max_ssl_sessions</name></decl>;</decl_stmt> 

}</block>;</struct>

<struct>struct <name>curl_ssl_session</name> <block>{

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>conn_to_host</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>scheme</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>sessionid</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>size_t</name></type> <name>idsize</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>long</name></type> <name>age</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>remote_port</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>conn_to_port</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name><name>struct</name> <name>ssl_primary_config</name></name></type> <name>ssl_config</name></decl>;</decl_stmt> 

}</block>;</struct>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_WINDOWS_SSPI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_sspi.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<struct>struct <name>digestdata</name> <block>{

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_WINDOWS_SSPI</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>BYTE</name> <modifier>*</modifier></type><name>input_token</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>input_token_len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CtxtHandle</name> <modifier>*</modifier></type><name>http_context</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>user</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>passwd</name></decl>;</decl_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>nonce</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cnonce</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>realm</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>algo</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>opaque</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>qop</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>algorithm</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nc</name></decl>;</decl_stmt> 

<expr_stmt><expr><call><name>BIT</name><argument_list>(<argument><expr><name>stale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>BIT</name><argument_list>(<argument><expr><name>userhash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block>;</struct>

<typedef>typedef <type><enum>enum <block>{

<decl><name>NTLMSTATE_NONE</name></decl>,

<decl><name>NTLMSTATE_TYPE1</name></decl>,

<decl><name>NTLMSTATE_TYPE2</name></decl>,

<decl><name>NTLMSTATE_TYPE3</name></decl>,

<decl><name>NTLMSTATE_LAST</name></decl>

}</block></enum></type> <name>curlntlm</name>;</typedef>

<typedef>typedef <type><enum>enum <block>{

<decl><name>GSS_AUTHNONE</name></decl>,

<decl><name>GSS_AUTHRECV</name></decl>,

<decl><name>GSS_AUTHSENT</name></decl>,

<decl><name>GSS_AUTHDONE</name></decl>,

<decl><name>GSS_AUTHSUCC</name></decl>

}</block></enum></type> <name>curlnegotiate</name>;</typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DOES_CONVERSIONS</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ICONV</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iconv.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_KERBEROS5</name></expr></argument>)</argument_list></call></expr></cpp:if>

<struct>struct <name>kerberos5data</name> <block>{

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_WINDOWS_SSPI</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>CredHandle</name> <modifier>*</modifier></type><name>credentials</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CtxtHandle</name> <modifier>*</modifier></type><name>context</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TCHAR</name> <modifier>*</modifier></type><name>spn</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SEC_WINNT_AUTH_IDENTITY</name></type> <name>identity</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SEC_WINNT_AUTH_IDENTITY</name> <modifier>*</modifier></type><name>p_identity</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>token_max</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BYTE</name> <modifier>*</modifier></type><name>output_token</name></decl>;</decl_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>gss_ctx_id_t</name></type> <name>context</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>gss_name_t</name></type> <name>spn</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block>;</struct>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_NTLM</name></expr></argument>)</argument_list></call></expr></cpp:if>

<struct>struct <name>ntlmdata</name> <block>{

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_WINDOWS_SSPI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SECPKG_ATTR_ENDPOINT_BINDINGS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>CtxtHandle</name> <modifier>*</modifier></type><name>sslContext</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>CredHandle</name> <modifier>*</modifier></type><name>credentials</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CtxtHandle</name> <modifier>*</modifier></type><name>context</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SEC_WINNT_AUTH_IDENTITY</name></type> <name>identity</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SEC_WINNT_AUTH_IDENTITY</name> <modifier>*</modifier></type><name>p_identity</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>token_max</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BYTE</name> <modifier>*</modifier></type><name>output_token</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BYTE</name> <modifier>*</modifier></type><name>input_token</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>input_token_len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TCHAR</name> <modifier>*</modifier></type><name>spn</name></decl>;</decl_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>flags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>nonce</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>target_info</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>target_info_len</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NTLM_WB_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>curl_socket_t</name></type> <name>ntlm_auth_hlpr_socket</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pid_t</name></type> <name>ntlm_auth_hlpr_pid</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>challenge</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>response</name></decl>;</decl_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block>;</struct>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_SPNEGO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<struct>struct <name>negotiatedata</name> <block>{

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_GSSAPI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>OM_uint32</name></type> <name>status</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>gss_ctx_id_t</name></type> <name>context</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>gss_name_t</name></type> <name>spn</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>gss_buffer_desc</name></type> <name>output_token</name></decl>;</decl_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_WINDOWS_SSPI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SECPKG_ATTR_ENDPOINT_BINDINGS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>CtxtHandle</name> <modifier>*</modifier></type><name>sslContext</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>DWORD</name></type> <name>status</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CredHandle</name> <modifier>*</modifier></type><name>credentials</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CtxtHandle</name> <modifier>*</modifier></type><name>context</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SEC_WINNT_AUTH_IDENTITY</name></type> <name>identity</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SEC_WINNT_AUTH_IDENTITY</name> <modifier>*</modifier></type><name>p_identity</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TCHAR</name> <modifier>*</modifier></type><name>spn</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>token_max</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BYTE</name> <modifier>*</modifier></type><name>output_token</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>output_token_length</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>BIT</name><argument_list>(<argument><expr><name>noauthpersist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BIT</name><argument_list>(<argument><expr><name>havenoauthpersist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BIT</name><argument_list>(<argument><expr><name>havenegdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BIT</name><argument_list>(<argument><expr><name>havemultiplerequests</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

}</block>;</struct>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<struct>struct <name>ConnectBits</name> <block>{

<decl_stmt><decl><type><name>bool</name></type> <name><name>proxy_ssl_connected</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>bool</name></type> <name><name>tcpconnect</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt> 

<expr_stmt><expr><call><name>BIT</name><argument_list>(<argument><expr><name>close</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>BIT</name><argument_list>(<argument><expr><name>reuse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>BIT</name><argument_list>(<argument><expr><name>altused</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>BIT</name><argument_list>(<argument><expr><name>conn_to_host</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>BIT</name><argument_list>(<argument><expr><name>conn_to_port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>BIT</name><argument_list>(<argument><expr><name>proxy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>BIT</name><argument_list>(<argument><expr><name>httpproxy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>BIT</name><argument_list>(<argument><expr><name>socksproxy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>BIT</name><argument_list>(<argument><expr><name>user_passwd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>BIT</name><argument_list>(<argument><expr><name>proxy_user_passwd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>BIT</name><argument_list>(<argument><expr><name>ipv6_ip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>BIT</name><argument_list>(<argument><expr><name>ipv6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>BIT</name><argument_list>(<argument><expr><name>do_more</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>BIT</name><argument_list>(<argument><expr><name>protoconnstart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BIT</name><argument_list>(<argument><expr><name>retry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>BIT</name><argument_list>(<argument><expr><name>tunnel_proxy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>BIT</name><argument_list>(<argument><expr><name>authneg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>BIT</name><argument_list>(<argument><expr><name>rewindaftersend</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_FTP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>BIT</name><argument_list>(<argument><expr><name>ftp_use_epsv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>BIT</name><argument_list>(<argument><expr><name>ftp_use_eprt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>BIT</name><argument_list>(<argument><expr><name>ftp_use_data_ssl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>BIT</name><argument_list>(<argument><expr><name>netrc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>BIT</name><argument_list>(<argument><expr><name>userpwd_in_url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>BIT</name><argument_list>(<argument><expr><name>proxy_connect_closed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>BIT</name><argument_list>(<argument><expr><name>bound</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>BIT</name><argument_list>(<argument><expr><name>type_set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>BIT</name><argument_list>(<argument><expr><name>multiplex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>BIT</name><argument_list>(<argument><expr><name>tcp_fastopen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>BIT</name><argument_list>(<argument><expr><name>tls_enable_npn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>BIT</name><argument_list>(<argument><expr><name>tls_enable_alpn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>BIT</name><argument_list>(<argument><expr><name>connect_only</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

}</block>;</struct>

<struct>struct <name>hostname</name> <block>{

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>rawalloc</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>encalloc</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dispname</name></decl>;</decl_stmt> 

}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KEEP_NONE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KEEP_RECV</name></cpp:macro> <cpp:value>(1&lt;&lt;0)</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KEEP_SEND</name></cpp:macro> <cpp:value>(1&lt;&lt;1)</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KEEP_RECV_HOLD</name></cpp:macro> <cpp:value>(1&lt;&lt;2)</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KEEP_SEND_HOLD</name></cpp:macro> <cpp:value>(1&lt;&lt;3)</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KEEP_RECV_PAUSE</name></cpp:macro> <cpp:value>(1&lt;&lt;4)</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KEEP_SEND_PAUSE</name></cpp:macro> <cpp:value>(1&lt;&lt;5)</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KEEP_RECVBITS</name></cpp:macro> <cpp:value>(KEEP_RECV | KEEP_RECV_HOLD | KEEP_RECV_PAUSE)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KEEP_SENDBITS</name></cpp:macro> <cpp:value>(KEEP_SEND | KEEP_SEND_HOLD | KEEP_SEND_PAUSE)</cpp:value></cpp:define>

<struct>struct <name>Curl_async</name> <block>{

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>hostname</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>port</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>Curl_dns_entry</name></name> <modifier>*</modifier></type><name>dns</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>os_specific</name></decl>;</decl_stmt> 

<expr_stmt><expr><call><name>BIT</name><argument_list>(<argument><expr><name>done</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIRSTSOCKET</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SECONDARYSOCKET</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>CURLcode</name></type> (<modifier>*</modifier><name>Curl_do_more_func</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>CURLcode</name></type> (<modifier>*</modifier><name>Curl_done_func</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>CURLcode</name></type></decl></parameter>, <parameter><decl><type><name>bool</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<enum>enum <name>expect100</name> <block>{

<decl><name>EXP100_SEND_DATA</name></decl>, 

<decl><name>EXP100_AWAITING_CONTINUE</name></decl>, 

<decl><name>EXP100_SENDING_REQUEST</name></decl>, 

<decl><name>EXP100_FAILED</name></decl> 

}</block>;</enum>

<enum>enum <name>upgrade101</name> <block>{

<decl><name>UPGR101_INIT</name></decl>, 

<decl><name>UPGR101_REQUESTED</name></decl>, 

<decl><name>UPGR101_RECEIVED</name></decl>, 

<decl><name>UPGR101_WORKING</name></decl> 

}</block>;</enum>

<enum>enum <name>doh_slots</name> <block>{

<decl><name>DOH_PROBE_SLOT_IPADDR_V4</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, 

<decl><name>DOH_PROBE_SLOT_IPADDR_V6</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, 

<decl><name>DOH_PROBE_SLOTS</name></decl>

}</block>;</enum>

<struct>struct <name>dohresponse</name> <block>{

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>memory</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>dnsprobe</name> <block>{

<decl_stmt><decl><type><name>CURL</name> <modifier>*</modifier></type><name>easy</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dnstype</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>dohbuffer</name><index>[<expr><literal type="number">512</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>dohlen</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>dohresponse</name></name></type> <name>serverdoh</name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>dohdata</name> <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>curl_slist</name></name> <modifier>*</modifier></type><name>headers</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>dnsprobe</name></name></type> <name><name>probe</name><index>[<expr><name>DOH_PROBE_SLOTS</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>pending</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>host</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>port</name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>SingleRequest</name> <block>{

<decl_stmt><decl><type><name>curl_off_t</name></type> <name>size</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>curl_off_t</name></type> <name>maxdownload</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>curl_off_t</name></type> <name>bytecount</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>curl_off_t</name></type> <name>writebytecount</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>curl_off_t</name></type> <name>headerbytecount</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>curl_off_t</name></type> <name>deductheadercount</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name><name>struct</name> <name>curltime</name></name></type> <name>start</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name><name>struct</name> <name>curltime</name></name></type> <name>now</name></decl>;</decl_stmt> 

<enum>enum <block>{

<decl><name>HEADER_NORMAL</name></decl>, 

<decl><name>HEADER_PARTHEADER</name></decl>, 

<decl><name>HEADER_ALLBAD</name></decl> 

}</block> <decl><name>badheader</name></decl>;</enum> 

<decl_stmt><decl><type><name>int</name></type> <name>headerline</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>hbufp</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>size_t</name></type> <name>hbuflen</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str_start</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>end_ptr</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>curl_off_t</name></type> <name>offset</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>httpcode</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name><name>struct</name> <name>curltime</name></name></type> <name>start100</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name><name>enum</name> <name>expect100</name></name></type> <name>exp100</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name><name>enum</name> <name>upgrade101</name></name></type> <name>upgr101</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name><name>struct</name> <name>contenc_writer_s</name></name> <modifier>*</modifier></type><name>writer_stack</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>time_t</name></type> <name>timeofdoc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>bodywrites</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>keepon</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>location</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>newurl</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>ssize_t</name></type> <name>upload_present</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>upload_fromhere</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>protop</name></decl>;</decl_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_DOH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name><name>struct</name> <name>dohdata</name></name></type> <name>doh</name></decl>;</decl_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>BIT</name><argument_list>(<argument><expr><name>header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>BIT</name><argument_list>(<argument><expr><name>content_range</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>BIT</name><argument_list>(<argument><expr><name>upload_done</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>BIT</name><argument_list>(<argument><expr><name>ignorebody</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>BIT</name><argument_list>(<argument><expr><name>http_bodyless</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>BIT</name><argument_list>(<argument><expr><name>chunk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>BIT</name><argument_list>(<argument><expr><name>upload_chunky</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>BIT</name><argument_list>(<argument><expr><name>getheader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>BIT</name><argument_list>(<argument><expr><name>forbidchunk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

}</block>;</struct>

<struct>struct <name>Curl_handler</name> <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>scheme</name></decl>;</decl_stmt> 

<function_decl><type><name>CURLcode</name></type> (<modifier>*</modifier><name>setup_connection</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>CURLcode</name></type> (<modifier>*</modifier><name>do_it</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>done</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>Curl_done_func</name></type> <name>done</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Curl_do_more_func</name></type> <name>do_more</name></decl>;</decl_stmt>

<function_decl><type><name>CURLcode</name></type> (<modifier>*</modifier><name>connect_it</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>done</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>CURLcode</name></type> (<modifier>*</modifier><name>connecting</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>done</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>CURLcode</name></type> (<modifier>*</modifier><name>doing</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>done</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>proto_getsock</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,

<parameter><decl><type><name>curl_socket_t</name> <modifier>*</modifier></type><name>socks</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>doing_getsock</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,

<parameter><decl><type><name>curl_socket_t</name> <modifier>*</modifier></type><name>socks</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>domore_getsock</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,

<parameter><decl><type><name>curl_socket_t</name> <modifier>*</modifier></type><name>socks</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>perform_getsock</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,

<parameter><decl><type><name>curl_socket_t</name> <modifier>*</modifier></type><name>socks</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>CURLcode</name></type> (<modifier>*</modifier><name>disconnect</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>dead_connection</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>CURLcode</name></type> (<modifier>*</modifier><name>readwrite</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,

<parameter><decl><type><name>ssize_t</name> <modifier>*</modifier></type><name>nread</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>readmore</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>unsigned</name> <name>int</name></type> (<modifier>*</modifier><name>connection_check</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>checks_to_perform</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>long</name></type> <name>defport</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>protocol</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>flags</name></decl>;</decl_stmt> 

}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROTOPT_NONE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROTOPT_SSL</name></cpp:macro> <cpp:value>(1&lt;&lt;0)</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROTOPT_DUAL</name></cpp:macro> <cpp:value>(1&lt;&lt;1)</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROTOPT_CLOSEACTION</name></cpp:macro> <cpp:value>(1&lt;&lt;2)</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROTOPT_DIRLOCK</name></cpp:macro> <cpp:value>(1&lt;&lt;3)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROTOPT_NONETWORK</name></cpp:macro> <cpp:value>(1&lt;&lt;4)</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROTOPT_NEEDSPWD</name></cpp:macro> <cpp:value>(1&lt;&lt;5)</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROTOPT_NOURLQUERY</name></cpp:macro> <cpp:value>(1&lt;&lt;6)</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROTOPT_CREDSPERREQUEST</name></cpp:macro> <cpp:value>(1&lt;&lt;7)</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROTOPT_ALPN_NPN</name></cpp:macro> <cpp:value>(1&lt;&lt;8)</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROTOPT_STREAM</name></cpp:macro> <cpp:value>(1&lt;&lt;9)</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROTOPT_URLOPTIONS</name></cpp:macro> <cpp:value>(1&lt;&lt;10)</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROTOPT_PROXY_AS_HTTP</name></cpp:macro> <cpp:value>(1&lt;&lt;11)</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROTOPT_WILDCARD</name></cpp:macro> <cpp:value>(1&lt;&lt;12)</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONNCHECK_NONE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONNCHECK_ISDEAD</name></cpp:macro> <cpp:value>(1&lt;&lt;0)</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONNCHECK_KEEPALIVE</name></cpp:macro> <cpp:value>(1&lt;&lt;1)</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONNRESULT_NONE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONNRESULT_DEAD</name></cpp:macro> <cpp:value>(1&lt;&lt;0)</cpp:value></cpp:define> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_RECV_BEFORE_SEND_WORKAROUND</name></expr></argument>)</argument_list></call></expr></cpp:if>
<struct>struct <name>postponed_data</name> <block>{

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>size_t</name></type> <name>allocated_size</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>size_t</name></type> <name>recv_size</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>size_t</name></type> <name>recv_processed</name></decl>;</decl_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUGBUILD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>curl_socket_t</name></type> <name>bindsock</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

}</block>;</struct>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<struct>struct <name>proxy_info</name> <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>hostname</name></name></type> <name>host</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>port</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>curl_proxytype</name></type> <name>proxytype</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>user</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>passwd</name></decl>;</decl_stmt> 

}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONNECT_BUFFER_SIZE</name></cpp:macro> <cpp:value>16384</cpp:value></cpp:define>

<struct>struct <name>http_connect_state</name> <block>{

<decl_stmt><decl><type><name>char</name></type> <name><name>connect_buffer</name><index>[<expr><name>CONNECT_BUFFER_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>perline</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>keepon</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>line_start</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>curl_off_t</name></type> <name>cl</name></decl>;</decl_stmt> 

<enum>enum <block>{

<decl><name>TUNNEL_INIT</name></decl>, 

<decl><name>TUNNEL_CONNECT</name></decl>, 

<decl><name>TUNNEL_COMPLETE</name></decl> 

}</block> <decl><name>tunnel_state</name></decl>;</enum>

<expr_stmt><expr><call><name>BIT</name><argument_list>(<argument><expr><name>chunked_encoding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BIT</name><argument_list>(<argument><expr><name>close_connection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

}</block>;</struct>

<struct_decl>struct <name>ldapconninfo</name>;</struct_decl>

<enum>enum <name>connect_t</name> <block>{

<decl><name>CONNECT_INIT</name></decl>,

<decl><name>CONNECT_SOCKS_INIT</name></decl>, 

<decl><name>CONNECT_SOCKS_SEND</name></decl>, 

<decl><name>CONNECT_SOCKS_READ_INIT</name></decl>, 

<decl><name>CONNECT_SOCKS_READ</name></decl>, 

<decl><name>CONNECT_GSSAPI_INIT</name></decl>, 

<decl><name>CONNECT_AUTH_INIT</name></decl>, 

<decl><name>CONNECT_AUTH_SEND</name></decl>, 

<decl><name>CONNECT_AUTH_READ</name></decl>, 

<decl><name>CONNECT_REQ_INIT</name></decl>, 

<decl><name>CONNECT_RESOLVING</name></decl>, 

<decl><name>CONNECT_RESOLVED</name></decl>, 

<decl><name>CONNECT_RESOLVE_REMOTE</name></decl>, 

<decl><name>CONNECT_REQ_SEND</name></decl>, 

<decl><name>CONNECT_REQ_SENDING</name></decl>, 

<decl><name>CONNECT_REQ_READ</name></decl>, 

<decl><name>CONNECT_REQ_READ_MORE</name></decl>, 

<decl><name>CONNECT_DONE</name></decl> 

}</block>;</enum>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SOCKS_STATE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) &gt;= CONNECT_SOCKS_INIT) &amp;&amp; ((x) &lt; CONNECT_DONE))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SOCKS_REQUEST_BUFSIZE</name></cpp:macro> <cpp:value>600</cpp:value></cpp:define> 

<struct>struct <name>connstate</name> <block>{

<decl_stmt><decl><type><name><name>enum</name> <name>connect_t</name></name></type> <name>state</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>socksreq</name><index>[<expr><name>SOCKS_REQUEST_BUFSIZE</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>outstanding</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>outp</name></decl>;</decl_stmt> 

}</block>;</struct>

<struct>struct <name>connectdata</name> <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>connstate</name></name></type> <name>cnnct</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>curl_llist_element</name></name></type> <name>bundle_node</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name><name>struct</name> <name>Curl_chunker</name></name></type> <name>chunk</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>curl_closesocket_callback</name></type> <name>fclosesocket</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>closesocket_client</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONN_INUSE</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((c)-&gt;easyq.size)</cpp:value></cpp:define>

<decl_stmt><decl><type><name>long</name></type> <name>connection_id</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name><name>struct</name> <name>Curl_dns_entry</name></name> <modifier>*</modifier></type><name>dns_entry</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Curl_addrinfo</name> <modifier>*</modifier></type><name>ip_addr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Curl_addrinfo</name> <modifier>*</modifier></type><name><name>tempaddr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name></type> <name><name>ip_addr_str</name><index>[<expr><name>MAX_IPADR_LEN</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>scope_id</name></decl>;</decl_stmt> 

<enum>enum <block>{

<decl><name>TRNSPRT_TCP</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,

<decl><name>TRNSPRT_UDP</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,

<decl><name>TRNSPRT_QUIC</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>

}</block> <decl><name>transport</name></decl>;</enum>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_QUIC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name><name>struct</name> <name>quicsocket</name></name></type> <name><name>hequic</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name><name>struct</name> <name>quicsocket</name></name> <modifier>*</modifier></type><name>quic</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name><name>struct</name> <name>hostname</name></name></type> <name>host</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>hostname_resolve</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>secondaryhostname</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name><name>struct</name> <name>hostname</name></name></type> <name>conn_to_host</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name><name>struct</name> <name>proxy_info</name></name></type> <name>socks_proxy</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>proxy_info</name></name></type> <name>http_proxy</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>port</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>remote_port</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>conn_to_port</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>secondary_port</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name></type> <name><name>primary_ip</name><index>[<expr><name>MAX_IPADR_LEN</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>primary_port</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>local_ip</name><index>[<expr><name>MAX_IPADR_LEN</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>local_port</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>user</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>passwd</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>options</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>sasl_authzid</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>httpversion</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>rtspversion</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name><name>struct</name> <name>curltime</name></name></type> <name>now</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name><name>struct</name> <name>curltime</name></name></type> <name>created</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name><name>struct</name> <name>curltime</name></name></type> <name>lastused</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>curl_socket_t</name></type> <name><name>sock</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>curl_socket_t</name></type> <name><name>tempsock</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name><name>tempfamily</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>Curl_recv</name> <modifier>*</modifier></type><name><name>recv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Curl_send</name> <modifier>*</modifier></type><name><name>send</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_RECV_BEFORE_SEND_WORKAROUND</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name><name>struct</name> <name>postponed_data</name></name></type> <name><name>postponed</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<decl_stmt><decl><type><name><name>struct</name> <name>ssl_connect_data</name></name></type> <name><name>ssl</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name><name>struct</name> <name>ssl_connect_data</name></name></type> <name><name>proxy_ssl</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_SSL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ssl_extra</name></decl>;</decl_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name><name>struct</name> <name>ssl_primary_config</name></name></type> <name>ssl_config</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ssl_primary_config</name></name></type> <name>proxy_ssl_config</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ConnectBits</name></name></type> <name>bits</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name><name>struct</name> <name>curltime</name></name></type> <name>connecttime</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>num_addr</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>timediff_t</name></type> <name>timeoutms_per_addr</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>Curl_handler</name></name> <modifier>*</modifier></type><name>handler</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>Curl_handler</name></name> <modifier>*</modifier></type><name>given</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>long</name></type> <name>ip_version</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name><name>struct</name> <name>curltime</name></name></type> <name>keepalive</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>upkeep_interval_ms</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>curl_socket_t</name></type> <name>sockfd</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>curl_socket_t</name></type> <name>writesockfd</name></decl>;</decl_stmt> 

<struct>struct <name>dynamically_allocated_data</name> <block>{

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>proxyuserpwd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>uagent</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>accept_encoding</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>userpwd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>rangeline</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ref</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>host</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cookiehost</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>rtsp_transport</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>te</name></decl>;</decl_stmt> 

}</block> <decl><name>allocptr</name></decl>;</struct>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_GSSAPI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>BIT</name><argument_list>(<argument><expr><name>sec_complete</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<decl_stmt><decl><type><name><name>enum</name> <name>protection_level</name></name></type> <name>command_prot</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>protection_level</name></name></type> <name>data_prot</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>protection_level</name></name></type> <name>request_data_prot</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>buffer_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>krb5buffer</name></name></type> <name>in_buffer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>app_data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>Curl_sec_client_mech</name></name> <modifier>*</modifier></type><name>mech</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in</name></name></type> <name>local_addr</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_KERBEROS5</name></expr></argument>)</argument_list></call></expr></cpp:if> 

<decl_stmt><decl><type><name><name>struct</name> <name>kerberos5data</name></name></type> <name>krb5</name></decl>;</decl_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<decl_stmt><decl><type><name><name>struct</name> <name>curl_llist</name></name></type> <name>easyq</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>curl_seek_callback</name></type> <name>seek_func</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>seek_client</name></decl>;</decl_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_WINDOWS_SSPI</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>SECPKG_ATTR_ENDPOINT_BINDINGS</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>CtxtHandle</name> <modifier>*</modifier></type><name>sslContext</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_NTLM</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>curlntlm</name></type> <name>http_ntlm_state</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>curlntlm</name></type> <name>proxy_ntlm_state</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ntlmdata</name></name></type> <name>ntlm</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name><name>struct</name> <name>ntlmdata</name></name></type> <name>proxyntlm</name></decl>;</decl_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_SPNEGO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>curlnegotiate</name></type> <name>http_negotiate_state</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>curlnegotiate</name></type> <name>proxy_negotiate_state</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>negotiatedata</name></name></type> <name>negotiate</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name><name>struct</name> <name>negotiatedata</name></name></type> <name>proxyneg</name></decl>;</decl_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name><name>struct</name> <name>Curl_async</name></name></type> <name>async</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>trailer</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>trlMax</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>trlPos</name></decl>;</decl_stmt> 

<union>union <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>ftp_conn</name></name></type> <name>ftpc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>http_conn</name></name></type> <name>httpc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ssh_conn</name></name></type> <name>sshc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>tftp_state_data</name></name> <modifier>*</modifier></type><name>tftpc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>imap_conn</name></name></type> <name>imapc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>pop3_conn</name></name></type> <name>pop3c</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>smtp_conn</name></name></type> <name>smtpc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>rtsp_conn</name></name></type> <name>rtspc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>smb_conn</name></name></type> <name>smbc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>rtmp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ldapconninfo</name></name> <modifier>*</modifier></type><name>ldapc</name></decl>;</decl_stmt>

}</block> <decl><name>proto</name></decl>;</union>

<decl_stmt><decl><type><name>int</name></type> <name>cselect_bits</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>waitfor</name></decl>;</decl_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_GSSAPI</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>USE_WINDOWS_SSPI</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>int</name></type> <name>socks5_gssapi_enctype</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>localdev</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>localport</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>localportrange</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>http_connect_state</name></name> <modifier>*</modifier></type><name>connect_state</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name><name>struct</name> <name>connectbundle</name></name> <modifier>*</modifier></type><name>bundle</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>negnpn</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>retrycount</name></decl>;</decl_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_UNIX_SOCKETS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>unix_domain_socket</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>BIT</name><argument_list>(<argument><expr><name>abstract_unix_socket</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>BIT</name><argument_list>(<argument><expr><name>tls_upgraded</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BIT</name><argument_list>(<argument><expr><name>readchannel_inuse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>BIT</name><argument_list>(<argument><expr><name>writechannel_inuse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>BIT</name><argument_list>(<argument><expr><name>sock_accepted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>BIT</name><argument_list>(<argument><expr><name>parallel_connect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

}</block>;</struct>

<struct>struct <name>PureInfo</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name>httpcode</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>httpproxycode</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>httpversion</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>time_t</name></type> <name>filetime</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>curl_off_t</name></type> <name>header_size</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>curl_off_t</name></type> <name>request_size</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>proxyauthavail</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>httpauthavail</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>long</name></type> <name>numconnects</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>contenttype</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>wouldredirect</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>curl_off_t</name></type> <name>retry_after</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name></type> <name><name>conn_primary_ip</name><index>[<expr><name>MAX_IPADR_LEN</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>conn_primary_port</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>conn_local_ip</name><index>[<expr><name>MAX_IPADR_LEN</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>conn_local_port</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>conn_scheme</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>conn_protocol</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>curl_certinfo</name></name></type> <name>certs</name></decl>;</decl_stmt> 

<expr_stmt><expr><call><name>BIT</name><argument_list>(<argument><expr><name>timecond</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

}</block>;</struct>

<struct>struct <name>Progress</name> <block>{

<decl_stmt><decl><type><name>time_t</name></type> <name>lastshow</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>curl_off_t</name></type> <name>size_dl</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>curl_off_t</name></type> <name>size_ul</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>curl_off_t</name></type> <name>downloaded</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>curl_off_t</name></type> <name>uploaded</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>curl_off_t</name></type> <name>current_speed</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>width</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>timediff_t</name></type> <name>timespent</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>curl_off_t</name></type> <name>dlspeed</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>curl_off_t</name></type> <name>ulspeed</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>timediff_t</name></type> <name>t_nslookup</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>timediff_t</name></type> <name>t_connect</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>timediff_t</name></type> <name>t_appconnect</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>timediff_t</name></type> <name>t_pretransfer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>timediff_t</name></type> <name>t_starttransfer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>timediff_t</name></type> <name>t_redirect</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>curltime</name></name></type> <name>start</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>curltime</name></name></type> <name>t_startsingle</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>curltime</name></name></type> <name>t_startop</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>curltime</name></name></type> <name>t_acceptdata</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>curltime</name></name></type> <name>ul_limit_start</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>curl_off_t</name></type> <name>ul_limit_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>curltime</name></name></type> <name>dl_limit_start</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>curl_off_t</name></type> <name>dl_limit_size</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CURR_TIME</name></cpp:macro> <cpp:value>(5 + 1)</cpp:value></cpp:define> 

<decl_stmt><decl><type><name>curl_off_t</name></type> <name><name>speeder</name><index>[ <expr><name>CURR_TIME</name></expr> ]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>curltime</name></name></type> <name><name>speeder_time</name><index>[ <expr><name>CURR_TIME</name></expr> ]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>speeder_c</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>BIT</name><argument_list>(<argument><expr><name>callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>BIT</name><argument_list>(<argument><expr><name>is_t_startransfer_set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

}</block>;</struct>

<typedef>typedef <type><enum>enum <block>{

<decl><name>HTTPREQ_NONE</name></decl>, 

<decl><name>HTTPREQ_GET</name></decl>,

<decl><name>HTTPREQ_POST</name></decl>,

<decl><name>HTTPREQ_POST_FORM</name></decl>, 

<decl><name>HTTPREQ_POST_MIME</name></decl>, 

<decl><name>HTTPREQ_PUT</name></decl>,

<decl><name>HTTPREQ_HEAD</name></decl>,

<decl><name>HTTPREQ_OPTIONS</name></decl>,

<decl><name>HTTPREQ_LAST</name></decl> 

}</block></enum></type> <name>Curl_HttpReq</name>;</typedef>

<typedef>typedef <type><enum>enum <block>{

<decl><name>RTSPREQ_NONE</name></decl>, 

<decl><name>RTSPREQ_OPTIONS</name></decl>,

<decl><name>RTSPREQ_DESCRIBE</name></decl>,

<decl><name>RTSPREQ_ANNOUNCE</name></decl>,

<decl><name>RTSPREQ_SETUP</name></decl>,

<decl><name>RTSPREQ_PLAY</name></decl>,

<decl><name>RTSPREQ_PAUSE</name></decl>,

<decl><name>RTSPREQ_TEARDOWN</name></decl>,

<decl><name>RTSPREQ_GET_PARAMETER</name></decl>,

<decl><name>RTSPREQ_SET_PARAMETER</name></decl>,

<decl><name>RTSPREQ_RECORD</name></decl>,

<decl><name>RTSPREQ_RECEIVE</name></decl>,

<decl><name>RTSPREQ_LAST</name></decl> 

}</block></enum></type> <name>Curl_RtspReq</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_CURL_USER_LENGTH</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_CURL_PASSWORD_LENGTH</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define>

<struct>struct <name>auth</name> <block>{

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>want</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>picked</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>avail</name></decl>;</decl_stmt> 

<expr_stmt><expr><call><name>BIT</name><argument_list>(<argument><expr><name>done</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>BIT</name><argument_list>(<argument><expr><name>multipass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>BIT</name><argument_list>(<argument><expr><name>iestyle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

}</block>;</struct>

<struct>struct <name>Curl_http2_dep</name> <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>Curl_http2_dep</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>tempbuf</name> <block>{

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt> 

}</block>;</struct>

<typedef>typedef <type><enum>enum <block>{

<decl><name>EXPIRE_100_TIMEOUT</name></decl>,

<decl><name>EXPIRE_ASYNC_NAME</name></decl>,

<decl><name>EXPIRE_CONNECTTIMEOUT</name></decl>,

<decl><name>EXPIRE_DNS_PER_NAME</name></decl>,

<decl><name>EXPIRE_HAPPY_EYEBALLS_DNS</name></decl>, 

<decl><name>EXPIRE_HAPPY_EYEBALLS</name></decl>,

<decl><name>EXPIRE_MULTI_PENDING</name></decl>,

<decl><name>EXPIRE_RUN_NOW</name></decl>,

<decl><name>EXPIRE_SPEEDCHECK</name></decl>,

<decl><name>EXPIRE_TIMEOUT</name></decl>,

<decl><name>EXPIRE_TOOFAST</name></decl>,

<decl><name>EXPIRE_QUIC</name></decl>,

<decl><name>EXPIRE_LAST</name></decl> 

}</block></enum></type> <name>expire_id</name>;</typedef>

<typedef>typedef <type><enum>enum <block>{

<decl><name>TRAILERS_NONE</name></decl>,

<decl><name>TRAILERS_INITIALIZED</name></decl>,

<decl><name>TRAILERS_SENDING</name></decl>,

<decl><name>TRAILERS_DONE</name></decl>

}</block></enum></type> <name>trailers_state</name>;</typedef>

<struct>struct <name>time_node</name> <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>curl_llist_element</name></name></type> <name>list</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>curltime</name></name></type> <name>time</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>expire_id</name></type> <name>eid</name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>urlpieces</name> <block>{

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>scheme</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>hostname</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>port</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>user</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>password</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>options</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>path</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>query</name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>UrlState</name> <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>conncache</name></name> <modifier>*</modifier></type><name>conn_cache</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>curltime</name></name></type> <name>keeps_speed</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>lastconnect</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>headerbuff</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>size_t</name></type> <name>headersize</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ulbuf</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>curl_off_t</name></type> <name>current_speed</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>first_host</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>first_remote_port</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name><name>struct</name> <name>curl_ssl_session</name></name> <modifier>*</modifier></type><name>session</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>long</name></type> <name>sessionage</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>tempcount</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name><name>struct</name> <name>tempbuf</name></name></type> <name><name>tempwrite</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>scratch</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>os_errno</name></decl>;</decl_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SIGNAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>prev_signal</name>)<parameter_list>(<parameter><decl><type><name>int</name></type> <name>sig</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name><name>struct</name> <name>digestdata</name></name></type> <name>digest</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name><name>struct</name> <name>digestdata</name></name></type> <name>proxydigest</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name><name>struct</name> <name>auth</name></name></type> <name>authhost</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name><name>struct</name> <name>auth</name></name></type> <name>authproxy</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>resolver</name></decl>;</decl_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_OPENSSL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>engine</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<decl_stmt><decl><type><name><name>struct</name> <name>curltime</name></name></type> <name>expiretime</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name><name>struct</name> <name>Curl_tree</name></name></type> <name>timenode</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name><name>struct</name> <name>curl_llist</name></name></type> <name>timeoutlist</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name><name>struct</name> <name>time_node</name></name></type> <name><name>expires</name><index>[<expr><name>EXPIRE_LAST</name></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>most_recent_ftp_entrypath</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>httpversion</name></decl>;</decl_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MSDOS</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__EMX__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__SYMBIAN32__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CURL_DO_LINEEND_CONV</name></cpp:macro></cpp:define>

<expr_stmt><expr><call><name>BIT</name><argument_list>(<argument><expr><name>prev_block_had_trailing_cr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>curl_off_t</name></type> <name>crlf_conversions</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>range</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>curl_off_t</name></type> <name>resume_from</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>long</name></type> <name>rtsp_next_client_CSeq</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>long</name></type> <name>rtsp_next_server_CSeq</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>long</name></type> <name>rtsp_CSeq_recv</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>curl_off_t</name></type> <name>infilesize</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>size_t</name></type> <name>drain</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>curl_read_callback</name></type> <name>fread_func</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>in</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>stream_depends_on</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>stream_weight</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CURLU</name> <modifier>*</modifier></type><name>uh</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name><name>struct</name> <name>urlpieces</name></name></type> <name>up</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_HTTP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>size_t</name></type> <name>trailers_bytes_sent</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Curl_send_buffer</name> <modifier>*</modifier></type><name>trailers_buf</name></decl>;</decl_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>trailers_state</name></type> <name>trailers_state</name></decl>;</decl_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CURLDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>BIT</name><argument_list>(<argument><expr><name>conncache_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>BIT</name><argument_list>(<argument><expr><name>multi_owned_by_easy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BIT</name><argument_list>(<argument><expr><name>this_is_a_follow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>BIT</name><argument_list>(<argument><expr><name>refused_stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>BIT</name><argument_list>(<argument><expr><name>errorbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>BIT</name><argument_list>(<argument><expr><name>allow_port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>BIT</name><argument_list>(<argument><expr><name>authproblem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>BIT</name><argument_list>(<argument><expr><name>ftp_trying_alternative</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BIT</name><argument_list>(<argument><expr><name>wildcardmatch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>BIT</name><argument_list>(<argument><expr><name>expect100header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>BIT</name><argument_list>(<argument><expr><name>disableexpect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>BIT</name><argument_list>(<argument><expr><name>use_range</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BIT</name><argument_list>(<argument><expr><name>rangestringalloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>BIT</name><argument_list>(<argument><expr><name>done</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>BIT</name><argument_list>(<argument><expr><name>stream_depends_e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>BIT</name><argument_list>(<argument><expr><name>previouslypending</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>BIT</name><argument_list>(<argument><expr><name>cookie_engine</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

}</block>;</struct>

<struct>struct <name>DynamicStatic</name> <block>{

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>url</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>referer</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name><name>struct</name> <name>curl_slist</name></name> <modifier>*</modifier></type><name>cookielist</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name><name>struct</name> <name>curl_slist</name></name> <modifier>*</modifier></type><name>resolve</name></decl>;</decl_stmt> 

<expr_stmt><expr><call><name>BIT</name><argument_list>(<argument><expr><name>url_alloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>BIT</name><argument_list>(<argument><expr><name>referer_alloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>BIT</name><argument_list>(<argument><expr><name>wildcard_resolve</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

}</block>;</struct>

<struct_decl>struct <name>Curl_multi</name>;</struct_decl> 

<enum>enum <name>dupstring</name> <block>{

<decl><name>STRING_CERT_ORIG</name></decl>, 

<decl><name>STRING_CERT_PROXY</name></decl>, 

<decl><name>STRING_CERT_TYPE_ORIG</name></decl>, 

<decl><name>STRING_CERT_TYPE_PROXY</name></decl>, 

<decl><name>STRING_COOKIE</name></decl>, 

<decl><name>STRING_COOKIEJAR</name></decl>, 

<decl><name>STRING_CUSTOMREQUEST</name></decl>, 

<decl><name>STRING_DEFAULT_PROTOCOL</name></decl>, 

<decl><name>STRING_DEVICE</name></decl>, 

<decl><name>STRING_ENCODING</name></decl>, 

<decl><name>STRING_FTP_ACCOUNT</name></decl>, 

<decl><name>STRING_FTP_ALTERNATIVE_TO_USER</name></decl>, 

<decl><name>STRING_FTPPORT</name></decl>, 

<decl><name>STRING_KEY_ORIG</name></decl>, 

<decl><name>STRING_KEY_PROXY</name></decl>, 

<decl><name>STRING_KEY_PASSWD_ORIG</name></decl>, 

<decl><name>STRING_KEY_PASSWD_PROXY</name></decl>, 

<decl><name>STRING_KEY_TYPE_ORIG</name></decl>, 

<decl><name>STRING_KEY_TYPE_PROXY</name></decl>, 

<decl><name>STRING_KRB_LEVEL</name></decl>, 

<decl><name>STRING_NETRC_FILE</name></decl>, 

<decl><name>STRING_PROXY</name></decl>, 

<decl><name>STRING_PRE_PROXY</name></decl>, 

<decl><name>STRING_SET_RANGE</name></decl>, 

<decl><name>STRING_SET_REFERER</name></decl>, 

<decl><name>STRING_SET_URL</name></decl>, 

<decl><name>STRING_SSL_CAPATH_ORIG</name></decl>, 

<decl><name>STRING_SSL_CAPATH_PROXY</name></decl>, 

<decl><name>STRING_SSL_CAFILE_ORIG</name></decl>, 

<decl><name>STRING_SSL_CAFILE_PROXY</name></decl>, 

<decl><name>STRING_SSL_PINNEDPUBLICKEY_ORIG</name></decl>, 

<decl><name>STRING_SSL_PINNEDPUBLICKEY_PROXY</name></decl>, 

<decl><name>STRING_SSL_CIPHER_LIST_ORIG</name></decl>, 

<decl><name>STRING_SSL_CIPHER_LIST_PROXY</name></decl>, 

<decl><name>STRING_SSL_CIPHER13_LIST_ORIG</name></decl>, 

<decl><name>STRING_SSL_CIPHER13_LIST_PROXY</name></decl>, 

<decl><name>STRING_SSL_EGDSOCKET</name></decl>, 

<decl><name>STRING_SSL_RANDOM_FILE</name></decl>, 

<decl><name>STRING_USERAGENT</name></decl>, 

<decl><name>STRING_SSL_CRLFILE_ORIG</name></decl>, 

<decl><name>STRING_SSL_CRLFILE_PROXY</name></decl>, 

<decl><name>STRING_SSL_ISSUERCERT_ORIG</name></decl>, 

<decl><name>STRING_SSL_ISSUERCERT_PROXY</name></decl>, 

<decl><name>STRING_SSL_ENGINE</name></decl>, 

<decl><name>STRING_USERNAME</name></decl>, 

<decl><name>STRING_PASSWORD</name></decl>, 

<decl><name>STRING_OPTIONS</name></decl>, 

<decl><name>STRING_PROXYUSERNAME</name></decl>, 

<decl><name>STRING_PROXYPASSWORD</name></decl>, 

<decl><name>STRING_NOPROXY</name></decl>, 

<decl><name>STRING_RTSP_SESSION_ID</name></decl>, 

<decl><name>STRING_RTSP_STREAM_URI</name></decl>, 

<decl><name>STRING_RTSP_TRANSPORT</name></decl>, 

<decl><name>STRING_SSH_PRIVATE_KEY</name></decl>, 

<decl><name>STRING_SSH_PUBLIC_KEY</name></decl>, 

<decl><name>STRING_SSH_HOST_PUBLIC_KEY_MD5</name></decl>, 

<decl><name>STRING_SSH_KNOWNHOSTS</name></decl>, 

<decl><name>STRING_PROXY_SERVICE_NAME</name></decl>, 

<decl><name>STRING_SERVICE_NAME</name></decl>, 

<decl><name>STRING_MAIL_FROM</name></decl>,

<decl><name>STRING_MAIL_AUTH</name></decl>,

<decl><name>STRING_TLSAUTH_USERNAME_ORIG</name></decl>, 

<decl><name>STRING_TLSAUTH_USERNAME_PROXY</name></decl>, 

<decl><name>STRING_TLSAUTH_PASSWORD_ORIG</name></decl>, 

<decl><name>STRING_TLSAUTH_PASSWORD_PROXY</name></decl>, 

<decl><name>STRING_BEARER</name></decl>, 

<decl><name>STRING_UNIX_SOCKET_PATH</name></decl>, 

<decl><name>STRING_TARGET</name></decl>, 

<decl><name>STRING_DOH</name></decl>, 

<decl><name>STRING_ALTSVC</name></decl>, 

<decl><name>STRING_SASL_AUTHZID</name></decl>, 

<decl><name>STRING_TEMP_URL</name></decl>, 

<decl><name>STRING_DNS_SERVERS</name></decl>,

<decl><name>STRING_DNS_INTERFACE</name></decl>,

<decl><name>STRING_DNS_LOCAL_IP4</name></decl>,

<decl><name>STRING_DNS_LOCAL_IP6</name></decl>,

<decl><name>STRING_LASTZEROTERMINATED</name></decl>,

<decl><name>STRING_COPYPOSTFIELDS</name></decl>, 

<decl><name>STRING_LAST</name></decl> 

}</block>;</enum>

<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>multidone_func</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>easy</name></decl></parameter>, <parameter><decl><type><name>CURLcode</name></type> <name>result</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<struct>struct <name>UserDefined</name> <block>{

<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>err</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>debugdata</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>errorbuffer</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>long</name></type> <name>proxyport</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>out</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>in_set</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>writeheader</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>rtp_out</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>long</name></type> <name>use_port</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>httpauth</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>proxyauth</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>socks5auth</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>followlocation</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>long</name></type> <name>maxredirs</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>keep_post</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>postfields</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>curl_seek_callback</name></type> <name>seek_func</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>curl_off_t</name></type> <name>postfieldsize</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>localport</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>localportrange</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>curl_write_callback</name></type> <name>fwrite_func</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>curl_write_callback</name></type> <name>fwrite_header</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>curl_write_callback</name></type> <name>fwrite_rtp</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>curl_read_callback</name></type> <name>fread_func_set</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>curl_progress_callback</name></type> <name>fprogress</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>curl_xferinfo_callback</name></type> <name>fxferinfo</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>curl_debug_callback</name></type> <name>fdebug</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>curl_ioctl_callback</name></type> <name>ioctl_func</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>curl_sockopt_callback</name></type> <name>fsockopt</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>sockopt_client</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>curl_opensocket_callback</name></type> <name>fopensocket</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>opensocket_client</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>curl_closesocket_callback</name></type> <name>fclosesocket</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>closesocket_client</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>seek_client</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>curl_conv_callback</name></type> <name>convfromnetwork</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>curl_conv_callback</name></type> <name>convtonetwork</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>curl_conv_callback</name></type> <name>convfromutf8</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>progress_client</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ioctl_client</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>long</name></type> <name>timeout</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>long</name></type> <name>connecttimeout</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>long</name></type> <name>accepttimeout</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>long</name></type> <name>happy_eyeballs_timeout</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>long</name></type> <name>server_response_timeout</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>long</name></type> <name>maxage_conn</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>long</name></type> <name>tftp_blksize</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>curl_off_t</name></type> <name>filesize</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>long</name></type> <name>low_speed_limit</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>long</name></type> <name>low_speed_time</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>curl_off_t</name></type> <name>max_send_speed</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>curl_off_t</name></type> <name>max_recv_speed</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>curl_off_t</name></type> <name>set_resume_from</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name><name>struct</name> <name>curl_slist</name></name> <modifier>*</modifier></type><name>headers</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name><name>struct</name> <name>curl_slist</name></name> <modifier>*</modifier></type><name>proxyheaders</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name><name>struct</name> <name>curl_httppost</name></name> <modifier>*</modifier></type><name>httppost</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>curl_mimepart</name></type> <name>mimepost</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name><name>struct</name> <name>curl_slist</name></name> <modifier>*</modifier></type><name>quote</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name><name>struct</name> <name>curl_slist</name></name> <modifier>*</modifier></type><name>postquote</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name><name>struct</name> <name>curl_slist</name></name> <modifier>*</modifier></type><name>prequote</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name><name>struct</name> <name>curl_slist</name></name> <modifier>*</modifier></type><name>source_quote</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name><name>struct</name> <name>curl_slist</name></name> <modifier>*</modifier></type><name>source_prequote</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name><name>struct</name> <name>curl_slist</name></name> <modifier>*</modifier></type><name>source_postquote</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name><name>struct</name> <name>curl_slist</name></name> <modifier>*</modifier></type><name>telnet_options</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name><name>struct</name> <name>curl_slist</name></name> <modifier>*</modifier></type><name>resolve</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name><name>struct</name> <name>curl_slist</name></name> <modifier>*</modifier></type><name>connect_to</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>curl_TimeCond</name></type> <name>timecondition</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>time_t</name></type> <name>timevalue</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>Curl_HttpReq</name></type> <name>httpreq</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>long</name></type> <name>httpversion</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name><name>struct</name> <name>ssl_config_data</name></name></type> <name>ssl</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name><name>struct</name> <name>ssl_config_data</name></name></type> <name>proxy_ssl</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name><name>struct</name> <name>ssl_general_config</name></name></type> <name>general_ssl</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>curl_proxytype</name></type> <name>proxytype</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>long</name></type> <name>dns_cache_timeout</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>long</name></type> <name>buffer_size</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>size_t</name></type> <name>upload_buffer_size</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>private_data</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name><name>struct</name> <name>curl_slist</name></name> <modifier>*</modifier></type><name>http200aliases</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>long</name></type> <name>ipver</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>curl_off_t</name></type> <name>max_filesize</name></decl>;</decl_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_FTP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>curl_ftpfile</name></type> <name>ftp_filemethod</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>curl_ftpauth</name></type> <name>ftpsslauth</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>curl_ftpccc</name></type> <name>ftp_ccc</name></decl>;</decl_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>int</name></type> <name>ftp_create_missing_dirs</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>curl_sshkeycallback</name></type> <name>ssh_keyfunc</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ssh_keyfunc_userp</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name><name>enum</name> <name>CURL_NETRC_OPTION</name></name></type>

<name>use_netrc</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>curl_usessl</name></type> <name>use_ssl</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>long</name></type> <name>new_file_perms</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>long</name></type> <name>new_directory_perms</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>long</name></type> <name>ssh_auth_types</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name><name>str</name><index>[<expr><name>STRING_LAST</name></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>scope_id</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>long</name></type> <name>allowed_protocols</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>redir_protocols</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>curl_slist</name></name> <modifier>*</modifier></type><name>mail_rcpt</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>Curl_RtspReq</name></type> <name>rtspreq</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>long</name></type> <name>rtspversion</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>curl_chunk_bgn_callback</name></type> <name>chunk_bgn</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>curl_chunk_end_callback</name></type> <name>chunk_end</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>curl_fnmatch_callback</name></type> <name>fnmatch</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>fnmatch_data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>gssapi_delegation</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>long</name></type> <name>tcp_keepidle</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>long</name></type> <name>tcp_keepintvl</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>size_t</name></type> <name>maxconnects</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>long</name></type> <name>expect_100_timeout</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>stream_depends_on</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>stream_weight</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>Curl_http2_dep</name></name> <modifier>*</modifier></type><name>stream_dependents</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>curl_resolver_start_callback</name></type> <name>resolver_start</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>resolver_start_client</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>long</name></type> <name>upkeep_interval_ms</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>multidone_func</name></type> <name>fmultidone</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>dohfor</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>CURLU</name> <modifier>*</modifier></type><name>uh</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>trailer_data</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>curl_trailer_callback</name></type> <name>trailer_callback</name></decl>;</decl_stmt> 

<expr_stmt><expr><call><name>BIT</name><argument_list>(<argument><expr><name>is_fread_set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>BIT</name><argument_list>(<argument><expr><name>is_fwrite_set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>BIT</name><argument_list>(<argument><expr><name>free_referer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>BIT</name><argument_list>(<argument><expr><name>tftp_no_options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>BIT</name><argument_list>(<argument><expr><name>sep_headers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>BIT</name><argument_list>(<argument><expr><name>cookiesession</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>BIT</name><argument_list>(<argument><expr><name>crlf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>BIT</name><argument_list>(<argument><expr><name>strip_path_slash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>BIT</name><argument_list>(<argument><expr><name>ssh_compression</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>BIT</name><argument_list>(<argument><expr><name>get_filetime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>BIT</name><argument_list>(<argument><expr><name>tunnel_thru_httpproxy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>BIT</name><argument_list>(<argument><expr><name>prefer_ascii</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>BIT</name><argument_list>(<argument><expr><name>ftp_append</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>BIT</name><argument_list>(<argument><expr><name>ftp_list_only</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_FTP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>BIT</name><argument_list>(<argument><expr><name>ftp_use_port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>BIT</name><argument_list>(<argument><expr><name>ftp_use_epsv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>BIT</name><argument_list>(<argument><expr><name>ftp_use_eprt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>BIT</name><argument_list>(<argument><expr><name>ftp_use_pret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>BIT</name><argument_list>(<argument><expr><name>ftp_skip_ip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>BIT</name><argument_list>(<argument><expr><name>hide_progress</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>BIT</name><argument_list>(<argument><expr><name>http_fail_on_error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>BIT</name><argument_list>(<argument><expr><name>http_keep_sending_on_error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>BIT</name><argument_list>(<argument><expr><name>http_follow_location</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>BIT</name><argument_list>(<argument><expr><name>http_transfer_encoding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>BIT</name><argument_list>(<argument><expr><name>allow_auth_to_other_hosts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BIT</name><argument_list>(<argument><expr><name>include_header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>BIT</name><argument_list>(<argument><expr><name>http_set_referer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>BIT</name><argument_list>(<argument><expr><name>http_auto_referer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>BIT</name><argument_list>(<argument><expr><name>opt_no_body</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>BIT</name><argument_list>(<argument><expr><name>upload</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>BIT</name><argument_list>(<argument><expr><name>verbose</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>BIT</name><argument_list>(<argument><expr><name>krb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>BIT</name><argument_list>(<argument><expr><name>reuse_forbid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>BIT</name><argument_list>(<argument><expr><name>reuse_fresh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>BIT</name><argument_list>(<argument><expr><name>no_signal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>BIT</name><argument_list>(<argument><expr><name>tcp_nodelay</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>BIT</name><argument_list>(<argument><expr><name>ignorecl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>BIT</name><argument_list>(<argument><expr><name>connect_only</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>BIT</name><argument_list>(<argument><expr><name>http_te_skip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>BIT</name><argument_list>(<argument><expr><name>http_ce_skip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>BIT</name><argument_list>(<argument><expr><name>proxy_transfer_mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_GSSAPI</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>USE_WINDOWS_SSPI</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>BIT</name><argument_list>(<argument><expr><name>socks5_gssapi_nec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>BIT</name><argument_list>(<argument><expr><name>sasl_ir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>BIT</name><argument_list>(<argument><expr><name>wildcard_enabled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>BIT</name><argument_list>(<argument><expr><name>tcp_keepalive</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>BIT</name><argument_list>(<argument><expr><name>tcp_fastopen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>BIT</name><argument_list>(<argument><expr><name>ssl_enable_npn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>BIT</name><argument_list>(<argument><expr><name>ssl_enable_alpn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BIT</name><argument_list>(<argument><expr><name>path_as_is</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>BIT</name><argument_list>(<argument><expr><name>pipewait</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>BIT</name><argument_list>(<argument><expr><name>suppress_connect_headers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>BIT</name><argument_list>(<argument><expr><name>dns_shuffle_addresses</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>BIT</name><argument_list>(<argument><expr><name>stream_depends_e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>BIT</name><argument_list>(<argument><expr><name>haproxyprotocol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>BIT</name><argument_list>(<argument><expr><name>abstract_unix_socket</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BIT</name><argument_list>(<argument><expr><name>disallow_username_in_url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>BIT</name><argument_list>(<argument><expr><name>doh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>BIT</name><argument_list>(<argument><expr><name>doh_get</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>BIT</name><argument_list>(<argument><expr><name>http09_allowed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>BIT</name><argument_list>(<argument><expr><name>mail_rcpt_allowfails</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

}</block>;</struct>

<struct>struct <name>Names</name> <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>curl_hash</name></name> <modifier>*</modifier></type><name>hostcache</name></decl>;</decl_stmt>

<enum>enum <block>{

<decl><name>HCACHE_NONE</name></decl>, 

<decl><name>HCACHE_MULTI</name></decl>, 

<decl><name>HCACHE_SHARED</name></decl> 

}</block> <decl><name>hostcachetype</name></decl>;</enum>

}</block>;</struct>

<struct>struct <name>Curl_easy</name> <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>prev</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>curl_llist_element</name></name></type> <name>connect_queue</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>curl_llist_element</name></name></type> <name>conn_queue</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>CURLMstate</name></type> <name>mstate</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name><name>struct</name> <name>Curl_message</name></name></type> <name>msg</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>curl_socket_t</name></type> <name><name>sockets</name><index>[<expr><name>MAX_SOCKSPEREASYHANDLE</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>actions</name><index>[<expr><name>MAX_SOCKSPEREASYHANDLE</name></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>numsocks</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>Names</name></name></type> <name>dns</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>Curl_multi</name></name> <modifier>*</modifier></type><name>multi</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name><name>struct</name> <name>Curl_multi</name></name> <modifier>*</modifier></type><name>multi_easy</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name><name>struct</name> <name>Curl_share</name></name> <modifier>*</modifier></type><name>share</name></decl>;</decl_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_LIBPSL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name><name>struct</name> <name>PslCache</name></name> <modifier>*</modifier></type><name>psl</name></decl>;</decl_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name><name>struct</name> <name>SingleRequest</name></name></type> <name>req</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name><name>struct</name> <name>UserDefined</name></name></type> <name>set</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name><name>struct</name> <name>DynamicStatic</name></name></type> <name>change</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name><name>struct</name> <name>CookieInfo</name></name> <modifier>*</modifier></type><name>cookies</name></decl>;</decl_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_ALTSVC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name><name>struct</name> <name>altsvcinfo</name></name> <modifier>*</modifier></type><name>asi</name></decl>;</decl_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name><name>struct</name> <name>Progress</name></name></type> <name>progress</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name><name>struct</name> <name>UrlState</name></name></type> <name>state</name></decl>;</decl_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_FTP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name><name>struct</name> <name>WildcardData</name></name></type> <name>wildcard</name></decl>;</decl_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name><name>struct</name> <name>PureInfo</name></name></type> <name>info</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name><name>struct</name> <name>curl_tlssessioninfo</name></name></type> <name>tsi</name></decl>;</decl_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DOES_CONVERSIONS</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ICONV</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>iconv_t</name></type> <name>outbound_cd</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>iconv_t</name></type> <name>inbound_cd</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>iconv_t</name></type> <name>utf8_cd</name></decl>;</decl_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>magic</name></decl>;</decl_stmt> 

}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LIBCURL_NAME</name></cpp:macro> <cpp:value>"libcurl"</cpp:value></cpp:define>

</unit>
