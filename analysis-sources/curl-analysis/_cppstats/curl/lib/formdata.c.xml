<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\curl-analysis\_cppstats\curl\lib\formdata.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_setup.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;curl/curl.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"formdata.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_HTTP</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_MIME</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LIBGEN_H</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_BASENAME</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libgen.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"urldata.h"</cpp:file></cpp:include> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mime.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"non-ascii.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vtls/vtls.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"strcase.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sendf.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"strdup.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rand.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"warnless.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_printf.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_memory.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memdebug.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HTTPPOST_PTRNAME</name></cpp:macro> <cpp:value>CURL_HTTPPOST_PTRNAME</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HTTPPOST_FILENAME</name></cpp:macro> <cpp:value>CURL_HTTPPOST_FILENAME</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HTTPPOST_PTRCONTENTS</name></cpp:macro> <cpp:value>CURL_HTTPPOST_PTRCONTENTS</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HTTPPOST_READFILE</name></cpp:macro> <cpp:value>CURL_HTTPPOST_READFILE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HTTPPOST_PTRBUFFER</name></cpp:macro> <cpp:value>CURL_HTTPPOST_PTRBUFFER</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HTTPPOST_CALLBACK</name></cpp:macro> <cpp:value>CURL_HTTPPOST_CALLBACK</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HTTPPOST_BUFFER</name></cpp:macro> <cpp:value>CURL_HTTPPOST_BUFFER</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>curl_httppost</name></name> <modifier>*</modifier></type>

<name>AddHttpPost</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>namelength</name></decl></parameter>,

<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>curl_off_t</name></type> <name>contentslength</name></decl></parameter>,

<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>bufferlength</name></decl></parameter>,

<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>contenttype</name></decl></parameter>,

<parameter><decl><type><name>long</name></type> <name>flags</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>curl_slist</name></name> <modifier>*</modifier></type><name>contentHeader</name></decl></parameter>,

<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>showfilename</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>userp</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>curl_httppost</name></name> <modifier>*</modifier></type><name>parent_post</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>curl_httppost</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>httppost</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>curl_httppost</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>last_post</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>curl_httppost</name></name> <modifier>*</modifier></type><name>post</name></decl>;</decl_stmt>

<expr_stmt><expr><name>post</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>curl_httppost</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>post</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>post</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>post</name><operator>-&gt;</operator><name>namelength</name></name> <operator>=</operator> <operator>(</operator><name>long</name><operator>)</operator><operator>(</operator><ternary><condition><expr><name>name</name></expr>?</condition><then><expr><operator>(</operator><ternary><condition><expr><name>namelength</name></expr>?</condition><then><expr><name>namelength</name></expr></then><else>:<expr><call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></else></ternary><operator>)</operator></expr></then><else>:<expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>post</name><operator>-&gt;</operator><name>contents</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>post</name><operator>-&gt;</operator><name>contentlen</name></name> <operator>=</operator> <name>contentslength</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>post</name><operator>-&gt;</operator><name>buffer</name></name> <operator>=</operator> <name>buffer</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>post</name><operator>-&gt;</operator><name>bufferlength</name></name> <operator>=</operator> <operator>(</operator><name>long</name><operator>)</operator><name>bufferlength</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>post</name><operator>-&gt;</operator><name>contenttype</name></name> <operator>=</operator> <name>contenttype</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>post</name><operator>-&gt;</operator><name>contentheader</name></name> <operator>=</operator> <name>contentHeader</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>post</name><operator>-&gt;</operator><name>showfilename</name></name> <operator>=</operator> <name>showfilename</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>post</name><operator>-&gt;</operator><name>userp</name></name> <operator>=</operator> <name>userp</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>post</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name>flags</name> <operator>|</operator> <name>CURL_HTTPPOST_LARGE</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name>parent_post</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>post</name><operator>-&gt;</operator><name>more</name></name> <operator>=</operator> <name><name>parent_post</name><operator>-&gt;</operator><name>more</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>parent_post</name><operator>-&gt;</operator><name>more</name></name> <operator>=</operator> <name>post</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>*</operator><name>last_post</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>last_post</name><operator>)</operator><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>post</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>httppost</name><operator>)</operator> <operator>=</operator> <name>post</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>last_post</name><operator>)</operator> <operator>=</operator> <name>post</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>post</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>FormInfo</name> <modifier>*</modifier></type> <name>AddFormInfo</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>,

<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>contenttype</name></decl></parameter>,

<parameter><decl><type><name>FormInfo</name> <modifier>*</modifier></type><name>parent_form_info</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>FormInfo</name> <modifier>*</modifier></type><name>form_info</name></decl>;</decl_stmt>

<expr_stmt><expr><name>form_info</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>FormInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>form_info</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>value</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>form_info</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>contenttype</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>form_info</name><operator>-&gt;</operator><name>contenttype</name></name> <operator>=</operator> <name>contenttype</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>form_info</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name>HTTPPOST_FILENAME</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name>parent_form_info</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>form_info</name><operator>-&gt;</operator><name>more</name></name> <operator>=</operator> <name><name>parent_form_info</name><operator>-&gt;</operator><name>more</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>parent_form_info</name><operator>-&gt;</operator><name>more</name></name> <operator>=</operator> <name>form_info</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>form_info</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier>

<name>CURLFORMcode</name></type> <name>FormAdd</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>curl_httppost</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>httppost</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>curl_httppost</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>last_post</name></decl></parameter>,

<parameter><decl><type><name>va_list</name></type> <name>params</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>FormInfo</name> <modifier>*</modifier></type><name>first_form</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>current_form</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>form</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CURLFORMcode</name></type> <name>return_value</name> <init>= <expr><name>CURL_FORMADD_OK</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prevtype</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>curl_httppost</name></name> <modifier>*</modifier></type><name>post</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CURLformoption</name></type> <name>option</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>curl_forms</name></name> <modifier>*</modifier></type><name>forms</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>array_value</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>bool</name></type> <name>array_state</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>first_form</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>FormInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>first_form</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURL_FORMADD_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>current_form</name> <operator>=</operator> <name>first_form</name></expr>;</expr_stmt>

<while>while<condition>(<expr><name>return_value</name> <operator>==</operator> <name>CURL_FORMADD_OK</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>array_state</name> <operator>&amp;&amp;</operator> <name>forms</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>option</name> <operator>=</operator> <name><name>forms</name><operator>-&gt;</operator><name>option</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>array_value</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>forms</name><operator>-&gt;</operator><name>value</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>forms</name><operator>++</operator></expr>;</expr_stmt> 

<if_stmt><if>if<condition>(<expr><name>CURLFORM_END</name> <operator>==</operator> <name>option</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>array_state</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>option</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>params</name></expr></argument>, <argument><expr><name>CURLformoption</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>CURLFORM_END</name> <operator>==</operator> <name>option</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<switch>switch<condition>(<expr><name>option</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>CURLFORM_ARRAY</name></expr>:</case>

<if_stmt><if>if<condition>(<expr><name>array_state</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>return_value</name> <operator>=</operator> <name>CURL_FORMADD_ILLEGAL_ARRAY</name></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>forms</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>params</name></expr></argument>, <argument><expr>struct <name>curl_forms</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>forms</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>array_state</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>return_value</name> <operator>=</operator> <name>CURL_FORMADD_NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>CURLFORM_PTRNAME</name></expr>:</case>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DOES_CONVERSIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name><name>current_form</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>HTTPPOST_PTRNAME</name></expr>;</expr_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<case>case <expr><name>CURLFORM_COPYNAME</name></expr>:</case>

<if_stmt><if>if<condition>(<expr><name><name>current_form</name><operator>-&gt;</operator><name>name</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>return_value</name> <operator>=</operator> <name>CURL_FORMADD_OPTION_TWICE</name></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><ternary><condition><expr><name>array_state</name></expr>?</condition><then>

<expr><name>array_value</name></expr></then><else>:<expr><call><name>va_arg</name><argument_list>(<argument><expr><name>params</name></expr></argument>, <argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>name</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>current_form</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <name>name</name></expr>;</expr_stmt></block_content></block></if> 

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>return_value</name> <operator>=</operator> <name>CURL_FORMADD_NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>CURLFORM_NAMELENGTH</name></expr>:</case>

<if_stmt><if>if<condition>(<expr><name><name>current_form</name><operator>-&gt;</operator><name>namelength</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>return_value</name> <operator>=</operator> <name>CURL_FORMADD_OPTION_TWICE</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>current_form</name><operator>-&gt;</operator><name>namelength</name></name> <operator>=</operator>

<ternary><condition><expr><name>array_state</name></expr>?</condition><then><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>array_value</name></expr></then><else>:<expr><operator>(</operator><name>size_t</name><operator>)</operator><call><name>va_arg</name><argument_list>(<argument><expr><name>params</name></expr></argument>, <argument><expr><name>long</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>CURLFORM_PTRCONTENTS</name></expr>:</case>

<expr_stmt><expr><name><name>current_form</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>HTTPPOST_PTRCONTENTS</name></expr>;</expr_stmt>

<case>case <expr><name>CURLFORM_COPYCONTENTS</name></expr>:</case>

<if_stmt><if>if<condition>(<expr><name><name>current_form</name><operator>-&gt;</operator><name>value</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>return_value</name> <operator>=</operator> <name>CURL_FORMADD_OPTION_TWICE</name></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>value</name> <init>=

<expr><ternary><condition><expr><name>array_state</name></expr>?</condition><then><expr><name>array_value</name></expr></then><else>:<expr><call><name>va_arg</name><argument_list>(<argument><expr><name>params</name></expr></argument>, <argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>value</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>current_form</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt></block_content></block></if> 

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>return_value</name> <operator>=</operator> <name>CURL_FORMADD_NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>CURLFORM_CONTENTSLENGTH</name></expr>:</case>

<expr_stmt><expr><name><name>current_form</name><operator>-&gt;</operator><name>contentslength</name></name> <operator>=</operator>

<ternary><condition><expr><name>array_state</name></expr>?</condition><then><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>array_value</name></expr></then><else>:<expr><operator>(</operator><name>size_t</name><operator>)</operator><call><name>va_arg</name><argument_list>(<argument><expr><name>params</name></expr></argument>, <argument><expr><name>long</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>CURLFORM_CONTENTLEN</name></expr>:</case>

<expr_stmt><expr><name><name>current_form</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>CURL_HTTPPOST_LARGE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>current_form</name><operator>-&gt;</operator><name>contentslength</name></name> <operator>=</operator>

<ternary><condition><expr><name>array_state</name></expr>?</condition><then><expr><operator>(</operator><name>curl_off_t</name><operator>)</operator><operator>(</operator><name>size_t</name><operator>)</operator><name>array_value</name></expr></then><else>:<expr><call><name>va_arg</name><argument_list>(<argument><expr><name>params</name></expr></argument>, <argument><expr><name>curl_off_t</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>CURLFORM_FILECONTENT</name></expr>:</case>

<if_stmt><if>if<condition>(<expr><name><name>current_form</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>HTTPPOST_PTRCONTENTS</name><operator>|</operator><name>HTTPPOST_READFILE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>return_value</name> <operator>=</operator> <name>CURL_FORMADD_OPTION_TWICE</name></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name> <init>= <expr><ternary><condition><expr><name>array_state</name></expr>?</condition><then>

<expr><name>array_value</name></expr></then><else>:<expr><call><name>va_arg</name><argument_list>(<argument><expr><name>params</name></expr></argument>, <argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>filename</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>current_form</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>current_form</name><operator>-&gt;</operator><name>value</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>return_value</name> <operator>=</operator> <name>CURL_FORMADD_MEMORY</name></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name><name>current_form</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>HTTPPOST_READFILE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>current_form</name><operator>-&gt;</operator><name>value_alloc</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>return_value</name> <operator>=</operator> <name>CURL_FORMADD_NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>CURLFORM_FILE</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name> <init>= <expr><ternary><condition><expr><name>array_state</name></expr>?</condition><then><expr><name>array_value</name></expr></then><else>:

<expr><call><name>va_arg</name><argument_list>(<argument><expr><name>params</name></expr></argument>, <argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>current_form</name><operator>-&gt;</operator><name>value</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>current_form</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>HTTPPOST_FILENAME</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>filename</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>fname</name> <init>= <expr><call><name>strdup</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>fname</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>return_value</name> <operator>=</operator> <name>CURL_FORMADD_MEMORY</name></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>form</name> <operator>=</operator> <call><name>AddFormInfo</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>current_form</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>form</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>return_value</name> <operator>=</operator> <name>CURL_FORMADD_MEMORY</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name><name>form</name><operator>-&gt;</operator><name>value_alloc</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>current_form</name> <operator>=</operator> <name>form</name></expr>;</expr_stmt>

<expr_stmt><expr><name>form</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>return_value</name> <operator>=</operator> <name>CURL_FORMADD_NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>return_value</name> <operator>=</operator> <name>CURL_FORMADD_OPTION_TWICE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>filename</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>current_form</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>current_form</name><operator>-&gt;</operator><name>value</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>return_value</name> <operator>=</operator> <name>CURL_FORMADD_MEMORY</name></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name><name>current_form</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>HTTPPOST_FILENAME</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>current_form</name><operator>-&gt;</operator><name>value_alloc</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>return_value</name> <operator>=</operator> <name>CURL_FORMADD_NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>CURLFORM_BUFFERPTR</name></expr>:</case>

<expr_stmt><expr><name><name>current_form</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>HTTPPOST_PTRBUFFER</name><operator>|</operator><name>HTTPPOST_BUFFER</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>current_form</name><operator>-&gt;</operator><name>buffer</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>return_value</name> <operator>=</operator> <name>CURL_FORMADD_OPTION_TWICE</name></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer</name> <init>=

<expr><ternary><condition><expr><name>array_state</name></expr>?</condition><then><expr><name>array_value</name></expr></then><else>:<expr><call><name>va_arg</name><argument_list>(<argument><expr><name>params</name></expr></argument>, <argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>buffer</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>current_form</name><operator>-&gt;</operator><name>buffer</name></name> <operator>=</operator> <name>buffer</name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>current_form</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <name>buffer</name></expr>;</expr_stmt> 

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>return_value</name> <operator>=</operator> <name>CURL_FORMADD_NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>CURLFORM_BUFFERLENGTH</name></expr>:</case>

<if_stmt><if>if<condition>(<expr><name><name>current_form</name><operator>-&gt;</operator><name>bufferlength</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>return_value</name> <operator>=</operator> <name>CURL_FORMADD_OPTION_TWICE</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>current_form</name><operator>-&gt;</operator><name>bufferlength</name></name> <operator>=</operator>

<ternary><condition><expr><name>array_state</name></expr>?</condition><then><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>array_value</name></expr></then><else>:<expr><operator>(</operator><name>size_t</name><operator>)</operator><call><name>va_arg</name><argument_list>(<argument><expr><name>params</name></expr></argument>, <argument><expr><name>long</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>CURLFORM_STREAM</name></expr>:</case>

<expr_stmt><expr><name><name>current_form</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>HTTPPOST_CALLBACK</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>current_form</name><operator>-&gt;</operator><name>userp</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>return_value</name> <operator>=</operator> <name>CURL_FORMADD_OPTION_TWICE</name></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>userp</name> <init>=

<expr><ternary><condition><expr><name>array_state</name></expr>?</condition><then><expr><name>array_value</name></expr></then><else>:<expr><call><name>va_arg</name><argument_list>(<argument><expr><name>params</name></expr></argument>, <argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>userp</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>current_form</name><operator>-&gt;</operator><name>userp</name></name> <operator>=</operator> <name>userp</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>current_form</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <name>userp</name></expr>;</expr_stmt> 

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>return_value</name> <operator>=</operator> <name>CURL_FORMADD_NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>CURLFORM_CONTENTTYPE</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>contenttype</name> <init>=

<expr><ternary><condition><expr><name>array_state</name></expr>?</condition><then><expr><name>array_value</name></expr></then><else>:<expr><call><name>va_arg</name><argument_list>(<argument><expr><name>params</name></expr></argument>, <argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>current_form</name><operator>-&gt;</operator><name>contenttype</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>current_form</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>HTTPPOST_FILENAME</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>contenttype</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>type</name> <init>= <expr><call><name>strdup</name><argument_list>(<argument><expr><name>contenttype</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>type</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>return_value</name> <operator>=</operator> <name>CURL_FORMADD_MEMORY</name></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>form</name> <operator>=</operator> <call><name>AddFormInfo</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>current_form</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>form</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>return_value</name> <operator>=</operator> <name>CURL_FORMADD_MEMORY</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name><name>form</name><operator>-&gt;</operator><name>contenttype_alloc</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>current_form</name> <operator>=</operator> <name>form</name></expr>;</expr_stmt>

<expr_stmt><expr><name>form</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>return_value</name> <operator>=</operator> <name>CURL_FORMADD_NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>return_value</name> <operator>=</operator> <name>CURL_FORMADD_OPTION_TWICE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>contenttype</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>current_form</name><operator>-&gt;</operator><name>contenttype</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>contenttype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>current_form</name><operator>-&gt;</operator><name>contenttype</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>return_value</name> <operator>=</operator> <name>CURL_FORMADD_MEMORY</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>current_form</name><operator>-&gt;</operator><name>contenttype_alloc</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>return_value</name> <operator>=</operator> <name>CURL_FORMADD_NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>CURLFORM_CONTENTHEADER</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>curl_slist</name></name> <modifier>*</modifier></type><name>list</name> <init>= <expr><ternary><condition><expr><name>array_state</name></expr>?</condition><then>

<expr><operator>(</operator>struct <name>curl_slist</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>array_value</name></expr></then><else>:

<expr><call><name>va_arg</name><argument_list>(<argument><expr><name>params</name></expr></argument>, <argument><expr>struct <name>curl_slist</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>current_form</name><operator>-&gt;</operator><name>contentheader</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>return_value</name> <operator>=</operator> <name>CURL_FORMADD_OPTION_TWICE</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>current_form</name><operator>-&gt;</operator><name>contentheader</name></name> <operator>=</operator> <name>list</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>CURLFORM_FILENAME</name></expr>:</case>

<case>case <expr><name>CURLFORM_BUFFER</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name> <init>= <expr><ternary><condition><expr><name>array_state</name></expr>?</condition><then><expr><name>array_value</name></expr></then><else>:

<expr><call><name>va_arg</name><argument_list>(<argument><expr><name>params</name></expr></argument>, <argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>current_form</name><operator>-&gt;</operator><name>showfilename</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>return_value</name> <operator>=</operator> <name>CURL_FORMADD_OPTION_TWICE</name></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name><name>current_form</name><operator>-&gt;</operator><name>showfilename</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>current_form</name><operator>-&gt;</operator><name>showfilename</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>return_value</name> <operator>=</operator> <name>CURL_FORMADD_MEMORY</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>current_form</name><operator>-&gt;</operator><name>showfilename_alloc</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

</block_content>}</block>

<default>default:</default>

<expr_stmt><expr><name>return_value</name> <operator>=</operator> <name>CURL_FORMADD_UNKNOWN_OPTION</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></while>

<if_stmt><if>if<condition>(<expr><name>CURL_FORMADD_OK</name> <operator>!=</operator> <name>return_value</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>FormInfo</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>ptr</name> <operator>=</operator> <name>first_form</name></expr>;</init> <condition><expr><name>ptr</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>ptr</name> <operator>=</operator> <name><name>ptr</name><operator>-&gt;</operator><name>more</name></name></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>ptr</name><operator>-&gt;</operator><name>name_alloc</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>ptr</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>name_alloc</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ptr</name><operator>-&gt;</operator><name>value_alloc</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>ptr</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>value_alloc</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ptr</name><operator>-&gt;</operator><name>contenttype_alloc</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>ptr</name><operator>-&gt;</operator><name>contenttype</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>contenttype_alloc</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ptr</name><operator>-&gt;</operator><name>showfilename_alloc</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>ptr</name><operator>-&gt;</operator><name>showfilename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>showfilename_alloc</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>CURL_FORMADD_OK</name> <operator>==</operator> <name>return_value</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>post</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>form</name> <operator>=</operator> <name>first_form</name></expr>;</init>

<condition><expr><name>form</name> <operator>!=</operator> <name>NULL</name></expr>;</condition>

<incr><expr><name>form</name> <operator>=</operator> <name><name>form</name><operator>-&gt;</operator><name>more</name></name></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>(</operator><operator>(</operator><operator>!</operator><name><name>form</name><operator>-&gt;</operator><name>name</name></name> <operator>||</operator> <operator>!</operator><name><name>form</name><operator>-&gt;</operator><name>value</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name>post</name><operator>)</operator> <operator>||</operator>

<operator>(</operator> <operator>(</operator><name><name>form</name><operator>-&gt;</operator><name>contentslength</name></name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>form</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>HTTPPOST_FILENAME</name><operator>)</operator> <operator>)</operator> <operator>||</operator>

<operator>(</operator> <operator>(</operator><name><name>form</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>HTTPPOST_FILENAME</name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>form</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>HTTPPOST_PTRCONTENTS</name><operator>)</operator> <operator>)</operator> <operator>||</operator>

<operator>(</operator> <operator>(</operator><operator>!</operator><name><name>form</name><operator>-&gt;</operator><name>buffer</name></name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>form</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>HTTPPOST_BUFFER</name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>form</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>HTTPPOST_PTRBUFFER</name><operator>)</operator> <operator>)</operator> <operator>||</operator>

<operator>(</operator> <operator>(</operator><name><name>form</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>HTTPPOST_READFILE</name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>form</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>HTTPPOST_PTRCONTENTS</name><operator>)</operator> <operator>)</operator></expr>

)</condition> <block>{<block_content>

<expr_stmt><expr><name>return_value</name> <operator>=</operator> <name>CURL_FORMADD_INCOMPLETE</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><operator>(</operator><name><name>form</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>HTTPPOST_FILENAME</name><operator>)</operator> <operator>||</operator>

<operator>(</operator><name><name>form</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>HTTPPOST_BUFFER</name><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>!</operator><name><name>form</name><operator>-&gt;</operator><name>contenttype</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>f</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>form</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>HTTPPOST_BUFFER</name><operator>)</operator></expr>?</condition><then>

<expr><name><name>form</name><operator>-&gt;</operator><name>showfilename</name></name></expr> </then><else>: <expr><name><name>form</name><operator>-&gt;</operator><name>value</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>type</name></decl>;</decl_stmt>

<expr_stmt><expr><name>type</name> <operator>=</operator> <call><name>Curl_mime_contenttype</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>type</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>type</name> <operator>=</operator> <name>prevtype</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>type</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>type</name> <operator>=</operator> <name>FILE_CONTENTTYPE_DEFAULT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>form</name><operator>-&gt;</operator><name>contenttype</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>form</name><operator>-&gt;</operator><name>contenttype</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>return_value</name> <operator>=</operator> <name>CURL_FORMADD_MEMORY</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>form</name><operator>-&gt;</operator><name>contenttype_alloc</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>form</name><operator>-&gt;</operator><name>name</name></name> <operator>&amp;&amp;</operator> <name><name>form</name><operator>-&gt;</operator><name>namelength</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>form</name><operator>-&gt;</operator><name>namelength</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>form</name><operator>-&gt;</operator><name>name</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>return_value</name> <operator>=</operator> <name>CURL_FORMADD_NULL</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt></block_content></block></for>

<if_stmt><if>if<condition>(<expr><name>return_value</name> <operator>!=</operator> <name>CURL_FORMADD_OK</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><name><name>form</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>HTTPPOST_PTRNAME</name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name>form</name> <operator>==</operator> <name>first_form</name><operator>)</operator></expr> )</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>form</name><operator>-&gt;</operator><name>name</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>form</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>Curl_memdup</name><argument_list>(<argument><expr><name><name>form</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>form</name><operator>-&gt;</operator><name>namelength</name></name></expr>?</condition><then>

<expr><name><name>form</name><operator>-&gt;</operator><name>namelength</name></name></expr></then><else>:

<expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>form</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>form</name><operator>-&gt;</operator><name>name</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>return_value</name> <operator>=</operator> <name>CURL_FORMADD_MEMORY</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>form</name><operator>-&gt;</operator><name>name_alloc</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><name><name>form</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>HTTPPOST_FILENAME</name> <operator>|</operator> <name>HTTPPOST_READFILE</name> <operator>|</operator>

<name>HTTPPOST_PTRCONTENTS</name> <operator>|</operator> <name>HTTPPOST_PTRBUFFER</name> <operator>|</operator>

<name>HTTPPOST_CALLBACK</name><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>form</name><operator>-&gt;</operator><name>value</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>clen</name> <init>= <expr><operator>(</operator><name>size_t</name><operator>)</operator> <name><name>form</name><operator>-&gt;</operator><name>contentslength</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>clen</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>clen</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>form</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>form</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <call><name>Curl_memdup</name><argument_list>(<argument><expr><name><name>form</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><name>clen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>form</name><operator>-&gt;</operator><name>value</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>return_value</name> <operator>=</operator> <name>CURL_FORMADD_MEMORY</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>form</name><operator>-&gt;</operator><name>value_alloc</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>post</name> <operator>=</operator> <call><name>AddHttpPost</name><argument_list>(<argument><expr><name><name>form</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>form</name><operator>-&gt;</operator><name>namelength</name></name></expr></argument>,

<argument><expr><name><name>form</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><name><name>form</name><operator>-&gt;</operator><name>contentslength</name></name></expr></argument>,

<argument><expr><name><name>form</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><name><name>form</name><operator>-&gt;</operator><name>bufferlength</name></name></expr></argument>,

<argument><expr><name><name>form</name><operator>-&gt;</operator><name>contenttype</name></name></expr></argument>, <argument><expr><name><name>form</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>,

<argument><expr><name><name>form</name><operator>-&gt;</operator><name>contentheader</name></name></expr></argument>, <argument><expr><name><name>form</name><operator>-&gt;</operator><name>showfilename</name></name></expr></argument>,

<argument><expr><name><name>form</name><operator>-&gt;</operator><name>userp</name></name></expr></argument>,

<argument><expr><name>post</name></expr></argument>, <argument><expr><name>httppost</name></expr></argument>,

<argument><expr><name>last_post</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>post</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>return_value</name> <operator>=</operator> <name>CURL_FORMADD_MEMORY</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>form</name><operator>-&gt;</operator><name>contenttype</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>prevtype</name> <operator>=</operator> <name><name>form</name><operator>-&gt;</operator><name>contenttype</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if<condition>(<expr><name>CURL_FORMADD_OK</name> <operator>!=</operator> <name>return_value</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>FormInfo</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>ptr</name> <operator>=</operator> <name>form</name></expr>;</init> <condition><expr><name>ptr</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>ptr</name> <operator>=</operator> <name><name>ptr</name><operator>-&gt;</operator><name>more</name></name></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>ptr</name><operator>-&gt;</operator><name>name_alloc</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>ptr</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>name_alloc</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ptr</name><operator>-&gt;</operator><name>value_alloc</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>ptr</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>value_alloc</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ptr</name><operator>-&gt;</operator><name>contenttype_alloc</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>ptr</name><operator>-&gt;</operator><name>contenttype</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>contenttype_alloc</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ptr</name><operator>-&gt;</operator><name>showfilename_alloc</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>ptr</name><operator>-&gt;</operator><name>showfilename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>showfilename_alloc</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<while>while<condition>(<expr><name>first_form</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>FormInfo</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name><name>first_form</name><operator>-&gt;</operator><name>more</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>first_form</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>first_form</name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>return_value</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>CURLFORMcode</name></type> <name>curl_formadd</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>curl_httppost</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>httppost</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>curl_httppost</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>last_post</name></decl></parameter>,

<parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>va_list</name></type> <name>arg</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CURLFORMcode</name></type> <name>result</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>last_post</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>FormAdd</name><argument_list>(<argument><expr><name>httppost</name></expr></argument>, <argument><expr><name>last_post</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>curl_formget</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>curl_httppost</name></name> <modifier>*</modifier></type><name>form</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>,

<parameter><decl><type><name>curl_formget_callback</name></type> <name>append</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>curl_mimepart</name></type> <name>toppart</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>Curl_mime_initpart</name><argument_list>(<argument><expr><operator>&amp;</operator><name>toppart</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_getformdata</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>toppart</name></expr></argument>, <argument><expr><name>form</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>result</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_mime_prepare_headers</name><argument_list>(<argument><expr><operator>&amp;</operator><name>toppart</name></expr></argument>, <argument><expr><literal type="string">"multipart/form-data"</literal></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>MIMESTRATEGY_FORM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<while>while<condition>(<expr><operator>!</operator><name>result</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr><literal type="number">8192</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>nread</name> <init>= <expr><call><name>Curl_mime_read</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>toppart</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>nread</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>nread</name> <operator>&gt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof> <operator>||</operator> <call><name>append</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>nread</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>nread</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_READ_ERROR</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>nread</name> <operator>==</operator> <name>CURL_READFUNC_ABORT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_ABORTED_BY_CALLBACK</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>Curl_mime_cleanpart</name><argument_list>(<argument><expr><operator>&amp;</operator><name>toppart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>int</name><operator>)</operator> <name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>curl_formfree</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>curl_httppost</name></name> <modifier>*</modifier></type><name>form</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>curl_httppost</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>form</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<do>do <block>{<block_content>

<expr_stmt><expr><name>next</name> <operator>=</operator> <name><name>form</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>curl_formfree</name><argument_list>(<argument><expr><name><name>form</name><operator>-&gt;</operator><name>more</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><name><name>form</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>HTTPPOST_PTRNAME</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>form</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><name><name>form</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator>

<operator>(</operator><name>HTTPPOST_PTRCONTENTS</name><operator>|</operator><name>HTTPPOST_BUFFER</name><operator>|</operator><name>HTTPPOST_CALLBACK</name><operator>)</operator><operator>)</operator></expr>

)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>form</name><operator>-&gt;</operator><name>contents</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>form</name><operator>-&gt;</operator><name>contenttype</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>form</name><operator>-&gt;</operator><name>showfilename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>form</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>form</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>

</block_content>}</block> while<condition>(<expr><name>form</name></expr>)</condition>;</do> 

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>setname</name><parameter_list>(<parameter><decl><type><name>curl_mimepart</name> <modifier>*</modifier></type><name>part</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zname</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>res</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>name</name> <operator>||</operator> <operator>!</operator><name>len</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>curl_mime_name</name><argument_list>(<argument><expr><name>part</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>zname</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>zname</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>zname</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>zname</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>curl_mime_name</name><argument_list>(<argument><expr><name>part</name></expr></argument>, <argument><expr><name>zname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>zname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>CURLcode</name></type> <name>Curl_getformdata</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><name>curl_mimepart</name> <modifier>*</modifier></type><name>finalform</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>curl_httppost</name></name> <modifier>*</modifier></type><name>post</name></decl></parameter>,

<parameter><decl><type><name>curl_read_callback</name></type> <name>fread_func</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>curl_mime</name> <modifier>*</modifier></type><name>form</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>curl_mimepart</name> <modifier>*</modifier></type><name>part</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>curl_httppost</name></name> <modifier>*</modifier></type><name>file</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>Curl_mime_cleanpart</name><argument_list>(<argument><expr><name>finalform</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>post</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>form</name> <operator>=</operator> <call><name>curl_mime_init</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>form</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_OUT_OF_MEMORY</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>result</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>curl_mime_subparts</name><argument_list>(<argument><expr><name>finalform</name></expr></argument>, <argument><expr><name>form</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for<control>(<init>;</init> <condition><expr><operator>!</operator><name>result</name> <operator>&amp;&amp;</operator> <name>post</name></expr>;</condition> <incr><expr><name>post</name> <operator>=</operator> <name><name>post</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>curl_mime</name> <modifier>*</modifier></type><name>multipart</name> <init>= <expr><name>form</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>post</name><operator>-&gt;</operator><name>more</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>part</name> <operator>=</operator> <call><name>curl_mime_addpart</name><argument_list>(<argument><expr><name>form</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>part</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_OUT_OF_MEMORY</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>result</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>setname</name><argument_list>(<argument><expr><name>part</name></expr></argument>, <argument><expr><name><name>post</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>post</name><operator>-&gt;</operator><name>namelength</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>result</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>multipart</name> <operator>=</operator> <call><name>curl_mime_init</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>multipart</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_OUT_OF_MEMORY</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>result</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>curl_mime_subparts</name><argument_list>(<argument><expr><name>part</name></expr></argument>, <argument><expr><name>multipart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<for>for<control>(<init><expr><name>file</name> <operator>=</operator> <name>post</name></expr>;</init> <condition><expr><operator>!</operator><name>result</name> <operator>&amp;&amp;</operator> <name>file</name></expr>;</condition> <incr><expr><name>file</name> <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>more</name></name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>part</name> <operator>=</operator> <call><name>curl_mime_addpart</name><argument_list>(<argument><expr><name>multipart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>part</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_OUT_OF_MEMORY</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>result</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>curl_mime_headers</name><argument_list>(<argument><expr><name>part</name></expr></argument>, <argument><expr><name><name>file</name><operator>-&gt;</operator><name>contentheader</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>result</name> <operator>&amp;&amp;</operator> <name><name>file</name><operator>-&gt;</operator><name>contenttype</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>curl_mime_type</name><argument_list>(<argument><expr><name>part</name></expr></argument>, <argument><expr><name><name>file</name><operator>-&gt;</operator><name>contenttype</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>result</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>post</name><operator>-&gt;</operator><name>more</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>setname</name><argument_list>(<argument><expr><name>part</name></expr></argument>, <argument><expr><name><name>post</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>post</name><operator>-&gt;</operator><name>namelength</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>result</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>curl_off_t</name></type> <name>clen</name> <init>= <expr><name><name>post</name><operator>-&gt;</operator><name>contentslength</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>post</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CURL_HTTPPOST_LARGE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>clen</name> <operator>=</operator> <name><name>post</name><operator>-&gt;</operator><name>contentlen</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>clen</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>clen</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>post</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>HTTPPOST_FILENAME</name> <operator>|</operator> <name>HTTPPOST_READFILE</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>contents</name></name></expr></argument>, <argument><expr><literal type="string">"-"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>curl_mime_data_cb</name><argument_list>(<argument><expr><name>part</name></expr></argument>, <argument><expr><operator>(</operator><name>curl_off_t</name><operator>)</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>,

<argument><expr><operator>(</operator><name>curl_read_callback</name><operator>)</operator> <name>fread</name></expr></argument>,

<argument><expr><call><name>CURLX_FUNCTION_CAST</name><argument_list>(<argument><expr><name>curl_seek_callback</name></expr></argument>,

<argument><expr><name>fseek</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>curl_mime_filedata</name><argument_list>(<argument><expr><name>part</name></expr></argument>, <argument><expr><name><name>file</name><operator>-&gt;</operator><name>contents</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>result</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>post</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>HTTPPOST_READFILE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>curl_mime_filename</name><argument_list>(<argument><expr><name>part</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name><name>post</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>HTTPPOST_BUFFER</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>curl_mime_data</name><argument_list>(<argument><expr><name>part</name></expr></argument>, <argument><expr><name><name>post</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>post</name><operator>-&gt;</operator><name>bufferlength</name></name></expr>?</condition><then> <expr><name><name>post</name><operator>-&gt;</operator><name>bufferlength</name></name></expr></then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>(<expr><name><name>post</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>HTTPPOST_CALLBACK</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>curl_mime_data_cb</name><argument_list>(<argument><expr><name>part</name></expr></argument>, <argument><expr><name>clen</name></expr></argument>,

<argument><expr><name>fread_func</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>post</name><operator>-&gt;</operator><name>userp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>curl_mime_data</name><argument_list>(<argument><expr><name>part</name></expr></argument>, <argument><expr><name><name>post</name><operator>-&gt;</operator><name>contents</name></name></expr></argument>, <argument><expr><operator>(</operator><name>ssize_t</name><operator>)</operator> <name>clen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DOES_CONVERSIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>result</name> <operator>&amp;&amp;</operator> <name>data</name> <operator>&amp;&amp;</operator> <name><name>part</name><operator>-&gt;</operator><name>datasize</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_convert_to_network</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>part</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>part</name><operator>-&gt;</operator><name>datasize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>result</name> <operator>&amp;&amp;</operator> <name><name>post</name><operator>-&gt;</operator><name>showfilename</name></name></expr>)</condition><block type="pseudo"><block_content>

<if_stmt><if>if<condition>(<expr><name><name>post</name><operator>-&gt;</operator><name>more</name></name> <operator>||</operator> <operator>(</operator><name><name>post</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>HTTPPOST_FILENAME</name> <operator>|</operator> <name>HTTPPOST_BUFFER</name> <operator>|</operator>

<name>HTTPPOST_CALLBACK</name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>curl_mime_filename</name><argument_list>(<argument><expr><name>part</name></expr></argument>, <argument><expr><name><name>post</name><operator>-&gt;</operator><name>showfilename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>Curl_mime_cleanpart</name><argument_list>(<argument><expr><name>finalform</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<function><type><name>CURLFORMcode</name></type> <name>curl_formadd</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>curl_httppost</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>httppost</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>curl_httppost</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>last_post</name></decl></parameter>,

<parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>httppost</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>last_post</name></expr>;</expr_stmt>

<return>return <expr><name>CURL_FORMADD_DISABLED</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>curl_formget</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>curl_httppost</name></name> <modifier>*</modifier></type><name>form</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>,

<parameter><decl><type><name>curl_formget_callback</name></type> <name>append</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>form</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>arg</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>append</name></expr>;</expr_stmt>

<return>return <expr><name>CURL_FORMADD_DISABLED</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>curl_formfree</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>curl_httppost</name></name> <modifier>*</modifier></type><name>form</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>form</name></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</unit>
