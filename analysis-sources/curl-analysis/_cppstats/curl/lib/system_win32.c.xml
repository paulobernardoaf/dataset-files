<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\curl-analysis\_cppstats\curl\lib\system_win32.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_setup.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;curl/curl.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"system_win32.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_sspi.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"warnless.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_memory.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memdebug.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>LARGE_INTEGER</name></type> <name>Curl_freq</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>Curl_isVistaOrGreater</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>HMODULE</name></type> <name>s_hIpHlpApiDll</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>IF_NAMETOINDEX_FN</name></type> <name>Curl_if_nametoindex</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<function><type><name>CURLcode</name></type> <name>Curl_win32_init</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>CURL_GLOBAL_WIN32</name></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_WINSOCK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>WORD</name></type> <name>wVersionRequested</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>WSADATA</name></type> <name>wsaData</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_IPV6</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>USE_WINSOCK</name> <operator>&lt;</operator> <literal type="number">2</literal><operator>)</operator></expr></cpp:if>

<cpp:error>#<cpp:directive>error</cpp:directive> IPV6_requires_winsock2</cpp:error>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>wVersionRequested</name> <operator>=</operator> <call><name>MAKEWORD</name><argument_list>(<argument><expr><name>USE_WINSOCK</name></expr></argument>, <argument><expr><name>USE_WINSOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>WSAStartup</name><argument_list>(<argument><expr><name>wVersionRequested</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wsaData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>res</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_FAILED_INIT</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>LOBYTE</name><argument_list>(<argument><expr><name><name>wsaData</name><operator>.</operator><name>wVersion</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>LOBYTE</name><argument_list>(<argument><expr><name>wVersionRequested</name></expr></argument>)</argument_list></call> <operator>||</operator>

<call><name>HIBYTE</name><argument_list>(<argument><expr><name><name>wsaData</name><operator>.</operator><name>wVersion</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>HIBYTE</name><argument_list>(<argument><expr><name>wVersionRequested</name></expr></argument>)</argument_list></call></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><call><name>WSACleanup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_FAILED_INIT</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_LWIPSOCK</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<expr_stmt><expr><call><name>lwip_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_WINDOWS_SSPI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<block>{<block_content>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><call><name>Curl_sspi_global_init</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>s_hIpHlpApiDll</name> <operator>=</operator> <call><name>Curl_load_library</name><argument_list>(<argument><expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"iphlpapi.dll"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>s_hIpHlpApiDll</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>IF_NAMETOINDEX_FN</name></type> <name>pIfNameToIndex</name> <init>=

<expr><call><name>CURLX_FUNCTION_CAST</name><argument_list>(<argument><expr><name>IF_NAMETOINDEX_FN</name></expr></argument>,

<argument><expr><operator>(</operator><call><name>GetProcAddress</name><argument_list>(<argument><expr><name>s_hIpHlpApiDll</name></expr></argument>, <argument><expr><literal type="string">"if_nametoindex"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>pIfNameToIndex</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>Curl_if_nametoindex</name> <operator>=</operator> <name>pIfNameToIndex</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>Curl_verify_windows_version</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>PLATFORM_WINNT</name></expr></argument>,

<argument><expr><name>VERSION_GREATER_THAN_EQUAL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>Curl_isVistaOrGreater</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>Curl_isVistaOrGreater</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>QueryPerformanceFrequency</name><argument_list>(<argument><expr><operator>&amp;</operator><name>Curl_freq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>Curl_win32_cleanup</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>init_flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>s_hIpHlpApiDll</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>FreeLibrary</name><argument_list>(<argument><expr><name>s_hIpHlpApiDll</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>s_hIpHlpApiDll</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>Curl_if_nametoindex</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_WINDOWS_SSPI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>Curl_sspi_global_cleanup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if<condition>(<expr><name>init_flags</name> <operator>&amp;</operator> <name>CURL_GLOBAL_WIN32</name></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_WINSOCK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>WSACleanup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LOAD_WITH_ALTERED_SEARCH_PATH</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOAD_WITH_ALTERED_SEARCH_PATH</name></cpp:macro> <cpp:value>0x00000008</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LOAD_LIBRARY_SEARCH_SYSTEM32</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOAD_LIBRARY_SEARCH_SYSTEM32</name></cpp:macro> <cpp:value>0x00000800</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <function_decl><type><name>HMODULE</name></type> (<name>APIENTRY</name> <modifier>*</modifier><name>LOADLIBRARYEX_FN</name>)<parameter_list>(<parameter><decl><type><name>LPCTSTR</name></type></decl></parameter>, <parameter><decl><type><name>HANDLE</name></type></decl></parameter>, <parameter><decl><type><name>DWORD</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNICODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32_WCE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOADLIBARYEX</name></cpp:macro> <cpp:value>L"LoadLibraryExW"</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOADLIBARYEX</name></cpp:macro> <cpp:value>"LoadLibraryExW"</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOADLIBARYEX</name></cpp:macro> <cpp:value>"LoadLibraryExA"</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>bool</name></type> <name>Curl_verify_windows_version</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>majorVersion</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>minorVersion</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>PlatformIdentifier</name></type> <name>platform</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>VersionCondition</name></type> <name>condition</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>matched</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CURL_WINDOWS_APP</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><specifier>const</specifier> <name>WORD</name></type> <name>fullVersion</name> <init>= <expr><call><name>MAKEWORD</name><argument_list>(<argument><expr><name>minorVersion</name></expr></argument>, <argument><expr><name>majorVersion</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>WORD</name></type> <name>targetVersion</name> <init>= <expr><operator>(</operator><name>WORD</name><operator>)</operator><name>_WIN32_WINNT</name></expr></init></decl>;</decl_stmt>

<switch>switch<condition>(<expr><name>condition</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>VERSION_LESS_THAN</name></expr>:</case>

<expr_stmt><expr><name>matched</name> <operator>=</operator> <name>targetVersion</name> <operator>&lt;</operator> <name>fullVersion</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VERSION_LESS_THAN_EQUAL</name></expr>:</case>

<expr_stmt><expr><name>matched</name> <operator>=</operator> <name>targetVersion</name> <operator>&lt;=</operator> <name>fullVersion</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VERSION_EQUAL</name></expr>:</case>

<expr_stmt><expr><name>matched</name> <operator>=</operator> <name>targetVersion</name> <operator>==</operator> <name>fullVersion</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VERSION_GREATER_THAN_EQUAL</name></expr>:</case>

<expr_stmt><expr><name>matched</name> <operator>=</operator> <name>targetVersion</name> <operator>&gt;=</operator> <name>fullVersion</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VERSION_GREATER_THAN</name></expr>:</case>

<expr_stmt><expr><name>matched</name> <operator>=</operator> <name>targetVersion</name> <operator>&gt;</operator> <name>fullVersion</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if<condition>(<expr><name>matched</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>platform</name> <operator>==</operator> <name>PLATFORM_WINDOWS</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>matched</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32_WINNT</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32_WINNT_WIN2K</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><name>_WIN32_WINNT</name> <operator>&lt;</operator> <name>_WIN32_WINNT_WIN2K</name><operator>)</operator></expr></cpp:elif>

<decl_stmt><decl><type><name>OSVERSIONINFO</name></type> <name>osver</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>osver</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>osver</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>osver</name><operator>.</operator><name>dwOSVersionInfoSize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>osver</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>GetVersionEx</name><argument_list>(<argument><expr><operator>&amp;</operator><name>osver</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<switch>switch<condition>(<expr><name>condition</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>VERSION_LESS_THAN</name></expr>:</case>

<if_stmt><if>if<condition>(<expr><name><name>osver</name><operator>.</operator><name>dwMajorVersion</name></name> <operator>&lt;</operator> <name>majorVersion</name> <operator>||</operator>

<operator>(</operator><name><name>osver</name><operator>.</operator><name>dwMajorVersion</name></name> <operator>==</operator> <name>majorVersion</name> <operator>&amp;&amp;</operator>

<name><name>osver</name><operator>.</operator><name>dwMinorVersion</name></name> <operator>&lt;</operator> <name>minorVersion</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>matched</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>VERSION_LESS_THAN_EQUAL</name></expr>:</case>

<if_stmt><if>if<condition>(<expr><name><name>osver</name><operator>.</operator><name>dwMajorVersion</name></name> <operator>&lt;</operator> <name>majorVersion</name> <operator>||</operator>

<operator>(</operator><name><name>osver</name><operator>.</operator><name>dwMajorVersion</name></name> <operator>==</operator> <name>majorVersion</name> <operator>&amp;&amp;</operator>

<name><name>osver</name><operator>.</operator><name>dwMinorVersion</name></name> <operator>&lt;=</operator> <name>minorVersion</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>matched</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>VERSION_EQUAL</name></expr>:</case>

<if_stmt><if>if<condition>(<expr><name><name>osver</name><operator>.</operator><name>dwMajorVersion</name></name> <operator>==</operator> <name>majorVersion</name> <operator>&amp;&amp;</operator>

<name><name>osver</name><operator>.</operator><name>dwMinorVersion</name></name> <operator>==</operator> <name>minorVersion</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>matched</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>VERSION_GREATER_THAN_EQUAL</name></expr>:</case>

<if_stmt><if>if<condition>(<expr><name><name>osver</name><operator>.</operator><name>dwMajorVersion</name></name> <operator>&gt;</operator> <name>majorVersion</name> <operator>||</operator>

<operator>(</operator><name><name>osver</name><operator>.</operator><name>dwMajorVersion</name></name> <operator>==</operator> <name>majorVersion</name> <operator>&amp;&amp;</operator>

<name><name>osver</name><operator>.</operator><name>dwMinorVersion</name></name> <operator>&gt;=</operator> <name>minorVersion</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>matched</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>VERSION_GREATER_THAN</name></expr>:</case>

<if_stmt><if>if<condition>(<expr><name><name>osver</name><operator>.</operator><name>dwMajorVersion</name></name> <operator>&gt;</operator> <name>majorVersion</name> <operator>||</operator>

<operator>(</operator><name><name>osver</name><operator>.</operator><name>dwMajorVersion</name></name> <operator>==</operator> <name>majorVersion</name> <operator>&amp;&amp;</operator>

<name><name>osver</name><operator>.</operator><name>dwMinorVersion</name></name> <operator>&gt;</operator> <name>minorVersion</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>matched</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if<condition>(<expr><name>matched</name></expr>)</condition> <block>{<block_content>

<switch>switch<condition>(<expr><name>platform</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>PLATFORM_WINDOWS</name></expr>:</case>

<if_stmt><if>if<condition>(<expr><name><name>osver</name><operator>.</operator><name>dwPlatformId</name></name> <operator>!=</operator> <name>VER_PLATFORM_WIN32_WINDOWS</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>matched</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>PLATFORM_WINNT</name></expr>:</case>

<if_stmt><if>if<condition>(<expr><name><name>osver</name><operator>.</operator><name>dwPlatformId</name></name> <operator>!=</operator> <name>VER_PLATFORM_WIN32_NT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>matched</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<default>default:</default> 

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>ULONGLONG</name></type> <name>cm</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>OSVERSIONINFOEX</name></type> <name>osver</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BYTE</name></type> <name>majorCondition</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BYTE</name></type> <name>minorCondition</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BYTE</name></type> <name>spMajorCondition</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BYTE</name></type> <name>spMinorCondition</name></decl>;</decl_stmt>

<switch>switch<condition>(<expr><name>condition</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>VERSION_LESS_THAN</name></expr>:</case>

<expr_stmt><expr><name>majorCondition</name> <operator>=</operator> <name>VER_LESS</name></expr>;</expr_stmt>

<expr_stmt><expr><name>minorCondition</name> <operator>=</operator> <name>VER_LESS</name></expr>;</expr_stmt>

<expr_stmt><expr><name>spMajorCondition</name> <operator>=</operator> <name>VER_LESS_EQUAL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>spMinorCondition</name> <operator>=</operator> <name>VER_LESS_EQUAL</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VERSION_LESS_THAN_EQUAL</name></expr>:</case>

<expr_stmt><expr><name>majorCondition</name> <operator>=</operator> <name>VER_LESS_EQUAL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>minorCondition</name> <operator>=</operator> <name>VER_LESS_EQUAL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>spMajorCondition</name> <operator>=</operator> <name>VER_LESS_EQUAL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>spMinorCondition</name> <operator>=</operator> <name>VER_LESS_EQUAL</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VERSION_EQUAL</name></expr>:</case>

<expr_stmt><expr><name>majorCondition</name> <operator>=</operator> <name>VER_EQUAL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>minorCondition</name> <operator>=</operator> <name>VER_EQUAL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>spMajorCondition</name> <operator>=</operator> <name>VER_GREATER_EQUAL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>spMinorCondition</name> <operator>=</operator> <name>VER_GREATER_EQUAL</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VERSION_GREATER_THAN_EQUAL</name></expr>:</case>

<expr_stmt><expr><name>majorCondition</name> <operator>=</operator> <name>VER_GREATER_EQUAL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>minorCondition</name> <operator>=</operator> <name>VER_GREATER_EQUAL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>spMajorCondition</name> <operator>=</operator> <name>VER_GREATER_EQUAL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>spMinorCondition</name> <operator>=</operator> <name>VER_GREATER_EQUAL</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VERSION_GREATER_THAN</name></expr>:</case>

<expr_stmt><expr><name>majorCondition</name> <operator>=</operator> <name>VER_GREATER</name></expr>;</expr_stmt>

<expr_stmt><expr><name>minorCondition</name> <operator>=</operator> <name>VER_GREATER</name></expr>;</expr_stmt>

<expr_stmt><expr><name>spMajorCondition</name> <operator>=</operator> <name>VER_GREATER_EQUAL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>spMinorCondition</name> <operator>=</operator> <name>VER_GREATER_EQUAL</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>osver</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>osver</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>osver</name><operator>.</operator><name>dwOSVersionInfoSize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>osver</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name><name>osver</name><operator>.</operator><name>dwMajorVersion</name></name> <operator>=</operator> <name>majorVersion</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>osver</name><operator>.</operator><name>dwMinorVersion</name></name> <operator>=</operator> <name>minorVersion</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>platform</name> <operator>==</operator> <name>PLATFORM_WINDOWS</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>osver</name><operator>.</operator><name>dwPlatformId</name></name> <operator>=</operator> <name>VER_PLATFORM_WIN32_WINDOWS</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>(<expr><name>platform</name> <operator>==</operator> <name>PLATFORM_WINNT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>osver</name><operator>.</operator><name>dwPlatformId</name></name> <operator>=</operator> <name>VER_PLATFORM_WIN32_NT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>cm</name> <operator>=</operator> <call><name>VerSetConditionMask</name><argument_list>(<argument><expr><name>cm</name></expr></argument>, <argument><expr><name>VER_MAJORVERSION</name></expr></argument>, <argument><expr><name>majorCondition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cm</name> <operator>=</operator> <call><name>VerSetConditionMask</name><argument_list>(<argument><expr><name>cm</name></expr></argument>, <argument><expr><name>VER_MINORVERSION</name></expr></argument>, <argument><expr><name>minorCondition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cm</name> <operator>=</operator> <call><name>VerSetConditionMask</name><argument_list>(<argument><expr><name>cm</name></expr></argument>, <argument><expr><name>VER_SERVICEPACKMAJOR</name></expr></argument>, <argument><expr><name>spMajorCondition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cm</name> <operator>=</operator> <call><name>VerSetConditionMask</name><argument_list>(<argument><expr><name>cm</name></expr></argument>, <argument><expr><name>VER_SERVICEPACKMINOR</name></expr></argument>, <argument><expr><name>spMinorCondition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>platform</name> <operator>!=</operator> <name>PLATFORM_DONT_CARE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>cm</name> <operator>=</operator> <call><name>VerSetConditionMask</name><argument_list>(<argument><expr><name>cm</name></expr></argument>, <argument><expr><name>VER_PLATFORMID</name></expr></argument>, <argument><expr><name>VER_EQUAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>VerifyVersionInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>osver</name></expr></argument>, <argument><expr><operator>(</operator><name>VER_MAJORVERSION</name> <operator>|</operator> <name>VER_MINORVERSION</name> <operator>|</operator>

<name>VER_SERVICEPACKMAJOR</name> <operator>|</operator> <name>VER_SERVICEPACKMINOR</name><operator>)</operator></expr></argument>,

<argument><expr><name>cm</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>matched</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>matched</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>HMODULE</name></type> <name>Curl_load_library</name><parameter_list>(<parameter><decl><type><name>LPCTSTR</name></type> <name>filename</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_WINDOWS_APP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>HMODULE</name></type> <name>hModule</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LOADLIBRARYEX_FN</name></type> <name>pLoadLibraryEx</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HMODULE</name></type> <name>hKernel32</name> <init>= <expr><call><name>GetModuleHandle</name><argument_list>(<argument><expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"kernel32"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>hKernel32</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>pLoadLibraryEx</name> <operator>=</operator>

<call><name>CURLX_FUNCTION_CAST</name><argument_list>(<argument><expr><name>LOADLIBRARYEX_FN</name></expr></argument>,

<argument><expr><operator>(</operator><call><name>GetProcAddress</name><argument_list>(<argument><expr><name>hKernel32</name></expr></argument>, <argument><expr><name>LOADLIBARYEX</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>_tcspbrk</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"\\/"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>hModule</name> <operator>=</operator> <ternary><condition><expr><name>pLoadLibraryEx</name></expr> ?</condition><then>

<expr><call><name>pLoadLibraryEx</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>LOAD_WITH_ALTERED_SEARCH_PATH</name></expr></argument>)</argument_list></call></expr> </then><else>:

<expr><call><name>LoadLibrary</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name>pLoadLibraryEx</name> <operator>&amp;&amp;</operator> <call><name>GetProcAddress</name><argument_list>(<argument><expr><name>hKernel32</name></expr></argument>, <argument><expr><literal type="string">"AddDllDirectory"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>hModule</name> <operator>=</operator> <call><name>pLoadLibraryEx</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>LOAD_LIBRARY_SEARCH_SYSTEM32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<decl_stmt><decl><type><name>UINT</name></type> <name>systemdirlen</name> <init>= <expr><call><name>GetSystemDirectory</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>systemdirlen</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>filenamelen</name> <init>= <expr><call><name>_tcslen</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TCHAR</name> <modifier>*</modifier></type><name>path</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TCHAR</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>systemdirlen</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>filenamelen</name><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>path</name> <operator>&amp;&amp;</operator> <call><name>GetSystemDirectory</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>systemdirlen</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>_tcscpy</name><argument_list>(<argument><expr><name>path</name> <operator>+</operator> <call><name>_tcslen</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"\\"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_tcscpy</name><argument_list>(<argument><expr><name>path</name> <operator>+</operator> <call><name>_tcslen</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>hModule</name> <operator>=</operator> <ternary><condition><expr><name>pLoadLibraryEx</name></expr> ?</condition><then>

<expr><call><name>pLoadLibraryEx</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>LOAD_WITH_ALTERED_SEARCH_PATH</name></expr></argument>)</argument_list></call></expr> </then><else>:

<expr><call><name>LoadLibrary</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>hModule</name></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>filename</name></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</unit>
