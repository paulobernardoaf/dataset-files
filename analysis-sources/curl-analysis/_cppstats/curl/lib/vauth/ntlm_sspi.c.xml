<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\curl-analysis\_cppstats\curl\lib\vauth\ntlm_sspi.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_setup.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_WINDOWS_SSPI</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>USE_NTLM</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;curl/curl.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vauth/vauth.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"urldata.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_base64.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_ntlm_core.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"warnless.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_multibyte.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sendf.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_memory.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memdebug.h"</cpp:file></cpp:include>

<function><type><name>bool</name></type> <name>Curl_auth_is_ntlm_supported</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>PSecPkgInfo</name></type> <name>SecurityPackage</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SECURITY_STATUS</name></type> <name>status</name></decl>;</decl_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name><name>s_pSecFn</name><operator>-&gt;</operator><name>QuerySecurityPackageInfo</name></name><argument_list>(<argument><expr><operator>(</operator><name>TCHAR</name> <operator>*</operator><operator>)</operator> <call><name>TEXT</name><argument_list>(<argument><expr><name>SP_NAME_NTLM</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><operator>&amp;</operator><name>SecurityPackage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>status</name> <operator>==</operator> <name>SEC_E_OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>s_pSecFn</name><operator>-&gt;</operator><name>FreeContextBuffer</name></name><argument_list>(<argument><expr><name>SecurityPackage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><ternary><condition><expr><name>status</name> <operator>==</operator> <name>SEC_E_OK</name></expr> ?</condition><then> <expr><name>TRUE</name></expr> </then><else>: <expr><name>FALSE</name></expr></else></ternary><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><name>CURLcode</name></type> <name>Curl_auth_create_ntlm_type1_message</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>userp</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>passwdp</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>service</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>host</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>ntlmdata</name></name> <modifier>*</modifier></type><name>ntlm</name></decl></parameter>,

<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>outptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>outlen</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>PSecPkgInfo</name></type> <name>SecurityPackage</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SecBuffer</name></type> <name>type_1_buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SecBufferDesc</name></type> <name>type_1_desc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SECURITY_STATUS</name></type> <name>status</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>attrs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TimeStamp</name></type> <name>expiry</name></decl>;</decl_stmt> 

<expr_stmt><expr><call><name>Curl_auth_cleanup_ntlm</name><argument_list>(<argument><expr><name>ntlm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name><name>s_pSecFn</name><operator>-&gt;</operator><name>QuerySecurityPackageInfo</name></name><argument_list>(<argument><expr><operator>(</operator><name>TCHAR</name> <operator>*</operator><operator>)</operator> <call><name>TEXT</name><argument_list>(<argument><expr><name>SP_NAME_NTLM</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><operator>&amp;</operator><name>SecurityPackage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>status</name> <operator>!=</operator> <name>SEC_E_OK</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_NOT_BUILT_IN</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ntlm</name><operator>-&gt;</operator><name>token_max</name></name> <operator>=</operator> <name><name>SecurityPackage</name><operator>-&gt;</operator><name>cbMaxToken</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>s_pSecFn</name><operator>-&gt;</operator><name>FreeContextBuffer</name></name><argument_list>(<argument><expr><name>SecurityPackage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ntlm</name><operator>-&gt;</operator><name>output_token</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name><name>ntlm</name><operator>-&gt;</operator><name>token_max</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>ntlm</name><operator>-&gt;</operator><name>output_token</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>userp</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>userp</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name></decl>;</decl_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_create_sspi_identity</name><argument_list>(<argument><expr><name>userp</name></expr></argument>, <argument><expr><name>passwdp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ntlm</name><operator>-&gt;</operator><name>identity</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ntlm</name><operator>-&gt;</operator><name>p_identity</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>ntlm</name><operator>-&gt;</operator><name>identity</name></name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ntlm</name><operator>-&gt;</operator><name>p_identity</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>ntlm</name><operator>-&gt;</operator><name>credentials</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>CredHandle</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>ntlm</name><operator>-&gt;</operator><name>credentials</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name><name>s_pSecFn</name><operator>-&gt;</operator><name>AcquireCredentialsHandle</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>,

<argument><expr><operator>(</operator><name>TCHAR</name> <operator>*</operator><operator>)</operator> <call><name>TEXT</name><argument_list>(<argument><expr><name>SP_NAME_NTLM</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>SECPKG_CRED_OUTBOUND</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><name><name>ntlm</name><operator>-&gt;</operator><name>p_identity</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><name><name>ntlm</name><operator>-&gt;</operator><name>credentials</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>expiry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>status</name> <operator>!=</operator> <name>SEC_E_OK</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_LOGIN_DENIED</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ntlm</name><operator>-&gt;</operator><name>context</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>CtxtHandle</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>ntlm</name><operator>-&gt;</operator><name>context</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ntlm</name><operator>-&gt;</operator><name>spn</name></name> <operator>=</operator> <call><name>Curl_auth_build_spn</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>ntlm</name><operator>-&gt;</operator><name>spn</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>type_1_desc</name><operator>.</operator><name>ulVersion</name></name> <operator>=</operator> <name>SECBUFFER_VERSION</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>type_1_desc</name><operator>.</operator><name>cBuffers</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>type_1_desc</name><operator>.</operator><name>pBuffers</name></name> <operator>=</operator> <operator>&amp;</operator><name>type_1_buf</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>type_1_buf</name><operator>.</operator><name>BufferType</name></name> <operator>=</operator> <name>SECBUFFER_TOKEN</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>type_1_buf</name><operator>.</operator><name>pvBuffer</name></name> <operator>=</operator> <name><name>ntlm</name><operator>-&gt;</operator><name>output_token</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>type_1_buf</name><operator>.</operator><name>cbBuffer</name></name> <operator>=</operator> <call><name>curlx_uztoul</name><argument_list>(<argument><expr><name><name>ntlm</name><operator>-&gt;</operator><name>token_max</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name><name>s_pSecFn</name><operator>-&gt;</operator><name>InitializeSecurityContext</name></name><argument_list>(<argument><expr><name><name>ntlm</name><operator>-&gt;</operator><name>credentials</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><name><name>ntlm</name><operator>-&gt;</operator><name>spn</name></name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SECURITY_NETWORK_DREP</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name><name>ntlm</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>type_1_desc</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>attrs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>expiry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>status</name> <operator>==</operator> <name>SEC_I_COMPLETE_NEEDED</name> <operator>||</operator>

<name>status</name> <operator>==</operator> <name>SEC_I_COMPLETE_AND_CONTINUE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>s_pSecFn</name><operator>-&gt;</operator><name>CompleteAuthToken</name></name><argument_list>(<argument><expr><name><name>ntlm</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>type_1_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>(<expr><name>status</name> <operator>==</operator> <name>SEC_E_INSUFFICIENT_MEMORY</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if>

<if type="elseif">else if<condition>(<expr><name>status</name> <operator>!=</operator> <name>SEC_E_OK</name> <operator>&amp;&amp;</operator> <name>status</name> <operator>!=</operator> <name>SEC_I_CONTINUE_NEEDED</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_AUTH_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>Curl_base64_encode</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name><name>ntlm</name><operator>-&gt;</operator><name>output_token</name></name></expr></argument>,

<argument><expr><name><name>type_1_buf</name><operator>.</operator><name>cbBuffer</name></name></expr></argument>, <argument><expr><name>outptr</name></expr></argument>, <argument><expr><name>outlen</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>CURLcode</name></type> <name>Curl_auth_decode_ntlm_type2_message</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>type2msg</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>ntlmdata</name></name> <modifier>*</modifier></type><name>ntlm</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>type2</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>type2_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_VERBOSE_STRINGS</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>data</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if<condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>type2msg</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>*</operator><name>type2msg</name> <operator>!=</operator> <literal type="char">'='</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_base64_decode</name><argument_list>(<argument><expr><name>type2msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>type2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>type2_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>type2</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"NTLM handshake failure (empty type-2 message)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_BAD_CONTENT_ENCODING</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ntlm</name><operator>-&gt;</operator><name>input_token</name></name> <operator>=</operator> <name>type2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ntlm</name><operator>-&gt;</operator><name>input_token_len</name></name> <operator>=</operator> <name>type2_len</name></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>CURLcode</name></type> <name>Curl_auth_create_ntlm_type3_message</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>userp</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>passwdp</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>ntlmdata</name></name> <modifier>*</modifier></type><name>ntlm</name></decl></parameter>,

<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>outptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>outlen</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SecBuffer</name></type> <name><name>type_2_bufs</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SecBuffer</name></type> <name>type_3_buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SecBufferDesc</name></type> <name>type_2_desc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SecBufferDesc</name></type> <name>type_3_desc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SECURITY_STATUS</name></type> <name>status</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>attrs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TimeStamp</name></type> <name>expiry</name></decl>;</decl_stmt> 

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>passwdp</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>userp</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>type_2_desc</name><operator>.</operator><name>ulVersion</name></name> <operator>=</operator> <name>SECBUFFER_VERSION</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>type_2_desc</name><operator>.</operator><name>cBuffers</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>type_2_desc</name><operator>.</operator><name>pBuffers</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>type_2_bufs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>type_2_bufs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>BufferType</name> <operator>=</operator> <name>SECBUFFER_TOKEN</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>type_2_bufs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>pvBuffer</name> <operator>=</operator> <name><name>ntlm</name><operator>-&gt;</operator><name>input_token</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>type_2_bufs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>cbBuffer</name> <operator>=</operator> <call><name>curlx_uztoul</name><argument_list>(<argument><expr><name><name>ntlm</name><operator>-&gt;</operator><name>input_token_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SECPKG_ATTR_ENDPOINT_BINDINGS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name><name>ntlm</name><operator>-&gt;</operator><name>sslContext</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>SEC_CHANNEL_BINDINGS</name></type> <name>channelBindings</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SecPkgContext_Bindings</name></type> <name>pkgBindings</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>pkgBindings</name><operator>.</operator><name>Bindings</name></name> <operator>=</operator> <operator>&amp;</operator><name>channelBindings</name></expr>;</expr_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name><name>s_pSecFn</name><operator>-&gt;</operator><name>QueryContextAttributes</name></name><argument_list>(

<argument><expr><name><name>ntlm</name><operator>-&gt;</operator><name>sslContext</name></name></expr></argument>,

<argument><expr><name>SECPKG_ATTR_ENDPOINT_BINDINGS</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>pkgBindings</name></expr></argument>

)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>status</name> <operator>==</operator> <name>SEC_E_OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>type_2_desc</name><operator>.</operator><name>cBuffers</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>type_2_bufs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>BufferType</name> <operator>=</operator> <name>SECBUFFER_CHANNEL_BINDINGS</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>type_2_bufs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>cbBuffer</name> <operator>=</operator> <name><name>pkgBindings</name><operator>.</operator><name>BindingsLength</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>type_2_bufs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>pvBuffer</name> <operator>=</operator> <name><name>pkgBindings</name><operator>.</operator><name>Bindings</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>type_3_desc</name><operator>.</operator><name>ulVersion</name></name> <operator>=</operator> <name>SECBUFFER_VERSION</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>type_3_desc</name><operator>.</operator><name>cBuffers</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>type_3_desc</name><operator>.</operator><name>pBuffers</name></name> <operator>=</operator> <operator>&amp;</operator><name>type_3_buf</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>type_3_buf</name><operator>.</operator><name>BufferType</name></name> <operator>=</operator> <name>SECBUFFER_TOKEN</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>type_3_buf</name><operator>.</operator><name>pvBuffer</name></name> <operator>=</operator> <name><name>ntlm</name><operator>-&gt;</operator><name>output_token</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>type_3_buf</name><operator>.</operator><name>cbBuffer</name></name> <operator>=</operator> <call><name>curlx_uztoul</name><argument_list>(<argument><expr><name><name>ntlm</name><operator>-&gt;</operator><name>token_max</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name><name>s_pSecFn</name><operator>-&gt;</operator><name>InitializeSecurityContext</name></name><argument_list>(<argument><expr><name><name>ntlm</name><operator>-&gt;</operator><name>credentials</name></name></expr></argument>,

<argument><expr><name><name>ntlm</name><operator>-&gt;</operator><name>context</name></name></expr></argument>,

<argument><expr><name><name>ntlm</name><operator>-&gt;</operator><name>spn</name></name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SECURITY_NETWORK_DREP</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>type_2_desc</name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>ntlm</name><operator>-&gt;</operator><name>context</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>type_3_desc</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>attrs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>expiry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>status</name> <operator>!=</operator> <name>SEC_E_OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"NTLM handshake failure (type-3 message): Status=%x\n"</literal></expr></argument>,

<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>status</name> <operator>==</operator> <name>SEC_E_INSUFFICIENT_MEMORY</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>CURLE_AUTH_ERROR</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_base64_encode</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name><name>ntlm</name><operator>-&gt;</operator><name>output_token</name></name></expr></argument>,

<argument><expr><name><name>type_3_buf</name><operator>.</operator><name>cbBuffer</name></name></expr></argument>, <argument><expr><name>outptr</name></expr></argument>, <argument><expr><name>outlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_auth_cleanup_ntlm</name><argument_list>(<argument><expr><name>ntlm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>Curl_auth_cleanup_ntlm</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ntlmdata</name></name> <modifier>*</modifier></type><name>ntlm</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>ntlm</name><operator>-&gt;</operator><name>context</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>s_pSecFn</name><operator>-&gt;</operator><name>DeleteSecurityContext</name></name><argument_list>(<argument><expr><name><name>ntlm</name><operator>-&gt;</operator><name>context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>ntlm</name><operator>-&gt;</operator><name>context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ntlm</name><operator>-&gt;</operator><name>context</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ntlm</name><operator>-&gt;</operator><name>credentials</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>s_pSecFn</name><operator>-&gt;</operator><name>FreeCredentialsHandle</name></name><argument_list>(<argument><expr><name><name>ntlm</name><operator>-&gt;</operator><name>credentials</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>ntlm</name><operator>-&gt;</operator><name>credentials</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ntlm</name><operator>-&gt;</operator><name>credentials</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>Curl_sspi_free_identity</name><argument_list>(<argument><expr><name><name>ntlm</name><operator>-&gt;</operator><name>p_identity</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ntlm</name><operator>-&gt;</operator><name>p_identity</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>ntlm</name><operator>-&gt;</operator><name>input_token</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>ntlm</name><operator>-&gt;</operator><name>output_token</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ntlm</name><operator>-&gt;</operator><name>token_max</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>ntlm</name><operator>-&gt;</operator><name>spn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</unit>
