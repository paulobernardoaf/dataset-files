<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\curl-analysis\_cppstats\curl\lib\vauth\krb5_sspi.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_setup.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_WINDOWS_SSPI</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>USE_KERBEROS5</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;curl/curl.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vauth/vauth.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"urldata.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_base64.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"warnless.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_multibyte.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sendf.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_memory.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memdebug.h"</cpp:file></cpp:include>

<function><type><name>bool</name></type> <name>Curl_auth_is_gssapi_supported</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>PSecPkgInfo</name></type> <name>SecurityPackage</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SECURITY_STATUS</name></type> <name>status</name></decl>;</decl_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name><name>s_pSecFn</name><operator>-&gt;</operator><name>QuerySecurityPackageInfo</name></name><argument_list>(<argument><expr><operator>(</operator><name>TCHAR</name> <operator>*</operator><operator>)</operator>

<call><name>TEXT</name><argument_list>(<argument><expr><name>SP_NAME_KERBEROS</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><operator>&amp;</operator><name>SecurityPackage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>status</name> <operator>==</operator> <name>SEC_E_OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>s_pSecFn</name><operator>-&gt;</operator><name>FreeContextBuffer</name></name><argument_list>(<argument><expr><name>SecurityPackage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><ternary><condition><expr><name>status</name> <operator>==</operator> <name>SEC_E_OK</name></expr> ?</condition><then> <expr><name>TRUE</name></expr> </then><else>: <expr><name>FALSE</name></expr></else></ternary><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><name>CURLcode</name></type> <name>Curl_auth_create_gssapi_user_message</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>userp</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>passwdp</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>service</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>host</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>mutual_auth</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>chlg64</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>kerberos5data</name></name> <modifier>*</modifier></type><name>krb5</name></decl></parameter>,

<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>outptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>outlen</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>chlglen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>chlg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CtxtHandle</name></type> <name>context</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PSecPkgInfo</name></type> <name>SecurityPackage</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SecBuffer</name></type> <name>chlg_buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SecBuffer</name></type> <name>resp_buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SecBufferDesc</name></type> <name>chlg_desc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SecBufferDesc</name></type> <name>resp_desc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SECURITY_STATUS</name></type> <name>status</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>attrs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TimeStamp</name></type> <name>expiry</name></decl>;</decl_stmt> 

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>krb5</name><operator>-&gt;</operator><name>spn</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>krb5</name><operator>-&gt;</operator><name>spn</name></name> <operator>=</operator> <call><name>Curl_auth_build_spn</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>krb5</name><operator>-&gt;</operator><name>spn</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>krb5</name><operator>-&gt;</operator><name>output_token</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name><name>s_pSecFn</name><operator>-&gt;</operator><name>QuerySecurityPackageInfo</name></name><argument_list>(<argument><expr><operator>(</operator><name>TCHAR</name> <operator>*</operator><operator>)</operator>

<call><name>TEXT</name><argument_list>(<argument><expr><name>SP_NAME_KERBEROS</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><operator>&amp;</operator><name>SecurityPackage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>status</name> <operator>!=</operator> <name>SEC_E_OK</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>CURLE_NOT_BUILT_IN</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>krb5</name><operator>-&gt;</operator><name>token_max</name></name> <operator>=</operator> <name><name>SecurityPackage</name><operator>-&gt;</operator><name>cbMaxToken</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>s_pSecFn</name><operator>-&gt;</operator><name>FreeContextBuffer</name></name><argument_list>(<argument><expr><name>SecurityPackage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>krb5</name><operator>-&gt;</operator><name>output_token</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name><name>krb5</name><operator>-&gt;</operator><name>token_max</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>krb5</name><operator>-&gt;</operator><name>output_token</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>krb5</name><operator>-&gt;</operator><name>credentials</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>userp</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>userp</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_create_sspi_identity</name><argument_list>(<argument><expr><name>userp</name></expr></argument>, <argument><expr><name>passwdp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>krb5</name><operator>-&gt;</operator><name>identity</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>krb5</name><operator>-&gt;</operator><name>p_identity</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>krb5</name><operator>-&gt;</operator><name>identity</name></name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>krb5</name><operator>-&gt;</operator><name>p_identity</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>krb5</name><operator>-&gt;</operator><name>credentials</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>CredHandle</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>krb5</name><operator>-&gt;</operator><name>credentials</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name><name>s_pSecFn</name><operator>-&gt;</operator><name>AcquireCredentialsHandle</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>,

<argument><expr><operator>(</operator><name>TCHAR</name> <operator>*</operator><operator>)</operator>

<call><name>TEXT</name><argument_list>(<argument><expr><name>SP_NAME_KERBEROS</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>SECPKG_CRED_OUTBOUND</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><name><name>krb5</name><operator>-&gt;</operator><name>p_identity</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><name><name>krb5</name><operator>-&gt;</operator><name>credentials</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>expiry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>status</name> <operator>!=</operator> <name>SEC_E_OK</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_LOGIN_DENIED</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>krb5</name><operator>-&gt;</operator><name>context</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>CtxtHandle</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>krb5</name><operator>-&gt;</operator><name>context</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>chlg64</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>chlg64</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>*</operator><name>chlg64</name> <operator>!=</operator> <literal type="char">'='</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_base64_decode</name><argument_list>(<argument><expr><name>chlg64</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>chlg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>chlglen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>chlg</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"GSSAPI handshake failure (empty challenge message)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_BAD_CONTENT_ENCODING</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>chlg_desc</name><operator>.</operator><name>ulVersion</name></name> <operator>=</operator> <name>SECBUFFER_VERSION</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>chlg_desc</name><operator>.</operator><name>cBuffers</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>chlg_desc</name><operator>.</operator><name>pBuffers</name></name> <operator>=</operator> <operator>&amp;</operator><name>chlg_buf</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>chlg_buf</name><operator>.</operator><name>BufferType</name></name> <operator>=</operator> <name>SECBUFFER_TOKEN</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>chlg_buf</name><operator>.</operator><name>pvBuffer</name></name> <operator>=</operator> <name>chlg</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>chlg_buf</name><operator>.</operator><name>cbBuffer</name></name> <operator>=</operator> <call><name>curlx_uztoul</name><argument_list>(<argument><expr><name>chlglen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>resp_desc</name><operator>.</operator><name>ulVersion</name></name> <operator>=</operator> <name>SECBUFFER_VERSION</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>resp_desc</name><operator>.</operator><name>cBuffers</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>resp_desc</name><operator>.</operator><name>pBuffers</name></name> <operator>=</operator> <operator>&amp;</operator><name>resp_buf</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>resp_buf</name><operator>.</operator><name>BufferType</name></name> <operator>=</operator> <name>SECBUFFER_TOKEN</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>resp_buf</name><operator>.</operator><name>pvBuffer</name></name> <operator>=</operator> <name><name>krb5</name><operator>-&gt;</operator><name>output_token</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>resp_buf</name><operator>.</operator><name>cbBuffer</name></name> <operator>=</operator> <call><name>curlx_uztoul</name><argument_list>(<argument><expr><name><name>krb5</name><operator>-&gt;</operator><name>token_max</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name><name>s_pSecFn</name><operator>-&gt;</operator><name>InitializeSecurityContext</name></name><argument_list>(<argument><expr><name><name>krb5</name><operator>-&gt;</operator><name>credentials</name></name></expr></argument>,

<argument><expr><ternary><condition><expr><name>chlg</name></expr> ?</condition><then> <expr><name><name>krb5</name><operator>-&gt;</operator><name>context</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>,

<argument><expr><name><name>krb5</name><operator>-&gt;</operator><name>spn</name></name></expr></argument>,

<argument><expr><operator>(</operator><ternary><condition><expr><name>mutual_auth</name></expr> ?</condition><then>

<expr><name>ISC_REQ_MUTUAL_AUTH</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SECURITY_NATIVE_DREP</name></expr></argument>,

<argument><expr><ternary><condition><expr><name>chlg</name></expr> ?</condition><then> <expr><operator>&amp;</operator><name>chlg_desc</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><operator>&amp;</operator><name>context</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>resp_desc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>attrs</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>expiry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>chlg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>status</name> <operator>==</operator> <name>SEC_E_INSUFFICIENT_MEMORY</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>status</name> <operator>!=</operator> <name>SEC_E_OK</name> <operator>&amp;&amp;</operator> <name>status</name> <operator>!=</operator> <name>SEC_I_CONTINUE_NEEDED</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>CURLE_AUTH_ERROR</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>context</name></expr></argument>, <argument><expr><name><name>krb5</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>s_pSecFn</name><operator>-&gt;</operator><name>DeleteSecurityContext</name></name><argument_list>(<argument><expr><name><name>krb5</name><operator>-&gt;</operator><name>context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>krb5</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>context</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>resp_buf</name><operator>.</operator><name>cbBuffer</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_base64_encode</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name><name>resp_buf</name><operator>.</operator><name>pvBuffer</name></name></expr></argument>,

<argument><expr><name><name>resp_buf</name><operator>.</operator><name>cbBuffer</name></name></expr></argument>, <argument><expr><name>outptr</name></expr></argument>, <argument><expr><name>outlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name>mutual_auth</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>outptr</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>*</operator><name>outptr</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_OUT_OF_MEMORY</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>CURLcode</name></type> <name>Curl_auth_create_gssapi_security_message</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>chlg64</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>kerberos5data</name></name> <modifier>*</modifier></type><name>krb5</name></decl></parameter>,

<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>outptr</name></decl></parameter>,

<parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>outlen</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>chlglen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>messagelen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>appdatalen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>chlg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>trailer</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>message</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>padding</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>appdata</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SecBuffer</name></type> <name><name>input_buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SecBuffer</name></type> <name><name>wrap_buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SecBufferDesc</name></type> <name>input_desc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SecBufferDesc</name></type> <name>wrap_desc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>indata</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>outdata</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>qop</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>sec_layer</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>max_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SecPkgContext_Sizes</name></type> <name>sizes</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SecPkgCredentials_Names</name></type> <name>names</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SECURITY_STATUS</name></type> <name>status</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>user_name</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>chlg64</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>*</operator><name>chlg64</name> <operator>!=</operator> <literal type="char">'='</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_base64_decode</name><argument_list>(<argument><expr><name>chlg64</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>chlg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>chlglen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>chlg</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"GSSAPI handshake failure (empty security message)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_BAD_CONTENT_ENCODING</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name><name>s_pSecFn</name><operator>-&gt;</operator><name>QueryContextAttributes</name></name><argument_list>(<argument><expr><name><name>krb5</name><operator>-&gt;</operator><name>context</name></name></expr></argument>,

<argument><expr><name>SECPKG_ATTR_SIZES</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>sizes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>status</name> <operator>!=</operator> <name>SEC_E_OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>chlg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>status</name> <operator>==</operator> <name>SEC_E_INSUFFICIENT_MEMORY</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>CURLE_AUTH_ERROR</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name><name>s_pSecFn</name><operator>-&gt;</operator><name>QueryCredentialsAttributes</name></name><argument_list>(<argument><expr><name><name>krb5</name><operator>-&gt;</operator><name>credentials</name></name></expr></argument>,

<argument><expr><name>SECPKG_CRED_ATTR_NAMES</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>names</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>status</name> <operator>!=</operator> <name>SEC_E_OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>chlg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>status</name> <operator>==</operator> <name>SEC_E_INSUFFICIENT_MEMORY</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>CURLE_AUTH_ERROR</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>input_desc</name><operator>.</operator><name>ulVersion</name></name> <operator>=</operator> <name>SECBUFFER_VERSION</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>input_desc</name><operator>.</operator><name>cBuffers</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>input_desc</name><operator>.</operator><name>pBuffers</name></name> <operator>=</operator> <name>input_buf</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>input_buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>BufferType</name> <operator>=</operator> <name>SECBUFFER_STREAM</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>input_buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>pvBuffer</name> <operator>=</operator> <name>chlg</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>input_buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>cbBuffer</name> <operator>=</operator> <call><name>curlx_uztoul</name><argument_list>(<argument><expr><name>chlglen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>input_buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>BufferType</name> <operator>=</operator> <name>SECBUFFER_DATA</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>input_buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>pvBuffer</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>input_buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>cbBuffer</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name><name>s_pSecFn</name><operator>-&gt;</operator><name>DecryptMessage</name></name><argument_list>(<argument><expr><name><name>krb5</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>input_desc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>qop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>status</name> <operator>!=</operator> <name>SEC_E_OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"GSSAPI handshake failure (empty security message)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>chlg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_BAD_CONTENT_ENCODING</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>input_buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>cbBuffer</name> <operator>!=</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"GSSAPI handshake failure (invalid security data)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>chlg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_BAD_CONTENT_ENCODING</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>indata</name></expr></argument>, <argument><expr><name><name>input_buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>pvBuffer</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>s_pSecFn</name><operator>-&gt;</operator><name>FreeContextBuffer</name></name><argument_list>(<argument><expr><name><name>input_buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>pvBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>chlg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sec_layer</name> <operator>=</operator> <name>indata</name> <operator>&amp;</operator> <literal type="number">0x000000FF</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><name>sec_layer</name> <operator>&amp;</operator> <name>KERB_WRAP_NO_ENCRYPT</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"GSSAPI handshake failure (invalid security layer)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_BAD_CONTENT_ENCODING</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>max_size</name> <operator>=</operator> <call><name>ntohl</name><argument_list>(<argument><expr><name>indata</name> <operator>&amp;</operator> <literal type="number">0xFFFFFF00</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>max_size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>max_size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>trailer</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name><name>sizes</name><operator>.</operator><name>cbSecurityTrailer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>trailer</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>user_name</name> <operator>=</operator> <call><name>Curl_convert_tchar_to_UTF8</name><argument_list>(<argument><expr><name><name>names</name><operator>.</operator><name>sUserName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>user_name</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>trailer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>messagelen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>outdata</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>user_name</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>message</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>messagelen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>message</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>trailer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_unicodefree</name><argument_list>(<argument><expr><name>user_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>outdata</name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name>max_size</name></expr></argument>)</argument_list></call> <operator>|</operator> <name>sec_layer</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>outdata</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>outdata</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>message</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>outdata</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>user_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_unicodefree</name><argument_list>(<argument><expr><name>user_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>padding</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name><name>sizes</name><operator>.</operator><name>cbBlockSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>padding</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>trailer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>wrap_desc</name><operator>.</operator><name>ulVersion</name></name> <operator>=</operator> <name>SECBUFFER_VERSION</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>wrap_desc</name><operator>.</operator><name>cBuffers</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>wrap_desc</name><operator>.</operator><name>pBuffers</name></name> <operator>=</operator> <name>wrap_buf</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>wrap_buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>BufferType</name> <operator>=</operator> <name>SECBUFFER_TOKEN</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>wrap_buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>pvBuffer</name> <operator>=</operator> <name>trailer</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>wrap_buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>cbBuffer</name> <operator>=</operator> <name><name>sizes</name><operator>.</operator><name>cbSecurityTrailer</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>wrap_buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>BufferType</name> <operator>=</operator> <name>SECBUFFER_DATA</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>wrap_buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>pvBuffer</name> <operator>=</operator> <name>message</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>wrap_buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>cbBuffer</name> <operator>=</operator> <call><name>curlx_uztoul</name><argument_list>(<argument><expr><name>messagelen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>wrap_buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>BufferType</name> <operator>=</operator> <name>SECBUFFER_PADDING</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>wrap_buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>pvBuffer</name> <operator>=</operator> <name>padding</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>wrap_buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>cbBuffer</name> <operator>=</operator> <name><name>sizes</name><operator>.</operator><name>cbBlockSize</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name><name>s_pSecFn</name><operator>-&gt;</operator><name>EncryptMessage</name></name><argument_list>(<argument><expr><name><name>krb5</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><name>KERB_WRAP_NO_ENCRYPT</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>wrap_desc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>status</name> <operator>!=</operator> <name>SEC_E_OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>padding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>trailer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>status</name> <operator>==</operator> <name>SEC_E_INSUFFICIENT_MEMORY</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>CURLE_AUTH_ERROR</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>appdatalen</name> <operator>=</operator> <name><name>wrap_buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>cbBuffer</name> <operator>+</operator> <name><name>wrap_buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>cbBuffer</name> <operator>+</operator>

<name><name>wrap_buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>cbBuffer</name></expr>;</expr_stmt>

<expr_stmt><expr><name>appdata</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>appdatalen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>appdata</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>padding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>trailer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>appdata</name></expr></argument>, <argument><expr><name><name>wrap_buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>pvBuffer</name></expr></argument>, <argument><expr><name><name>wrap_buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>cbBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>+=</operator> <name><name>wrap_buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>cbBuffer</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>appdata</name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><name><name>wrap_buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>pvBuffer</name></expr></argument>, <argument><expr><name><name>wrap_buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>cbBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>+=</operator> <name><name>wrap_buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>cbBuffer</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>appdata</name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><name><name>wrap_buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>pvBuffer</name></expr></argument>, <argument><expr><name><name>wrap_buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>cbBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_base64_encode</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>appdata</name></expr></argument>, <argument><expr><name>appdatalen</name></expr></argument>, <argument><expr><name>outptr</name></expr></argument>,

<argument><expr><name>outlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>appdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>padding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>trailer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>Curl_auth_cleanup_gssapi</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>kerberos5data</name></name> <modifier>*</modifier></type><name>krb5</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>krb5</name><operator>-&gt;</operator><name>context</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>s_pSecFn</name><operator>-&gt;</operator><name>DeleteSecurityContext</name></name><argument_list>(<argument><expr><name><name>krb5</name><operator>-&gt;</operator><name>context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>krb5</name><operator>-&gt;</operator><name>context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>krb5</name><operator>-&gt;</operator><name>context</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>krb5</name><operator>-&gt;</operator><name>credentials</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>s_pSecFn</name><operator>-&gt;</operator><name>FreeCredentialsHandle</name></name><argument_list>(<argument><expr><name><name>krb5</name><operator>-&gt;</operator><name>credentials</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>krb5</name><operator>-&gt;</operator><name>credentials</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>krb5</name><operator>-&gt;</operator><name>credentials</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>Curl_sspi_free_identity</name><argument_list>(<argument><expr><name><name>krb5</name><operator>-&gt;</operator><name>p_identity</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>krb5</name><operator>-&gt;</operator><name>p_identity</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>krb5</name><operator>-&gt;</operator><name>spn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>krb5</name><operator>-&gt;</operator><name>output_token</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>krb5</name><operator>-&gt;</operator><name>token_max</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</unit>
