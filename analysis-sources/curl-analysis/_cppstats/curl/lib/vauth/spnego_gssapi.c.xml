<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\curl-analysis\_cppstats\curl\lib\vauth\spnego_gssapi.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_setup.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_GSSAPI</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>USE_SPNEGO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;curl/curl.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vauth/vauth.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"urldata.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_base64.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_gssapi.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"warnless.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_multibyte.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sendf.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_memory.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memdebug.h"</cpp:file></cpp:include>

<function><type><name>bool</name></type> <name>Curl_auth_is_spnego_supported</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>TRUE</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>CURLcode</name></type> <name>Curl_auth_decode_spnego_message</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>user</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>password</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>service</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>host</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>chlg64</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>negotiatedata</name></name> <modifier>*</modifier></type><name>nego</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>chlglen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>chlg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>OM_uint32</name></type> <name>major_status</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>OM_uint32</name></type> <name>minor_status</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>OM_uint32</name></type> <name>unused_status</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>gss_buffer_desc</name></type> <name>spn_token</name> <init>= <expr><name>GSS_C_EMPTY_BUFFER</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>gss_buffer_desc</name></type> <name>input_token</name> <init>= <expr><name>GSS_C_EMPTY_BUFFER</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>gss_buffer_desc</name></type> <name>output_token</name> <init>= <expr><name>GSS_C_EMPTY_BUFFER</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>user</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>password</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>nego</name><operator>-&gt;</operator><name>context</name></name> <operator>&amp;&amp;</operator> <name><name>nego</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>GSS_S_COMPLETE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>Curl_auth_cleanup_spnego</name><argument_list>(<argument><expr><name>nego</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_LOGIN_DENIED</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>nego</name><operator>-&gt;</operator><name>spn</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>spn</name> <init>= <expr><call><name>Curl_auth_build_spn</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>host</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>spn</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>spn_token</name><operator>.</operator><name>value</name></name> <operator>=</operator> <name>spn</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>spn_token</name><operator>.</operator><name>length</name></name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>spn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>major_status</name> <operator>=</operator> <call><name>gss_import_name</name><argument_list>(<argument><expr><operator>&amp;</operator><name>minor_status</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>spn_token</name></expr></argument>,

<argument><expr><name>GSS_C_NT_HOSTBASED_SERVICE</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>nego</name><operator>-&gt;</operator><name>spn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>GSS_ERROR</name><argument_list>(<argument><expr><name>major_status</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>Curl_gss_log_error</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"gss_import_name() failed: "</literal></expr></argument>,

<argument><expr><name>major_status</name></expr></argument>, <argument><expr><name>minor_status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>spn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_AUTH_ERROR</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>spn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>chlg64</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>chlg64</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>*</operator><name>chlg64</name> <operator>!=</operator> <literal type="char">'='</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_base64_decode</name><argument_list>(<argument><expr><name>chlg64</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>chlg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>chlglen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>chlg</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"SPNEGO handshake failure (empty challenge message)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_BAD_CONTENT_ENCODING</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>input_token</name><operator>.</operator><name>value</name></name> <operator>=</operator> <name>chlg</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>input_token</name><operator>.</operator><name>length</name></name> <operator>=</operator> <name>chlglen</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>major_status</name> <operator>=</operator> <call><name>Curl_gss_init_sec_context</name><argument_list>(<argument><expr><name>data</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>minor_status</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>nego</name><operator>-&gt;</operator><name>context</name></name></expr></argument>,

<argument><expr><name><name>nego</name><operator>-&gt;</operator><name>spn</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>Curl_spnego_mech_oid</name></expr></argument>,

<argument><expr><name>GSS_C_NO_CHANNEL_BINDINGS</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>input_token</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>output_token</name></expr></argument>,

<argument><expr><name>TRUE</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>input_token</name><operator>.</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>nego</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>major_status</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>GSS_ERROR</name><argument_list>(<argument><expr><name>major_status</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>output_token</name><operator>.</operator><name>value</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gss_release_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>unused_status</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>output_token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>Curl_gss_log_error</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"gss_init_sec_context() failed: "</literal></expr></argument>,

<argument><expr><name>major_status</name></expr></argument>, <argument><expr><name>minor_status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_AUTH_ERROR</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>output_token</name><operator>.</operator><name>value</name></name> <operator>||</operator> <operator>!</operator><name><name>output_token</name><operator>.</operator><name>length</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>output_token</name><operator>.</operator><name>value</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gss_release_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>unused_status</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>output_token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>CURLE_AUTH_ERROR</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>nego</name><operator>-&gt;</operator><name>output_token</name><operator>.</operator><name>length</name></name> <operator>&amp;&amp;</operator> <name><name>nego</name><operator>-&gt;</operator><name>output_token</name><operator>.</operator><name>value</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gss_release_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>unused_status</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>nego</name><operator>-&gt;</operator><name>output_token</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>nego</name><operator>-&gt;</operator><name>output_token</name></name> <operator>=</operator> <name>output_token</name></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>CURLcode</name></type> <name>Curl_auth_create_spnego_message</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>negotiatedata</name></name> <modifier>*</modifier></type><name>nego</name></decl></parameter>,

<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>outptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>outlen</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>OM_uint32</name></type> <name>minor_status</name></decl>;</decl_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_base64_encode</name><argument_list>(<argument><expr><name>data</name></expr></argument>,

<argument><expr><name><name>nego</name><operator>-&gt;</operator><name>output_token</name><operator>.</operator><name>value</name></name></expr></argument>,

<argument><expr><name><name>nego</name><operator>-&gt;</operator><name>output_token</name><operator>.</operator><name>length</name></name></expr></argument>,

<argument><expr><name>outptr</name></expr></argument>, <argument><expr><name>outlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>gss_release_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>minor_status</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>nego</name><operator>-&gt;</operator><name>output_token</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>nego</name><operator>-&gt;</operator><name>output_token</name><operator>.</operator><name>value</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>nego</name><operator>-&gt;</operator><name>output_token</name><operator>.</operator><name>length</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>*</operator><name>outptr</name> <operator>||</operator> <operator>!</operator><operator>*</operator><name>outlen</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>gss_release_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>minor_status</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>nego</name><operator>-&gt;</operator><name>output_token</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>nego</name><operator>-&gt;</operator><name>output_token</name><operator>.</operator><name>value</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>nego</name><operator>-&gt;</operator><name>output_token</name><operator>.</operator><name>length</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>CURLE_REMOTE_ACCESS_DENIED</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>Curl_auth_cleanup_spnego</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>negotiatedata</name></name> <modifier>*</modifier></type><name>nego</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>OM_uint32</name></type> <name>minor_status</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>nego</name><operator>-&gt;</operator><name>context</name></name> <operator>!=</operator> <name>GSS_C_NO_CONTEXT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>gss_delete_sec_context</name><argument_list>(<argument><expr><operator>&amp;</operator><name>minor_status</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>nego</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><name>GSS_C_NO_BUFFER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>nego</name><operator>-&gt;</operator><name>context</name></name> <operator>=</operator> <name>GSS_C_NO_CONTEXT</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>nego</name><operator>-&gt;</operator><name>output_token</name><operator>.</operator><name>value</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>gss_release_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>minor_status</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>nego</name><operator>-&gt;</operator><name>output_token</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>nego</name><operator>-&gt;</operator><name>output_token</name><operator>.</operator><name>value</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>nego</name><operator>-&gt;</operator><name>output_token</name><operator>.</operator><name>length</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>nego</name><operator>-&gt;</operator><name>spn</name></name> <operator>!=</operator> <name>GSS_C_NO_NAME</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>gss_release_name</name><argument_list>(<argument><expr><operator>&amp;</operator><name>minor_status</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>nego</name><operator>-&gt;</operator><name>spn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>nego</name><operator>-&gt;</operator><name>spn</name></name> <operator>=</operator> <name>GSS_C_NO_NAME</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>nego</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>nego</name><operator>-&gt;</operator><name>noauthpersist</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>nego</name><operator>-&gt;</operator><name>havenoauthpersist</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>nego</name><operator>-&gt;</operator><name>havenegdata</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>nego</name><operator>-&gt;</operator><name>havemultiplerequests</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</unit>
