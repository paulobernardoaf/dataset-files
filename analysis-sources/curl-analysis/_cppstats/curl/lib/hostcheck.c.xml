<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\curl-analysis\_cppstats\curl\lib\hostcheck.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_setup.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_OPENSSL</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>USE_GSKIT</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>USE_SCHANNEL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_NETINET_IN_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet/in.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_NETINET_IN6_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet/in6.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hostcheck.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"strcase.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"inet_pton.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_memory.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memdebug.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>int</name></type> <name>hostmatch</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>hostname</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>pattern</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pattern_label_end</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pattern_wildcard</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>hostname_label_end</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>wildcard_enabled</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>prefixlen</name></decl>, <decl><type ref="prev"/><name>suffixlen</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>in_addr</name></name></type> <name>ignored</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_IPV6</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in6</name></name></type> <name>si6</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>hostname</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>hostname</name><index>[<expr><name>len</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>==</operator><literal type="char">'.'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>hostname</name><index>[<expr><name>len</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>pattern</name><index>[<expr><name>len</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>==</operator><literal type="char">'.'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>pattern</name><index>[<expr><name>len</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>pattern_wildcard</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>, <argument><expr><literal type="char">'*'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>pattern_wildcard</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><ternary><condition><expr><call><name>strcasecompare</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>, <argument><expr><name>hostname</name></expr></argument>)</argument_list></call></expr> ?</condition><then>

<expr><name>CURL_HOST_MATCH</name></expr> </then><else>: <expr><name>CURL_HOST_NOMATCH</name></expr></else></ternary></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>Curl_inet_pton</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><name>hostname</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ignored</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURL_HOST_NOMATCH</name></expr>;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_IPV6</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><call><name>Curl_inet_pton</name><argument_list>(<argument><expr><name>AF_INET6</name></expr></argument>, <argument><expr><name>hostname</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>si6</name><operator>.</operator><name>sin6_addr</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURL_HOST_NOMATCH</name></expr>;</return></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>wildcard_enabled</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>pattern_label_end</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>pattern_label_end</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>pattern_label_end</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name> <operator>||</operator>

<name>pattern_wildcard</name> <operator>&gt;</operator> <name>pattern_label_end</name> <operator>||</operator>

<call><name>strncasecompare</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>, <argument><expr><literal type="string">"xn--"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>wildcard_enabled</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>wildcard_enabled</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><ternary><condition><expr><call><name>strcasecompare</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>, <argument><expr><name>hostname</name></expr></argument>)</argument_list></call></expr> ?</condition><then>

<expr><name>CURL_HOST_MATCH</name></expr> </then><else>: <expr><name>CURL_HOST_NOMATCH</name></expr></else></ternary></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>hostname_label_end</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>hostname</name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>hostname_label_end</name> <operator>==</operator> <name>NULL</name> <operator>||</operator>

<operator>!</operator><call><name>strcasecompare</name><argument_list>(<argument><expr><name>pattern_label_end</name></expr></argument>, <argument><expr><name>hostname_label_end</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURL_HOST_NOMATCH</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>hostname_label_end</name> <operator>-</operator> <name>hostname</name> <operator>&lt;</operator> <name>pattern_label_end</name> <operator>-</operator> <name>pattern</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURL_HOST_NOMATCH</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>prefixlen</name> <operator>=</operator> <name>pattern_wildcard</name> <operator>-</operator> <name>pattern</name></expr>;</expr_stmt>

<expr_stmt><expr><name>suffixlen</name> <operator>=</operator> <name>pattern_label_end</name> <operator>-</operator> <operator>(</operator><name>pattern_wildcard</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<return>return <expr><ternary><condition><expr><call><name>strncasecompare</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>, <argument><expr><name>hostname</name></expr></argument>, <argument><expr><name>prefixlen</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<call><name>strncasecompare</name><argument_list>(<argument><expr><name>pattern_wildcard</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>hostname_label_end</name> <operator>-</operator> <name>suffixlen</name></expr></argument>,

<argument><expr><name>suffixlen</name></expr></argument>)</argument_list></call></expr> ?</condition><then>

<expr><name>CURL_HOST_MATCH</name></expr> </then><else>: <expr><name>CURL_HOST_NOMATCH</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>Curl_cert_hostcheck</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>match_pattern</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>hostname</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>match_pattern</name> <operator>||</operator> <operator>!</operator><operator>*</operator><name>match_pattern</name> <operator>||</operator>

<operator>!</operator><name>hostname</name> <operator>||</operator> <operator>!</operator><operator>*</operator><name>hostname</name></expr>)</condition><block type="pseudo"><block_content> 

<empty_stmt>;</empty_stmt></block_content></block></if>

<else>else <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>matchp</name> <init>= <expr><call><name>strdup</name><argument_list>(<argument><expr><name>match_pattern</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>matchp</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>hostp</name> <init>= <expr><call><name>strdup</name><argument_list>(<argument><expr><name>hostname</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>hostp</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>hostmatch</name><argument_list>(<argument><expr><name>hostp</name></expr></argument>, <argument><expr><name>matchp</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CURL_HOST_MATCH</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>hostp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>matchp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</unit>
