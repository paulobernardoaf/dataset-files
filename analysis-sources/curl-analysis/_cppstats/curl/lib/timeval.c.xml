<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\curl-analysis\_cppstats\curl\lib\timeval.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"timeval.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MSDOS</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><specifier>extern</specifier> <name>LARGE_INTEGER</name></type> <name>Curl_freq</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>bool</name></type> <name>Curl_isVistaOrGreater</name></decl>;</decl_stmt>

<function><type><name><name>struct</name> <name>curltime</name></name></type> <name>Curl_now</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>curltime</name></name></type> <name>now</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>Curl_isVistaOrGreater</name></expr>)</condition> <block>{<block_content> 

<decl_stmt><decl><type><name>LARGE_INTEGER</name></type> <name>count</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>QueryPerformanceCounter</name><argument_list>(<argument><expr><operator>&amp;</operator><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>now</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <operator>(</operator><name>time_t</name><operator>)</operator><operator>(</operator><name><name>count</name><operator>.</operator><name>QuadPart</name></name> <operator>/</operator> <name><name>Curl_freq</name><operator>.</operator><name>QuadPart</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>now</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>count</name><operator>.</operator><name>QuadPart</name></name> <operator>%</operator> <name><name>Curl_freq</name><operator>.</operator><name>QuadPart</name></name><operator>)</operator> <operator>*</operator> <literal type="number">1000000</literal> <operator>/</operator>

<name><name>Curl_freq</name><operator>.</operator><name>QuadPart</name></name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name><name>(</name><name>push</name><name>)</name></cpp:pragma>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name><name>(</name><name>disable</name><name>:</name><name>28159</name><name>)</name></cpp:pragma>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>DWORD</name></type> <name>milliseconds</name> <init>= <expr><call><name>GetTickCount</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name><name>(</name><name>pop</name><name>)</name></cpp:pragma>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>now</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <name>milliseconds</name> <operator>/</operator> <literal type="number">1000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>now</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <operator>(</operator><name>milliseconds</name> <operator>%</operator> <literal type="number">1000</literal><operator>)</operator> <operator>*</operator> <literal type="number">1000</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>now</name></expr>;</return>

</block_content>}</block></function>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CLOCK_GETTIME_MONOTONIC</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<function><type><name><name>struct</name> <name>curltime</name></name></type> <name>Curl_now</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_GETTIMEOFDAY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>now</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name><name>struct</name> <name>curltime</name></name></type> <name>cnow</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>timespec</name></name></type> <name>tsnow</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>HAVE_BUILTIN_AVAILABLE</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>

<decl_stmt><decl><type><name>bool</name></type> <name>have_clock_gettime</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><call><name>__builtin_available</name><argument_list>(<argument><expr><name>macOS</name> <literal type="number">10.12</literal></expr></argument>, <argument><expr><name>iOS</name> <literal type="number">10</literal></expr></argument>, <argument><expr><name>tvOS</name> <literal type="number">10</literal></expr></argument>, <argument><expr><name>watchOS</name> <literal type="number">3</literal></expr></argument>, <argument><expr><operator>*</operator></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>have_clock_gettime</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if<condition>(

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>HAVE_BUILTIN_AVAILABLE</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>

<expr><name>have_clock_gettime</name> <operator>&amp;&amp;</operator>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<operator>(</operator><literal type="number">0</literal> <operator>==</operator> <call><name>clock_gettime</name><argument_list>(<argument><expr><name>CLOCK_MONOTONIC</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tsnow</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>cnow</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <name><name>tsnow</name><operator>.</operator><name>tv_sec</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cnow</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><operator>(</operator><name><name>tsnow</name><operator>.</operator><name>tv_nsec</name></name> <operator>/</operator> <literal type="number">1000</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_GETTIMEOFDAY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<else>else <block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>gettimeofday</name><argument_list>(<argument><expr><operator>&amp;</operator><name>now</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cnow</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <name><name>now</name><operator>.</operator><name>tv_sec</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cnow</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name><name>now</name><operator>.</operator><name>tv_usec</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<if_stmt><else>else <block>{<block_content>

<expr_stmt><expr><name><name>cnow</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cnow</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>cnow</name></expr>;</return>

</block_content>}</block></function>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_MACH_ABSOLUTE_TIME</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mach/mach_time.h&gt;</cpp:file></cpp:include>

<function><type><name><name>struct</name> <name>curltime</name></name></type> <name>Curl_now</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>mach_timebase_info_data_t</name></type> <name>timebase</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>curltime</name></name></type> <name>cnow</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>usecs</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><literal type="number">0</literal> <operator>==</operator> <name><name>timebase</name><operator>.</operator><name>denom</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>mach_timebase_info</name><argument_list>(<argument><expr><operator>&amp;</operator><name>timebase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>usecs</name> <operator>=</operator> <call><name>mach_absolute_time</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>usecs</name> <operator>*=</operator> <name><name>timebase</name><operator>.</operator><name>numer</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>usecs</name> <operator>/=</operator> <name><name>timebase</name><operator>.</operator><name>denom</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>usecs</name> <operator>/=</operator> <literal type="number">1000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cnow</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <name>usecs</name> <operator>/</operator> <literal type="number">1000000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cnow</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>usecs</name> <operator>%</operator> <literal type="number">1000000</literal><operator>)</operator></expr>;</expr_stmt>

<return>return <expr><name>cnow</name></expr>;</return>

</block_content>}</block></function>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_GETTIMEOFDAY</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<function><type><name><name>struct</name> <name>curltime</name></name></type> <name>Curl_now</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>now</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>curltime</name></name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>gettimeofday</name><argument_list>(<argument><expr><operator>&amp;</operator><name>now</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ret</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <name><name>now</name><operator>.</operator><name>tv_sec</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ret</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>now</name><operator>.</operator><name>tv_usec</name></name></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<function><type><name><name>struct</name> <name>curltime</name></name></type> <name>Curl_now</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>curltime</name></name></type> <name>now</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>now</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>now</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>now</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>timediff_t</name></type> <name>Curl_timediff</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>curltime</name></name></type> <name>newer</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>curltime</name></name></type> <name>older</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>timediff_t</name></type> <name>diff</name> <init>= <expr><operator>(</operator><name>timediff_t</name><operator>)</operator><name><name>newer</name><operator>.</operator><name>tv_sec</name></name><operator>-</operator><name><name>older</name><operator>.</operator><name>tv_sec</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>diff</name> <operator>&gt;=</operator> <operator>(</operator><name>TIMEDIFF_T_MAX</name><operator>/</operator><literal type="number">1000</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>TIMEDIFF_T_MAX</name></expr>;</return></block_content></block></if>

<if type="elseif">else if<condition>(<expr><name>diff</name> <operator>&lt;=</operator> <operator>(</operator><name>TIMEDIFF_T_MIN</name><operator>/</operator><literal type="number">1000</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>TIMEDIFF_T_MIN</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>diff</name> <operator>*</operator> <literal type="number">1000</literal> <operator>+</operator> <operator>(</operator><name><name>newer</name><operator>.</operator><name>tv_usec</name></name><operator>-</operator><name><name>older</name><operator>.</operator><name>tv_usec</name></name><operator>)</operator><operator>/</operator><literal type="number">1000</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>timediff_t</name></type> <name>Curl_timediff_us</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>curltime</name></name></type> <name>newer</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>curltime</name></name></type> <name>older</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>timediff_t</name></type> <name>diff</name> <init>= <expr><operator>(</operator><name>timediff_t</name><operator>)</operator><name><name>newer</name><operator>.</operator><name>tv_sec</name></name><operator>-</operator><name><name>older</name><operator>.</operator><name>tv_sec</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>diff</name> <operator>&gt;=</operator> <operator>(</operator><name>TIMEDIFF_T_MAX</name><operator>/</operator><literal type="number">1000000</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>TIMEDIFF_T_MAX</name></expr>;</return></block_content></block></if>

<if type="elseif">else if<condition>(<expr><name>diff</name> <operator>&lt;=</operator> <operator>(</operator><name>TIMEDIFF_T_MIN</name><operator>/</operator><literal type="number">1000000</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>TIMEDIFF_T_MIN</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>diff</name> <operator>*</operator> <literal type="number">1000000</literal> <operator>+</operator> <name><name>newer</name><operator>.</operator><name>tv_usec</name></name><operator>-</operator><name><name>older</name><operator>.</operator><name>tv_usec</name></name></expr>;</return>

</block_content>}</block></function>

</unit>
