<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\curl-analysis\_cppstats\curl\lib\http_ntlm.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_setup.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_HTTP</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>USE_NTLM</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEBUG_ME</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"urldata.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sendf.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"strcase.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_ntlm.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_ntlm_core.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_ntlm_wb.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vauth/vauth.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"url.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_WINDOWS_SSPI</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_sspi.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_printf.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_memory.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memdebug.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DEBUG_ME</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEBUG_OUT</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>x</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEBUG_OUT</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>Curl_nop_stmt</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>CURLcode</name></type> <name>Curl_input_ntlm</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>proxy</name></decl></parameter>, 

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>header</name></decl></parameter>)</parameter_list> 

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>ntlmdata</name></name> <modifier>*</modifier></type><name>ntlm</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>curlntlm</name> <modifier>*</modifier></type><name>state</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ntlm</name> <operator>=</operator> <ternary><condition><expr><name>proxy</name></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>proxyntlm</name></name></expr> </then><else>: <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>ntlm</name></name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>state</name> <operator>=</operator> <ternary><condition><expr><name>proxy</name></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>proxy_ntlm_state</name></name></expr> </then><else>: <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>http_ntlm_state</name></name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>checkprefix</name><argument_list>(<argument><expr><literal type="string">"NTLM"</literal></expr></argument>, <argument><expr><name>header</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>header</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><literal type="string">"NTLM"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while<condition>(<expr><operator>*</operator><name>header</name> <operator>&amp;&amp;</operator> <call><name>ISSPACE</name><argument_list>(<argument><expr><operator>*</operator><name>header</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>header</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if<condition>(<expr><operator>*</operator><name>header</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_auth_decode_ntlm_type2_message</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>header</name></expr></argument>, <argument><expr><name>ntlm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>state</name> <operator>=</operator> <name>NTLMSTATE_TYPE2</name></expr>;</expr_stmt> 

</block_content>}</block></if>

<else>else <block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>*</operator><name>state</name> <operator>==</operator> <name>NTLMSTATE_LAST</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"NTLM auth restarted\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_http_auth_cleanup_ntlm</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><operator>*</operator><name>state</name> <operator>==</operator> <name>NTLMSTATE_TYPE3</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"NTLM handshake rejected\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_http_auth_cleanup_ntlm</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>state</name> <operator>=</operator> <name>NTLMSTATE_NONE</name></expr>;</expr_stmt>

<return>return <expr><name>CURLE_REMOTE_ACCESS_DENIED</name></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><operator>*</operator><name>state</name> <operator>&gt;=</operator> <name>NTLMSTATE_TYPE1</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"NTLM handshake failure (internal error)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_REMOTE_ACCESS_DENIED</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>state</name> <operator>=</operator> <name>NTLMSTATE_TYPE1</name></expr>;</expr_stmt> 

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>CURLcode</name></type> <name>Curl_output_ntlm</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>proxy</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>base64</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>allocuserpwd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>userp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>passwdp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>service</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>hostname</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ntlmdata</name></name> <modifier>*</modifier></type><name>ntlm</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>curlntlm</name> <modifier>*</modifier></type><name>state</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>auth</name></name> <modifier>*</modifier></type><name>authp</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DEBUGASSERT</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DEBUGASSERT</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>proxy</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>allocuserpwd</name> <operator>=</operator> <operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>allocptr</name><operator>.</operator><name>proxyuserpwd</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>userp</name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>http_proxy</name><operator>.</operator><name>user</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>passwdp</name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>http_proxy</name><operator>.</operator><name>passwd</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>service</name> <operator>=</operator> <ternary><condition><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_PROXY_SERVICE_NAME</name></expr>]</index></name></expr> ?</condition><then>

<expr><name><name>conn</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_PROXY_SERVICE_NAME</name></expr>]</index></name></expr> </then><else>: <expr><literal type="string">"HTTP"</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>hostname</name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>http_proxy</name><operator>.</operator><name>host</name><operator>.</operator><name>name</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ntlm</name> <operator>=</operator> <operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>proxyntlm</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>state</name> <operator>=</operator> <operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>proxy_ntlm_state</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>authp</name> <operator>=</operator> <operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>authproxy</name></name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>allocuserpwd</name> <operator>=</operator> <operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>allocptr</name><operator>.</operator><name>userpwd</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>userp</name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>user</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>passwdp</name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>passwd</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>service</name> <operator>=</operator> <ternary><condition><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_SERVICE_NAME</name></expr>]</index></name></expr> ?</condition><then>

<expr><name><name>conn</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_SERVICE_NAME</name></expr>]</index></name></expr> </then><else>: <expr><literal type="string">"HTTP"</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>hostname</name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>host</name><operator>.</operator><name>name</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ntlm</name> <operator>=</operator> <operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>ntlm</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>state</name> <operator>=</operator> <operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>http_ntlm_state</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>authp</name> <operator>=</operator> <operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>authhost</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>authp</name><operator>-&gt;</operator><name>done</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>userp</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>userp</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>passwdp</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>passwdp</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_WINDOWS_SSPI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name>s_hSecDll</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>err</name> <init>= <expr><call><name>Curl_sspi_global_init</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>s_hSecDll</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SECPKG_ATTR_ENDPOINT_BINDINGS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>ntlm</name><operator>-&gt;</operator><name>sslContext</name></name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>sslContext</name></name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<switch>switch<condition>(<expr><operator>*</operator><name>state</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>NTLMSTATE_TYPE1</name></expr>:</case>

<default>default:</default> 

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_auth_create_ntlm_type1_message</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>userp</name></expr></argument>, <argument><expr><name>passwdp</name></expr></argument>,

<argument><expr><name>service</name></expr></argument>, <argument><expr><name>hostname</name></expr></argument>,

<argument><expr><name>ntlm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>base64</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>base64</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>*</operator><name>allocuserpwd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>allocuserpwd</name> <operator>=</operator> <call><name>aprintf</name><argument_list>(<argument><expr><literal type="string">"%sAuthorization: NTLM %s\r\n"</literal></expr></argument>,

<argument><expr><ternary><condition><expr><name>proxy</name></expr> ?</condition><then> <expr><literal type="string">"Proxy-"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,

<argument><expr><name>base64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>base64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>*</operator><name>allocuserpwd</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>DEBUG_OUT</name><argument_list>(<argument><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"**** Header %s\n "</literal></expr></argument>, <argument><expr><operator>*</operator><name>allocuserpwd</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>NTLMSTATE_TYPE2</name></expr>:</case>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_auth_create_ntlm_type3_message</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>userp</name></expr></argument>, <argument><expr><name>passwdp</name></expr></argument>,

<argument><expr><name>ntlm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>base64</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>base64</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>*</operator><name>allocuserpwd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>allocuserpwd</name> <operator>=</operator> <call><name>aprintf</name><argument_list>(<argument><expr><literal type="string">"%sAuthorization: NTLM %s\r\n"</literal></expr></argument>,

<argument><expr><ternary><condition><expr><name>proxy</name></expr> ?</condition><then> <expr><literal type="string">"Proxy-"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,

<argument><expr><name>base64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>base64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>*</operator><name>allocuserpwd</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>DEBUG_OUT</name><argument_list>(<argument><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"**** %s\n "</literal></expr></argument>, <argument><expr><operator>*</operator><name>allocuserpwd</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>state</name> <operator>=</operator> <name>NTLMSTATE_TYPE3</name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>authp</name><operator>-&gt;</operator><name>done</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>NTLMSTATE_TYPE3</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>state</name> <operator>=</operator> <name>NTLMSTATE_LAST</name></expr>;</expr_stmt>

<case>case <expr><name>NTLMSTATE_LAST</name></expr>:</case>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><operator>*</operator><name>allocuserpwd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>authp</name><operator>-&gt;</operator><name>done</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>Curl_http_auth_cleanup_ntlm</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>Curl_auth_cleanup_ntlm</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>ntlm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_auth_cleanup_ntlm</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>proxyntlm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NTLM_WB_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>Curl_http_auth_cleanup_ntlm_wb</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</unit>
