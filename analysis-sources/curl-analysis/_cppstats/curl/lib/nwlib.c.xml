<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\curl-analysis\_cppstats\curl\lib\nwlib.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_setup.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NETWARE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__NOVELL_LIBC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;library.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netware.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;screen.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;nks/thread.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;nks/synch.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_memory.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memdebug.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>int</name></type> <name>_errno</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>twentybytes</name></decl>;</decl_stmt>

}</block></struct></type> <name>libthreaddata_t</name>;</typedef>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>z</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>tenbytes</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>NXKey_t</name></type> <name>perthreadkey</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>NXMutex_t</name> <modifier>*</modifier></type><name>lock</name></decl>;</decl_stmt>

}</block></struct></type> <name>libdata_t</name>;</typedef>

<decl_stmt><decl><type><name>int</name></type> <name>gLibId</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>gLibHandle</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>rtag_t</name></type> <name>gAllocTag</name> <init>= <expr><operator>(</operator><name>rtag_t</name><operator>)</operator> <name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>NXMutex_t</name> <modifier>*</modifier></type><name>gLibLock</name> <init>= <expr><operator>(</operator><name>NXMutex_t</name> <operator>*</operator><operator>)</operator> <name>NULL</name></expr></init></decl>;</decl_stmt>

<function_decl><type><name>int</name></type> <name>DisposeLibraryData</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>DisposeThreadData</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>GetOrSetUpData</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>libdata_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>libthreaddata_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>threaddata</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>int</name></type> <name>_NonAppStart</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>NLMHandle</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>errorScreen</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmdLine</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>loadDirPath</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>uninitializedDataLength</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>NLMFileHandle</name></decl></parameter>,

<parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>readRoutineP</name>)<parameter_list>(<parameter><decl><type><name>int</name></type> <name>conn</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>fileHandle</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>offset</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>nbytes</name></decl></parameter>,

<parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>bytesRead</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>)</parameter_list></function_decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>customDataOffset</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>customDataSize</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>messageCount</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>messages</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>NX_LOCK_INFO_ALLOC</name><argument_list>(<argument><expr><name>liblock</name></expr></argument>, <argument><expr><literal type="string">"Per-Application Data Lock"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>unused</name><name>(</name><name>cmdLine</name><name>)</name></cpp:pragma>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>unused</name><name>(</name><name>loadDirPath</name><name>)</name></cpp:pragma>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>unused</name><name>(</name><name>uninitializedDataLength</name><name>)</name></cpp:pragma>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>unused</name><name>(</name><name>NLMFileHandle</name><name>)</name></cpp:pragma>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>unused</name><name>(</name><name>readRoutineP</name><name>)</name></cpp:pragma>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>unused</name><name>(</name><name>customDataOffset</name><name>)</name></cpp:pragma>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>unused</name><name>(</name><name>customDataSize</name><name>)</name></cpp:pragma>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>unused</name><name>(</name><name>messageCount</name><name>)</name></cpp:pragma>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>unused</name><name>(</name><name>messages</name><name>)</name></cpp:pragma>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>gAllocTag</name> <operator>=</operator> <call><name>AllocateResourceTag</name><argument_list>(<argument><expr><name>NLMHandle</name></expr></argument>,

<argument><expr><literal type="string">"&lt;library-name&gt; memory allocations"</literal></expr></argument>,

<argument><expr><name>AllocSignature</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>gAllocTag</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>OutputToScreen</name><argument_list>(<argument><expr><name>errorScreen</name></expr></argument>, <argument><expr><literal type="string">"Unable to allocate resource tag for "</literal>

<literal type="string">"library memory allocations.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>gLibId</name> <operator>=</operator> <call><name>register_library</name><argument_list>(<argument><expr><name>DisposeLibraryData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>gLibId</name> <operator>&lt;</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>OutputToScreen</name><argument_list>(<argument><expr><name>errorScreen</name></expr></argument>, <argument><expr><literal type="string">"Unable to register library with kernel.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>gLibHandle</name> <operator>=</operator> <name>NLMHandle</name></expr>;</expr_stmt>

<expr_stmt><expr><name>gLibLock</name> <operator>=</operator> <call><name>NXMutexAlloc</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>liblock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>gLibLock</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>OutputToScreen</name><argument_list>(<argument><expr><name>errorScreen</name></expr></argument>, <argument><expr><literal type="string">"Unable to allocate library data lock.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>_NonAppStop</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>unregister_library</name><argument_list>(<argument><expr><name>gLibId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>NXMutexFree</name><argument_list>(<argument><expr><name>gLibLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>_NonAppCheckUnload</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>GetOrSetUpData</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>libdata_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>appData</name></decl></parameter>,

<parameter><decl><type><name>libthreaddata_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>threadData</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>libdata_t</name> <modifier>*</modifier></type><name>app_data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>libthreaddata_t</name> <modifier>*</modifier></type><name>thread_data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>NXKey_t</name></type> <name>key</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>NX_LOCK_INFO_ALLOC</name><argument_list>(<argument><expr><name>liblock</name></expr></argument>, <argument><expr><literal type="string">"Application Data Lock"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>thread_data</name> <operator>=</operator> <operator>(</operator><name>libthreaddata_t</name> <operator>*</operator><operator>)</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>app_data</name> <operator>=</operator> <operator>(</operator><name>libdata_t</name> <operator>*</operator><operator>)</operator> <call><name>get_app_data</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>app_data</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>NXLock</name><argument_list>(<argument><expr><name>gLibLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>app_data</name> <operator>=</operator> <operator>(</operator><name>libdata_t</name> <operator>*</operator><operator>)</operator> <call><name>get_app_data</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>app_data</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>app_data</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>libdata_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>app_data</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>app_data</name><operator>-&gt;</operator><name>tenbytes</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>app_data</name><operator>-&gt;</operator><name>lock</name></name> <operator>=</operator> <call><name>NXMutexAlloc</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>liblock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>app_data</name><operator>-&gt;</operator><name>tenbytes</name></name> <operator>||</operator> <operator>!</operator><name><name>app_data</name><operator>-&gt;</operator><name>lock</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>app_data</name><operator>-&gt;</operator><name>lock</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>NXMutexFree</name><argument_list>(<argument><expr><name><name>app_data</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>app_data</name><operator>-&gt;</operator><name>tenbytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>app_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>app_data</name> <operator>=</operator> <operator>(</operator><name>libdata_t</name> <operator>*</operator><operator>)</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <name>ENOMEM</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>app_data</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>set_app_data</name><argument_list>(<argument><expr><name>gLibId</name></expr></argument>, <argument><expr><name>app_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>err</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>app_data</name><operator>-&gt;</operator><name>lock</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>NXMutexFree</name><argument_list>(<argument><expr><name><name>app_data</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>app_data</name><operator>-&gt;</operator><name>tenbytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>app_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>app_data</name> <operator>=</operator> <operator>(</operator><name>libdata_t</name> <operator>*</operator><operator>)</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <name>ENOMEM</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>NXKeyCreate</name><argument_list>(<argument><expr><name>DisposeThreadData</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>err</name></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name>key</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>app_data</name><operator>-&gt;</operator><name>perthreadkey</name></name> <operator>=</operator> <name>key</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>NXUnlock</name><argument_list>(<argument><expr><name>gLibLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>app_data</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>key</name> <operator>=</operator> <name><name>app_data</name><operator>-&gt;</operator><name>perthreadkey</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>key</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> 

<operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>err</name> <operator>=</operator> <call><name>NXKeyGetValue</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>thread_data</name></expr></argument>)</argument_list></call><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>!</operator><name>thread_data</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>thread_data</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>libthreaddata_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>thread_data</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>thread_data</name><operator>-&gt;</operator><name>_errno</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>thread_data</name><operator>-&gt;</operator><name>twentybytes</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>thread_data</name><operator>-&gt;</operator><name>twentybytes</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>thread_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>thread_data</name> <operator>=</operator> <operator>(</operator><name>libthreaddata_t</name> <operator>*</operator><operator>)</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <name>ENOMEM</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>NXKeySetValue</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>thread_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>err</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>thread_data</name><operator>-&gt;</operator><name>twentybytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>thread_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>thread_data</name> <operator>=</operator> <operator>(</operator><name>libthreaddata_t</name> <operator>*</operator><operator>)</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>appData</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>appData</name> <operator>=</operator> <name>app_data</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>threadData</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>threadData</name> <operator>=</operator> <name>thread_data</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>DisposeLibraryData</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>data</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>tenbytes</name> <init>= <expr><operator>(</operator><operator>(</operator><name>libdata_t</name> <operator>*</operator><operator>)</operator> <name>data</name><operator>)</operator><operator>-&gt;</operator><name>tenbytes</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>tenbytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>DisposeThreadData</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>data</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>twentybytes</name> <init>= <expr><operator>(</operator><operator>(</operator><name>libthreaddata_t</name> <operator>*</operator><operator>)</operator> <name>data</name><operator>)</operator><operator>-&gt;</operator><name>twentybytes</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>twentybytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;nwthread.h&gt;</cpp:file></cpp:include>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ExitThread</name><argument_list>(<argument><expr><name>TSR_THREAD</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__POCC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warn</name><name>(</name><name>disable</name><name>:</name><name>2024</name><name>)</name></cpp:pragma> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</unit>
