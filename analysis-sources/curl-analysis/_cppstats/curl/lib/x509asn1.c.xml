<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\curl-analysis\_cppstats\curl\lib\x509asn1.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_setup.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_GSKIT</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>USE_NSS</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>USE_GNUTLS</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>USE_WOLFSSL</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>USE_SCHANNEL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;curl/curl.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"urldata.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"strcase.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hostcheck.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vtls/vtls.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sendf.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"inet_pton.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_base64.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"x509asn1.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_printf.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_memory.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memdebug.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>cnOID</name><index>[]</index></name> <init>= <expr><literal type="string">"2.5.4.3"</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>sanOID</name><index>[]</index></name> <init>= <expr><literal type="string">"2.5.29.17"</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>curl_OID</name></type> <name><name>OIDtable</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"1.2.840.10040.4.1"</literal></expr>, <expr><literal type="string">"dsa"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"1.2.840.10040.4.3"</literal></expr>, <expr><literal type="string">"dsa-with-sha1"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"1.2.840.10045.2.1"</literal></expr>, <expr><literal type="string">"ecPublicKey"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"1.2.840.10045.3.0.1"</literal></expr>, <expr><literal type="string">"c2pnb163v1"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"1.2.840.10045.4.1"</literal></expr>, <expr><literal type="string">"ecdsa-with-SHA1"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"1.2.840.10046.2.1"</literal></expr>, <expr><literal type="string">"dhpublicnumber"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"1.2.840.113549.1.1.1"</literal></expr>, <expr><literal type="string">"rsaEncryption"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"1.2.840.113549.1.1.2"</literal></expr>, <expr><literal type="string">"md2WithRSAEncryption"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"1.2.840.113549.1.1.4"</literal></expr>, <expr><literal type="string">"md5WithRSAEncryption"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"1.2.840.113549.1.1.5"</literal></expr>, <expr><literal type="string">"sha1WithRSAEncryption"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"1.2.840.113549.1.1.10"</literal></expr>, <expr><literal type="string">"RSASSA-PSS"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"1.2.840.113549.1.1.14"</literal></expr>, <expr><literal type="string">"sha224WithRSAEncryption"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"1.2.840.113549.1.1.11"</literal></expr>, <expr><literal type="string">"sha256WithRSAEncryption"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"1.2.840.113549.1.1.12"</literal></expr>, <expr><literal type="string">"sha384WithRSAEncryption"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"1.2.840.113549.1.1.13"</literal></expr>, <expr><literal type="string">"sha512WithRSAEncryption"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"1.2.840.113549.2.2"</literal></expr>, <expr><literal type="string">"md2"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"1.2.840.113549.2.5"</literal></expr>, <expr><literal type="string">"md5"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"1.3.14.3.2.26"</literal></expr>, <expr><literal type="string">"sha1"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>cnOID</name></expr>, <expr><literal type="string">"CN"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"2.5.4.4"</literal></expr>, <expr><literal type="string">"SN"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"2.5.4.5"</literal></expr>, <expr><literal type="string">"serialNumber"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"2.5.4.6"</literal></expr>, <expr><literal type="string">"C"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"2.5.4.7"</literal></expr>, <expr><literal type="string">"L"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"2.5.4.8"</literal></expr>, <expr><literal type="string">"ST"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"2.5.4.9"</literal></expr>, <expr><literal type="string">"streetAddress"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"2.5.4.10"</literal></expr>, <expr><literal type="string">"O"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"2.5.4.11"</literal></expr>, <expr><literal type="string">"OU"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"2.5.4.12"</literal></expr>, <expr><literal type="string">"title"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"2.5.4.13"</literal></expr>, <expr><literal type="string">"description"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"2.5.4.17"</literal></expr>, <expr><literal type="string">"postalCode"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"2.5.4.41"</literal></expr>, <expr><literal type="string">"name"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"2.5.4.42"</literal></expr>, <expr><literal type="string">"givenName"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"2.5.4.43"</literal></expr>, <expr><literal type="string">"initials"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"2.5.4.44"</literal></expr>, <expr><literal type="string">"generationQualifier"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"2.5.4.45"</literal></expr>, <expr><literal type="string">"X500UniqueIdentifier"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"2.5.4.46"</literal></expr>, <expr><literal type="string">"dnQualifier"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"2.5.4.65"</literal></expr>, <expr><literal type="string">"pseudonym"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"1.2.840.113549.1.9.1"</literal></expr>, <expr><literal type="string">"emailAddress"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"2.5.4.72"</literal></expr>, <expr><literal type="string">"role"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>sanOID</name></expr>, <expr><literal type="string">"subjectAltName"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"2.5.29.18"</literal></expr>, <expr><literal type="string">"issuerAltName"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"2.5.29.19"</literal></expr>, <expr><literal type="string">"basicConstraints"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"2.16.840.1.101.3.4.2.4"</literal></expr>, <expr><literal type="string">"sha224"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"2.16.840.1.101.3.4.2.1"</literal></expr>, <expr><literal type="string">"sha256"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"2.16.840.1.101.3.4.2.2"</literal></expr>, <expr><literal type="string">"sha384"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"2.16.840.1.101.3.4.2.3"</literal></expr>, <expr><literal type="string">"sha512"</literal></expr> }</block></expr>,

<expr><block>{ <expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <name>NULL</name></expr>, <expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>getASN1Element</name><argument_list>(<argument><expr><name>curl_asn1Element</name> <operator>*</operator><name>elem</name></expr></argument>,

<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>beg</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>end</name></expr></argument>)</argument_list>

<name>WARN_UNUSED_RESULT</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>getASN1Element</name><parameter_list>(<parameter><decl><type><name>curl_asn1Element</name> <modifier>*</modifier></type><name>elem</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>beg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>end</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>b</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>curl_asn1Element</name></type> <name>lelem</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>beg</name> <operator>||</operator> <operator>!</operator><name>end</name> <operator>||</operator> <name>beg</name> <operator>&gt;=</operator> <name>end</name> <operator>||</operator> <operator>!</operator><operator>*</operator><name>beg</name> <operator>||</operator>

<operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>end</name> <operator>-</operator> <name>beg</name><operator>)</operator> <operator>&gt;</operator> <name>CURL_ASN1_MAX</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>elem</name><operator>-&gt;</operator><name>header</name></name> <operator>=</operator> <name>beg</name></expr>;</expr_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>*</operator><name>beg</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>elem</name><operator>-&gt;</operator><name>constructed</name></name> <operator>=</operator> <operator>(</operator><name>b</name> <operator>&amp;</operator> <literal type="number">0x20</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>elem</name><operator>-&gt;</operator><name>class</name></name> <operator>=</operator> <operator>(</operator><name>b</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>b</name> <operator>&amp;=</operator> <literal type="number">0x1F</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>b</name> <operator>==</operator> <literal type="number">0x1F</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><name><name>elem</name><operator>-&gt;</operator><name>tag</name></name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>beg</name> <operator>&gt;=</operator> <name>end</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>*</operator><name>beg</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><name>b</name> <operator>&amp;</operator> <literal type="number">0x80</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>(<expr><operator>!</operator><operator>(</operator><name>b</name> <operator>&amp;=</operator> <literal type="number">0x7F</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>elem</name><operator>-&gt;</operator><name>constructed</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>elem</name><operator>-&gt;</operator><name>beg</name></name> <operator>=</operator> <name>beg</name></expr>;</expr_stmt>

<while>while<condition>(<expr><name>beg</name> <operator>&lt;</operator> <name>end</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>beg</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>beg</name> <operator>=</operator> <call><name>getASN1Element</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lelem</name></expr></argument>, <argument><expr><name>beg</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>beg</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if<condition>(<expr><name>beg</name> <operator>&gt;=</operator> <name>end</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>elem</name><operator>-&gt;</operator><name>end</name></name> <operator>=</operator> <name>beg</name></expr>;</expr_stmt>

<return>return <expr><name>beg</name> <operator>+</operator> <literal type="number">1</literal></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><operator>(</operator><name>unsigned</name><operator>)</operator><name>b</name> <operator>&gt;</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>end</name> <operator>-</operator> <name>beg</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if> 

<else>else <block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<do>do <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>len</name> <operator>&amp;</operator> <literal type="number">0xFF000000L</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>len</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>*</operator><name>beg</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block> while<condition>(<expr><operator>--</operator><name>b</name></expr>)</condition>;</do>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name>len</name> <operator>&gt;</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>end</name> <operator>-</operator> <name>beg</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><name><name>elem</name><operator>-&gt;</operator><name>beg</name></name> <operator>=</operator> <name>beg</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>elem</name><operator>-&gt;</operator><name>end</name></name> <operator>=</operator> <name>beg</name> <operator>+</operator> <name>len</name></expr>;</expr_stmt>

<return>return <expr><name><name>elem</name><operator>-&gt;</operator><name>end</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>curl_OID</name> <modifier>*</modifier></type> <name>searchOID</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>oid</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>curl_OID</name> <modifier>*</modifier></type><name>op</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>op</name> <operator>=</operator> <name>OIDtable</name></expr>;</init> <condition><expr><name><name>op</name><operator>-&gt;</operator><name>numoid</name></name></expr>;</condition> <incr><expr><name>op</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>numoid</name></name></expr></argument>, <argument><expr><name>oid</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>strcasecompare</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>textoid</name></name></expr></argument>, <argument><expr><name>oid</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>op</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>bool2str</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>beg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>end</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>end</name> <operator>-</operator> <name>beg</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>strdup</name><argument_list>(<argument><expr><ternary><condition><expr><operator>*</operator><name>beg</name></expr>?</condition><then> <expr><literal type="string">"TRUE"</literal></expr></then><else>: <expr><literal type="string">"FALSE"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>octet2str</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>beg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>end</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>n</name> <init>= <expr><name>end</name> <operator>-</operator> <name>beg</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>n</name> <operator>&lt;=</operator> <operator>(</operator><name>SIZE_T_MAX</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><literal type="number">3</literal> <operator>*</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>buf</name></expr>)</condition><block type="pseudo"><block_content>

<for>for<control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>beg</name> <operator>&lt;</operator> <name>end</name></expr>;</condition> <incr><expr><name>n</name> <operator>+=</operator> <literal type="number">3</literal></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msnprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>n</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"%02x:"</literal></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>beg</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>buf</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>bit2str</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>beg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>end</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>++</operator><name>beg</name> <operator>&gt;</operator> <name>end</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>octet2str</name><argument_list>(<argument><expr><name>beg</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>int2str</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>beg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>end</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>val</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>n</name> <init>= <expr><name>end</name> <operator>-</operator> <name>beg</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>n</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>octet2str</name><argument_list>(<argument><expr><name>beg</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>*</operator><name>beg</name> <operator>&amp;</operator> <literal type="number">0x80</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>val</name> <operator>=</operator> <operator>~</operator><name>val</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<do>do<block type="pseudo"><block_content>

<expr_stmt><expr><name>val</name> <operator>=</operator> <operator>(</operator><name>val</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>*</operator><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>beg</name><operator>++</operator></expr>;</expr_stmt></block_content></block>

while<condition>(<expr><name>beg</name> <operator>&lt;</operator> <name>end</name></expr>)</condition>;</do>

<return>return <expr><call><name>curl_maprintf</name><argument_list>(<argument><expr><literal type="string">"%s%lx"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>val</name> <operator>&gt;=</operator> <literal type="number">10</literal></expr>?</condition><then> <expr><literal type="string">"0x"</literal></expr></then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ssize_t</name></type>

<name>utf8asn1str</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>to</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>from</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>end</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>inlength</name> <init>= <expr><name>end</name> <operator>-</operator> <name>from</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>outlength</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>to</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<switch>switch<condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>CURL_ASN1_BMP_STRING</name></expr>:</case>

<expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>CURL_ASN1_UNIVERSAL_STRING</name></expr>:</case>

<expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>CURL_ASN1_NUMERIC_STRING</name></expr>:</case>

<case>case <expr><name>CURL_ASN1_PRINTABLE_STRING</name></expr>:</case>

<case>case <expr><name>CURL_ASN1_TELETEX_STRING</name></expr>:</case>

<case>case <expr><name>CURL_ASN1_IA5_STRING</name></expr>:</case>

<case>case <expr><name>CURL_ASN1_VISIBLE_STRING</name></expr>:</case>

<case>case <expr><name>CURL_ASN1_UTF8_STRING</name></expr>:</case>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return> 

</block_content>}</block></switch>

<if_stmt><if>if<condition>(<expr><name>inlength</name> <operator>%</operator> <name>size</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt> 

<if_stmt><if>if<condition>(<expr><name>inlength</name> <operator>/</operator> <name>size</name> <operator>&gt;</operator> <operator>(</operator><name>SIZE_T_MAX</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><literal type="number">4</literal> <operator>*</operator> <operator>(</operator><name>inlength</name> <operator>/</operator> <name>size</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>buf</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt> 

<if_stmt><if>if<condition>(<expr><name>type</name> <operator>==</operator> <name>CURL_ASN1_UTF8_STRING</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>outlength</name> <operator>=</operator> <name>inlength</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>outlength</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>from</name></expr></argument>, <argument><expr><name>outlength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<for>for<control>(<init><expr><name>outlength</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>from</name> <operator>&lt;</operator> <name>end</name></expr>;</condition><incr/>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>charsize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>wc</name></decl>;</decl_stmt>

<expr_stmt><expr><name>wc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<switch>switch<condition>(<expr><name>size</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">4</literal></expr>:</case>

<expr_stmt><expr><name>wc</name> <operator>=</operator> <operator>(</operator><name>wc</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>*</operator><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>from</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>wc</name> <operator>=</operator> <operator>(</operator><name>wc</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>*</operator><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>from</name><operator>++</operator></expr>;</expr_stmt>

<case>case <expr><literal type="number">2</literal></expr>:</case>

<expr_stmt><expr><name>wc</name> <operator>=</operator> <operator>(</operator><name>wc</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>*</operator><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>from</name><operator>++</operator></expr>;</expr_stmt>

<default>default:</default> 

<expr_stmt><expr><name>wc</name> <operator>=</operator> <operator>(</operator><name>wc</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>*</operator><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>from</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></switch>

<expr_stmt><expr><name>charsize</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>wc</name> <operator>&gt;=</operator> <literal type="number">0x00000080</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>wc</name> <operator>&gt;=</operator> <literal type="number">0x00000800</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>wc</name> <operator>&gt;=</operator> <literal type="number">0x00010000</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>wc</name> <operator>&gt;=</operator> <literal type="number">0x00200000</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><name>outlength</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator> <operator>(</operator><literal type="number">0x80</literal> <operator>|</operator> <operator>(</operator><name>wc</name> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>wc</name> <operator>=</operator> <operator>(</operator><name>wc</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>|</operator> <literal type="number">0x00010000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>charsize</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><name>outlength</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator> <operator>(</operator><literal type="number">0x80</literal> <operator>|</operator> <operator>(</operator><name>wc</name> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>wc</name> <operator>=</operator> <operator>(</operator><name>wc</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>|</operator> <literal type="number">0x00000800</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>charsize</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><name>outlength</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator> <operator>(</operator><literal type="number">0x80</literal> <operator>|</operator> <operator>(</operator><name>wc</name> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>wc</name> <operator>=</operator> <operator>(</operator><name>wc</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>|</operator> <literal type="number">0x000000C0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>charsize</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><name>outlength</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator> <name>wc</name></expr>;</expr_stmt>

<expr_stmt><expr><name>outlength</name> <operator>+=</operator> <name>charsize</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><name>outlength</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>to</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>

<return>return <expr><name>outlength</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>string2str</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>beg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>end</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><call><name>utf8asn1str</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>beg</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>buf</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type> <name>encodeUint</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>buflen</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>x</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>y</name> <init>= <expr><name>x</name> <operator>/</operator> <literal type="number">10</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>y</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>encodeUint</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>x</name> <operator>-=</operator> <name>y</name> <operator>*</operator> <literal type="number">10</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>i</name> <operator>&lt;</operator> <name>buflen</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator> <operator>(</operator><literal type="char">'0'</literal> <operator>+</operator> <name>x</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>i</name> <operator>&lt;</operator> <name>buflen</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<return>return <expr><name>i</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type> <name>encodeOID</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>buflen</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>beg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>end</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>x</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>y</name></decl>;</decl_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <operator>*</operator><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>beg</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <name>y</name> <operator>/</operator> <literal type="number">40</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>-=</operator> <name>x</name> <operator>*</operator> <literal type="number">40</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>encodeUint</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>i</name> <operator>&lt;</operator> <name>buflen</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'.'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>i</name> <operator>&gt;=</operator> <name>buflen</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i</name> <operator>+=</operator> <call><name>encodeUint</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>i</name> <operator>+=</operator> <call><name>encodeUint</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>buflen</name> <operator>-</operator> <name>i</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<while>while<condition>(<expr><name>beg</name> <operator>&lt;</operator> <name>end</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>i</name> <operator>&lt;</operator> <name>buflen</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'.'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<do>do <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>x</name> <operator>&amp;</operator> <literal type="number">0xFF000000</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <operator>*</operator><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>beg</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <operator>(</operator><name>x</name> <operator>&lt;&lt;</operator> <literal type="number">7</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>y</name> <operator>&amp;</operator> <literal type="number">0x7F</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block> while<condition>(<expr><name>y</name> <operator>&amp;</operator> <literal type="number">0x80</literal></expr>)</condition>;</do>

<if_stmt><if>if<condition>(<expr><name>i</name> <operator>&gt;=</operator> <name>buflen</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i</name> <operator>+=</operator> <call><name>encodeUint</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>i</name> <operator>+=</operator> <call><name>encodeUint</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>buflen</name> <operator>-</operator> <name>i</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if<condition>(<expr><name>i</name> <operator>&lt;</operator> <name>buflen</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>i</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>OID2str</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>beg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>end</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>symbolic</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>beg</name> <operator>&lt;</operator> <name>end</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>buflen</name> <init>= <expr><call><name>encodeOID</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>beg</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>buflen</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>buflen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if<condition>(<expr><name>buf</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>encodeOID</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><name>beg</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><name>buflen</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>symbolic</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>curl_OID</name> <modifier>*</modifier></type><name>op</name> <init>= <expr><call><name>searchOID</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>op</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>textoid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>buf</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>GTime2str</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>beg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>end</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tzp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fracp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name>sec1</name></decl>, <decl><type ref="prev"/><name>sec2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>fracl</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>tzl</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sep</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>fracp</name> <operator>=</operator> <name>beg</name></expr>;</init> <condition><expr><name>fracp</name> <operator>&lt;</operator> <name>end</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>fracp</name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>fracp</name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr>;</condition> <incr><expr><name>fracp</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<empty_stmt>;</empty_stmt></block_content></block></for>

<expr_stmt><expr><name>sec1</name> <operator>=</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>

<switch>switch<condition>(<expr><name>fracp</name> <operator>-</operator> <name>beg</name> <operator>-</operator> <literal type="number">12</literal></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case>

<expr_stmt><expr><name>sec2</name> <operator>=</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case>

<expr_stmt><expr><name>sec1</name> <operator>=</operator> <name><name>fracp</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<expr_stmt><expr><name>sec2</name> <operator>=</operator> <name><name>fracp</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></switch>

<expr_stmt><expr><name>tzp</name> <operator>=</operator> <name>fracp</name></expr>;</expr_stmt>

<expr_stmt><expr><name>fracl</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>fracp</name> <operator>&lt;</operator> <name>end</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>fracp</name> <operator>==</operator> <literal type="char">'.'</literal> <operator>||</operator> <operator>*</operator><name>fracp</name> <operator>==</operator> <literal type="char">','</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>fracp</name><operator>++</operator></expr>;</expr_stmt>

<do>do<block type="pseudo"><block_content>

<expr_stmt><expr><name>tzp</name><operator>++</operator></expr>;</expr_stmt></block_content></block>

while<condition>(<expr><name>tzp</name> <operator>&lt;</operator> <name>end</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>tzp</name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>tzp</name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr>)</condition>;</do>

<for>for<control>(<init><expr><name>fracl</name> <operator>=</operator> <name>tzp</name> <operator>-</operator> <name>fracp</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>fracl</name> <operator>&amp;&amp;</operator> <name><name>fracp</name><index>[<expr><name>fracl</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'0'</literal></expr>;</condition> <incr><expr><name>fracl</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>

<empty_stmt>;</empty_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>tzp</name> <operator>&gt;=</operator> <name>end</name></expr>)</condition><block type="pseudo"><block_content>

<empty_stmt>;</empty_stmt></block_content></block></if> 

<if type="elseif">else if<condition>(<expr><operator>*</operator><name>tzp</name> <operator>==</operator> <literal type="char">'Z'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>tzp</name> <operator>=</operator> <literal type="string">" GMT"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>end</name> <operator>=</operator> <name>tzp</name> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>sep</name> <operator>=</operator> <literal type="string">" "</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>tzp</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>tzl</name> <operator>=</operator> <name>end</name> <operator>-</operator> <name>tzp</name></expr>;</expr_stmt>

<return>return <expr><call><name>curl_maprintf</name><argument_list>(<argument><expr><literal type="string">"%.4s-%.2s-%.2s %.2s:%.2s:%c%c%s%.*s%s%.*s"</literal></expr></argument>,

<argument><expr><name>beg</name></expr></argument>, <argument><expr><name>beg</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>beg</name> <operator>+</operator> <literal type="number">6</literal></expr></argument>,

<argument><expr><name>beg</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>beg</name> <operator>+</operator> <literal type="number">10</literal></expr></argument>, <argument><expr><name>sec1</name></expr></argument>, <argument><expr><name>sec2</name></expr></argument>,

<argument><expr><ternary><condition><expr><name>fracl</name></expr>?</condition><then> <expr><literal type="string">"."</literal></expr></then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>, <argument><expr><name>fracl</name></expr></argument>, <argument><expr><name>fracp</name></expr></argument>,

<argument><expr><name>sep</name></expr></argument>, <argument><expr><name>tzl</name></expr></argument>, <argument><expr><name>tzp</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>UTime2str</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>beg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>end</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tzp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>tzl</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sec</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>tzp</name> <operator>=</operator> <name>beg</name></expr>;</init> <condition><expr><name>tzp</name> <operator>&lt;</operator> <name>end</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>tzp</name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>tzp</name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr>;</condition> <incr><expr><name>tzp</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<empty_stmt>;</empty_stmt></block_content></block></for>

<expr_stmt><expr><name>sec</name> <operator>=</operator> <name>beg</name> <operator>+</operator> <literal type="number">10</literal></expr>;</expr_stmt>

<switch>switch<condition>(<expr><name>tzp</name> <operator>-</operator> <name>sec</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case>

<expr_stmt><expr><name>sec</name> <operator>=</operator> <literal type="string">"00"</literal></expr>;</expr_stmt>

<case>case <expr><literal type="number">2</literal></expr>:</case>

<break>break;</break>

<default>default:</default>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></switch>

<if_stmt><if>if<condition>(<expr><name>tzp</name> <operator>&gt;=</operator> <name>end</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>*</operator><name>tzp</name> <operator>==</operator> <literal type="char">'Z'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>tzp</name> <operator>=</operator> <literal type="string">"GMT"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>end</name> <operator>=</operator> <name>tzp</name> <operator>+</operator> <literal type="number">3</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>tzp</name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>tzl</name> <operator>=</operator> <name>end</name> <operator>-</operator> <name>tzp</name></expr>;</expr_stmt>

<return>return <expr><call><name>curl_maprintf</name><argument_list>(<argument><expr><literal type="string">"%u%.2s-%.2s-%.2s %.2s:%.2s:%.2s %.*s"</literal></expr></argument>,

<argument><expr><literal type="number">20</literal> <operator>-</operator> <operator>(</operator><operator>*</operator><name>beg</name> <operator>&gt;=</operator> <literal type="char">'5'</literal><operator>)</operator></expr></argument>, <argument><expr><name>beg</name></expr></argument>, <argument><expr><name>beg</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>beg</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>,

<argument><expr><name>beg</name> <operator>+</operator> <literal type="number">6</literal></expr></argument>, <argument><expr><name>beg</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>sec</name></expr></argument>,

<argument><expr><name>tzl</name></expr></argument>, <argument><expr><name>tzp</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ASN1tostr</name><parameter_list>(<parameter><decl><type><name>curl_asn1Element</name> <modifier>*</modifier></type><name>elem</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>elem</name><operator>-&gt;</operator><name>constructed</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt> 

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>type</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>type</name> <operator>=</operator> <name><name>elem</name><operator>-&gt;</operator><name>tag</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<switch>switch<condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>CURL_ASN1_BOOLEAN</name></expr>:</case>

<return>return <expr><call><name>bool2str</name><argument_list>(<argument><expr><name><name>elem</name><operator>-&gt;</operator><name>beg</name></name></expr></argument>, <argument><expr><name><name>elem</name><operator>-&gt;</operator><name>end</name></name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>CURL_ASN1_INTEGER</name></expr>:</case>

<case>case <expr><name>CURL_ASN1_ENUMERATED</name></expr>:</case>

<return>return <expr><call><name>int2str</name><argument_list>(<argument><expr><name><name>elem</name><operator>-&gt;</operator><name>beg</name></name></expr></argument>, <argument><expr><name><name>elem</name><operator>-&gt;</operator><name>end</name></name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>CURL_ASN1_BIT_STRING</name></expr>:</case>

<return>return <expr><call><name>bit2str</name><argument_list>(<argument><expr><name><name>elem</name><operator>-&gt;</operator><name>beg</name></name></expr></argument>, <argument><expr><name><name>elem</name><operator>-&gt;</operator><name>end</name></name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>CURL_ASN1_OCTET_STRING</name></expr>:</case>

<return>return <expr><call><name>octet2str</name><argument_list>(<argument><expr><name><name>elem</name><operator>-&gt;</operator><name>beg</name></name></expr></argument>, <argument><expr><name><name>elem</name><operator>-&gt;</operator><name>end</name></name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>CURL_ASN1_NULL</name></expr>:</case>

<return>return <expr><call><name>strdup</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>CURL_ASN1_OBJECT_IDENTIFIER</name></expr>:</case>

<return>return <expr><call><name>OID2str</name><argument_list>(<argument><expr><name><name>elem</name><operator>-&gt;</operator><name>beg</name></name></expr></argument>, <argument><expr><name><name>elem</name><operator>-&gt;</operator><name>end</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>CURL_ASN1_UTC_TIME</name></expr>:</case>

<return>return <expr><call><name>UTime2str</name><argument_list>(<argument><expr><name><name>elem</name><operator>-&gt;</operator><name>beg</name></name></expr></argument>, <argument><expr><name><name>elem</name><operator>-&gt;</operator><name>end</name></name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>CURL_ASN1_GENERALIZED_TIME</name></expr>:</case>

<return>return <expr><call><name>GTime2str</name><argument_list>(<argument><expr><name><name>elem</name><operator>-&gt;</operator><name>beg</name></name></expr></argument>, <argument><expr><name><name>elem</name><operator>-&gt;</operator><name>end</name></name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>CURL_ASN1_UTF8_STRING</name></expr>:</case>

<case>case <expr><name>CURL_ASN1_NUMERIC_STRING</name></expr>:</case>

<case>case <expr><name>CURL_ASN1_PRINTABLE_STRING</name></expr>:</case>

<case>case <expr><name>CURL_ASN1_TELETEX_STRING</name></expr>:</case>

<case>case <expr><name>CURL_ASN1_IA5_STRING</name></expr>:</case>

<case>case <expr><name>CURL_ASN1_VISIBLE_STRING</name></expr>:</case>

<case>case <expr><name>CURL_ASN1_UNIVERSAL_STRING</name></expr>:</case>

<case>case <expr><name>CURL_ASN1_BMP_STRING</name></expr>:</case>

<return>return <expr><call><name>string2str</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name><name>elem</name><operator>-&gt;</operator><name>beg</name></name></expr></argument>, <argument><expr><name><name>elem</name><operator>-&gt;</operator><name>end</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><name>NULL</name></expr>;</return> 

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ssize_t</name></type> <name>encodeDN</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>buflen</name></decl></parameter>, <parameter><decl><type><name>curl_asn1Element</name> <modifier>*</modifier></type><name>dn</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>curl_asn1Element</name></type> <name>rdn</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>curl_asn1Element</name></type> <name>atv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>curl_asn1Element</name></type> <name>oid</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>curl_asn1Element</name></type> <name>value</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p3</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>p1</name> <operator>=</operator> <name><name>dn</name><operator>-&gt;</operator><name>beg</name></name></expr>;</init> <condition><expr><name>p1</name> <operator>&lt;</operator> <name><name>dn</name><operator>-&gt;</operator><name>end</name></name></expr>;</condition><incr/>)</control> <block>{<block_content>

<expr_stmt><expr><name>p1</name> <operator>=</operator> <call><name>getASN1Element</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rdn</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>, <argument><expr><name><name>dn</name><operator>-&gt;</operator><name>end</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>p1</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<for>for<control>(<init><expr><name>p2</name> <operator>=</operator> <name><name>rdn</name><operator>.</operator><name>beg</name></name></expr>;</init> <condition><expr><name>p2</name> <operator>&lt;</operator> <name><name>rdn</name><operator>.</operator><name>end</name></name></expr>;</condition><incr/>)</control> <block>{<block_content>

<expr_stmt><expr><name>p2</name> <operator>=</operator> <call><name>getASN1Element</name><argument_list>(<argument><expr><operator>&amp;</operator><name>atv</name></expr></argument>, <argument><expr><name>p2</name></expr></argument>, <argument><expr><name><name>rdn</name><operator>.</operator><name>end</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>p2</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p3</name> <operator>=</operator> <call><name>getASN1Element</name><argument_list>(<argument><expr><operator>&amp;</operator><name>oid</name></expr></argument>, <argument><expr><name><name>atv</name><operator>.</operator><name>beg</name></name></expr></argument>, <argument><expr><name><name>atv</name><operator>.</operator><name>end</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>p3</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>getASN1Element</name><argument_list>(<argument><expr><operator>&amp;</operator><name>value</name></expr></argument>, <argument><expr><name>p3</name></expr></argument>, <argument><expr><name><name>atv</name><operator>.</operator><name>end</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>ASN1tostr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>oid</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>str</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>l</name></expr>)</condition> <block>{<block_content>

<for>for<control>(<init><expr><name>p3</name> <operator>=</operator> <name>str</name></expr>;</init> <condition><expr><call><name>isupper</name><argument_list>(<argument><expr><operator>*</operator><name>p3</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>p3</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<empty_stmt>;</empty_stmt></block_content></block></for>

<for>for<control>(<init><expr><name>p3</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><operator>*</operator><name>p3</name> <operator>||</operator> <name>p3</name> <operator>-</operator> <name>str</name> <operator>&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr>?</condition><then> <expr><literal type="string">"/"</literal></expr></then><else>: <expr><literal type="string">", "</literal></expr></else></ternary></expr>;</init> <condition><expr><operator>*</operator><name>p3</name></expr>;</condition> <incr><expr><name>p3</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>l</name> <operator>&lt;</operator> <name>buflen</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>buf</name><index>[<expr><name>l</name></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>p3</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>l</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<for>for<control>(<init><expr><name>p3</name> <operator>=</operator> <name>str</name></expr>;</init> <condition><expr><operator>*</operator><name>p3</name></expr>;</condition> <incr><expr><name>p3</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>l</name> <operator>&lt;</operator> <name>buflen</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>buf</name><index>[<expr><name>l</name></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>p3</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>l</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>l</name> <operator>&lt;</operator> <name>buflen</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>buf</name><index>[<expr><name>l</name></expr>]</index></name> <operator>=</operator> <literal type="char">'='</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>l</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>ASN1tostr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>value</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>str</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<for>for<control>(<init><expr><name>p3</name> <operator>=</operator> <name>str</name></expr>;</init> <condition><expr><operator>*</operator><name>p3</name></expr>;</condition> <incr><expr><name>p3</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>l</name> <operator>&lt;</operator> <name>buflen</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>buf</name><index>[<expr><name>l</name></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>p3</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>l</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<return>return <expr><name>l</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>DNtostr</name><parameter_list>(<parameter><decl><type><name>curl_asn1Element</name> <modifier>*</modifier></type><name>dn</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>buflen</name> <init>= <expr><call><name>encodeDN</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>dn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>buflen</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>buflen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>buf</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>encodeDN</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>dn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><name>buflen</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>buf</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>Curl_parseX509</name><parameter_list>(<parameter><decl><type><name>curl_X509certificate</name> <modifier>*</modifier></type><name>cert</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>beg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>end</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>curl_asn1Element</name></type> <name>elem</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>curl_asn1Element</name></type> <name>tbsCertificate</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ccp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name>defaultVersion</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<expr_stmt><expr><name><name>cert</name><operator>-&gt;</operator><name>certificate</name><operator>.</operator><name>header</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cert</name><operator>-&gt;</operator><name>certificate</name><operator>.</operator><name>beg</name></name> <operator>=</operator> <name>beg</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cert</name><operator>-&gt;</operator><name>certificate</name><operator>.</operator><name>end</name></name> <operator>=</operator> <name>end</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>getASN1Element</name><argument_list>(<argument><expr><operator>&amp;</operator><name>elem</name></expr></argument>, <argument><expr><name>beg</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>beg</name> <operator>=</operator> <name><name>elem</name><operator>.</operator><name>beg</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>end</name> <operator>=</operator> <name><name>elem</name><operator>.</operator><name>end</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>beg</name> <operator>=</operator> <call><name>getASN1Element</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tbsCertificate</name></expr></argument>, <argument><expr><name>beg</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>beg</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>beg</name> <operator>=</operator> <call><name>getASN1Element</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cert</name><operator>-&gt;</operator><name>signatureAlgorithm</name></name></expr></argument>, <argument><expr><name>beg</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>beg</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>getASN1Element</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cert</name><operator>-&gt;</operator><name>signature</name></name></expr></argument>, <argument><expr><name>beg</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>beg</name> <operator>=</operator> <name><name>tbsCertificate</name><operator>.</operator><name>beg</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>end</name> <operator>=</operator> <name><name>tbsCertificate</name><operator>.</operator><name>end</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cert</name><operator>-&gt;</operator><name>version</name><operator>.</operator><name>header</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cert</name><operator>-&gt;</operator><name>version</name><operator>.</operator><name>beg</name></name> <operator>=</operator> <operator>&amp;</operator><name>defaultVersion</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cert</name><operator>-&gt;</operator><name>version</name><operator>.</operator><name>end</name></name> <operator>=</operator> <operator>&amp;</operator><name>defaultVersion</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>defaultVersion</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name>beg</name> <operator>=</operator> <call><name>getASN1Element</name><argument_list>(<argument><expr><operator>&amp;</operator><name>elem</name></expr></argument>, <argument><expr><name>beg</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>beg</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>elem</name><operator>.</operator><name>tag</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>getASN1Element</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cert</name><operator>-&gt;</operator><name>version</name></name></expr></argument>, <argument><expr><name><name>elem</name><operator>.</operator><name>beg</name></name></expr></argument>, <argument><expr><name><name>elem</name><operator>.</operator><name>end</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>beg</name> <operator>=</operator> <call><name>getASN1Element</name><argument_list>(<argument><expr><operator>&amp;</operator><name>elem</name></expr></argument>, <argument><expr><name>beg</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>beg</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>cert</name><operator>-&gt;</operator><name>serialNumber</name></name> <operator>=</operator> <name>elem</name></expr>;</expr_stmt>

<expr_stmt><expr><name>beg</name> <operator>=</operator> <call><name>getASN1Element</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cert</name><operator>-&gt;</operator><name>signatureAlgorithm</name></name></expr></argument>, <argument><expr><name>beg</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>beg</name> <operator>=</operator> <call><name>getASN1Element</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cert</name><operator>-&gt;</operator><name>issuer</name></name></expr></argument>, <argument><expr><name>beg</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>beg</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>beg</name> <operator>=</operator> <call><name>getASN1Element</name><argument_list>(<argument><expr><operator>&amp;</operator><name>elem</name></expr></argument>, <argument><expr><name>beg</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>beg</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ccp</name> <operator>=</operator> <call><name>getASN1Element</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cert</name><operator>-&gt;</operator><name>notBefore</name></name></expr></argument>, <argument><expr><name><name>elem</name><operator>.</operator><name>beg</name></name></expr></argument>, <argument><expr><name><name>elem</name><operator>.</operator><name>end</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>ccp</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>getASN1Element</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cert</name><operator>-&gt;</operator><name>notAfter</name></name></expr></argument>, <argument><expr><name>ccp</name></expr></argument>, <argument><expr><name><name>elem</name><operator>.</operator><name>end</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>beg</name> <operator>=</operator> <call><name>getASN1Element</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cert</name><operator>-&gt;</operator><name>subject</name></name></expr></argument>, <argument><expr><name>beg</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>beg</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>beg</name> <operator>=</operator> <call><name>getASN1Element</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cert</name><operator>-&gt;</operator><name>subjectPublicKeyInfo</name></name></expr></argument>, <argument><expr><name>beg</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>beg</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ccp</name> <operator>=</operator> <call><name>getASN1Element</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cert</name><operator>-&gt;</operator><name>subjectPublicKeyAlgorithm</name></name></expr></argument>,

<argument><expr><name><name>cert</name><operator>-&gt;</operator><name>subjectPublicKeyInfo</name><operator>.</operator><name>beg</name></name></expr></argument>,

<argument><expr><name><name>cert</name><operator>-&gt;</operator><name>subjectPublicKeyInfo</name><operator>.</operator><name>end</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>ccp</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>getASN1Element</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cert</name><operator>-&gt;</operator><name>subjectPublicKey</name></name></expr></argument>, <argument><expr><name>ccp</name></expr></argument>,

<argument><expr><name><name>cert</name><operator>-&gt;</operator><name>subjectPublicKeyInfo</name><operator>.</operator><name>end</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>cert</name><operator>-&gt;</operator><name>issuerUniqueID</name><operator>.</operator><name>tag</name></name> <operator>=</operator> <name><name>cert</name><operator>-&gt;</operator><name>subjectUniqueID</name><operator>.</operator><name>tag</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cert</name><operator>-&gt;</operator><name>extensions</name><operator>.</operator><name>tag</name></name> <operator>=</operator> <name><name>elem</name><operator>.</operator><name>tag</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cert</name><operator>-&gt;</operator><name>issuerUniqueID</name><operator>.</operator><name>header</name></name> <operator>=</operator> <name><name>cert</name><operator>-&gt;</operator><name>subjectUniqueID</name><operator>.</operator><name>header</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cert</name><operator>-&gt;</operator><name>issuerUniqueID</name><operator>.</operator><name>beg</name></name> <operator>=</operator> <name><name>cert</name><operator>-&gt;</operator><name>issuerUniqueID</name><operator>.</operator><name>end</name></name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cert</name><operator>-&gt;</operator><name>subjectUniqueID</name><operator>.</operator><name>beg</name></name> <operator>=</operator> <name><name>cert</name><operator>-&gt;</operator><name>subjectUniqueID</name><operator>.</operator><name>end</name></name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cert</name><operator>-&gt;</operator><name>extensions</name><operator>.</operator><name>header</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cert</name><operator>-&gt;</operator><name>extensions</name><operator>.</operator><name>beg</name></name> <operator>=</operator> <name><name>cert</name><operator>-&gt;</operator><name>extensions</name><operator>.</operator><name>end</name></name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>beg</name> <operator>&lt;</operator> <name>end</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>beg</name> <operator>=</operator> <call><name>getASN1Element</name><argument_list>(<argument><expr><operator>&amp;</operator><name>elem</name></expr></argument>, <argument><expr><name>beg</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>beg</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>elem</name><operator>.</operator><name>tag</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>cert</name><operator>-&gt;</operator><name>issuerUniqueID</name></name> <operator>=</operator> <name>elem</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>beg</name> <operator>&lt;</operator> <name>end</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>beg</name> <operator>=</operator> <call><name>getASN1Element</name><argument_list>(<argument><expr><operator>&amp;</operator><name>elem</name></expr></argument>, <argument><expr><name>beg</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>beg</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>elem</name><operator>.</operator><name>tag</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>cert</name><operator>-&gt;</operator><name>subjectUniqueID</name></name> <operator>=</operator> <name>elem</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>beg</name> <operator>&lt;</operator> <name>end</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>beg</name> <operator>=</operator> <call><name>getASN1Element</name><argument_list>(<argument><expr><operator>&amp;</operator><name>elem</name></expr></argument>, <argument><expr><name>beg</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>beg</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>elem</name><operator>.</operator><name>tag</name></name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>getASN1Element</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cert</name><operator>-&gt;</operator><name>extensions</name></name></expr></argument>, <argument><expr><name><name>elem</name><operator>.</operator><name>beg</name></name></expr></argument>, <argument><expr><name><name>elem</name><operator>.</operator><name>end</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type> <name>copySubstring</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>to</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>to</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>from</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>*</operator><name>from</name><operator>++</operator></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>to</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>

<return>return <expr><name>i</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dumpAlgo</name><parameter_list>(<parameter><decl><type><name>curl_asn1Element</name> <modifier>*</modifier></type><name>param</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>beg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>end</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>curl_asn1Element</name></type> <name>oid</name></decl>;</decl_stmt>

<expr_stmt><expr><name>beg</name> <operator>=</operator> <call><name>getASN1Element</name><argument_list>(<argument><expr><operator>&amp;</operator><name>oid</name></expr></argument>, <argument><expr><name>beg</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>beg</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>header</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>tag</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>beg</name></name> <operator>=</operator> <name><name>param</name><operator>-&gt;</operator><name>end</name></name> <operator>=</operator> <name>end</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>beg</name> <operator>&lt;</operator> <name>end</name></expr>)</condition><block type="pseudo"><block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>getASN1Element</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>beg</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

<return>return <expr><call><name>OID2str</name><argument_list>(<argument><expr><name><name>oid</name><operator>.</operator><name>beg</name></name></expr></argument>, <argument><expr><name><name>oid</name><operator>.</operator><name>end</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>do_pubkey_field</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>certnum</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>label</name></decl></parameter>, <parameter><decl><type><name>curl_asn1Element</name> <modifier>*</modifier></type><name>elem</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>output</name></decl>;</decl_stmt>

<expr_stmt><expr><name>output</name> <operator>=</operator> <call><name>ASN1tostr</name><argument_list>(<argument><expr><name>elem</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>output</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>ssl</name><operator>.</operator><name>certinfo</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>Curl_ssl_push_certinfo</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>certnum</name></expr></argument>, <argument><expr><name>label</name></expr></argument>, <argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>certnum</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">" %s: %s\n"</literal></expr></argument>, <argument><expr><name>label</name></expr></argument>, <argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>do_pubkey</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>certnum</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>algo</name></decl></parameter>, <parameter><decl><type><name>curl_asn1Element</name> <modifier>*</modifier></type><name>param</name></decl></parameter>,

<parameter><decl><type><name>curl_asn1Element</name> <modifier>*</modifier></type><name>pubkey</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>curl_asn1Element</name></type> <name>elem</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>curl_asn1Element</name></type> <name>pk</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>getASN1Element</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pk</name></expr></argument>, <argument><expr><name><name>pubkey</name><operator>-&gt;</operator><name>beg</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>pubkey</name><operator>-&gt;</operator><name>end</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>strcasecompare</name><argument_list>(<argument><expr><name>algo</name></expr></argument>, <argument><expr><literal type="string">"rsaEncryption"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>q</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>len</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>getASN1Element</name><argument_list>(<argument><expr><operator>&amp;</operator><name>elem</name></expr></argument>, <argument><expr><name><name>pk</name><operator>.</operator><name>beg</name></name></expr></argument>, <argument><expr><name><name>pk</name><operator>.</operator><name>end</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>p</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<for>for<control>(<init><expr><name>q</name> <operator>=</operator> <name><name>elem</name><operator>.</operator><name>beg</name></name></expr>;</init> <condition><expr><operator>!</operator><operator>*</operator><name>q</name> <operator>&amp;&amp;</operator> <name>q</name> <operator>&lt;</operator> <name><name>elem</name><operator>.</operator><name>end</name></name></expr>;</condition> <incr><expr><name>q</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<empty_stmt>;</empty_stmt></block_content></block></for>

<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>elem</name><operator>.</operator><name>end</name></name> <operator>-</operator> <name>q</name><operator>)</operator> <operator>*</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>len</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>q</name></expr>;</init> <condition><expr><operator>!</operator><operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">0x80</literal><operator>)</operator></expr>;</condition> <incr><expr><name>i</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>len</name><operator>--</operator></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">32</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>elem</name><operator>.</operator><name>beg</name></name> <operator>=</operator> <name>q</name></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>certnum</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">" RSA Public Key (%lu bits)\n"</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>ssl</name><operator>.</operator><name>certinfo</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>q</name> <operator>=</operator> <call><name>curl_maprintf</name><argument_list>(<argument><expr><literal type="string">"%lu"</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>q</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>Curl_ssl_push_certinfo</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>certnum</name></expr></argument>, <argument><expr><literal type="string">"RSA Public Key"</literal></expr></argument>, <argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>do_pubkey_field</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>certnum</name></expr></argument>, <argument><expr><literal type="string">"rsa(n)"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>elem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>getASN1Element</name><argument_list>(<argument><expr><operator>&amp;</operator><name>elem</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>pk</name><operator>.</operator><name>end</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>do_pubkey_field</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>certnum</name></expr></argument>, <argument><expr><literal type="string">"rsa(e)"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>elem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><call><name>strcasecompare</name><argument_list>(<argument><expr><name>algo</name></expr></argument>, <argument><expr><literal type="string">"dsa"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>getASN1Element</name><argument_list>(<argument><expr><operator>&amp;</operator><name>elem</name></expr></argument>, <argument><expr><name><name>param</name><operator>-&gt;</operator><name>beg</name></name></expr></argument>, <argument><expr><name><name>param</name><operator>-&gt;</operator><name>end</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>p</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>do_pubkey_field</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>certnum</name></expr></argument>, <argument><expr><literal type="string">"dsa(p)"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>elem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>getASN1Element</name><argument_list>(<argument><expr><operator>&amp;</operator><name>elem</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>param</name><operator>-&gt;</operator><name>end</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>p</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>do_pubkey_field</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>certnum</name></expr></argument>, <argument><expr><literal type="string">"dsa(q)"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>elem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>getASN1Element</name><argument_list>(<argument><expr><operator>&amp;</operator><name>elem</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>param</name><operator>-&gt;</operator><name>end</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>do_pubkey_field</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>certnum</name></expr></argument>, <argument><expr><literal type="string">"dsa(g)"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>elem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>do_pubkey_field</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>certnum</name></expr></argument>, <argument><expr><literal type="string">"dsa(pub_key)"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>pk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><call><name>strcasecompare</name><argument_list>(<argument><expr><name>algo</name></expr></argument>, <argument><expr><literal type="string">"dhpublicnumber"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>getASN1Element</name><argument_list>(<argument><expr><operator>&amp;</operator><name>elem</name></expr></argument>, <argument><expr><name><name>param</name><operator>-&gt;</operator><name>beg</name></name></expr></argument>, <argument><expr><name><name>param</name><operator>-&gt;</operator><name>end</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>p</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>do_pubkey_field</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>certnum</name></expr></argument>, <argument><expr><literal type="string">"dh(p)"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>elem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>getASN1Element</name><argument_list>(<argument><expr><operator>&amp;</operator><name>elem</name></expr></argument>, <argument><expr><name><name>param</name><operator>-&gt;</operator><name>beg</name></name></expr></argument>, <argument><expr><name><name>param</name><operator>-&gt;</operator><name>end</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>do_pubkey_field</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>certnum</name></expr></argument>, <argument><expr><literal type="string">"dh(g)"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>elem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>do_pubkey_field</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>certnum</name></expr></argument>, <argument><expr><literal type="string">"dh(pub_key)"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>pk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>CURLcode</name></type> <name>Curl_extract_certinfo</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>certnum</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>beg</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>end</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>curl_X509certificate</name></type> <name>cert</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>curl_asn1Element</name></type> <name>param</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ccp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cp1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>cl1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cp2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>version</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>j</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>ssl</name><operator>.</operator><name>certinfo</name></name></expr>)</condition><block type="pseudo"><block_content>

<if_stmt><if>if<condition>(<expr><name>certnum</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_OK</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>Curl_parseX509</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cert</name></expr></argument>, <argument><expr><name>beg</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_PEER_FAILED_VERIFICATION</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ccp</name> <operator>=</operator> <call><name>DNtostr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cert</name><operator>.</operator><name>subject</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>ccp</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>ssl</name><operator>.</operator><name>certinfo</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>Curl_ssl_push_certinfo</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>certnum</name></expr></argument>, <argument><expr><literal type="string">"Subject"</literal></expr></argument>, <argument><expr><name>ccp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>certnum</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"%2d Subject: %s\n"</literal></expr></argument>, <argument><expr><name>certnum</name></expr></argument>, <argument><expr><name>ccp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>ccp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ccp</name> <operator>=</operator> <call><name>DNtostr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cert</name><operator>.</operator><name>issuer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>ccp</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>ssl</name><operator>.</operator><name>certinfo</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>Curl_ssl_push_certinfo</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>certnum</name></expr></argument>, <argument><expr><literal type="string">"Issuer"</literal></expr></argument>, <argument><expr><name>ccp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>certnum</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">" Issuer: %s\n"</literal></expr></argument>, <argument><expr><name>ccp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>ccp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>version</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>ccp</name> <operator>=</operator> <name><name>cert</name><operator>.</operator><name>version</name><operator>.</operator><name>beg</name></name></expr>;</init> <condition><expr><name>ccp</name> <operator>&lt;</operator> <name><name>cert</name><operator>.</operator><name>version</name><operator>.</operator><name>end</name></name></expr>;</condition> <incr><expr><name>ccp</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>version</name> <operator>=</operator> <operator>(</operator><name>version</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>*</operator><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>ccp</name></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>ssl</name><operator>.</operator><name>certinfo</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ccp</name> <operator>=</operator> <call><name>curl_maprintf</name><argument_list>(<argument><expr><literal type="string">"%lx"</literal></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>ccp</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>Curl_ssl_push_certinfo</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>certnum</name></expr></argument>, <argument><expr><literal type="string">"Version"</literal></expr></argument>, <argument><expr><name>ccp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>ccp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>certnum</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">" Version: %lu (0x%lx)\n"</literal></expr></argument>, <argument><expr><name>version</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ccp</name> <operator>=</operator> <call><name>ASN1tostr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cert</name><operator>.</operator><name>serialNumber</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>ccp</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>ssl</name><operator>.</operator><name>certinfo</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>Curl_ssl_push_certinfo</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>certnum</name></expr></argument>, <argument><expr><literal type="string">"Serial Number"</literal></expr></argument>, <argument><expr><name>ccp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>certnum</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">" Serial Number: %s\n"</literal></expr></argument>, <argument><expr><name>ccp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>ccp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ccp</name> <operator>=</operator> <call><name>dumpAlgo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>param</name></expr></argument>, <argument><expr><name><name>cert</name><operator>.</operator><name>signatureAlgorithm</name><operator>.</operator><name>beg</name></name></expr></argument>,

<argument><expr><name><name>cert</name><operator>.</operator><name>signatureAlgorithm</name><operator>.</operator><name>end</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>ccp</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>ssl</name><operator>.</operator><name>certinfo</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>Curl_ssl_push_certinfo</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>certnum</name></expr></argument>, <argument><expr><literal type="string">"Signature Algorithm"</literal></expr></argument>, <argument><expr><name>ccp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>certnum</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">" Signature Algorithm: %s\n"</literal></expr></argument>, <argument><expr><name>ccp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>ccp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ccp</name> <operator>=</operator> <call><name>ASN1tostr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cert</name><operator>.</operator><name>notBefore</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>ccp</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>ssl</name><operator>.</operator><name>certinfo</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>Curl_ssl_push_certinfo</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>certnum</name></expr></argument>, <argument><expr><literal type="string">"Start Date"</literal></expr></argument>, <argument><expr><name>ccp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>certnum</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">" Start Date: %s\n"</literal></expr></argument>, <argument><expr><name>ccp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>ccp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ccp</name> <operator>=</operator> <call><name>ASN1tostr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cert</name><operator>.</operator><name>notAfter</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>ccp</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>ssl</name><operator>.</operator><name>certinfo</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>Curl_ssl_push_certinfo</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>certnum</name></expr></argument>, <argument><expr><literal type="string">"Expire Date"</literal></expr></argument>, <argument><expr><name>ccp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>certnum</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">" Expire Date: %s\n"</literal></expr></argument>, <argument><expr><name>ccp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>ccp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ccp</name> <operator>=</operator> <call><name>dumpAlgo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>param</name></expr></argument>, <argument><expr><name><name>cert</name><operator>.</operator><name>subjectPublicKeyAlgorithm</name><operator>.</operator><name>beg</name></name></expr></argument>,

<argument><expr><name><name>cert</name><operator>.</operator><name>subjectPublicKeyAlgorithm</name><operator>.</operator><name>end</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>ccp</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>ssl</name><operator>.</operator><name>certinfo</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>Curl_ssl_push_certinfo</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>certnum</name></expr></argument>, <argument><expr><literal type="string">"Public Key Algorithm"</literal></expr></argument>, <argument><expr><name>ccp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>certnum</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">" Public Key Algorithm: %s\n"</literal></expr></argument>, <argument><expr><name>ccp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>do_pubkey</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>certnum</name></expr></argument>, <argument><expr><name>ccp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>param</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cert</name><operator>.</operator><name>subjectPublicKey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>ccp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ccp</name> <operator>=</operator> <call><name>ASN1tostr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cert</name><operator>.</operator><name>signature</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>ccp</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>ssl</name><operator>.</operator><name>certinfo</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>Curl_ssl_push_certinfo</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>certnum</name></expr></argument>, <argument><expr><literal type="string">"Signature"</literal></expr></argument>, <argument><expr><name>ccp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>certnum</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">" Signature: %s\n"</literal></expr></argument>, <argument><expr><name>ccp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>ccp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_base64_encode</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>cert</name><operator>.</operator><name>certificate</name><operator>.</operator><name>beg</name></name></expr></argument>,

<argument><expr><name><name>cert</name><operator>.</operator><name>certificate</name><operator>.</operator><name>end</name></name> <operator>-</operator> <name><name>cert</name><operator>.</operator><name>certificate</name><operator>.</operator><name>beg</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>cp1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cl1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">28</literal> <operator>+</operator> <name>cl1</name> <operator>+</operator> <operator>(</operator><name>cl1</name> <operator>+</operator> <literal type="number">64</literal> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">64</literal> <operator>+</operator> <literal type="number">26</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>cp2</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>cp2</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>cp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>copySubstring</name><argument_list>(<argument><expr><name>cp2</name></expr></argument>, <argument><expr><literal type="string">"-----BEGIN CERTIFICATE-----"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>cl1</name></expr>;</condition> <incr><expr><name>j</name> <operator>+=</operator> <literal type="number">64</literal></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>i</name> <operator>+=</operator> <call><name>copySubstring</name><argument_list>(<argument><expr><name>cp2</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>cp1</name> <operator>+</operator> <name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>i</name> <operator>+=</operator> <call><name>copySubstring</name><argument_list>(<argument><expr><name>cp2</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><literal type="string">"-----END CERTIFICATE-----"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cp2</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>cp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>ssl</name><operator>.</operator><name>certinfo</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>Curl_ssl_push_certinfo</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>certnum</name></expr></argument>, <argument><expr><literal type="string">"Cert"</literal></expr></argument>, <argument><expr><name>cp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>certnum</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>cp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>cp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_GSKIT</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>checkOID</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>beg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>end</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>oid</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>curl_asn1Element</name></type> <name>e</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ccp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>matched</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ccp</name> <operator>=</operator> <call><name>getASN1Element</name><argument_list>(<argument><expr><operator>&amp;</operator><name>e</name></expr></argument>, <argument><expr><name>beg</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>ccp</name> <operator>||</operator> <name><name>e</name><operator>.</operator><name>tag</name></name> <operator>!=</operator> <name>CURL_ASN1_OBJECT_IDENTIFIER</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>OID2str</name><argument_list>(<argument><expr><name><name>e</name><operator>.</operator><name>beg</name></name></expr></argument>, <argument><expr><name><name>e</name><operator>.</operator><name>end</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>p</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>matched</name> <operator>=</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>oid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><ternary><condition><expr><name>matched</name></expr>?</condition><then> <expr><name>ccp</name></expr></then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name>CURLcode</name></type> <name>Curl_verifyhost</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>beg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>end</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>curl_X509certificate</name></type> <name>cert</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>curl_asn1Element</name></type> <name>dn</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>curl_asn1Element</name></type> <name>elem</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>curl_asn1Element</name></type> <name>ext</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>curl_asn1Element</name></type> <name>name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>q</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>dnsname</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>matched</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>addrlen</name> <init>= <expr><operator>(</operator><name>size_t</name><operator>)</operator> <operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>hostname</name> <init>= <expr><ternary><condition><expr><call><name>SSL_IS_PROXY</name><argument_list>()</argument_list></call></expr>?</condition><then> <expr><name><name>conn</name><operator>-&gt;</operator><name>http_proxy</name><operator>.</operator><name>host</name><operator>.</operator><name>name</name></name></expr></then><else>:

<expr><name><name>conn</name><operator>-&gt;</operator><name>host</name><operator>.</operator><name>name</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>dispname</name> <init>= <expr><ternary><condition><expr><call><name>SSL_IS_PROXY</name><argument_list>()</argument_list></call></expr>?</condition><then>

<expr><name><name>conn</name><operator>-&gt;</operator><name>http_proxy</name><operator>.</operator><name>host</name><operator>.</operator><name>dispname</name></name></expr></then><else>:

<expr><name><name>conn</name><operator>-&gt;</operator><name>host</name><operator>.</operator><name>dispname</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_IPV6</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name><name>struct</name> <name>in6_addr</name></name></type> <name>addr</name></decl>;</decl_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name><name>struct</name> <name>in_addr</name></name></type> <name>addr</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>SSL_CONN_CONFIG</name><argument_list>(<argument><expr><name>verifyhost</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_OK</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>Curl_parseX509</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cert</name></expr></argument>, <argument><expr><name>beg</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_PEER_FAILED_VERIFICATION</name></expr>;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_IPV6</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>ipv6_ip</name></name> <operator>&amp;&amp;</operator> <call><name>Curl_inet_pton</name><argument_list>(<argument><expr><name>AF_INET6</name></expr></argument>, <argument><expr><name>hostname</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>addrlen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>in6_addr</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

if<condition>(<expr><call><name>Curl_inet_pton</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><name>hostname</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>addrlen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>in_addr</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for<control>(<init><expr><name>p</name> <operator>=</operator> <name><name>cert</name><operator>.</operator><name>extensions</name><operator>.</operator><name>beg</name></name></expr>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name><name>cert</name><operator>.</operator><name>extensions</name><operator>.</operator><name>end</name></name> <operator>&amp;&amp;</operator> <name>matched</name> <operator>!=</operator> <literal type="number">1</literal></expr>;</condition><incr/>)</control> <block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>getASN1Element</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ext</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>cert</name><operator>.</operator><name>extensions</name><operator>.</operator><name>end</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>p</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_PEER_FAILED_VERIFICATION</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ext</name><operator>.</operator><name>beg</name></name> <operator>=</operator> <call><name>checkOID</name><argument_list>(<argument><expr><name><name>ext</name><operator>.</operator><name>beg</name></name></expr></argument>, <argument><expr><name><name>ext</name><operator>.</operator><name>end</name></name></expr></argument>, <argument><expr><name>sanOID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ext</name><operator>.</operator><name>beg</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ext</name><operator>.</operator><name>beg</name></name> <operator>=</operator> <call><name>getASN1Element</name><argument_list>(<argument><expr><operator>&amp;</operator><name>elem</name></expr></argument>, <argument><expr><name><name>ext</name><operator>.</operator><name>beg</name></name></expr></argument>, <argument><expr><name><name>ext</name><operator>.</operator><name>end</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>ext</name><operator>.</operator><name>beg</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_PEER_FAILED_VERIFICATION</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>elem</name><operator>.</operator><name>tag</name></name> <operator>==</operator> <name>CURL_ASN1_BOOLEAN</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ext</name><operator>.</operator><name>beg</name></name> <operator>=</operator> <call><name>getASN1Element</name><argument_list>(<argument><expr><operator>&amp;</operator><name>elem</name></expr></argument>, <argument><expr><name><name>ext</name><operator>.</operator><name>beg</name></name></expr></argument>, <argument><expr><name><name>ext</name><operator>.</operator><name>end</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>ext</name><operator>.</operator><name>beg</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_PEER_FAILED_VERIFICATION</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>getASN1Element</name><argument_list>(<argument><expr><operator>&amp;</operator><name>elem</name></expr></argument>, <argument><expr><name><name>elem</name><operator>.</operator><name>beg</name></name></expr></argument>, <argument><expr><name><name>elem</name><operator>.</operator><name>end</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_PEER_FAILED_VERIFICATION</name></expr>;</return></block_content></block></if></if_stmt>

<for>for<control>(<init><expr><name>q</name> <operator>=</operator> <name><name>elem</name><operator>.</operator><name>beg</name></name></expr>;</init> <condition><expr><name>matched</name> <operator>!=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>q</name> <operator>&lt;</operator> <name><name>elem</name><operator>.</operator><name>end</name></name></expr>;</condition><incr/>)</control> <block>{<block_content>

<expr_stmt><expr><name>q</name> <operator>=</operator> <call><name>getASN1Element</name><argument_list>(<argument><expr><operator>&amp;</operator><name>name</name></expr></argument>, <argument><expr><name>q</name></expr></argument>, <argument><expr><name><name>elem</name><operator>.</operator><name>end</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>q</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<switch>switch<condition>(<expr><name><name>name</name><operator>.</operator><name>tag</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">2</literal></expr>:</case> 

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>utf8asn1str</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dnsname</name></expr></argument>, <argument><expr><name>CURL_ASN1_IA5_STRING</name></expr></argument>,

<argument><expr><name><name>name</name><operator>.</operator><name>beg</name></name></expr></argument>, <argument><expr><name><name>name</name><operator>.</operator><name>end</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>len</name> <operator>==</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>dnsname</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>matched</name> <operator>=</operator> <call><name>Curl_cert_hostcheck</name><argument_list>(<argument><expr><name>dnsname</name></expr></argument>, <argument><expr><name>hostname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>matched</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>dnsname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">7</literal></expr>:</case> 

<expr_stmt><expr><name>matched</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <operator>(</operator><name><name>name</name><operator>.</operator><name>end</name></name> <operator>-</operator> <name><name>name</name><operator>.</operator><name>beg</name></name><operator>)</operator> <operator>==</operator> <name>addrlen</name> <operator>&amp;&amp;</operator>

<operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><name><name>name</name><operator>.</operator><name>beg</name></name></expr></argument>, <argument><expr><name>addrlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<switch>switch<condition>(<expr><name>matched</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"\t subjectAltName: %s matched\n"</literal></expr></argument>, <argument><expr><name>dispname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

<case>case <expr><literal type="number">0</literal></expr>:</case>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"\t subjectAltName does not match %s\n"</literal></expr></argument>, <argument><expr><name>dispname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_PEER_FAILED_VERIFICATION</name></expr>;</return>

</block_content>}</block></switch>

<expr_stmt><expr><name><name>name</name><operator>.</operator><name>header</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>name</name><operator>.</operator><name>beg</name></name> <operator>=</operator> <name><name>name</name><operator>.</operator><name>end</name></name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>q</name> <operator>=</operator> <name><name>cert</name><operator>.</operator><name>subject</name><operator>.</operator><name>beg</name></name></expr>;</expr_stmt>

<while>while<condition>(<expr><name>q</name> <operator>&lt;</operator> <name><name>cert</name><operator>.</operator><name>subject</name><operator>.</operator><name>end</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>q</name> <operator>=</operator> <call><name>getASN1Element</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dn</name></expr></argument>, <argument><expr><name>q</name></expr></argument>, <argument><expr><name><name>cert</name><operator>.</operator><name>subject</name><operator>.</operator><name>end</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>q</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<for>for<control>(<init><expr><name>p</name> <operator>=</operator> <name><name>dn</name><operator>.</operator><name>beg</name></name></expr>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name><name>dn</name><operator>.</operator><name>end</name></name></expr>;</condition><incr/>)</control> <block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>getASN1Element</name><argument_list>(<argument><expr><operator>&amp;</operator><name>elem</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>dn</name><operator>.</operator><name>end</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>p</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_PEER_FAILED_VERIFICATION</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>elem</name><operator>.</operator><name>beg</name></name> <operator>=</operator> <call><name>checkOID</name><argument_list>(<argument><expr><name><name>elem</name><operator>.</operator><name>beg</name></name></expr></argument>, <argument><expr><name><name>elem</name><operator>.</operator><name>end</name></name></expr></argument>, <argument><expr><name>cnOID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>elem</name><operator>.</operator><name>beg</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>name</name> <operator>=</operator> <name>elem</name></expr>;</expr_stmt></block_content></block></if></if_stmt> 

</block_content>}</block></for>

</block_content>}</block></while>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>getASN1Element</name><argument_list>(<argument><expr><operator>&amp;</operator><name>elem</name></expr></argument>, <argument><expr><name><name>name</name><operator>.</operator><name>beg</name></name></expr></argument>, <argument><expr><name><name>name</name><operator>.</operator><name>end</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"SSL: unable to obtain common name from peer certificate"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>utf8asn1str</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dnsname</name></expr></argument>, <argument><expr><name><name>elem</name><operator>.</operator><name>tag</name></name></expr></argument>, <argument><expr><name><name>elem</name><operator>.</operator><name>beg</name></name></expr></argument>, <argument><expr><name><name>elem</name><operator>.</operator><name>end</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>dnsname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>dnsname</name></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"SSL: illegal cert name field"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>(<expr><call><name>Curl_cert_hostcheck</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <name>dnsname</name></expr></argument>, <argument><expr><name>hostname</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"\t common name: %s (matched)\n"</literal></expr></argument>, <argument><expr><name>dnsname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>dnsname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"SSL: certificate subject name '%s' does not match "</literal>

<literal type="string">"target host name '%s'"</literal></expr></argument>, <argument><expr><name>dnsname</name></expr></argument>, <argument><expr><name>dispname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>dnsname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>CURLE_PEER_FAILED_VERIFICATION</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</unit>
