<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\curl-analysis\_cppstats\curl\lib\vtls\vtls.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_setup.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SYS_TYPES_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SYS_STAT_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_FCNTL_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"urldata.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vtls.h"</cpp:file></cpp:include> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"slist.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sendf.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"strcase.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"url.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"progress.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"share.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"multiif.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"timeval.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_md5.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"warnless.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_base64.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_printf.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_memory.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memdebug.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSLSESSION_SHARED</name><parameter_list>(<parameter><type><name>data</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(data-&gt;share &amp;&amp; (data-&gt;share-&gt;specifier &amp; (1&lt;&lt;CURL_LOCK_DATA_SSL_SESSION)))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLONE_STRING</name><parameter_list>(<parameter><type><name>var</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if(source-&gt;var) { dest-&gt;var = strdup(source-&gt;var); if(!dest-&gt;var) return FALSE; } else dest-&gt;var = NULL;</cpp:value></cpp:define>

<function><type><name>bool</name></type>

<name>Curl_ssl_config_matches</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ssl_primary_config</name></name><modifier>*</modifier></type> <name>data</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>ssl_primary_config</name></name><modifier>*</modifier></type> <name>needle</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>version</name></name> <operator>==</operator> <name><name>needle</name><operator>-&gt;</operator><name>version</name></name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>version_max</name></name> <operator>==</operator> <name><name>needle</name><operator>-&gt;</operator><name>version_max</name></name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>verifypeer</name></name> <operator>==</operator> <name><name>needle</name><operator>-&gt;</operator><name>verifypeer</name></name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>verifyhost</name></name> <operator>==</operator> <name><name>needle</name><operator>-&gt;</operator><name>verifyhost</name></name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>verifystatus</name></name> <operator>==</operator> <name><name>needle</name><operator>-&gt;</operator><name>verifystatus</name></name><operator>)</operator> <operator>&amp;&amp;</operator>

<call><name>Curl_safe_strcasecompare</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>CApath</name></name></expr></argument>, <argument><expr><name><name>needle</name><operator>-&gt;</operator><name>CApath</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<call><name>Curl_safe_strcasecompare</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>CAfile</name></name></expr></argument>, <argument><expr><name><name>needle</name><operator>-&gt;</operator><name>CAfile</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<call><name>Curl_safe_strcasecompare</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>clientcert</name></name></expr></argument>, <argument><expr><name><name>needle</name><operator>-&gt;</operator><name>clientcert</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<call><name>Curl_safe_strcasecompare</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>random_file</name></name></expr></argument>, <argument><expr><name><name>needle</name><operator>-&gt;</operator><name>random_file</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<call><name>Curl_safe_strcasecompare</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>egdsocket</name></name></expr></argument>, <argument><expr><name><name>needle</name><operator>-&gt;</operator><name>egdsocket</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<call><name>Curl_safe_strcasecompare</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>cipher_list</name></name></expr></argument>, <argument><expr><name><name>needle</name><operator>-&gt;</operator><name>cipher_list</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<call><name>Curl_safe_strcasecompare</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>cipher_list13</name></name></expr></argument>, <argument><expr><name><name>needle</name><operator>-&gt;</operator><name>cipher_list13</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<call><name>Curl_safe_strcasecompare</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>pinned_key</name></name></expr></argument>, <argument><expr><name><name>needle</name><operator>-&gt;</operator><name>pinned_key</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type>

<name>Curl_clone_primary_ssl_config</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ssl_primary_config</name></name> <modifier>*</modifier></type><name>source</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>ssl_primary_config</name></name> <modifier>*</modifier></type><name>dest</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>dest</name><operator>-&gt;</operator><name>version</name></name> <operator>=</operator> <name><name>source</name><operator>-&gt;</operator><name>version</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dest</name><operator>-&gt;</operator><name>version_max</name></name> <operator>=</operator> <name><name>source</name><operator>-&gt;</operator><name>version_max</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dest</name><operator>-&gt;</operator><name>verifypeer</name></name> <operator>=</operator> <name><name>source</name><operator>-&gt;</operator><name>verifypeer</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dest</name><operator>-&gt;</operator><name>verifyhost</name></name> <operator>=</operator> <name><name>source</name><operator>-&gt;</operator><name>verifyhost</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dest</name><operator>-&gt;</operator><name>verifystatus</name></name> <operator>=</operator> <name><name>source</name><operator>-&gt;</operator><name>verifystatus</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dest</name><operator>-&gt;</operator><name>sessionid</name></name> <operator>=</operator> <name><name>source</name><operator>-&gt;</operator><name>sessionid</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CLONE_STRING</name><argument_list>(<argument><expr><name>CApath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CLONE_STRING</name><argument_list>(<argument><expr><name>CAfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CLONE_STRING</name><argument_list>(<argument><expr><name>clientcert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CLONE_STRING</name><argument_list>(<argument><expr><name>random_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CLONE_STRING</name><argument_list>(<argument><expr><name>egdsocket</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CLONE_STRING</name><argument_list>(<argument><expr><name>cipher_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CLONE_STRING</name><argument_list>(<argument><expr><name>cipher_list13</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CLONE_STRING</name><argument_list>(<argument><expr><name>pinned_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>TRUE</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>Curl_free_primary_ssl_config</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ssl_primary_config</name></name><modifier>*</modifier></type> <name>sslc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>sslc</name><operator>-&gt;</operator><name>CApath</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>sslc</name><operator>-&gt;</operator><name>CAfile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>sslc</name><operator>-&gt;</operator><name>clientcert</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>sslc</name><operator>-&gt;</operator><name>random_file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>sslc</name><operator>-&gt;</operator><name>egdsocket</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>sslc</name><operator>-&gt;</operator><name>cipher_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>sslc</name><operator>-&gt;</operator><name>cipher_list13</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>sslc</name><operator>-&gt;</operator><name>pinned_key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_SSL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>multissl_init</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>Curl_ssl</name></name> <modifier>*</modifier></type><name>backend</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>int</name></type> <name>Curl_ssl_backend</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_SSL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>multissl_init</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>Curl_ssl</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>id</name></name></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><name>CURLSSLBACKEND_NONE</name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_SSL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>init_ssl</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>Curl_ssl_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>init_ssl</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>init_ssl</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt> 

<return>return <expr><call><name><name>Curl_ssl</name><operator>-&gt;</operator><name>init</name></name><argument_list>()</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>Curl_ssl_cleanup</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>init_ssl</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>Curl_ssl</name><operator>-&gt;</operator><name>cleanup</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>init_ssl</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>ssl_prefs_check</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>long</name></type> <name>sslver</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>ssl</name><operator>.</operator><name>primary</name><operator>.</operator><name>version</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>sslver</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>sslver</name> <operator>&gt;=</operator> <name>CURL_SSLVERSION_LAST</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Unrecognized parameter value passed via CURLOPT_SSLVERSION"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<switch>switch<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>ssl</name><operator>.</operator><name>primary</name><operator>.</operator><name>version_max</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>CURL_SSLVERSION_MAX_NONE</name></expr>:</case>

<case>case <expr><name>CURL_SSLVERSION_MAX_DEFAULT</name></expr>:</case>

<break>break;</break>

<default>default:</default>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>ssl</name><operator>.</operator><name>primary</name><operator>.</operator><name>version_max</name></name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&lt;</operator> <name>sslver</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"CURL_SSLVERSION_MAX incompatible with CURL_SSLVERSION"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></switch>

<return>return <expr><name>TRUE</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type>

<name>ssl_connect_init_proxy</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sockindex</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>DEBUGASSERT</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>proxy_ssl_connected</name><index>[<expr><name>sockindex</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>ssl_connection_complete</name> <operator>==</operator> <name><name>conn</name><operator>-&gt;</operator><name>ssl</name><index>[<expr><name>sockindex</name></expr>]</index></name><operator>.</operator><name>state</name> <operator>&amp;&amp;</operator>

<operator>!</operator><name><name>conn</name><operator>-&gt;</operator><name>proxy_ssl</name><index>[<expr><name>sockindex</name></expr>]</index></name><operator>.</operator><name>use</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>ssl_backend_data</name></name> <modifier>*</modifier></type><name>pbdata</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><name><name>Curl_ssl</name><operator>-&gt;</operator><name>supports</name></name> <operator>&amp;</operator> <name>SSLSUPP_HTTPS_PROXY</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_NOT_BUILT_IN</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>pbdata</name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>proxy_ssl</name><index>[<expr><name>sockindex</name></expr>]</index></name><operator>.</operator><name>backend</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>proxy_ssl</name><index>[<expr><name>sockindex</name></expr>]</index></name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>ssl</name><index>[<expr><name>sockindex</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>ssl</name><index>[<expr><name>sockindex</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>ssl</name><index>[<expr><name>sockindex</name></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>pbdata</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>Curl_ssl</name><operator>-&gt;</operator><name>sizeof_ssl_backend_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>ssl</name><index>[<expr><name>sockindex</name></expr>]</index></name><operator>.</operator><name>backend</name> <operator>=</operator> <name>pbdata</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>CURLcode</name></type>

<name>Curl_ssl_connect</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sockindex</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>proxy_ssl_connected</name><index>[<expr><name>sockindex</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>ssl_connect_init_proxy</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>sockindex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>ssl_prefs_check</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_SSL_CONNECT_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>ssl</name><index>[<expr><name>sockindex</name></expr>]</index></name><operator>.</operator><name>use</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>ssl</name><index>[<expr><name>sockindex</name></expr>]</index></name><operator>.</operator><name>state</name> <operator>=</operator> <name>ssl_connection_negotiating</name></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name><name>Curl_ssl</name><operator>-&gt;</operator><name>connect_blocking</name></name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>sockindex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>result</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>Curl_pgrsTime</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>TIMER_APPCONNECT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>CURLcode</name></type>

<name>Curl_ssl_connect_nonblocking</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sockindex</name></decl></parameter>,

<parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>done</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>proxy_ssl_connected</name><index>[<expr><name>sockindex</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>ssl_connect_init_proxy</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>sockindex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>ssl_prefs_check</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_SSL_CONNECT_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>ssl</name><index>[<expr><name>sockindex</name></expr>]</index></name><operator>.</operator><name>use</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name><name>Curl_ssl</name><operator>-&gt;</operator><name>connect_nonblocking</name></name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>sockindex</name></expr></argument>, <argument><expr><name>done</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>result</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>done</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>Curl_pgrsTime</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>TIMER_APPCONNECT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>Curl_ssl_sessionid_lock</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>SSLSESSION_SHARED</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>Curl_share_lock</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>,

<argument><expr><name>CURL_LOCK_DATA_SSL_SESSION</name></expr></argument>, <argument><expr><name>CURL_LOCK_ACCESS_SINGLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>Curl_ssl_sessionid_unlock</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>SSLSESSION_SHARED</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>Curl_share_unlock</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>CURL_LOCK_DATA_SSL_SESSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>Curl_ssl_getsessionid</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>ssl_sessionid</name></decl></parameter>,

<parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>idsize</name></decl></parameter>, 

<parameter><decl><type><name>int</name></type> <name>sockindex</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>curl_ssl_session</name></name> <modifier>*</modifier></type><name>check</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name> <modifier>*</modifier></type><name>general_age</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>no_match</name> <init>= <expr><name>TRUE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>isProxy</name> <init>= <expr><call><name>CONNECT_PROXY_SSL</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ssl_primary_config</name></name> <modifier>*</modifier> <specifier>const</specifier></type> <name>ssl_config</name> <init>= <expr><ternary><condition><expr><name>isProxy</name></expr> ?</condition><then>

<expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>proxy_ssl_config</name></name></expr> </then><else>:

<expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>ssl_config</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>name</name> <init>= <expr><ternary><condition><expr><name>isProxy</name></expr> ?</condition><then> <expr><name><name>conn</name><operator>-&gt;</operator><name>http_proxy</name><operator>.</operator><name>host</name><operator>.</operator><name>name</name></name></expr> </then><else>:

<expr><name><name>conn</name><operator>-&gt;</operator><name>host</name><operator>.</operator><name>name</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>port</name> <init>= <expr><ternary><condition><expr><name>isProxy</name></expr> ?</condition><then> <expr><operator>(</operator><name>int</name><operator>)</operator><name><name>conn</name><operator>-&gt;</operator><name>port</name></name></expr> </then><else>: <expr><name><name>conn</name><operator>-&gt;</operator><name>remote_port</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>ssl_sessionid</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DEBUGASSERT</name><argument_list>(<argument><expr><call><name>SSL_SET_OPTION</name><argument_list>(<argument><expr><name><name>primary</name><operator>.</operator><name>sessionid</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>SSL_SET_OPTION</name><argument_list>(<argument><expr><name><name>primary</name><operator>.</operator><name>sessionid</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>SSLSESSION_SHARED</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>general_age</name> <operator>=</operator> <operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>share</name><operator>-&gt;</operator><name>sessionage</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>general_age</name> <operator>=</operator> <operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>sessionage</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>general_ssl</name><operator>.</operator><name>max_ssl_sessions</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>check</name> <operator>=</operator> <operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>session</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>check</name><operator>-&gt;</operator><name>sessionid</name></name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>strcasecompare</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>check</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<operator>(</operator><operator>(</operator><operator>!</operator><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>conn_to_host</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>check</name><operator>-&gt;</operator><name>conn_to_host</name></name><operator>)</operator> <operator>||</operator>

<operator>(</operator><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>conn_to_host</name></name> <operator>&amp;&amp;</operator> <name><name>check</name><operator>-&gt;</operator><name>conn_to_host</name></name> <operator>&amp;&amp;</operator>

<call><name>strcasecompare</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>conn_to_host</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>check</name><operator>-&gt;</operator><name>conn_to_host</name></name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><operator>(</operator><operator>!</operator><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>conn_to_port</name></name> <operator>&amp;&amp;</operator> <name><name>check</name><operator>-&gt;</operator><name>conn_to_port</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>||</operator>

<operator>(</operator><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>conn_to_port</name></name> <operator>&amp;&amp;</operator> <name><name>check</name><operator>-&gt;</operator><name>conn_to_port</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator>

<name><name>conn</name><operator>-&gt;</operator><name>conn_to_port</name></name> <operator>==</operator> <name><name>check</name><operator>-&gt;</operator><name>conn_to_port</name></name><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name>port</name> <operator>==</operator> <name><name>check</name><operator>-&gt;</operator><name>remote_port</name></name><operator>)</operator> <operator>&amp;&amp;</operator>

<call><name>strcasecompare</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>handler</name><operator>-&gt;</operator><name>scheme</name></name></expr></argument>, <argument><expr><name><name>check</name><operator>-&gt;</operator><name>scheme</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<call><name>Curl_ssl_config_matches</name><argument_list>(<argument><expr><name>ssl_config</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>check</name><operator>-&gt;</operator><name>ssl_config</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>general_age</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>check</name><operator>-&gt;</operator><name>age</name></name> <operator>=</operator> <operator>*</operator><name>general_age</name></expr>;</expr_stmt> 

<expr_stmt><expr><operator>*</operator><name>ssl_sessionid</name> <operator>=</operator> <name><name>check</name><operator>-&gt;</operator><name>sessionid</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>idsize</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>idsize</name> <operator>=</operator> <name><name>check</name><operator>-&gt;</operator><name>idsize</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>no_match</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>no_match</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>Curl_ssl_kill_session</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>curl_ssl_session</name></name> <modifier>*</modifier></type><name>session</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>session</name><operator>-&gt;</operator><name>sessionid</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>Curl_ssl</name><operator>-&gt;</operator><name>session_free</name></name><argument_list>(<argument><expr><name><name>session</name><operator>-&gt;</operator><name>sessionid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>session</name><operator>-&gt;</operator><name>sessionid</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>session</name><operator>-&gt;</operator><name>age</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>Curl_free_primary_ssl_config</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>session</name><operator>-&gt;</operator><name>ssl_config</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>session</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>session</name><operator>-&gt;</operator><name>conn_to_host</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>Curl_ssl_delsessionid</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ssl_sessionid</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>general_ssl</name><operator>.</operator><name>max_ssl_sessions</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>curl_ssl_session</name></name> <modifier>*</modifier></type><name>check</name> <init>= <expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>session</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>check</name><operator>-&gt;</operator><name>sessionid</name></name> <operator>==</operator> <name>ssl_sessionid</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>Curl_ssl_kill_session</name><argument_list>(<argument><expr><name>check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>CURLcode</name></type> <name>Curl_ssl_addsessionid</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ssl_sessionid</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>idsize</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>sockindex</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name><name>struct</name> <name>curl_ssl_session</name></name> <modifier>*</modifier></type><name>store</name> <init>= <expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>session</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>oldest_age</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>session</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>age</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>clone_host</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>clone_conn_to_host</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>conn_to_port</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name> <modifier>*</modifier></type><name>general_age</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>isProxy</name> <init>= <expr><call><name>CONNECT_PROXY_SSL</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ssl_primary_config</name></name> <modifier>*</modifier> <specifier>const</specifier></type> <name>ssl_config</name> <init>= <expr><ternary><condition><expr><name>isProxy</name></expr> ?</condition><then>

<expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>proxy_ssl_config</name></name></expr> </then><else>:

<expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>ssl_config</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DEBUGASSERT</name><argument_list>(<argument><expr><call><name>SSL_SET_OPTION</name><argument_list>(<argument><expr><name><name>primary</name><operator>.</operator><name>sessionid</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>clone_host</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><ternary><condition><expr><name>isProxy</name></expr> ?</condition><then> <expr><name><name>conn</name><operator>-&gt;</operator><name>http_proxy</name><operator>.</operator><name>host</name><operator>.</operator><name>name</name></name></expr> </then><else>: <expr><name><name>conn</name><operator>-&gt;</operator><name>host</name><operator>.</operator><name>name</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>clone_host</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt> 

<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>conn_to_host</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>clone_conn_to_host</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>conn_to_host</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>clone_conn_to_host</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>clone_host</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return> 

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>clone_conn_to_host</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>conn_to_port</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>conn_to_port</name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>conn_to_port</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>conn_to_port</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>SSLSESSION_SHARED</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>general_age</name> <operator>=</operator> <operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>share</name><operator>-&gt;</operator><name>sessionage</name></name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>general_age</name> <operator>=</operator> <operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>sessionage</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><operator>(</operator><name>i</name> <operator>&lt;</operator> <name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>general_ssl</name><operator>.</operator><name>max_ssl_sessions</name></name><operator>)</operator> <operator>&amp;&amp;</operator>

<name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>session</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sessionid</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>session</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>age</name> <operator>&lt;</operator> <name>oldest_age</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>oldest_age</name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>session</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>age</name></expr>;</expr_stmt>

<expr_stmt><expr><name>store</name> <operator>=</operator> <operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>session</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if<condition>(<expr><name>i</name> <operator>==</operator> <name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>general_ssl</name><operator>.</operator><name>max_ssl_sessions</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>Curl_ssl_kill_session</name><argument_list>(<argument><expr><name>store</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>store</name> <operator>=</operator> <operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>session</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt> 

<expr_stmt><expr><name><name>store</name><operator>-&gt;</operator><name>sessionid</name></name> <operator>=</operator> <name>ssl_sessionid</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>store</name><operator>-&gt;</operator><name>idsize</name></name> <operator>=</operator> <name>idsize</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>store</name><operator>-&gt;</operator><name>age</name></name> <operator>=</operator> <operator>*</operator><name>general_age</name></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>store</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>store</name><operator>-&gt;</operator><name>conn_to_host</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>store</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <name>clone_host</name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>store</name><operator>-&gt;</operator><name>conn_to_host</name></name> <operator>=</operator> <name>clone_conn_to_host</name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>store</name><operator>-&gt;</operator><name>conn_to_port</name></name> <operator>=</operator> <name>conn_to_port</name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>store</name><operator>-&gt;</operator><name>remote_port</name></name> <operator>=</operator> <ternary><condition><expr><name>isProxy</name></expr> ?</condition><then> <expr><operator>(</operator><name>int</name><operator>)</operator><name><name>conn</name><operator>-&gt;</operator><name>port</name></name></expr> </then><else>: <expr><name><name>conn</name><operator>-&gt;</operator><name>remote_port</name></name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>store</name><operator>-&gt;</operator><name>scheme</name></name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>handler</name><operator>-&gt;</operator><name>scheme</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>Curl_clone_primary_ssl_config</name><argument_list>(<argument><expr><name>ssl_config</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>store</name><operator>-&gt;</operator><name>ssl_config</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>Curl_free_primary_ssl_config</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>store</name><operator>-&gt;</operator><name>ssl_config</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>store</name><operator>-&gt;</operator><name>sessionid</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>clone_host</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>clone_conn_to_host</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>Curl_ssl_close_all</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>session</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>SSLSESSION_SHARED</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>general_ssl</name><operator>.</operator><name>max_ssl_sessions</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>Curl_ssl_kill_session</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>session</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>session</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name><name>Curl_ssl</name><operator>-&gt;</operator><name>close_all</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_OPENSSL</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>USE_GNUTLS</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>USE_SCHANNEL</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>USE_SECTRANSP</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>USE_NSS</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>USE_MBEDTLS</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>USE_WOLFSSL</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>USE_BEARSSL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>int</name></type> <name>Curl_ssl_getsock</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>curl_socket_t</name> <modifier>*</modifier></type><name>socks</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>ssl_connect_data</name></name> <modifier>*</modifier></type><name>connssl</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>ssl</name><index>[<expr><name>FIRSTSOCKET</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>connssl</name><operator>-&gt;</operator><name>connecting_state</name></name> <operator>==</operator> <name>ssl_connect_2_writing</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>socks</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>sock</name><index>[<expr><name>FIRSTSOCKET</name></expr>]</index></name></expr>;</expr_stmt>

<return>return <expr><call><name>GETSOCK_WRITESOCK</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>connssl</name><operator>-&gt;</operator><name>connecting_state</name></name> <operator>==</operator> <name>ssl_connect_2_reading</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>socks</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>sock</name><index>[<expr><name>FIRSTSOCKET</name></expr>]</index></name></expr>;</expr_stmt>

<return>return <expr><call><name>GETSOCK_READSOCK</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>GETSOCK_BLANK</name></expr>;</return>

</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<function><type><name>int</name></type> <name>Curl_ssl_getsock</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,

<parameter><decl><type><name>curl_socket_t</name> <modifier>*</modifier></type><name>socks</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>conn</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>socks</name></expr>;</expr_stmt>

<return>return <expr><name>GETSOCK_BLANK</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type> <name>Curl_ssl_close</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sockindex</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>DEBUGASSERT</name><argument_list>(<argument><expr><operator>(</operator><name>sockindex</name> <operator>&lt;=</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>sockindex</name> <operator>&gt;=</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>Curl_ssl</name><operator>-&gt;</operator><name>close_one</name></name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>sockindex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>CURLcode</name></type> <name>Curl_ssl_shutdown</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sockindex</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name><name>Curl_ssl</name><operator>-&gt;</operator><name>shut_down</name></name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>sockindex</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_SSL_SHUTDOWN_FAILED</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>ssl</name><index>[<expr><name>sockindex</name></expr>]</index></name><operator>.</operator><name>use</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>ssl</name><index>[<expr><name>sockindex</name></expr>]</index></name><operator>.</operator><name>state</name> <operator>=</operator> <name>ssl_connection_none</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>recv</name><index>[<expr><name>sockindex</name></expr>]</index></name> <operator>=</operator> <name>Curl_recv_plain</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>send</name><index>[<expr><name>sockindex</name></expr>]</index></name> <operator>=</operator> <name>Curl_send_plain</name></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>CURLcode</name></type> <name>Curl_ssl_set_engine</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>engine</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name><name>Curl_ssl</name><operator>-&gt;</operator><name>set_engine</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>engine</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>CURLcode</name></type> <name>Curl_ssl_set_engine_default</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name><name>Curl_ssl</name><operator>-&gt;</operator><name>set_engine_default</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name><name>struct</name> <name>curl_slist</name></name> <modifier>*</modifier></type><name>Curl_ssl_engines_list</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name><name>Curl_ssl</name><operator>-&gt;</operator><name>engines_list</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>CURLcode</name></type> <name>Curl_ssl_initsessions</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>amount</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>curl_ssl_session</name></name> <modifier>*</modifier></type><name>session</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>session</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_OK</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>session</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><name>amount</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>curl_ssl_session</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>session</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>general_ssl</name><operator>.</operator><name>max_ssl_sessions</name></name> <operator>=</operator> <name>amount</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>session</name></name> <operator>=</operator> <name>session</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>sessionage</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 

<return>return <expr><name>CURLE_OK</name></expr>;</return>

</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>size_t</name></type> <name>Curl_multissl_version</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>size_t</name></type> <name>Curl_ssl_version</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CURL_WITH_MULTI_SSL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>Curl_multissl_version</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<return>return <expr><call><name><name>Curl_ssl</name><operator>-&gt;</operator><name>version</name></name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>Curl_ssl_check_cxn</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name><name>Curl_ssl</name><operator>-&gt;</operator><name>check_cxn</name></name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>Curl_ssl_data_pending</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>connindex</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name><name>Curl_ssl</name><operator>-&gt;</operator><name>data_pending</name></name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>connindex</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>Curl_ssl_free_certinfo</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>curl_certinfo</name></name> <modifier>*</modifier></type><name>ci</name> <init>= <expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>certs</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ci</name><operator>-&gt;</operator><name>num_of_certs</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>ci</name><operator>-&gt;</operator><name>num_of_certs</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>curl_slist_free_all</name><argument_list>(<argument><expr><name><name>ci</name><operator>-&gt;</operator><name>certinfo</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ci</name><operator>-&gt;</operator><name>certinfo</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>ci</name><operator>-&gt;</operator><name>certinfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>ci</name><operator>-&gt;</operator><name>certinfo</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ci</name><operator>-&gt;</operator><name>num_of_certs</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>CURLcode</name></type> <name>Curl_ssl_init_certinfo</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>curl_certinfo</name></name> <modifier>*</modifier></type><name>ci</name> <init>= <expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>certs</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>curl_slist</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>table</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>Curl_ssl_free_certinfo</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>table</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <name>num</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>curl_slist</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>table</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ci</name><operator>-&gt;</operator><name>num_of_certs</name></name> <operator>=</operator> <name>num</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ci</name><operator>-&gt;</operator><name>certinfo</name></name> <operator>=</operator> <name>table</name></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>CURLcode</name></type> <name>Curl_ssl_push_certinfo_len</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>certnum</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>label</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>valuelen</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>curl_certinfo</name></name> <modifier>*</modifier></type><name>ci</name> <init>= <expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>certs</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>output</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>curl_slist</name></name> <modifier>*</modifier></type><name>nl</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>labellen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>outlen</name> <init>= <expr><name>labellen</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>valuelen</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt> 

<expr_stmt><expr><name>output</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>outlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>output</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>msnprintf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>outlen</name></expr></argument>, <argument><expr><literal type="string">"%s:"</literal></expr></argument>, <argument><expr><name>label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>output</name><index>[<expr><name>labellen</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>valuelen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>output</name><index>[<expr><name>labellen</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>valuelen</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>nl</name> <operator>=</operator> <call><name>Curl_slist_append_nodup</name><argument_list>(<argument><expr><name><name>ci</name><operator>-&gt;</operator><name>certinfo</name><index>[<expr><name>certnum</name></expr>]</index></name></expr></argument>, <argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>nl</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>curl_slist_free_all</name><argument_list>(<argument><expr><name><name>ci</name><operator>-&gt;</operator><name>certinfo</name><index>[<expr><name>certnum</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_OUT_OF_MEMORY</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ci</name><operator>-&gt;</operator><name>certinfo</name><index>[<expr><name>certnum</name></expr>]</index></name> <operator>=</operator> <name>nl</name></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>CURLcode</name></type> <name>Curl_ssl_push_certinfo</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>certnum</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>label</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>valuelen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>Curl_ssl_push_certinfo_len</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>certnum</name></expr></argument>, <argument><expr><name>label</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>valuelen</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>CURLcode</name></type> <name>Curl_ssl_random</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>entropy</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>length</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name><name>Curl_ssl</name><operator>-&gt;</operator><name>random</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>entropy</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>pubkey_pem_to_der</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pem</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>der</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>der_len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>stripped_pem</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>begin_pos</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>end_pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>pem_count</name></decl>, <decl><type ref="prev"/><name>stripped_pem_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>pem_len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>pem</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_BAD_CONTENT_ENCODING</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>begin_pos</name> <operator>=</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>pem</name></expr></argument>, <argument><expr><literal type="string">"-----BEGIN PUBLIC KEY-----"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>begin_pos</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_BAD_CONTENT_ENCODING</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>pem_count</name> <operator>=</operator> <name>begin_pos</name> <operator>-</operator> <name>pem</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><literal type="number">0</literal> <operator>!=</operator> <name>pem_count</name> <operator>&amp;&amp;</operator> <literal type="char">'\n'</literal> <operator>!=</operator> <name><name>pem</name><index>[<expr><name>pem_count</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_BAD_CONTENT_ENCODING</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>pem_count</name> <operator>+=</operator> <literal type="number">26</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>end_pos</name> <operator>=</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>pem</name> <operator>+</operator> <name>pem_count</name></expr></argument>, <argument><expr><literal type="string">"\n-----END PUBLIC KEY-----"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>end_pos</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_BAD_CONTENT_ENCODING</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>pem_len</name> <operator>=</operator> <name>end_pos</name> <operator>-</operator> <name>pem</name></expr>;</expr_stmt>

<expr_stmt><expr><name>stripped_pem</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>pem_len</name> <operator>-</operator> <name>pem_count</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>stripped_pem</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>

<while>while<condition>(<expr><name>pem_count</name> <operator>&lt;</operator> <name>pem_len</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><literal type="char">'\n'</literal> <operator>!=</operator> <name><name>pem</name><index>[<expr><name>pem_count</name></expr>]</index></name> <operator>&amp;&amp;</operator> <literal type="char">'\r'</literal> <operator>!=</operator> <name><name>pem</name><index>[<expr><name>pem_count</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>stripped_pem</name><index>[<expr><name>stripped_pem_count</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>pem</name><index>[<expr><name>pem_count</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>++</operator><name>pem_count</name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name><name>stripped_pem</name><index>[<expr><name>stripped_pem_count</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_base64_decode</name><argument_list>(<argument><expr><name>stripped_pem</name></expr></argument>, <argument><expr><name>der</name></expr></argument>, <argument><expr><name>der_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name>stripped_pem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>CURLcode</name></type> <name>Curl_pin_peer_pubkey</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pinnedpubkey</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pubkey</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>pubkeylen</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pem_ptr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_SSL_PINNEDPUBKEYNOTMATCH</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>pinnedpubkey</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_OK</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>pubkey</name> <operator>||</operator> <operator>!</operator><name>pubkeylen</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>pinnedpubkey</name></expr></argument>, <argument><expr><literal type="string">"sha256//"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>encode</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>encodedlen</name></decl>, <decl><type ref="prev"/><name>pinkeylen</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>encoded</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pinkeycopy</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>begin_pos</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>end_pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>sha256sumdigest</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>Curl_ssl</name><operator>-&gt;</operator><name>sha256sum</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>sha256sumdigest</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>CURL_SHA256_DIGEST_LENGTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>sha256sumdigest</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>encode</name> <operator>=</operator> <call><name><name>Curl_ssl</name><operator>-&gt;</operator><name>sha256sum</name></name><argument_list>(<argument><expr><name>pubkey</name></expr></argument>, <argument><expr><name>pubkeylen</name></expr></argument>,

<argument><expr><name>sha256sumdigest</name></expr></argument>, <argument><expr><name>CURL_SHA256_DIGEST_LENGTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>encode</name> <operator>!=</operator> <name>CURLE_OK</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>encode</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>encode</name> <operator>=</operator> <call><name>Curl_base64_encode</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>sha256sumdigest</name></expr></argument>,

<argument><expr><name>CURL_SHA256_DIGEST_LENGTH</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>encoded</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>encodedlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name>sha256sumdigest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>encode</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>encode</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"\t public key hash: sha256//%s\n"</literal></expr></argument>, <argument><expr><name>encoded</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pinkeylen</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>pinnedpubkey</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>pinkeycopy</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>pinkeylen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>pinkeycopy</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name>encoded</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pinkeycopy</name></expr></argument>, <argument><expr><name>pinnedpubkey</name></expr></argument>, <argument><expr><name>pinkeylen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>begin_pos</name> <operator>=</operator> <name>pinkeycopy</name></expr>;</expr_stmt>

<do>do <block>{<block_content>

<expr_stmt><expr><name>end_pos</name> <operator>=</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>begin_pos</name></expr></argument>, <argument><expr><literal type="string">";sha256//"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>end_pos</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>end_pos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>encodedlen</name> <operator>==</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>begin_pos</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name>encoded</name></expr></argument>, <argument><expr><name>begin_pos</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>encodedlen</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_OK</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>end_pos</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>end_pos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">';'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>begin_pos</name> <operator>=</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>end_pos</name></expr></argument>, <argument><expr><literal type="string">"sha256//"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block> while<condition>(<expr><name>end_pos</name> <operator>&amp;&amp;</operator> <name>begin_pos</name></expr>)</condition>;</do>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name>encoded</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name>pinkeycopy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>fp</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>pinnedpubkey</name></expr></argument>, <argument><expr><literal type="string">"rb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>fp</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

<do>do <block>{<block_content>

<decl_stmt><decl><type><name>long</name></type> <name>filesize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>, <decl><type ref="prev"/><name>pem_len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>pem_read</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><call><name>fseek</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SEEK_END</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>filesize</name> <operator>=</operator> <call><name>ftell</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>fseek</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>filesize</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>filesize</name></expr></argument> &gt;</argument_list></name> <name>MAX_PINNED_PUBKEY_SIZE</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>curlx_sotouz</name><argument_list>(<argument><expr><operator>(</operator><name>curl_off_t</name><operator>)</operator> <name>filesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>pubkeylen</name> <operator>&gt;</operator> <name>size</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>size</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>buf</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>fread</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>pubkeylen</name> <operator>==</operator> <name>size</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name>pubkey</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>pubkeylen</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_OK</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><name>size</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>pem_read</name> <operator>=</operator> <call><name>pubkey_pem_to_der</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pem_ptr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pem_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>pem_read</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>pubkeylen</name> <operator>==</operator> <name>pem_len</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name>pubkey</name></expr></argument>, <argument><expr><name>pem_ptr</name></expr></argument>, <argument><expr><name>pubkeylen</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_OK</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block> while<condition>(<expr><literal type="number">0</literal></expr>)</condition>;</do>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name>pem_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_CRYPTO_AUTH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>CURLcode</name></type> <name>Curl_ssl_md5sum</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>tmp</name></decl></parameter>, 

<parameter><decl><type><name>size_t</name></type> <name>tmplen</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>md5sum</name></decl></parameter>, 

<parameter><decl><type><name>size_t</name></type> <name>md5len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name><name>Curl_ssl</name><operator>-&gt;</operator><name>md5sum</name></name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>tmplen</name></expr></argument>, <argument><expr><name>md5sum</name></expr></argument>, <argument><expr><name>md5len</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>bool</name></type> <name>Curl_ssl_cert_status_request</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name><name>Curl_ssl</name><operator>-&gt;</operator><name>cert_status_request</name></name><argument_list>()</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>Curl_ssl_false_start</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name><name>Curl_ssl</name><operator>-&gt;</operator><name>false_start</name></name><argument_list>()</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>Curl_ssl_tls13_ciphersuites</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>Curl_ssl</name><operator>-&gt;</operator><name>supports</name></name> <operator>&amp;</operator> <name>SSLSUPP_TLS13_CIPHERSUITES</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>Curl_none_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>Curl_none_cleanup</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content> </block_content>}</block></function>

<function><type><name>int</name></type> <name>Curl_none_shutdown</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier><name>conn</name></type> <name>UNUSED_PARAM</name></decl></parameter>,

<parameter><decl><type><name>int</name> <name>sockindex</name></type> <name>UNUSED_PARAM</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>conn</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>sockindex</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>Curl_none_check_cxn</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier><name>conn</name></type> <name>UNUSED_PARAM</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>conn</name></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>CURLcode</name></type> <name>Curl_none_random</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier><name>data</name></type> <name>UNUSED_PARAM</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier><name>entropy</name></type> <name>UNUSED_PARAM</name></decl></parameter>,

<parameter><decl><type><name>size_t</name> <name>length</name></type> <name>UNUSED_PARAM</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>data</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>entropy</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>length</name></expr>;</expr_stmt>

<return>return <expr><name>CURLE_NOT_BUILT_IN</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>Curl_none_close_all</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier><name>data</name></type> <name>UNUSED_PARAM</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>data</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>Curl_none_session_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><name>ptr</name></type> <name>UNUSED_PARAM</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>ptr</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>Curl_none_data_pending</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier><name>conn</name></type> <name>UNUSED_PARAM</name></decl></parameter>,

<parameter><decl><type><name>int</name> <name>connindex</name></type> <name>UNUSED_PARAM</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>conn</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>connindex</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>Curl_none_cert_status_request</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>CURLcode</name></type> <name>Curl_none_set_engine</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier><name>data</name></type> <name>UNUSED_PARAM</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><name>engine</name></type> <name>UNUSED_PARAM</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>data</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>engine</name></expr>;</expr_stmt>

<return>return <expr><name>CURLE_NOT_BUILT_IN</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>CURLcode</name></type> <name>Curl_none_set_engine_default</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier><name>data</name></type> <name>UNUSED_PARAM</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>data</name></expr>;</expr_stmt>

<return>return <expr><name>CURLE_NOT_BUILT_IN</name></expr>;</return>

</block_content>}</block></function>

<function><type><name><name>struct</name> <name>curl_slist</name></name> <modifier>*</modifier></type><name>Curl_none_engines_list</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier><name>data</name></type> <name>UNUSED_PARAM</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>data</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator>struct <name>curl_slist</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>Curl_none_false_start</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_CRYPTO_AUTH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>CURLcode</name></type> <name>Curl_none_md5sum</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>inputlen</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>md5sum</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <name>md5len</name></type> <name>UNUSED_PARAM</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>MD5_context</name> <modifier>*</modifier></type><name>MD5pw</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>md5len</name></expr>;</expr_stmt>

<expr_stmt><expr><name>MD5pw</name> <operator>=</operator> <call><name>Curl_MD5_init</name><argument_list>(<argument><expr><name>Curl_DIGEST_MD5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>MD5pw</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>Curl_MD5_update</name><argument_list>(<argument><expr><name>MD5pw</name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><call><name>curlx_uztoui</name><argument_list>(<argument><expr><name>inputlen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_MD5_final</name><argument_list>(<argument><expr><name>MD5pw</name></expr></argument>, <argument><expr><name>md5sum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<function><type><name>CURLcode</name></type> <name>Curl_none_md5sum</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier><name>input</name></type> <name>UNUSED_PARAM</name></decl></parameter>,

<parameter><decl><type><name>size_t</name> <name>inputlen</name></type> <name>UNUSED_PARAM</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier><name>md5sum</name></type> <name>UNUSED_PARAM</name></decl></parameter>,

<parameter><decl><type><name>size_t</name> <name>md5len</name></type> <name>UNUSED_PARAM</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>input</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>inputlen</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>md5sum</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>md5len</name></expr>;</expr_stmt>

<return>return <expr><name>CURLE_NOT_BUILT_IN</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Curl_multissl_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>multissl_init</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name><name>Curl_ssl</name><operator>-&gt;</operator><name>init</name></name><argument_list>()</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>Curl_multissl_connect</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sockindex</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>multissl_init</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_FAILED_INIT</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name><name>Curl_ssl</name><operator>-&gt;</operator><name>connect_blocking</name></name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>sockindex</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>Curl_multissl_connect_nonblocking</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>sockindex</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>done</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>multissl_init</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_FAILED_INIT</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name><name>Curl_ssl</name><operator>-&gt;</operator><name>connect_nonblocking</name></name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>sockindex</name></expr></argument>, <argument><expr><name>done</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>Curl_multissl_get_internals</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ssl_connect_data</name></name> <modifier>*</modifier></type><name>connssl</name></decl></parameter>,

<parameter><decl><type><name>CURLINFO</name></type> <name>info</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>multissl_init</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name><name>Curl_ssl</name><operator>-&gt;</operator><name>get_internals</name></name><argument_list>(<argument><expr><name>connssl</name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Curl_multissl_close</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sockindex</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>multissl_init</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name><name>Curl_ssl</name><operator>-&gt;</operator><name>close_one</name></name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>sockindex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>Curl_ssl</name></name></type> <name>Curl_ssl_multi</name> <init>= <expr><block>{

<expr><block>{ <expr><name>CURLSSLBACKEND_NONE</name></expr>, <expr><literal type="string">"multi"</literal></expr> }</block></expr>, 

<expr><literal type="number">0</literal></expr>, 

<expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>, 

<expr><name>Curl_multissl_init</name></expr>, 

<expr><name>Curl_none_cleanup</name></expr>, 

<expr><name>Curl_multissl_version</name></expr>, 

<expr><name>Curl_none_check_cxn</name></expr>, 

<expr><name>Curl_none_shutdown</name></expr>, 

<expr><name>Curl_none_data_pending</name></expr>, 

<expr><name>Curl_none_random</name></expr>, 

<expr><name>Curl_none_cert_status_request</name></expr>, 

<expr><name>Curl_multissl_connect</name></expr>, 

<expr><name>Curl_multissl_connect_nonblocking</name></expr>, 

<expr><name>Curl_multissl_get_internals</name></expr>, 

<expr><name>Curl_multissl_close</name></expr>, 

<expr><name>Curl_none_close_all</name></expr>, 

<expr><name>Curl_none_session_free</name></expr>, 

<expr><name>Curl_none_set_engine</name></expr>, 

<expr><name>Curl_none_set_engine_default</name></expr>, 

<expr><name>Curl_none_engines_list</name></expr>, 

<expr><name>Curl_none_false_start</name></expr>, 

<expr><name>Curl_none_md5sum</name></expr>, 

<expr><name>NULL</name></expr> 

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>Curl_ssl</name></name> <modifier>*</modifier></type><name>Curl_ssl</name> <init>=

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CURL_WITH_MULTI_SSL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><operator>&amp;</operator><name>Curl_ssl_multi</name></expr></init></decl>;</decl_stmt>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_WOLFSSL</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<expr_stmt><expr><operator>&amp;</operator><name>Curl_ssl_wolfssl</name></expr>;</expr_stmt>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_SECTRANSP</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<expr_stmt><expr><operator>&amp;</operator><name>Curl_ssl_sectransp</name></expr>;</expr_stmt>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_GNUTLS</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<expr_stmt><expr><operator>&amp;</operator><name>Curl_ssl_gnutls</name></expr>;</expr_stmt>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_GSKIT</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<expr_stmt><expr><operator>&amp;</operator><name>Curl_ssl_gskit</name></expr>;</expr_stmt>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_MBEDTLS</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<expr_stmt><expr><operator>&amp;</operator><name>Curl_ssl_mbedtls</name></expr>;</expr_stmt>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_NSS</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<expr_stmt><expr><operator>&amp;</operator><name>Curl_ssl_nss</name></expr>;</expr_stmt>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_OPENSSL</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<expr_stmt><expr><operator>&amp;</operator><name>Curl_ssl_openssl</name></expr>;</expr_stmt>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_SCHANNEL</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<expr_stmt><expr><operator>&amp;</operator><name>Curl_ssl_schannel</name></expr>;</expr_stmt>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_MESALINK</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<expr_stmt><expr><operator>&amp;</operator><name>Curl_ssl_mesalink</name></expr>;</expr_stmt>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_BEARSSL</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<expr_stmt><expr><operator>&amp;</operator><name>Curl_ssl_bearssl</name></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"Missing struct Curl_ssl for selected SSL backend"</cpp:literal></cpp:error>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>Curl_ssl</name></name> <modifier>*</modifier></type><name><name>available_backends</name><index>[]</index></name> <init>= <expr><block>{

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_WOLFSSL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><operator>&amp;</operator><name>Curl_ssl_wolfssl</name></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_SECTRANSP</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><operator>&amp;</operator><name>Curl_ssl_sectransp</name></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_GNUTLS</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><operator>&amp;</operator><name>Curl_ssl_gnutls</name></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_GSKIT</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><operator>&amp;</operator><name>Curl_ssl_gskit</name></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_MBEDTLS</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><operator>&amp;</operator><name>Curl_ssl_mbedtls</name></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_NSS</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><operator>&amp;</operator><name>Curl_ssl_nss</name></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_OPENSSL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><operator>&amp;</operator><name>Curl_ssl_openssl</name></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_SCHANNEL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><operator>&amp;</operator><name>Curl_ssl_schannel</name></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_MESALINK</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><operator>&amp;</operator><name>Curl_ssl_mesalink</name></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_BEARSSL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><operator>&amp;</operator><name>Curl_ssl_bearssl</name></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><name>NULL</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>size_t</name></type> <name>Curl_multissl_version</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>Curl_ssl</name></name> <modifier>*</modifier></type><name>selected</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>backends</name><index>[<expr><literal type="number">200</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>size_t</name></type> <name>backends_len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>Curl_ssl</name></name> <modifier>*</modifier></type><name>current</name></decl>;</decl_stmt>

<expr_stmt><expr><name>current</name> <operator>=</operator> <ternary><condition><expr><name>Curl_ssl</name> <operator>==</operator> <operator>&amp;</operator><name>Curl_ssl_multi</name></expr> ?</condition><then> <expr><name><name>available_backends</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> </then><else>: <expr><name>Curl_ssl</name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>current</name> <operator>!=</operator> <name>selected</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>backends</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>end</name> <init>= <expr><name>backends</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>backends</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>selected</name> <operator>=</operator> <name>current</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>backends</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>available_backends</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>vb</name><index>[<expr><literal type="number">200</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>paren</name> <init>= <expr><operator>(</operator><name>selected</name> <operator>!=</operator> <name><name>available_backends</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>available_backends</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><call><name>version</name><argument_list>(<argument><expr><name>vb</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>vb</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <call><name>msnprintf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>end</name> <operator>-</operator> <name>p</name></expr></argument>, <argument><expr><literal type="string">"%s%s%s%s"</literal></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name>p</name> <operator>!=</operator> <name>backends</name></expr> ?</condition><then> <expr><literal type="string">" "</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary><operator>)</operator></expr></argument>,

<argument><expr><operator>(</operator><ternary><condition><expr><name>paren</name></expr> ?</condition><then> <expr><literal type="string">"("</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary><operator>)</operator></expr></argument>, <argument><expr><name>vb</name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name>paren</name></expr> ?</condition><then> <expr><literal type="string">")"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>backends_len</name> <operator>=</operator> <name>p</name> <operator>-</operator> <name>backends</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>size</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>size</name> <operator>&lt;=</operator> <name>backends_len</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>backends</name></expr></argument>, <argument><expr><name>size</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buffer</name><index>[<expr><name>size</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<return>return <expr><name>size</name> <operator>-</operator> <literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>backends</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>backends_len</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>multissl_init</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>Curl_ssl</name></name> <modifier>*</modifier></type><name>backend</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>env</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>env_tmp</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>Curl_ssl</name> <operator>!=</operator> <operator>&amp;</operator><name>Curl_ssl_multi</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>backend</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>Curl_ssl</name> <operator>=</operator> <name>backend</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>available_backends</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>env</name> <operator>=</operator> <name>env_tmp</name> <operator>=</operator> <call><name>curl_getenv</name><argument_list>(<argument><expr><literal type="string">"CURL_SSL_BACKEND"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DEFAULT_SSL_BACKEND</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>env</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>env</name> <operator>=</operator> <name>CURL_DEFAULT_SSL_BACKEND</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if<condition>(<expr><name>env</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>available_backends</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>strcasecompare</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>available_backends</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>info</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>Curl_ssl</name> <operator>=</operator> <name><name>available_backends</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>curl_free</name><argument_list>(<argument><expr><name>env_tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>Curl_ssl</name> <operator>=</operator> <name><name>available_backends</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>curl_free</name><argument_list>(<argument><expr><name>env_tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>CURLsslset</name></type> <name>curl_global_sslset</name><parameter_list>(<parameter><decl><type><name>curl_sslbackend</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>curl_ssl_backend</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type><name>avail</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>avail</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>avail</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>curl_ssl_backend</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>available_backends</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>Curl_ssl</name> <operator>!=</operator> <operator>&amp;</operator><name>Curl_ssl_multi</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><ternary><condition><expr><name>id</name> <operator>==</operator> <name><name>Curl_ssl</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>id</name></name> <operator>||</operator>

<operator>(</operator><name>name</name> <operator>&amp;&amp;</operator> <call><name>strcasecompare</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>Curl_ssl</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr> ?</condition><then>

<expr><name>CURLSSLSET_OK</name></expr> </then><else>:

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CURL_WITH_MULTI_SSL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><name>CURLSSLSET_TOO_LATE</name></expr></else></ternary></expr>;</return></block_content></block></if></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name>CURLSSLSET_UNKNOWN_BACKEND</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>available_backends</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>available_backends</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>info</name><operator>.</operator><name>id</name></name> <operator>==</operator> <name>id</name> <operator>||</operator>

<operator>(</operator><name>name</name> <operator>&amp;&amp;</operator> <call><name>strcasecompare</name><argument_list>(<argument><expr><name><name>available_backends</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>info</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>multissl_init</name><argument_list>(<argument><expr><name><name>available_backends</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLSSLSET_OK</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>CURLSSLSET_UNKNOWN_BACKEND</name></expr>;</return>

</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 

<function><type><name>CURLsslset</name></type> <name>curl_global_sslset</name><parameter_list>(<parameter><decl><type><name>curl_sslbackend</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>curl_ssl_backend</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type><name>avail</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>id</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>name</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>avail</name></expr>;</expr_stmt>

<return>return <expr><name>CURLSSLSET_NO_BACKENDS</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</unit>
