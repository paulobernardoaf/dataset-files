<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\curl-analysis\_cppstats\curl\lib\vtls\sectransp.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_setup.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"urldata.h"</cpp:file></cpp:include> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_base64.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"strtok.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"multiif.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_SECTRANSP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__clang__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>clang</name> <name>diagnostic</name> <name>push</name></cpp:pragma>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>clang</name> <name>diagnostic</name> <name>ignored</name> <cpp:literal>"-Wtautological-pointer-compare"</cpp:literal></cpp:pragma>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;Security/Security.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;Security/SecureTransport.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;CoreFoundation/CoreFoundation.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;CommonCrypto/CommonDigest.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>TARGET_OS_MAC</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>TARGET_OS_EMBEDDED</name> <operator>||</operator> <name>TARGET_OS_IPHONE</name><operator>)</operator><operator>)</operator></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>MAC_OS_X_VERSION_MAX_ALLOWED</name> <operator>&lt;</operator> <literal type="number">1050</literal></expr></cpp:if>

<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"The Secure Transport back-end requires Leopard or later."</cpp:literal></cpp:error>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CURL_BUILD_IOS</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CURL_BUILD_IOS_7</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CURL_BUILD_IOS_9</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CURL_BUILD_IOS_11</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CURL_BUILD_MAC</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CURL_BUILD_MAC_10_5</name></cpp:macro> <cpp:value>MAC_OS_X_VERSION_MAX_ALLOWED &gt;= 1050</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CURL_BUILD_MAC_10_6</name></cpp:macro> <cpp:value>MAC_OS_X_VERSION_MAX_ALLOWED &gt;= 1060</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CURL_BUILD_MAC_10_7</name></cpp:macro> <cpp:value>MAC_OS_X_VERSION_MAX_ALLOWED &gt;= 1070</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CURL_BUILD_MAC_10_8</name></cpp:macro> <cpp:value>MAC_OS_X_VERSION_MAX_ALLOWED &gt;= 1080</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CURL_BUILD_MAC_10_9</name></cpp:macro> <cpp:value>MAC_OS_X_VERSION_MAX_ALLOWED &gt;= 1090</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CURL_BUILD_MAC_10_11</name></cpp:macro> <cpp:value>MAC_OS_X_VERSION_MAX_ALLOWED &gt;= 101100</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CURL_BUILD_MAC_10_13</name></cpp:macro> <cpp:value>MAC_OS_X_VERSION_MAX_ALLOWED &gt;= 101300</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CURL_SUPPORT_MAC_10_5</name></cpp:macro> <cpp:value>MAC_OS_X_VERSION_MIN_REQUIRED &lt;= 1050</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CURL_SUPPORT_MAC_10_6</name></cpp:macro> <cpp:value>MAC_OS_X_VERSION_MIN_REQUIRED &lt;= 1060</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CURL_SUPPORT_MAC_10_7</name></cpp:macro> <cpp:value>MAC_OS_X_VERSION_MIN_REQUIRED &lt;= 1070</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CURL_SUPPORT_MAC_10_8</name></cpp:macro> <cpp:value>MAC_OS_X_VERSION_MIN_REQUIRED &lt;= 1080</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CURL_SUPPORT_MAC_10_9</name></cpp:macro> <cpp:value>MAC_OS_X_VERSION_MIN_REQUIRED &lt;= 1090</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>TARGET_OS_EMBEDDED</name> <operator>||</operator> <name>TARGET_OS_IPHONE</name></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CURL_BUILD_IOS</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CURL_BUILD_IOS_7</name></cpp:macro> <cpp:value>__IPHONE_OS_VERSION_MAX_ALLOWED &gt;= 70000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CURL_BUILD_IOS_9</name></cpp:macro> <cpp:value>__IPHONE_OS_VERSION_MAX_ALLOWED &gt;= 90000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CURL_BUILD_IOS_11</name></cpp:macro> <cpp:value>__IPHONE_OS_VERSION_MAX_ALLOWED &gt;= 110000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CURL_BUILD_MAC</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CURL_BUILD_MAC_10_5</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CURL_BUILD_MAC_10_6</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CURL_BUILD_MAC_10_7</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CURL_BUILD_MAC_10_8</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CURL_BUILD_MAC_10_9</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CURL_BUILD_MAC_10_11</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CURL_BUILD_MAC_10_13</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CURL_SUPPORT_MAC_10_5</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CURL_SUPPORT_MAC_10_6</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CURL_SUPPORT_MAC_10_7</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CURL_SUPPORT_MAC_10_8</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CURL_SUPPORT_MAC_10_9</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"The Secure Transport back-end requires iOS or macOS."</cpp:literal></cpp:error>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CURL_BUILD_MAC</name></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/sysctl.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"urldata.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sendf.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"inet_pton.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"connect.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"select.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vtls.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sectransp.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_printf.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"strdup.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_memory.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memdebug.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ioErr</name></cpp:macro> <cpp:value>-36</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>paramErr</name></cpp:macro> <cpp:value>-50</cpp:value></cpp:define>

<struct>struct <name>ssl_backend_data</name> <block>{

<decl_stmt><decl><type><name>SSLContextRef</name></type> <name>ssl_ctx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>curl_socket_t</name></type> <name>ssl_sockfd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>ssl_direction</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>size_t</name></type> <name>ssl_write_buffered_length</name></decl>;</decl_stmt>

}</block>;</struct>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><operator>(</operator><name>TARGET_OS_IPHONE</name> <operator>&amp;&amp;</operator> <name>__IPHONE_OS_VERSION_MIN_REQUIRED</name> <operator>&gt;=</operator> <literal type="number">100000</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>!</operator><name>TARGET_OS_IPHONE</name> <operator>&amp;&amp;</operator> <name>__MAC_OS_X_VERSION_MIN_REQUIRED</name> <operator>&gt;=</operator> <literal type="number">101200</literal><operator>)</operator><operator>)</operator></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SECTRANSP_PINNEDPUBKEY_V1</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><operator>!</operator><name>TARGET_OS_IPHONE</name> <operator>&amp;&amp;</operator> <name>__MAC_OS_X_VERSION_MIN_REQUIRED</name> <operator>&gt;=</operator> <literal type="number">1070</literal><operator>)</operator></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SECTRANSP_PINNEDPUBKEY_V2</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SECTRANSP_PINNEDPUBKEY_V1</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>SECTRANSP_PINNEDPUBKEY_V2</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SECTRANSP_PINNEDPUBKEY</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SECTRANSP_PINNEDPUBKEY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>rsa4096SpkiHeader</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x82</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x22</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x0d</literal></expr>,

<expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x2a</literal></expr>, <expr><literal type="number">0x86</literal></expr>, <expr><literal type="number">0x48</literal></expr>, <expr><literal type="number">0x86</literal></expr>,

<expr><literal type="number">0xf7</literal></expr>, <expr><literal type="number">0x0d</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x05</literal></expr>,

<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x82</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x0f</literal></expr>, <expr><literal type="number">0x00</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>rsa2048SpkiHeader</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x82</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x22</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x0d</literal></expr>,

<expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x2a</literal></expr>, <expr><literal type="number">0x86</literal></expr>, <expr><literal type="number">0x48</literal></expr>, <expr><literal type="number">0x86</literal></expr>,

<expr><literal type="number">0xf7</literal></expr>, <expr><literal type="number">0x0d</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x05</literal></expr>,

<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x82</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x0f</literal></expr>, <expr><literal type="number">0x00</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SECTRANSP_PINNEDPUBKEY_V1</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>ecDsaSecp256r1SpkiHeader</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x59</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x13</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x07</literal></expr>,

<expr><literal type="number">0x2a</literal></expr>, <expr><literal type="number">0x86</literal></expr>, <expr><literal type="number">0x48</literal></expr>, <expr><literal type="number">0xce</literal></expr>, <expr><literal type="number">0x3d</literal></expr>, <expr><literal type="number">0x02</literal></expr>,

<expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x2a</literal></expr>, <expr><literal type="number">0x86</literal></expr>, <expr><literal type="number">0x48</literal></expr>,

<expr><literal type="number">0xce</literal></expr>, <expr><literal type="number">0x3d</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0x03</literal></expr>,

<expr><literal type="number">0x42</literal></expr>, <expr><literal type="number">0x00</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>ecDsaSecp384r1SpkiHeader</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x76</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x07</literal></expr>,

<expr><literal type="number">0x2a</literal></expr>, <expr><literal type="number">0x86</literal></expr>, <expr><literal type="number">0x48</literal></expr>, <expr><literal type="number">0xce</literal></expr>, <expr><literal type="number">0x3d</literal></expr>, <expr><literal type="number">0x02</literal></expr>,

<expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x2b</literal></expr>, <expr><literal type="number">0x81</literal></expr>, <expr><literal type="number">0x04</literal></expr>,

<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x22</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x62</literal></expr>, <expr><literal type="number">0x00</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><specifier>static</specifier> <name>OSStatus</name></type> <name>SocketRead</name><parameter_list>(<parameter><decl><type><name>SSLConnectionRef</name></type> <name>connection</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, 

<parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>dataLength</name></decl></parameter>)</parameter_list> 

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>bytesToGo</name> <init>= <expr><operator>*</operator><name>dataLength</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>initLen</name> <init>= <expr><name>bytesToGo</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>UInt8</name> <modifier>*</modifier></type><name>currData</name> <init>= <expr><operator>(</operator><name>UInt8</name> <operator>*</operator><operator>)</operator><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ssl_connect_data</name></name> <modifier>*</modifier></type><name>connssl</name> <init>= <expr><operator>(</operator>struct <name>ssl_connect_data</name> <operator>*</operator><operator>)</operator><name>connection</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ssl_backend_data</name></name> <modifier>*</modifier></type><name>backend</name> <init>= <expr><name><name>connssl</name><operator>-&gt;</operator><name>backend</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sock</name> <init>= <expr><name><name>backend</name><operator>-&gt;</operator><name>ssl_sockfd</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>OSStatus</name></type> <name>rtn</name> <init>= <expr><name>noErr</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>bytesRead</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>rrtn</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>theErr</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>dataLength</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for<control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<expr_stmt><expr><name>bytesRead</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>rrtn</name> <operator>=</operator> <call><name>read</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>currData</name></expr></argument>, <argument><expr><name>bytesToGo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rrtn</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>theErr</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rrtn</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>rtn</name> <operator>=</operator> <name>errSSLClosedGraceful</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content> 

<switch>switch<condition>(<expr><name>theErr</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>ENOENT</name></expr>:</case>

<expr_stmt><expr><name>rtn</name> <operator>=</operator> <name>errSSLClosedGraceful</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ECONNRESET</name></expr>:</case>

<expr_stmt><expr><name>rtn</name> <operator>=</operator> <name>errSSLClosedAbort</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>EAGAIN</name></expr>:</case>

<expr_stmt><expr><name>rtn</name> <operator>=</operator> <name>errSSLWouldBlock</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>backend</name><operator>-&gt;</operator><name>ssl_direction</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><name>rtn</name> <operator>=</operator> <name>ioErr</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch></block_content></block></else></if_stmt>

<break>break;</break>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>bytesRead</name> <operator>=</operator> <name>rrtn</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>bytesToGo</name> <operator>-=</operator> <name>bytesRead</name></expr>;</expr_stmt>

<expr_stmt><expr><name>currData</name> <operator>+=</operator> <name>bytesRead</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>bytesToGo</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><operator>*</operator><name>dataLength</name> <operator>=</operator> <name>initLen</name> <operator>-</operator> <name>bytesToGo</name></expr>;</expr_stmt>

<return>return <expr><name>rtn</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>OSStatus</name></type> <name>SocketWrite</name><parameter_list>(<parameter><decl><type><name>SSLConnectionRef</name></type> <name>connection</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>dataLength</name></decl></parameter>)</parameter_list> 

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>bytesSent</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ssl_connect_data</name></name> <modifier>*</modifier></type><name>connssl</name> <init>= <expr><operator>(</operator>struct <name>ssl_connect_data</name> <operator>*</operator><operator>)</operator><name>connection</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ssl_backend_data</name></name> <modifier>*</modifier></type><name>backend</name> <init>= <expr><name><name>connssl</name><operator>-&gt;</operator><name>backend</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sock</name> <init>= <expr><name><name>backend</name><operator>-&gt;</operator><name>ssl_sockfd</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>length</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>dataLen</name> <init>= <expr><operator>*</operator><name>dataLength</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>UInt8</name> <modifier>*</modifier></type><name>dataPtr</name> <init>= <expr><operator>(</operator><name>UInt8</name> <operator>*</operator><operator>)</operator><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>OSStatus</name></type> <name>ortn</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>theErr</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>dataLength</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<do>do <block>{<block_content>

<expr_stmt><expr><name>length</name> <operator>=</operator> <call><name>write</name><argument_list>(<argument><expr><name>sock</name></expr></argument>,

<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dataPtr</name> <operator>+</operator> <name>bytesSent</name></expr></argument>,

<argument><expr><name>dataLen</name> <operator>-</operator> <name>bytesSent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block> while<condition>(<expr><operator>(</operator><name>length</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator> <operator>(</operator><name>bytesSent</name> <operator>+=</operator> <name>length</name><operator>)</operator> <operator>&lt;</operator> <name>dataLen</name><operator>)</operator></expr> )</condition>;</do>

<if_stmt><if>if<condition>(<expr><name>length</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>theErr</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>theErr</name> <operator>==</operator> <name>EAGAIN</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ortn</name> <operator>=</operator> <name>errSSLWouldBlock</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>backend</name><operator>-&gt;</operator><name>ssl_direction</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>ortn</name> <operator>=</operator> <name>ioErr</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>ortn</name> <operator>=</operator> <name>noErr</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><operator>*</operator><name>dataLength</name> <operator>=</operator> <name>bytesSent</name></expr>;</expr_stmt>

<return>return <expr><name>ortn</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_VERBOSE_STRINGS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>CF_INLINE</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>SSLCipherNameForNumber</name><parameter_list>(<parameter><decl><type><name>SSLCipherSuite</name></type> <name>cipher</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch<condition>(<expr><name>cipher</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>SSL_RSA_WITH_NULL_MD5</name></expr>:</case>

<return>return <expr><literal type="string">"SSL_RSA_WITH_NULL_MD5"</literal></expr>;</return>

<break>break;</break>

<case>case <expr><name>SSL_RSA_WITH_NULL_SHA</name></expr>:</case>

<return>return <expr><literal type="string">"SSL_RSA_WITH_NULL_SHA"</literal></expr>;</return>

<break>break;</break>

<case>case <expr><name>SSL_RSA_EXPORT_WITH_RC4_40_MD5</name></expr>:</case>

<return>return <expr><literal type="string">"SSL_RSA_EXPORT_WITH_RC4_40_MD5"</literal></expr>;</return>

<break>break;</break>

<case>case <expr><name>SSL_RSA_WITH_RC4_128_MD5</name></expr>:</case>

<return>return <expr><literal type="string">"SSL_RSA_WITH_RC4_128_MD5"</literal></expr>;</return>

<break>break;</break>

<case>case <expr><name>SSL_RSA_WITH_RC4_128_SHA</name></expr>:</case>

<return>return <expr><literal type="string">"SSL_RSA_WITH_RC4_128_SHA"</literal></expr>;</return>

<break>break;</break>

<case>case <expr><name>SSL_RSA_EXPORT_WITH_RC2_CBC_40_MD5</name></expr>:</case>

<return>return <expr><literal type="string">"SSL_RSA_EXPORT_WITH_RC2_CBC_40_MD5"</literal></expr>;</return>

<break>break;</break>

<case>case <expr><name>SSL_RSA_WITH_IDEA_CBC_SHA</name></expr>:</case>

<return>return <expr><literal type="string">"SSL_RSA_WITH_IDEA_CBC_SHA"</literal></expr>;</return>

<break>break;</break>

<case>case <expr><name>SSL_RSA_EXPORT_WITH_DES40_CBC_SHA</name></expr>:</case>

<return>return <expr><literal type="string">"SSL_RSA_EXPORT_WITH_DES40_CBC_SHA"</literal></expr>;</return>

<break>break;</break>

<case>case <expr><name>SSL_RSA_WITH_DES_CBC_SHA</name></expr>:</case>

<return>return <expr><literal type="string">"SSL_RSA_WITH_DES_CBC_SHA"</literal></expr>;</return>

<break>break;</break>

<case>case <expr><name>SSL_RSA_WITH_3DES_EDE_CBC_SHA</name></expr>:</case>

<return>return <expr><literal type="string">"SSL_RSA_WITH_3DES_EDE_CBC_SHA"</literal></expr>;</return>

<break>break;</break>

<case>case <expr><name>SSL_DH_DSS_EXPORT_WITH_DES40_CBC_SHA</name></expr>:</case>

<return>return <expr><literal type="string">"SSL_DH_DSS_EXPORT_WITH_DES40_CBC_SHA"</literal></expr>;</return>

<break>break;</break>

<case>case <expr><name>SSL_DH_DSS_WITH_DES_CBC_SHA</name></expr>:</case>

<return>return <expr><literal type="string">"SSL_DH_DSS_WITH_DES_CBC_SHA"</literal></expr>;</return>

<break>break;</break>

<case>case <expr><name>SSL_DH_DSS_WITH_3DES_EDE_CBC_SHA</name></expr>:</case>

<return>return <expr><literal type="string">"SSL_DH_DSS_WITH_3DES_EDE_CBC_SHA"</literal></expr>;</return>

<break>break;</break>

<case>case <expr><name>SSL_DH_RSA_EXPORT_WITH_DES40_CBC_SHA</name></expr>:</case>

<return>return <expr><literal type="string">"SSL_DH_RSA_EXPORT_WITH_DES40_CBC_SHA"</literal></expr>;</return>

<break>break;</break>

<case>case <expr><name>SSL_DH_RSA_WITH_DES_CBC_SHA</name></expr>:</case>

<return>return <expr><literal type="string">"SSL_DH_RSA_WITH_DES_CBC_SHA"</literal></expr>;</return>

<break>break;</break>

<case>case <expr><name>SSL_DH_RSA_WITH_3DES_EDE_CBC_SHA</name></expr>:</case>

<return>return <expr><literal type="string">"SSL_DH_RSA_WITH_3DES_EDE_CBC_SHA"</literal></expr>;</return>

<break>break;</break>

<case>case <expr><name>SSL_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA</name></expr>:</case>

<return>return <expr><literal type="string">"SSL_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA"</literal></expr>;</return>

<break>break;</break>

<case>case <expr><name>SSL_DHE_DSS_WITH_DES_CBC_SHA</name></expr>:</case>

<return>return <expr><literal type="string">"SSL_DHE_DSS_WITH_DES_CBC_SHA"</literal></expr>;</return>

<break>break;</break>

<case>case <expr><name>SSL_DHE_DSS_WITH_3DES_EDE_CBC_SHA</name></expr>:</case>

<return>return <expr><literal type="string">"SSL_DHE_DSS_WITH_3DES_EDE_CBC_SHA"</literal></expr>;</return>

<break>break;</break>

<case>case <expr><name>SSL_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA</name></expr>:</case>

<return>return <expr><literal type="string">"SSL_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA"</literal></expr>;</return>

<break>break;</break>

<case>case <expr><name>SSL_DHE_RSA_WITH_DES_CBC_SHA</name></expr>:</case>

<return>return <expr><literal type="string">"SSL_DHE_RSA_WITH_DES_CBC_SHA"</literal></expr>;</return>

<break>break;</break>

<case>case <expr><name>SSL_DHE_RSA_WITH_3DES_EDE_CBC_SHA</name></expr>:</case>

<return>return <expr><literal type="string">"SSL_DHE_RSA_WITH_3DES_EDE_CBC_SHA"</literal></expr>;</return>

<break>break;</break>

<case>case <expr><name>SSL_DH_anon_EXPORT_WITH_RC4_40_MD5</name></expr>:</case>

<return>return <expr><literal type="string">"SSL_DH_anon_EXPORT_WITH_RC4_40_MD5"</literal></expr>;</return>

<break>break;</break>

<case>case <expr><name>SSL_DH_anon_WITH_RC4_128_MD5</name></expr>:</case>

<return>return <expr><literal type="string">"SSL_DH_anon_WITH_RC4_128_MD5"</literal></expr>;</return>

<break>break;</break>

<case>case <expr><name>SSL_DH_anon_EXPORT_WITH_DES40_CBC_SHA</name></expr>:</case>

<return>return <expr><literal type="string">"SSL_DH_anon_EXPORT_WITH_DES40_CBC_SHA"</literal></expr>;</return>

<break>break;</break>

<case>case <expr><name>SSL_DH_anon_WITH_DES_CBC_SHA</name></expr>:</case>

<return>return <expr><literal type="string">"SSL_DH_anon_WITH_DES_CBC_SHA"</literal></expr>;</return>

<break>break;</break>

<case>case <expr><name>SSL_DH_anon_WITH_3DES_EDE_CBC_SHA</name></expr>:</case>

<return>return <expr><literal type="string">"SSL_DH_anon_WITH_3DES_EDE_CBC_SHA"</literal></expr>;</return>

<break>break;</break>

<case>case <expr><name>SSL_FORTEZZA_DMS_WITH_NULL_SHA</name></expr>:</case>

<return>return <expr><literal type="string">"SSL_FORTEZZA_DMS_WITH_NULL_SHA"</literal></expr>;</return>

<break>break;</break>

<case>case <expr><name>SSL_FORTEZZA_DMS_WITH_FORTEZZA_CBC_SHA</name></expr>:</case>

<return>return <expr><literal type="string">"SSL_FORTEZZA_DMS_WITH_FORTEZZA_CBC_SHA"</literal></expr>;</return>

<break>break;</break>

<case>case <expr><name>TLS_RSA_WITH_AES_128_CBC_SHA</name></expr>:</case>

<return>return <expr><literal type="string">"TLS_RSA_WITH_AES_128_CBC_SHA"</literal></expr>;</return>

<break>break;</break>

<case>case <expr><name>TLS_DH_DSS_WITH_AES_128_CBC_SHA</name></expr>:</case>

<return>return <expr><literal type="string">"TLS_DH_DSS_WITH_AES_128_CBC_SHA"</literal></expr>;</return>

<break>break;</break>

<case>case <expr><name>TLS_DH_RSA_WITH_AES_128_CBC_SHA</name></expr>:</case>

<return>return <expr><literal type="string">"TLS_DH_RSA_WITH_AES_128_CBC_SHA"</literal></expr>;</return>

<break>break;</break>

<case>case <expr><name>TLS_DHE_DSS_WITH_AES_128_CBC_SHA</name></expr>:</case>

<return>return <expr><literal type="string">"TLS_DHE_DSS_WITH_AES_128_CBC_SHA"</literal></expr>;</return>

<break>break;</break>

<case>case <expr><name>TLS_DHE_RSA_WITH_AES_128_CBC_SHA</name></expr>:</case>

<return>return <expr><literal type="string">"TLS_DHE_RSA_WITH_AES_128_CBC_SHA"</literal></expr>;</return>

<break>break;</break>

<case>case <expr><name>TLS_DH_anon_WITH_AES_128_CBC_SHA</name></expr>:</case>

<return>return <expr><literal type="string">"TLS_DH_anon_WITH_AES_128_CBC_SHA"</literal></expr>;</return>

<break>break;</break>

<case>case <expr><name>TLS_RSA_WITH_AES_256_CBC_SHA</name></expr>:</case>

<return>return <expr><literal type="string">"TLS_RSA_WITH_AES_256_CBC_SHA"</literal></expr>;</return>

<break>break;</break>

<case>case <expr><name>TLS_DH_DSS_WITH_AES_256_CBC_SHA</name></expr>:</case>

<return>return <expr><literal type="string">"TLS_DH_DSS_WITH_AES_256_CBC_SHA"</literal></expr>;</return>

<break>break;</break>

<case>case <expr><name>TLS_DH_RSA_WITH_AES_256_CBC_SHA</name></expr>:</case>

<return>return <expr><literal type="string">"TLS_DH_RSA_WITH_AES_256_CBC_SHA"</literal></expr>;</return>

<break>break;</break>

<case>case <expr><name>TLS_DHE_DSS_WITH_AES_256_CBC_SHA</name></expr>:</case>

<return>return <expr><literal type="string">"TLS_DHE_DSS_WITH_AES_256_CBC_SHA"</literal></expr>;</return>

<break>break;</break>

<case>case <expr><name>TLS_DHE_RSA_WITH_AES_256_CBC_SHA</name></expr>:</case>

<return>return <expr><literal type="string">"TLS_DHE_RSA_WITH_AES_256_CBC_SHA"</literal></expr>;</return>

<break>break;</break>

<case>case <expr><name>TLS_DH_anon_WITH_AES_256_CBC_SHA</name></expr>:</case>

<return>return <expr><literal type="string">"TLS_DH_anon_WITH_AES_256_CBC_SHA"</literal></expr>;</return>

<break>break;</break>

<case>case <expr><name>SSL_RSA_WITH_RC2_CBC_MD5</name></expr>:</case>

<return>return <expr><literal type="string">"SSL_RSA_WITH_RC2_CBC_MD5"</literal></expr>;</return>

<break>break;</break>

<case>case <expr><name>SSL_RSA_WITH_IDEA_CBC_MD5</name></expr>:</case>

<return>return <expr><literal type="string">"SSL_RSA_WITH_IDEA_CBC_MD5"</literal></expr>;</return>

<break>break;</break>

<case>case <expr><name>SSL_RSA_WITH_DES_CBC_MD5</name></expr>:</case>

<return>return <expr><literal type="string">"SSL_RSA_WITH_DES_CBC_MD5"</literal></expr>;</return>

<break>break;</break>

<case>case <expr><name>SSL_RSA_WITH_3DES_EDE_CBC_MD5</name></expr>:</case>

<return>return <expr><literal type="string">"SSL_RSA_WITH_3DES_EDE_CBC_MD5"</literal></expr>;</return>

<break>break;</break>

</block_content>}</block></switch>

<return>return <expr><literal type="string">"SSL_NULL_WITH_NULL_NULL"</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>CF_INLINE</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>TLSCipherNameForNumber</name><parameter_list>(<parameter><decl><type><name>SSLCipherSuite</name></type> <name>cipher</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch<condition>(<expr><name>cipher</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>TLS_RSA_WITH_AES_128_CBC_SHA</name></expr>:</case>

<return>return <expr><literal type="string">"TLS_RSA_WITH_AES_128_CBC_SHA"</literal></expr>;</return>

<break>break;</break>

<case>case <expr><name>TLS_DH_DSS_WITH_AES_128_CBC_SHA</name></expr>:</case>

<return>return <expr><literal type="string">"TLS_DH_DSS_WITH_AES_128_CBC_SHA"</literal></expr>;</return>

<break>break;</break>

<case>case <expr><name>TLS_DH_RSA_WITH_AES_128_CBC_SHA</name></expr>:</case>

<return>return <expr><literal type="string">"TLS_DH_RSA_WITH_AES_128_CBC_SHA"</literal></expr>;</return>

<break>break;</break>

<case>case <expr><name>TLS_DHE_DSS_WITH_AES_128_CBC_SHA</name></expr>:</case>

<return>return <expr><literal type="string">"TLS_DHE_DSS_WITH_AES_128_CBC_SHA"</literal></expr>;</return>

<break>break;</break>

<case>case <expr><name>TLS_DHE_RSA_WITH_AES_128_CBC_SHA</name></expr>:</case>

<return>return <expr><literal type="string">"TLS_DHE_RSA_WITH_AES_128_CBC_SHA"</literal></expr>;</return>

<break>break;</break>

<case>case <expr><name>TLS_DH_anon_WITH_AES_128_CBC_SHA</name></expr>:</case>

<return>return <expr><literal type="string">"TLS_DH_anon_WITH_AES_128_CBC_SHA"</literal></expr>;</return>

<break>break;</break>

<case>case <expr><name>TLS_RSA_WITH_AES_256_CBC_SHA</name></expr>:</case>

<return>return <expr><literal type="string">"TLS_RSA_WITH_AES_256_CBC_SHA"</literal></expr>;</return>

<break>break;</break>

<case>case <expr><name>TLS_DH_DSS_WITH_AES_256_CBC_SHA</name></expr>:</case>

<return>return <expr><literal type="string">"TLS_DH_DSS_WITH_AES_256_CBC_SHA"</literal></expr>;</return>

<break>break;</break>

<case>case <expr><name>TLS_DH_RSA_WITH_AES_256_CBC_SHA</name></expr>:</case>

<return>return <expr><literal type="string">"TLS_DH_RSA_WITH_AES_256_CBC_SHA"</literal></expr>;</return>

<break>break;</break>

<case>case <expr><name>TLS_DHE_DSS_WITH_AES_256_CBC_SHA</name></expr>:</case>

<return>return <expr><literal type="string">"TLS_DHE_DSS_WITH_AES_256_CBC_SHA"</literal></expr>;</return>

<break>break;</break>

<case>case <expr><name>TLS_DHE_RSA_WITH_AES_256_CBC_SHA</name></expr>:</case>

<return>return <expr><literal type="string">"TLS_DHE_RSA_WITH_AES_256_CBC_SHA"</literal></expr>;</return>

<break>break;</break>

<case>case <expr><name>TLS_DH_anon_WITH_AES_256_CBC_SHA</name></expr>:</case>

<return>return <expr><literal type="string">"TLS_DH_anon_WITH_AES_256_CBC_SHA"</literal></expr>;</return>

<break>break;</break>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CURL_BUILD_MAC_10_6</name> <operator>||</operator> <name>CURL_BUILD_IOS</name></expr></cpp:if>

<case>case <expr><name>TLS_ECDH_ECDSA_WITH_NULL_SHA</name></expr>:</case>

<return>return <expr><literal type="string">"TLS_ECDH_ECDSA_WITH_NULL_SHA"</literal></expr>;</return>

<break>break;</break>

<case>case <expr><name>TLS_ECDH_ECDSA_WITH_RC4_128_SHA</name></expr>:</case>

<return>return <expr><literal type="string">"TLS_ECDH_ECDSA_WITH_RC4_128_SHA"</literal></expr>;</return>

<break>break;</break>

<case>case <expr><name>TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA</name></expr>:</case>

<return>return <expr><literal type="string">"TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA"</literal></expr>;</return>

<break>break;</break>

<case>case <expr><name>TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA</name></expr>:</case>

<return>return <expr><literal type="string">"TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA"</literal></expr>;</return>

<break>break;</break>

<case>case <expr><name>TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA</name></expr>:</case>

<return>return <expr><literal type="string">"TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA"</literal></expr>;</return>

<break>break;</break>

<case>case <expr><name>TLS_ECDHE_ECDSA_WITH_NULL_SHA</name></expr>:</case>

<return>return <expr><literal type="string">"TLS_ECDHE_ECDSA_WITH_NULL_SHA"</literal></expr>;</return>

<break>break;</break>

<case>case <expr><name>TLS_ECDHE_ECDSA_WITH_RC4_128_SHA</name></expr>:</case>

<return>return <expr><literal type="string">"TLS_ECDHE_ECDSA_WITH_RC4_128_SHA"</literal></expr>;</return>

<break>break;</break>

<case>case <expr><name>TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA</name></expr>:</case>

<return>return <expr><literal type="string">"TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA"</literal></expr>;</return>

<break>break;</break>

<case>case <expr><name>TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA</name></expr>:</case>

<return>return <expr><literal type="string">"TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA"</literal></expr>;</return>

<break>break;</break>

<case>case <expr><name>TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA</name></expr>:</case>

<return>return <expr><literal type="string">"TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA"</literal></expr>;</return>

<break>break;</break>

<case>case <expr><name>TLS_ECDH_RSA_WITH_NULL_SHA</name></expr>:</case>

<return>return <expr><literal type="string">"TLS_ECDH_RSA_WITH_NULL_SHA"</literal></expr>;</return>

<break>break;</break>

<case>case <expr><name>TLS_ECDH_RSA_WITH_RC4_128_SHA</name></expr>:</case>

<return>return <expr><literal type="string">"TLS_ECDH_RSA_WITH_RC4_128_SHA"</literal></expr>;</return>

<break>break;</break>

<case>case <expr><name>TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA</name></expr>:</case>

<return>return <expr><literal type="string">"TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA"</literal></expr>;</return>

<break>break;</break>

<case>case <expr><name>TLS_ECDH_RSA_WITH_AES_128_CBC_SHA</name></expr>:</case>

<return>return <expr><literal type="string">"TLS_ECDH_RSA_WITH_AES_128_CBC_SHA"</literal></expr>;</return>

<break>break;</break>

<case>case <expr><name>TLS_ECDH_RSA_WITH_AES_256_CBC_SHA</name></expr>:</case>

<return>return <expr><literal type="string">"TLS_ECDH_RSA_WITH_AES_256_CBC_SHA"</literal></expr>;</return>

<break>break;</break>

<case>case <expr><name>TLS_ECDHE_RSA_WITH_NULL_SHA</name></expr>:</case>

<return>return <expr><literal type="string">"TLS_ECDHE_RSA_WITH_NULL_SHA"</literal></expr>;</return>

<break>break;</break>

<case>case <expr><name>TLS_ECDHE_RSA_WITH_RC4_128_SHA</name></expr>:</case>

<return>return <expr><literal type="string">"TLS_ECDHE_RSA_WITH_RC4_128_SHA"</literal></expr>;</return>

<break>break;</break>

<case>case <expr><name>TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA</name></expr>:</case>

<return>return <expr><literal type="string">"TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA"</literal></expr>;</return>

<break>break;</break>

<case>case <expr><name>TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA</name></expr>:</case>

<return>return <expr><literal type="string">"TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA"</literal></expr>;</return>

<break>break;</break>

<case>case <expr><name>TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA</name></expr>:</case>

<return>return <expr><literal type="string">"TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA"</literal></expr>;</return>

<break>break;</break>

<case>case <expr><name>TLS_ECDH_anon_WITH_NULL_SHA</name></expr>:</case>

<return>return <expr><literal type="string">"TLS_ECDH_anon_WITH_NULL_SHA"</literal></expr>;</return>

<break>break;</break>

<case>case <expr><name>TLS_ECDH_anon_WITH_RC4_128_SHA</name></expr>:</case>

<return>return <expr><literal type="string">"TLS_ECDH_anon_WITH_RC4_128_SHA"</literal></expr>;</return>

<break>break;</break>

<case>case <expr><name>TLS_ECDH_anon_WITH_3DES_EDE_CBC_SHA</name></expr>:</case>

<return>return <expr><literal type="string">"TLS_ECDH_anon_WITH_3DES_EDE_CBC_SHA"</literal></expr>;</return>

<break>break;</break>

<case>case <expr><name>TLS_ECDH_anon_WITH_AES_128_CBC_SHA</name></expr>:</case>

<return>return <expr><literal type="string">"TLS_ECDH_anon_WITH_AES_128_CBC_SHA"</literal></expr>;</return>

<break>break;</break>

<case>case <expr><name>TLS_ECDH_anon_WITH_AES_256_CBC_SHA</name></expr>:</case>

<return>return <expr><literal type="string">"TLS_ECDH_anon_WITH_AES_256_CBC_SHA"</literal></expr>;</return>

<break>break;</break>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CURL_BUILD_MAC_10_8</name> <operator>||</operator> <name>CURL_BUILD_IOS</name></expr></cpp:if>

<case>case <expr><name>TLS_RSA_WITH_NULL_MD5</name></expr>:</case>

<return>return <expr><literal type="string">"TLS_RSA_WITH_NULL_MD5"</literal></expr>;</return>

<break>break;</break>

<case>case <expr><name>TLS_RSA_WITH_NULL_SHA</name></expr>:</case>

<return>return <expr><literal type="string">"TLS_RSA_WITH_NULL_SHA"</literal></expr>;</return>

<break>break;</break>

<case>case <expr><name>TLS_RSA_WITH_RC4_128_MD5</name></expr>:</case>

<return>return <expr><literal type="string">"TLS_RSA_WITH_RC4_128_MD5"</literal></expr>;</return>

<break>break;</break>

<case>case <expr><name>TLS_RSA_WITH_RC4_128_SHA</name></expr>:</case>

<return>return <expr><literal type="string">"TLS_RSA_WITH_RC4_128_SHA"</literal></expr>;</return>

<break>break;</break>

<case>case <expr><name>TLS_RSA_WITH_3DES_EDE_CBC_SHA</name></expr>:</case>

<return>return <expr><literal type="string">"TLS_RSA_WITH_3DES_EDE_CBC_SHA"</literal></expr>;</return>

<break>break;</break>

<case>case <expr><name>TLS_RSA_WITH_NULL_SHA256</name></expr>:</case>

<return>return <expr><literal type="string">"TLS_RSA_WITH_NULL_SHA256"</literal></expr>;</return>

<break>break;</break>

<case>case <expr><name>TLS_RSA_WITH_AES_128_CBC_SHA256</name></expr>:</case>

<return>return <expr><literal type="string">"TLS_RSA_WITH_AES_128_CBC_SHA256"</literal></expr>;</return>

<break>break;</break>

<case>case <expr><name>TLS_RSA_WITH_AES_256_CBC_SHA256</name></expr>:</case>

<return>return <expr><literal type="string">"TLS_RSA_WITH_AES_256_CBC_SHA256"</literal></expr>;</return>

<break>break;</break>

<case>case <expr><name>TLS_DH_DSS_WITH_3DES_EDE_CBC_SHA</name></expr>:</case>

<return>return <expr><literal type="string">"TLS_DH_DSS_WITH_3DES_EDE_CBC_SHA"</literal></expr>;</return>

<break>break;</break>

<case>case <expr><name>TLS_DH_RSA_WITH_3DES_EDE_CBC_SHA</name></expr>:</case>

<return>return <expr><literal type="string">"TLS_DH_RSA_WITH_3DES_EDE_CBC_SHA"</literal></expr>;</return>

<break>break;</break>

<case>case <expr><name>TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA</name></expr>:</case>

<return>return <expr><literal type="string">"TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA"</literal></expr>;</return>

<break>break;</break>

<case>case <expr><name>TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA</name></expr>:</case>

<return>return <expr><literal type="string">"TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA"</literal></expr>;</return>

<break>break;</break>

<case>case <expr><name>TLS_DH_DSS_WITH_AES_128_CBC_SHA256</name></expr>:</case>

<return>return <expr><literal type="string">"TLS_DH_DSS_WITH_AES_128_CBC_SHA256"</literal></expr>;</return>

<break>break;</break>

<case>case <expr><name>TLS_DH_RSA_WITH_AES_128_CBC_SHA256</name></expr>:</case>

<return>return <expr><literal type="string">"TLS_DH_RSA_WITH_AES_128_CBC_SHA256"</literal></expr>;</return>

<break>break;</break>

<case>case <expr><name>TLS_DHE_DSS_WITH_AES_128_CBC_SHA256</name></expr>:</case>

<return>return <expr><literal type="string">"TLS_DHE_DSS_WITH_AES_128_CBC_SHA256"</literal></expr>;</return>

<break>break;</break>

<case>case <expr><name>TLS_DHE_RSA_WITH_AES_128_CBC_SHA256</name></expr>:</case>

<return>return <expr><literal type="string">"TLS_DHE_RSA_WITH_AES_128_CBC_SHA256"</literal></expr>;</return>

<break>break;</break>

<case>case <expr><name>TLS_DH_DSS_WITH_AES_256_CBC_SHA256</name></expr>:</case>

<return>return <expr><literal type="string">"TLS_DH_DSS_WITH_AES_256_CBC_SHA256"</literal></expr>;</return>

<break>break;</break>

<case>case <expr><name>TLS_DH_RSA_WITH_AES_256_CBC_SHA256</name></expr>:</case>

<return>return <expr><literal type="string">"TLS_DH_RSA_WITH_AES_256_CBC_SHA256"</literal></expr>;</return>

<break>break;</break>

<case>case <expr><name>TLS_DHE_DSS_WITH_AES_256_CBC_SHA256</name></expr>:</case>

<return>return <expr><literal type="string">"TLS_DHE_DSS_WITH_AES_256_CBC_SHA256"</literal></expr>;</return>

<break>break;</break>

<case>case <expr><name>TLS_DHE_RSA_WITH_AES_256_CBC_SHA256</name></expr>:</case>

<return>return <expr><literal type="string">"TLS_DHE_RSA_WITH_AES_256_CBC_SHA256"</literal></expr>;</return>

<break>break;</break>

<case>case <expr><name>TLS_DH_anon_WITH_RC4_128_MD5</name></expr>:</case>

<return>return <expr><literal type="string">"TLS_DH_anon_WITH_RC4_128_MD5"</literal></expr>;</return>

<break>break;</break>

<case>case <expr><name>TLS_DH_anon_WITH_3DES_EDE_CBC_SHA</name></expr>:</case>

<return>return <expr><literal type="string">"TLS_DH_anon_WITH_3DES_EDE_CBC_SHA"</literal></expr>;</return>

<break>break;</break>

<case>case <expr><name>TLS_DH_anon_WITH_AES_128_CBC_SHA256</name></expr>:</case>

<return>return <expr><literal type="string">"TLS_DH_anon_WITH_AES_128_CBC_SHA256"</literal></expr>;</return>

<break>break;</break>

<case>case <expr><name>TLS_DH_anon_WITH_AES_256_CBC_SHA256</name></expr>:</case>

<return>return <expr><literal type="string">"TLS_DH_anon_WITH_AES_256_CBC_SHA256"</literal></expr>;</return>

<break>break;</break>

<case>case <expr><name>TLS_RSA_WITH_AES_128_GCM_SHA256</name></expr>:</case>

<return>return <expr><literal type="string">"TLS_RSA_WITH_AES_128_GCM_SHA256"</literal></expr>;</return>

<break>break;</break>

<case>case <expr><name>TLS_RSA_WITH_AES_256_GCM_SHA384</name></expr>:</case>

<return>return <expr><literal type="string">"TLS_RSA_WITH_AES_256_GCM_SHA384"</literal></expr>;</return>

<break>break;</break>

<case>case <expr><name>TLS_DHE_RSA_WITH_AES_128_GCM_SHA256</name></expr>:</case>

<return>return <expr><literal type="string">"TLS_DHE_RSA_WITH_AES_128_GCM_SHA256"</literal></expr>;</return>

<break>break;</break>

<case>case <expr><name>TLS_DHE_RSA_WITH_AES_256_GCM_SHA384</name></expr>:</case>

<return>return <expr><literal type="string">"TLS_DHE_RSA_WITH_AES_256_GCM_SHA384"</literal></expr>;</return>

<break>break;</break>

<case>case <expr><name>TLS_DH_RSA_WITH_AES_128_GCM_SHA256</name></expr>:</case>

<return>return <expr><literal type="string">"TLS_DH_RSA_WITH_AES_128_GCM_SHA256"</literal></expr>;</return>

<break>break;</break>

<case>case <expr><name>TLS_DH_RSA_WITH_AES_256_GCM_SHA384</name></expr>:</case>

<return>return <expr><literal type="string">"TLS_DH_RSA_WITH_AES_256_GCM_SHA384"</literal></expr>;</return>

<break>break;</break>

<case>case <expr><name>TLS_DHE_DSS_WITH_AES_128_GCM_SHA256</name></expr>:</case>

<return>return <expr><literal type="string">"TLS_DHE_DSS_WITH_AES_128_GCM_SHA256"</literal></expr>;</return>

<break>break;</break>

<case>case <expr><name>TLS_DHE_DSS_WITH_AES_256_GCM_SHA384</name></expr>:</case>

<return>return <expr><literal type="string">"TLS_DHE_DSS_WITH_AES_256_GCM_SHA384"</literal></expr>;</return>

<break>break;</break>

<case>case <expr><name>TLS_DH_DSS_WITH_AES_128_GCM_SHA256</name></expr>:</case>

<return>return <expr><literal type="string">"TLS_DH_DSS_WITH_AES_128_GCM_SHA256"</literal></expr>;</return>

<break>break;</break>

<case>case <expr><name>TLS_DH_DSS_WITH_AES_256_GCM_SHA384</name></expr>:</case>

<return>return <expr><literal type="string">"TLS_DH_DSS_WITH_AES_256_GCM_SHA384"</literal></expr>;</return>

<break>break;</break>

<case>case <expr><name>TLS_DH_anon_WITH_AES_128_GCM_SHA256</name></expr>:</case>

<return>return <expr><literal type="string">"TLS_DH_anon_WITH_AES_128_GCM_SHA256"</literal></expr>;</return>

<break>break;</break>

<case>case <expr><name>TLS_DH_anon_WITH_AES_256_GCM_SHA384</name></expr>:</case>

<return>return <expr><literal type="string">"TLS_DH_anon_WITH_AES_256_GCM_SHA384"</literal></expr>;</return>

<break>break;</break>

<case>case <expr><name>TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256</name></expr>:</case>

<return>return <expr><literal type="string">"TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256"</literal></expr>;</return>

<break>break;</break>

<case>case <expr><name>TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384</name></expr>:</case>

<return>return <expr><literal type="string">"TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384"</literal></expr>;</return>

<break>break;</break>

<case>case <expr><name>TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256</name></expr>:</case>

<return>return <expr><literal type="string">"TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256"</literal></expr>;</return>

<break>break;</break>

<case>case <expr><name>TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384</name></expr>:</case>

<return>return <expr><literal type="string">"TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384"</literal></expr>;</return>

<break>break;</break>

<case>case <expr><name>TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256</name></expr>:</case>

<return>return <expr><literal type="string">"TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256"</literal></expr>;</return>

<break>break;</break>

<case>case <expr><name>TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384</name></expr>:</case>

<return>return <expr><literal type="string">"TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384"</literal></expr>;</return>

<break>break;</break>

<case>case <expr><name>TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256</name></expr>:</case>

<return>return <expr><literal type="string">"TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256"</literal></expr>;</return>

<break>break;</break>

<case>case <expr><name>TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384</name></expr>:</case>

<return>return <expr><literal type="string">"TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384"</literal></expr>;</return>

<break>break;</break>

<case>case <expr><name>TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256</name></expr>:</case>

<return>return <expr><literal type="string">"TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256"</literal></expr>;</return>

<break>break;</break>

<case>case <expr><name>TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384</name></expr>:</case>

<return>return <expr><literal type="string">"TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384"</literal></expr>;</return>

<break>break;</break>

<case>case <expr><name>TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256</name></expr>:</case>

<return>return <expr><literal type="string">"TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256"</literal></expr>;</return>

<break>break;</break>

<case>case <expr><name>TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384</name></expr>:</case>

<return>return <expr><literal type="string">"TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384"</literal></expr>;</return>

<break>break;</break>

<case>case <expr><name>TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256</name></expr>:</case>

<return>return <expr><literal type="string">"TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256"</literal></expr>;</return>

<break>break;</break>

<case>case <expr><name>TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384</name></expr>:</case>

<return>return <expr><literal type="string">"TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384"</literal></expr>;</return>

<break>break;</break>

<case>case <expr><name>TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256</name></expr>:</case>

<return>return <expr><literal type="string">"TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256"</literal></expr>;</return>

<break>break;</break>

<case>case <expr><name>TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384</name></expr>:</case>

<return>return <expr><literal type="string">"TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384"</literal></expr>;</return>

<break>break;</break>

<case>case <expr><name>TLS_EMPTY_RENEGOTIATION_INFO_SCSV</name></expr>:</case>

<return>return <expr><literal type="string">"TLS_EMPTY_RENEGOTIATION_INFO_SCSV"</literal></expr>;</return>

<break>break;</break>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<case>case <expr><name>SSL_RSA_WITH_NULL_MD5</name></expr>:</case>

<return>return <expr><literal type="string">"TLS_RSA_WITH_NULL_MD5"</literal></expr>;</return>

<break>break;</break>

<case>case <expr><name>SSL_RSA_WITH_NULL_SHA</name></expr>:</case>

<return>return <expr><literal type="string">"TLS_RSA_WITH_NULL_SHA"</literal></expr>;</return>

<break>break;</break>

<case>case <expr><name>SSL_RSA_WITH_RC4_128_MD5</name></expr>:</case>

<return>return <expr><literal type="string">"TLS_RSA_WITH_RC4_128_MD5"</literal></expr>;</return>

<break>break;</break>

<case>case <expr><name>SSL_RSA_WITH_RC4_128_SHA</name></expr>:</case>

<return>return <expr><literal type="string">"TLS_RSA_WITH_RC4_128_SHA"</literal></expr>;</return>

<break>break;</break>

<case>case <expr><name>SSL_RSA_WITH_3DES_EDE_CBC_SHA</name></expr>:</case>

<return>return <expr><literal type="string">"TLS_RSA_WITH_3DES_EDE_CBC_SHA"</literal></expr>;</return>

<break>break;</break>

<case>case <expr><name>SSL_DH_anon_WITH_RC4_128_MD5</name></expr>:</case>

<return>return <expr><literal type="string">"TLS_DH_anon_WITH_RC4_128_MD5"</literal></expr>;</return>

<break>break;</break>

<case>case <expr><name>SSL_DH_anon_WITH_3DES_EDE_CBC_SHA</name></expr>:</case>

<return>return <expr><literal type="string">"TLS_DH_anon_WITH_3DES_EDE_CBC_SHA"</literal></expr>;</return>

<break>break;</break>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CURL_BUILD_MAC_10_9</name> <operator>||</operator> <name>CURL_BUILD_IOS_7</name></expr></cpp:if>

<case>case <expr><name>TLS_PSK_WITH_RC4_128_SHA</name></expr>:</case>

<return>return <expr><literal type="string">"TLS_PSK_WITH_RC4_128_SHA"</literal></expr>;</return>

<break>break;</break>

<case>case <expr><name>TLS_PSK_WITH_3DES_EDE_CBC_SHA</name></expr>:</case>

<return>return <expr><literal type="string">"TLS_PSK_WITH_3DES_EDE_CBC_SHA"</literal></expr>;</return>

<break>break;</break>

<case>case <expr><name>TLS_PSK_WITH_AES_128_CBC_SHA</name></expr>:</case>

<return>return <expr><literal type="string">"TLS_PSK_WITH_AES_128_CBC_SHA"</literal></expr>;</return>

<break>break;</break>

<case>case <expr><name>TLS_PSK_WITH_AES_256_CBC_SHA</name></expr>:</case>

<return>return <expr><literal type="string">"TLS_PSK_WITH_AES_256_CBC_SHA"</literal></expr>;</return>

<break>break;</break>

<case>case <expr><name>TLS_DHE_PSK_WITH_RC4_128_SHA</name></expr>:</case>

<return>return <expr><literal type="string">"TLS_DHE_PSK_WITH_RC4_128_SHA"</literal></expr>;</return>

<break>break;</break>

<case>case <expr><name>TLS_DHE_PSK_WITH_3DES_EDE_CBC_SHA</name></expr>:</case>

<return>return <expr><literal type="string">"TLS_DHE_PSK_WITH_3DES_EDE_CBC_SHA"</literal></expr>;</return>

<break>break;</break>

<case>case <expr><name>TLS_DHE_PSK_WITH_AES_128_CBC_SHA</name></expr>:</case>

<return>return <expr><literal type="string">"TLS_DHE_PSK_WITH_AES_128_CBC_SHA"</literal></expr>;</return>

<break>break;</break>

<case>case <expr><name>TLS_DHE_PSK_WITH_AES_256_CBC_SHA</name></expr>:</case>

<return>return <expr><literal type="string">"TLS_DHE_PSK_WITH_AES_256_CBC_SHA"</literal></expr>;</return>

<break>break;</break>

<case>case <expr><name>TLS_RSA_PSK_WITH_RC4_128_SHA</name></expr>:</case>

<return>return <expr><literal type="string">"TLS_RSA_PSK_WITH_RC4_128_SHA"</literal></expr>;</return>

<break>break;</break>

<case>case <expr><name>TLS_RSA_PSK_WITH_3DES_EDE_CBC_SHA</name></expr>:</case>

<return>return <expr><literal type="string">"TLS_RSA_PSK_WITH_3DES_EDE_CBC_SHA"</literal></expr>;</return>

<break>break;</break>

<case>case <expr><name>TLS_RSA_PSK_WITH_AES_128_CBC_SHA</name></expr>:</case>

<return>return <expr><literal type="string">"TLS_RSA_PSK_WITH_AES_128_CBC_SHA"</literal></expr>;</return>

<break>break;</break>

<case>case <expr><name>TLS_RSA_PSK_WITH_AES_256_CBC_SHA</name></expr>:</case>

<return>return <expr><literal type="string">"TLS_RSA_PSK_WITH_AES_256_CBC_SHA"</literal></expr>;</return>

<break>break;</break>

<case>case <expr><name>TLS_PSK_WITH_NULL_SHA</name></expr>:</case>

<return>return <expr><literal type="string">"TLS_PSK_WITH_NULL_SHA"</literal></expr>;</return>

<break>break;</break>

<case>case <expr><name>TLS_DHE_PSK_WITH_NULL_SHA</name></expr>:</case>

<return>return <expr><literal type="string">"TLS_DHE_PSK_WITH_NULL_SHA"</literal></expr>;</return>

<break>break;</break>

<case>case <expr><name>TLS_RSA_PSK_WITH_NULL_SHA</name></expr>:</case>

<return>return <expr><literal type="string">"TLS_RSA_PSK_WITH_NULL_SHA"</literal></expr>;</return>

<break>break;</break>

<case>case <expr><name>TLS_PSK_WITH_AES_128_GCM_SHA256</name></expr>:</case>

<return>return <expr><literal type="string">"TLS_PSK_WITH_AES_128_GCM_SHA256"</literal></expr>;</return>

<break>break;</break>

<case>case <expr><name>TLS_PSK_WITH_AES_256_GCM_SHA384</name></expr>:</case>

<return>return <expr><literal type="string">"TLS_PSK_WITH_AES_256_GCM_SHA384"</literal></expr>;</return>

<break>break;</break>

<case>case <expr><name>TLS_DHE_PSK_WITH_AES_128_GCM_SHA256</name></expr>:</case>

<return>return <expr><literal type="string">"TLS_DHE_PSK_WITH_AES_128_GCM_SHA256"</literal></expr>;</return>

<break>break;</break>

<case>case <expr><name>TLS_DHE_PSK_WITH_AES_256_GCM_SHA384</name></expr>:</case>

<return>return <expr><literal type="string">"TLS_DHE_PSK_WITH_AES_256_GCM_SHA384"</literal></expr>;</return>

<break>break;</break>

<case>case <expr><name>TLS_RSA_PSK_WITH_AES_128_GCM_SHA256</name></expr>:</case>

<return>return <expr><literal type="string">"TLS_RSA_PSK_WITH_AES_128_GCM_SHA256"</literal></expr>;</return>

<break>break;</break>

<case>case <expr><name>TLS_RSA_PSK_WITH_AES_256_GCM_SHA384</name></expr>:</case>

<return>return <expr><literal type="string">"TLS_PSK_WITH_AES_256_GCM_SHA384"</literal></expr>;</return>

<break>break;</break>

<case>case <expr><name>TLS_PSK_WITH_AES_128_CBC_SHA256</name></expr>:</case>

<return>return <expr><literal type="string">"TLS_PSK_WITH_AES_128_CBC_SHA256"</literal></expr>;</return>

<break>break;</break>

<case>case <expr><name>TLS_PSK_WITH_AES_256_CBC_SHA384</name></expr>:</case>

<return>return <expr><literal type="string">"TLS_PSK_WITH_AES_256_CBC_SHA384"</literal></expr>;</return>

<break>break;</break>

<case>case <expr><name>TLS_PSK_WITH_NULL_SHA256</name></expr>:</case>

<return>return <expr><literal type="string">"TLS_PSK_WITH_NULL_SHA256"</literal></expr>;</return>

<break>break;</break>

<case>case <expr><name>TLS_PSK_WITH_NULL_SHA384</name></expr>:</case>

<return>return <expr><literal type="string">"TLS_PSK_WITH_NULL_SHA384"</literal></expr>;</return>

<break>break;</break>

<case>case <expr><name>TLS_DHE_PSK_WITH_AES_128_CBC_SHA256</name></expr>:</case>

<return>return <expr><literal type="string">"TLS_DHE_PSK_WITH_AES_128_CBC_SHA256"</literal></expr>;</return>

<break>break;</break>

<case>case <expr><name>TLS_DHE_PSK_WITH_AES_256_CBC_SHA384</name></expr>:</case>

<return>return <expr><literal type="string">"TLS_DHE_PSK_WITH_AES_256_CBC_SHA384"</literal></expr>;</return>

<break>break;</break>

<case>case <expr><name>TLS_DHE_PSK_WITH_NULL_SHA256</name></expr>:</case>

<return>return <expr><literal type="string">"TLS_DHE_PSK_WITH_NULL_SHA256"</literal></expr>;</return>

<break>break;</break>

<case>case <expr><name>TLS_DHE_PSK_WITH_NULL_SHA384</name></expr>:</case>

<return>return <expr><literal type="string">"TLS_RSA_PSK_WITH_NULL_SHA384"</literal></expr>;</return>

<break>break;</break>

<case>case <expr><name>TLS_RSA_PSK_WITH_AES_128_CBC_SHA256</name></expr>:</case>

<return>return <expr><literal type="string">"TLS_RSA_PSK_WITH_AES_128_CBC_SHA256"</literal></expr>;</return>

<break>break;</break>

<case>case <expr><name>TLS_RSA_PSK_WITH_AES_256_CBC_SHA384</name></expr>:</case>

<return>return <expr><literal type="string">"TLS_RSA_PSK_WITH_AES_256_CBC_SHA384"</literal></expr>;</return>

<break>break;</break>

<case>case <expr><name>TLS_RSA_PSK_WITH_NULL_SHA256</name></expr>:</case>

<return>return <expr><literal type="string">"TLS_RSA_PSK_WITH_NULL_SHA256"</literal></expr>;</return>

<break>break;</break>

<case>case <expr><name>TLS_RSA_PSK_WITH_NULL_SHA384</name></expr>:</case>

<return>return <expr><literal type="string">"TLS_RSA_PSK_WITH_NULL_SHA384"</literal></expr>;</return>

<break>break;</break>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CURL_BUILD_MAC_10_13</name> <operator>||</operator> <name>CURL_BUILD_IOS_11</name></expr></cpp:if>

<case>case <expr><name>TLS_AES_128_GCM_SHA256</name></expr>:</case>

<return>return <expr><literal type="string">"TLS_AES_128_GCM_SHA256"</literal></expr>;</return>

<break>break;</break>

<case>case <expr><name>TLS_AES_256_GCM_SHA384</name></expr>:</case>

<return>return <expr><literal type="string">"TLS_AES_256_GCM_SHA384"</literal></expr>;</return>

<break>break;</break>

<case>case <expr><name>TLS_CHACHA20_POLY1305_SHA256</name></expr>:</case>

<return>return <expr><literal type="string">"TLS_CHACHA20_POLY1305_SHA256"</literal></expr>;</return>

<break>break;</break>

<case>case <expr><name>TLS_AES_128_CCM_SHA256</name></expr>:</case>

<return>return <expr><literal type="string">"TLS_AES_128_CCM_SHA256"</literal></expr>;</return>

<break>break;</break>

<case>case <expr><name>TLS_AES_128_CCM_8_SHA256</name></expr>:</case>

<return>return <expr><literal type="string">"TLS_AES_128_CCM_8_SHA256"</literal></expr>;</return>

<break>break;</break>

<case>case <expr><name>TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256</name></expr>:</case>

<return>return <expr><literal type="string">"TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256"</literal></expr>;</return>

<break>break;</break>

<case>case <expr><name>TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256</name></expr>:</case>

<return>return <expr><literal type="string">"TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256"</literal></expr>;</return>

<break>break;</break>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</block_content>}</block></switch>

<return>return <expr><literal type="string">"TLS_NULL_WITH_NULL_NULL"</literal></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CURL_BUILD_MAC</name></expr></cpp:if>

<function><type><name>CF_INLINE</name> <name>void</name></type> <name>GetDarwinVersionNumber</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>major</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>minor</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name><name>mib</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>os_version</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>os_version_len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>os_version_major</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>os_version_minor</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tok_buf</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>mib</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>CTL_KERN</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mib</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>KERN_OSRELEASE</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>sysctl</name><argument_list>(<argument><expr><name>mib</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>os_version_len</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>os_version</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>os_version_len</name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>os_version</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>sysctl</name><argument_list>(<argument><expr><name>mib</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>os_version</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>os_version_len</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>os_version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>os_version_major</name> <operator>=</operator> <call><name>strtok_r</name><argument_list>(<argument><expr><name>os_version</name></expr></argument>, <argument><expr><literal type="string">"."</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>tok_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>os_version_minor</name> <operator>=</operator> <call><name>strtok_r</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"."</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>tok_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>major</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>os_version_major</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>minor</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>os_version_minor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>os_version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><name>CF_INLINE</name> <name>CFStringRef</name></type> <name>getsubject</name><parameter_list>(<parameter><decl><type><name>SecCertificateRef</name></type> <name>cert</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CFStringRef</name></type> <name>server_cert_summary</name> <init>= <expr><call><name>CFSTR</name><argument_list>(<argument><expr><literal type="string">"(null)"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CURL_BUILD_IOS</name></expr></cpp:if>

<expr_stmt><expr><name>server_cert_summary</name> <operator>=</operator> <call><name>SecCertificateCopySubjectSummary</name><argument_list>(<argument><expr><name>cert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CURL_BUILD_MAC_10_7</name></expr></cpp:if>

<if_stmt><if>if<condition>(<expr><name>SecCertificateCopyLongDescription</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>server_cert_summary</name> <operator>=</operator>

<call><name>SecCertificateCopyLongDescription</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>cert</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CURL_BUILD_MAC_10_6</name></expr></cpp:if>

if<condition>(<expr><name>SecCertificateCopySubjectSummary</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>server_cert_summary</name> <operator>=</operator> <call><name>SecCertificateCopySubjectSummary</name><argument_list>(<argument><expr><name>cert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>SecCertificateCopyCommonName</name><argument_list>(<argument><expr><name>cert</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>server_cert_summary</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<return>return <expr><name>server_cert_summary</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>CopyCertSubject</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><name>SecCertificateRef</name></type> <name>cert</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>certp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CFStringRef</name></type> <name>c</name> <init>= <expr><call><name>getsubject</name><argument_list>(<argument><expr><name>cert</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>direct</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cbuf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>certp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>c</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"SSL: invalid CA certificate subject"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_PEER_FAILED_VERIFICATION</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>direct</name> <operator>=</operator> <call><name>CFStringGetCStringPtr</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>kCFStringEncodingUTF8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>direct</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>certp</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>direct</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>*</operator><name>certp</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"SSL: out of memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_OUT_OF_MEMORY</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>cbuf_size</name> <init>= <expr><operator>(</operator><operator>(</operator><name>size_t</name><operator>)</operator><call><name>CFStringGetLength</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">4</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>cbuf</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><name>cbuf_size</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>cbuf</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>CFStringGetCString</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>cbuf</name></expr></argument>, <argument><expr><name>cbuf_size</name></expr></argument>,

<argument><expr><name>kCFStringEncodingUTF8</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"SSL: invalid CA certificate subject"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_PEER_FAILED_VERIFICATION</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>certp</name> <operator>=</operator> <name>cbuf</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"SSL: couldn't allocate %zu bytes of memory"</literal></expr></argument>, <argument><expr><name>cbuf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_OUT_OF_MEMORY</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>cbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CURL_SUPPORT_MAC_10_6</name></expr></cpp:if>

<function><type><specifier>static</specifier> <name>OSStatus</name></type> <name>CopyIdentityWithLabelOldSchool</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>label</name></decl></parameter>,

<parameter><decl><type><name>SecIdentityRef</name> <modifier>*</modifier></type><name>out_c_a_k</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>OSStatus</name></type> <name>status</name> <init>= <expr><name>errSecItemNotFound</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SecKeychainAttributeList</name></type> <name>attr_list</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SecKeychainAttribute</name></type> <name>attr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SecKeychainSearchRef</name></type> <name>search</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SecCertificateRef</name></type> <name>cert</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>attr_list</name><operator>.</operator><name>count</name></name> <operator>=</operator> <literal type="number">1L</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>attr_list</name><operator>.</operator><name>attr</name></name> <operator>=</operator> <operator>&amp;</operator><name>attr</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>attr</name><operator>.</operator><name>tag</name></name> <operator>=</operator> <name>kSecLabelItemAttr</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>attr</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name>label</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>attr</name><operator>.</operator><name>length</name></name> <operator>=</operator> <operator>(</operator><name>UInt32</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>SecKeychainSearchCreateFromAttributes</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>,

<argument><expr><name>kSecCertificateItemClass</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>attr_list</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>search</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>status</name> <operator>==</operator> <name>noErr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>SecKeychainSearchCopyNext</name><argument_list>(<argument><expr><name>search</name></expr></argument>,

<argument><expr><operator>(</operator><name>SecKeychainItemRef</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>cert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>status</name> <operator>==</operator> <name>noErr</name> <operator>&amp;&amp;</operator> <name>cert</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>SecIdentityCreateWithCertificate</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>cert</name></expr></argument>, <argument><expr><name>out_c_a_k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>cert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>search</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>search</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>status</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><specifier>static</specifier> <name>OSStatus</name></type> <name>CopyIdentityWithLabel</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>label</name></decl></parameter>,

<parameter><decl><type><name>SecIdentityRef</name> <modifier>*</modifier></type><name>out_cert_and_key</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>OSStatus</name></type> <name>status</name> <init>= <expr><name>errSecItemNotFound</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CURL_BUILD_MAC_10_7</name> <operator>||</operator> <name>CURL_BUILD_IOS</name></expr></cpp:if>

<decl_stmt><decl><type><name>CFArrayRef</name></type> <name>keys_list</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CFIndex</name></type> <name>keys_list_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CFIndex</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CFStringRef</name></type> <name>common_name</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>SecItemCopyMatching</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>kSecClassIdentity</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>CFTypeRef</name></type> <name><name>keys</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CFTypeRef</name></type> <name><name>values</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CFDictionaryRef</name></type> <name>query_dict</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CFStringRef</name></type> <name>label_cf</name> <init>= <expr><call><name>CFStringCreateWithCString</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>label</name></expr></argument>,

<argument><expr><name>kCFStringEncodingUTF8</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>kSecClassIdentity</name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>keys</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>kSecClass</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>kCFBooleanTrue</name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>keys</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>kSecReturnRef</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>kSecMatchLimitAll</name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>keys</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>kSecMatchLimit</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>SecPolicyCreateSSL</name><argument_list>(<argument><expr><name>false</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>keys</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>kSecMatchPolicy</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>label_cf</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>keys</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>kSecAttrLabel</name></expr>;</expr_stmt>

<expr_stmt><expr><name>query_dict</name> <operator>=</operator> <call><name>CFDictionaryCreate</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>keys</name></expr></argument>,

<argument><expr><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>values</name></expr></argument>, <argument><expr><literal type="number">5L</literal></expr></argument>,

<argument><expr><operator>&amp;</operator><name>kCFCopyStringDictionaryKeyCallBacks</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>kCFTypeDictionaryValueCallBacks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name><name>values</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>SecItemCopyMatching</name><argument_list>(<argument><expr><name>query_dict</name></expr></argument>, <argument><expr><operator>(</operator><name>CFTypeRef</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>keys_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>status</name> <operator>==</operator> <name>noErr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>keys_list_count</name> <operator>=</operator> <call><name>CFArrayGetCount</name><argument_list>(<argument><expr><name>keys_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>out_cert_and_key</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>keys_list_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>OSStatus</name></type> <name>err</name> <init>= <expr><name>noErr</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SecCertificateRef</name></type> <name>cert</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SecIdentityRef</name></type> <name>identity</name> <init>=

<expr><operator>(</operator><name>SecIdentityRef</name><operator>)</operator> <call><name>CFArrayGetValueAtIndex</name><argument_list>(<argument><expr><name>keys_list</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>SecIdentityCopyCertificate</name><argument_list>(<argument><expr><name>identity</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>err</name> <operator>==</operator> <name>noErr</name></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CURL_BUILD_IOS</name></expr></cpp:if>

<expr_stmt><expr><name>common_name</name> <operator>=</operator> <call><name>SecCertificateCopySubjectSummary</name><argument_list>(<argument><expr><name>cert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>CURL_BUILD_MAC_10_7</name></expr></cpp:elif>

<expr_stmt><expr><call><name>SecCertificateCopyCommonName</name><argument_list>(<argument><expr><name>cert</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>common_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if<condition>(<expr><call><name>CFStringCompare</name><argument_list>(<argument><expr><name>common_name</name></expr></argument>, <argument><expr><name>label_cf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>kCFCompareEqualTo</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>cert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>common_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CFRetain</name><argument_list>(<argument><expr><name>identity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>out_cert_and_key</name> <operator>=</operator> <name>identity</name></expr>;</expr_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <name>noErr</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>common_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>cert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>keys_list</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>keys_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>query_dict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>label_cf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CURL_SUPPORT_MAC_10_6</name></expr></cpp:if>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>CopyIdentityWithLabelOldSchool</name><argument_list>(<argument><expr><name>label</name></expr></argument>, <argument><expr><name>out_cert_and_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</block_content>}</block></else></if_stmt>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>CURL_SUPPORT_MAC_10_6</name></expr></cpp:elif>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>CopyIdentityWithLabelOldSchool</name><argument_list>(<argument><expr><name>label</name></expr></argument>, <argument><expr><name>out_cert_and_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<return>return <expr><name>status</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>OSStatus</name></type> <name>CopyIdentityFromPKCS12File</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cPath</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cPassword</name></decl></parameter>,

<parameter><decl><type><name>SecIdentityRef</name> <modifier>*</modifier></type><name>out_cert_and_key</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>OSStatus</name></type> <name>status</name> <init>= <expr><name>errSecItemNotFound</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CFURLRef</name></type> <name>pkcs_url</name> <init>= <expr><call><name>CFURLCreateFromFileSystemRepresentation</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>,

<argument><expr><operator>(</operator><specifier>const</specifier> <name>UInt8</name> <operator>*</operator><operator>)</operator><name>cPath</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>cPath</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CFStringRef</name></type> <name>password</name> <init>= <expr><ternary><condition><expr><name>cPassword</name></expr> ?</condition><then> <expr><call><name>CFStringCreateWithCString</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>,

<argument><expr><name>cPassword</name></expr></argument>, <argument><expr><name>kCFStringEncodingUTF8</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CFDataRef</name></type> <name>pkcs_data</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CURL_BUILD_MAC_10_7</name> <operator>||</operator> <name>CURL_BUILD_IOS</name></expr></cpp:if>

<if_stmt><if>if<condition>(<expr><call><name>CFURLCreateDataAndPropertiesFromResource</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pkcs_url</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pkcs_data</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>status</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>CFArrayRef</name></type> <name>items</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CURL_BUILD_IOS</name></expr></cpp:if>

<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name><name>cKeys</name><index>[]</index></name> <init>= <expr><block>{<expr><name>kSecImportExportPassphrase</name></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name><name>cValues</name><index>[]</index></name> <init>= <expr><block>{<expr><name>password</name></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CFDictionaryRef</name></type> <name>options</name> <init>= <expr><call><name>CFDictionaryCreate</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>cKeys</name></expr></argument>, <argument><expr><name>cValues</name></expr></argument>,

<argument><expr><ternary><condition><expr><name>password</name></expr> ?</condition><then> <expr><literal type="number">1L</literal></expr> </then><else>: <expr><literal type="number">0L</literal></expr></else></ternary></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>options</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>SecPKCS12Import</name><argument_list>(<argument><expr><name>pkcs_data</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>items</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>CURL_BUILD_MAC_10_7</name></expr></cpp:elif>

<decl_stmt><decl><type><name>SecItemImportExportKeyParameters</name></type> <name>keyParams</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SecExternalFormat</name></type> <name>inputFormat</name> <init>= <expr><name>kSecFormatPKCS12</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SecExternalItemType</name></type> <name>inputType</name> <init>= <expr><name>kSecItemTypeCertificate</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>keyParams</name></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>keyParams</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>keyParams</name><operator>.</operator><name>version</name></name> <operator>=</operator> <name>SEC_KEY_IMPORT_EXPORT_PARAMS_VERSION</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>keyParams</name><operator>.</operator><name>passphrase</name></name> <operator>=</operator> <name>password</name></expr>;</expr_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>SecItemImport</name><argument_list>(<argument><expr><name>pkcs_data</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>inputFormat</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>inputType</name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>keyParams</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>items</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if<condition>(<expr><name>status</name> <operator>==</operator> <name>errSecSuccess</name> <operator>&amp;&amp;</operator> <name>items</name> <operator>&amp;&amp;</operator> <call><name>CFArrayGetCount</name><argument_list>(<argument><expr><name>items</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>CFIndex</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>count</name></decl>;</decl_stmt>

<expr_stmt><expr><name>count</name> <operator>=</operator> <call><name>CFArrayGetCount</name><argument_list>(<argument><expr><name>items</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>CFTypeRef</name></type> <name>item</name> <init>= <expr><operator>(</operator><name>CFTypeRef</name><operator>)</operator> <call><name>CFArrayGetValueAtIndex</name><argument_list>(<argument><expr><name>items</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CFTypeID</name></type> <name>itemID</name> <init>= <expr><call><name>CFGetTypeID</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>itemID</name> <operator>==</operator> <call><name>CFDictionaryGetTypeID</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>CFTypeRef</name></type> <name>identity</name> <init>= <expr><operator>(</operator><name>CFTypeRef</name><operator>)</operator> <call><name>CFDictionaryGetValue</name><argument_list>(

<argument><expr><operator>(</operator><name>CFDictionaryRef</name><operator>)</operator> <name>item</name></expr></argument>,

<argument><expr><name>kSecImportItemIdentity</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>CFRetain</name><argument_list>(<argument><expr><name>identity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>out_cert_and_key</name> <operator>=</operator> <operator>(</operator><name>SecIdentityRef</name><operator>)</operator> <name>identity</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CURL_BUILD_MAC_10_7</name></expr></cpp:if>

<if type="elseif">else if<condition>(<expr><name>itemID</name> <operator>==</operator> <call><name>SecCertificateGetTypeID</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>SecIdentityCreateWithCertificate</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>,

<argument><expr><operator>(</operator><name>SecCertificateRef</name><operator>)</operator> <name>item</name></expr></argument>,

<argument><expr><name>out_cert_and_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>items</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>items</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>pkcs_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<if_stmt><if>if<condition>(<expr><name>password</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>password</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>pkcs_url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>status</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>CF_INLINE</name> <name>bool</name></type> <name>is_file</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>struct_stat</name></type> <name>st</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>filename</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>stat</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>S_ISREG</name><argument_list>(<argument><expr><name><name>st</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CURL_BUILD_MAC_10_8</name> <operator>||</operator> <name>CURL_BUILD_IOS</name></expr></cpp:if>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>sectransp_version_from_curl</name><parameter_list>(<parameter><decl><type><name>SSLProtocol</name> <modifier>*</modifier></type><name>darwinver</name></decl></parameter>,

<parameter><decl><type><name>long</name></type> <name>ssl_version</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch<condition>(<expr><name>ssl_version</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>CURL_SSLVERSION_TLSv1_0</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>darwinver</name> <operator>=</operator> <name>kTLSProtocol1</name></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

<case>case <expr><name>CURL_SSLVERSION_TLSv1_1</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>darwinver</name> <operator>=</operator> <name>kTLSProtocol11</name></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

<case>case <expr><name>CURL_SSLVERSION_TLSv1_2</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>darwinver</name> <operator>=</operator> <name>kTLSProtocol12</name></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

<case>case <expr><name>CURL_SSLVERSION_TLSv1_3</name></expr>:</case>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>CURL_BUILD_MAC_10_13</name> <operator>||</operator> <name>CURL_BUILD_IOS_11</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>HAVE_BUILTIN_AVAILABLE</name> <operator>==</operator> <literal type="number">1</literal></expr></cpp:if>

<if_stmt><if>if<condition>(<expr><call><name>__builtin_available</name><argument_list>(<argument><expr><name>macOS</name> <literal type="number">10.13</literal></expr></argument>, <argument><expr><name>iOS</name> <literal type="number">11.0</literal></expr></argument>, <argument><expr><operator>*</operator></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>darwinver</name> <operator>=</operator> <name>kTLSProtocol13</name></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<break>break;</break>

</block_content>}</block></switch>

<return>return <expr><name>CURLE_SSL_CONNECT_ERROR</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>CURLcode</name></type>

<name>set_ssl_version_min_max</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sockindex</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ssl_connect_data</name></name> <modifier>*</modifier></type><name>connssl</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>ssl</name><index>[<expr><name>sockindex</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ssl_backend_data</name></name> <modifier>*</modifier></type><name>backend</name> <init>= <expr><name><name>connssl</name><operator>-&gt;</operator><name>backend</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>ssl_version</name> <init>= <expr><call><name>SSL_CONN_CONFIG</name><argument_list>(<argument><expr><name>version</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>ssl_version_max</name> <init>= <expr><call><name>SSL_CONN_CONFIG</name><argument_list>(<argument><expr><name>version_max</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>max_supported_version_by_os</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>CURL_BUILD_MAC_10_13</name> <operator>||</operator> <name>CURL_BUILD_IOS_11</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>HAVE_BUILTIN_AVAILABLE</name> <operator>==</operator> <literal type="number">1</literal></expr></cpp:if>

<if_stmt><if>if<condition>(<expr><call><name>__builtin_available</name><argument_list>(<argument><expr><name>macOS</name> <literal type="number">10.13</literal></expr></argument>, <argument><expr><name>iOS</name> <literal type="number">11.0</literal></expr></argument>, <argument><expr><operator>*</operator></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>max_supported_version_by_os</name> <operator>=</operator> <name>CURL_SSLVERSION_MAX_TLSv1_3</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>max_supported_version_by_os</name> <operator>=</operator> <name>CURL_SSLVERSION_MAX_TLSv1_2</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name>max_supported_version_by_os</name> <operator>=</operator> <name>CURL_SSLVERSION_MAX_TLSv1_2</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<switch>switch<condition>(<expr><name>ssl_version</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>CURL_SSLVERSION_DEFAULT</name></expr>:</case>

<case>case <expr><name>CURL_SSLVERSION_TLSv1</name></expr>:</case>

<expr_stmt><expr><name>ssl_version</name> <operator>=</operator> <name>CURL_SSLVERSION_TLSv1_0</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<switch>switch<condition>(<expr><name>ssl_version_max</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>CURL_SSLVERSION_MAX_NONE</name></expr>:</case>

<case>case <expr><name>CURL_SSLVERSION_MAX_DEFAULT</name></expr>:</case>

<expr_stmt><expr><name>ssl_version_max</name> <operator>=</operator> <name>max_supported_version_by_os</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CURL_BUILD_MAC_10_8</name> <operator>||</operator> <name>CURL_BUILD_IOS</name></expr></cpp:if>

<if_stmt><if>if<condition>(<expr><name>SSLSetProtocolVersionMax</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>SSLProtocol</name></type> <name>darwin_ver_min</name> <init>= <expr><name>kTLSProtocol1</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SSLProtocol</name></type> <name>darwin_ver_max</name> <init>= <expr><name>kTLSProtocol1</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><call><name>sectransp_version_from_curl</name><argument_list>(<argument><expr><operator>&amp;</operator><name>darwin_ver_min</name></expr></argument>,

<argument><expr><name>ssl_version</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"unsupported min version passed via CURLOPT_SSLVERSION"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>sectransp_version_from_curl</name><argument_list>(<argument><expr><operator>&amp;</operator><name>darwin_ver_max</name></expr></argument>,

<argument><expr><name>ssl_version_max</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"unsupported max version passed via CURLOPT_SSLVERSION"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>SSLSetProtocolVersionMin</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>ssl_ctx</name></name></expr></argument>, <argument><expr><name>darwin_ver_min</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>SSLSetProtocolVersionMax</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>ssl_ctx</name></name></expr></argument>, <argument><expr><name>darwin_ver_max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></if>

<else>else <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CURL_SUPPORT_MAC_10_8</name></expr></cpp:if>

<decl_stmt><decl><type><name>long</name></type> <name>i</name> <init>= <expr><name>ssl_version</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>SSLSetProtocolVersionEnabled</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>ssl_ctx</name></name></expr></argument>,

<argument><expr><name>kSSLProtocolAll</name></expr></argument>,

<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <operator>(</operator><name>ssl_version_max</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<switch>switch<condition>(<expr><name>i</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>CURL_SSLVERSION_TLSv1_0</name></expr>:</case>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>SSLSetProtocolVersionEnabled</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>ssl_ctx</name></name></expr></argument>,

<argument><expr><name>kTLSProtocol1</name></expr></argument>,

<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>CURL_SSLVERSION_TLSv1_1</name></expr>:</case>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>SSLSetProtocolVersionEnabled</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>ssl_ctx</name></name></expr></argument>,

<argument><expr><name>kTLSProtocol11</name></expr></argument>,

<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>CURL_SSLVERSION_TLSv1_2</name></expr>:</case>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>SSLSetProtocolVersionEnabled</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>ssl_ctx</name></name></expr></argument>,

<argument><expr><name>kTLSProtocol12</name></expr></argument>,

<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>CURL_SSLVERSION_TLSv1_3</name></expr>:</case>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Your version of the OS does not support TLSv1.3"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_SSL_CONNECT_ERROR</name></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></for>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</block_content>}</block></else></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Secure Transport: cannot set SSL protocol"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_SSL_CONNECT_ERROR</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>sectransp_connect_step1</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>sockindex</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>curl_socket_t</name></type> <name>sockfd</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>sock</name><index>[<expr><name>sockindex</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ssl_connect_data</name></name> <modifier>*</modifier></type><name>connssl</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>ssl</name><index>[<expr><name>sockindex</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ssl_backend_data</name></name> <modifier>*</modifier></type><name>backend</name> <init>= <expr><name><name>connssl</name><operator>-&gt;</operator><name>backend</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>ssl_cafile</name> <init>= <expr><call><name>SSL_CONN_CONFIG</name><argument_list>(<argument><expr><name>CAfile</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>verifypeer</name> <init>= <expr><call><name>SSL_CONN_CONFIG</name><argument_list>(<argument><expr><name>verifypeer</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>ssl_cert</name> <init>= <expr><call><name>SSL_SET_OPTION</name><argument_list>(<argument><expr><name>cert</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>hostname</name> <init>= <expr><ternary><condition><expr><call><name>SSL_IS_PROXY</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><name><name>conn</name><operator>-&gt;</operator><name>http_proxy</name><operator>.</operator><name>host</name><operator>.</operator><name>name</name></name></expr> </then><else>:

<expr><name><name>conn</name><operator>-&gt;</operator><name>host</name><operator>.</operator><name>name</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>long</name> <name>int</name></type> <name>port</name> <init>= <expr><ternary><condition><expr><call><name>SSL_IS_PROXY</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><name><name>conn</name><operator>-&gt;</operator><name>port</name></name></expr> </then><else>: <expr><name><name>conn</name><operator>-&gt;</operator><name>remote_port</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_IPV6</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name><name>struct</name> <name>in6_addr</name></name></type> <name>addr</name></decl>;</decl_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name><name>struct</name> <name>in_addr</name></name></type> <name>addr</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<decl_stmt><decl><type><name>size_t</name></type> <name>all_ciphers_count</name> <init>= <expr><literal type="number">0UL</literal></expr></init></decl>, <decl><type ref="prev"/><name>allowed_ciphers_count</name> <init>= <expr><literal type="number">0UL</literal></expr></init></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SSLCipherSuite</name> <modifier>*</modifier></type><name>all_ciphers</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>allowed_ciphers</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>OSStatus</name></type> <name>err</name> <init>= <expr><name>noErr</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CURL_BUILD_MAC</name></expr></cpp:if>

<decl_stmt><decl><type><name>int</name></type> <name>darwinver_maj</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>darwinver_min</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetDarwinVersionNumber</name><argument_list>(<argument><expr><operator>&amp;</operator><name>darwinver_maj</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>darwinver_min</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CURL_BUILD_MAC_10_8</name> <operator>||</operator> <name>CURL_BUILD_IOS</name></expr></cpp:if>

<if_stmt><if>if<condition>(<expr><name>SSLCreateContext</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content> 

<if_stmt><if>if<condition>(<expr><name><name>backend</name><operator>-&gt;</operator><name>ssl_ctx</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>ssl_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>backend</name><operator>-&gt;</operator><name>ssl_ctx</name></name> <operator>=</operator> <call><name>SSLCreateContext</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>kSSLClientSide</name></expr></argument>, <argument><expr><name>kSSLStreamType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>backend</name><operator>-&gt;</operator><name>ssl_ctx</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"SSL: couldn't create a context!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CURL_SUPPORT_MAC_10_8</name></expr></cpp:if>

<if_stmt><if>if<condition>(<expr><name><name>backend</name><operator>-&gt;</operator><name>ssl_ctx</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>SSLDisposeContext</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>ssl_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>SSLNewContext</name><argument_list>(<argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>backend</name><operator>-&gt;</operator><name>ssl_ctx</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>err</name> <operator>!=</operator> <name>noErr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"SSL: couldn't create a context: OSStatus %d"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</block_content>}</block></else></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<if_stmt><if>if<condition>(<expr><name><name>backend</name><operator>-&gt;</operator><name>ssl_ctx</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>SSLDisposeContext</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>ssl_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>SSLNewContext</name><argument_list>(<argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>backend</name><operator>-&gt;</operator><name>ssl_ctx</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>err</name> <operator>!=</operator> <name>noErr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"SSL: couldn't create a context: OSStatus %d"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<expr_stmt><expr><name><name>backend</name><operator>-&gt;</operator><name>ssl_write_buffered_length</name></name> <operator>=</operator> <literal type="number">0UL</literal></expr>;</expr_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CURL_BUILD_MAC_10_8</name> <operator>||</operator> <name>CURL_BUILD_IOS</name></expr></cpp:if>

<if_stmt><if>if<condition>(<expr><name>SSLSetProtocolVersionMax</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<switch>switch<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>ssl_config</name><operator>.</operator><name>version</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>CURL_SSLVERSION_TLSv1</name></expr>:</case>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>SSLSetProtocolVersionMin</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>ssl_ctx</name></name></expr></argument>, <argument><expr><name>kTLSProtocol1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>CURL_BUILD_MAC_10_13</name> <operator>||</operator> <name>CURL_BUILD_IOS_11</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>HAVE_BUILTIN_AVAILABLE</name> <operator>==</operator> <literal type="number">1</literal></expr></cpp:if>

<if_stmt><if>if<condition>(<expr><call><name>__builtin_available</name><argument_list>(<argument><expr><name>macOS</name> <literal type="number">10.13</literal></expr></argument>, <argument><expr><name>iOS</name> <literal type="number">11.0</literal></expr></argument>, <argument><expr><operator>*</operator></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>SSLSetProtocolVersionMax</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>ssl_ctx</name></name></expr></argument>, <argument><expr><name>kTLSProtocol13</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>SSLSetProtocolVersionMax</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>ssl_ctx</name></name></expr></argument>, <argument><expr><name>kTLSProtocol12</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>SSLSetProtocolVersionMax</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>ssl_ctx</name></name></expr></argument>, <argument><expr><name>kTLSProtocol12</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<break>break;</break>

<case>case <expr><name>CURL_SSLVERSION_DEFAULT</name></expr>:</case>

<case>case <expr><name>CURL_SSLVERSION_TLSv1_0</name></expr>:</case>

<case>case <expr><name>CURL_SSLVERSION_TLSv1_1</name></expr>:</case>

<case>case <expr><name>CURL_SSLVERSION_TLSv1_2</name></expr>:</case>

<case>case <expr><name>CURL_SSLVERSION_TLSv1_3</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><call><name>set_ssl_version_min_max</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>sockindex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name> <operator>!=</operator> <name>CURLE_OK</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>CURL_SSLVERSION_SSLv3</name></expr>:</case>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>SSLSetProtocolVersionMin</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>ssl_ctx</name></name></expr></argument>, <argument><expr><name>kSSLProtocol3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>err</name> <operator>!=</operator> <name>noErr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Your version of the OS does not support SSLv3"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_SSL_CONNECT_ERROR</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>SSLSetProtocolVersionMax</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>ssl_ctx</name></name></expr></argument>, <argument><expr><name>kSSLProtocol3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>CURL_SSLVERSION_SSLv2</name></expr>:</case>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>SSLSetProtocolVersionMin</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>ssl_ctx</name></name></expr></argument>, <argument><expr><name>kSSLProtocol2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>err</name> <operator>!=</operator> <name>noErr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Your version of the OS does not support SSLv2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_SSL_CONNECT_ERROR</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>SSLSetProtocolVersionMax</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>ssl_ctx</name></name></expr></argument>, <argument><expr><name>kSSLProtocol2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Unrecognized parameter passed via CURLOPT_SSLVERSION"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_SSL_CONNECT_ERROR</name></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></if>

<else>else <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CURL_SUPPORT_MAC_10_8</name></expr></cpp:if>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>SSLSetProtocolVersionEnabled</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>ssl_ctx</name></name></expr></argument>,

<argument><expr><name>kSSLProtocolAll</name></expr></argument>,

<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>ssl_config</name><operator>.</operator><name>version</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>CURL_SSLVERSION_DEFAULT</name></expr>:</case>

<case>case <expr><name>CURL_SSLVERSION_TLSv1</name></expr>:</case>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>SSLSetProtocolVersionEnabled</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>ssl_ctx</name></name></expr></argument>,

<argument><expr><name>kTLSProtocol1</name></expr></argument>,

<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>SSLSetProtocolVersionEnabled</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>ssl_ctx</name></name></expr></argument>,

<argument><expr><name>kTLSProtocol11</name></expr></argument>,

<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>SSLSetProtocolVersionEnabled</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>ssl_ctx</name></name></expr></argument>,

<argument><expr><name>kTLSProtocol12</name></expr></argument>,

<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>CURL_SSLVERSION_TLSv1_0</name></expr>:</case>

<case>case <expr><name>CURL_SSLVERSION_TLSv1_1</name></expr>:</case>

<case>case <expr><name>CURL_SSLVERSION_TLSv1_2</name></expr>:</case>

<case>case <expr><name>CURL_SSLVERSION_TLSv1_3</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><call><name>set_ssl_version_min_max</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>sockindex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name> <operator>!=</operator> <name>CURLE_OK</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>CURL_SSLVERSION_SSLv3</name></expr>:</case>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>SSLSetProtocolVersionEnabled</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>ssl_ctx</name></name></expr></argument>,

<argument><expr><name>kSSLProtocol3</name></expr></argument>,

<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>err</name> <operator>!=</operator> <name>noErr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Your version of the OS does not support SSLv3"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_SSL_CONNECT_ERROR</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>CURL_SSLVERSION_SSLv2</name></expr>:</case>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>SSLSetProtocolVersionEnabled</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>ssl_ctx</name></name></expr></argument>,

<argument><expr><name>kSSLProtocol2</name></expr></argument>,

<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>err</name> <operator>!=</operator> <name>noErr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Your version of the OS does not support SSLv2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_SSL_CONNECT_ERROR</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Unrecognized parameter passed via CURLOPT_SSLVERSION"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_SSL_CONNECT_ERROR</name></expr>;</return>

</block_content>}</block></switch>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</block_content>}</block></else></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>ssl_config</name><operator>.</operator><name>version_max</name></name> <operator>!=</operator> <name>CURL_SSLVERSION_MAX_NONE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Your version of the OS does not support to set maximum"</literal>

<literal type="string">" SSL/TLS version"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_SSL_CONNECT_ERROR</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>SSLSetProtocolVersionEnabled</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>ssl_ctx</name></name></expr></argument>, <argument><expr><name>kSSLProtocolAll</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>ssl_config</name><operator>.</operator><name>version</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>CURL_SSLVERSION_DEFAULT</name></expr>:</case>

<case>case <expr><name>CURL_SSLVERSION_TLSv1</name></expr>:</case>

<case>case <expr><name>CURL_SSLVERSION_TLSv1_0</name></expr>:</case>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>SSLSetProtocolVersionEnabled</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>ssl_ctx</name></name></expr></argument>,

<argument><expr><name>kTLSProtocol1</name></expr></argument>,

<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>CURL_SSLVERSION_TLSv1_1</name></expr>:</case>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Your version of the OS does not support TLSv1.1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_SSL_CONNECT_ERROR</name></expr>;</return>

<case>case <expr><name>CURL_SSLVERSION_TLSv1_2</name></expr>:</case>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Your version of the OS does not support TLSv1.2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_SSL_CONNECT_ERROR</name></expr>;</return>

<case>case <expr><name>CURL_SSLVERSION_TLSv1_3</name></expr>:</case>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Your version of the OS does not support TLSv1.3"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_SSL_CONNECT_ERROR</name></expr>;</return>

<case>case <expr><name>CURL_SSLVERSION_SSLv2</name></expr>:</case>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>SSLSetProtocolVersionEnabled</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>ssl_ctx</name></name></expr></argument>,

<argument><expr><name>kSSLProtocol2</name></expr></argument>,

<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>err</name> <operator>!=</operator> <name>noErr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Your version of the OS does not support SSLv2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_SSL_CONNECT_ERROR</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>CURL_SSLVERSION_SSLv3</name></expr>:</case>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>SSLSetProtocolVersionEnabled</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>ssl_ctx</name></name></expr></argument>,

<argument><expr><name>kSSLProtocol3</name></expr></argument>,

<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>err</name> <operator>!=</operator> <name>noErr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Your version of the OS does not support SSLv3"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_SSL_CONNECT_ERROR</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Unrecognized parameter passed via CURLOPT_SSLVERSION"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_SSL_CONNECT_ERROR</name></expr>;</return>

</block_content>}</block></switch>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>CURL_BUILD_MAC_10_13</name> <operator>||</operator> <name>CURL_BUILD_IOS_11</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>HAVE_BUILTIN_AVAILABLE</name> <operator>==</operator> <literal type="number">1</literal></expr></cpp:if>

<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>tls_enable_alpn</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>__builtin_available</name><argument_list>(<argument><expr><name>macOS</name> <literal type="number">10.13.4</literal></expr></argument>, <argument><expr><name>iOS</name> <literal type="number">11</literal></expr></argument>, <argument><expr><name>tvOS</name> <literal type="number">11</literal></expr></argument>, <argument><expr><operator>*</operator></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>CFMutableArrayRef</name></type> <name>alpnArr</name> <init>= <expr><call><name>CFArrayCreateMutable</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><operator>&amp;</operator><name>kCFTypeArrayCallBacks</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_NGHTTP2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>httpversion</name></name> <operator>&gt;=</operator> <name>CURL_HTTP_VERSION_2</name> <operator>&amp;&amp;</operator>

<operator>(</operator><operator>!</operator><call><name>SSL_IS_PROXY</name><argument_list>()</argument_list></call> <operator>||</operator> <operator>!</operator><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>tunnel_proxy</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>CFArrayAppendValue</name><argument_list>(<argument><expr><name>alpnArr</name></expr></argument>, <argument><expr><call><name>CFSTR</name><argument_list>(<argument><expr><name>NGHTTP2_PROTO_VERSION_ID</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"ALPN, offering %s\n"</literal></expr></argument>, <argument><expr><name>NGHTTP2_PROTO_VERSION_ID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>CFArrayAppendValue</name><argument_list>(<argument><expr><name>alpnArr</name></expr></argument>, <argument><expr><call><name>CFSTR</name><argument_list>(<argument><expr><name>ALPN_HTTP_1_1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"ALPN, offering %s\n"</literal></expr></argument>, <argument><expr><name>ALPN_HTTP_1_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>SSLSetALPNProtocols</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>ssl_ctx</name></name></expr></argument>, <argument><expr><name>alpnArr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>err</name> <operator>!=</operator> <name>noErr</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"WARNING: failed to set ALPN protocols; OSStatus %d\n"</literal></expr></argument>,

<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>alpnArr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if<condition>(<expr><call><name>SSL_SET_OPTION</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"WARNING: SSL: CURLOPT_SSLKEY is ignored by Secure "</literal>

<literal type="string">"Transport. The private key must be in the Keychain.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>ssl_cert</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>SecIdentityRef</name></type> <name>cert_and_key</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>is_cert_file</name> <init>= <expr><call><name>is_file</name><argument_list>(<argument><expr><name>ssl_cert</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>is_cert_file</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>SSL_SET_OPTION</name><argument_list>(<argument><expr><name>cert_type</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"WARNING: SSL: Certificate type not set, assuming "</literal>

<literal type="string">"PKCS#12 format.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><call><name>SSL_SET_OPTION</name><argument_list>(<argument><expr><name>cert_type</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"P12"</literal></expr></argument>,

<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><call><name>SSL_SET_OPTION</name><argument_list>(<argument><expr><name>cert_type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"WARNING: SSL: The Security framework only supports "</literal>

<literal type="string">"loading identities that are in PKCS#12 format.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>CopyIdentityFromPKCS12File</name><argument_list>(<argument><expr><name>ssl_cert</name></expr></argument>,

<argument><expr><call><name>SSL_SET_OPTION</name><argument_list>(<argument><expr><name>key_passwd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>cert_and_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>CopyIdentityWithLabel</name><argument_list>(<argument><expr><name>ssl_cert</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cert_and_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name>err</name> <operator>==</operator> <name>noErr</name> <operator>&amp;&amp;</operator> <name>cert_and_key</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>SecCertificateRef</name></type> <name>cert</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CFTypeRef</name></type> <name><name>certs_c</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CFArrayRef</name></type> <name>certs</name></decl>;</decl_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>SecIdentityCopyCertificate</name><argument_list>(<argument><expr><name>cert_and_key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>err</name> <operator>==</operator> <name>noErr</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>certp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><call><name>CopyCertSubject</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>cert</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>certp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>result</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Client certificate: %s\n"</literal></expr></argument>, <argument><expr><name>certp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>certp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>cert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name> <operator>==</operator> <name>CURLE_PEER_FAILED_VERIFICATION</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_SSL_CERTPROBLEM</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>certs_c</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>cert_and_key</name></expr>;</expr_stmt>

<expr_stmt><expr><name>certs</name> <operator>=</operator> <call><name>CFArrayCreate</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>certs_c</name></expr></argument>, <argument><expr><literal type="number">1L</literal></expr></argument>,

<argument><expr><operator>&amp;</operator><name>kCFTypeArrayCallBacks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>SSLSetCertificate</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>ssl_ctx</name></name></expr></argument>, <argument><expr><name>certs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>certs</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>certs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>err</name> <operator>!=</operator> <name>noErr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"SSL: SSLSetCertificate() failed: OSStatus %d"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_SSL_CERTPROBLEM</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>cert_and_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<switch>switch<condition>(<expr><name>err</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>errSecAuthFailed</name></expr>:</case> <case>case <expr><operator>-</operator><literal type="number">25264</literal></expr>:</case> 

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"SSL: Incorrect password for the certificate \"%s\" "</literal>

<literal type="string">"and its private key."</literal></expr></argument>, <argument><expr><name>ssl_cert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><operator>-</operator><literal type="number">26275</literal></expr>:</case> <case>case <expr><operator>-</operator><literal type="number">25257</literal></expr>:</case> 

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"SSL: Couldn't make sense of the data in the "</literal>

<literal type="string">"certificate \"%s\" and its private key."</literal></expr></argument>,

<argument><expr><name>ssl_cert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><operator>-</operator><literal type="number">25260</literal></expr>:</case> 

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"SSL The certificate \"%s\" requires a password."</literal></expr></argument>,

<argument><expr><name>ssl_cert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>errSecItemNotFound</name></expr>:</case>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"SSL: Can't find the certificate \"%s\" and its private "</literal>

<literal type="string">"key in the Keychain."</literal></expr></argument>, <argument><expr><name>ssl_cert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"SSL: Can't load the certificate \"%s\" and its private "</literal>

<literal type="string">"key: OSStatus %d"</literal></expr></argument>, <argument><expr><name>ssl_cert</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<return>return <expr><name>CURLE_SSL_CERTPROBLEM</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CURL_BUILD_MAC_10_6</name> <operator>||</operator> <name>CURL_BUILD_IOS</name></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CURL_BUILD_MAC</name></expr></cpp:if>

<if_stmt><if>if<condition>(<expr><name>SSLSetSessionOption</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>darwinver_maj</name> <operator>&gt;=</operator> <literal type="number">13</literal></expr>)</condition> <block>{<block_content>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<if_stmt><if>if<condition>(<expr><name>SSLSetSessionOption</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<decl_stmt><decl><type><name>bool</name></type> <name>break_on_auth</name> <init>= <expr><operator>!</operator><name><name>conn</name><operator>-&gt;</operator><name>ssl_config</name><operator>.</operator><name>verifypeer</name></name> <operator>||</operator> <name>ssl_cafile</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>SSLSetSessionOption</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>ssl_ctx</name></name></expr></argument>,

<argument><expr><name>kSSLSessionOptionBreakOnServerAuth</name></expr></argument>,

<argument><expr><name>break_on_auth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>err</name> <operator>!=</operator> <name>noErr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"SSL: SSLSetSessionOption() failed: OSStatus %d"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_SSL_CONNECT_ERROR</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CURL_SUPPORT_MAC_10_8</name></expr></cpp:if>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>SSLSetEnableCertVerify</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>ssl_ctx</name></name></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>conn</name><operator>-&gt;</operator><name>ssl_config</name><operator>.</operator><name>verifypeer</name></name></expr>?</condition><then><expr><name>true</name></expr></then><else>:<expr><name>false</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>err</name> <operator>!=</operator> <name>noErr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"SSL: SSLSetEnableCertVerify() failed: OSStatus %d"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_SSL_CONNECT_ERROR</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</block_content>}</block></else></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>SSLSetEnableCertVerify</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>ssl_ctx</name></name></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>conn</name><operator>-&gt;</operator><name>ssl_config</name><operator>.</operator><name>verifypeer</name></name></expr>?</condition><then><expr><name>true</name></expr></then><else>:<expr><name>false</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>err</name> <operator>!=</operator> <name>noErr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"SSL: SSLSetEnableCertVerify() failed: OSStatus %d"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_SSL_CONNECT_ERROR</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<if_stmt><if>if<condition>(<expr><name>ssl_cafile</name> <operator>&amp;&amp;</operator> <name>verifypeer</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>is_cert_file</name> <init>= <expr><call><name>is_file</name><argument_list>(<argument><expr><name>ssl_cafile</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>is_cert_file</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"SSL: can't load CA certificate file %s"</literal></expr></argument>, <argument><expr><name>ssl_cafile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_SSL_CACERT_BADFILE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>ssl_config</name><operator>.</operator><name>verifyhost</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>SSLSetPeerDomainName</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>ssl_ctx</name></name></expr></argument>, <argument><expr><name>hostname</name></expr></argument>,

<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>hostname</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>err</name> <operator>!=</operator> <name>noErr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"WARNING: SSL: SSLSetPeerDomainName() failed: OSStatus %d\n"</literal></expr></argument>,

<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><call><name>Curl_inet_pton</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><name>hostname</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>)</argument_list></call><operator>)</operator>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_IPV6</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>||</operator> <operator>(</operator><call><name>Curl_inet_pton</name><argument_list>(<argument><expr><name>AF_INET6</name></expr></argument>, <argument><expr><name>hostname</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>)</argument_list></call><operator>)</operator></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"WARNING: using IP address, SNI is being disabled by "</literal>

<literal type="string">"the OS.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"WARNING: disabling hostname validation also disables SNI.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>SSLGetNumberSupportedCiphers</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>ssl_ctx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>all_ciphers_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>err</name> <operator>!=</operator> <name>noErr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"SSL: SSLGetNumberSupportedCiphers() failed: OSStatus %d"</literal></expr></argument>,

<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_SSL_CIPHER</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>all_ciphers</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>all_ciphers_count</name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>SSLCipherSuite</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>all_ciphers</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"SSL: Failed to allocate memory for all ciphers"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>allowed_ciphers</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>all_ciphers_count</name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>SSLCipherSuite</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>allowed_ciphers</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name>all_ciphers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"SSL: Failed to allocate memory for allowed ciphers"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>SSLGetSupportedCiphers</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>ssl_ctx</name></name></expr></argument>, <argument><expr><name>all_ciphers</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>all_ciphers_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>err</name> <operator>!=</operator> <name>noErr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name>all_ciphers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name>allowed_ciphers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_SSL_CIPHER</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0UL</literal></expr> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>all_ciphers_count</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CURL_BUILD_MAC</name></expr></cpp:if>

<if_stmt><if>if<condition>(<expr><name>darwinver_maj</name> <operator>==</operator> <literal type="number">12</literal> <operator>&amp;&amp;</operator> <name>darwinver_min</name> <operator>&lt;=</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator>

<name><name>all_ciphers</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">0xC001</literal> <operator>&amp;&amp;</operator> <name><name>all_ciphers</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;=</operator> <literal type="number">0xC032</literal></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<switch>switch<condition>(<expr><name><name>all_ciphers</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>SSL_NULL_WITH_NULL_NULL</name></expr>:</case>

<case>case <expr><name>SSL_RSA_WITH_NULL_MD5</name></expr>:</case>

<case>case <expr><name>SSL_RSA_WITH_NULL_SHA</name></expr>:</case>

<case>case <expr><literal type="number">0x003B</literal></expr>:</case> 

<case>case <expr><name>SSL_FORTEZZA_DMS_WITH_NULL_SHA</name></expr>:</case>

<case>case <expr><literal type="number">0xC001</literal></expr>:</case> 

<case>case <expr><literal type="number">0xC006</literal></expr>:</case> 

<case>case <expr><literal type="number">0xC00B</literal></expr>:</case> 

<case>case <expr><literal type="number">0xC010</literal></expr>:</case> 

<case>case <expr><literal type="number">0x002C</literal></expr>:</case> 

<case>case <expr><literal type="number">0x002D</literal></expr>:</case> 

<case>case <expr><literal type="number">0x002E</literal></expr>:</case> 

<case>case <expr><literal type="number">0x00B0</literal></expr>:</case> 

<case>case <expr><literal type="number">0x00B1</literal></expr>:</case> 

<case>case <expr><literal type="number">0x00B4</literal></expr>:</case> 

<case>case <expr><literal type="number">0x00B5</literal></expr>:</case> 

<case>case <expr><literal type="number">0x00B8</literal></expr>:</case> 

<case>case <expr><literal type="number">0x00B9</literal></expr>:</case> 

<case>case <expr><name>SSL_DH_anon_EXPORT_WITH_RC4_40_MD5</name></expr>:</case>

<case>case <expr><name>SSL_DH_anon_WITH_RC4_128_MD5</name></expr>:</case>

<case>case <expr><name>SSL_DH_anon_EXPORT_WITH_DES40_CBC_SHA</name></expr>:</case>

<case>case <expr><name>SSL_DH_anon_WITH_DES_CBC_SHA</name></expr>:</case>

<case>case <expr><name>SSL_DH_anon_WITH_3DES_EDE_CBC_SHA</name></expr>:</case>

<case>case <expr><name>TLS_DH_anon_WITH_AES_128_CBC_SHA</name></expr>:</case>

<case>case <expr><name>TLS_DH_anon_WITH_AES_256_CBC_SHA</name></expr>:</case>

<case>case <expr><literal type="number">0xC015</literal></expr>:</case> 

<case>case <expr><literal type="number">0xC016</literal></expr>:</case> 

<case>case <expr><literal type="number">0xC017</literal></expr>:</case> 

<case>case <expr><literal type="number">0xC018</literal></expr>:</case> 

<case>case <expr><literal type="number">0xC019</literal></expr>:</case> 

<case>case <expr><literal type="number">0x006C</literal></expr>:</case> 

<case>case <expr><literal type="number">0x006D</literal></expr>:</case> 

<case>case <expr><literal type="number">0x00A6</literal></expr>:</case> 

<case>case <expr><literal type="number">0x00A7</literal></expr>:</case> 

<case>case <expr><name>SSL_RSA_EXPORT_WITH_RC4_40_MD5</name></expr>:</case>

<case>case <expr><name>SSL_RSA_EXPORT_WITH_RC2_CBC_40_MD5</name></expr>:</case>

<case>case <expr><name>SSL_RSA_EXPORT_WITH_DES40_CBC_SHA</name></expr>:</case>

<case>case <expr><name>SSL_DH_DSS_EXPORT_WITH_DES40_CBC_SHA</name></expr>:</case>

<case>case <expr><name>SSL_DH_RSA_EXPORT_WITH_DES40_CBC_SHA</name></expr>:</case>

<case>case <expr><name>SSL_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA</name></expr>:</case>

<case>case <expr><name>SSL_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA</name></expr>:</case>

<case>case <expr><name>SSL_RSA_WITH_DES_CBC_SHA</name></expr>:</case>

<case>case <expr><name>SSL_DH_DSS_WITH_DES_CBC_SHA</name></expr>:</case>

<case>case <expr><name>SSL_DH_RSA_WITH_DES_CBC_SHA</name></expr>:</case>

<case>case <expr><name>SSL_DHE_DSS_WITH_DES_CBC_SHA</name></expr>:</case>

<case>case <expr><name>SSL_DHE_RSA_WITH_DES_CBC_SHA</name></expr>:</case>

<case>case <expr><name>SSL_RSA_WITH_IDEA_CBC_SHA</name></expr>:</case>

<case>case <expr><name>SSL_RSA_WITH_IDEA_CBC_MD5</name></expr>:</case>

<case>case <expr><name>SSL_RSA_WITH_RC4_128_MD5</name></expr>:</case>

<case>case <expr><name>SSL_RSA_WITH_RC4_128_SHA</name></expr>:</case>

<case>case <expr><literal type="number">0xC002</literal></expr>:</case> 

<case>case <expr><literal type="number">0xC007</literal></expr>:</case> 

<case>case <expr><literal type="number">0xC00C</literal></expr>:</case> 

<case>case <expr><literal type="number">0xC011</literal></expr>:</case> 

<case>case <expr><literal type="number">0x008A</literal></expr>:</case> 

<case>case <expr><literal type="number">0x008E</literal></expr>:</case> 

<case>case <expr><literal type="number">0x0092</literal></expr>:</case> 

<break>break;</break>

<default>default:</default> 

<expr_stmt><expr><name><name>allowed_ciphers</name><index>[<expr><name>allowed_ciphers_count</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>all_ciphers</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></for>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>SSLSetEnabledCiphers</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>ssl_ctx</name></name></expr></argument>, <argument><expr><name>allowed_ciphers</name></expr></argument>,

<argument><expr><name>allowed_ciphers_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name>all_ciphers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name>allowed_ciphers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>err</name> <operator>!=</operator> <name>noErr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"SSL: SSLSetEnabledCiphers() failed: OSStatus %d"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_SSL_CIPHER</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CURL_BUILD_MAC_10_9</name> <operator>||</operator> <name>CURL_BUILD_IOS_7</name></expr></cpp:if>

<if_stmt><if>if<condition>(<expr><name>SSLSetSessionOption</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>SSLSetSessionOption</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>ssl_ctx</name></name></expr></argument>, <argument><expr><name>kSSLSessionOptionSendOneByteRecord</name></expr></argument>,

<argument><expr><operator>!</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>ssl</name><operator>.</operator><name>enable_beast</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SSLSetSessionOption</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>ssl_ctx</name></name></expr></argument>, <argument><expr><name>kSSLSessionOptionFalseStart</name></expr></argument>,

<argument><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>ssl</name><operator>.</operator><name>falsestart</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<if_stmt><if>if<condition>(<expr><call><name>SSL_SET_OPTION</name><argument_list>(<argument><expr><name><name>primary</name><operator>.</operator><name>sessionid</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ssl_sessionid</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>ssl_sessionid_len</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>Curl_ssl_sessionid_lock</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>Curl_ssl_getsessionid</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>ssl_sessionid</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>ssl_sessionid_len</name></expr></argument>, <argument><expr><name>sockindex</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>SSLSetPeerID</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>ssl_ctx</name></name></expr></argument>, <argument><expr><name>ssl_sessionid</name></expr></argument>, <argument><expr><name>ssl_sessionid_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_ssl_sessionid_unlock</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>err</name> <operator>!=</operator> <name>noErr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"SSL: SSLSetPeerID() failed: OSStatus %d"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_SSL_CONNECT_ERROR</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"SSL re-using session ID\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ssl_sessionid</name> <operator>=</operator>

<call><name>aprintf</name><argument_list>(<argument><expr><literal type="string">"%s:%d:%d:%s:%hu"</literal></expr></argument>, <argument><expr><name>ssl_cafile</name></expr></argument>,

<argument><expr><name>verifypeer</name></expr></argument>, <argument><expr><call><name>SSL_CONN_CONFIG</name><argument_list>(<argument><expr><name>verifyhost</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>hostname</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ssl_sessionid_len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>ssl_sessionid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>SSLSetPeerID</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>ssl_ctx</name></name></expr></argument>, <argument><expr><name>ssl_sessionid</name></expr></argument>, <argument><expr><name>ssl_sessionid_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>err</name> <operator>!=</operator> <name>noErr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>Curl_ssl_sessionid_unlock</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"SSL: SSLSetPeerID() failed: OSStatus %d"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_SSL_CONNECT_ERROR</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_ssl_addsessionid</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>ssl_sessionid</name></expr></argument>, <argument><expr><name>ssl_sessionid_len</name></expr></argument>,

<argument><expr><name>sockindex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_ssl_sessionid_unlock</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"failed to store ssl session"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>SSLSetIOFuncs</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>ssl_ctx</name></name></expr></argument>, <argument><expr><name>SocketRead</name></expr></argument>, <argument><expr><name>SocketWrite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>err</name> <operator>!=</operator> <name>noErr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"SSL: SSLSetIOFuncs() failed: OSStatus %d"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_SSL_CONNECT_ERROR</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>backend</name><operator>-&gt;</operator><name>ssl_sockfd</name></name> <operator>=</operator> <name>sockfd</name></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>SSLSetConnection</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>ssl_ctx</name></name></expr></argument>, <argument><expr><name>connssl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>err</name> <operator>!=</operator> <name>noErr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"SSL: SSLSetConnection() failed: %d"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_SSL_CONNECT_ERROR</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>connssl</name><operator>-&gt;</operator><name>connecting_state</name></name> <operator>=</operator> <name>ssl_connect_2</name></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<function><type><specifier>static</specifier> <name>long</name></type> <name>pem_to_der</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>outlen</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>sep_start</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>sep_end</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>cert_start</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>cert_end</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>err</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>b64</name></decl>;</decl_stmt>

<expr_stmt><expr><name>sep_start</name> <operator>=</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><literal type="string">"-----"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>sep_start</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>cert_start</name> <operator>=</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>sep_start</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"-----"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>cert_start</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>cert_start</name> <operator>+=</operator> <literal type="number">5</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>cert_end</name> <operator>=</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>cert_start</name></expr></argument>, <argument><expr><literal type="string">"-----"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>cert_end</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>sep_end</name> <operator>=</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>cert_end</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"-----"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>sep_end</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>sep_end</name> <operator>+=</operator> <literal type="number">5</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name>cert_end</name> <operator>-</operator> <name>cert_start</name></expr>;</expr_stmt>

<expr_stmt><expr><name>b64</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>b64</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>cert_start</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\r'</literal> <operator>&amp;&amp;</operator> <name><name>cert_start</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>b64</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>cert_start</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>b64</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>Curl_base64_decode</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>b64</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>outlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>b64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>err</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>*</operator><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>sep_end</name> <operator>-</operator> <name>in</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>read_cert</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>outlen</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>cap</name> <init>= <expr><literal type="number">512</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">512</literal></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>

<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>fd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>cap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>data</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for<control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>read</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>len</name> <operator>+</operator> <name>n</name> <operator>&gt;=</operator> <name>cap</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>cap</name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>Curl_saferealloc</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>cap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>data</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>data</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>out</name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>outlen</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>append_cert_to_array</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>buflen</name></decl></parameter>,

<parameter><decl><type><name>CFMutableArrayRef</name></type> <name>array</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CFDataRef</name></type> <name>certdata</name> <init>= <expr><call><name>CFDataCreate</name><argument_list>(<argument><expr><name>kCFAllocatorDefault</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>certp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>certdata</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"SSL: failed to allocate array for CA certificate"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>SecCertificateRef</name></type> <name>cacert</name> <init>=

<expr><call><name>SecCertificateCreateWithData</name><argument_list>(<argument><expr><name>kCFAllocatorDefault</name></expr></argument>, <argument><expr><name>certdata</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>certdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>cacert</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"SSL: failed to create SecCertificate from CA certificate"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_SSL_CACERT_BADFILE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>CopyCertSubject</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>cacert</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>certp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch<condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>CURLE_OK</name></expr>:</case>

<break>break;</break>

<case>case <expr><name>CURLE_PEER_FAILED_VERIFICATION</name></expr>:</case>

<return>return <expr><name>CURLE_SSL_CACERT_BADFILE</name></expr>;</return>

<case>case <expr><name>CURLE_OUT_OF_MEMORY</name></expr>:</case>

<default>default:</default>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>certp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CFArrayAppendValue</name><argument_list>(<argument><expr><name>array</name></expr></argument>, <argument><expr><name>cacert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>cacert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>verify_cert</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cafile</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><name>SSLContextRef</name></type> <name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>rc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>res</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>certbuf</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>der</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>buflen</name></decl>, <decl><type ref="prev"/><name>derlen</name></decl>, <decl><type ref="prev"/><name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><call><name>read_cert</name><argument_list>(<argument><expr><name>cafile</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>certbuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buflen</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"SSL: failed to read or invalid CA certificate"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_SSL_CACERT_BADFILE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>CFMutableArrayRef</name></type> <name>array</name> <init>= <expr><call><name>CFArrayCreateMutable</name><argument_list>(<argument><expr><name>kCFAllocatorDefault</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><operator>&amp;</operator><name>kCFTypeArrayCallBacks</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>array</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>certbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"SSL: out of memory creating CA certificate array"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<while>while<condition>(<expr><name>offset</name> <operator>&lt;</operator> <name>buflen</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>pem_to_der</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>certbuf</name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>der</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>derlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>certbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>array</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"SSL: invalid CA certificate #%d (offset %d) in bundle"</literal></expr></argument>,

<argument><expr><name>n</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_SSL_CACERT_BADFILE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>offset</name> <operator>+=</operator> <name>res</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>res</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>offset</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>append_cert_to_array</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>certbuf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><name>array</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>certbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>!=</operator> <name>CURLE_OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>array</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>rc</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name>res</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>certbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>append_cert_to_array</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>der</name></expr></argument>, <argument><expr><name>derlen</name></expr></argument>, <argument><expr><name>array</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>der</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>!=</operator> <name>CURLE_OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>certbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>array</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>rc</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<decl_stmt><decl><type><name>SecTrustRef</name></type> <name>trust</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>OSStatus</name></type> <name>ret</name> <init>= <expr><call><name>SSLCopyPeerTrust</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>trust</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>trust</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"SSL: error getting certificate chain"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>array</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_PEER_FAILED_VERIFICATION</name></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name>ret</name> <operator>!=</operator> <name>noErr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>array</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"SSLCopyPeerTrust() returned error %d"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_PEER_FAILED_VERIFICATION</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>SecTrustSetAnchorCertificates</name><argument_list>(<argument><expr><name>trust</name></expr></argument>, <argument><expr><name>array</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>ret</name> <operator>!=</operator> <name>noErr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>array</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>trust</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"SecTrustSetAnchorCertificates() returned error %d"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_PEER_FAILED_VERIFICATION</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>SecTrustSetAnchorCertificatesOnly</name><argument_list>(<argument><expr><name>trust</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>ret</name> <operator>!=</operator> <name>noErr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>array</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>trust</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"SecTrustSetAnchorCertificatesOnly() returned error %d"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_PEER_FAILED_VERIFICATION</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>SecTrustResultType</name></type> <name>trust_eval</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>SecTrustEvaluate</name><argument_list>(<argument><expr><name>trust</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>trust_eval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>array</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>trust</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>ret</name> <operator>!=</operator> <name>noErr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"SecTrustEvaluate() returned error %d"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_PEER_FAILED_VERIFICATION</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<switch>switch<condition>(<expr><name>trust_eval</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>kSecTrustResultUnspecified</name></expr>:</case>

<case>case <expr><name>kSecTrustResultProceed</name></expr>:</case>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

<case>case <expr><name>kSecTrustResultRecoverableTrustFailure</name></expr>:</case>

<case>case <expr><name>kSecTrustResultDeny</name></expr>:</case>

<default>default:</default>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"SSL: certificate verification failed (result: %d)"</literal></expr></argument>,

<argument><expr><name>trust_eval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_PEER_FAILED_VERIFICATION</name></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SECTRANSP_PINNEDPUBKEY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>pkp_pin_peer_pubkey</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><name>SSLContextRef</name></type> <name>ctx</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pinnedpubkey</name></decl></parameter>)</parameter_list>

<block>{<block_content> 

<decl_stmt><decl><type><name>size_t</name></type> <name>pubkeylen</name></decl>, <decl><type ref="prev"/><name>realpubkeylen</name></decl>, <decl><type ref="prev"/><name>spkiHeaderLength</name> <init>= <expr><literal type="number">24</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pubkey</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>realpubkey</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>spkiHeader</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CFDataRef</name></type> <name>publicKeyBits</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_SSL_PINNEDPUBKEYNOTMATCH</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>pinnedpubkey</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_OK</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>ctx</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

<do>do <block>{<block_content>

<decl_stmt><decl><type><name>SecTrustRef</name></type> <name>trust</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>OSStatus</name></type> <name>ret</name> <init>= <expr><call><name>SSLCopyPeerTrust</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>trust</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>ret</name> <operator>!=</operator> <name>noErr</name> <operator>||</operator> <name>trust</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>SecKeyRef</name></type> <name>keyRef</name> <init>= <expr><call><name>SecTrustCopyPublicKey</name><argument_list>(<argument><expr><name>trust</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>trust</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>keyRef</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SECTRANSP_PINNEDPUBKEY_V1</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>publicKeyBits</name> <operator>=</operator> <call><name>SecKeyCopyExternalRepresentation</name><argument_list>(<argument><expr><name>keyRef</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>keyRef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>publicKeyBits</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>SECTRANSP_PINNEDPUBKEY_V2</name></expr></cpp:elif>

<decl_stmt><decl><type><name>OSStatus</name></type> <name>success</name> <init>= <expr><call><name>SecItemExport</name><argument_list>(<argument><expr><name>keyRef</name></expr></argument>, <argument><expr><name>kSecFormatOpenSSL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>publicKeyBits</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>keyRef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>success</name> <operator>!=</operator> <name>errSecSuccess</name> <operator>||</operator> <name>publicKeyBits</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<expr_stmt><expr><name>pubkeylen</name> <operator>=</operator> <call><name>CFDataGetLength</name><argument_list>(<argument><expr><name>publicKeyBits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pubkey</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><call><name>CFDataGetBytePtr</name><argument_list>(<argument><expr><name>publicKeyBits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch<condition>(<expr><name>pubkeylen</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">526</literal></expr>:</case>

<expr_stmt><expr><name>spkiHeader</name> <operator>=</operator> <name>rsa4096SpkiHeader</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">270</literal></expr>:</case>

<expr_stmt><expr><name>spkiHeader</name> <operator>=</operator> <name>rsa2048SpkiHeader</name></expr>;</expr_stmt>

<break>break;</break>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SECTRANSP_PINNEDPUBKEY_V1</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><literal type="number">65</literal></expr>:</case>

<expr_stmt><expr><name>spkiHeader</name> <operator>=</operator> <name>ecDsaSecp256r1SpkiHeader</name></expr>;</expr_stmt>

<expr_stmt><expr><name>spkiHeaderLength</name> <operator>=</operator> <literal type="number">26</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">97</literal></expr>:</case>

<expr_stmt><expr><name>spkiHeader</name> <operator>=</operator> <name>ecDsaSecp384r1SpkiHeader</name></expr>;</expr_stmt>

<expr_stmt><expr><name>spkiHeaderLength</name> <operator>=</operator> <literal type="number">23</literal></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"SSL: unhandled public key length: %d\n"</literal></expr></argument>, <argument><expr><name>pubkeylen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>SECTRANSP_PINNEDPUBKEY_V2</name></expr></cpp:elif>

<default>default:</default>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_pin_peer_pubkey</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>pinnedpubkey</name></expr></argument>, <argument><expr><name>pubkey</name></expr></argument>,

<argument><expr><name>pubkeylen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<continue>continue;</continue> 

</block_content>}</block></switch>

<expr_stmt><expr><name>realpubkeylen</name> <operator>=</operator> <name>pubkeylen</name> <operator>+</operator> <name>spkiHeaderLength</name></expr>;</expr_stmt>

<expr_stmt><expr><name>realpubkey</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>realpubkeylen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>realpubkey</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>realpubkey</name></expr></argument>, <argument><expr><name>spkiHeader</name></expr></argument>, <argument><expr><name>spkiHeaderLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>realpubkey</name> <operator>+</operator> <name>spkiHeaderLength</name></expr></argument>, <argument><expr><name>pubkey</name></expr></argument>, <argument><expr><name>pubkeylen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_pin_peer_pubkey</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>pinnedpubkey</name></expr></argument>, <argument><expr><name>realpubkey</name></expr></argument>,

<argument><expr><name>realpubkeylen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block> while<condition>(<expr><literal type="number">0</literal></expr>)</condition>;</do>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name>realpubkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>publicKeyBits</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>publicKeyBits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><specifier>static</specifier> <name>CURLcode</name></type>

<name>sectransp_connect_step2</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sockindex</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ssl_connect_data</name></name> <modifier>*</modifier></type><name>connssl</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>ssl</name><index>[<expr><name>sockindex</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ssl_backend_data</name></name> <modifier>*</modifier></type><name>backend</name> <init>= <expr><name><name>connssl</name><operator>-&gt;</operator><name>backend</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>OSStatus</name></type> <name>err</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SSLCipherSuite</name></type> <name>cipher</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SSLProtocol</name></type> <name>protocol</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>hostname</name> <init>= <expr><ternary><condition><expr><call><name>SSL_IS_PROXY</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><name><name>conn</name><operator>-&gt;</operator><name>http_proxy</name><operator>.</operator><name>host</name><operator>.</operator><name>name</name></name></expr> </then><else>:

<expr><name><name>conn</name><operator>-&gt;</operator><name>host</name><operator>.</operator><name>name</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DEBUGASSERT</name><argument_list>(<argument><expr><name>ssl_connect_2</name> <operator>==</operator> <name><name>connssl</name><operator>-&gt;</operator><name>connecting_state</name></name>

<operator>||</operator> <name>ssl_connect_2_reading</name> <operator>==</operator> <name><name>connssl</name><operator>-&gt;</operator><name>connecting_state</name></name>

<operator>||</operator> <name>ssl_connect_2_writing</name> <operator>==</operator> <name><name>connssl</name><operator>-&gt;</operator><name>connecting_state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>SSLHandshake</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>ssl_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>err</name> <operator>!=</operator> <name>noErr</name></expr>)</condition> <block>{<block_content>

<switch>switch<condition>(<expr><name>err</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>errSSLWouldBlock</name></expr>:</case> 

<expr_stmt><expr><name><name>connssl</name><operator>-&gt;</operator><name>connecting_state</name></name> <operator>=</operator> <ternary><condition><expr><name><name>backend</name><operator>-&gt;</operator><name>ssl_direction</name></name></expr> ?</condition><then>

<expr><name>ssl_connect_2_writing</name></expr> </then><else>: <expr><name>ssl_connect_2_reading</name></expr></else></ternary></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

<case>case <expr><operator>-</operator><literal type="number">9841</literal></expr>:</case>

<if_stmt><if>if<condition>(<expr><call><name>SSL_CONN_CONFIG</name><argument_list>(<argument><expr><name>CAfile</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>SSL_CONN_CONFIG</name><argument_list>(<argument><expr><name>verifypeer</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><call><name>verify_cert</name><argument_list>(<argument><expr><call><name>SSL_CONN_CONFIG</name><argument_list>(<argument><expr><name>CAfile</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>data</name></expr></argument>,

<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>ssl_ctx</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>sectransp_connect_step2</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>sockindex</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>errSSLPeerDecodeError</name></expr>:</case>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Decode failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>errSSLDecryptionFail</name></expr>:</case>

<case>case <expr><name>errSSLPeerDecryptionFail</name></expr>:</case>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Decryption failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>errSSLPeerDecryptError</name></expr>:</case>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"A decryption error occurred"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>errSSLBadCipherSuite</name></expr>:</case>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"A bad SSL cipher suite was encountered"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>errSSLCrypto</name></expr>:</case>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"An underlying cryptographic error was encountered"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CURL_BUILD_MAC_10_11</name> <operator>||</operator> <name>CURL_BUILD_IOS_9</name></expr></cpp:if>

<case>case <expr><name>errSSLWeakPeerEphemeralDHKey</name></expr>:</case>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Indicates a weak ephemeral Diffie-Hellman key"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<case>case <expr><name>errSSLBadRecordMac</name></expr>:</case>

<case>case <expr><name>errSSLPeerBadRecordMac</name></expr>:</case>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"A record with a bad message authentication code (MAC) "</literal>

<literal type="string">"was encountered"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>errSSLRecordOverflow</name></expr>:</case>

<case>case <expr><name>errSSLPeerRecordOverflow</name></expr>:</case>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"A record overflow occurred"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>errSSLPeerDecompressFail</name></expr>:</case>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Decompression failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>errSSLPeerAccessDenied</name></expr>:</case>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Access was denied"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>errSSLPeerInsufficientSecurity</name></expr>:</case>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"There is insufficient security for this operation"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>errSSLXCertChainInvalid</name></expr>:</case>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"SSL certificate problem: Invalid certificate chain"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_PEER_FAILED_VERIFICATION</name></expr>;</return>

<case>case <expr><name>errSSLUnknownRootCert</name></expr>:</case>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"SSL certificate problem: Untrusted root certificate"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_PEER_FAILED_VERIFICATION</name></expr>;</return>

<case>case <expr><name>errSSLNoRootCert</name></expr>:</case>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"SSL certificate problem: No root certificate"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_PEER_FAILED_VERIFICATION</name></expr>;</return>

<case>case <expr><name>errSSLCertNotYetValid</name></expr>:</case>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"SSL certificate problem: The certificate chain had a "</literal>

<literal type="string">"certificate that is not yet valid"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_PEER_FAILED_VERIFICATION</name></expr>;</return>

<case>case <expr><name>errSSLCertExpired</name></expr>:</case>

<case>case <expr><name>errSSLPeerCertExpired</name></expr>:</case>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"SSL certificate problem: Certificate chain had an "</literal>

<literal type="string">"expired certificate"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_PEER_FAILED_VERIFICATION</name></expr>;</return>

<case>case <expr><name>errSSLBadCert</name></expr>:</case>

<case>case <expr><name>errSSLPeerBadCert</name></expr>:</case>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"SSL certificate problem: Couldn't understand the server "</literal>

<literal type="string">"certificate format"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_PEER_FAILED_VERIFICATION</name></expr>;</return>

<case>case <expr><name>errSSLPeerUnsupportedCert</name></expr>:</case>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"SSL certificate problem: An unsupported certificate "</literal>

<literal type="string">"format was encountered"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_PEER_FAILED_VERIFICATION</name></expr>;</return>

<case>case <expr><name>errSSLPeerCertRevoked</name></expr>:</case>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"SSL certificate problem: The certificate was revoked"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_PEER_FAILED_VERIFICATION</name></expr>;</return>

<case>case <expr><name>errSSLPeerCertUnknown</name></expr>:</case>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"SSL certificate problem: The certificate is unknown"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_PEER_FAILED_VERIFICATION</name></expr>;</return>

<case>case <expr><name>errSecAuthFailed</name></expr>:</case>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"SSL authentication failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>errSSLPeerHandshakeFail</name></expr>:</case>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"SSL peer handshake failed, the server most likely "</literal>

<literal type="string">"requires a client certificate to connect"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>errSSLPeerUnknownCA</name></expr>:</case>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"SSL server rejected the client certificate due to "</literal>

<literal type="string">"the certificate being signed by an unknown certificate "</literal>

<literal type="string">"authority"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>errSSLHostNameMismatch</name></expr>:</case>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"SSL certificate peer verification failed, the "</literal>

<literal type="string">"certificate did not match \"%s\"\n"</literal></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>host</name><operator>.</operator><name>dispname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_PEER_FAILED_VERIFICATION</name></expr>;</return>

<case>case <expr><name>errSSLNegotiation</name></expr>:</case>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Could not negotiate an SSL cipher suite with the server"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>errSSLBadConfiguration</name></expr>:</case>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"A configuration error occurred"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>errSSLProtocol</name></expr>:</case>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"SSL protocol error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>errSSLPeerProtocolVersion</name></expr>:</case>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"A bad protocol version was encountered"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>errSSLPeerNoRenegotiation</name></expr>:</case>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"No renegotiation is allowed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>errSSLConnectionRefused</name></expr>:</case>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Server dropped the connection during the SSL handshake"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>errSSLClosedAbort</name></expr>:</case>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Server aborted the SSL handshake"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>errSSLClosedGraceful</name></expr>:</case>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"The connection closed gracefully"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>errSSLClosedNoNotify</name></expr>:</case>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"The server closed the session with no notification"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>paramErr</name></expr>:</case>

<case>case <expr><name>errSSLInternal</name></expr>:</case>

<case>case <expr><name>errSSLPeerInternalError</name></expr>:</case>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Internal SSL engine error encountered during the "</literal>

<literal type="string">"SSL handshake"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>errSSLFatalAlert</name></expr>:</case>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Fatal SSL engine error encountered during the SSL "</literal>

<literal type="string">"handshake"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>errSSLBufferOverflow</name></expr>:</case>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"An insufficient buffer was provided"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>errSSLIllegalParam</name></expr>:</case>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"An illegal parameter was encountered"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>errSSLModuleAttach</name></expr>:</case>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Module attach failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>errSSLSessionNotFound</name></expr>:</case>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"An attempt to restore an unknown session failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>errSSLPeerExportRestriction</name></expr>:</case>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"An export restriction occurred"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>errSSLPeerUserCancelled</name></expr>:</case>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"The user canceled the operation"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>errSSLPeerUnexpectedMsg</name></expr>:</case>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Peer rejected unexpected message"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CURL_BUILD_MAC_10_11</name> <operator>||</operator> <name>CURL_BUILD_IOS_9</name></expr></cpp:if>

<case>case <expr><name>errSSLClientHelloReceived</name></expr>:</case>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"A non-fatal result for providing a server name "</literal>

<literal type="string">"indication"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CURL_BUILD_MAC_10_6</name></expr></cpp:if>

<case>case <expr><name>errSSLClientCertRequested</name></expr>:</case>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"The server has requested a client certificate"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CURL_BUILD_MAC_10_9</name></expr></cpp:if>

<case>case <expr><name>errSSLUnexpectedRecord</name></expr>:</case>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Unexpected (skipped) record in DTLS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<default>default:</default>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Unknown SSL protocol error in connection to %s:%d"</literal></expr></argument>,

<argument><expr><name>hostname</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<return>return <expr><name>CURLE_SSL_CONNECT_ERROR</name></expr>;</return>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name><name>connssl</name><operator>-&gt;</operator><name>connecting_state</name></name> <operator>=</operator> <name>ssl_connect_3</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SECTRANSP_PINNEDPUBKEY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_SSL_PINNEDPUBLICKEY_ORIG</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><call><name>pkp_pin_peer_pubkey</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>backend</name><operator>-&gt;</operator><name>ssl_ctx</name></name></expr></argument>,

<argument><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_SSL_PINNEDPUBLICKEY_ORIG</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"SSL: public key does not match pinned public key!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>SSLGetNegotiatedCipher</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>ssl_ctx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cipher</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>SSLGetNegotiatedProtocolVersion</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>ssl_ctx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>protocol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch<condition>(<expr><name>protocol</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>kSSLProtocol2</name></expr>:</case>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"SSL 2.0 connection using %s\n"</literal></expr></argument>,

<argument><expr><call><name>SSLCipherNameForNumber</name><argument_list>(<argument><expr><name>cipher</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>kSSLProtocol3</name></expr>:</case>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"SSL 3.0 connection using %s\n"</literal></expr></argument>,

<argument><expr><call><name>SSLCipherNameForNumber</name><argument_list>(<argument><expr><name>cipher</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>kTLSProtocol1</name></expr>:</case>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"TLS 1.0 connection using %s\n"</literal></expr></argument>,

<argument><expr><call><name>TLSCipherNameForNumber</name><argument_list>(<argument><expr><name>cipher</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CURL_BUILD_MAC_10_8</name> <operator>||</operator> <name>CURL_BUILD_IOS</name></expr></cpp:if>

<case>case <expr><name>kTLSProtocol11</name></expr>:</case>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"TLS 1.1 connection using %s\n"</literal></expr></argument>,

<argument><expr><call><name>TLSCipherNameForNumber</name><argument_list>(<argument><expr><name>cipher</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>kTLSProtocol12</name></expr>:</case>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"TLS 1.2 connection using %s\n"</literal></expr></argument>,

<argument><expr><call><name>TLSCipherNameForNumber</name><argument_list>(<argument><expr><name>cipher</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CURL_BUILD_MAC_10_13</name> <operator>||</operator> <name>CURL_BUILD_IOS_11</name></expr></cpp:if>

<case>case <expr><name>kTLSProtocol13</name></expr>:</case>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"TLS 1.3 connection using %s\n"</literal></expr></argument>,

<argument><expr><call><name>TLSCipherNameForNumber</name><argument_list>(<argument><expr><name>cipher</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<default>default:</default>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Unknown protocol connection\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<cpp:if>#<cpp:directive>if</cpp:directive><expr><operator>(</operator><name>CURL_BUILD_MAC_10_13</name> <operator>||</operator> <name>CURL_BUILD_IOS_11</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>HAVE_BUILTIN_AVAILABLE</name> <operator>==</operator> <literal type="number">1</literal></expr></cpp:if>

<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>tls_enable_alpn</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>__builtin_available</name><argument_list>(<argument><expr><name>macOS</name> <literal type="number">10.13.4</literal></expr></argument>, <argument><expr><name>iOS</name> <literal type="number">11</literal></expr></argument>, <argument><expr><name>tvOS</name> <literal type="number">11</literal></expr></argument>, <argument><expr><operator>*</operator></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>CFArrayRef</name></type> <name>alpnArr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CFStringRef</name></type> <name>chosenProtocol</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>SSLCopyALPNProtocols</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>ssl_ctx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>alpnArr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>err</name> <operator>==</operator> <name>noErr</name> <operator>&amp;&amp;</operator> <name>alpnArr</name> <operator>&amp;&amp;</operator> <call><name>CFArrayGetCount</name><argument_list>(<argument><expr><name>alpnArr</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>chosenProtocol</name> <operator>=</operator> <call><name>CFArrayGetValueAtIndex</name><argument_list>(<argument><expr><name>alpnArr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_NGHTTP2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name>chosenProtocol</name> <operator>&amp;&amp;</operator>

<operator>!</operator><call><name>CFStringCompare</name><argument_list>(<argument><expr><name>chosenProtocol</name></expr></argument>, <argument><expr><call><name>CFSTR</name><argument_list>(<argument><expr><name>NGHTTP2_PROTO_VERSION_ID</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>negnpn</name></name> <operator>=</operator> <name>CURL_HTTP_VERSION_2</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

if<condition>(<expr><name>chosenProtocol</name> <operator>&amp;&amp;</operator>

<operator>!</operator><call><name>CFStringCompare</name><argument_list>(<argument><expr><name>chosenProtocol</name></expr></argument>, <argument><expr><call><name>CFSTR</name><argument_list>(<argument><expr><name>ALPN_HTTP_1_1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>negnpn</name></name> <operator>=</operator> <name>CURL_HTTP_VERSION_1_1</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"ALPN, server did not agree to a protocol\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>Curl_multiuse_state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>conn</name><operator>-&gt;</operator><name>negnpn</name></name> <operator>==</operator> <name>CURL_HTTP_VERSION_2</name></expr> ?</condition><then>

<expr><name>BUNDLE_MULTIPLEX</name></expr> </then><else>: <expr><name>BUNDLE_NO_MULTIUSE</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>alpnArr</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>alpnArr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_VERBOSE_STRINGS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type>

<name>show_verbose_server_cert</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>sockindex</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ssl_connect_data</name></name> <modifier>*</modifier></type><name>connssl</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>ssl</name><index>[<expr><name>sockindex</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ssl_backend_data</name></name> <modifier>*</modifier></type><name>backend</name> <init>= <expr><name><name>connssl</name><operator>-&gt;</operator><name>backend</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CFArrayRef</name></type> <name>server_certs</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SecCertificateRef</name></type> <name>server_cert</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>OSStatus</name></type> <name>err</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CFIndex</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SecTrustRef</name></type> <name>trust</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>backend</name><operator>-&gt;</operator><name>ssl_ctx</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CURL_BUILD_MAC_10_7</name> <operator>||</operator> <name>CURL_BUILD_IOS</name></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CURL_BUILD_IOS</name></expr></cpp:if>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>unused</name><name>(</name><name>server_certs</name><name>)</name></cpp:pragma>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>SSLCopyPeerTrust</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>ssl_ctx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>trust</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>err</name> <operator>==</operator> <name>noErr</name> <operator>&amp;&amp;</operator> <name>trust</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>count</name> <operator>=</operator> <call><name>SecTrustGetCertificateCount</name><argument_list>(<argument><expr><name>trust</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0L</literal></expr> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>certp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>server_cert</name> <operator>=</operator> <call><name>SecTrustGetCertificateAtIndex</name><argument_list>(<argument><expr><name>trust</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>CopyCertSubject</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>server_cert</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>certp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>result</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Server certificate: %s\n"</literal></expr></argument>, <argument><expr><name>certp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>certp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>trust</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<if_stmt><if>if<condition>(<expr><name>SecTrustEvaluateAsync</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>unused</name><name>(</name><name>server_certs</name><name>)</name></cpp:pragma>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>SSLCopyPeerTrust</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>ssl_ctx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>trust</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>err</name> <operator>==</operator> <name>noErr</name> <operator>&amp;&amp;</operator> <name>trust</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>count</name> <operator>=</operator> <call><name>SecTrustGetCertificateCount</name><argument_list>(<argument><expr><name>trust</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0L</literal></expr> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>certp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name></decl>;</decl_stmt>

<expr_stmt><expr><name>server_cert</name> <operator>=</operator> <call><name>SecTrustGetCertificateAtIndex</name><argument_list>(<argument><expr><name>trust</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>CopyCertSubject</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>server_cert</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>certp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>result</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Server certificate: %s\n"</literal></expr></argument>, <argument><expr><name>certp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>certp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>trust</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CURL_SUPPORT_MAC_10_8</name></expr></cpp:if>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>SSLCopyPeerCertificates</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>ssl_ctx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>server_certs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>err</name> <operator>==</operator> <name>noErr</name> <operator>&amp;&amp;</operator> <name>server_certs</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>count</name> <operator>=</operator> <call><name>CFArrayGetCount</name><argument_list>(<argument><expr><name>server_certs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0L</literal></expr> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>certp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name></decl>;</decl_stmt>

<expr_stmt><expr><name>server_cert</name> <operator>=</operator> <operator>(</operator><name>SecCertificateRef</name><operator>)</operator><call><name>CFArrayGetValueAtIndex</name><argument_list>(<argument><expr><name>server_certs</name></expr></argument>,

<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>CopyCertSubject</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>server_cert</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>certp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>result</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Server certificate: %s\n"</literal></expr></argument>, <argument><expr><name>certp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>certp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>server_certs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</block_content>}</block></else></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>unused</name><name>(</name><name>trust</name><name>)</name></cpp:pragma>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>SSLCopyPeerCertificates</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>ssl_ctx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>server_certs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>err</name> <operator>==</operator> <name>noErr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>count</name> <operator>=</operator> <call><name>CFArrayGetCount</name><argument_list>(<argument><expr><name>server_certs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0L</literal></expr> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>certp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>server_cert</name> <operator>=</operator> <operator>(</operator><name>SecCertificateRef</name><operator>)</operator><call><name>CFArrayGetValueAtIndex</name><argument_list>(<argument><expr><name>server_certs</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>CopyCertSubject</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>server_cert</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>certp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>result</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Server certificate: %s\n"</literal></expr></argument>, <argument><expr><name>certp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>certp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>server_certs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><specifier>static</specifier> <name>CURLcode</name></type>

<name>sectransp_connect_step3</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>sockindex</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ssl_connect_data</name></name> <modifier>*</modifier></type><name>connssl</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>ssl</name><index>[<expr><name>sockindex</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_VERBOSE_STRINGS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>verbose</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>show_verbose_server_cert</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>sockindex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>connssl</name><operator>-&gt;</operator><name>connecting_state</name></name> <operator>=</operator> <name>ssl_connect_done</name></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>Curl_recv</name></type> <name>sectransp_recv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>Curl_send</name></type> <name>sectransp_send</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>CURLcode</name></type>

<name>sectransp_connect_common</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>sockindex</name></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>nonblocking</name></decl></parameter>,

<parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>done</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ssl_connect_data</name></name> <modifier>*</modifier></type><name>connssl</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>ssl</name><index>[<expr><name>sockindex</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>curl_socket_t</name></type> <name>sockfd</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>sock</name><index>[<expr><name>sockindex</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>timediff_t</name></type> <name>timeout_ms</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>what</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>ssl_connection_complete</name> <operator>==</operator> <name><name>connssl</name><operator>-&gt;</operator><name>state</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>done</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>ssl_connect_1</name> <operator>==</operator> <name><name>connssl</name><operator>-&gt;</operator><name>connecting_state</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>timeout_ms</name> <operator>=</operator> <call><name>Curl_timeleft</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>timeout_ms</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"SSL connection timeout"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OPERATION_TIMEDOUT</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>sectransp_connect_step1</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>sockindex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<while>while<condition>(<expr><name>ssl_connect_2</name> <operator>==</operator> <name><name>connssl</name><operator>-&gt;</operator><name>connecting_state</name></name> <operator>||</operator>

<name>ssl_connect_2_reading</name> <operator>==</operator> <name><name>connssl</name><operator>-&gt;</operator><name>connecting_state</name></name> <operator>||</operator>

<name>ssl_connect_2_writing</name> <operator>==</operator> <name><name>connssl</name><operator>-&gt;</operator><name>connecting_state</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>timeout_ms</name> <operator>=</operator> <call><name>Curl_timeleft</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>timeout_ms</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"SSL connection timeout"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OPERATION_TIMEDOUT</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>connssl</name><operator>-&gt;</operator><name>connecting_state</name></name> <operator>==</operator> <name>ssl_connect_2_reading</name> <operator>||</operator>

<name><name>connssl</name><operator>-&gt;</operator><name>connecting_state</name></name> <operator>==</operator> <name>ssl_connect_2_writing</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>curl_socket_t</name></type> <name>writefd</name> <init>= <expr><ternary><condition><expr><name>ssl_connect_2_writing</name> <operator>==</operator>

<name><name>connssl</name><operator>-&gt;</operator><name>connecting_state</name></name></expr>?</condition><then><expr><name>sockfd</name></expr></then><else>:<expr><name>CURL_SOCKET_BAD</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>curl_socket_t</name></type> <name>readfd</name> <init>= <expr><ternary><condition><expr><name>ssl_connect_2_reading</name> <operator>==</operator>

<name><name>connssl</name><operator>-&gt;</operator><name>connecting_state</name></name></expr>?</condition><then><expr><name>sockfd</name></expr></then><else>:<expr><name>CURL_SOCKET_BAD</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>what</name> <operator>=</operator> <call><name>Curl_socket_check</name><argument_list>(<argument><expr><name>readfd</name></expr></argument>, <argument><expr><name>CURL_SOCKET_BAD</name></expr></argument>, <argument><expr><name>writefd</name></expr></argument>,

<argument><expr><ternary><condition><expr><name>nonblocking</name></expr>?</condition><then><expr><literal type="number">0</literal></expr></then><else>:<expr><operator>(</operator><name>time_t</name><operator>)</operator><name>timeout_ms</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>what</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"select/poll on SSL socket, errno: %d"</literal></expr></argument>, <argument><expr><name>SOCKERRNO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_SSL_CONNECT_ERROR</name></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><literal type="number">0</literal> <operator>==</operator> <name>what</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>nonblocking</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>done</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"SSL connection timeout"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OPERATION_TIMEDOUT</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>sectransp_connect_step2</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>sockindex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name> <operator>||</operator> <operator>(</operator><name>nonblocking</name> <operator>&amp;&amp;</operator>

<operator>(</operator><name>ssl_connect_2</name> <operator>==</operator> <name><name>connssl</name><operator>-&gt;</operator><name>connecting_state</name></name> <operator>||</operator>

<name>ssl_connect_2_reading</name> <operator>==</operator> <name><name>connssl</name><operator>-&gt;</operator><name>connecting_state</name></name> <operator>||</operator>

<name>ssl_connect_2_writing</name> <operator>==</operator> <name><name>connssl</name><operator>-&gt;</operator><name>connecting_state</name></name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></while> 

<if_stmt><if>if<condition>(<expr><name>ssl_connect_3</name> <operator>==</operator> <name><name>connssl</name><operator>-&gt;</operator><name>connecting_state</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>sectransp_connect_step3</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>sockindex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>ssl_connect_done</name> <operator>==</operator> <name><name>connssl</name><operator>-&gt;</operator><name>connecting_state</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>connssl</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ssl_connection_complete</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>recv</name><index>[<expr><name>sockindex</name></expr>]</index></name> <operator>=</operator> <name>sectransp_recv</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>send</name><index>[<expr><name>sockindex</name></expr>]</index></name> <operator>=</operator> <name>sectransp_send</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>done</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>done</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>connssl</name><operator>-&gt;</operator><name>connecting_state</name></name> <operator>=</operator> <name>ssl_connect_1</name></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>Curl_sectransp_connect_nonblocking</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>sockindex</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>done</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>sectransp_connect_common</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>sockindex</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>done</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>Curl_sectransp_connect</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sockindex</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>done</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>sectransp_connect_common</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>sockindex</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>done</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>DEBUGASSERT</name><argument_list>(<argument><expr><name>done</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Curl_sectransp_close</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sockindex</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>ssl_connect_data</name></name> <modifier>*</modifier></type><name>connssl</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>ssl</name><index>[<expr><name>sockindex</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ssl_backend_data</name></name> <modifier>*</modifier></type><name>backend</name> <init>= <expr><name><name>connssl</name><operator>-&gt;</operator><name>backend</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>backend</name><operator>-&gt;</operator><name>ssl_ctx</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>SSLClose</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>ssl_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CURL_BUILD_MAC_10_8</name> <operator>||</operator> <name>CURL_BUILD_IOS</name></expr></cpp:if>

<if_stmt><if>if<condition>(<expr><name>SSLCreateContext</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>ssl_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CURL_SUPPORT_MAC_10_8</name></expr></cpp:if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>SSLDisposeContext</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>ssl_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>SSLDisposeContext</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>ssl_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<expr_stmt><expr><name><name>backend</name><operator>-&gt;</operator><name>ssl_ctx</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>backend</name><operator>-&gt;</operator><name>ssl_sockfd</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Curl_sectransp_shutdown</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sockindex</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>ssl_connect_data</name></name> <modifier>*</modifier></type><name>connssl</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>ssl</name><index>[<expr><name>sockindex</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ssl_backend_data</name></name> <modifier>*</modifier></type><name>backend</name> <init>= <expr><name><name>connssl</name><operator>-&gt;</operator><name>backend</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>nread</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>what</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">120</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>backend</name><operator>-&gt;</operator><name>ssl_ctx</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_FTP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>ftp_ccc</name></name> <operator>!=</operator> <name>CURLFTPSSL_CCC_ACTIVE</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>Curl_sectransp_close</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>sockindex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>what</name> <operator>=</operator> <call><name>SOCKET_READABLE</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>sock</name><index>[<expr><name>sockindex</name></expr>]</index></name></expr></argument>, <argument><expr><name>SSL_SHUTDOWN_TIMEOUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>what</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"select/poll on SSL socket, errno: %d"</literal></expr></argument>, <argument><expr><name>SOCKERRNO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>what</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"SSL shutdown timeout"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>nread</name> <operator>=</operator> <call><name>read</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>sock</name><index>[<expr><name>sockindex</name></expr>]</index></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>nread</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"read: %s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>nread</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>what</name> <operator>=</operator> <call><name>SOCKET_READABLE</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>sock</name><index>[<expr><name>sockindex</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>rc</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Curl_sectransp_session_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type> <name>Curl_sectransp_version</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>msnprintf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="string">"SecureTransport"</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Curl_sectransp_check_cxn</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>ssl_connect_data</name></name> <modifier>*</modifier></type><name>connssl</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>ssl</name><index>[<expr><name>FIRSTSOCKET</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ssl_backend_data</name></name> <modifier>*</modifier></type><name>backend</name> <init>= <expr><name><name>connssl</name><operator>-&gt;</operator><name>backend</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>OSStatus</name></type> <name>err</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SSLSessionState</name></type> <name>state</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>backend</name><operator>-&gt;</operator><name>ssl_ctx</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>SSLGetSessionState</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>ssl_ctx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>err</name> <operator>==</operator> <name>noErr</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>state</name> <operator>==</operator> <name>kSSLConnected</name> <operator>||</operator> <name>state</name> <operator>==</operator> <name>kSSLHandshake</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>Curl_sectransp_data_pending</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>connindex</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ssl_connect_data</name></name> <modifier>*</modifier></type><name>connssl</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>ssl</name><index>[<expr><name>connindex</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ssl_backend_data</name></name> <modifier>*</modifier></type><name>backend</name> <init>= <expr><name><name>connssl</name><operator>-&gt;</operator><name>backend</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>OSStatus</name></type> <name>err</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>buffer</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>backend</name><operator>-&gt;</operator><name>ssl_ctx</name></name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>SSLGetBufferedReadSize</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>ssl_ctx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>err</name> <operator>==</operator> <name>noErr</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>buffer</name> <operator>&gt;</operator> <literal type="number">0UL</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>Curl_sectransp_random</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier><name>data</name></type> <name>UNUSED_PARAM</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>entropy</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>length</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>u_int32_t</name></type> <name>random_number</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>data</name></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>length</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>i</name> <operator>%</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>u_int32_t</name></expr></argument>)</argument_list></sizeof> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>random_number</name> <operator>=</operator> <call><name>arc4random</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>entropy</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>random_number</name> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>random_number</name> <operator>&gt;&gt;=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>i</name> <operator>=</operator> <name>random_number</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>Curl_sectransp_md5sum</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>tmp</name></decl></parameter>, 

<parameter><decl><type><name>size_t</name></type> <name>tmplen</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>md5sum</name></decl></parameter>, 

<parameter><decl><type><name>size_t</name></type> <name>md5len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>md5len</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>CC_MD5</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><operator>(</operator><name>CC_LONG</name><operator>)</operator><name>tmplen</name></expr></argument>, <argument><expr><name>md5sum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>Curl_sectransp_sha256sum</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>tmp</name></decl></parameter>, 

<parameter><decl><type><name>size_t</name></type> <name>tmplen</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>sha256sum</name></decl></parameter>, 

<parameter><decl><type><name>size_t</name></type> <name>sha256len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>sha256len</name> <operator>&gt;=</operator> <name>CURL_SHA256_DIGEST_LENGTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>CC_SHA256</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><operator>(</operator><name>CC_LONG</name><operator>)</operator><name>tmplen</name></expr></argument>, <argument><expr><name>sha256sum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>Curl_sectransp_false_start</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CURL_BUILD_MAC_10_9</name> <operator>||</operator> <name>CURL_BUILD_IOS_7</name></expr></cpp:if>

<if_stmt><if>if<condition>(<expr><name>SSLSetSessionOption</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ssize_t</name></type> <name>sectransp_send</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>sockindex</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>mem</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>,

<parameter><decl><type><name>CURLcode</name> <modifier>*</modifier></type><name>curlcode</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>ssl_connect_data</name></name> <modifier>*</modifier></type><name>connssl</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>ssl</name><index>[<expr><name>sockindex</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ssl_backend_data</name></name> <modifier>*</modifier></type><name>backend</name> <init>= <expr><name><name>connssl</name><operator>-&gt;</operator><name>backend</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>processed</name> <init>= <expr><literal type="number">0UL</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>OSStatus</name></type> <name>err</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>backend</name><operator>-&gt;</operator><name>ssl_write_buffered_length</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>SSLWrite</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>ssl_ctx</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0UL</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>processed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch<condition>(<expr><name>err</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>noErr</name></expr>:</case>

<expr_stmt><expr><name>processed</name> <operator>=</operator> <name><name>backend</name><operator>-&gt;</operator><name>ssl_write_buffered_length</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>backend</name><operator>-&gt;</operator><name>ssl_write_buffered_length</name></name> <operator>=</operator> <literal type="number">0UL</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>errSSLWouldBlock</name></expr>:</case> 

<expr_stmt><expr><operator>*</operator><name>curlcode</name> <operator>=</operator> <name>CURLE_AGAIN</name></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1L</literal></expr>;</return>

<default>default:</default>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"SSLWrite() returned error %d"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>curlcode</name> <operator>=</operator> <name>CURLE_SEND_ERROR</name></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1L</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>SSLWrite</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>ssl_ctx</name></name></expr></argument>, <argument><expr><name>mem</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>processed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>err</name> <operator>!=</operator> <name>noErr</name></expr>)</condition> <block>{<block_content>

<switch>switch<condition>(<expr><name>err</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>errSSLWouldBlock</name></expr>:</case>

<expr_stmt><expr><name><name>backend</name><operator>-&gt;</operator><name>ssl_write_buffered_length</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>curlcode</name> <operator>=</operator> <name>CURLE_AGAIN</name></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1L</literal></expr>;</return>

<default>default:</default>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"SSLWrite() returned error %d"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>curlcode</name> <operator>=</operator> <name>CURLE_SEND_ERROR</name></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1L</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><operator>(</operator><name>ssize_t</name><operator>)</operator><name>processed</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ssize_t</name></type> <name>sectransp_recv</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>num</name></decl></parameter>,

<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>buffersize</name></decl></parameter>,

<parameter><decl><type><name>CURLcode</name> <modifier>*</modifier></type><name>curlcode</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>ssl_connect_data</name></name> <modifier>*</modifier></type><name>connssl</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>ssl</name><index>[<expr><name>num</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ssl_backend_data</name></name> <modifier>*</modifier></type><name>backend</name> <init>= <expr><name><name>connssl</name><operator>-&gt;</operator><name>backend</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>processed</name> <init>= <expr><literal type="number">0UL</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>OSStatus</name></type> <name>err</name></decl>;</decl_stmt>

<label><name>again</name>:</label>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>SSLRead</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>ssl_ctx</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buffersize</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>processed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>err</name> <operator>!=</operator> <name>noErr</name></expr>)</condition> <block>{<block_content>

<switch>switch<condition>(<expr><name>err</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>errSSLWouldBlock</name></expr>:</case> 

<if_stmt><if>if<condition>(<expr><name>processed</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><name>ssize_t</name><operator>)</operator><name>processed</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>curlcode</name> <operator>=</operator> <name>CURLE_AGAIN</name></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1L</literal></expr>;</return>

<break>break;</break>

<case>case <expr><name>errSSLClosedGraceful</name></expr>:</case>

<case>case <expr><name>errSSLClosedNoNotify</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>curlcode</name> <operator>=</operator> <name>CURLE_OK</name></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1L</literal></expr>;</return>

<break>break;</break>

<case>case <expr><operator>-</operator><literal type="number">9841</literal></expr>:</case>

<if_stmt><if>if<condition>(<expr><call><name>SSL_CONN_CONFIG</name><argument_list>(<argument><expr><name>CAfile</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>SSL_CONN_CONFIG</name><argument_list>(<argument><expr><name>verifypeer</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><call><name>verify_cert</name><argument_list>(<argument><expr><call><name>SSL_CONN_CONFIG</name><argument_list>(<argument><expr><name>CAfile</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>,

<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>ssl_ctx</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<goto>goto <name>again</name>;</goto>

<default>default:</default>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"SSLRead() return error %d"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>curlcode</name> <operator>=</operator> <name>CURLE_RECV_ERROR</name></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1L</literal></expr>;</return>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name>ssize_t</name><operator>)</operator><name>processed</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>Curl_sectransp_get_internals</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ssl_connect_data</name></name> <modifier>*</modifier></type><name>connssl</name></decl></parameter>,

<parameter><decl><type><name>CURLINFO</name> <name>info</name></type> <name>UNUSED_PARAM</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>ssl_backend_data</name></name> <modifier>*</modifier></type><name>backend</name> <init>= <expr><name><name>connssl</name><operator>-&gt;</operator><name>backend</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>info</name></expr>;</expr_stmt>

<return>return <expr><name><name>backend</name><operator>-&gt;</operator><name>ssl_ctx</name></name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>Curl_ssl</name></name></type> <name>Curl_ssl_sectransp</name> <init>= <expr><block>{

<expr><block>{ <expr><name>CURLSSLBACKEND_SECURETRANSPORT</name></expr>, <expr><literal type="string">"secure-transport"</literal></expr> }</block></expr>, 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SECTRANSP_PINNEDPUBKEY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><name>SSLSUPP_PINNEDPUBKEY</name></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><literal type="number">0</literal></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>ssl_backend_data</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><name>Curl_none_init</name></expr>, 

<expr><name>Curl_none_cleanup</name></expr>, 

<expr><name>Curl_sectransp_version</name></expr>, 

<expr><name>Curl_sectransp_check_cxn</name></expr>, 

<expr><name>Curl_sectransp_shutdown</name></expr>, 

<expr><name>Curl_sectransp_data_pending</name></expr>, 

<expr><name>Curl_sectransp_random</name></expr>, 

<expr><name>Curl_none_cert_status_request</name></expr>, 

<expr><name>Curl_sectransp_connect</name></expr>, 

<expr><name>Curl_sectransp_connect_nonblocking</name></expr>, 

<expr><name>Curl_sectransp_get_internals</name></expr>, 

<expr><name>Curl_sectransp_close</name></expr>, 

<expr><name>Curl_none_close_all</name></expr>, 

<expr><name>Curl_sectransp_session_free</name></expr>, 

<expr><name>Curl_none_set_engine</name></expr>, 

<expr><name>Curl_none_set_engine_default</name></expr>, 

<expr><name>Curl_none_engines_list</name></expr>, 

<expr><name>Curl_sectransp_false_start</name></expr>, 

<expr><name>Curl_sectransp_md5sum</name></expr>, 

<expr><name>Curl_sectransp_sha256sum</name></expr> 

}</block></expr></init></decl>;</decl_stmt></block_content></block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__clang__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>clang</name> <name>diagnostic</name> <name>pop</name></cpp:pragma>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</unit>
