<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\curl-analysis\_cppstats\curl\lib\vtls\openssl.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_setup.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_OPENSSL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"urldata.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sendf.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"formdata.h"</cpp:file></cpp:include> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"url.h"</cpp:file></cpp:include> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"inet_pton.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"openssl.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"connect.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"slist.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"select.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vtls.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"strcase.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hostcheck.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"multiif.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"strerror.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_printf.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;openssl/ssl.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;openssl/rand.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;openssl/x509v3.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>OPENSSL_NO_DSA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;openssl/dsa.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;openssl/dh.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;openssl/err.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;openssl/md5.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;openssl/conf.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;openssl/bn.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;openssl/rsa.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;openssl/bio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;openssl/buffer.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;openssl/pkcs12.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_AMISSL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"amigaos.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>OPENSSL_VERSION_NUMBER</name> <operator>&gt;=</operator> <literal type="number">0x0090808fL</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>OPENSSL_NO_OCSP</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;openssl/ocsp.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>OPENSSL_VERSION_NUMBER</name> <operator>&gt;=</operator> <literal type="number">0x0090700fL</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>OPENSSL_NO_ENGINE</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>OPENSSL_NO_UI_CONSOLE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USE_OPENSSL_ENGINE</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;openssl/engine.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"warnless.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"non-ascii.h"</cpp:file></cpp:include> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_memory.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memdebug.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>OPENSSL_VERSION_NUMBER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"OPENSSL_VERSION_NUMBER not defined"</cpp:literal></cpp:error>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_OPENSSL_ENGINE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;openssl/ui.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPENSSL_VERSION_NUMBER</name> <operator>&gt;=</operator> <literal type="number">0x00909000L</literal></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSL_METHOD_QUAL</name></cpp:macro> <cpp:value>const</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSL_METHOD_QUAL</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>OPENSSL_VERSION_NUMBER</name> <operator>&gt;=</operator> <literal type="number">0x10000000L</literal><operator>)</operator></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_ERR_REMOVE_THREAD_STATE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SSLV2_CLIENT_METHOD</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>OPENSSL_VERSION_NUMBER</name> <operator>&gt;=</operator> <literal type="number">0x10100000L</literal></expr></cpp:if> 

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>OPENSSL_NO_SSL2</name></cpp:undef> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPENSSL_NO_SSL2</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>OPENSSL_VERSION_NUMBER</name> <operator>&gt;=</operator> <literal type="number">0x10100000L</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>LIBRESSL_VERSION_NUMBER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>LIBRESSL_VERSION_NUMBER</name> <operator>&lt;</operator> <literal type="number">0x20700000L</literal><operator>)</operator></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSLEAY_VERSION_NUMBER</name></cpp:macro> <cpp:value>OPENSSL_VERSION_NUMBER</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_X509_GET0_EXTENSIONS</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_OPAQUE_EVP_PKEY</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_OPAQUE_RSA_DSA_DH</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONST_EXTS</name></cpp:macro> <cpp:value>const</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_ERR_REMOVE_THREAD_STATE_DEPRECATED</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LIBRESSL_VERSION_NUMBER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARG2_X509_signature_print</name></cpp:macro> <cpp:value>(X509_ALGOR *)</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARG2_X509_signature_print</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASN1_STRING_get0_data</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ASN1_STRING_data(x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>X509_get0_notBefore</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>X509_get_notBefore(x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>X509_get0_notAfter</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>X509_get_notAfter(x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONST_EXTS</name></cpp:macro></cpp:define> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LIBRESSL_VERSION_NUMBER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OpenSSL_version_num</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>SSLeay()</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>OPENSSL_VERSION_NUMBER</name> <operator>&gt;=</operator> <literal type="number">0x1000200fL</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>LIBRESSL_VERSION_NUMBER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>LIBRESSL_VERSION_NUMBER</name> <operator>&lt;</operator> <literal type="number">0x20700000L</literal><operator>)</operator></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_X509_GET0_SIGNATURE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>OPENSSL_VERSION_NUMBER</name> <operator>&gt;=</operator> <literal type="number">0x1000200fL</literal><operator>)</operator></expr></cpp:if> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_SSL_GET_SHUTDOWN</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPENSSL_VERSION_NUMBER</name> <operator>&gt;=</operator> <literal type="number">0x10002003L</literal> <operator>&amp;&amp;</operator> <name>OPENSSL_VERSION_NUMBER</name> <operator>&lt;=</operator> <literal type="number">0x10002FFFL</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>OPENSSL_NO_COMP</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_SSL_COMP_FREE_COMPRESSION_METHODS</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>OPENSSL_VERSION_NUMBER</name> <operator>&lt;</operator> <literal type="number">0x0090808fL</literal><operator>)</operator></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPENSSL_load_builtin_modules</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>OPENSSL_VERSION_NUMBER</name> <operator>&gt;=</operator> <literal type="number">0x10101000L</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LIBRESSL_VERSION_NUMBER</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>OPENSSL_IS_BORINGSSL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_KEYLOG_CALLBACK</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><operator>(</operator><name>OPENSSL_VERSION_NUMBER</name> <operator>&gt;=</operator> <literal type="number">0x10101000L</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LIBRESSL_VERSION_NUMBER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>OPENSSL_IS_BORINGSSL</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_SSL_CTX_SET_CIPHERSUITES</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_SSL_CTX_SET_POST_HANDSHAKE_AUTH</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LIBRESSL_VERSION_NUMBER</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OSSL_PACKAGE</name></cpp:macro> <cpp:value>"LibreSSL"</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OPENSSL_IS_BORINGSSL</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OSSL_PACKAGE</name></cpp:macro> <cpp:value>"BoringSSL"</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OSSL_PACKAGE</name></cpp:macro> <cpp:value>"OpenSSL"</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>OPENSSL_VERSION_NUMBER</name> <operator>&gt;=</operator> <literal type="number">0x10100000L</literal><operator>)</operator></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_CIPHER_SELECTION</name></cpp:macro> <cpp:value>NULL</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_CIPHER_SELECTION</name></cpp:macro> <cpp:value>"ALL:!EXPORT:!EXPORT40:!EXPORT56:!aNULL:!LOW:!RC4:@STRENGTH"</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENABLE_SSLKEYLOGFILE</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_SSLKEYLOGFILE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><struct>struct <name>ssl_tap_state</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name>master_key_length</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>master_key</name><index>[<expr><name>SSL_MAX_MASTER_KEY_LENGTH</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>client_random</name><index>[<expr><name>SSL3_RANDOM_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

}</block></struct></type> <name>ssl_tap_state_t</name>;</typedef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<struct>struct <name>ssl_backend_data</name> <block>{

<decl_stmt><decl><type><name>SSL_CTX</name><modifier>*</modifier></type> <name>ctx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SSL</name><modifier>*</modifier></type> <name>handle</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>X509</name><modifier>*</modifier></type> <name>server_cert</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_SSLKEYLOGFILE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>ssl_tap_state_t</name></type> <name>tap_state</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RAND_LOAD_LENGTH</name></cpp:macro> <cpp:value>1024</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_SSLKEYLOGFILE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>FILE</name> <modifier>*</modifier></type><name>keylog_file_fp</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_KEYLOG_CALLBACK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type> <name>ossl_keylog_callback</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SSL</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>line</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>ssl</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>keylog_file_fp</name> <operator>&amp;&amp;</operator> <name>line</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>line</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>stackbuf</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>linelen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>linelen</name> <operator>&lt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>stackbuf</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <name>stackbuf</name></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>linelen</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>buf</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>linelen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><name>linelen</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><name>linelen</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>keylog_file_fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>buf</name> <operator>!=</operator> <name>stackbuf</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KEYLOG_PREFIX</name></cpp:macro> <cpp:value>"CLIENT_RANDOM "</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KEYLOG_PREFIX_LEN</name></cpp:macro> <cpp:value>(sizeof(KEYLOG_PREFIX) - 1)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>tap_ssl_key</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SSL</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter>, <parameter><decl><type><name>ssl_tap_state_t</name> <modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>hex</name> <init>= <expr><literal type="string">"0123456789ABCDEF"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pos</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>line</name><index>[<expr><name>KEYLOG_PREFIX_LEN</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>SSL3_RANDOM_SIZE</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator>

<literal type="number">2</literal> <operator>*</operator> <name>SSL_MAX_MASTER_KEY_LENGTH</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>SSL_SESSION</name> <modifier>*</modifier></type><name>session</name> <init>= <expr><call><name>SSL_get_session</name><argument_list>(<argument><expr><name>ssl</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>client_random</name><index>[<expr><name>SSL3_RANDOM_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>master_key</name><index>[<expr><name>SSL_MAX_MASTER_KEY_LENGTH</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>master_key_length</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>session</name> <operator>||</operator> <operator>!</operator><name>keylog_file_fp</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPENSSL_VERSION_NUMBER</name> <operator>&gt;=</operator> <literal type="number">0x10100000L</literal> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>LIBRESSL_VERSION_NUMBER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>LIBRESSL_VERSION_NUMBER</name> <operator>&lt;</operator> <literal type="number">0x20700000L</literal><operator>)</operator></expr></cpp:if>

<expr_stmt><expr><call><name>SSL_get_client_random</name><argument_list>(<argument><expr><name>ssl</name></expr></argument>, <argument><expr><name>client_random</name></expr></argument>, <argument><expr><name>SSL3_RANDOM_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>master_key_length</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator>

<call><name>SSL_SESSION_get_master_key</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>master_key</name></expr></argument>, <argument><expr><name>SSL_MAX_MASTER_KEY_LENGTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<if_stmt><if>if<condition>(<expr><name><name>ssl</name><operator>-&gt;</operator><name>s3</name></name> <operator>&amp;&amp;</operator> <name><name>session</name><operator>-&gt;</operator><name>master_key_length</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>master_key_length</name> <operator>=</operator> <name><name>session</name><operator>-&gt;</operator><name>master_key_length</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>master_key</name></expr></argument>, <argument><expr><name><name>session</name><operator>-&gt;</operator><name>master_key</name></name></expr></argument>, <argument><expr><name><name>session</name><operator>-&gt;</operator><name>master_key_length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>client_random</name></expr></argument>, <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>s3</name><operator>-&gt;</operator><name>client_random</name></name></expr></argument>, <argument><expr><name>SSL3_RANDOM_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if<condition>(<expr><name>master_key_length</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>master_key_length</name></name> <operator>==</operator> <name>master_key_length</name> <operator>&amp;&amp;</operator>

<operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>master_key</name></name></expr></argument>, <argument><expr><name>master_key</name></expr></argument>, <argument><expr><name>master_key_length</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>client_random</name></name></expr></argument>, <argument><expr><name>client_random</name></expr></argument>, <argument><expr><name>SSL3_RANDOM_SIZE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>master_key_length</name></name> <operator>=</operator> <name>master_key_length</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>master_key</name></name></expr></argument>, <argument><expr><name>master_key</name></expr></argument>, <argument><expr><name>master_key_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>client_random</name></name></expr></argument>, <argument><expr><name>client_random</name></expr></argument>, <argument><expr><name>SSL3_RANDOM_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>KEYLOG_PREFIX</name></expr></argument>, <argument><expr><name>KEYLOG_PREFIX_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pos</name> <operator>=</operator> <name>KEYLOG_PREFIX_LEN</name></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>SSL3_RANDOM_SIZE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>line</name><index>[<expr><name>pos</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>hex</name><index>[<expr><name><name>client_random</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>line</name><index>[<expr><name>pos</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>hex</name><index>[<expr><name><name>client_random</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xF</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>line</name><index>[<expr><name>pos</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>master_key_length</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>line</name><index>[<expr><name>pos</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>hex</name><index>[<expr><name><name>master_key</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>line</name><index>[<expr><name>pos</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>hex</name><index>[<expr><name><name>master_key</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xF</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>line</name><index>[<expr><name>pos</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>line</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>keylog_file_fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>SSL_ERROR_to_str</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>err</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch<condition>(<expr><name>err</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>SSL_ERROR_NONE</name></expr>:</case>

<return>return <expr><literal type="string">"SSL_ERROR_NONE"</literal></expr>;</return>

<case>case <expr><name>SSL_ERROR_SSL</name></expr>:</case>

<return>return <expr><literal type="string">"SSL_ERROR_SSL"</literal></expr>;</return>

<case>case <expr><name>SSL_ERROR_WANT_READ</name></expr>:</case>

<return>return <expr><literal type="string">"SSL_ERROR_WANT_READ"</literal></expr>;</return>

<case>case <expr><name>SSL_ERROR_WANT_WRITE</name></expr>:</case>

<return>return <expr><literal type="string">"SSL_ERROR_WANT_WRITE"</literal></expr>;</return>

<case>case <expr><name>SSL_ERROR_WANT_X509_LOOKUP</name></expr>:</case>

<return>return <expr><literal type="string">"SSL_ERROR_WANT_X509_LOOKUP"</literal></expr>;</return>

<case>case <expr><name>SSL_ERROR_SYSCALL</name></expr>:</case>

<return>return <expr><literal type="string">"SSL_ERROR_SYSCALL"</literal></expr>;</return>

<case>case <expr><name>SSL_ERROR_ZERO_RETURN</name></expr>:</case>

<return>return <expr><literal type="string">"SSL_ERROR_ZERO_RETURN"</literal></expr>;</return>

<case>case <expr><name>SSL_ERROR_WANT_CONNECT</name></expr>:</case>

<return>return <expr><literal type="string">"SSL_ERROR_WANT_CONNECT"</literal></expr>;</return>

<case>case <expr><name>SSL_ERROR_WANT_ACCEPT</name></expr>:</case>

<return>return <expr><literal type="string">"SSL_ERROR_WANT_ACCEPT"</literal></expr>;</return>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SSL_ERROR_WANT_ASYNC</name></expr></argument>)</argument_list></call></expr></cpp:if>

<case>case <expr><name>SSL_ERROR_WANT_ASYNC</name></expr>:</case>

<return>return <expr><literal type="string">"SSL_ERROR_WANT_ASYNC"</literal></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SSL_ERROR_WANT_ASYNC_JOB</name></expr></argument>)</argument_list></call></expr></cpp:if>

<case>case <expr><name>SSL_ERROR_WANT_ASYNC_JOB</name></expr>:</case>

<return>return <expr><literal type="string">"SSL_ERROR_WANT_ASYNC_JOB"</literal></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SSL_ERROR_WANT_EARLY</name></expr></argument>)</argument_list></call></expr></cpp:if>

<case>case <expr><name>SSL_ERROR_WANT_EARLY</name></expr>:</case>

<return>return <expr><literal type="string">"SSL_ERROR_WANT_EARLY"</literal></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<default>default:</default>

<return>return <expr><literal type="string">"SSL_ERROR unknown"</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>ossl_strerror</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>error</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>size</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>buf</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OPENSSL_IS_BORINGSSL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>ERR_error_string_n</name><argument_list>(<argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>error</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>ERR_error_string_n</name><argument_list>(<argument><expr><name>error</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if<condition>(<expr><name>size</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>!</operator><operator>*</operator><name>buf</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name>error</name></expr> ?</condition><then> <expr><literal type="string">"Unknown error"</literal></expr> </then><else>: <expr><literal type="string">"No error"</literal></expr></else></ternary><operator>)</operator></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><name>size</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>buf</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ossl_get_ssl_conn_index</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>ssl_ex_data_conn_index</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>ssl_ex_data_conn_index</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ssl_ex_data_conn_index</name> <operator>=</operator> <call><name>SSL_get_ex_new_index</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>ssl_ex_data_conn_index</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ossl_get_ssl_sockindex_index</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>ssl_ex_data_sockindex_index</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>ssl_ex_data_sockindex_index</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ssl_ex_data_sockindex_index</name> <operator>=</operator> <call><name>SSL_get_ex_new_index</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>ssl_ex_data_sockindex_index</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>passwd_callback</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>encrypting</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>global_passwd</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>DEBUGASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>==</operator> <name>encrypting</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>encrypting</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>klen</name> <init>= <expr><call><name>curlx_uztosi</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>global_passwd</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>num</name> <operator>&gt;</operator> <name>klen</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>global_passwd</name></expr></argument>, <argument><expr><name>klen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>klen</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>rand_enough</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><ternary><condition><expr><operator>(</operator><literal type="number">0</literal> <operator>!=</operator> <call><name>RAND_status</name><argument_list>()</argument_list></call><operator>)</operator></expr> ?</condition><then> <expr><name>TRUE</name></expr> </then><else>: <expr><name>FALSE</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>Curl_ossl_seed</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>ssl_seeded</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>fname</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>ssl_seeded</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_OK</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>rand_enough</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ssl_seeded</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>RANDOM_FILE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_SSL_RANDOM_FILE</name></expr>]</index></name></expr>)</condition>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RANDOM_FILE</name></cpp:macro> <cpp:value>""</cpp:value></cpp:define> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<block>{<block_content>

<expr_stmt><expr><call><name>RAND_load_file</name><argument_list>(<argument><expr><operator>(</operator><ternary><condition><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_SSL_RANDOM_FILE</name></expr>]</index></name></expr>?</condition><then>

<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_SSL_RANDOM_FILE</name></expr>]</index></name></expr></then><else>:

<expr><name>RANDOM_FILE</name></expr></else></ternary><operator>)</operator></expr></argument>,

<argument><expr><name>RAND_LOAD_LENGTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>rand_enough</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_OK</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_RAND_EGD</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EGD_SOCKET</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_SSL_EGDSOCKET</name></expr>]</index></name></expr>)</condition>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGD_SOCKET</name></cpp:macro> <cpp:value>""</cpp:value></cpp:define> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>RAND_egd</name><argument_list>(<argument><expr><ternary><condition><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_SSL_EGDSOCKET</name></expr>]</index></name></expr>?</condition><then>

<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_SSL_EGDSOCKET</name></expr>]</index></name></expr></then><else>:<expr><name>EGD_SOCKET</name></expr></else></ternary></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>-</operator><literal type="number">1</literal> <operator>!=</operator> <name>ret</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>rand_enough</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_OK</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<do>do <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>randb</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>randb</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>i_max</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>i_max</name> <operator>=</operator> <name>len</name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>curltime</name></expr></argument>)</argument_list></sizeof></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_max</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>curltime</name></name></type> <name>tv</name> <init>= <expr><call><name>Curl_now</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>Curl_wait_ms</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tv</name><operator>.</operator><name>tv_sec</name></name> <operator>*=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tv</name><operator>.</operator><name>tv_usec</name></name> <operator>*=</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name>i</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tv</name><operator>.</operator><name>tv_sec</name></name> <operator>^=</operator> <operator>(</operator><operator>(</operator><call><name>Curl_now</name><argument_list>()</argument_list></call><operator>.</operator><name>tv_sec</name> <operator>+</operator> <call><name>Curl_now</name><argument_list>()</argument_list></call><operator>.</operator><name>tv_usec</name><operator>)</operator> <operator>*</operator>

<operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">3</literal><operator>)</operator><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tv</name><operator>.</operator><name>tv_usec</name></name> <operator>^=</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <operator>(</operator><operator>(</operator><call><name>Curl_now</name><argument_list>()</argument_list></call><operator>.</operator><name>tv_sec</name> <operator>+</operator>

<call><name>Curl_now</name><argument_list>()</argument_list></call><operator>.</operator><name>tv_usec</name><operator>)</operator> <operator>*</operator>

<operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>randb</name><index>[<expr><name>i</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>curltime</name></expr></argument>)</argument_list></sizeof></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>curltime</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>RAND_add</name><argument_list>(<argument><expr><name>randb</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>len</name></expr></argument>, <argument><expr><operator>(</operator><name>double</name><operator>)</operator><name>len</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block> while<condition>(<expr><operator>!</operator><call><name>rand_enough</name><argument_list>()</argument_list></call></expr>)</condition>;</do>

<expr_stmt><expr><name><name>fname</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>RAND_file_name</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>fname</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>fname</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>RAND_load_file</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><name>RAND_LOAD_LENGTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>rand_enough</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_OK</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"libcurl is now using a weak random seed!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><ternary><condition><expr><call><name>rand_enough</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><name>CURLE_OK</name></expr> </then><else>:

<expr><name>CURLE_SSL_CONNECT_ERROR</name></expr></else></ternary> <operator>)</operator></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SSL_FILETYPE_ENGINE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSL_FILETYPE_ENGINE</name></cpp:macro> <cpp:value>42</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SSL_FILETYPE_PKCS12</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSL_FILETYPE_PKCS12</name></cpp:macro> <cpp:value>43</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name></type> <name>do_file_type</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>type</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>type</name> <operator>||</operator> <operator>!</operator><name><name>type</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>SSL_FILETYPE_PEM</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>strcasecompare</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><literal type="string">"PEM"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>SSL_FILETYPE_PEM</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>strcasecompare</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><literal type="string">"DER"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>SSL_FILETYPE_ASN1</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>strcasecompare</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><literal type="string">"ENG"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>SSL_FILETYPE_ENGINE</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>strcasecompare</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><literal type="string">"P12"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>SSL_FILETYPE_PKCS12</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_OPENSSL_ENGINE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type> <name>ssl_ui_reader</name><parameter_list>(<parameter><decl><type><name>UI</name> <modifier>*</modifier></type><name>ui</name></decl></parameter>, <parameter><decl><type><name>UI_STRING</name> <modifier>*</modifier></type><name>uis</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>password</name></decl>;</decl_stmt>

<switch>switch<condition>(<expr><call><name>UI_get_string_type</name><argument_list>(<argument><expr><name>uis</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<case>case <expr><name>UIT_PROMPT</name></expr>:</case>

<case>case <expr><name>UIT_VERIFY</name></expr>:</case>

<expr_stmt><expr><name>password</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><call><name>UI_get0_user_data</name><argument_list>(<argument><expr><name>ui</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>password</name> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>UI_get_input_flags</name><argument_list>(<argument><expr><name>uis</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>UI_INPUT_FLAG_DEFAULT_PWD</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>UI_set_result</name><argument_list>(<argument><expr><name>ui</name></expr></argument>, <argument><expr><name>uis</name></expr></argument>, <argument><expr><name>password</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch>

<return>return <expr><operator>(</operator><call><name>UI_method_get_reader</name><argument_list>(<argument><expr><call><name>UI_OpenSSL</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator><operator>(</operator><name>ui</name><operator>,</operator> <name>uis</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ssl_ui_writer</name><parameter_list>(<parameter><decl><type><name>UI</name> <modifier>*</modifier></type><name>ui</name></decl></parameter>, <parameter><decl><type><name>UI_STRING</name> <modifier>*</modifier></type><name>uis</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch<condition>(<expr><call><name>UI_get_string_type</name><argument_list>(<argument><expr><name>uis</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<case>case <expr><name>UIT_PROMPT</name></expr>:</case>

<case>case <expr><name>UIT_VERIFY</name></expr>:</case>

<if_stmt><if>if<condition>(<expr><call><name>UI_get0_user_data</name><argument_list>(<argument><expr><name>ui</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<operator>(</operator><call><name>UI_get_input_flags</name><argument_list>(<argument><expr><name>uis</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>UI_INPUT_FLAG_DEFAULT_PWD</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch>

<return>return <expr><operator>(</operator><call><name>UI_method_get_writer</name><argument_list>(<argument><expr><call><name>UI_OpenSSL</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator><operator>(</operator><name>ui</name><operator>,</operator> <name>uis</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>is_pkcs11_uri</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>string</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><name>string</name> <operator>&amp;&amp;</operator> <call><name>strncasecompare</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><literal type="string">"pkcs11:"</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><specifier>static</specifier> <name>CURLcode</name></type> <name>Curl_ossl_set_engine</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>engine</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier>

<name>int</name></type> <name>cert_stuff</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,

<parameter><decl><type><name>SSL_CTX</name><modifier>*</modifier></type> <name>ctx</name></decl></parameter>,

<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>cert_file</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cert_type</name></decl></parameter>,

<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>key_file</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key_type</name></decl></parameter>,

<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>key_passwd</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>error_buffer</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>check_privkey</name> <init>= <expr><name>TRUE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>file_type</name> <init>= <expr><call><name>do_file_type</name><argument_list>(<argument><expr><name>cert_type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>cert_file</name> <operator>||</operator> <operator>(</operator><name>file_type</name> <operator>==</operator> <name>SSL_FILETYPE_ENGINE</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>SSL</name> <modifier>*</modifier></type><name>ssl</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>X509</name> <modifier>*</modifier></type><name>x509</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cert_done</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>key_passwd</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>SSL_CTX_set_default_passwd_cb_userdata</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>key_passwd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SSL_CTX_set_default_passwd_cb</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>passwd_callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<switch>switch<condition>(<expr><name>file_type</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>SSL_FILETYPE_PEM</name></expr>:</case>

<if_stmt><if>if<condition>(<expr><call><name>SSL_CTX_use_certificate_chain_file</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>,

<argument><expr><name>cert_file</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>,

<argument><expr><literal type="string">"could not load PEM client certificate, "</literal> <name>OSSL_PACKAGE</name>

<literal type="string">" error %s, "</literal>

<literal type="string">"(no key found, wrong pass phrase, or wrong file format?)"</literal></expr></argument>,

<argument><expr><call><name>ossl_strerror</name><argument_list>(<argument><expr><call><name>ERR_get_error</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>error_buffer</name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>error_buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>SSL_FILETYPE_ASN1</name></expr>:</case>

<if_stmt><if>if<condition>(<expr><call><name>SSL_CTX_use_certificate_file</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>,

<argument><expr><name>cert_file</name></expr></argument>,

<argument><expr><name>file_type</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>,

<argument><expr><literal type="string">"could not load ASN1 client certificate, "</literal> <name>OSSL_PACKAGE</name>

<literal type="string">" error %s, "</literal>

<literal type="string">"(no key found, wrong pass phrase, or wrong file format?)"</literal></expr></argument>,

<argument><expr><call><name>ossl_strerror</name><argument_list>(<argument><expr><call><name>ERR_get_error</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>error_buffer</name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>error_buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>SSL_FILETYPE_ENGINE</name></expr>:</case>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_OPENSSL_ENGINE</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>ENGINE_CTRL_GET_CMD_FROM_NAME</name></expr></argument>)</argument_list></call></expr></cpp:if>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>engine</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>is_pkcs11_uri</name><argument_list>(<argument><expr><name>cert_file</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>Curl_ossl_set_engine</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"pkcs11"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>CURLE_OK</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>engine</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd_name</name> <init>= <expr><literal type="string">"LOAD_CERT_CTRL"</literal></expr></init></decl>;</decl_stmt>

<struct>struct <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cert_id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>X509</name> <modifier>*</modifier></type><name>cert</name></decl>;</decl_stmt>

}</block> <decl><name>params</name></decl>;</struct>

<expr_stmt><expr><name><name>params</name><operator>.</operator><name>cert_id</name></name> <operator>=</operator> <name>cert_file</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>params</name><operator>.</operator><name>cert</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>ENGINE_ctrl</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>engine</name></name></expr></argument>, <argument><expr><name>ENGINE_CTRL_GET_CMD_FROM_NAME</name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>cmd_name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"ssl engine does not support loading certificates"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>ENGINE_ctrl_cmd</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>engine</name></name></expr></argument>, <argument><expr><name>cmd_name</name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>params</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"ssl engine cannot load client cert with id"</literal>

<literal type="string">" '%s' [%s]"</literal></expr></argument>, <argument><expr><name>cert_file</name></expr></argument>,

<argument><expr><call><name>ossl_strerror</name><argument_list>(<argument><expr><call><name>ERR_get_error</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>error_buffer</name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>error_buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>params</name><operator>.</operator><name>cert</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"ssl engine didn't initialized the certificate "</literal>

<literal type="string">"properly."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>SSL_CTX_use_certificate</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>params</name><operator>.</operator><name>cert</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"unable to set client certificate"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>X509_free</name><argument_list>(<argument><expr><name><name>params</name><operator>.</operator><name>cert</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>X509_free</name><argument_list>(<argument><expr><name><name>params</name><operator>.</operator><name>cert</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"crypto engine not set, can't load certificate"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block>

<break>break;</break>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"file type ENG for certificate not implemented"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<case>case <expr><name>SSL_FILETYPE_PKCS12</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>BIO</name> <modifier>*</modifier></type><name>fp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PKCS12</name> <modifier>*</modifier></type><name>p12</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EVP_PKEY</name> <modifier>*</modifier></type><name>pri</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>STACK_OF</name><argument_list>(<argument><expr><name>X509</name></expr></argument>)</argument_list></call> <operator>*</operator><name>ca</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>fp</name> <operator>=</operator> <call><name>BIO_new</name><argument_list>(<argument><expr><call><name>BIO_s_file</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>fp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>,

<argument><expr><literal type="string">"BIO_new return NULL, "</literal> <name>OSSL_PACKAGE</name>

<literal type="string">" error %s"</literal></expr></argument>,

<argument><expr><call><name>ossl_strerror</name><argument_list>(<argument><expr><call><name>ERR_get_error</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>error_buffer</name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>error_buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>BIO_read_filename</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>cert_file</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"could not open PKCS12 file '%s'"</literal></expr></argument>, <argument><expr><name>cert_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BIO_free</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p12</name> <operator>=</operator> <call><name>d2i_PKCS12_bio</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BIO_free</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>p12</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"error reading PKCS12 file '%s'"</literal></expr></argument>, <argument><expr><name>cert_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>PKCS12_PBE_add</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>PKCS12_parse</name><argument_list>(<argument><expr><name>p12</name></expr></argument>, <argument><expr><name>key_passwd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pri</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>x509</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>ca</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>,

<argument><expr><literal type="string">"could not parse PKCS12 file, check password, "</literal> <name>OSSL_PACKAGE</name>

<literal type="string">" error %s"</literal></expr></argument>,

<argument><expr><call><name>ossl_strerror</name><argument_list>(<argument><expr><call><name>ERR_get_error</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>error_buffer</name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>error_buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PKCS12_free</name><argument_list>(<argument><expr><name>p12</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>PKCS12_free</name><argument_list>(<argument><expr><name>p12</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>SSL_CTX_use_certificate</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>x509</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>,

<argument><expr><literal type="string">"could not load PKCS12 client certificate, "</literal> <name>OSSL_PACKAGE</name>

<literal type="string">" error %s"</literal></expr></argument>,

<argument><expr><call><name>ossl_strerror</name><argument_list>(<argument><expr><call><name>ERR_get_error</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>error_buffer</name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>error_buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>SSL_CTX_use_PrivateKey</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pri</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"unable to use private key from PKCS12 file '%s'"</literal></expr></argument>,

<argument><expr><name>cert_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>SSL_CTX_check_private_key</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"private key from PKCS12 file '%s' "</literal>

<literal type="string">"does not match certificate in same file"</literal></expr></argument>, <argument><expr><name>cert_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>ca</name></expr>)</condition> <block>{<block_content>

<while>while<condition>(<expr><call><name>sk_X509_num</name><argument_list>(<argument><expr><name>ca</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>X509</name> <modifier>*</modifier></type><name>x</name> <init>= <expr><call><name>sk_X509_pop</name><argument_list>(<argument><expr><name>ca</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>SSL_CTX_add_client_CA</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>X509_free</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"cannot add certificate to client CA list"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>SSL_CTX_add_extra_chain_cert</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>X509_free</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"cannot add certificate to certificate chain"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>cert_done</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<label><name>fail</name>:</label>

<expr_stmt><expr><call><name>EVP_PKEY_free</name><argument_list>(<argument><expr><name>pri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>X509_free</name><argument_list>(<argument><expr><name>x509</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_AMISSL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>sk_X509_pop_free</name><argument_list>(<argument><expr><name>ca</name></expr></argument>, <argument><expr><name>Curl_amiga_X509_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>sk_X509_pop_free</name><argument_list>(<argument><expr><name>ca</name></expr></argument>, <argument><expr><name>X509_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>cert_done</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> 

<break>break;</break>

</block_content>}</block>

<default>default:</default>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"not supported file type '%s' for certificate"</literal></expr></argument>, <argument><expr><name>cert_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></switch>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>key_file</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>key_file</name> <operator>=</operator> <name>cert_file</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>file_type</name> <operator>=</operator> <call><name>do_file_type</name><argument_list>(<argument><expr><name>key_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<switch>switch<condition>(<expr><name>file_type</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>SSL_FILETYPE_PEM</name></expr>:</case>

<if_stmt><if>if<condition>(<expr><name>cert_done</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<case>case <expr><name>SSL_FILETYPE_ASN1</name></expr>:</case>

<if_stmt><if>if<condition>(<expr><call><name>SSL_CTX_use_PrivateKey_file</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>key_file</name></expr></argument>, <argument><expr><name>file_type</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"unable to set private key file: '%s' type %s"</literal></expr></argument>,

<argument><expr><name>key_file</name></expr></argument>, <argument><expr><ternary><condition><expr><name>key_type</name></expr>?</condition><then><expr><name>key_type</name></expr></then><else>:<expr><literal type="string">"PEM"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>SSL_FILETYPE_ENGINE</name></expr>:</case>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_OPENSSL_ENGINE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<block>{<block_content> 

<decl_stmt><decl><type><name>EVP_PKEY</name> <modifier>*</modifier></type><name>priv_key</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>engine</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>is_pkcs11_uri</name><argument_list>(<argument><expr><name>key_file</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>Curl_ossl_set_engine</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"pkcs11"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>CURLE_OK</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>engine</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>UI_METHOD</name> <modifier>*</modifier></type><name>ui_method</name> <init>=

<expr><call><name>UI_create_method</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><literal type="string">"curl user interface"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>ui_method</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"unable do create "</literal> <name>OSSL_PACKAGE</name>

<literal type="string">" user-interface method"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>UI_method_set_opener</name><argument_list>(<argument><expr><name>ui_method</name></expr></argument>, <argument><expr><call><name>UI_method_get_opener</name><argument_list>(<argument><expr><call><name>UI_OpenSSL</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UI_method_set_closer</name><argument_list>(<argument><expr><name>ui_method</name></expr></argument>, <argument><expr><call><name>UI_method_get_closer</name><argument_list>(<argument><expr><call><name>UI_OpenSSL</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UI_method_set_reader</name><argument_list>(<argument><expr><name>ui_method</name></expr></argument>, <argument><expr><name>ssl_ui_reader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UI_method_set_writer</name><argument_list>(<argument><expr><name>ui_method</name></expr></argument>, <argument><expr><name>ssl_ui_writer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>priv_key</name> <operator>=</operator> <operator>(</operator><name>EVP_PKEY</name> <operator>*</operator><operator>)</operator>

<call><name>ENGINE_load_private_key</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>engine</name></name></expr></argument>, <argument><expr><name>key_file</name></expr></argument>,

<argument><expr><name>ui_method</name></expr></argument>,

<argument><expr><name>key_passwd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UI_destroy_method</name><argument_list>(<argument><expr><name>ui_method</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>priv_key</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"failed to load private key from crypto engine"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>SSL_CTX_use_PrivateKey</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>priv_key</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"unable to set private key"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EVP_PKEY_free</name><argument_list>(<argument><expr><name>priv_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>EVP_PKEY_free</name><argument_list>(<argument><expr><name>priv_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"crypto engine not set, can't load private key"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block>

<break>break;</break>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"file type ENG for private key not supported"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<case>case <expr><name>SSL_FILETYPE_PKCS12</name></expr>:</case>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>cert_done</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"file type P12 for private key not supported"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"not supported file type for private key"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></switch>

<expr_stmt><expr><name>ssl</name> <operator>=</operator> <call><name>SSL_new</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>ssl</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"unable to create an SSL structure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>x509</name> <operator>=</operator> <call><name>SSL_get_certificate</name><argument_list>(<argument><expr><name>ssl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>x509</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>EVP_PKEY</name> <modifier>*</modifier></type><name>pktmp</name> <init>= <expr><call><name>X509_get_pubkey</name><argument_list>(<argument><expr><name>x509</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>EVP_PKEY_copy_parameters</name><argument_list>(<argument><expr><name>pktmp</name></expr></argument>, <argument><expr><call><name>SSL_get_privatekey</name><argument_list>(<argument><expr><name>ssl</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EVP_PKEY_free</name><argument_list>(<argument><expr><name>pktmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>OPENSSL_NO_RSA</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>OPENSSL_IS_BORINGSSL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<block>{<block_content>

<decl_stmt><decl><type><name>EVP_PKEY</name> <modifier>*</modifier></type><name>priv_key</name> <init>= <expr><call><name>SSL_get_privatekey</name><argument_list>(<argument><expr><name>ssl</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pktype</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_OPAQUE_EVP_PKEY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>pktype</name> <operator>=</operator> <call><name>EVP_PKEY_id</name><argument_list>(<argument><expr><name>priv_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name>pktype</name> <operator>=</operator> <name><name>priv_key</name><operator>-&gt;</operator><name>type</name></name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if<condition>(<expr><name>pktype</name> <operator>==</operator> <name>EVP_PKEY_RSA</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>RSA</name> <modifier>*</modifier></type><name>rsa</name> <init>= <expr><call><name>EVP_PKEY_get1_RSA</name><argument_list>(<argument><expr><name>priv_key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><call><name>RSA_flags</name><argument_list>(<argument><expr><name>rsa</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>RSA_METHOD_FLAG_NO_CHECK</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>check_privkey</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>RSA_free</name><argument_list>(<argument><expr><name>rsa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>SSL_free</name><argument_list>(<argument><expr><name>ssl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>check_privkey</name> <operator>==</operator> <name>TRUE</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>SSL_CTX_check_private_key</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Private key does not match the certificate public key"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>x509_name_oneline</name><parameter_list>(<parameter><decl><type><name>X509_NAME</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

return X509_NAME_oneline(a, buf, size);

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>BIO</name> <modifier>*</modifier></type><name>bio_out</name> <init>= <expr><call><name>BIO_new</name><argument_list>(<argument><expr><call><name>BIO_s_mem</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BUF_MEM</name> <modifier>*</modifier></type><name>biomem</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>bio_out</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>X509_NAME_print_ex</name><argument_list>(<argument><expr><name>bio_out</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>XN_FLAG_SEP_SPLUS_SPC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BIO_get_mem_ptr</name><argument_list>(<argument><expr><name>bio_out</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>biomem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>biomem</name><operator>-&gt;</operator><name>length</name></name> <operator>&lt;</operator> <name>size</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>size</name> <operator>=</operator> <name><name>biomem</name><operator>-&gt;</operator><name>length</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>size</name><operator>--</operator></expr>;</expr_stmt></block_content></block></else></if_stmt> 

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>biomem</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><name>size</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BIO_free</name><argument_list>(<argument><expr><name>bio_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>!</operator><name>rc</name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Curl_ossl_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_SSLKEYLOGFILE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>keylog_file_name</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>OPENSSL_load_builtin_modules</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_OPENSSL_ENGINE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>ENGINE_load_builtin_engines</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CONF_MFLAGS_DEFAULT_SECTION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONF_MFLAGS_DEFAULT_SECTION</name></cpp:macro> <cpp:value>0x0</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_OPENSSL_AUTO_LOAD_CONFIG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>CONF_modules_load_file</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><name>CONF_MFLAGS_DEFAULT_SECTION</name><operator>|</operator>

<name>CONF_MFLAGS_IGNORE_MISSING_FILE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>OPENSSL_VERSION_NUMBER</name> <operator>&gt;=</operator> <literal type="number">0x10100000L</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LIBRESSL_VERSION_NUMBER</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>SSL_load_error_strings</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>SSLeay_add_ssl_algorithms</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>OpenSSL_add_all_algorithms</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_SSLKEYLOGFILE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>keylog_file_fp</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>keylog_file_name</name> <operator>=</operator> <call><name>curl_getenv</name><argument_list>(<argument><expr><literal type="string">"SSLKEYLOGFILE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>keylog_file_name</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>keylog_file_fp</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>keylog_file_name</name></expr></argument>, <argument><expr><name>FOPEN_APPENDTEXT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>keylog_file_fp</name></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><call><name>setvbuf</name><argument_list>(<argument><expr><name>keylog_file_fp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>_IONBF</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<if_stmt><if>if<condition>(<expr><call><name>setvbuf</name><argument_list>(<argument><expr><name>keylog_file_fp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>_IOLBF</name></expr></argument>, <argument><expr><literal type="number">4096</literal></expr></argument>)</argument_list></call></expr>)</condition>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<block>{<block_content>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>keylog_file_fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>keylog_file_fp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name>keylog_file_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if<condition>(<expr><call><name>ossl_get_ssl_conn_index</name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>ossl_get_ssl_sockindex_index</name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Curl_ossl_cleanup</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>OPENSSL_VERSION_NUMBER</name> <operator>&gt;=</operator> <literal type="number">0x10100000L</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LIBRESSL_VERSION_NUMBER</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>EVP_cleanup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_OPENSSL_ENGINE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>ENGINE_cleanup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>ERR_free_strings</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ERR_REMOVE_THREAD_STATE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>ERR_remove_thread_state</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>ERR_remove_state</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>CONF_modules_free</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SSL_COMP_FREE_COMPRESSION_METHODS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>SSL_COMP_free_compression_methods</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_SSLKEYLOGFILE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name>keylog_file_fp</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>keylog_file_fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>keylog_file_fp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Curl_ossl_check_cxn</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSG_PEEK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>char</name></type> <name>buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>nread</name></decl>;</decl_stmt>

<expr_stmt><expr><name>nread</name> <operator>=</operator> <call><name>recv</name><argument_list>(<argument><expr><operator>(</operator><name>RECV_TYPE_ARG1</name><operator>)</operator><name><name>conn</name><operator>-&gt;</operator><name>sock</name><index>[<expr><name>FIRSTSOCKET</name></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>RECV_TYPE_ARG2</name><operator>)</operator><operator>&amp;</operator><name>buf</name></expr></argument>,

<argument><expr><operator>(</operator><name>RECV_TYPE_ARG3</name><operator>)</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>RECV_TYPE_ARG4</name><operator>)</operator><name>MSG_PEEK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>nread</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> 

<if_stmt><if>if<condition>(<expr><name>nread</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if> 

<if type="elseif">else if<condition>(<expr><name>nread</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><name>SOCKERRNO</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>err</name> <operator>==</operator> <name>EINPROGRESS</name> <operator>||</operator>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EAGAIN</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>EAGAIN</name> <operator>!=</operator> <name>EWOULDBLOCK</name><operator>)</operator></expr></cpp:if>

<name>err</name> <operator>==</operator> <name>EAGAIN</name> <operator>||</operator>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>err</name> <operator>==</operator> <name>EWOULDBLOCK</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt> 

<if_stmt><if>if<condition>(<expr><name>err</name> <operator>==</operator> <name>ECONNRESET</name> <operator>||</operator>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ECONNABORTED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<name>err</name> <operator>==</operator> <name>ECONNABORTED</name> <operator>||</operator>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENETDOWN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<name>err</name> <operator>==</operator> <name>ENETDOWN</name> <operator>||</operator>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENETRESET</name></expr></argument>)</argument_list></call></expr></cpp:if>
<name>err</name> <operator>==</operator> <name>ENETRESET</name> <operator>||</operator>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ESHUTDOWN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<name>err</name> <operator>==</operator> <name>ESHUTDOWN</name> <operator>||</operator>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ETIMEDOUT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<name>err</name> <operator>==</operator> <name>ETIMEDOUT</name> <operator>||</operator>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>err</name> <operator>==</operator> <name>ENOTCONN</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> 

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return> 

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>Curl_ossl_set_engine</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>engine</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_OPENSSL_ENGINE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>ENGINE</name> <modifier>*</modifier></type><name>e</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPENSSL_VERSION_NUMBER</name> <operator>&gt;=</operator> <literal type="number">0x00909000L</literal></expr></cpp:if>

<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>ENGINE_by_id</name><argument_list>(<argument><expr><name>engine</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<for>for<control>(<init><expr><name>e</name> <operator>=</operator> <call><name>ENGINE_get_first</name><argument_list>()</argument_list></call></expr>;</init> <condition><expr><name>e</name></expr>;</condition> <incr><expr><name>e</name> <operator>=</operator> <call><name>ENGINE_get_next</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>e_id</name> <init>= <expr><call><name>ENGINE_get_id</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>engine</name></expr></argument>, <argument><expr><name>e_id</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>e</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"SSL Engine '%s' not found"</literal></expr></argument>, <argument><expr><name>engine</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_SSL_ENGINE_NOTFOUND</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>engine</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ENGINE_finish</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>engine</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ENGINE_free</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>engine</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>engine</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>ENGINE_init</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ENGINE_free</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Failed to initialise SSL Engine '%s':\n%s"</literal></expr></argument>,

<argument><expr><name>engine</name></expr></argument>, <argument><expr><call><name>ossl_strerror</name><argument_list>(<argument><expr><call><name>ERR_get_error</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_SSL_ENGINE_INITFAILED</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>engine</name></name> <operator>=</operator> <name>e</name></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>engine</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"SSL Engine not supported"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_SSL_ENGINE_NOTFOUND</name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>Curl_ossl_set_engine_default</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_OPENSSL_ENGINE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>engine</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>ENGINE_set_default</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>engine</name></name></expr></argument>, <argument><expr><name>ENGINE_METHOD_ALL</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"set default crypto engine '%s'\n"</literal></expr></argument>,

<argument><expr><call><name>ENGINE_get_id</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>engine</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"set default crypto engine '%s' failed"</literal></expr></argument>,

<argument><expr><call><name>ENGINE_get_id</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>engine</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_SSL_ENGINE_SETFAILED</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>data</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>curl_slist</name></name> <modifier>*</modifier></type><name>Curl_ossl_engines_list</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>curl_slist</name></name> <modifier>*</modifier></type><name>list</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_OPENSSL_ENGINE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name><name>struct</name> <name>curl_slist</name></name> <modifier>*</modifier></type><name>beg</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ENGINE</name> <modifier>*</modifier></type><name>e</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>e</name> <operator>=</operator> <call><name>ENGINE_get_first</name><argument_list>()</argument_list></call></expr>;</init> <condition><expr><name>e</name></expr>;</condition> <incr><expr><name>e</name> <operator>=</operator> <call><name>ENGINE_get_next</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>beg</name> <operator>=</operator> <call><name>curl_slist_append</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><call><name>ENGINE_get_id</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>beg</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>curl_slist_free_all</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>list</name> <operator>=</operator> <name>beg</name></expr>;</expr_stmt>

</block_content>}</block></for>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>data</name></expr>;</expr_stmt>

<return>return <expr><name>list</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ossl_close</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ssl_connect_data</name></name> <modifier>*</modifier></type><name>connssl</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>ssl_backend_data</name></name> <modifier>*</modifier></type><name>backend</name> <init>= <expr><name><name>connssl</name><operator>-&gt;</operator><name>backend</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>backend</name><operator>-&gt;</operator><name>handle</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>SSL_shutdown</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SSL_set_connect_state</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SSL_free</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>backend</name><operator>-&gt;</operator><name>handle</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>backend</name><operator>-&gt;</operator><name>ctx</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>SSL_CTX_free</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>backend</name><operator>-&gt;</operator><name>ctx</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Curl_ossl_close</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sockindex</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ossl_close</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>ssl</name><index>[<expr><name>sockindex</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ossl_close</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>proxy_ssl</name><index>[<expr><name>sockindex</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Curl_ossl_shutdown</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sockindex</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>retval</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ssl_connect_data</name></name> <modifier>*</modifier></type><name>connssl</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>ssl</name><index>[<expr><name>sockindex</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>sslerror</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>nread</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>buffsize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>done</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ssl_backend_data</name></name> <modifier>*</modifier></type><name>backend</name> <init>= <expr><name><name>connssl</name><operator>-&gt;</operator><name>backend</name></name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_FTP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>ftp_ccc</name></name> <operator>==</operator> <name>CURLFTPSSL_CCC_ACTIVE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>SSL_shutdown</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if<condition>(<expr><name><name>backend</name><operator>-&gt;</operator><name>handle</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>buffsize</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<while>while<condition>(<expr><operator>!</operator><name>done</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>what</name> <init>= <expr><call><name>SOCKET_READABLE</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>sock</name><index>[<expr><name>sockindex</name></expr>]</index></name></expr></argument>,

<argument><expr><name>SSL_SHUTDOWN_TIMEOUT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>what</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ERR_clear_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>nread</name> <operator>=</operator> <operator>(</operator><name>ssize_t</name><operator>)</operator><call><name>SSL_read</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buffsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>SSL_get_error</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>nread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch<condition>(<expr><name>err</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>SSL_ERROR_NONE</name></expr>:</case> 

<case>case <expr><name>SSL_ERROR_ZERO_RETURN</name></expr>:</case> 

<expr_stmt><expr><name>done</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>SSL_ERROR_WANT_READ</name></expr>:</case>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"SSL_ERROR_WANT_READ\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>SSL_ERROR_WANT_WRITE</name></expr>:</case>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"SSL_ERROR_WANT_WRITE\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>done</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><name>sslerror</name> <operator>=</operator> <call><name>ERR_get_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>OSSL_PACKAGE</name> <literal type="string">" SSL_read on shutdown: %s, errno %d"</literal></expr></argument>,

<argument><expr><operator>(</operator><ternary><condition><expr><name>sslerror</name></expr> ?</condition><then>

<expr><call><name>ossl_strerror</name><argument_list>(<argument><expr><name>sslerror</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr> </then><else>:

<expr><call><name>SSL_ERROR_to_str</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></else></ternary><operator>)</operator></expr></argument>,

<argument><expr><name>SOCKERRNO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>done</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><literal type="number">0</literal> <operator>==</operator> <name>what</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"SSL shutdown timeout"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>done</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"select/poll on SSL socket, errno: %d"</literal></expr></argument>, <argument><expr><name>SOCKERRNO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>done</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while> 

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>verbose</name></name></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SSL_GET_SHUTDOWN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<switch>switch<condition>(<expr><call><name>SSL_get_shutdown</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<case>case <expr><name>SSL_SENT_SHUTDOWN</name></expr>:</case>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"SSL_get_shutdown() returned SSL_SENT_SHUTDOWN\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>SSL_RECEIVED_SHUTDOWN</name></expr>:</case>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"SSL_get_shutdown() returned SSL_RECEIVED_SHUTDOWN\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>SSL_SENT_SHUTDOWN</name><operator>|</operator><name>SSL_RECEIVED_SHUTDOWN</name></expr>:</case>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"SSL_get_shutdown() returned SSL_SENT_SHUTDOWN|"</literal>

<literal type="string">"SSL_RECEIVED__SHUTDOWN\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>SSL_free</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>backend</name><operator>-&gt;</operator><name>handle</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>retval</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Curl_ossl_session_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>SSL_SESSION_free</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Curl_ossl_close_all</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_OPENSSL_ENGINE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>engine</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ENGINE_finish</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>engine</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ENGINE_free</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>engine</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>engine</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>data</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ERR_REMOVE_THREAD_STATE_DEPRECATED</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ERR_REMOVE_THREAD_STATE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>ERR_remove_thread_state</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>subj_alt_hostcheck</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>match_pattern</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>hostname</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dispname</name></decl></parameter>)</parameter_list>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DOES_CONVERSIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>res</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>match_pattern2</name> <init>= <expr><call><name>strdup</name><argument_list>(<argument><expr><name>match_pattern</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>match_pattern2</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>Curl_convert_from_network</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>match_pattern2</name></expr></argument>,

<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>match_pattern2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <name>CURLE_OK</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>Curl_cert_hostcheck</name><argument_list>(<argument><expr><name>match_pattern2</name></expr></argument>, <argument><expr><name>hostname</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>res</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>,

<argument><expr><literal type="string">" subjectAltName: host \"%s\" matched cert's \"%s\"\n"</literal></expr></argument>,

<argument><expr><name>dispname</name></expr></argument>, <argument><expr><name>match_pattern2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>match_pattern2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>,

<argument><expr><literal type="string">"SSL: out of memory when allocating temporary for subjectAltName"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_VERBOSE_STRINGS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>dispname</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>data</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if<condition>(<expr><call><name>Curl_cert_hostcheck</name><argument_list>(<argument><expr><name>match_pattern</name></expr></argument>, <argument><expr><name>hostname</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">" subjectAltName: host \"%s\" matched cert's \"%s\"\n"</literal></expr></argument>,

<argument><expr><name>dispname</name></expr></argument>, <argument><expr><name>match_pattern</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>TRUE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>verifyhost</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>X509</name> <modifier>*</modifier></type><name>server_cert</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>matched</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>target</name> <init>= <expr><name>GEN_DNS</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>size_t</name></type> <name>addrlen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>STACK_OF</name><argument_list>(<argument><expr><name>GENERAL_NAME</name></expr></argument>)</argument_list></call> <operator>*</operator><name>altnames</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_IPV6</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name><name>struct</name> <name>in6_addr</name></name></type> <name>addr</name></decl>;</decl_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name><name>struct</name> <name>in_addr</name></name></type> <name>addr</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>dNSName</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>bool</name></type> <name>iPAddress</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>hostname</name> <init>= <expr><ternary><condition><expr><call><name>SSL_IS_PROXY</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><name><name>conn</name><operator>-&gt;</operator><name>http_proxy</name><operator>.</operator><name>host</name><operator>.</operator><name>name</name></name></expr> </then><else>:

<expr><name><name>conn</name><operator>-&gt;</operator><name>host</name><operator>.</operator><name>name</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>dispname</name> <init>= <expr><ternary><condition><expr><call><name>SSL_IS_PROXY</name><argument_list>()</argument_list></call></expr> ?</condition><then>

<expr><name><name>conn</name><operator>-&gt;</operator><name>http_proxy</name><operator>.</operator><name>host</name><operator>.</operator><name>dispname</name></name></expr> </then><else>: <expr><name><name>conn</name><operator>-&gt;</operator><name>host</name><operator>.</operator><name>dispname</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_IPV6</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>ipv6_ip</name></name> <operator>&amp;&amp;</operator>

<call><name>Curl_inet_pton</name><argument_list>(<argument><expr><name>AF_INET6</name></expr></argument>, <argument><expr><name>hostname</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>target</name> <operator>=</operator> <name>GEN_IPADD</name></expr>;</expr_stmt>

<expr_stmt><expr><name>addrlen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>in6_addr</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

if<condition>(<expr><call><name>Curl_inet_pton</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><name>hostname</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>target</name> <operator>=</operator> <name>GEN_IPADD</name></expr>;</expr_stmt>

<expr_stmt><expr><name>addrlen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>in_addr</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>altnames</name> <operator>=</operator> <call><name>X509_get_ext_d2i</name><argument_list>(<argument><expr><name>server_cert</name></expr></argument>, <argument><expr><name>NID_subject_alt_name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>altnames</name></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OPENSSL_IS_BORINGSSL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>size_t</name></type> <name>numalts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>int</name></type> <name>numalts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>bool</name></type> <name>dnsmatched</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>ipmatched</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>numalts</name> <operator>=</operator> <call><name>sk_GENERAL_NAME_num</name><argument_list>(<argument><expr><name>altnames</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>(</operator><name>i</name> <operator>&lt;</operator> <name>numalts</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name>dnsmatched</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>GENERAL_NAME</name> <modifier>*</modifier></type><name>check</name> <init>= <expr><call><name>sk_GENERAL_NAME_value</name><argument_list>(<argument><expr><name>altnames</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>check</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>GEN_DNS</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>dNSName</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>(<expr><name><name>check</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>GEN_IPADD</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>iPAddress</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>check</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>target</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>altptr</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>ASN1_STRING_get0_data</name><argument_list>(<argument><expr><name><name>check</name><operator>-&gt;</operator><name>d</name><operator>.</operator><name>ia5</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>altlen</name> <init>= <expr><operator>(</operator><name>size_t</name><operator>)</operator> <call><name>ASN1_STRING_length</name><argument_list>(<argument><expr><name><name>check</name><operator>-&gt;</operator><name>d</name><operator>.</operator><name>ia5</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch<condition>(<expr><name>target</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>GEN_DNS</name></expr>:</case> 

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>altlen</name> <operator>==</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>altptr</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator>

<call><name>subj_alt_hostcheck</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>altptr</name></expr></argument>, <argument><expr><name>hostname</name></expr></argument>, <argument><expr><name>dispname</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>dnsmatched</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>GEN_IPADD</name></expr>:</case> 

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>altlen</name> <operator>==</operator> <name>addrlen</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name>altptr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><name>altlen</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ipmatched</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>,

<argument><expr><literal type="string">" subjectAltName: host \"%s\" matched cert's IP address!\n"</literal></expr></argument>,

<argument><expr><name>dispname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>GENERAL_NAMES_free</name><argument_list>(<argument><expr><name>altnames</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>dnsmatched</name> <operator>||</operator> <name>ipmatched</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>matched</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>matched</name></expr>)</condition><block type="pseudo"><block_content>

<empty_stmt>;</empty_stmt></block_content></block></if>

<if type="elseif">else if<condition>(<expr><name>dNSName</name> <operator>||</operator> <name>iPAddress</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">" subjectAltName does not match %s\n"</literal></expr></argument>, <argument><expr><name>dispname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"SSL: no alternative certificate subject name matches "</literal>

<literal type="string">"target host name '%s'"</literal></expr></argument>, <argument><expr><name>dispname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_PEER_FAILED_VERIFICATION</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>, <decl><type ref="prev"/><name>i</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>nulstr</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>peer_CN</name> <init>= <expr><name>nulstr</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>X509_NAME</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><call><name>X509_get_subject_name</name><argument_list>(<argument><expr><name>server_cert</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>name</name></expr>)</condition><block type="pseudo"><block_content>

<while>while<condition>(<expr><operator>(</operator><name>j</name> <operator>=</operator> <call><name>X509_NAME_get_index_by_NID</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>NID_commonName</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt></block_content></block></while></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ASN1_STRING</name> <modifier>*</modifier></type><name>tmp</name> <init>=

<expr><call><name>X509_NAME_ENTRY_get_data</name><argument_list>(<argument><expr><call><name>X509_NAME_get_entry</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>tmp</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>ASN1_STRING_type</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>V_ASN1_UTF8STRING</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>j</name> <operator>=</operator> <call><name>ASN1_STRING_length</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>j</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>peer_CN</name> <operator>=</operator> <call><name>OPENSSL_malloc</name><argument_list>(<argument><expr><name>j</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>peer_CN</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>peer_CN</name></expr></argument>, <argument><expr><call><name>ASN1_STRING_get0_data</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>peer_CN</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content> 

<expr_stmt><expr><name>j</name> <operator>=</operator> <call><name>ASN1_STRING_to_UTF8</name><argument_list>(<argument><expr><operator>&amp;</operator><name>peer_CN</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name>peer_CN</name> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>curlx_uztosi</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>peer_CN</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>!=</operator> <name>j</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"SSL: illegal cert name field"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_PEER_FAILED_VERIFICATION</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>peer_CN</name> <operator>==</operator> <name>nulstr</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>peer_CN</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>rc</name> <init>= <expr><call><name>Curl_convert_from_utf8</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>peer_CN</name></expr></argument>,

<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>peer_CN</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>OPENSSL_free</name><argument_list>(<argument><expr><name>peer_CN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>rc</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>

<empty_stmt>;</empty_stmt></block_content></block></if>

<if type="elseif">else if<condition>(<expr><operator>!</operator><name>peer_CN</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>,

<argument><expr><literal type="string">"SSL: unable to obtain common name from peer certificate"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_PEER_FAILED_VERIFICATION</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><operator>!</operator><call><name>Curl_cert_hostcheck</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>peer_CN</name></expr></argument>, <argument><expr><name>hostname</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"SSL: certificate subject name '%s' does not match "</literal>

<literal type="string">"target host name '%s'"</literal></expr></argument>, <argument><expr><name>peer_CN</name></expr></argument>, <argument><expr><name>dispname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_PEER_FAILED_VERIFICATION</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">" common name: %s (matched)\n"</literal></expr></argument>, <argument><expr><name>peer_CN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name>peer_CN</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>OPENSSL_free</name><argument_list>(<argument><expr><name>peer_CN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>OPENSSL_VERSION_NUMBER</name> <operator>&gt;=</operator> <literal type="number">0x0090808fL</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>OPENSSL_NO_TLSEXT</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>OPENSSL_NO_OCSP</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>verifystatus</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>ssl_connect_data</name></name> <modifier>*</modifier></type><name>connssl</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ocsp_status</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>status</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>OCSP_RESPONSE</name> <modifier>*</modifier></type><name>rsp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>OCSP_BASICRESP</name> <modifier>*</modifier></type><name>br</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>X509_STORE</name> <modifier>*</modifier></type><name>st</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>STACK_OF</name><argument_list>(<argument><expr><name>X509</name></expr></argument>)</argument_list></call> <operator>*</operator><name>ch</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ssl_backend_data</name></name> <modifier>*</modifier></type><name>backend</name> <init>= <expr><name><name>connssl</name><operator>-&gt;</operator><name>backend</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>len</name> <init>= <expr><call><name>SSL_get_tlsext_status_ocsp_resp</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>status</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>status</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"No OCSP response received"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_SSL_INVALIDCERTSTATUS</name></expr>;</expr_stmt>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>status</name></expr>;</expr_stmt>

<expr_stmt><expr><name>rsp</name> <operator>=</operator> <call><name>d2i_OCSP_RESPONSE</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>rsp</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Invalid OCSP response"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_SSL_INVALIDCERTSTATUS</name></expr>;</expr_stmt>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ocsp_status</name> <operator>=</operator> <call><name>OCSP_response_status</name><argument_list>(<argument><expr><name>rsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>ocsp_status</name> <operator>!=</operator> <name>OCSP_RESPONSE_STATUS_SUCCESSFUL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Invalid OCSP response status: %s (%d)"</literal></expr></argument>,

<argument><expr><call><name>OCSP_response_status_str</name><argument_list>(<argument><expr><name>ocsp_status</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ocsp_status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_SSL_INVALIDCERTSTATUS</name></expr>;</expr_stmt>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>br</name> <operator>=</operator> <call><name>OCSP_response_get1_basic</name><argument_list>(<argument><expr><name>rsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>br</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Invalid OCSP response"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_SSL_INVALIDCERTSTATUS</name></expr>;</expr_stmt>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ch</name> <operator>=</operator> <call><name>SSL_get_peer_cert_chain</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>st</name> <operator>=</operator> <call><name>SSL_CTX_get_cert_store</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><operator>(</operator><name>OPENSSL_VERSION_NUMBER</name> <operator>&lt;=</operator> <literal type="number">0x1000201fL</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>LIBRESSL_VERSION_NUMBER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>LIBRESSL_VERSION_NUMBER</name> <operator>&lt;=</operator> <literal type="number">0x2040200fL</literal><operator>)</operator><operator>)</operator></expr></cpp:if>

<if_stmt><if>if<condition>(<expr><call><name>sk_X509_num</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <call><name>sk_X509_num</name><argument_list>(<argument><expr><name><name>br</name><operator>-&gt;</operator><name>certs</name></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>X509</name> <modifier>*</modifier></type><name>responder</name> <init>= <expr><call><name>sk_X509_value</name><argument_list>(<argument><expr><name><name>br</name><operator>-&gt;</operator><name>certs</name></name></expr></argument>, <argument><expr><call><name>sk_X509_num</name><argument_list>(<argument><expr><name><name>br</name><operator>-&gt;</operator><name>certs</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>sk_X509_num</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>X509</name> <modifier>*</modifier></type><name>issuer</name> <init>= <expr><call><name>sk_X509_value</name><argument_list>(<argument><expr><name>ch</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><call><name>X509_check_issued</name><argument_list>(<argument><expr><name>issuer</name></expr></argument>, <argument><expr><name>responder</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>X509_V_OK</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>OCSP_basic_add1_cert</name><argument_list>(<argument><expr><name>br</name></expr></argument>, <argument><expr><name>issuer</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Could not add issuer cert to OCSP response"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_SSL_INVALIDCERTSTATUS</name></expr>;</expr_stmt>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if<condition>(<expr><call><name>OCSP_basic_verify</name><argument_list>(<argument><expr><name>br</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>, <argument><expr><name>st</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"OCSP response verification failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_SSL_INVALIDCERTSTATUS</name></expr>;</expr_stmt>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if></if_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>OCSP_resp_count</name><argument_list>(<argument><expr><name>br</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>cert_status</name></decl>, <decl><type ref="prev"/><name>crl_reason</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>OCSP_SINGLERESP</name> <modifier>*</modifier></type><name>single</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ASN1_GENERALIZEDTIME</name> <modifier>*</modifier></type><name>rev</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>thisupd</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>nextupd</name></decl>;</decl_stmt>

<expr_stmt><expr><name>single</name> <operator>=</operator> <call><name>OCSP_resp_get0</name><argument_list>(<argument><expr><name>br</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>single</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>cert_status</name> <operator>=</operator> <call><name>OCSP_single_get0_status</name><argument_list>(<argument><expr><name>single</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>crl_reason</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rev</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>thisupd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nextupd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>OCSP_check_validity</name><argument_list>(<argument><expr><name>thisupd</name></expr></argument>, <argument><expr><name>nextupd</name></expr></argument>, <argument><expr><literal type="number">300L</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1L</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"OCSP response has expired"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_SSL_INVALIDCERTSTATUS</name></expr>;</expr_stmt>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"SSL certificate status: %s (%d)\n"</literal></expr></argument>,

<argument><expr><call><name>OCSP_cert_status_str</name><argument_list>(<argument><expr><name>cert_status</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>cert_status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch<condition>(<expr><name>cert_status</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>V_OCSP_CERTSTATUS_GOOD</name></expr>:</case>

<break>break;</break>

<case>case <expr><name>V_OCSP_CERTSTATUS_REVOKED</name></expr>:</case>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_SSL_INVALIDCERTSTATUS</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"SSL certificate revocation reason: %s (%d)"</literal></expr></argument>,

<argument><expr><call><name>OCSP_crl_reason_str</name><argument_list>(<argument><expr><name>crl_reason</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>crl_reason</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>end</name>;</goto>

<case>case <expr><name>V_OCSP_CERTSTATUS_UNKNOWN</name></expr>:</case>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_SSL_INVALIDCERTSTATUS</name></expr>;</expr_stmt>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></switch>

</block_content>}</block></for>

<label><name>end</name>:</label>

<if_stmt><if>if<condition>(<expr><name>br</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>OCSP_BASICRESP_free</name><argument_list>(<argument><expr><name>br</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>OCSP_RESPONSE_free</name><argument_list>(<argument><expr><name>rsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SSL_CTRL_SET_MSG_CALLBACK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ssl_msg_type</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>ssl_ver</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>msg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SSL2_VERSION_MAJOR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name>ssl_ver</name> <operator>==</operator> <name>SSL2_VERSION_MAJOR</name></expr>)</condition> <block>{<block_content>

<switch>switch<condition>(<expr><name>msg</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>SSL2_MT_ERROR</name></expr>:</case>

<return>return <expr><literal type="string">"Error"</literal></expr>;</return>

<case>case <expr><name>SSL2_MT_CLIENT_HELLO</name></expr>:</case>

<return>return <expr><literal type="string">"Client hello"</literal></expr>;</return>

<case>case <expr><name>SSL2_MT_CLIENT_MASTER_KEY</name></expr>:</case>

<return>return <expr><literal type="string">"Client key"</literal></expr>;</return>

<case>case <expr><name>SSL2_MT_CLIENT_FINISHED</name></expr>:</case>

<return>return <expr><literal type="string">"Client finished"</literal></expr>;</return>

<case>case <expr><name>SSL2_MT_SERVER_HELLO</name></expr>:</case>

<return>return <expr><literal type="string">"Server hello"</literal></expr>;</return>

<case>case <expr><name>SSL2_MT_SERVER_VERIFY</name></expr>:</case>

<return>return <expr><literal type="string">"Server verify"</literal></expr>;</return>

<case>case <expr><name>SSL2_MT_SERVER_FINISHED</name></expr>:</case>

<return>return <expr><literal type="string">"Server finished"</literal></expr>;</return>

<case>case <expr><name>SSL2_MT_REQUEST_CERTIFICATE</name></expr>:</case>

<return>return <expr><literal type="string">"Request CERT"</literal></expr>;</return>

<case>case <expr><name>SSL2_MT_CLIENT_CERTIFICATE</name></expr>:</case>

<return>return <expr><literal type="string">"Client CERT"</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></if>

<if type="elseif">else

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

if<condition>(<expr><name>ssl_ver</name> <operator>==</operator> <name>SSL3_VERSION_MAJOR</name></expr>)</condition> <block>{<block_content>

<switch>switch<condition>(<expr><name>msg</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>SSL3_MT_HELLO_REQUEST</name></expr>:</case>

<return>return <expr><literal type="string">"Hello request"</literal></expr>;</return>

<case>case <expr><name>SSL3_MT_CLIENT_HELLO</name></expr>:</case>

<return>return <expr><literal type="string">"Client hello"</literal></expr>;</return>

<case>case <expr><name>SSL3_MT_SERVER_HELLO</name></expr>:</case>

<return>return <expr><literal type="string">"Server hello"</literal></expr>;</return>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SSL3_MT_NEWSESSION_TICKET</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>SSL3_MT_NEWSESSION_TICKET</name></expr>:</case>

<return>return <expr><literal type="string">"Newsession Ticket"</literal></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<case>case <expr><name>SSL3_MT_CERTIFICATE</name></expr>:</case>

<return>return <expr><literal type="string">"Certificate"</literal></expr>;</return>

<case>case <expr><name>SSL3_MT_SERVER_KEY_EXCHANGE</name></expr>:</case>

<return>return <expr><literal type="string">"Server key exchange"</literal></expr>;</return>

<case>case <expr><name>SSL3_MT_CLIENT_KEY_EXCHANGE</name></expr>:</case>

<return>return <expr><literal type="string">"Client key exchange"</literal></expr>;</return>

<case>case <expr><name>SSL3_MT_CERTIFICATE_REQUEST</name></expr>:</case>

<return>return <expr><literal type="string">"Request CERT"</literal></expr>;</return>

<case>case <expr><name>SSL3_MT_SERVER_DONE</name></expr>:</case>

<return>return <expr><literal type="string">"Server finished"</literal></expr>;</return>

<case>case <expr><name>SSL3_MT_CERTIFICATE_VERIFY</name></expr>:</case>

<return>return <expr><literal type="string">"CERT verify"</literal></expr>;</return>

<case>case <expr><name>SSL3_MT_FINISHED</name></expr>:</case>

<return>return <expr><literal type="string">"Finished"</literal></expr>;</return>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SSL3_MT_CERTIFICATE_STATUS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>SSL3_MT_CERTIFICATE_STATUS</name></expr>:</case>

<return>return <expr><literal type="string">"Certificate Status"</literal></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SSL3_MT_ENCRYPTED_EXTENSIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>SSL3_MT_ENCRYPTED_EXTENSIONS</name></expr>:</case>

<return>return <expr><literal type="string">"Encrypted Extensions"</literal></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SSL3_MT_END_OF_EARLY_DATA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>SSL3_MT_END_OF_EARLY_DATA</name></expr>:</case>

<return>return <expr><literal type="string">"End of early data"</literal></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SSL3_MT_KEY_UPDATE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>SSL3_MT_KEY_UPDATE</name></expr>:</case>

<return>return <expr><literal type="string">"Key update"</literal></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SSL3_MT_NEXT_PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>SSL3_MT_NEXT_PROTO</name></expr>:</case>

<return>return <expr><literal type="string">"Next protocol"</literal></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SSL3_MT_MESSAGE_HASH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>SSL3_MT_MESSAGE_HASH</name></expr>:</case>

<return>return <expr><literal type="string">"Message hash"</literal></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></switch>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="string">"Unknown"</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tls_rt_type</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch<condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SSL3_RT_HEADER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>SSL3_RT_HEADER</name></expr>:</case>

<return>return <expr><literal type="string">"TLS header"</literal></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<case>case <expr><name>SSL3_RT_CHANGE_CIPHER_SPEC</name></expr>:</case>

<return>return <expr><literal type="string">"TLS change cipher"</literal></expr>;</return>

<case>case <expr><name>SSL3_RT_ALERT</name></expr>:</case>

<return>return <expr><literal type="string">"TLS alert"</literal></expr>;</return>

<case>case <expr><name>SSL3_RT_HANDSHAKE</name></expr>:</case>

<return>return <expr><literal type="string">"TLS handshake"</literal></expr>;</return>

<case>case <expr><name>SSL3_RT_APPLICATION_DATA</name></expr>:</case>

<return>return <expr><literal type="string">"TLS app data"</literal></expr>;</return>

<default>default:</default>

<return>return <expr><literal type="string">"TLS Unknown"</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ssl_tls_trace</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>direction</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ssl_ver</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>content_type</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>SSL</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>unknown</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>verstr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name> <init>= <expr><name>userp</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>conn</name> <operator>||</operator> <operator>!</operator><name><name>conn</name><operator>-&gt;</operator><name>data</name></name> <operator>||</operator> <operator>!</operator><name><name>conn</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>fdebug</name></name> <operator>||</operator>

<operator>(</operator><name>direction</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>direction</name> <operator>!=</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>data</name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

<switch>switch<condition>(<expr><name>ssl_ver</name></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SSL2_VERSION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>SSL2_VERSION</name></expr>:</case>

<expr_stmt><expr><name>verstr</name> <operator>=</operator> <literal type="string">"SSLv2"</literal></expr>;</expr_stmt>

<break>break;</break>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SSL3_VERSION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>SSL3_VERSION</name></expr>:</case>

<expr_stmt><expr><name>verstr</name> <operator>=</operator> <literal type="string">"SSLv3"</literal></expr>;</expr_stmt>

<break>break;</break>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<case>case <expr><name>TLS1_VERSION</name></expr>:</case>

<expr_stmt><expr><name>verstr</name> <operator>=</operator> <literal type="string">"TLSv1.0"</literal></expr>;</expr_stmt>

<break>break;</break>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TLS1_1_VERSION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>TLS1_1_VERSION</name></expr>:</case>

<expr_stmt><expr><name>verstr</name> <operator>=</operator> <literal type="string">"TLSv1.1"</literal></expr>;</expr_stmt>

<break>break;</break>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TLS1_2_VERSION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>TLS1_2_VERSION</name></expr>:</case>

<expr_stmt><expr><name>verstr</name> <operator>=</operator> <literal type="string">"TLSv1.2"</literal></expr>;</expr_stmt>

<break>break;</break>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TLS1_3_VERSION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>TLS1_3_VERSION</name></expr>:</case>

<expr_stmt><expr><name>verstr</name> <operator>=</operator> <literal type="string">"TLSv1.3"</literal></expr>;</expr_stmt>

<break>break;</break>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<case>case <expr><literal type="number">0</literal></expr>:</case>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>msnprintf</name><argument_list>(<argument><expr><name>unknown</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>unknown</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"(%x)"</literal></expr></argument>, <argument><expr><name>ssl_ver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>verstr</name> <operator>=</operator> <name>unknown</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if<condition>(<expr><name>ssl_ver</name>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SSL3_RT_INNER_CONTENT_TYPE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>&amp;&amp;</operator> <name>content_type</name> <operator>!=</operator> <name>SSL3_RT_INNER_CONTENT_TYPE</name></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg_name</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>tls_rt_name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>ssl_buf</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>msg_type</name></decl>, <decl><type ref="prev"/><name>txt_len</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ssl_ver</name> <operator>&gt;&gt;=</operator> <literal type="number">8</literal></expr>;</expr_stmt> 

<if_stmt><if>if<condition>(<expr><name>ssl_ver</name> <operator>==</operator> <name>SSL3_VERSION_MAJOR</name> <operator>&amp;&amp;</operator> <name>content_type</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>tls_rt_name</name> <operator>=</operator> <call><name>tls_rt_type</name><argument_list>(<argument><expr><name>content_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>tls_rt_name</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name>content_type</name> <operator>==</operator> <name>SSL3_RT_CHANGE_CIPHER_SPEC</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>msg_type</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>buf</name></expr>;</expr_stmt>

<expr_stmt><expr><name>msg_name</name> <operator>=</operator> <literal type="string">"Change cipher spec"</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name>content_type</name> <operator>==</operator> <name>SSL3_RT_ALERT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>msg_type</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>buf</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>buf</name><operator>)</operator><index>[<expr><literal type="number">1</literal></expr>]</index></expr>;</expr_stmt>

<expr_stmt><expr><name>msg_name</name> <operator>=</operator> <call><name>SSL_alert_desc_string_long</name><argument_list>(<argument><expr><name>msg_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>msg_type</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>buf</name></expr>;</expr_stmt>

<expr_stmt><expr><name>msg_name</name> <operator>=</operator> <call><name>ssl_msg_type</name><argument_list>(<argument><expr><name>ssl_ver</name></expr></argument>, <argument><expr><name>msg_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>txt_len</name> <operator>=</operator> <call><name>msnprintf</name><argument_list>(<argument><expr><name>ssl_buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ssl_buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s (%s), %s, %s (%d):\n"</literal></expr></argument>,

<argument><expr><name>verstr</name></expr></argument>, <argument><expr><ternary><condition><expr><name>direction</name></expr>?</condition><then><expr><literal type="string">"OUT"</literal></expr></then><else>:<expr><literal type="string">"IN"</literal></expr></else></ternary></expr></argument>,

<argument><expr><name>tls_rt_name</name></expr></argument>, <argument><expr><name>msg_name</name></expr></argument>, <argument><expr><name>msg_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><literal type="number">0</literal> <operator>&lt;=</operator> <name>txt_len</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name>txt_len</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ssl_buf</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>Curl_debug</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>CURLINFO_TEXT</name></expr></argument>, <argument><expr><name>ssl_buf</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>txt_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>Curl_debug</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>direction</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><name>CURLINFO_SSL_DATA_OUT</name></expr> </then><else>:

<expr><name>CURLINFO_SSL_DATA_IN</name></expr></else></ternary></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>ssl</name></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_OPENSSL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SSL_CTRL_SET_TLSEXT_HOSTNAME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>use_sni</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>sni = (x)</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>use_sni</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>Curl_nop_stmt</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>HAS_ALPN</name></cpp:undef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPENSSL_VERSION_NUMBER</name> <operator>&gt;=</operator> <literal type="number">0x10002000L</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>OPENSSL_NO_TLSEXT</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAS_ALPN</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>HAS_NPN</name></cpp:undef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPENSSL_VERSION_NUMBER</name> <operator>&gt;=</operator> <literal type="number">0x10001000L</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>OPENSSL_NO_TLSEXT</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>OPENSSL_NO_NEXTPROTONEG</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAS_NPN</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAS_NPN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type>

<name>select_next_protocol</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>outlen</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>inlen</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>keylen</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>+</operator> <name>keylen</name> <operator>&lt;=</operator> <name>inlen</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <name><name>in</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>in</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>out</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>in</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>outlen</name> <operator>=</operator> <name><name>in</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>select_next_proto_cb</name><parameter_list>(<parameter><decl><type><name>SSL</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>outlen</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>inlen</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name> <init>= <expr><operator>(</operator>struct <name>connectdata</name><operator>*</operator><operator>)</operator> <name>arg</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>ssl</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_NGHTTP2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>httpversion</name></name> <operator>&gt;=</operator> <name>CURL_HTTP_VERSION_2</name> <operator>&amp;&amp;</operator>

<operator>!</operator><call><name>select_next_protocol</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>outlen</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>inlen</name></expr></argument>, <argument><expr><name>NGHTTP2_PROTO_VERSION_ID</name></expr></argument>,

<argument><expr><name>NGHTTP2_PROTO_VERSION_ID_LEN</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"NPN, negotiated HTTP2 (%s)\n"</literal></expr></argument>,

<argument><expr><name>NGHTTP2_PROTO_VERSION_ID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>negnpn</name></name> <operator>=</operator> <name>CURL_HTTP_VERSION_2</name></expr>;</expr_stmt>

<return>return <expr><name>SSL_TLSEXT_ERR_OK</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>select_next_protocol</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>outlen</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>inlen</name></expr></argument>, <argument><expr><name>ALPN_HTTP_1_1</name></expr></argument>,

<argument><expr><name>ALPN_HTTP_1_1_LENGTH</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"NPN, negotiated HTTP1.1\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>negnpn</name></name> <operator>=</operator> <name>CURL_HTTP_VERSION_1_1</name></expr>;</expr_stmt>

<return>return <expr><name>SSL_TLSEXT_ERR_OK</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"NPN, no overlap, use HTTP1.1\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>out</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>ALPN_HTTP_1_1</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>outlen</name> <operator>=</operator> <name>ALPN_HTTP_1_1_LENGTH</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>negnpn</name></name> <operator>=</operator> <name>CURL_HTTP_VERSION_1_1</name></expr>;</expr_stmt>

<return>return <expr><name>SSL_TLSEXT_ERR_OK</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_VERBOSE_STRINGS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>

<name>get_ssl_version_txt</name><parameter_list>(<parameter><decl><type><name>SSL</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>ssl</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="string">""</literal></expr>;</return></block_content></block></if></if_stmt>

<switch>switch<condition>(<expr><call><name>SSL_version</name><argument_list>(<argument><expr><name>ssl</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TLS1_3_VERSION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>TLS1_3_VERSION</name></expr>:</case>

<return>return <expr><literal type="string">"TLSv1.3"</literal></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPENSSL_VERSION_NUMBER</name> <operator>&gt;=</operator> <literal type="number">0x1000100FL</literal></expr></cpp:if>

<case>case <expr><name>TLS1_2_VERSION</name></expr>:</case>

<return>return <expr><literal type="string">"TLSv1.2"</literal></expr>;</return>

<case>case <expr><name>TLS1_1_VERSION</name></expr>:</case>

<return>return <expr><literal type="string">"TLSv1.1"</literal></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<case>case <expr><name>TLS1_VERSION</name></expr>:</case>

<return>return <expr><literal type="string">"TLSv1.0"</literal></expr>;</return>

<case>case <expr><name>SSL3_VERSION</name></expr>:</case>

<return>return <expr><literal type="string">"SSLv3"</literal></expr>;</return>

<case>case <expr><name>SSL2_VERSION</name></expr>:</case>

<return>return <expr><literal type="string">"SSLv2"</literal></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><literal type="string">"unknown"</literal></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>OPENSSL_VERSION_NUMBER</name> <operator>&gt;=</operator> <literal type="number">0x10100000L</literal><operator>)</operator></expr></cpp:if> 

<function><type><specifier>static</specifier> <name>CURLcode</name></type>

<name>set_ssl_version_min_max</name><parameter_list>(<parameter><decl><type><name>SSL_CTX</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>long</name></type> <name>curl_ssl_version_min</name> <init>= <expr><call><name>SSL_CONN_CONFIG</name><argument_list>(<argument><expr><name>version</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>curl_ssl_version_max</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OPENSSL_IS_BORINGSSL</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>LIBRESSL_VERSION_NUMBER</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>ossl_ssl_version_min</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>ossl_ssl_version_max</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>long</name></type> <name>ossl_ssl_version_min</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>ossl_ssl_version_max</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<switch>switch<condition>(<expr><name>curl_ssl_version_min</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>CURL_SSLVERSION_TLSv1</name></expr>:</case> 

<case>case <expr><name>CURL_SSLVERSION_TLSv1_0</name></expr>:</case>

<expr_stmt><expr><name>ossl_ssl_version_min</name> <operator>=</operator> <name>TLS1_VERSION</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>CURL_SSLVERSION_TLSv1_1</name></expr>:</case>

<expr_stmt><expr><name>ossl_ssl_version_min</name> <operator>=</operator> <name>TLS1_1_VERSION</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>CURL_SSLVERSION_TLSv1_2</name></expr>:</case>

<expr_stmt><expr><name>ossl_ssl_version_min</name> <operator>=</operator> <name>TLS1_2_VERSION</name></expr>;</expr_stmt>

<break>break;</break>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TLS1_3_VERSION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>CURL_SSLVERSION_TLSv1_3</name></expr>:</case>

<expr_stmt><expr><name>ossl_ssl_version_min</name> <operator>=</operator> <name>TLS1_3_VERSION</name></expr>;</expr_stmt>

<break>break;</break>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></switch>

<if_stmt><if>if<condition>(<expr><name>curl_ssl_version_min</name> <operator>!=</operator> <name>CURL_SSLVERSION_DEFAULT</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>SSL_CTX_set_min_proto_version</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>ossl_ssl_version_min</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>CURLE_SSL_CONNECT_ERROR</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>curl_ssl_version_max</name> <operator>=</operator> <call><name>SSL_CONN_CONFIG</name><argument_list>(<argument><expr><name>version_max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch<condition>(<expr><name>curl_ssl_version_max</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>CURL_SSLVERSION_MAX_TLSv1_0</name></expr>:</case>

<expr_stmt><expr><name>ossl_ssl_version_max</name> <operator>=</operator> <name>TLS1_VERSION</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>CURL_SSLVERSION_MAX_TLSv1_1</name></expr>:</case>

<expr_stmt><expr><name>ossl_ssl_version_max</name> <operator>=</operator> <name>TLS1_1_VERSION</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>CURL_SSLVERSION_MAX_TLSv1_2</name></expr>:</case>

<expr_stmt><expr><name>ossl_ssl_version_max</name> <operator>=</operator> <name>TLS1_2_VERSION</name></expr>;</expr_stmt>

<break>break;</break>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TLS1_3_VERSION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>CURL_SSLVERSION_MAX_TLSv1_3</name></expr>:</case>

<expr_stmt><expr><name>ossl_ssl_version_max</name> <operator>=</operator> <name>TLS1_3_VERSION</name></expr>;</expr_stmt>

<break>break;</break>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<case>case <expr><name>CURL_SSLVERSION_MAX_NONE</name></expr>:</case> 

<case>case <expr><name>CURL_SSLVERSION_MAX_DEFAULT</name></expr>:</case> 

<default>default:</default>

<expr_stmt><expr><name>ossl_ssl_version_max</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>SSL_CTX_set_max_proto_version</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>ossl_ssl_version_max</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>CURLE_SSL_CONNECT_ERROR</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OPENSSL_IS_BORINGSSL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><name>uint32_t</name></type> <name>ctx_option_t</name>;</typedef>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<typedef>typedef <type><name>long</name></type> <name>ctx_option_t</name>;</typedef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>OPENSSL_VERSION_NUMBER</name> <operator>&lt;</operator> <literal type="number">0x10100000L</literal><operator>)</operator></expr></cpp:if> 

<function><type><specifier>static</specifier> <name>CURLcode</name></type>

<name>set_ssl_version_min_max_legacy</name><parameter_list>(<parameter><decl><type><name>ctx_option_t</name> <modifier>*</modifier></type><name>ctx_options</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sockindex</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>OPENSSL_VERSION_NUMBER</name> <operator>&lt;</operator> <literal type="number">0x1000100FL</literal><operator>)</operator> <operator>||</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>TLS1_3_VERSION</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>long</name></type> <name>ssl_version</name> <init>= <expr><call><name>SSL_CONN_CONFIG</name><argument_list>(<argument><expr><name>version</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>ssl_version_max</name> <init>= <expr><call><name>SSL_CONN_CONFIG</name><argument_list>(<argument><expr><name>version_max</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch<condition>(<expr><name>ssl_version</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>CURL_SSLVERSION_TLSv1_3</name></expr>:</case>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TLS1_3_VERSION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>ssl_connect_data</name></name> <modifier>*</modifier></type><name>connssl</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>ssl</name><index>[<expr><name>sockindex</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>SSL_CTX_set_max_proto_version</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name>TLS1_3_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>ctx_options</name> <operator>|=</operator> <name>SSL_OP_NO_TLSv1_2</name></expr>;</expr_stmt>

</block_content>}</block>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>sockindex</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>ctx_options</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>OSSL_PACKAGE</name> <literal type="string">" was built without TLS 1.3 support"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_NOT_BUILT_IN</name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<case>case <expr><name>CURL_SSLVERSION_TLSv1_2</name></expr>:</case>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPENSSL_VERSION_NUMBER</name> <operator>&gt;=</operator> <literal type="number">0x1000100FL</literal></expr></cpp:if>

<expr_stmt><expr><operator>*</operator><name>ctx_options</name> <operator>|=</operator> <name>SSL_OP_NO_TLSv1_1</name></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>OSSL_PACKAGE</name> <literal type="string">" was built without TLS 1.2 support"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_NOT_BUILT_IN</name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<case>case <expr><name>CURL_SSLVERSION_TLSv1_1</name></expr>:</case>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPENSSL_VERSION_NUMBER</name> <operator>&gt;=</operator> <literal type="number">0x1000100FL</literal></expr></cpp:if>

<expr_stmt><expr><operator>*</operator><name>ctx_options</name> <operator>|=</operator> <name>SSL_OP_NO_TLSv1</name></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>OSSL_PACKAGE</name> <literal type="string">" was built without TLS 1.1 support"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_NOT_BUILT_IN</name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<case>case <expr><name>CURL_SSLVERSION_TLSv1_0</name></expr>:</case>

<case>case <expr><name>CURL_SSLVERSION_TLSv1</name></expr>:</case>

<break>break;</break>

</block_content>}</block></switch>

<switch>switch<condition>(<expr><name>ssl_version_max</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>CURL_SSLVERSION_MAX_TLSv1_0</name></expr>:</case>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPENSSL_VERSION_NUMBER</name> <operator>&gt;=</operator> <literal type="number">0x1000100FL</literal></expr></cpp:if>

<expr_stmt><expr><operator>*</operator><name>ctx_options</name> <operator>|=</operator> <name>SSL_OP_NO_TLSv1_1</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<case>case <expr><name>CURL_SSLVERSION_MAX_TLSv1_1</name></expr>:</case>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPENSSL_VERSION_NUMBER</name> <operator>&gt;=</operator> <literal type="number">0x1000100FL</literal></expr></cpp:if>

<expr_stmt><expr><operator>*</operator><name>ctx_options</name> <operator>|=</operator> <name>SSL_OP_NO_TLSv1_2</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<case>case <expr><name>CURL_SSLVERSION_MAX_TLSv1_2</name></expr>:</case>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TLS1_3_VERSION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><operator>*</operator><name>ctx_options</name> <operator>|=</operator> <name>SSL_OP_NO_TLSv1_3</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<break>break;</break>

<case>case <expr><name>CURL_SSLVERSION_MAX_TLSv1_3</name></expr>:</case>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TLS1_3_VERSION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<break>break;</break>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>OSSL_PACKAGE</name> <literal type="string">" was built without TLS 1.3 support"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_NOT_BUILT_IN</name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></switch>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ossl_new_session_cb</name><parameter_list>(<parameter><decl><type><name>SSL</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter>, <parameter><decl><type><name>SSL_SESSION</name> <modifier>*</modifier></type><name>ssl_sessionid</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sockindex</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>curl_socket_t</name> <modifier>*</modifier></type><name>sockindex_ptr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>connectdata_idx</name> <init>= <expr><call><name>ossl_get_ssl_conn_index</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sockindex_idx</name> <init>= <expr><call><name>ossl_get_ssl_sockindex_index</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>connectdata_idx</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>sockindex_idx</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>conn</name> <operator>=</operator> <operator>(</operator>struct <name>connectdata</name><operator>*</operator><operator>)</operator> <call><name>SSL_get_ex_data</name><argument_list>(<argument><expr><name>ssl</name></expr></argument>, <argument><expr><name>connectdata_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>conn</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>data</name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>sockindex_ptr</name> <operator>=</operator> <operator>(</operator><name>curl_socket_t</name><operator>*</operator><operator>)</operator> <call><name>SSL_get_ex_data</name><argument_list>(<argument><expr><name>ssl</name></expr></argument>, <argument><expr><name>sockindex_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sockindex</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>sockindex_ptr</name> <operator>-</operator> <name><name>conn</name><operator>-&gt;</operator><name>sock</name></name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>SSL_SET_OPTION</name><argument_list>(<argument><expr><name><name>primary</name><operator>.</operator><name>sessionid</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>incache</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>old_ssl_sessionid</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>Curl_ssl_sessionid_lock</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>incache</name> <operator>=</operator> <operator>!</operator><operator>(</operator><call><name>Curl_ssl_getsessionid</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>old_ssl_sessionid</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><name>sockindex</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>incache</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>old_ssl_sessionid</name> <operator>!=</operator> <name>ssl_sessionid</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"old SSL session ID is stale, removing\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_ssl_delsessionid</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>old_ssl_sessionid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>incache</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>incache</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>Curl_ssl_addsessionid</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>ssl_sessionid</name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument> , <argument><expr><name>sockindex</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"failed to store ssl session"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>Curl_ssl_sessionid_unlock</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>ossl_connect_step1</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sockindex</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ciphers</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SSL_METHOD_QUAL</name> <name>SSL_METHOD</name> <modifier>*</modifier></type><name>req_method</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>X509_LOOKUP</name> <modifier>*</modifier></type><name>lookup</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>curl_socket_t</name></type> <name>sockfd</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>sock</name><index>[<expr><name>sockindex</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ssl_connect_data</name></name> <modifier>*</modifier></type><name>connssl</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>ssl</name><index>[<expr><name>sockindex</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ctx_option_t</name></type> <name>ctx_options</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SSL_CTRL_SET_TLSEXT_HOSTNAME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>bool</name></type> <name>sni</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>hostname</name> <init>= <expr><ternary><condition><expr><call><name>SSL_IS_PROXY</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><name><name>conn</name><operator>-&gt;</operator><name>http_proxy</name><operator>.</operator><name>host</name><operator>.</operator><name>name</name></name></expr> </then><else>:

<expr><name><name>conn</name><operator>-&gt;</operator><name>host</name><operator>.</operator><name>name</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_IPV6</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name><name>struct</name> <name>in6_addr</name></name></type> <name>addr</name></decl>;</decl_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name><name>struct</name> <name>in_addr</name></name></type> <name>addr</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>long</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>certverifyresult</name> <init>= <expr><ternary><condition><expr><call><name>SSL_IS_PROXY</name><argument_list>()</argument_list></call></expr> ?</condition><then>

<expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>proxy_ssl</name><operator>.</operator><name>certverifyresult</name></name></expr> </then><else>: <expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>ssl</name><operator>.</operator><name>certverifyresult</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>long</name> <name>int</name></type> <name>ssl_version</name> <init>= <expr><call><name>SSL_CONN_CONFIG</name><argument_list>(<argument><expr><name>version</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_TLS_SRP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>enum</name> <name>CURL_TLSAUTH</name></name></type> <name>ssl_authtype</name> <init>= <expr><call><name>SSL_SET_OPTION</name><argument_list>(<argument><expr><name>authtype</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>ssl_cert</name> <init>= <expr><call><name>SSL_SET_OPTION</name><argument_list>(<argument><expr><name>cert</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>ssl_cert_type</name> <init>= <expr><call><name>SSL_SET_OPTION</name><argument_list>(<argument><expr><name>cert_type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>ssl_cafile</name> <init>= <expr><call><name>SSL_CONN_CONFIG</name><argument_list>(<argument><expr><name>CAfile</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>ssl_capath</name> <init>= <expr><call><name>SSL_CONN_CONFIG</name><argument_list>(<argument><expr><name>CApath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>verifypeer</name> <init>= <expr><call><name>SSL_CONN_CONFIG</name><argument_list>(<argument><expr><name>verifypeer</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>ssl_crlfile</name> <init>= <expr><call><name>SSL_SET_OPTION</name><argument_list>(<argument><expr><name>CRLfile</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>error_buffer</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ssl_backend_data</name></name> <modifier>*</modifier></type><name>backend</name> <init>= <expr><name><name>connssl</name><operator>-&gt;</operator><name>backend</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DEBUGASSERT</name><argument_list>(<argument><expr><name>ssl_connect_1</name> <operator>==</operator> <name><name>connssl</name><operator>-&gt;</operator><name>connecting_state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_ossl_seed</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>certverifyresult</name> <operator>=</operator> <operator>!</operator><name>X509_V_OK</name></expr>;</expr_stmt>

<switch>switch<condition>(<expr><name>ssl_version</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>CURL_SSLVERSION_DEFAULT</name></expr>:</case>

<case>case <expr><name>CURL_SSLVERSION_TLSv1</name></expr>:</case>

<case>case <expr><name>CURL_SSLVERSION_TLSv1_0</name></expr>:</case>

<case>case <expr><name>CURL_SSLVERSION_TLSv1_1</name></expr>:</case>

<case>case <expr><name>CURL_SSLVERSION_TLSv1_2</name></expr>:</case>

<case>case <expr><name>CURL_SSLVERSION_TLSv1_3</name></expr>:</case>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>OPENSSL_VERSION_NUMBER</name> <operator>&gt;=</operator> <literal type="number">0x10100000L</literal><operator>)</operator></expr></cpp:if>

<expr_stmt><expr><name>req_method</name> <operator>=</operator> <call><name>TLS_client_method</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name>req_method</name> <operator>=</operator> <call><name>SSLv23_client_method</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>use_sni</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>CURL_SSLVERSION_SSLv2</name></expr>:</case>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OPENSSL_NO_SSL2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>OSSL_PACKAGE</name> <literal type="string">" was built without SSLv2 support"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_NOT_BUILT_IN</name></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_TLS_SRP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name>ssl_authtype</name> <operator>==</operator> <name>CURL_TLSAUTH_SRP</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_SSL_CONNECT_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>req_method</name> <operator>=</operator> <call><name>SSLv2_client_method</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>use_sni</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<case>case <expr><name>CURL_SSLVERSION_SSLv3</name></expr>:</case>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OPENSSL_NO_SSL3_METHOD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>OSSL_PACKAGE</name> <literal type="string">" was built without SSLv3 support"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_NOT_BUILT_IN</name></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_TLS_SRP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name>ssl_authtype</name> <operator>==</operator> <name>CURL_TLSAUTH_SRP</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_SSL_CONNECT_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>req_method</name> <operator>=</operator> <call><name>SSLv3_client_method</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>use_sni</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<default>default:</default>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Unrecognized parameter passed via CURLOPT_SSLVERSION"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_SSL_CONNECT_ERROR</name></expr>;</return>

</block_content>}</block></switch>

<if_stmt><if>if<condition>(<expr><name><name>backend</name><operator>-&gt;</operator><name>ctx</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>SSL_CTX_free</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>backend</name><operator>-&gt;</operator><name>ctx</name></name> <operator>=</operator> <call><name>SSL_CTX_new</name><argument_list>(<argument><expr><name>req_method</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>backend</name><operator>-&gt;</operator><name>ctx</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"SSL: couldn't create a context: %s"</literal></expr></argument>,

<argument><expr><call><name>ossl_strerror</name><argument_list>(<argument><expr><call><name>ERR_peek_error</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>error_buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>error_buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SSL_MODE_RELEASE_BUFFERS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>SSL_CTX_set_mode</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name>SSL_MODE_RELEASE_BUFFERS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SSL_CTRL_SET_MSG_CALLBACK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>fdebug</name></name> <operator>&amp;&amp;</operator> <name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>verbose</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>SSL_CTX_set_msg_callback</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name>ssl_tls_trace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SSL_CTX_set_msg_callback_arg</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>ctx_options</name> <operator>=</operator> <name>SSL_OP_ALL</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SSL_OP_NO_TICKET</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>ctx_options</name> <operator>|=</operator> <name>SSL_OP_NO_TICKET</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SSL_OP_NO_COMPRESSION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>ctx_options</name> <operator>|=</operator> <name>SSL_OP_NO_COMPRESSION</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SSL_OP_NETSCAPE_REUSE_CIPHER_CHANGE_BUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>ctx_options</name> <operator>&amp;=</operator> <operator>~</operator><name>SSL_OP_NETSCAPE_REUSE_CIPHER_CHANGE_BUG</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>SSL_SET_OPTION</name><argument_list>(<argument><expr><name>enable_beast</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ctx_options</name> <operator>&amp;=</operator> <operator>~</operator><name>SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<switch>switch<condition>(<expr><name>ssl_version</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>CURL_SSLVERSION_SSLv2</name></expr>:</case>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPENSSL_VERSION_NUMBER</name> <operator>&gt;=</operator> <literal type="number">0x10100000L</literal></expr></cpp:if> 

<expr_stmt><expr><call><name>SSL_CTX_set_min_proto_version</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name>SSL2_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SSL_CTX_set_max_proto_version</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name>SSL2_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name>ctx_options</name> <operator>|=</operator> <name>SSL_OP_NO_SSLv3</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ctx_options</name> <operator>|=</operator> <name>SSL_OP_NO_TLSv1</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPENSSL_VERSION_NUMBER</name> <operator>&gt;=</operator> <literal type="number">0x1000100FL</literal></expr></cpp:if>

<expr_stmt><expr><name>ctx_options</name> <operator>|=</operator> <name>SSL_OP_NO_TLSv1_1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ctx_options</name> <operator>|=</operator> <name>SSL_OP_NO_TLSv1_2</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TLS1_3_VERSION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>ctx_options</name> <operator>|=</operator> <name>SSL_OP_NO_TLSv1_3</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<break>break;</break>

<case>case <expr><name>CURL_SSLVERSION_SSLv3</name></expr>:</case>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPENSSL_VERSION_NUMBER</name> <operator>&gt;=</operator> <literal type="number">0x10100000L</literal></expr></cpp:if> 

<expr_stmt><expr><call><name>SSL_CTX_set_min_proto_version</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name>SSL3_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SSL_CTX_set_max_proto_version</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name>SSL3_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name>ctx_options</name> <operator>|=</operator> <name>SSL_OP_NO_SSLv2</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ctx_options</name> <operator>|=</operator> <name>SSL_OP_NO_TLSv1</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPENSSL_VERSION_NUMBER</name> <operator>&gt;=</operator> <literal type="number">0x1000100FL</literal></expr></cpp:if>

<expr_stmt><expr><name>ctx_options</name> <operator>|=</operator> <name>SSL_OP_NO_TLSv1_1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ctx_options</name> <operator>|=</operator> <name>SSL_OP_NO_TLSv1_2</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TLS1_3_VERSION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>ctx_options</name> <operator>|=</operator> <name>SSL_OP_NO_TLSv1_3</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<break>break;</break>

<case>case <expr><name>CURL_SSLVERSION_DEFAULT</name></expr>:</case>

<case>case <expr><name>CURL_SSLVERSION_TLSv1</name></expr>:</case> 

<case>case <expr><name>CURL_SSLVERSION_TLSv1_0</name></expr>:</case> 

<case>case <expr><name>CURL_SSLVERSION_TLSv1_1</name></expr>:</case> 

<case>case <expr><name>CURL_SSLVERSION_TLSv1_2</name></expr>:</case> 

<case>case <expr><name>CURL_SSLVERSION_TLSv1_3</name></expr>:</case> 

<expr_stmt><expr><name>ctx_options</name> <operator>|=</operator> <name>SSL_OP_NO_SSLv2</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ctx_options</name> <operator>|=</operator> <name>SSL_OP_NO_SSLv3</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>OPENSSL_VERSION_NUMBER</name> <operator>&gt;=</operator> <literal type="number">0x10100000L</literal><operator>)</operator></expr></cpp:if> 

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>set_ssl_version_min_max</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>set_ssl_version_min_max_legacy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx_options</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><name>sockindex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if<condition>(<expr><name>result</name> <operator>!=</operator> <name>CURLE_OK</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Unrecognized parameter passed via CURLOPT_SSLVERSION"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_SSL_CONNECT_ERROR</name></expr>;</return>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>SSL_CTX_set_options</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name>ctx_options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAS_NPN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>tls_enable_npn</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>SSL_CTX_set_next_proto_select_cb</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name>select_next_proto_cb</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAS_ALPN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>tls_enable_alpn</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>cur</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>protocols</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_NGHTTP2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>httpversion</name></name> <operator>&gt;=</operator> <name>CURL_HTTP_VERSION_2</name> <operator>&amp;&amp;</operator>

<operator>(</operator><operator>!</operator><call><name>SSL_IS_PROXY</name><argument_list>()</argument_list></call> <operator>||</operator> <operator>!</operator><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>tunnel_proxy</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>protocols</name><index>[<expr><name>cur</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>NGHTTP2_PROTO_VERSION_ID_LEN</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>protocols</name><index>[<expr><name>cur</name></expr>]</index></name></expr></argument>, <argument><expr><name>NGHTTP2_PROTO_VERSION_ID</name></expr></argument>,

<argument><expr><name>NGHTTP2_PROTO_VERSION_ID_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cur</name> <operator>+=</operator> <name>NGHTTP2_PROTO_VERSION_ID_LEN</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"ALPN, offering %s\n"</literal></expr></argument>, <argument><expr><name>NGHTTP2_PROTO_VERSION_ID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>protocols</name><index>[<expr><name>cur</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>ALPN_HTTP_1_1_LENGTH</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>protocols</name><index>[<expr><name>cur</name></expr>]</index></name></expr></argument>, <argument><expr><name>ALPN_HTTP_1_1</name></expr></argument>, <argument><expr><name>ALPN_HTTP_1_1_LENGTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cur</name> <operator>+=</operator> <name>ALPN_HTTP_1_1_LENGTH</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"ALPN, offering %s\n"</literal></expr></argument>, <argument><expr><name>ALPN_HTTP_1_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SSL_CTX_set_alpn_protos</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name>protocols</name></expr></argument>, <argument><expr><name>cur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if<condition>(<expr><name>ssl_cert</name> <operator>||</operator> <name>ssl_cert_type</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>cert_stuff</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>backend</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name>ssl_cert</name></expr></argument>, <argument><expr><name>ssl_cert_type</name></expr></argument>,

<argument><expr><call><name>SSL_SET_OPTION</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>SSL_SET_OPTION</name><argument_list>(<argument><expr><name>key_type</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>SSL_SET_OPTION</name><argument_list>(<argument><expr><name>key_passwd</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>CURLE_SSL_CERTPROBLEM</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ciphers</name> <operator>=</operator> <call><name>SSL_CONN_CONFIG</name><argument_list>(<argument><expr><name>cipher_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>ciphers</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ciphers</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>DEFAULT_CIPHER_SELECTION</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>ciphers</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>SSL_CTX_set_cipher_list</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name>ciphers</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"failed setting cipher list: %s"</literal></expr></argument>, <argument><expr><name>ciphers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_SSL_CIPHER</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Cipher selection: %s\n"</literal></expr></argument>, <argument><expr><name>ciphers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SSL_CTX_SET_CIPHERSUITES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ciphers13</name> <init>= <expr><call><name>SSL_CONN_CONFIG</name><argument_list>(<argument><expr><name>cipher_list13</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>ciphers13</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>SSL_CTX_set_ciphersuites</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name>ciphers13</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"failed setting TLS 1.3 cipher suite: %s"</literal></expr></argument>, <argument><expr><name>ciphers13</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_SSL_CIPHER</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"TLS 1.3 cipher selection: %s\n"</literal></expr></argument>, <argument><expr><name>ciphers13</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SSL_CTX_SET_POST_HANDSHAKE_AUTH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>SSL_CTX_set_post_handshake_auth</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_TLS_SRP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name>ssl_authtype</name> <operator>==</operator> <name>CURL_TLSAUTH_SRP</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>ssl_username</name> <init>= <expr><call><name>SSL_SET_OPTION</name><argument_list>(<argument><expr><name>username</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Using TLS-SRP username: %s\n"</literal></expr></argument>, <argument><expr><name>ssl_username</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>SSL_CTX_set_srp_username</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name>ssl_username</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Unable to set SRP user name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_BAD_FUNCTION_ARGUMENT</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>SSL_CTX_set_srp_password</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><call><name>SSL_SET_OPTION</name><argument_list>(<argument><expr><name>password</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"failed setting SRP password"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_BAD_FUNCTION_ARGUMENT</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>SSL_CONN_CONFIG</name><argument_list>(<argument><expr><name>cipher_list</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Setting cipher list SRP\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>SSL_CTX_set_cipher_list</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><literal type="string">"SRP"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"failed setting SRP cipher list"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_SSL_CIPHER</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OPENSSL_VERSION_MAJOR</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>OPENSSL_VERSION_MAJOR</name> <operator>&gt;=</operator> <literal type="number">3</literal><operator>)</operator></expr></cpp:if>

<if_stmt><if>if<condition>(<expr><name>ssl_cafile</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>SSL_CTX_load_verify_file</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name>ssl_cafile</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>verifypeer</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"error setting certificate file: %s"</literal></expr></argument>, <argument><expr><name>ssl_cafile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_SSL_CACERT_BADFILE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"error setting certificate file, continuing anyway\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">" CAfile: %s\n"</literal></expr></argument>, <argument><expr><name>ssl_cafile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>ssl_capath</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>SSL_CTX_load_verify_dir</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name>ssl_capath</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>verifypeer</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"error setting certificate path: %s"</literal></expr></argument>, <argument><expr><name>ssl_capath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_SSL_CACERT_BADFILE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"error setting certificate path, continuing anyway\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">" CApath: %s\n"</literal></expr></argument>, <argument><expr><name>ssl_capath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<if_stmt><if>if<condition>(<expr><name>ssl_cafile</name> <operator>||</operator> <name>ssl_capath</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>SSL_CTX_load_verify_locations</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name>ssl_cafile</name></expr></argument>, <argument><expr><name>ssl_capath</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>verifypeer</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"error setting certificate verify locations:\n"</literal>

<literal type="string">" CAfile: %s\n CApath: %s"</literal></expr></argument>,

<argument><expr><ternary><condition><expr><name>ssl_cafile</name></expr> ?</condition><then> <expr><name>ssl_cafile</name></expr> </then><else>: <expr><literal type="string">"none"</literal></expr></else></ternary></expr></argument>,

<argument><expr><ternary><condition><expr><name>ssl_capath</name></expr> ?</condition><then> <expr><name>ssl_capath</name></expr> </then><else>: <expr><literal type="string">"none"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_SSL_CACERT_BADFILE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"error setting certificate verify locations,"</literal>

<literal type="string">" continuing anyway:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"successfully set certificate verify locations:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>,

<argument><expr><literal type="string">" CAfile: %s\n"</literal>

<literal type="string">" CApath: %s\n"</literal></expr></argument>,

<argument><expr><ternary><condition><expr><name>ssl_cafile</name></expr> ?</condition><then> <expr><name>ssl_cafile</name></expr> </then><else>: <expr><literal type="string">"none"</literal></expr></else></ternary></expr></argument>,

<argument><expr><ternary><condition><expr><name>ssl_capath</name></expr> ?</condition><then> <expr><name>ssl_capath</name></expr> </then><else>: <expr><literal type="string">"none"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CURL_CA_FALLBACK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if<condition>(<expr><name>verifypeer</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>SSL_CTX_set_default_verify_paths</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if<condition>(<expr><name>ssl_crlfile</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>lookup</name> <operator>=</operator> <call><name>X509_STORE_add_lookup</name><argument_list>(<argument><expr><call><name>SSL_CTX_get_cert_store</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>X509_LOOKUP_file</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>lookup</name> <operator>||</operator>

<operator>(</operator><operator>!</operator><call><name>X509_load_crl_file</name><argument_list>(<argument><expr><name>lookup</name></expr></argument>, <argument><expr><name>ssl_crlfile</name></expr></argument>, <argument><expr><name>X509_FILETYPE_PEM</name></expr></argument>)</argument_list></call><operator>)</operator></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"error loading CRL file: %s"</literal></expr></argument>, <argument><expr><name>ssl_crlfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_SSL_CRL_BADFILE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"successfully load CRL file:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>X509_STORE_set_flags</name><argument_list>(<argument><expr><call><name>SSL_CTX_get_cert_store</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>X509_V_FLAG_CRL_CHECK</name><operator>|</operator><name>X509_V_FLAG_CRL_CHECK_ALL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">" CRLfile: %s\n"</literal></expr></argument>, <argument><expr><name>ssl_crlfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>verifypeer</name></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>X509_V_FLAG_TRUSTED_FIRST</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>X509_V_FLAG_NO_ALT_CHAINS</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>X509_STORE_set_flags</name><argument_list>(<argument><expr><call><name>SSL_CTX_get_cert_store</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>X509_V_FLAG_TRUSTED_FIRST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>X509_V_FLAG_PARTIAL_CHAIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>SSL_SET_OPTION</name><argument_list>(<argument><expr><name>no_partialchain</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>X509_STORE_set_flags</name><argument_list>(<argument><expr><call><name>SSL_CTX_get_cert_store</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>X509_V_FLAG_PARTIAL_CHAIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>SSL_CTX_set_verify</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>,

<argument><expr><ternary><condition><expr><name>verifypeer</name></expr> ?</condition><then> <expr><name>SSL_VERIFY_PEER</name></expr> </then><else>: <expr><name>SSL_VERIFY_NONE</name></expr></else></ternary></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_SSLKEYLOGFILE</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_KEYLOG_CALLBACK</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if<condition>(<expr><name>keylog_file_fp</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>SSL_CTX_set_keylog_callback</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name>ossl_keylog_callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>SSL_CTX_set_session_cache_mode</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>,

<argument><expr><name>SSL_SESS_CACHE_CLIENT</name> <operator>|</operator> <name>SSL_SESS_CACHE_NO_INTERNAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SSL_CTX_sess_set_new_cb</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name>ossl_new_session_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>ssl</name><operator>.</operator><name>fsslctx</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>Curl_set_in_callback</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call>(<modifier>*</modifier><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>ssl</name><operator>.</operator><name>fsslctx</name></name>)<argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>backend</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>,

<argument><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>ssl</name><operator>.</operator><name>fsslctxp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_set_in_callback</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"error signaled by ssl ctx callback"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>backend</name><operator>-&gt;</operator><name>handle</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>SSL_free</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>backend</name><operator>-&gt;</operator><name>handle</name></name> <operator>=</operator> <call><name>SSL_new</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>backend</name><operator>-&gt;</operator><name>handle</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"SSL: couldn't create a context (handle)!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>OPENSSL_VERSION_NUMBER</name> <operator>&gt;=</operator> <literal type="number">0x0090808fL</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>OPENSSL_NO_TLSEXT</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>OPENSSL_NO_OCSP</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if<condition>(<expr><call><name>SSL_CONN_CONFIG</name><argument_list>(<argument><expr><name>verifystatus</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>SSL_set_tlsext_status_type</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>, <argument><expr><name>TLSEXT_STATUSTYPE_ocsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OPENSSL_IS_BORINGSSL</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>ALLOW_RENEG</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>SSL_set_renegotiate_mode</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>, <argument><expr><name>ssl_renegotiate_freely</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>SSL_set_connect_state</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>backend</name><operator>-&gt;</operator><name>server_cert</name></name> <operator>=</operator> <literal type="number">0x0</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SSL_CTRL_SET_TLSEXT_HOSTNAME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><operator>(</operator><literal type="number">0</literal> <operator>==</operator> <call><name>Curl_inet_pton</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><name>hostname</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_IPV6</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>(</operator><literal type="number">0</literal> <operator>==</operator> <call><name>Curl_inet_pton</name><argument_list>(<argument><expr><name>AF_INET6</name></expr></argument>, <argument><expr><name>hostname</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>sni</name> <operator>&amp;&amp;</operator>

<operator>!</operator><call><name>SSL_set_tlsext_host_name</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>, <argument><expr><name>hostname</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"WARNING: failed to configure server name indication (SNI) "</literal>

<literal type="string">"TLS extension\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if<condition>(<expr><call><name>SSL_SET_OPTION</name><argument_list>(<argument><expr><name><name>primary</name><operator>.</operator><name>sessionid</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ssl_sessionid</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>connectdata_idx</name> <init>= <expr><call><name>ossl_get_ssl_conn_index</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sockindex_idx</name> <init>= <expr><call><name>ossl_get_ssl_sockindex_index</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>connectdata_idx</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>sockindex_idx</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>SSL_set_ex_data</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>, <argument><expr><name>connectdata_idx</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SSL_set_ex_data</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>, <argument><expr><name>sockindex_idx</name></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>sock</name></name> <operator>+</operator> <name>sockindex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>Curl_ssl_sessionid_lock</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>Curl_ssl_getsessionid</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ssl_sessionid</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>sockindex</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>SSL_set_session</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>, <argument><expr><name>ssl_sessionid</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>Curl_ssl_sessionid_unlock</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"SSL: SSL_set_session failed: %s"</literal></expr></argument>,

<argument><expr><call><name>ossl_strerror</name><argument_list>(<argument><expr><call><name>ERR_get_error</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>error_buffer</name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>error_buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_SSL_CONNECT_ERROR</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"SSL re-using session ID\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>Curl_ssl_sessionid_unlock</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>proxy_ssl</name><index>[<expr><name>sockindex</name></expr>]</index></name><operator>.</operator><name>use</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>BIO</name> <modifier>*</modifier><specifier>const</specifier></type> <name>bio</name> <init>= <expr><call><name>BIO_new</name><argument_list>(<argument><expr><call><name>BIO_f_ssl</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SSL</name> <modifier>*</modifier></type><name>handle</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>proxy_ssl</name><index>[<expr><name>sockindex</name></expr>]</index></name><operator>.</operator><name><name>backend</name><operator>-&gt;</operator><name>handle</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DEBUGASSERT</name><argument_list>(<argument><expr><name>ssl_connection_complete</name> <operator>==</operator> <name><name>conn</name><operator>-&gt;</operator><name>proxy_ssl</name><index>[<expr><name>sockindex</name></expr>]</index></name><operator>.</operator><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DEBUGASSERT</name><argument_list>(<argument><expr><name>handle</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DEBUGASSERT</name><argument_list>(<argument><expr><name>bio</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BIO_set_ssl</name><argument_list>(<argument><expr><name>bio</name></expr></argument>, <argument><expr><name>handle</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SSL_set_bio</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>, <argument><expr><name>bio</name></expr></argument>, <argument><expr><name>bio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><operator>!</operator><call><name>SSL_set_fd</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>sockfd</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"SSL: SSL_set_fd failed: %s"</literal></expr></argument>,

<argument><expr><call><name>ossl_strerror</name><argument_list>(<argument><expr><call><name>ERR_get_error</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>error_buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>error_buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_SSL_CONNECT_ERROR</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>connssl</name><operator>-&gt;</operator><name>connecting_state</name></name> <operator>=</operator> <name>ssl_connect_2</name></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>ossl_connect_step2</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sockindex</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ssl_connect_data</name></name> <modifier>*</modifier></type><name>connssl</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>ssl</name><index>[<expr><name>sockindex</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>certverifyresult</name> <init>= <expr><ternary><condition><expr><call><name>SSL_IS_PROXY</name><argument_list>()</argument_list></call></expr> ?</condition><then>

<expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>proxy_ssl</name><operator>.</operator><name>certverifyresult</name></name></expr> </then><else>: <expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>ssl</name><operator>.</operator><name>certverifyresult</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ssl_backend_data</name></name> <modifier>*</modifier></type><name>backend</name> <init>= <expr><name><name>connssl</name><operator>-&gt;</operator><name>backend</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DEBUGASSERT</name><argument_list>(<argument><expr><name>ssl_connect_2</name> <operator>==</operator> <name><name>connssl</name><operator>-&gt;</operator><name>connecting_state</name></name>

<operator>||</operator> <name>ssl_connect_2_reading</name> <operator>==</operator> <name><name>connssl</name><operator>-&gt;</operator><name>connecting_state</name></name>

<operator>||</operator> <name>ssl_connect_2_writing</name> <operator>==</operator> <name><name>connssl</name><operator>-&gt;</operator><name>connecting_state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ERR_clear_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>SSL_connect</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_SSLKEYLOGFILE</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_KEYLOG_CALLBACK</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>tap_ssl_key</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>backend</name><operator>-&gt;</operator><name>tap_state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if<condition>(<expr><literal type="number">1</literal> <operator>!=</operator> <name>err</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>detail</name> <init>= <expr><call><name>SSL_get_error</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>SSL_ERROR_WANT_READ</name> <operator>==</operator> <name>detail</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>connssl</name><operator>-&gt;</operator><name>connecting_state</name></name> <operator>=</operator> <name>ssl_connect_2_reading</name></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>SSL_ERROR_WANT_WRITE</name> <operator>==</operator> <name>detail</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>connssl</name><operator>-&gt;</operator><name>connecting_state</name></name> <operator>=</operator> <name>ssl_connect_2_writing</name></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SSL_ERROR_WANT_ASYNC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name>SSL_ERROR_WANT_ASYNC</name> <operator>==</operator> <name>detail</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>connssl</name><operator>-&gt;</operator><name>connecting_state</name></name> <operator>=</operator> <name>ssl_connect_2</name></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

</block_content>}</block></if>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<else>else <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>errdetail</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>error_buffer</name><index>[<expr><literal type="number">256</literal></expr>]</index></name><init>=<expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>lerr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>lib</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>reason</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>connssl</name><operator>-&gt;</operator><name>connecting_state</name></name> <operator>=</operator> <name>ssl_connect_2</name></expr>;</expr_stmt>

<expr_stmt><expr><name>errdetail</name> <operator>=</operator> <call><name>ERR_get_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lib</name> <operator>=</operator> <call><name>ERR_GET_LIB</name><argument_list>(<argument><expr><name>errdetail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>reason</name> <operator>=</operator> <call><name>ERR_GET_REASON</name><argument_list>(<argument><expr><name>errdetail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>lib</name> <operator>==</operator> <name>ERR_LIB_SSL</name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name>reason</name> <operator>==</operator> <name>SSL_R_CERTIFICATE_VERIFY_FAILED</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_PEER_FAILED_VERIFICATION</name></expr>;</expr_stmt>

<expr_stmt><expr><name>lerr</name> <operator>=</operator> <call><name>SSL_get_verify_result</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>lerr</name> <operator>!=</operator> <name>X509_V_OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>certverifyresult</name> <operator>=</operator> <name>lerr</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msnprintf</name><argument_list>(<argument><expr><name>error_buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>error_buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><literal type="string">"SSL certificate problem: %s"</literal></expr></argument>,

<argument><expr><call><name>X509_verify_cert_error_string</name><argument_list>(<argument><expr><name>lerr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>error_buffer</name></expr></argument>, <argument><expr><literal type="string">"SSL certificate verification failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_SSL_CONNECT_ERROR</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ossl_strerror</name><argument_list>(<argument><expr><name>errdetail</name></expr></argument>, <argument><expr><name>error_buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>error_buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name>CURLE_SSL_CONNECT_ERROR</name> <operator>==</operator> <name>result</name> <operator>&amp;&amp;</operator> <name>errdetail</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>hostname</name> <init>= <expr><ternary><condition><expr><call><name>SSL_IS_PROXY</name><argument_list>()</argument_list></call></expr> ?</condition><then>

<expr><name><name>conn</name><operator>-&gt;</operator><name>http_proxy</name><operator>.</operator><name>host</name><operator>.</operator><name>name</name></name></expr> </then><else>: <expr><name><name>conn</name><operator>-&gt;</operator><name>host</name><operator>.</operator><name>name</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>long</name> <name>int</name></type> <name>port</name> <init>= <expr><ternary><condition><expr><call><name>SSL_IS_PROXY</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><name><name>conn</name><operator>-&gt;</operator><name>port</name></name></expr> </then><else>: <expr><name><name>conn</name><operator>-&gt;</operator><name>remote_port</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>extramsg</name><index>[<expr><literal type="number">80</literal></expr>]</index></name><init>=<expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sockerr</name> <init>= <expr><name>SOCKERRNO</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>sockerr</name> <operator>&amp;&amp;</operator> <name>detail</name> <operator>==</operator> <name>SSL_ERROR_SYSCALL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>Curl_strerror</name><argument_list>(<argument><expr><name>sockerr</name></expr></argument>, <argument><expr><name>extramsg</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>extramsg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>OSSL_PACKAGE</name> <literal type="string">" SSL_connect: %s in connection to %s:%ld "</literal></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>extramsg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> ?</condition><then> <expr><name>extramsg</name></expr> </then><else>: <expr><call><name>SSL_ERROR_to_str</name><argument_list>(<argument><expr><name>detail</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>,

<argument><expr><name>hostname</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>error_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name><name>connssl</name><operator>-&gt;</operator><name>connecting_state</name></name> <operator>=</operator> <name>ssl_connect_3</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"SSL connection using %s / %s\n"</literal></expr></argument>,

<argument><expr><call><name>get_ssl_version_txt</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>SSL_get_cipher</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAS_ALPN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>tls_enable_alpn</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>neg_protocol</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>len</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>SSL_get0_alpn_selected</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>neg_protocol</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>len</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"ALPN, server accepted to use %.*s\n"</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>neg_protocol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_NGHTTP2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name>len</name> <operator>==</operator> <name>NGHTTP2_PROTO_VERSION_ID_LEN</name> <operator>&amp;&amp;</operator>

<operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name>NGHTTP2_PROTO_VERSION_ID</name></expr></argument>, <argument><expr><name>neg_protocol</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>negnpn</name></name> <operator>=</operator> <name>CURL_HTTP_VERSION_2</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

if<condition>(<expr><name>len</name> <operator>==</operator> <name>ALPN_HTTP_1_1_LENGTH</name> <operator>&amp;&amp;</operator>

<operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name>ALPN_HTTP_1_1</name></expr></argument>, <argument><expr><name>neg_protocol</name></expr></argument>, <argument><expr><name>ALPN_HTTP_1_1_LENGTH</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>negnpn</name></name> <operator>=</operator> <name>CURL_HTTP_VERSION_1_1</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"ALPN, server did not agree to a protocol\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>Curl_multiuse_state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>conn</name><operator>-&gt;</operator><name>negnpn</name></name> <operator>==</operator> <name>CURL_HTTP_VERSION_2</name></expr> ?</condition><then>

<expr><name>BUNDLE_MULTIPLEX</name></expr> </then><else>: <expr><name>BUNDLE_NO_MULTIUSE</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>asn1_object_dump</name><parameter_list>(<parameter><decl><type><name>ASN1_OBJECT</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ilen</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ilen</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>len</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>ilen</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>i2t_ASN1_OBJECT</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>ilen</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>i</name> <operator>&gt;=</operator> <name>ilen</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt> 

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>push_certinfo</name><parameter_list>(<parameter><type><name>_label</name></type></parameter>, <parameter><type><name>_num</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { long info_len = BIO_get_mem_data(mem, &amp;ptr); Curl_ssl_push_certinfo_len(data, _num, _label, ptr, info_len); if(1 != BIO_reset(mem)) break; } while(0)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>pubkey_show</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><name>BIO</name> <modifier>*</modifier></type><name>mem</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>num</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>type</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_OPAQUE_RSA_DSA_DH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<parameter><decl><type><specifier>const</specifier>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>BIGNUM</name> <modifier>*</modifier></type><name>bn</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>namebuf</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msnprintf</name><argument_list>(<argument><expr><name>namebuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>namebuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s(%s)"</literal></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>bn</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>BN_print</name><argument_list>(<argument><expr><name>mem</name></expr></argument>, <argument><expr><name>bn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>push_certinfo</name><argument_list>(<argument><expr><name>namebuf</name></expr></argument>, <argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_OPAQUE_RSA_DSA_DH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>print_pubkey_BN</name><parameter_list>(<parameter><type><name>_type</name></type></parameter>, <parameter><type><name>_name</name></type></parameter>, <parameter><type><name>_num</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>pubkey_show(data, mem, _num, #_type, #_name, _name)</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>print_pubkey_BN</name><parameter_list>(<parameter><type><name>_type</name></type></parameter>, <parameter><type><name>_name</name></type></parameter>, <parameter><type><name>_num</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if(_type-&gt;_name) { pubkey_show(data, mem, _num, #_type, #_name, _type-&gt;_name); } } while(0)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type> <name>X509V3_ext</name><argument_list>(<argument><expr>struct <name>Curl_easy</name> <operator>*</operator><name>data</name></expr></argument>,

<argument><expr><name>int</name> <name>certnum</name></expr></argument>,

<argument><expr><name>CONST_EXTS</name> <call><name>STACK_OF</name><argument_list>(<argument><expr><name>X509_EXTENSION</name></expr></argument>)</argument_list></call> <operator>*</operator><name>exts</name></expr></argument>)</argument_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>int</name><operator>)</operator><call><name>sk_X509_EXTENSION_num</name><argument_list>(<argument><expr><name>exts</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>sk_X509_EXTENSION_num</name><argument_list>(<argument><expr><name>exts</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>ASN1_OBJECT</name> <modifier>*</modifier></type><name>obj</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>X509_EXTENSION</name> <modifier>*</modifier></type><name>ext</name> <init>= <expr><call><name>sk_X509_EXTENSION_value</name><argument_list>(<argument><expr><name>exts</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BUF_MEM</name> <modifier>*</modifier></type><name>biomem</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>namebuf</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BIO</name> <modifier>*</modifier></type><name>bio_out</name> <init>= <expr><call><name>BIO_new</name><argument_list>(<argument><expr><call><name>BIO_s_mem</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>bio_out</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name>X509_EXTENSION_get_object</name><argument_list>(<argument><expr><name>ext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>asn1_object_dump</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>namebuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>namebuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>X509V3_EXT_print</name><argument_list>(<argument><expr><name>bio_out</name></expr></argument>, <argument><expr><name>ext</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ASN1_STRING_print</name><argument_list>(<argument><expr><name>bio_out</name></expr></argument>, <argument><expr><operator>(</operator><name>ASN1_STRING</name> <operator>*</operator><operator>)</operator><call><name>X509_EXTENSION_get_data</name><argument_list>(<argument><expr><name>ext</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>BIO_get_mem_ptr</name><argument_list>(<argument><expr><name>bio_out</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>biomem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_ssl_push_certinfo_len</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>certnum</name></expr></argument>, <argument><expr><name>namebuf</name></expr></argument>, <argument><expr><name><name>biomem</name><operator>-&gt;</operator><name>data</name></name></expr></argument>,

<argument><expr><name><name>biomem</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BIO_free</name><argument_list>(<argument><expr><name>bio_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></decl></decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OPENSSL_IS_BORINGSSL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><name>size_t</name></type> <name>numcert_t</name>;</typedef>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<typedef>typedef <type><name>int</name></type> <name>numcert_t</name>;</typedef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>get_cert_chain</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>ssl_connect_data</name></name> <modifier>*</modifier></type><name>connssl</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>STACK_OF</name><argument_list>(<argument><expr><name>X509</name></expr></argument>)</argument_list></call> <operator>*</operator><name>sk</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>numcert_t</name></type> <name>numcerts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BIO</name> <modifier>*</modifier></type><name>mem</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ssl_backend_data</name></name> <modifier>*</modifier></type><name>backend</name> <init>= <expr><name><name>connssl</name><operator>-&gt;</operator><name>backend</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>sk</name> <operator>=</operator> <call><name>SSL_get_peer_cert_chain</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>sk</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>numcerts</name> <operator>=</operator> <call><name>sk_X509_num</name><argument_list>(<argument><expr><name>sk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_ssl_init_certinfo</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>numcerts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>mem</name> <operator>=</operator> <call><name>BIO_new</name><argument_list>(<argument><expr><call><name>BIO_s_mem</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><name>numcerts</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>ASN1_INTEGER</name> <modifier>*</modifier></type><name>num</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>X509</name> <modifier>*</modifier></type><name>x</name> <init>= <expr><call><name>sk_X509_value</name><argument_list>(<argument><expr><name>sk</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EVP_PKEY</name> <modifier>*</modifier></type><name>pubkey</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>ASN1_BIT_STRING</name> <modifier>*</modifier></type><name>psig</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>X509_NAME_print_ex</name><argument_list>(<argument><expr><name>mem</name></expr></argument>, <argument><expr><call><name>X509_get_subject_name</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>XN_FLAG_ONELINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>push_certinfo</name><argument_list>(<argument><expr><literal type="string">"Subject"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>X509_NAME_print_ex</name><argument_list>(<argument><expr><name>mem</name></expr></argument>, <argument><expr><call><name>X509_get_issuer_name</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>XN_FLAG_ONELINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>push_certinfo</name><argument_list>(<argument><expr><literal type="string">"Issuer"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BIO_printf</name><argument_list>(<argument><expr><name>mem</name></expr></argument>, <argument><expr><literal type="string">"%lx"</literal></expr></argument>, <argument><expr><call><name>X509_get_version</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>push_certinfo</name><argument_list>(<argument><expr><literal type="string">"Version"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>num</name> <operator>=</operator> <call><name>X509_get_serialNumber</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>num</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>V_ASN1_NEG_INTEGER</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>BIO_puts</name><argument_list>(<argument><expr><name>mem</name></expr></argument>, <argument><expr><literal type="string">"-"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for<control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>num</name><operator>-&gt;</operator><name>length</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>BIO_printf</name><argument_list>(<argument><expr><name>mem</name></expr></argument>, <argument><expr><literal type="string">"%02x"</literal></expr></argument>, <argument><expr><name><name>num</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>push_certinfo</name><argument_list>(<argument><expr><literal type="string">"Serial Number"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_X509_GET0_SIGNATURE</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_X509_GET0_EXTENSIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>X509_ALGOR</name> <modifier>*</modifier></type><name>sigalg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>X509_PUBKEY</name> <modifier>*</modifier></type><name>xpubkey</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ASN1_OBJECT</name> <modifier>*</modifier></type><name>pubkeyoid</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>X509_get0_signature</name><argument_list>(<argument><expr><operator>&amp;</operator><name>psig</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sigalg</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>sigalg</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>i2a_ASN1_OBJECT</name><argument_list>(<argument><expr><name>mem</name></expr></argument>, <argument><expr><name><name>sigalg</name><operator>-&gt;</operator><name>algorithm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>push_certinfo</name><argument_list>(<argument><expr><literal type="string">"Signature Algorithm"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>xpubkey</name> <operator>=</operator> <call><name>X509_get_X509_PUBKEY</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>xpubkey</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>X509_PUBKEY_get0_param</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pubkeyoid</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>xpubkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>pubkeyoid</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>i2a_ASN1_OBJECT</name><argument_list>(<argument><expr><name>mem</name></expr></argument>, <argument><expr><name>pubkeyoid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>push_certinfo</name><argument_list>(<argument><expr><literal type="string">"Public Key Algorithm"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>X509V3_ext</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><call><name>X509_get0_extensions</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<block>{<block_content>

<decl_stmt><decl><type><name>X509_CINF</name> <modifier>*</modifier></type><name>cinf</name> <init>= <expr><name><name>x</name><operator>-&gt;</operator><name>cert_info</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>i2a_ASN1_OBJECT</name><argument_list>(<argument><expr><name>mem</name></expr></argument>, <argument><expr><name><name>cinf</name><operator>-&gt;</operator><name>signature</name><operator>-&gt;</operator><name>algorithm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>push_certinfo</name><argument_list>(<argument><expr><literal type="string">"Signature Algorithm"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>i2a_ASN1_OBJECT</name><argument_list>(<argument><expr><name>mem</name></expr></argument>, <argument><expr><name><name>cinf</name><operator>-&gt;</operator><name>key</name><operator>-&gt;</operator><name>algor</name><operator>-&gt;</operator><name>algorithm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>push_certinfo</name><argument_list>(<argument><expr><literal type="string">"Public Key Algorithm"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>X509V3_ext</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>cinf</name><operator>-&gt;</operator><name>extensions</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>psig</name> <operator>=</operator> <name><name>x</name><operator>-&gt;</operator><name>signature</name></name></expr>;</expr_stmt>

</block_content>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>ASN1_TIME_print</name><argument_list>(<argument><expr><name>mem</name></expr></argument>, <argument><expr><call><name>X509_get0_notBefore</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>push_certinfo</name><argument_list>(<argument><expr><literal type="string">"Start date"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ASN1_TIME_print</name><argument_list>(<argument><expr><name>mem</name></expr></argument>, <argument><expr><call><name>X509_get0_notAfter</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>push_certinfo</name><argument_list>(<argument><expr><literal type="string">"Expire date"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pubkey</name> <operator>=</operator> <call><name>X509_get_pubkey</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>pubkey</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">" Unable to load public key\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>pktype</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_OPAQUE_EVP_PKEY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>pktype</name> <operator>=</operator> <call><name>EVP_PKEY_id</name><argument_list>(<argument><expr><name>pubkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name>pktype</name> <operator>=</operator> <name><name>pubkey</name><operator>-&gt;</operator><name>type</name></name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<switch>switch<condition>(<expr><name>pktype</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>EVP_PKEY_RSA</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>RSA</name> <modifier>*</modifier></type><name>rsa</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_OPAQUE_EVP_PKEY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>rsa</name> <operator>=</operator> <call><name>EVP_PKEY_get0_RSA</name><argument_list>(<argument><expr><name>pubkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name>rsa</name> <operator>=</operator> <name><name>pubkey</name><operator>-&gt;</operator><name>pkey</name><operator>.</operator><name>rsa</name></name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_OPAQUE_RSA_DSA_DH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>BIGNUM</name> <modifier>*</modifier></type><name>n</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>BIGNUM</name> <modifier>*</modifier></type><name>e</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>RSA_get0_key</name><argument_list>(<argument><expr><name>rsa</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>e</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BIO_printf</name><argument_list>(<argument><expr><name>mem</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><call><name>BN_num_bits</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>push_certinfo</name><argument_list>(<argument><expr><literal type="string">"RSA Public Key"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>print_pubkey_BN</name><argument_list>(<argument><expr><name>rsa</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>print_pubkey_BN</name><argument_list>(<argument><expr><name>rsa</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>BIO_printf</name><argument_list>(<argument><expr><name>mem</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><call><name>BN_num_bits</name><argument_list>(<argument><expr><name><name>rsa</name><operator>-&gt;</operator><name>n</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>push_certinfo</name><argument_list>(<argument><expr><literal type="string">"RSA Public Key"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>print_pubkey_BN</name><argument_list>(<argument><expr><name>rsa</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>print_pubkey_BN</name><argument_list>(<argument><expr><name>rsa</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>EVP_PKEY_DSA</name></expr>:</case>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>OPENSSL_NO_DSA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>DSA</name> <modifier>*</modifier></type><name>dsa</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_OPAQUE_EVP_PKEY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>dsa</name> <operator>=</operator> <call><name>EVP_PKEY_get0_DSA</name><argument_list>(<argument><expr><name>pubkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name>dsa</name> <operator>=</operator> <name><name>pubkey</name><operator>-&gt;</operator><name>pkey</name><operator>.</operator><name>dsa</name></name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_OPAQUE_RSA_DSA_DH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>BIGNUM</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>BIGNUM</name> <modifier>*</modifier></type><name>q</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>BIGNUM</name> <modifier>*</modifier></type><name>g</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>BIGNUM</name> <modifier>*</modifier></type><name>pub_key</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DSA_get0_pqg</name><argument_list>(<argument><expr><name>dsa</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>q</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DSA_get0_key</name><argument_list>(<argument><expr><name>dsa</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pub_key</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>print_pubkey_BN</name><argument_list>(<argument><expr><name>dsa</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>print_pubkey_BN</name><argument_list>(<argument><expr><name>dsa</name></expr></argument>, <argument><expr><name>q</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>print_pubkey_BN</name><argument_list>(<argument><expr><name>dsa</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>print_pubkey_BN</name><argument_list>(<argument><expr><name>dsa</name></expr></argument>, <argument><expr><name>pub_key</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>print_pubkey_BN</name><argument_list>(<argument><expr><name>dsa</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>print_pubkey_BN</name><argument_list>(<argument><expr><name>dsa</name></expr></argument>, <argument><expr><name>q</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>print_pubkey_BN</name><argument_list>(<argument><expr><name>dsa</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>print_pubkey_BN</name><argument_list>(<argument><expr><name>dsa</name></expr></argument>, <argument><expr><name>pub_key</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>EVP_PKEY_DH</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>DH</name> <modifier>*</modifier></type><name>dh</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_OPAQUE_EVP_PKEY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>dh</name> <operator>=</operator> <call><name>EVP_PKEY_get0_DH</name><argument_list>(<argument><expr><name>pubkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name>dh</name> <operator>=</operator> <name><name>pubkey</name><operator>-&gt;</operator><name>pkey</name><operator>.</operator><name>dh</name></name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_OPAQUE_RSA_DSA_DH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>BIGNUM</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>BIGNUM</name> <modifier>*</modifier></type><name>q</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>BIGNUM</name> <modifier>*</modifier></type><name>g</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>BIGNUM</name> <modifier>*</modifier></type><name>pub_key</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DH_get0_pqg</name><argument_list>(<argument><expr><name>dh</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>q</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DH_get0_key</name><argument_list>(<argument><expr><name>dh</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pub_key</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>print_pubkey_BN</name><argument_list>(<argument><expr><name>dh</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>print_pubkey_BN</name><argument_list>(<argument><expr><name>dh</name></expr></argument>, <argument><expr><name>q</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>print_pubkey_BN</name><argument_list>(<argument><expr><name>dh</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>print_pubkey_BN</name><argument_list>(<argument><expr><name>dh</name></expr></argument>, <argument><expr><name>pub_key</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>print_pubkey_BN</name><argument_list>(<argument><expr><name>dh</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>print_pubkey_BN</name><argument_list>(<argument><expr><name>dh</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>print_pubkey_BN</name><argument_list>(<argument><expr><name>dh</name></expr></argument>, <argument><expr><name>pub_key</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<break>break;</break>

</block_content>}</block>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>EVP_PKEY_free</name><argument_list>(<argument><expr><name>pubkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name>psig</name></expr>)</condition> <block>{<block_content>

<for>for<control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>psig</name><operator>-&gt;</operator><name>length</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>BIO_printf</name><argument_list>(<argument><expr><name>mem</name></expr></argument>, <argument><expr><literal type="string">"%02x:"</literal></expr></argument>, <argument><expr><name><name>psig</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>push_certinfo</name><argument_list>(<argument><expr><literal type="string">"Signature"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>PEM_write_bio_X509</name><argument_list>(<argument><expr><name>mem</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>push_certinfo</name><argument_list>(<argument><expr><literal type="string">"Cert"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>BIO_free</name><argument_list>(<argument><expr><name>mem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>pkp_pin_peer_pubkey</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>X509</name><modifier>*</modifier></type> <name>cert</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pinnedpubkey</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>len1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>len2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buff1</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>temp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_SSL_PINNEDPUBKEYNOTMATCH</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>pinnedpubkey</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_OK</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>cert</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

<do>do <block>{<block_content>

<expr_stmt><expr><name>len1</name> <operator>=</operator> <call><name>i2d_X509_PUBKEY</name><argument_list>(<argument><expr><call><name>X509_get_X509_PUBKEY</name><argument_list>(<argument><expr><name>cert</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>len1</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>buff1</name> <operator>=</operator> <name>temp</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>len1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>buff1</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>len2</name> <operator>=</operator> <call><name>i2d_X509_PUBKEY</name><argument_list>(<argument><expr><call><name>X509_get_X509_PUBKEY</name><argument_list>(<argument><expr><name>cert</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>len1</name> <operator>!=</operator> <name>len2</name><operator>)</operator> <operator>||</operator> <operator>!</operator><name>temp</name> <operator>||</operator> <operator>(</operator><operator>(</operator><name>temp</name> <operator>-</operator> <name>buff1</name><operator>)</operator> <operator>!=</operator> <name>len1</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_pin_peer_pubkey</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>pinnedpubkey</name></expr></argument>, <argument><expr><name>buff1</name></expr></argument>, <argument><expr><name>len1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block> while<condition>(<expr><literal type="number">0</literal></expr>)</condition>;</do>

<if_stmt><if>if<condition>(<expr><name>buff1</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buff1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>servercert</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>ssl_connect_data</name></name> <modifier>*</modifier></type><name>connssl</name></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>strict</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>lerr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>X509</name> <modifier>*</modifier></type><name>issuer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BIO</name> <modifier>*</modifier></type><name>fp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>error_buffer</name><index>[<expr><literal type="number">256</literal></expr>]</index></name><init>=<expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr><literal type="number">2048</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>certverifyresult</name> <init>= <expr><ternary><condition><expr><call><name>SSL_IS_PROXY</name><argument_list>()</argument_list></call></expr> ?</condition><then>

<expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>proxy_ssl</name><operator>.</operator><name>certverifyresult</name></name></expr> </then><else>: <expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>ssl</name><operator>.</operator><name>certverifyresult</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BIO</name> <modifier>*</modifier></type><name>mem</name> <init>= <expr><call><name>BIO_new</name><argument_list>(<argument><expr><call><name>BIO_s_mem</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ssl_backend_data</name></name> <modifier>*</modifier></type><name>backend</name> <init>= <expr><name><name>connssl</name><operator>-&gt;</operator><name>backend</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>ssl</name><operator>.</operator><name>certinfo</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>get_cert_chain</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>connssl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>backend</name><operator>-&gt;</operator><name>server_cert</name></name> <operator>=</operator> <call><name>SSL_get_peer_certificate</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>backend</name><operator>-&gt;</operator><name>server_cert</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>BIO_free</name><argument_list>(<argument><expr><name>mem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>strict</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_OK</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"SSL: couldn't get peer certificate!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_PEER_FAILED_VERIFICATION</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"%s certificate:\n"</literal></expr></argument>, <argument><expr><ternary><condition><expr><call><name>SSL_IS_PROXY</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"Proxy"</literal></expr> </then><else>: <expr><literal type="string">"Server"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>x509_name_oneline</name><argument_list>(<argument><expr><call><name>X509_get_subject_name</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>server_cert</name></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">" subject: %s\n"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>rc</name></expr>?</condition><then><expr><literal type="string">"[NONE]"</literal></expr></then><else>:<expr><name>buffer</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_VERBOSE_STRINGS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<block>{<block_content>

<decl_stmt><decl><type><name>long</name></type> <name>len</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ASN1_TIME_print</name><argument_list>(<argument><expr><name>mem</name></expr></argument>, <argument><expr><call><name>X509_get0_notBefore</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>server_cert</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>BIO_get_mem_data</name><argument_list>(<argument><expr><name>mem</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">" start date: %.*s\n"</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>BIO_reset</name><argument_list>(<argument><expr><name>mem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ASN1_TIME_print</name><argument_list>(<argument><expr><name>mem</name></expr></argument>, <argument><expr><call><name>X509_get0_notAfter</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>server_cert</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>BIO_get_mem_data</name><argument_list>(<argument><expr><name>mem</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">" expire date: %.*s\n"</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>BIO_reset</name><argument_list>(<argument><expr><name>mem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>BIO_free</name><argument_list>(<argument><expr><name>mem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>SSL_CONN_CONFIG</name><argument_list>(<argument><expr><name>verifyhost</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>verifyhost</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>backend</name><operator>-&gt;</operator><name>server_cert</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>X509_free</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>server_cert</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>backend</name><operator>-&gt;</operator><name>server_cert</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>x509_name_oneline</name><argument_list>(<argument><expr><call><name>X509_get_issuer_name</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>server_cert</name></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>strict</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"SSL: couldn't get X509-issuer name!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_PEER_FAILED_VERIFICATION</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">" issuer: %s\n"</literal></expr></argument>, <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>SSL_SET_OPTION</name><argument_list>(<argument><expr><name>issuercert</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>fp</name> <operator>=</operator> <call><name>BIO_new</name><argument_list>(<argument><expr><call><name>BIO_s_file</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>fp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>,

<argument><expr><literal type="string">"BIO_new return NULL, "</literal> <name>OSSL_PACKAGE</name>

<literal type="string">" error %s"</literal></expr></argument>,

<argument><expr><call><name>ossl_strerror</name><argument_list>(<argument><expr><call><name>ERR_get_error</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>error_buffer</name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>error_buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>X509_free</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>server_cert</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>backend</name><operator>-&gt;</operator><name>server_cert</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>BIO_read_filename</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><call><name>SSL_SET_OPTION</name><argument_list>(<argument><expr><name>issuercert</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>strict</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"SSL: Unable to open issuer cert (%s)"</literal></expr></argument>,

<argument><expr><call><name>SSL_SET_OPTION</name><argument_list>(<argument><expr><name>issuercert</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>BIO_free</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>X509_free</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>server_cert</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>backend</name><operator>-&gt;</operator><name>server_cert</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><name>CURLE_SSL_ISSUER_ERROR</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>issuer</name> <operator>=</operator> <call><name>PEM_read_bio_X509</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ZERO_NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>issuer</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>strict</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"SSL: Unable to read issuer cert (%s)"</literal></expr></argument>,

<argument><expr><call><name>SSL_SET_OPTION</name><argument_list>(<argument><expr><name>issuercert</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>BIO_free</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>X509_free</name><argument_list>(<argument><expr><name>issuer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>X509_free</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>server_cert</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>backend</name><operator>-&gt;</operator><name>server_cert</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><name>CURLE_SSL_ISSUER_ERROR</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>X509_check_issued</name><argument_list>(<argument><expr><name>issuer</name></expr></argument>, <argument><expr><name><name>backend</name><operator>-&gt;</operator><name>server_cert</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>X509_V_OK</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>strict</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"SSL: Certificate issuer check failed (%s)"</literal></expr></argument>,

<argument><expr><call><name>SSL_SET_OPTION</name><argument_list>(<argument><expr><name>issuercert</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>BIO_free</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>X509_free</name><argument_list>(<argument><expr><name>issuer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>X509_free</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>server_cert</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>backend</name><operator>-&gt;</operator><name>server_cert</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><name>CURLE_SSL_ISSUER_ERROR</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">" SSL certificate issuer check ok (%s)\n"</literal></expr></argument>,

<argument><expr><call><name>SSL_SET_OPTION</name><argument_list>(<argument><expr><name>issuercert</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BIO_free</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>X509_free</name><argument_list>(<argument><expr><name>issuer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>lerr</name> <operator>=</operator> <operator>*</operator><name>certverifyresult</name> <operator>=</operator> <call><name>SSL_get_verify_result</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>*</operator><name>certverifyresult</name> <operator>!=</operator> <name>X509_V_OK</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>SSL_CONN_CONFIG</name><argument_list>(<argument><expr><name>verifypeer</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>strict</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"SSL certificate verify result: %s (%ld)"</literal></expr></argument>,

<argument><expr><call><name>X509_verify_cert_error_string</name><argument_list>(<argument><expr><name>lerr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>lerr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_PEER_FAILED_VERIFICATION</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">" SSL certificate verify result: %s (%ld),"</literal>

<literal type="string">" continuing anyway.\n"</literal></expr></argument>,

<argument><expr><call><name>X509_verify_cert_error_string</name><argument_list>(<argument><expr><name>lerr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>lerr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">" SSL certificate verify ok.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>OPENSSL_VERSION_NUMBER</name> <operator>&gt;=</operator> <literal type="number">0x0090808fL</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>OPENSSL_NO_TLSEXT</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>OPENSSL_NO_OCSP</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if<condition>(<expr><call><name>SSL_CONN_CONFIG</name><argument_list>(<argument><expr><name>verifystatus</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>verifystatus</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>connssl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>X509_free</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>server_cert</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>backend</name><operator>-&gt;</operator><name>server_cert</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>strict</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_OK</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <ternary><condition><expr><call><name>SSL_IS_PROXY</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_SSL_PINNEDPUBLICKEY_PROXY</name></expr>]</index></name></expr> </then><else>:

<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_SSL_PINNEDPUBLICKEY_ORIG</name></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>result</name> <operator>&amp;&amp;</operator> <name>ptr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>pkp_pin_peer_pubkey</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>backend</name><operator>-&gt;</operator><name>server_cert</name></name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"SSL: public key does not match pinned public key!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>X509_free</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>server_cert</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>backend</name><operator>-&gt;</operator><name>server_cert</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>connssl</name><operator>-&gt;</operator><name>connecting_state</name></name> <operator>=</operator> <name>ssl_connect_done</name></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>ossl_connect_step3</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sockindex</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ssl_connect_data</name></name> <modifier>*</modifier></type><name>connssl</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>ssl</name><index>[<expr><name>sockindex</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DEBUGASSERT</name><argument_list>(<argument><expr><name>ssl_connect_3</name> <operator>==</operator> <name><name>connssl</name><operator>-&gt;</operator><name>connecting_state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>servercert</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>connssl</name></expr></argument>, <argument><expr><operator>(</operator><call><name>SSL_CONN_CONFIG</name><argument_list>(<argument><expr><name>verifypeer</name></expr></argument>)</argument_list></call> <operator>||</operator>

<call><name>SSL_CONN_CONFIG</name><argument_list>(<argument><expr><name>verifyhost</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>result</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>connssl</name><operator>-&gt;</operator><name>connecting_state</name></name> <operator>=</operator> <name>ssl_connect_done</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>Curl_recv</name></type> <name>ossl_recv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>Curl_send</name></type> <name>ossl_send</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>ossl_connect_common</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>sockindex</name></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>nonblocking</name></decl></parameter>,

<parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>done</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ssl_connect_data</name></name> <modifier>*</modifier></type><name>connssl</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>ssl</name><index>[<expr><name>sockindex</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>curl_socket_t</name></type> <name>sockfd</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>sock</name><index>[<expr><name>sockindex</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>timediff_t</name></type> <name>timeout_ms</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>what</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>ssl_connection_complete</name> <operator>==</operator> <name><name>connssl</name><operator>-&gt;</operator><name>state</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>done</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>ssl_connect_1</name> <operator>==</operator> <name><name>connssl</name><operator>-&gt;</operator><name>connecting_state</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>timeout_ms</name> <operator>=</operator> <call><name>Curl_timeleft</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>timeout_ms</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"SSL connection timeout"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OPERATION_TIMEDOUT</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>ossl_connect_step1</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>sockindex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<while>while<condition>(<expr><name>ssl_connect_2</name> <operator>==</operator> <name><name>connssl</name><operator>-&gt;</operator><name>connecting_state</name></name> <operator>||</operator>

<name>ssl_connect_2_reading</name> <operator>==</operator> <name><name>connssl</name><operator>-&gt;</operator><name>connecting_state</name></name> <operator>||</operator>

<name>ssl_connect_2_writing</name> <operator>==</operator> <name><name>connssl</name><operator>-&gt;</operator><name>connecting_state</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>timeout_ms</name> <operator>=</operator> <call><name>Curl_timeleft</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>timeout_ms</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"SSL connection timeout"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OPERATION_TIMEDOUT</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>connssl</name><operator>-&gt;</operator><name>connecting_state</name></name> <operator>==</operator> <name>ssl_connect_2_reading</name> <operator>||</operator>

<name><name>connssl</name><operator>-&gt;</operator><name>connecting_state</name></name> <operator>==</operator> <name>ssl_connect_2_writing</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>curl_socket_t</name></type> <name>writefd</name> <init>= <expr><ternary><condition><expr><name>ssl_connect_2_writing</name> <operator>==</operator>

<name><name>connssl</name><operator>-&gt;</operator><name>connecting_state</name></name></expr>?</condition><then><expr><name>sockfd</name></expr></then><else>:<expr><name>CURL_SOCKET_BAD</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>curl_socket_t</name></type> <name>readfd</name> <init>= <expr><ternary><condition><expr><name>ssl_connect_2_reading</name> <operator>==</operator>

<name><name>connssl</name><operator>-&gt;</operator><name>connecting_state</name></name></expr>?</condition><then><expr><name>sockfd</name></expr></then><else>:<expr><name>CURL_SOCKET_BAD</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>what</name> <operator>=</operator> <call><name>Curl_socket_check</name><argument_list>(<argument><expr><name>readfd</name></expr></argument>, <argument><expr><name>CURL_SOCKET_BAD</name></expr></argument>, <argument><expr><name>writefd</name></expr></argument>,

<argument><expr><ternary><condition><expr><name>nonblocking</name></expr>?</condition><then><expr><literal type="number">0</literal></expr></then><else>:<expr><operator>(</operator><name>time_t</name><operator>)</operator><name>timeout_ms</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>what</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"select/poll on SSL socket, errno: %d"</literal></expr></argument>, <argument><expr><name>SOCKERRNO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_SSL_CONNECT_ERROR</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><literal type="number">0</literal> <operator>==</operator> <name>what</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>nonblocking</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>done</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"SSL connection timeout"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OPERATION_TIMEDOUT</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>ossl_connect_step2</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>sockindex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name> <operator>||</operator> <operator>(</operator><name>nonblocking</name> <operator>&amp;&amp;</operator>

<operator>(</operator><name>ssl_connect_2</name> <operator>==</operator> <name><name>connssl</name><operator>-&gt;</operator><name>connecting_state</name></name> <operator>||</operator>

<name>ssl_connect_2_reading</name> <operator>==</operator> <name><name>connssl</name><operator>-&gt;</operator><name>connecting_state</name></name> <operator>||</operator>

<name>ssl_connect_2_writing</name> <operator>==</operator> <name><name>connssl</name><operator>-&gt;</operator><name>connecting_state</name></name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></while> 

<if_stmt><if>if<condition>(<expr><name>ssl_connect_3</name> <operator>==</operator> <name><name>connssl</name><operator>-&gt;</operator><name>connecting_state</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>ossl_connect_step3</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>sockindex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>ssl_connect_done</name> <operator>==</operator> <name><name>connssl</name><operator>-&gt;</operator><name>connecting_state</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>connssl</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ssl_connection_complete</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>recv</name><index>[<expr><name>sockindex</name></expr>]</index></name> <operator>=</operator> <name>ossl_recv</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>send</name><index>[<expr><name>sockindex</name></expr>]</index></name> <operator>=</operator> <name>ossl_send</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>done</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>done</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>connssl</name><operator>-&gt;</operator><name>connecting_state</name></name> <operator>=</operator> <name>ssl_connect_1</name></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>Curl_ossl_connect_nonblocking</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>sockindex</name></decl></parameter>,

<parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>done</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>ossl_connect_common</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>sockindex</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>done</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>Curl_ossl_connect</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sockindex</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>done</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>ossl_connect_common</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>sockindex</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>done</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>DEBUGASSERT</name><argument_list>(<argument><expr><name>done</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>Curl_ossl_data_pending</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>connindex</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ssl_connect_data</name></name> <modifier>*</modifier></type><name>connssl</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>ssl</name><index>[<expr><name>connindex</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ssl_connect_data</name></name> <modifier>*</modifier></type><name>proxyssl</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>proxy_ssl</name><index>[<expr><name>connindex</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>connssl</name><operator>-&gt;</operator><name>backend</name><operator>-&gt;</operator><name>handle</name></name> <operator>&amp;&amp;</operator> <call><name>SSL_pending</name><argument_list>(<argument><expr><name><name>connssl</name><operator>-&gt;</operator><name>backend</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>proxyssl</name><operator>-&gt;</operator><name>backend</name><operator>-&gt;</operator><name>handle</name></name> <operator>&amp;&amp;</operator> <call><name>SSL_pending</name><argument_list>(<argument><expr><name><name>proxyssl</name><operator>-&gt;</operator><name>backend</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>size_t</name></type> <name>Curl_ossl_version</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>ssize_t</name></type> <name>ossl_send</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>sockindex</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>mem</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>,

<parameter><decl><type><name>CURLcode</name> <modifier>*</modifier></type><name>curlcode</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>error_buffer</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>sslerror</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>memlen</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ssl_connect_data</name></name> <modifier>*</modifier></type><name>connssl</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>ssl</name><index>[<expr><name>sockindex</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ssl_backend_data</name></name> <modifier>*</modifier></type><name>backend</name> <init>= <expr><name><name>connssl</name><operator>-&gt;</operator><name>backend</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ERR_clear_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>memlen</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>len</name> <operator>&gt;</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>INT_MAX</name><operator>)</operator></expr> ?</condition><then> <expr><name>INT_MAX</name></expr> </then><else>: <expr><operator>(</operator><name>int</name><operator>)</operator><name>len</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>SSL_write</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>, <argument><expr><name>mem</name></expr></argument>, <argument><expr><name>memlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>SSL_get_error</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch<condition>(<expr><name>err</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>SSL_ERROR_WANT_READ</name></expr>:</case>

<case>case <expr><name>SSL_ERROR_WANT_WRITE</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>curlcode</name> <operator>=</operator> <name>CURLE_AGAIN</name></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

<case>case <expr><name>SSL_ERROR_SYSCALL</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>sockerr</name> <init>= <expr><name>SOCKERRNO</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>sslerror</name> <operator>=</operator> <call><name>ERR_get_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>sslerror</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ossl_strerror</name><argument_list>(<argument><expr><name>sslerror</name></expr></argument>, <argument><expr><name>error_buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>error_buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>(<expr><name>sockerr</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>Curl_strerror</name><argument_list>(<argument><expr><name>sockerr</name></expr></argument>, <argument><expr><name>error_buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>error_buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>error_buffer</name></expr></argument>, <argument><expr><call><name>SSL_ERROR_to_str</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>error_buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>error_buffer</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name>error_buffer</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>OSSL_PACKAGE</name> <literal type="string">" SSL_write: %s, errno %d"</literal></expr></argument>,

<argument><expr><name>error_buffer</name></expr></argument>, <argument><expr><name>sockerr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>curlcode</name> <operator>=</operator> <name>CURLE_SEND_ERROR</name></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block>

<case>case <expr><name>SSL_ERROR_SSL</name></expr>:</case>

<expr_stmt><expr><name>sslerror</name> <operator>=</operator> <call><name>ERR_get_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>ERR_GET_LIB</name><argument_list>(<argument><expr><name>sslerror</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>ERR_LIB_SSL</name> <operator>&amp;&amp;</operator>

<call><name>ERR_GET_REASON</name><argument_list>(<argument><expr><name>sslerror</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>SSL_R_BIO_NOT_SET</name> <operator>&amp;&amp;</operator>

<name><name>conn</name><operator>-&gt;</operator><name>ssl</name><index>[<expr><name>sockindex</name></expr>]</index></name><operator>.</operator><name>state</name> <operator>==</operator> <name>ssl_connection_complete</name> <operator>&amp;&amp;</operator>

<name><name>conn</name><operator>-&gt;</operator><name>proxy_ssl</name><index>[<expr><name>sockindex</name></expr>]</index></name><operator>.</operator><name>state</name> <operator>==</operator> <name>ssl_connection_complete</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>ver</name><index>[<expr><literal type="number">120</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>Curl_ossl_version</name><argument_list>(<argument><expr><name>ver</name></expr></argument>, <argument><expr><literal type="number">120</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"Error: %s does not support double SSL tunneling."</literal></expr></argument>,

<argument><expr><name>ver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"SSL_write() error: %s"</literal></expr></argument>,

<argument><expr><call><name>ossl_strerror</name><argument_list>(<argument><expr><name>sslerror</name></expr></argument>, <argument><expr><name>error_buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>error_buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><operator>*</operator><name>curlcode</name> <operator>=</operator> <name>CURLE_SEND_ERROR</name></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>OSSL_PACKAGE</name> <literal type="string">" SSL_write: %s, errno %d"</literal></expr></argument>,

<argument><expr><call><name>SSL_ERROR_to_str</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>SOCKERRNO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>curlcode</name> <operator>=</operator> <name>CURLE_SEND_ERROR</name></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>curlcode</name> <operator>=</operator> <name>CURLE_OK</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>ssize_t</name><operator>)</operator><name>rc</name></expr>;</return> 

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ssize_t</name></type> <name>ossl_recv</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, 

<parameter><decl><type><name>int</name></type> <name>num</name></decl></parameter>, 

<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, 

<parameter><decl><type><name>size_t</name></type> <name>buffersize</name></decl></parameter>, 

<parameter><decl><type><name>CURLcode</name> <modifier>*</modifier></type><name>curlcode</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>error_buffer</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>sslerror</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>nread</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>buffsize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ssl_connect_data</name></name> <modifier>*</modifier></type><name>connssl</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>ssl</name><index>[<expr><name>num</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ssl_backend_data</name></name> <modifier>*</modifier></type><name>backend</name> <init>= <expr><name><name>connssl</name><operator>-&gt;</operator><name>backend</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ERR_clear_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>buffsize</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>buffersize</name> <operator>&gt;</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>INT_MAX</name><operator>)</operator></expr> ?</condition><then> <expr><name>INT_MAX</name></expr> </then><else>: <expr><operator>(</operator><name>int</name><operator>)</operator><name>buffersize</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>nread</name> <operator>=</operator> <operator>(</operator><name>ssize_t</name><operator>)</operator><call><name>SSL_read</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buffsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>nread</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><call><name>SSL_get_error</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>nread</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch<condition>(<expr><name>err</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>SSL_ERROR_NONE</name></expr>:</case> 

<break>break;</break>

<case>case <expr><name>SSL_ERROR_ZERO_RETURN</name></expr>:</case> 

<if_stmt><if>if<condition>(<expr><name>num</name> <operator>==</operator> <name>FIRSTSOCKET</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>connclose</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><literal type="string">"TLS close_notify"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>SSL_ERROR_WANT_READ</name></expr>:</case>

<case>case <expr><name>SSL_ERROR_WANT_WRITE</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>curlcode</name> <operator>=</operator> <name>CURLE_AGAIN</name></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

<default>default:</default>

<expr_stmt><expr><name>sslerror</name> <operator>=</operator> <call><name>ERR_get_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>nread</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <name>sslerror</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>sockerr</name> <init>= <expr><name>SOCKERRNO</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>sslerror</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ossl_strerror</name><argument_list>(<argument><expr><name>sslerror</name></expr></argument>, <argument><expr><name>error_buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>error_buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>(<expr><name>sockerr</name> <operator>&amp;&amp;</operator> <name>err</name> <operator>==</operator> <name>SSL_ERROR_SYSCALL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>Curl_strerror</name><argument_list>(<argument><expr><name>sockerr</name></expr></argument>, <argument><expr><name>error_buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>error_buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>error_buffer</name></expr></argument>, <argument><expr><call><name>SSL_ERROR_to_str</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>error_buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>error_buffer</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name>error_buffer</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>OSSL_PACKAGE</name> <literal type="string">" SSL_read: %s, errno %d"</literal></expr></argument>,

<argument><expr><name>error_buffer</name></expr></argument>, <argument><expr><name>sockerr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>curlcode</name> <operator>=</operator> <name>CURLE_RECV_ERROR</name></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUGBUILD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name>err</name> <operator>==</operator> <name>SSL_ERROR_SYSCALL</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>sockerr</name> <init>= <expr><name>SOCKERRNO</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>sockerr</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>Curl_strerror</name><argument_list>(<argument><expr><name>sockerr</name></expr></argument>, <argument><expr><name>error_buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>error_buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>msnprintf</name><argument_list>(<argument><expr><name>error_buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>error_buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><literal type="string">"Connection closed abruptly"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>OSSL_PACKAGE</name> <literal type="string">" SSL_read: %s, errno %d"</literal>

<literal type="string">" (Fatal because this is a curl debug build)"</literal></expr></argument>,

<argument><expr><name>error_buffer</name></expr></argument>, <argument><expr><name>sockerr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>curlcode</name> <operator>=</operator> <name>CURLE_RECV_ERROR</name></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></switch>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>nread</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type> <name>Curl_ossl_version</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LIBRESSL_VERSION_NUMBER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LIBRESSL_VERSION_NUMBER</name> <operator>&lt;</operator> <literal type="number">0x2070100fL</literal></expr></cpp:if>

<return>return <expr><call><name>msnprintf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="string">"%s/%lx.%lx.%lx"</literal></expr></argument>,

<argument><expr><name>OSSL_PACKAGE</name></expr></argument>,

<argument><expr><operator>(</operator><name>LIBRESSL_VERSION_NUMBER</name><operator>&gt;&gt;</operator><literal type="number">28</literal><operator>)</operator><operator>&amp;</operator><literal type="number">0xf</literal></expr></argument>,

<argument><expr><operator>(</operator><name>LIBRESSL_VERSION_NUMBER</name><operator>&gt;&gt;</operator><literal type="number">20</literal><operator>)</operator><operator>&amp;</operator><literal type="number">0xff</literal></expr></argument>,

<argument><expr><operator>(</operator><name>LIBRESSL_VERSION_NUMBER</name><operator>&gt;&gt;</operator><literal type="number">12</literal><operator>)</operator><operator>&amp;</operator><literal type="number">0xff</literal></expr></argument>)</argument_list></call></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ver</name> <init>= <expr><call><name>OpenSSL_version</name><argument_list>(<argument><expr><name>OPENSSL_VERSION</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>expected</name><index>[]</index></name> <init>= <expr><name>OSSL_PACKAGE</name> <literal type="string">" "</literal></expr></init></decl>;</decl_stmt> 

<if_stmt><if>if<condition>(<expr><call><name>Curl_strncasecompare</name><argument_list>(<argument><expr><name>ver</name></expr></argument>, <argument><expr><name>expected</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>expected</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ver</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>expected</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>count</name> <operator>=</operator> <call><name>msnprintf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="string">"%s/%s"</literal></expr></argument>, <argument><expr><name>OSSL_PACKAGE</name></expr></argument>, <argument><expr><name>ver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>p</name> <operator>=</operator> <name>buffer</name></expr>;</init> <condition><expr><operator>*</operator><name>p</name></expr>;</condition> <incr><expr><operator>++</operator><name>p</name></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>ISSPACE</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="char">'_'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>count</name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OPENSSL_IS_BORINGSSL</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<return>return <expr><call><name>msnprintf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>OSSL_PACKAGE</name></expr></argument>)</argument_list></call></expr>;</return>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_OPENSSL_VERSION</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>OPENSSL_VERSION_STRING</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<return>return <expr><call><name>msnprintf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="string">"%s/%s"</literal></expr></argument>,

<argument><expr><name>OSSL_PACKAGE</name></expr></argument>, <argument><expr><call><name>OpenSSL_version</name><argument_list>(<argument><expr><name>OPENSSL_VERSION_STRING</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>char</name></type> <name><name>sub</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>ssleay_value</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>sub</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>=</operator><literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sub</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ssleay_value</name> <operator>=</operator> <call><name>OpenSSL_version_num</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>ssleay_value</name> <operator>&lt;</operator> <literal type="number">0x906000</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ssleay_value</name> <operator>=</operator> <name>SSLEAY_VERSION_NUMBER</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sub</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><literal type="char">'\0'</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>ssleay_value</name><operator>&amp;</operator><literal type="number">0xff0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>minor_ver</name> <init>= <expr><operator>(</operator><name>ssleay_value</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>minor_ver</name> <operator>&gt;</operator> <literal type="number">26</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sub</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>minor_ver</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <literal type="number">26</literal> <operator>+</operator> <literal type="char">'a'</literal> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sub</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'z'</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name><name>sub</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator> <operator>(</operator><name>minor_ver</name> <operator>+</operator> <literal type="char">'a'</literal> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>sub</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><call><name>msnprintf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="string">"%s/%lx.%lx.%lx%s"</literal>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OPENSSL_FIPS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<literal type="string">"-fips"</literal></expr></argument>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

,

<argument><expr><name>OSSL_PACKAGE</name></expr></argument>,

<argument><expr><operator>(</operator><name>ssleay_value</name><operator>&gt;&gt;</operator><literal type="number">28</literal><operator>)</operator><operator>&amp;</operator><literal type="number">0xf</literal></expr></argument>,

<argument><expr><operator>(</operator><name>ssleay_value</name><operator>&gt;&gt;</operator><literal type="number">20</literal><operator>)</operator><operator>&amp;</operator><literal type="number">0xff</literal></expr></argument>,

<argument><expr><operator>(</operator><name>ssleay_value</name><operator>&gt;&gt;</operator><literal type="number">12</literal><operator>)</operator><operator>&amp;</operator><literal type="number">0xff</literal></expr></argument>,

<argument><expr><name>sub</name></expr></argument>)</argument_list></call></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>Curl_ossl_random</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>entropy</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>length</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>data</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>Curl_ossl_seed</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> 

<return>return <expr><name>CURLE_FAILED_INIT</name></expr>;</return></block_content></block></if></if_stmt> 

</block_content>}</block></if>

<else>else <block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>rand_enough</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_FAILED_INIT</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>RAND_bytes</name><argument_list>(<argument><expr><name>entropy</name></expr></argument>, <argument><expr><call><name>curlx_uztosi</name><argument_list>(<argument><expr><name>length</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><ternary><condition><expr><name>rc</name> <operator>==</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><name>CURLE_OK</name></expr> </then><else>: <expr><name>CURLE_FAILED_INIT</name></expr></else></ternary><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>Curl_ossl_md5sum</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>tmp</name></decl></parameter>, 

<parameter><decl><type><name>size_t</name></type> <name>tmplen</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>md5sum</name></decl></parameter> ,

<parameter><decl><type><name>size_t</name></type> <name>unused</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>EVP_MD_CTX</name> <modifier>*</modifier></type><name>mdctx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>unused</name></expr>;</expr_stmt>

<expr_stmt><expr><name>mdctx</name> <operator>=</operator> <call><name>EVP_MD_CTX_create</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EVP_DigestInit_ex</name><argument_list>(<argument><expr><name>mdctx</name></expr></argument>, <argument><expr><call><name>EVP_md5</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EVP_DigestUpdate</name><argument_list>(<argument><expr><name>mdctx</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>tmplen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EVP_DigestFinal_ex</name><argument_list>(<argument><expr><name>mdctx</name></expr></argument>, <argument><expr><name>md5sum</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EVP_MD_CTX_destroy</name><argument_list>(<argument><expr><name>mdctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>OPENSSL_VERSION_NUMBER</name> <operator>&gt;=</operator> <literal type="number">0x0090800fL</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>OPENSSL_NO_SHA256</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>Curl_ossl_sha256sum</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>tmp</name></decl></parameter>, 

<parameter><decl><type><name>size_t</name></type> <name>tmplen</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>sha256sum</name></decl></parameter> ,

<parameter><decl><type><name>size_t</name></type> <name>unused</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>EVP_MD_CTX</name> <modifier>*</modifier></type><name>mdctx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>unused</name></expr>;</expr_stmt>

<expr_stmt><expr><name>mdctx</name> <operator>=</operator> <call><name>EVP_MD_CTX_create</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EVP_DigestInit_ex</name><argument_list>(<argument><expr><name>mdctx</name></expr></argument>, <argument><expr><call><name>EVP_sha256</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EVP_DigestUpdate</name><argument_list>(<argument><expr><name>mdctx</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>tmplen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EVP_DigestFinal_ex</name><argument_list>(<argument><expr><name>mdctx</name></expr></argument>, <argument><expr><name>sha256sum</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EVP_MD_CTX_destroy</name><argument_list>(<argument><expr><name>mdctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>Curl_ossl_cert_status_request</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>OPENSSL_VERSION_NUMBER</name> <operator>&gt;=</operator> <literal type="number">0x0090808fL</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>OPENSSL_NO_TLSEXT</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>OPENSSL_NO_OCSP</name></expr></argument>)</argument_list></call></expr></cpp:if>

<return>return <expr><name>TRUE</name></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<return>return <expr><name>FALSE</name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>Curl_ossl_get_internals</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ssl_connect_data</name></name> <modifier>*</modifier></type><name>connssl</name></decl></parameter>,

<parameter><decl><type><name>CURLINFO</name></type> <name>info</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>ssl_backend_data</name></name> <modifier>*</modifier></type><name>backend</name> <init>= <expr><name><name>connssl</name><operator>-&gt;</operator><name>backend</name></name></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><name>info</name> <operator>==</operator> <name>CURLINFO_TLS_SESSION</name></expr> ?</condition><then>

<expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>backend</name><operator>-&gt;</operator><name>ctx</name></name></expr> </then><else>: <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>backend</name><operator>-&gt;</operator><name>handle</name></name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>Curl_ssl</name></name></type> <name>Curl_ssl_openssl</name> <init>= <expr><block>{

<expr><block>{ <expr><name>CURLSSLBACKEND_OPENSSL</name></expr>, <expr><literal type="string">"openssl"</literal></expr> }</block></expr>, 

<expr><name>SSLSUPP_CA_PATH</name> <operator>|</operator>

<name>SSLSUPP_CERTINFO</name> <operator>|</operator>

<name>SSLSUPP_PINNEDPUBKEY</name> <operator>|</operator>

<name>SSLSUPP_SSL_CTX</name> <operator>|</operator>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SSL_CTX_SET_CIPHERSUITES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<name>SSLSUPP_TLS13_CIPHERSUITES</name> <operator>|</operator>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>SSLSUPP_HTTPS_PROXY</name></expr>,

<expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>ssl_backend_data</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><name>Curl_ossl_init</name></expr>, 

<expr><name>Curl_ossl_cleanup</name></expr>, 

<expr><name>Curl_ossl_version</name></expr>, 

<expr><name>Curl_ossl_check_cxn</name></expr>, 

<expr><name>Curl_ossl_shutdown</name></expr>, 

<expr><name>Curl_ossl_data_pending</name></expr>, 

<expr><name>Curl_ossl_random</name></expr>, 

<expr><name>Curl_ossl_cert_status_request</name></expr>, 

<expr><name>Curl_ossl_connect</name></expr>, 

<expr><name>Curl_ossl_connect_nonblocking</name></expr>, 

<expr><name>Curl_ossl_get_internals</name></expr>, 

<expr><name>Curl_ossl_close</name></expr>, 

<expr><name>Curl_ossl_close_all</name></expr>, 

<expr><name>Curl_ossl_session_free</name></expr>, 

<expr><name>Curl_ossl_set_engine</name></expr>, 

<expr><name>Curl_ossl_set_engine_default</name></expr>, 

<expr><name>Curl_ossl_engines_list</name></expr>, 

<expr><name>Curl_none_false_start</name></expr>, 

<expr><name>Curl_ossl_md5sum</name></expr>, 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>OPENSSL_VERSION_NUMBER</name> <operator>&gt;=</operator> <literal type="number">0x0090800fL</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>OPENSSL_NO_SHA256</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><name>Curl_ossl_sha256sum</name> 

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<name>NULL</name></expr> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</unit>
