<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\curl-analysis\_cppstats\curl\lib\vtls\gtls.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_setup.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_GNUTLS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;gnutls/abstract.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;gnutls/gnutls.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;gnutls/x509.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_GNUTLS_NETTLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;gnutls/crypto.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;nettle/md5.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;nettle/sha2.h&gt;</cpp:file></cpp:include>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;gcrypt.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"urldata.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sendf.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"inet_pton.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtls.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vtls.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"parsedate.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"connect.h"</cpp:file></cpp:include> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"select.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"strcase.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"warnless.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"x509asn1.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"multiif.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_printf.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_memory.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memdebug.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GTLSDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type> <name>tls_log_func</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"|&lt;%d&gt;| %s"</literal></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>gtls_inited</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GNUTLS_VERSION_NUMBER</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>GNUTLS_VERSION_NUMBER</name> <operator>&gt;=</operator> <literal type="number">0x020c00</literal><operator>)</operator></expr></cpp:if>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>gnutls_transport_set_lowat</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>gnutls_transport_set_lowat</name><parameter_list>(<parameter><type><name>A</name></type></parameter>,<parameter><type><name>B</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>Curl_nop_stmt</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USE_GNUTLS_PRIORITY_SET_DIRECT</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>GNUTLS_VERSION_NUMBER</name> <operator>&gt;=</operator> <literal type="number">0x020c03</literal><operator>)</operator></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GNUTLS_MAPS_WINSOCK_ERRORS</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_GNUTLS_ALPN_SET_PROTOCOLS</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAS_ALPN</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_GNUTLS_OCSP_REQ_INIT</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAS_OCSP</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>GNUTLS_VERSION_NUMBER</name> <operator>&gt;=</operator> <literal type="number">0x030306</literal><operator>)</operator></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAS_CAPATH</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>GNUTLS_VERSION_NUMBER</name> <operator>&gt;=</operator> <literal type="number">0x030603</literal><operator>)</operator></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAS_TLS13</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAS_OCSP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;gnutls/ocsp.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<struct>struct <name>ssl_backend_data</name> <block>{

<decl_stmt><decl><type><name>gnutls_session_t</name></type> <name>session</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>gnutls_certificate_credentials_t</name></type> <name>cred</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_TLS_SRP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>gnutls_srp_client_credentials_t</name></type> <name>srp_client_cred</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block>;</struct>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_WINSOCK</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GNUTLS_MAPS_WINSOCK_ERRORS</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>gtls_EINTR</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>gtls_EIO</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>gtls_EAGAIN</name></cpp:macro> <cpp:value>11</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>gtls_mapped_sockerrno</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch<condition>(<expr><name>SOCKERRNO</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>WSAEWOULDBLOCK</name></expr>:</case>

<return>return <expr><name>gtls_EAGAIN</name></expr>;</return>

<case>case <expr><name>WSAEINTR</name></expr>:</case>

<return>return <expr><name>gtls_EINTR</name></expr>;</return>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch>

<return>return <expr><name>gtls_EIO</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>ssize_t</name></type> <name>Curl_gtls_push</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>curl_socket_t</name></type> <name>sock</name> <init>= <expr><operator>*</operator><operator>(</operator><name>curl_socket_t</name> <operator>*</operator><operator>)</operator><name>s</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>ret</name> <init>= <expr><call><name>swrite</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_WINSOCK</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GNUTLS_MAPS_WINSOCK_ERRORS</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if<condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gnutls_transport_set_global_errno</name><argument_list>(<argument><expr><call><name>gtls_mapped_sockerrno</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ssize_t</name></type> <name>Curl_gtls_pull</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>curl_socket_t</name></type> <name>sock</name> <init>= <expr><operator>*</operator><operator>(</operator><name>curl_socket_t</name> <operator>*</operator><operator>)</operator><name>s</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>ret</name> <init>= <expr><call><name>sread</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_WINSOCK</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GNUTLS_MAPS_WINSOCK_ERRORS</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if<condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gnutls_transport_set_global_errno</name><argument_list>(<argument><expr><call><name>gtls_mapped_sockerrno</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ssize_t</name></type> <name>Curl_gtls_push_ssl</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>gnutls_record_send</name><argument_list>(<argument><expr><operator>(</operator><name>gnutls_session_t</name><operator>)</operator> <name>s</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ssize_t</name></type> <name>Curl_gtls_pull_ssl</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>gnutls_record_recv</name><argument_list>(<argument><expr><operator>(</operator><name>gnutls_session_t</name><operator>)</operator> <name>s</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Curl_gtls_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>gtls_inited</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <ternary><condition><expr><call><name>gnutls_global_init</name><argument_list>()</argument_list></call></expr>?</condition><then><expr><literal type="number">0</literal></expr></then><else>:<expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GTLSDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>gnutls_global_set_log_function</name><argument_list>(<argument><expr><name>tls_log_func</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gnutls_global_set_log_level</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>gtls_inited</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Curl_gtls_cleanup</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>gtls_inited</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>gnutls_global_deinit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>gtls_inited</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_VERBOSE_STRINGS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type> <name>showtime</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>,

<parameter><decl><type><name>time_t</name></type> <name>stamp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name></type> <name>buffer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>tm</name> <init>= <expr><operator>&amp;</operator><name>buffer</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>str</name><index>[<expr><literal type="number">96</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><call><name>Curl_gmtime</name><argument_list>(<argument><expr><name>stamp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>msnprintf</name><argument_list>(<argument><expr><name>str</name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><literal type="string">"\t %s: %s, %02d %s %4d %02d:%02d:%02d GMT"</literal></expr></argument>,

<argument><expr><name>text</name></expr></argument>,

<argument><expr><name><name>Curl_wkday</name><index>[<expr><ternary><condition><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_wday</name></name></expr>?</condition><then><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_wday</name></name><operator>-</operator><literal type="number">1</literal></expr></then><else>:<expr><literal type="number">6</literal></expr></else></ternary></expr>]</index></name></expr></argument>,

<argument><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_mday</name></name></expr></argument>,

<argument><expr><name><name>Curl_month</name><index>[<expr><name><name>tm</name><operator>-&gt;</operator><name>tm_mon</name></name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_year</name></name> <operator>+</operator> <literal type="number">1900</literal></expr></argument>,

<argument><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_hour</name></name></expr></argument>,

<argument><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_min</name></name></expr></argument>,

<argument><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_sec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>gnutls_datum_t</name></type> <name>load_file</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>gnutls_datum_t</name></type> <name>loaded_file</name> <init>= <expr><block>{ <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>filelen</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

<expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><literal type="string">"rb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>f</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>loaded_file</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>fseek</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SEEK_END</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal>

<operator>||</operator> <operator>(</operator><name>filelen</name> <operator>=</operator> <call><name>ftell</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal>

<operator>||</operator> <call><name>fseek</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal>

<operator>||</operator> <operator>!</operator><operator>(</operator><name>ptr</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>filelen</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>fread</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>filelen</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>filelen</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>out</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>loaded_file</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>loaded_file</name><operator>.</operator><name>size</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name>filelen</name></expr>;</expr_stmt>

<label><name>out</name>:</label>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>loaded_file</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>unload_file</name><parameter_list>(<parameter><decl><type><name>gnutls_datum_t</name></type> <name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>data</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>handshake</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>sockindex</name></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>duringconnect</name></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>nonblocking</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ssl_connect_data</name></name> <modifier>*</modifier></type><name>connssl</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>ssl</name><index>[<expr><name>sockindex</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ssl_backend_data</name></name> <modifier>*</modifier></type><name>backend</name> <init>= <expr><name><name>connssl</name><operator>-&gt;</operator><name>backend</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>gnutls_session_t</name></type> <name>session</name> <init>= <expr><name><name>backend</name><operator>-&gt;</operator><name>session</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>curl_socket_t</name></type> <name>sockfd</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>sock</name><index>[<expr><name>sockindex</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for<control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>timediff_t</name></type> <name>timeout_ms</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

<expr_stmt><expr><name>timeout_ms</name> <operator>=</operator> <call><name>Curl_timeleft</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>duringconnect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>timeout_ms</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"SSL connection timeout"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OPERATION_TIMEDOUT</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>connssl</name><operator>-&gt;</operator><name>connecting_state</name></name> <operator>==</operator> <name>ssl_connect_2_reading</name>

<operator>||</operator> <name><name>connssl</name><operator>-&gt;</operator><name>connecting_state</name></name> <operator>==</operator> <name>ssl_connect_2_writing</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>what</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>curl_socket_t</name></type> <name>writefd</name> <init>= <expr><ternary><condition><expr><name>ssl_connect_2_writing</name> <operator>==</operator>

<name><name>connssl</name><operator>-&gt;</operator><name>connecting_state</name></name></expr>?</condition><then><expr><name>sockfd</name></expr></then><else>:<expr><name>CURL_SOCKET_BAD</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>curl_socket_t</name></type> <name>readfd</name> <init>= <expr><ternary><condition><expr><name>ssl_connect_2_reading</name> <operator>==</operator>

<name><name>connssl</name><operator>-&gt;</operator><name>connecting_state</name></name></expr>?</condition><then><expr><name>sockfd</name></expr></then><else>:<expr><name>CURL_SOCKET_BAD</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>what</name> <operator>=</operator> <call><name>Curl_socket_check</name><argument_list>(<argument><expr><name>readfd</name></expr></argument>, <argument><expr><name>CURL_SOCKET_BAD</name></expr></argument>, <argument><expr><name>writefd</name></expr></argument>,

<argument><expr><ternary><condition><expr><name>nonblocking</name></expr>?</condition><then><expr><literal type="number">0</literal></expr></then><else>:

<expr><ternary><condition><expr><name>timeout_ms</name></expr>?</condition><then><expr><operator>(</operator><name>time_t</name><operator>)</operator><name>timeout_ms</name></expr></then><else>:<expr><literal type="number">1000</literal></expr></else></ternary></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>what</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"select/poll on SSL socket, errno: %d"</literal></expr></argument>, <argument><expr><name>SOCKERRNO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_SSL_CONNECT_ERROR</name></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><literal type="number">0</literal> <operator>==</operator> <name>what</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>nonblocking</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_OK</name></expr>;</return></block_content></block></if>

<if type="elseif">else if<condition>(<expr><name>timeout_ms</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"SSL connection timeout at %ld"</literal></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><name>timeout_ms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OPERATION_TIMEDOUT</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>gnutls_handshake</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>rc</name> <operator>==</operator> <name>GNUTLS_E_AGAIN</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>rc</name> <operator>==</operator> <name>GNUTLS_E_INTERRUPTED</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>connssl</name><operator>-&gt;</operator><name>connecting_state</name></name> <operator>=</operator>

<ternary><condition><expr><call><name>gnutls_record_get_direction</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>?</condition><then>

<expr><name>ssl_connect_2_writing</name></expr></then><else>:<expr><name>ssl_connect_2_reading</name></expr></else></ternary></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><operator>(</operator><name>rc</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>gnutls_error_is_fatal</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>strerr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>==</operator> <name>GNUTLS_E_WARNING_ALERT_RECEIVED</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>alert</name> <init>= <expr><call><name>gnutls_alert_get</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>strerr</name> <operator>=</operator> <call><name>gnutls_alert_get_name</name><argument_list>(<argument><expr><name>alert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>strerr</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>strerr</name> <operator>=</operator> <call><name>gnutls_strerror</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"gnutls_handshake() warning: %s\n"</literal></expr></argument>, <argument><expr><name>strerr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name>rc</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>strerr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>==</operator> <name>GNUTLS_E_FATAL_ALERT_RECEIVED</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>alert</name> <init>= <expr><call><name>gnutls_alert_get</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>strerr</name> <operator>=</operator> <call><name>gnutls_alert_get_name</name><argument_list>(<argument><expr><name>alert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>strerr</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>strerr</name> <operator>=</operator> <call><name>gnutls_strerror</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"gnutls_handshake() failed: %s"</literal></expr></argument>, <argument><expr><name>strerr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_SSL_CONNECT_ERROR</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>connssl</name><operator>-&gt;</operator><name>connecting_state</name></name> <operator>=</operator> <name>ssl_connect_1</name></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>gnutls_x509_crt_fmt_t</name></type> <name>do_file_type</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>type</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>type</name> <operator>||</operator> <operator>!</operator><name><name>type</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>GNUTLS_X509_FMT_PEM</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>strcasecompare</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><literal type="string">"PEM"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>GNUTLS_X509_FMT_PEM</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>strcasecompare</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><literal type="string">"DER"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>GNUTLS_X509_FMT_DER</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>USE_GNUTLS_PRIORITY_SET_DIRECT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>CURLcode</name></type>

<name>set_ssl_version_min_max</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>list_size</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>ssl_version</name> <init>= <expr><call><name>SSL_CONN_CONFIG</name><argument_list>(<argument><expr><name>version</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>ssl_version_max</name> <init>= <expr><call><name>SSL_CONN_CONFIG</name><argument_list>(<argument><expr><name>version_max</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>i</name> <init>= <expr><name>ssl_version</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>protocol_priority_idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<switch>switch<condition>(<expr><name>ssl_version_max</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>CURL_SSLVERSION_MAX_NONE</name></expr>:</case>

<case>case <expr><name>CURL_SSLVERSION_MAX_DEFAULT</name></expr>:</case>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAS_TLS13</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>ssl_version_max</name> <operator>=</operator> <name>CURL_SSLVERSION_MAX_TLSv1_3</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>ssl_version_max</name> <operator>=</operator> <name>CURL_SSLVERSION_MAX_TLSv1_2</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<for>for<control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <operator>(</operator><name>ssl_version_max</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;&amp;</operator>

<name>protocol_priority_idx</name> <operator>&lt;</operator> <name>list_size</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<switch>switch<condition>(<expr><name>i</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>CURL_SSLVERSION_TLSv1_0</name></expr>:</case>

<expr_stmt><expr><name><name>protocol_priority</name><index>[<expr><name>protocol_priority_idx</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>GNUTLS_TLS1_0</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>CURL_SSLVERSION_TLSv1_1</name></expr>:</case>

<expr_stmt><expr><name><name>protocol_priority</name><index>[<expr><name>protocol_priority_idx</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>GNUTLS_TLS1_1</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>CURL_SSLVERSION_TLSv1_2</name></expr>:</case>

<expr_stmt><expr><name><name>protocol_priority</name><index>[<expr><name>protocol_priority_idx</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>GNUTLS_TLS1_2</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>CURL_SSLVERSION_TLSv1_3</name></expr>:</case>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAS_TLS13</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>protocol_priority</name><index>[<expr><name>protocol_priority_idx</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>GNUTLS_TLS1_3</name></expr>;</expr_stmt>

<break>break;</break>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"GnuTLS: TLS 1.3 is not yet supported"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_SSL_CONNECT_ERROR</name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></switch>

</block_content>}</block></for>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GNUTLS_CIPHERS</name></cpp:macro> <cpp:value>"NORMAL:-ARCFOUR-128:-CTYPE-ALL:+CTYPE-X509"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GNUTLS_SRP</name></cpp:macro> <cpp:value>"+SRP"</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>CURLcode</name></type>

<name>set_ssl_version_min_max</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>prioritylist</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>ssl_version</name> <init>= <expr><call><name>SSL_CONN_CONFIG</name><argument_list>(<argument><expr><name>version</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>ssl_version_max</name> <init>= <expr><call><name>SSL_CONN_CONFIG</name><argument_list>(<argument><expr><name>version_max</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>ssl_version_max</name> <operator>==</operator> <name>CURL_SSLVERSION_MAX_NONE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ssl_version_max</name> <operator>=</operator> <name>CURL_SSLVERSION_MAX_DEFAULT</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<switch>switch<condition>(<expr><name>ssl_version</name> <operator>|</operator> <name>ssl_version_max</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>CURL_SSLVERSION_TLSv1_0</name> <operator>|</operator> <name>CURL_SSLVERSION_MAX_TLSv1_0</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>prioritylist</name> <operator>=</operator> <name>GNUTLS_CIPHERS</name> <literal type="string">":-VERS-SSL3.0:-VERS-TLS-ALL:"</literal>

<literal type="string">"+VERS-TLS1.0:"</literal> <name>GNUTLS_SRP</name></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

<case>case <expr><name>CURL_SSLVERSION_TLSv1_0</name> <operator>|</operator> <name>CURL_SSLVERSION_MAX_TLSv1_1</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>prioritylist</name> <operator>=</operator> <name>GNUTLS_CIPHERS</name> <literal type="string">":-VERS-SSL3.0:-VERS-TLS-ALL:"</literal>

<literal type="string">"+VERS-TLS1.0:+VERS-TLS1.1:"</literal> <name>GNUTLS_SRP</name></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

<case>case <expr><name>CURL_SSLVERSION_TLSv1_0</name> <operator>|</operator> <name>CURL_SSLVERSION_MAX_TLSv1_2</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>prioritylist</name> <operator>=</operator> <name>GNUTLS_CIPHERS</name> <literal type="string">":-VERS-SSL3.0:-VERS-TLS-ALL:"</literal>

<literal type="string">"+VERS-TLS1.0:+VERS-TLS1.1:+VERS-TLS1.2:"</literal> <name>GNUTLS_SRP</name></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

<case>case <expr><name>CURL_SSLVERSION_TLSv1_1</name> <operator>|</operator> <name>CURL_SSLVERSION_MAX_TLSv1_1</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>prioritylist</name> <operator>=</operator> <name>GNUTLS_CIPHERS</name> <literal type="string">":-VERS-SSL3.0:-VERS-TLS-ALL:"</literal>

<literal type="string">"+VERS-TLS1.1:"</literal> <name>GNUTLS_SRP</name></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

<case>case <expr><name>CURL_SSLVERSION_TLSv1_1</name> <operator>|</operator> <name>CURL_SSLVERSION_MAX_TLSv1_2</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>prioritylist</name> <operator>=</operator> <name>GNUTLS_CIPHERS</name> <literal type="string">":-VERS-SSL3.0:-VERS-TLS-ALL:"</literal>

<literal type="string">"+VERS-TLS1.1:+VERS-TLS1.2:"</literal> <name>GNUTLS_SRP</name></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

<case>case <expr><name>CURL_SSLVERSION_TLSv1_2</name> <operator>|</operator> <name>CURL_SSLVERSION_MAX_TLSv1_2</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>prioritylist</name> <operator>=</operator> <name>GNUTLS_CIPHERS</name> <literal type="string">":-VERS-SSL3.0:-VERS-TLS-ALL:"</literal>

<literal type="string">"+VERS-TLS1.2:"</literal> <name>GNUTLS_SRP</name></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

<case>case <expr><name>CURL_SSLVERSION_TLSv1_3</name> <operator>|</operator> <name>CURL_SSLVERSION_MAX_TLSv1_3</name></expr>:</case>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAS_TLS13</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><operator>*</operator><name>prioritylist</name> <operator>=</operator> <name>GNUTLS_CIPHERS</name> <literal type="string">":-VERS-SSL3.0:-VERS-TLS-ALL:"</literal>

<literal type="string">"+VERS-TLS1.3:"</literal> <name>GNUTLS_SRP</name></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"GnuTLS: TLS 1.3 is not yet supported"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_SSL_CONNECT_ERROR</name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<case>case <expr><name>CURL_SSLVERSION_TLSv1_0</name> <operator>|</operator> <name>CURL_SSLVERSION_MAX_DEFAULT</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>prioritylist</name> <operator>=</operator> <name>GNUTLS_CIPHERS</name> <literal type="string">":-VERS-SSL3.0:-VERS-TLS-ALL:"</literal>

<literal type="string">"+VERS-TLS1.0:+VERS-TLS1.1:+VERS-TLS1.2:"</literal>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAS_TLS13</name></expr></argument>)</argument_list></call></expr></cpp:if>
<literal type="string">"+VERS-TLS1.3:"</literal>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>GNUTLS_SRP</name></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

<case>case <expr><name>CURL_SSLVERSION_TLSv1_1</name> <operator>|</operator> <name>CURL_SSLVERSION_MAX_DEFAULT</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>prioritylist</name> <operator>=</operator> <name>GNUTLS_CIPHERS</name> <literal type="string">":-VERS-SSL3.0:-VERS-TLS-ALL:"</literal>

<literal type="string">"+VERS-TLS1.1:+VERS-TLS1.2:"</literal>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAS_TLS13</name></expr></argument>)</argument_list></call></expr></cpp:if>
<literal type="string">"+VERS-TLS1.3:"</literal>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>GNUTLS_SRP</name></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

<case>case <expr><name>CURL_SSLVERSION_TLSv1_2</name> <operator>|</operator> <name>CURL_SSLVERSION_MAX_DEFAULT</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>prioritylist</name> <operator>=</operator> <name>GNUTLS_CIPHERS</name> <literal type="string">":-VERS-SSL3.0:-VERS-TLS-ALL:"</literal>

<literal type="string">"+VERS-TLS1.2:"</literal>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAS_TLS13</name></expr></argument>)</argument_list></call></expr></cpp:if>
<literal type="string">"+VERS-TLS1.3:"</literal>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>GNUTLS_SRP</name></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

<case>case <expr><name>CURL_SSLVERSION_TLSv1_3</name> <operator>|</operator> <name>CURL_SSLVERSION_MAX_DEFAULT</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>prioritylist</name> <operator>=</operator> <name>GNUTLS_CIPHERS</name> <literal type="string">":-VERS-SSL3.0:-VERS-TLS-ALL:"</literal>

<literal type="string">"+VERS-TLS1.2:"</literal>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAS_TLS13</name></expr></argument>)</argument_list></call></expr></cpp:if>
<literal type="string">"+VERS-TLS1.3:"</literal>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>GNUTLS_SRP</name></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"GnuTLS: cannot set ssl protocol"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_SSL_CONNECT_ERROR</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>CURLcode</name></type>

<name>gtls_connect_step1</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>sockindex</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ssl_connect_data</name></name> <modifier>*</modifier></type><name>connssl</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>ssl</name><index>[<expr><name>sockindex</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ssl_backend_data</name></name> <modifier>*</modifier></type><name>backend</name> <init>= <expr><name><name>connssl</name><operator>-&gt;</operator><name>backend</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>init_flags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>gnutls_session_t</name></type> <name>session</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>sni</name> <init>= <expr><name>TRUE</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>transport_ptr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>gnutls_push_func</name></type> <name>gnutls_transport_push</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>gnutls_pull_func</name></type> <name>gnutls_transport_pull</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_IPV6</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name><name>struct</name> <name>in6_addr</name></name></type> <name>addr</name></decl>;</decl_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name><name>struct</name> <name>in_addr</name></name></type> <name>addr</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>USE_GNUTLS_PRIORITY_SET_DIRECT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>cipher_priority</name><index>[]</index></name> <init>= <expr><block>{

<expr><name>GNUTLS_CIPHER_AES_128_CBC</name></expr>,

<expr><name>GNUTLS_CIPHER_AES_256_CBC</name></expr>,

<expr><name>GNUTLS_CIPHER_CAMELLIA_128_CBC</name></expr>,

<expr><name>GNUTLS_CIPHER_CAMELLIA_256_CBC</name></expr>,

<expr><name>GNUTLS_CIPHER_3DES_CBC</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>cert_type_priority</name><index>[]</index></name> <init>= <expr><block>{ <expr><name>GNUTLS_CRT_X509</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>protocol_priority</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prioritylist</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>err</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>hostname</name> <init>= <expr><ternary><condition><expr><call><name>SSL_IS_PROXY</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><name><name>conn</name><operator>-&gt;</operator><name>http_proxy</name><operator>.</operator><name>host</name><operator>.</operator><name>name</name></name></expr> </then><else>:

<expr><name><name>conn</name><operator>-&gt;</operator><name>host</name><operator>.</operator><name>name</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>connssl</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>ssl_connection_complete</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_OK</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>gtls_inited</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>Curl_gtls_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>SSL_CONN_CONFIG</name><argument_list>(<argument><expr><name>version</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CURL_SSLVERSION_SSLv2</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"GnuTLS does not support SSLv2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_SSL_CONNECT_ERROR</name></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><call><name>SSL_CONN_CONFIG</name><argument_list>(<argument><expr><name>version</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CURL_SSLVERSION_SSLv3</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>sni</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>gnutls_certificate_allocate_credentials</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>backend</name><operator>-&gt;</operator><name>cred</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>!=</operator> <name>GNUTLS_E_SUCCESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"gnutls_cert_all_cred() failed: %s"</literal></expr></argument>, <argument><expr><call><name>gnutls_strerror</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_SSL_CONNECT_ERROR</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_TLS_SRP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><call><name>SSL_SET_OPTION</name><argument_list>(<argument><expr><name>authtype</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CURL_TLSAUTH_SRP</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Using TLS-SRP username: %s\n"</literal></expr></argument>, <argument><expr><call><name>SSL_SET_OPTION</name><argument_list>(<argument><expr><name>username</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>gnutls_srp_allocate_client_credentials</name><argument_list>(

<argument><expr><operator>&amp;</operator><name><name>backend</name><operator>-&gt;</operator><name>srp_client_cred</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>!=</operator> <name>GNUTLS_E_SUCCESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"gnutls_srp_allocate_client_cred() failed: %s"</literal></expr></argument>,

<argument><expr><call><name>gnutls_strerror</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>gnutls_srp_set_client_credentials</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>srp_client_cred</name></name></expr></argument>,

<argument><expr><call><name>SSL_SET_OPTION</name><argument_list>(<argument><expr><name>username</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>SSL_SET_OPTION</name><argument_list>(<argument><expr><name>password</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>!=</operator> <name>GNUTLS_E_SUCCESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"gnutls_srp_set_client_cred() failed: %s"</literal></expr></argument>,

<argument><expr><call><name>gnutls_strerror</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_BAD_FUNCTION_ARGUMENT</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if<condition>(<expr><call><name>SSL_CONN_CONFIG</name><argument_list>(<argument><expr><name>CAfile</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>gnutls_certificate_set_verify_flags</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>cred</name></name></expr></argument>,

<argument><expr><name>GNUTLS_VERIFY_ALLOW_X509_V1_CA_CRT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>gnutls_certificate_set_x509_trust_file</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>cred</name></name></expr></argument>,

<argument><expr><call><name>SSL_CONN_CONFIG</name><argument_list>(<argument><expr><name>CAfile</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>GNUTLS_X509_FMT_PEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"error reading ca cert file %s (%s)\n"</literal></expr></argument>,

<argument><expr><call><name>SSL_CONN_CONFIG</name><argument_list>(<argument><expr><name>CAfile</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>gnutls_strerror</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>SSL_CONN_CONFIG</name><argument_list>(<argument><expr><name>verifypeer</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_SSL_CACERT_BADFILE</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"found %d certificates in %s\n"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>,

<argument><expr><call><name>SSL_CONN_CONFIG</name><argument_list>(<argument><expr><name>CAfile</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAS_CAPATH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><call><name>SSL_CONN_CONFIG</name><argument_list>(<argument><expr><name>CApath</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>gnutls_certificate_set_x509_trust_dir</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>cred</name></name></expr></argument>,

<argument><expr><call><name>SSL_CONN_CONFIG</name><argument_list>(<argument><expr><name>CApath</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>GNUTLS_X509_FMT_PEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"error reading ca cert file %s (%s)\n"</literal></expr></argument>,

<argument><expr><call><name>SSL_CONN_CONFIG</name><argument_list>(<argument><expr><name>CApath</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>gnutls_strerror</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>SSL_CONN_CONFIG</name><argument_list>(<argument><expr><name>verifypeer</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_SSL_CACERT_BADFILE</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"found %d certificates in %s\n"</literal></expr></argument>,

<argument><expr><name>rc</name></expr></argument>, <argument><expr><call><name>SSL_CONN_CONFIG</name><argument_list>(<argument><expr><name>CApath</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CURL_CA_FALLBACK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><call><name>SSL_CONN_CONFIG</name><argument_list>(<argument><expr><name>verifypeer</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<operator>!</operator><operator>(</operator><call><name>SSL_CONN_CONFIG</name><argument_list>(<argument><expr><name>CAfile</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>SSL_CONN_CONFIG</name><argument_list>(<argument><expr><name>CApath</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>gnutls_certificate_set_x509_system_trust</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>cred</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if<condition>(<expr><call><name>SSL_SET_OPTION</name><argument_list>(<argument><expr><name>CRLfile</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>gnutls_certificate_set_x509_crl_file</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>cred</name></name></expr></argument>,

<argument><expr><call><name>SSL_SET_OPTION</name><argument_list>(<argument><expr><name>CRLfile</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>GNUTLS_X509_FMT_PEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"error reading crl file %s (%s)"</literal></expr></argument>,

<argument><expr><call><name>SSL_SET_OPTION</name><argument_list>(<argument><expr><name>CRLfile</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>gnutls_strerror</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_SSL_CRL_BADFILE</name></expr>;</return>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"found %d CRL in %s\n"</literal></expr></argument>,

<argument><expr><name>rc</name></expr></argument>, <argument><expr><call><name>SSL_SET_OPTION</name><argument_list>(<argument><expr><name>CRLfile</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>init_flags</name> <operator>=</operator> <name>GNUTLS_CLIENT</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GNUTLS_FORCE_CLIENT_CERT</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><name>init_flags</name> <operator>|=</operator> <name>GNUTLS_FORCE_CLIENT_CERT</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GNUTLS_NO_TICKETS</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><name>init_flags</name> <operator>|=</operator> <name>GNUTLS_NO_TICKETS</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>gnutls_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>backend</name><operator>-&gt;</operator><name>session</name></name></expr></argument>, <argument><expr><name>init_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>!=</operator> <name>GNUTLS_E_SUCCESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"gnutls_init() failed: %d"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_SSL_CONNECT_ERROR</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>session</name> <operator>=</operator> <name><name>backend</name><operator>-&gt;</operator><name>session</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><literal type="number">0</literal> <operator>==</operator> <call><name>Curl_inet_pton</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><name>hostname</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_IPV6</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>(</operator><literal type="number">0</literal> <operator>==</operator> <call><name>Curl_inet_pton</name><argument_list>(<argument><expr><name>AF_INET6</name></expr></argument>, <argument><expr><name>hostname</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>sni</name> <operator>&amp;&amp;</operator>

<operator>(</operator><call><name>gnutls_server_name_set</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>GNUTLS_NAME_DNS</name></expr></argument>, <argument><expr><name>hostname</name></expr></argument>,

<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>hostname</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"WARNING: failed to configure server name indication (SNI) "</literal>

<literal type="string">"TLS extension\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>gnutls_set_default_priority</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>!=</operator> <name>GNUTLS_E_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_SSL_CONNECT_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>USE_GNUTLS_PRIORITY_SET_DIRECT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>gnutls_cipher_set_priority</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>cipher_priority</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>!=</operator> <name>GNUTLS_E_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_SSL_CONNECT_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>gnutls_certificate_type_set_priority</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>cert_type_priority</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>!=</operator> <name>GNUTLS_E_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_SSL_CONNECT_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>SSL_CONN_CONFIG</name><argument_list>(<argument><expr><name>cipher_list</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"can't pass a custom cipher list to older GnuTLS"</literal>

<literal type="string">" versions"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_SSL_CONNECT_ERROR</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<switch>switch<condition>(<expr><call><name>SSL_CONN_CONFIG</name><argument_list>(<argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<case>case <expr><name>CURL_SSLVERSION_SSLv3</name></expr>:</case>

<expr_stmt><expr><name><name>protocol_priority</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>GNUTLS_SSL3</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>CURL_SSLVERSION_DEFAULT</name></expr>:</case>

<case>case <expr><name>CURL_SSLVERSION_TLSv1</name></expr>:</case>

<expr_stmt><expr><name><name>protocol_priority</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>GNUTLS_TLS1_0</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>protocol_priority</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>GNUTLS_TLS1_1</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>protocol_priority</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>GNUTLS_TLS1_2</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAS_TLS13</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>protocol_priority</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>GNUTLS_TLS1_3</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<break>break;</break>

<case>case <expr><name>CURL_SSLVERSION_TLSv1_0</name></expr>:</case>

<case>case <expr><name>CURL_SSLVERSION_TLSv1_1</name></expr>:</case>

<case>case <expr><name>CURL_SSLVERSION_TLSv1_2</name></expr>:</case>

<case>case <expr><name>CURL_SSLVERSION_TLSv1_3</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><call><name>set_ssl_version_min_max</name><argument_list>(<argument><expr><name>protocol_priority</name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>protocol_priority</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>protocol_priority</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name> <operator>!=</operator> <name>CURLE_OK</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>CURL_SSLVERSION_SSLv2</name></expr>:</case>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"GnuTLS does not support SSLv2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_SSL_CONNECT_ERROR</name></expr>;</return>

<default>default:</default>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Unrecognized parameter passed via CURLOPT_SSLVERSION"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_SSL_CONNECT_ERROR</name></expr>;</return>

</block_content>}</block></switch>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>gnutls_protocol_set_priority</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>protocol_priority</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>!=</operator> <name>GNUTLS_E_SUCCESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Did you pass a valid GnuTLS cipher list?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_SSL_CONNECT_ERROR</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<switch>switch<condition>(<expr><call><name>SSL_CONN_CONFIG</name><argument_list>(<argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<case>case <expr><name>CURL_SSLVERSION_SSLv3</name></expr>:</case>

<expr_stmt><expr><name>prioritylist</name> <operator>=</operator> <name>GNUTLS_CIPHERS</name> <literal type="string">":-VERS-TLS-ALL:+VERS-SSL3.0"</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>CURL_SSLVERSION_DEFAULT</name></expr>:</case>

<case>case <expr><name>CURL_SSLVERSION_TLSv1</name></expr>:</case>

<expr_stmt><expr><name>prioritylist</name> <operator>=</operator> <name>GNUTLS_CIPHERS</name> <literal type="string">":-VERS-SSL3.0:"</literal>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAS_TLS13</name></expr></argument>)</argument_list></call></expr></cpp:if>
<literal type="string">"+VERS-TLS1.3:"</literal>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>GNUTLS_SRP</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>CURL_SSLVERSION_TLSv1_0</name></expr>:</case>

<case>case <expr><name>CURL_SSLVERSION_TLSv1_1</name></expr>:</case>

<case>case <expr><name>CURL_SSLVERSION_TLSv1_2</name></expr>:</case>

<case>case <expr><name>CURL_SSLVERSION_TLSv1_3</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><call><name>set_ssl_version_min_max</name><argument_list>(<argument><expr><operator>&amp;</operator><name>prioritylist</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name> <operator>!=</operator> <name>CURLE_OK</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>CURL_SSLVERSION_SSLv2</name></expr>:</case>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"GnuTLS does not support SSLv2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_SSL_CONNECT_ERROR</name></expr>;</return>

<default>default:</default>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Unrecognized parameter passed via CURLOPT_SSLVERSION"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_SSL_CONNECT_ERROR</name></expr>;</return>

</block_content>}</block></switch>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>gnutls_priority_set_direct</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>prioritylist</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>rc</name> <operator>==</operator> <name>GNUTLS_E_INVALID_REQUEST</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>err</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>GNUTLS_SRP</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>validprioritylen</name> <init>= <expr><call><name>curlx_uztosi</name><argument_list>(<argument><expr><name>err</name> <operator>-</operator> <name>prioritylist</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>prioritycopy</name> <init>= <expr><call><name>strdup</name><argument_list>(<argument><expr><name>prioritylist</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>prioritycopy</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"This GnuTLS does not support SRP\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>validprioritylen</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>prioritycopy</name><index>[<expr><name>validprioritylen</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>gnutls_priority_set_direct</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>prioritycopy</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>prioritycopy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>!=</operator> <name>GNUTLS_E_SUCCESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Error %d setting GnuTLS cipher list starting with %s"</literal></expr></argument>,

<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_SSL_CONNECT_ERROR</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAS_ALPN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>tls_enable_alpn</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>cur</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>gnutls_datum_t</name></type> <name><name>protocols</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_NGHTTP2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>httpversion</name></name> <operator>&gt;=</operator> <name>CURL_HTTP_VERSION_2</name> <operator>&amp;&amp;</operator>

<operator>(</operator><operator>!</operator><call><name>SSL_IS_PROXY</name><argument_list>()</argument_list></call> <operator>||</operator> <operator>!</operator><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>tunnel_proxy</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>protocols</name><index>[<expr><name>cur</name></expr>]</index></name><operator>.</operator><name>data</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>NGHTTP2_PROTO_VERSION_ID</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>protocols</name><index>[<expr><name>cur</name></expr>]</index></name><operator>.</operator><name>size</name> <operator>=</operator> <name>NGHTTP2_PROTO_VERSION_ID_LEN</name></expr>;</expr_stmt>

<expr_stmt><expr><name>cur</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"ALPN, offering %s\n"</literal></expr></argument>, <argument><expr><name>NGHTTP2_PROTO_VERSION_ID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>protocols</name><index>[<expr><name>cur</name></expr>]</index></name><operator>.</operator><name>data</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>ALPN_HTTP_1_1</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>protocols</name><index>[<expr><name>cur</name></expr>]</index></name><operator>.</operator><name>size</name> <operator>=</operator> <name>ALPN_HTTP_1_1_LENGTH</name></expr>;</expr_stmt>

<expr_stmt><expr><name>cur</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"ALPN, offering %s\n"</literal></expr></argument>, <argument><expr><name>ALPN_HTTP_1_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gnutls_alpn_set_protocols</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>protocols</name></expr></argument>, <argument><expr><name>cur</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if<condition>(<expr><call><name>SSL_SET_OPTION</name><argument_list>(<argument><expr><name>cert</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>SSL_SET_OPTION</name><argument_list>(<argument><expr><name>key_passwd</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_GNUTLS_CERTIFICATE_SET_X509_KEY_FILE2</name></expr></cpp:if>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>supported_key_encryption_algorithms</name> <init>=

<expr><name>GNUTLS_PKCS_USE_PKCS12_3DES</name> <operator>|</operator> <name>GNUTLS_PKCS_USE_PKCS12_ARCFOUR</name> <operator>|</operator>

<name>GNUTLS_PKCS_USE_PKCS12_RC2_40</name> <operator>|</operator> <name>GNUTLS_PKCS_USE_PBES2_3DES</name> <operator>|</operator>

<name>GNUTLS_PKCS_USE_PBES2_AES_128</name> <operator>|</operator> <name>GNUTLS_PKCS_USE_PBES2_AES_192</name> <operator>|</operator>

<name>GNUTLS_PKCS_USE_PBES2_AES_256</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>gnutls_certificate_set_x509_key_file2</name><argument_list>(

<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>cred</name></name></expr></argument>,

<argument><expr><call><name>SSL_SET_OPTION</name><argument_list>(<argument><expr><name>cert</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><ternary><condition><expr><call><name>SSL_SET_OPTION</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr> ?</condition><then>

<expr><call><name>SSL_SET_OPTION</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>SSL_SET_OPTION</name><argument_list>(<argument><expr><name>cert</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>,

<argument><expr><call><name>do_file_type</name><argument_list>(<argument><expr><call><name>SSL_SET_OPTION</name><argument_list>(<argument><expr><name>cert_type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>SSL_SET_OPTION</name><argument_list>(<argument><expr><name>key_passwd</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>supported_key_encryption_algorithms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>!=</operator> <name>GNUTLS_E_SUCCESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>,

<argument><expr><literal type="string">"error reading X.509 potentially-encrypted key file: %s"</literal></expr></argument>,

<argument><expr><call><name>gnutls_strerror</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_SSL_CONNECT_ERROR</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"gnutls lacks support for encrypted key files"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_SSL_CONNECT_ERROR</name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if>

<else>else <block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>gnutls_certificate_set_x509_key_file</name><argument_list>(

<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>cred</name></name></expr></argument>,

<argument><expr><call><name>SSL_SET_OPTION</name><argument_list>(<argument><expr><name>cert</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><ternary><condition><expr><call><name>SSL_SET_OPTION</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr> ?</condition><then>

<expr><call><name>SSL_SET_OPTION</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>SSL_SET_OPTION</name><argument_list>(<argument><expr><name>cert</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>,

<argument><expr><call><name>do_file_type</name><argument_list>(<argument><expr><call><name>SSL_SET_OPTION</name><argument_list>(<argument><expr><name>cert_type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call> <operator>!=</operator>

<name>GNUTLS_E_SUCCESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"error reading X.509 key or certificate file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_SSL_CONNECT_ERROR</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_TLS_SRP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><call><name>SSL_SET_OPTION</name><argument_list>(<argument><expr><name>authtype</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CURL_TLSAUTH_SRP</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>gnutls_credentials_set</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>GNUTLS_CRD_SRP</name></expr></argument>,

<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>srp_client_cred</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>!=</operator> <name>GNUTLS_E_SUCCESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"gnutls_credentials_set() failed: %s"</literal></expr></argument>, <argument><expr><call><name>gnutls_strerror</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_SSL_CONNECT_ERROR</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<block>{<block_content>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>gnutls_credentials_set</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>GNUTLS_CRD_CERTIFICATE</name></expr></argument>,

<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>cred</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>!=</operator> <name>GNUTLS_E_SUCCESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"gnutls_credentials_set() failed: %s"</literal></expr></argument>, <argument><expr><call><name>gnutls_strerror</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_SSL_CONNECT_ERROR</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>proxy_ssl</name><index>[<expr><name>sockindex</name></expr>]</index></name><operator>.</operator><name>use</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>transport_ptr</name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>proxy_ssl</name><index>[<expr><name>sockindex</name></expr>]</index></name><operator>.</operator><name><name>backend</name><operator>-&gt;</operator><name>session</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>gnutls_transport_push</name> <operator>=</operator> <name>Curl_gtls_push_ssl</name></expr>;</expr_stmt>

<expr_stmt><expr><name>gnutls_transport_pull</name> <operator>=</operator> <name>Curl_gtls_pull_ssl</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>transport_ptr</name> <operator>=</operator> <operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>sock</name><index>[<expr><name>sockindex</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>gnutls_transport_push</name> <operator>=</operator> <name>Curl_gtls_push</name></expr>;</expr_stmt>

<expr_stmt><expr><name>gnutls_transport_pull</name> <operator>=</operator> <name>Curl_gtls_pull</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>gnutls_transport_set_ptr</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>transport_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gnutls_transport_set_push_function</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>gnutls_transport_push</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gnutls_transport_set_pull_function</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>gnutls_transport_pull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gnutls_transport_set_lowat</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAS_OCSP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><call><name>SSL_CONN_CONFIG</name><argument_list>(<argument><expr><name>verifystatus</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>gnutls_ocsp_status_request_enable_client</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>!=</operator> <name>GNUTLS_E_SUCCESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"gnutls_ocsp_status_request_enable_client() failed: %d"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_SSL_CONNECT_ERROR</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if<condition>(<expr><call><name>SSL_SET_OPTION</name><argument_list>(<argument><expr><name><name>primary</name><operator>.</operator><name>sessionid</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ssl_sessionid</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>ssl_idsize</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>Curl_ssl_sessionid_lock</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>Curl_ssl_getsessionid</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ssl_sessionid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ssl_idsize</name></expr></argument>, <argument><expr><name>sockindex</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>gnutls_session_set_data</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>ssl_sessionid</name></expr></argument>, <argument><expr><name>ssl_idsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"SSL re-using session ID\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>Curl_ssl_sessionid_unlock</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>pkp_pin_peer_pubkey</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><name>gnutls_x509_crt_t</name></type> <name>cert</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pinnedpubkey</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>len1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>len2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buff1</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>gnutls_pubkey_t</name></type> <name>key</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_SSL_PINNEDPUBKEYNOTMATCH</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>NULL</name> <operator>==</operator> <name>pinnedpubkey</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_OK</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>NULL</name> <operator>==</operator> <name>cert</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

<do>do <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>gnutls_pubkey_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>gnutls_pubkey_import_x509</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>cert</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>gnutls_pubkey_export</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>GNUTLS_X509_FMT_DER</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>ret</name> <operator>!=</operator> <name>GNUTLS_E_SHORT_MEMORY_BUFFER</name> <operator>||</operator> <name>len1</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>buff1</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>len1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>NULL</name> <operator>==</operator> <name>buff1</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>len2</name> <operator>=</operator> <name>len1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>gnutls_pubkey_export</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>GNUTLS_X509_FMT_DER</name></expr></argument>, <argument><expr><name>buff1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>len1</name> <operator>!=</operator> <name>len2</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_pin_peer_pubkey</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>pinnedpubkey</name></expr></argument>, <argument><expr><name>buff1</name></expr></argument>, <argument><expr><name>len1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block> while<condition>(<expr><literal type="number">0</literal></expr>)</condition>;</do>

<if_stmt><if>if<condition>(<expr><name>NULL</name> <operator>!=</operator> <name>key</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gnutls_pubkey_deinit</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name>buff1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>Curl_recv</name></type> <name>gtls_recv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>Curl_send</name></type> <name>gtls_send</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>CURLcode</name></type>

<name>gtls_connect_step3</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>sockindex</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>cert_list_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>gnutls_datum_t</name> <modifier>*</modifier></type><name>chainp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>verify_status</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>gnutls_x509_crt_t</name></type> <name>x509_cert</name></decl>, <decl><type ref="prev"/><name>x509_issuer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>gnutls_datum_t</name></type> <name>issuerp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>certbuf</name><index>[<expr><literal type="number">256</literal></expr>]</index></name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>time_t</name></type> <name>certclock</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ssl_connect_data</name></name> <modifier>*</modifier></type><name>connssl</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>ssl</name><index>[<expr><name>sockindex</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ssl_backend_data</name></name> <modifier>*</modifier></type><name>backend</name> <init>= <expr><name><name>connssl</name><operator>-&gt;</operator><name>backend</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>gnutls_session_t</name></type> <name>session</name> <init>= <expr><name><name>backend</name><operator>-&gt;</operator><name>session</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAS_ALPN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>gnutls_datum_t</name></type> <name>proto</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_VERBOSE_STRINGS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>algo</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>bits</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>gnutls_protocol_t</name></type> <name>version</name> <init>= <expr><call><name>gnutls_protocol_get_version</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>hostname</name> <init>= <expr><ternary><condition><expr><call><name>SSL_IS_PROXY</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><name><name>conn</name><operator>-&gt;</operator><name>http_proxy</name><operator>.</operator><name>host</name><operator>.</operator><name>name</name></name></expr> </then><else>:

<expr><name><name>conn</name><operator>-&gt;</operator><name>host</name><operator>.</operator><name>name</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>gnutls_cipher_suite_get_name</name><argument_list>(<argument><expr><call><name>gnutls_kx_get</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>gnutls_cipher_get</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>gnutls_mac_get</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"SSL connection using %s / %s\n"</literal></expr></argument>,

<argument><expr><call><name>gnutls_protocol_get_name</name><argument_list>(<argument><expr><name>version</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>chainp</name> <operator>=</operator> <call><name>gnutls_certificate_get_peers</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cert_list_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>chainp</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>SSL_CONN_CONFIG</name><argument_list>(<argument><expr><name>verifypeer</name></expr></argument>)</argument_list></call> <operator>||</operator>

<call><name>SSL_CONN_CONFIG</name><argument_list>(<argument><expr><name>verifyhost</name></expr></argument>)</argument_list></call> <operator>||</operator>

<call><name>SSL_SET_OPTION</name><argument_list>(<argument><expr><name>issuercert</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_TLS_SRP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><call><name>SSL_SET_OPTION</name><argument_list>(<argument><expr><name>authtype</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CURL_TLSAUTH_SRP</name>

<operator>&amp;&amp;</operator> <call><name>SSL_SET_OPTION</name><argument_list>(<argument><expr><name>username</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name>

<operator>&amp;&amp;</operator> <operator>!</operator><call><name>SSL_CONN_CONFIG</name><argument_list>(<argument><expr><name>verifypeer</name></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <call><name>gnutls_cipher_get</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

</block_content>}</block></if>

<else>else <block>{<block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"failed to get server cert"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_PEER_FAILED_VERIFICATION</name></expr>;</return>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_TLS_SRP</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></else></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"\t common name: WARNING couldn't obtain\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>ssl</name><operator>.</operator><name>certinfo</name></name> <operator>&amp;&amp;</operator> <name>chainp</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_ssl_init_certinfo</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>cert_list_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>cert_list_size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>beg</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <name><name>chainp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>end</name> <init>= <expr><name>beg</name> <operator>+</operator> <name><name>chainp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_extract_certinfo</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>beg</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>SSL_CONN_CONFIG</name><argument_list>(<argument><expr><name>verifypeer</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>gnutls_certificate_verify_peers2</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>verify_status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"server cert verify failed: %d"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_SSL_CONNECT_ERROR</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>verify_status</name> <operator>&amp;</operator> <name>GNUTLS_CERT_INVALID</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>SSL_CONN_CONFIG</name><argument_list>(<argument><expr><name>verifypeer</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"server certificate verification failed. CAfile: %s "</literal>

<literal type="string">"CRLfile: %s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><call><name>SSL_CONN_CONFIG</name><argument_list>(<argument><expr><name>CAfile</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><call><name>SSL_CONN_CONFIG</name><argument_list>(<argument><expr><name>CAfile</name></expr></argument>)</argument_list></call></expr></then><else>:

<expr><literal type="string">"none"</literal></expr></else></ternary></expr></argument>,

<argument><expr><ternary><condition><expr><call><name>SSL_SET_OPTION</name><argument_list>(<argument><expr><name>CRLfile</name></expr></argument>)</argument_list></call></expr>?</condition><then><expr><call><name>SSL_SET_OPTION</name><argument_list>(<argument><expr><name>CRLfile</name></expr></argument>)</argument_list></call></expr></then><else>:<expr><literal type="string">"none"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_PEER_FAILED_VERIFICATION</name></expr>;</return>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"\t server certificate verification FAILED\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"\t server certificate verification OK\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"\t server certificate verification SKIPPED\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAS_OCSP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><call><name>SSL_CONN_CONFIG</name><argument_list>(<argument><expr><name>verifystatus</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>gnutls_ocsp_status_request_is_checked</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>gnutls_datum_t</name></type> <name>status_request</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>gnutls_ocsp_resp_t</name></type> <name>ocsp_resp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>gnutls_ocsp_cert_status_t</name></type> <name>status</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>gnutls_x509_crl_reason_t</name></type> <name>reason</name></decl>;</decl_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>gnutls_ocsp_status_request_get</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>status_request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"\t server certificate status verification FAILED\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>==</operator> <name>GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"No OCSP response received"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_SSL_INVALIDCERTSTATUS</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Invalid OCSP response received"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_SSL_INVALIDCERTSTATUS</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>gnutls_ocsp_resp_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ocsp_resp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>gnutls_ocsp_resp_import</name><argument_list>(<argument><expr><name>ocsp_resp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>status_request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Invalid OCSP response received"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_SSL_INVALIDCERTSTATUS</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>gnutls_ocsp_resp_get_single</name><argument_list>(<argument><expr><name>ocsp_resp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>status</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>reason</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch<condition>(<expr><name>status</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>GNUTLS_OCSP_CERT_GOOD</name></expr>:</case>

<break>break;</break>

<case>case <expr><name>GNUTLS_OCSP_CERT_REVOKED</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>crl_reason</name></decl>;</decl_stmt>

<switch>switch<condition>(<expr><name>reason</name></expr>)</condition> <block>{<block_content>

<default>default:</default>

<case>case <expr><name>GNUTLS_X509_CRLREASON_UNSPECIFIED</name></expr>:</case>

<expr_stmt><expr><name>crl_reason</name> <operator>=</operator> <literal type="string">"unspecified reason"</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>GNUTLS_X509_CRLREASON_KEYCOMPROMISE</name></expr>:</case>

<expr_stmt><expr><name>crl_reason</name> <operator>=</operator> <literal type="string">"private key compromised"</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>GNUTLS_X509_CRLREASON_CACOMPROMISE</name></expr>:</case>

<expr_stmt><expr><name>crl_reason</name> <operator>=</operator> <literal type="string">"CA compromised"</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>GNUTLS_X509_CRLREASON_AFFILIATIONCHANGED</name></expr>:</case>

<expr_stmt><expr><name>crl_reason</name> <operator>=</operator> <literal type="string">"affiliation has changed"</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>GNUTLS_X509_CRLREASON_SUPERSEDED</name></expr>:</case>

<expr_stmt><expr><name>crl_reason</name> <operator>=</operator> <literal type="string">"certificate superseded"</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>GNUTLS_X509_CRLREASON_CESSATIONOFOPERATION</name></expr>:</case>

<expr_stmt><expr><name>crl_reason</name> <operator>=</operator> <literal type="string">"operation has ceased"</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>GNUTLS_X509_CRLREASON_CERTIFICATEHOLD</name></expr>:</case>

<expr_stmt><expr><name>crl_reason</name> <operator>=</operator> <literal type="string">"certificate is on hold"</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>GNUTLS_X509_CRLREASON_REMOVEFROMCRL</name></expr>:</case>

<expr_stmt><expr><name>crl_reason</name> <operator>=</operator> <literal type="string">"will be removed from delta CRL"</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>GNUTLS_X509_CRLREASON_PRIVILEGEWITHDRAWN</name></expr>:</case>

<expr_stmt><expr><name>crl_reason</name> <operator>=</operator> <literal type="string">"privilege withdrawn"</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>GNUTLS_X509_CRLREASON_AACOMPROMISE</name></expr>:</case>

<expr_stmt><expr><name>crl_reason</name> <operator>=</operator> <literal type="string">"AA compromised"</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Server certificate was revoked: %s"</literal></expr></argument>, <argument><expr><name>crl_reason</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

<default>default:</default>

<case>case <expr><name>GNUTLS_OCSP_CERT_UNKNOWN</name></expr>:</case>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Server certificate status is unknown"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>gnutls_ocsp_resp_deinit</name><argument_list>(<argument><expr><name>ocsp_resp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_SSL_INVALIDCERTSTATUS</name></expr>;</return>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"\t server certificate status verification OK\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"\t server certificate status verification SKIPPED\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>gnutls_x509_crt_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>x509_cert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>chainp</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gnutls_x509_crt_import</name><argument_list>(<argument><expr><name>x509_cert</name></expr></argument>, <argument><expr><name>chainp</name></expr></argument>, <argument><expr><name>GNUTLS_X509_FMT_DER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>SSL_SET_OPTION</name><argument_list>(<argument><expr><name>issuercert</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>gnutls_x509_crt_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>x509_issuer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>issuerp</name> <operator>=</operator> <call><name>load_file</name><argument_list>(<argument><expr><call><name>SSL_SET_OPTION</name><argument_list>(<argument><expr><name>issuercert</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gnutls_x509_crt_import</name><argument_list>(<argument><expr><name>x509_issuer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>issuerp</name></expr></argument>, <argument><expr><name>GNUTLS_X509_FMT_PEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>gnutls_x509_crt_check_issuer</name><argument_list>(<argument><expr><name>x509_cert</name></expr></argument>, <argument><expr><name>x509_issuer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gnutls_x509_crt_deinit</name><argument_list>(<argument><expr><name>x509_issuer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>unload_file</name><argument_list>(<argument><expr><name>issuerp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"server certificate issuer check failed (IssuerCert: %s)"</literal></expr></argument>,

<argument><expr><ternary><condition><expr><call><name>SSL_SET_OPTION</name><argument_list>(<argument><expr><name>issuercert</name></expr></argument>)</argument_list></call></expr>?</condition><then><expr><call><name>SSL_SET_OPTION</name><argument_list>(<argument><expr><name>issuercert</name></expr></argument>)</argument_list></call></expr></then><else>:<expr><literal type="string">"none"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gnutls_x509_crt_deinit</name><argument_list>(<argument><expr><name>x509_cert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_SSL_ISSUER_ERROR</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"\t server certificate issuer check OK (Issuer Cert: %s)\n"</literal></expr></argument>,

<argument><expr><ternary><condition><expr><call><name>SSL_SET_OPTION</name><argument_list>(<argument><expr><name>issuercert</name></expr></argument>)</argument_list></call></expr>?</condition><then><expr><call><name>SSL_SET_OPTION</name><argument_list>(<argument><expr><name>issuercert</name></expr></argument>)</argument_list></call></expr></then><else>:<expr><literal type="string">"none"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>certbuf</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>gnutls_x509_crt_get_dn_by_oid</name><argument_list>(<argument><expr><name>x509_cert</name></expr></argument>, <argument><expr><name>GNUTLS_OID_X520_COMMON_NAME</name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, 

<argument><expr><name>FALSE</name></expr></argument>,

<argument><expr><name>certbuf</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"error fetching CN from cert:%s\n"</literal></expr></argument>,

<argument><expr><call><name>gnutls_strerror</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>gnutls_x509_crt_check_hostname</name><argument_list>(<argument><expr><name>x509_cert</name></expr></argument>, <argument><expr><name>hostname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GNUTLS_VERSION_NUMBER</name> <operator>&lt;</operator> <literal type="number">0x030306</literal></expr></cpp:if>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>rc</name></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_IPV6</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>use_addr</name></cpp:macro> <cpp:value>in6_addr</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>use_addr</name></cpp:macro> <cpp:value>in_addr</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>addrbuf</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>use_addr</name></expr></argument>)</argument_list></sizeof></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>addrlen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><call><name>Curl_inet_pton</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><name>hostname</name></expr></argument>, <argument><expr><name>addrbuf</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>addrlen</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_IPV6</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if<condition>(<expr><call><name>Curl_inet_pton</name><argument_list>(<argument><expr><name>AF_INET6</name></expr></argument>, <argument><expr><name>hostname</name></expr></argument>, <argument><expr><name>addrbuf</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>addrlen</name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if<condition>(<expr><name>addrlen</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>certaddr</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>use_addr</name></expr></argument>)</argument_list></sizeof></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>certaddrlen</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>certaddr</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>gnutls_x509_crt_get_subject_alt_name</name><argument_list>(<argument><expr><name>x509_cert</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>certaddr</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>certaddrlen</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>ret</name> <operator>==</operator> <name>GNUTLS_E_SHORT_MEMORY_BUFFER</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>ret</name> <operator>!=</operator> <name>GNUTLS_SAN_IPADDRESS</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>certaddrlen</name> <operator>==</operator> <name>addrlen</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name>addrbuf</name></expr></argument>, <argument><expr><name>certaddr</name></expr></argument>, <argument><expr><name>addrlen</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>rc</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>dispname</name> <init>= <expr><ternary><condition><expr><call><name>SSL_IS_PROXY</name><argument_list>()</argument_list></call></expr> ?</condition><then>

<expr><name><name>conn</name><operator>-&gt;</operator><name>http_proxy</name><operator>.</operator><name>host</name><operator>.</operator><name>dispname</name></name></expr> </then><else>: <expr><name><name>conn</name><operator>-&gt;</operator><name>host</name><operator>.</operator><name>dispname</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><call><name>SSL_CONN_CONFIG</name><argument_list>(<argument><expr><name>verifyhost</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"SSL: certificate subject name (%s) does not match "</literal>

<literal type="string">"target host name '%s'"</literal></expr></argument>, <argument><expr><name>certbuf</name></expr></argument>, <argument><expr><name>dispname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gnutls_x509_crt_deinit</name><argument_list>(<argument><expr><name>x509_cert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_PEER_FAILED_VERIFICATION</name></expr>;</return>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"\t common name: %s (does not match '%s')\n"</literal></expr></argument>,

<argument><expr><name>certbuf</name></expr></argument>, <argument><expr><name>dispname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"\t common name: %s (matched)\n"</literal></expr></argument>, <argument><expr><name>certbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>certclock</name> <operator>=</operator> <call><name>gnutls_x509_crt_get_expiration_time</name><argument_list>(<argument><expr><name>x509_cert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>certclock</name> <operator>==</operator> <operator>(</operator><name>time_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>SSL_CONN_CONFIG</name><argument_list>(<argument><expr><name>verifypeer</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"server cert expiration date verify failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gnutls_x509_crt_deinit</name><argument_list>(<argument><expr><name>x509_cert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_SSL_CONNECT_ERROR</name></expr>;</return>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"\t server certificate expiration date verify FAILED\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>certclock</name> <operator>&lt;</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>SSL_CONN_CONFIG</name><argument_list>(<argument><expr><name>verifypeer</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"server certificate expiration date has passed."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gnutls_x509_crt_deinit</name><argument_list>(<argument><expr><name>x509_cert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_PEER_FAILED_VERIFICATION</name></expr>;</return>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"\t server certificate expiration date FAILED\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"\t server certificate expiration date OK\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>certclock</name> <operator>=</operator> <call><name>gnutls_x509_crt_get_activation_time</name><argument_list>(<argument><expr><name>x509_cert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>certclock</name> <operator>==</operator> <operator>(</operator><name>time_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>SSL_CONN_CONFIG</name><argument_list>(<argument><expr><name>verifypeer</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"server cert activation date verify failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gnutls_x509_crt_deinit</name><argument_list>(<argument><expr><name>x509_cert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_SSL_CONNECT_ERROR</name></expr>;</return>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"\t server certificate activation date verify FAILED\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>certclock</name> <operator>&gt;</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>SSL_CONN_CONFIG</name><argument_list>(<argument><expr><name>verifypeer</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"server certificate not activated yet."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gnutls_x509_crt_deinit</name><argument_list>(<argument><expr><name>x509_cert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_PEER_FAILED_VERIFICATION</name></expr>;</return>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"\t server certificate activation date FAILED\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"\t server certificate activation date OK\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <ternary><condition><expr><call><name>SSL_IS_PROXY</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_SSL_PINNEDPUBLICKEY_PROXY</name></expr>]</index></name></expr> </then><else>:

<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_SSL_PINNEDPUBLICKEY_ORIG</name></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>ptr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>pkp_pin_peer_pubkey</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>x509_cert</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name> <operator>!=</operator> <name>CURLE_OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"SSL: public key does not match pinned public key!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gnutls_x509_crt_deinit</name><argument_list>(<argument><expr><name>x509_cert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_VERBOSE_STRINGS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>algo</name> <operator>=</operator> <call><name>gnutls_x509_crt_get_pk_algorithm</name><argument_list>(<argument><expr><name>x509_cert</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"\t certificate public key: %s\n"</literal></expr></argument>,

<argument><expr><call><name>gnutls_pk_algorithm_get_name</name><argument_list>(<argument><expr><name>algo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"\t certificate version: #%d\n"</literal></expr></argument>,

<argument><expr><call><name>gnutls_x509_crt_get_version</name><argument_list>(<argument><expr><name>x509_cert</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>certbuf</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gnutls_x509_crt_get_dn</name><argument_list>(<argument><expr><name>x509_cert</name></expr></argument>, <argument><expr><name>certbuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"\t subject: %s\n"</literal></expr></argument>, <argument><expr><name>certbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>certclock</name> <operator>=</operator> <call><name>gnutls_x509_crt_get_activation_time</name><argument_list>(<argument><expr><name>x509_cert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>showtime</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"start date"</literal></expr></argument>, <argument><expr><name>certclock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>certclock</name> <operator>=</operator> <call><name>gnutls_x509_crt_get_expiration_time</name><argument_list>(<argument><expr><name>x509_cert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>showtime</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"expire date"</literal></expr></argument>, <argument><expr><name>certclock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>certbuf</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gnutls_x509_crt_get_issuer_dn</name><argument_list>(<argument><expr><name>x509_cert</name></expr></argument>, <argument><expr><name>certbuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"\t issuer: %s\n"</literal></expr></argument>, <argument><expr><name>certbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>gnutls_x509_crt_deinit</name><argument_list>(<argument><expr><name>x509_cert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAS_ALPN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>tls_enable_alpn</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>gnutls_alpn_get_selected_protocol</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>proto</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"ALPN, server accepted to use %.*s\n"</literal></expr></argument>, <argument><expr><name><name>proto</name><operator>.</operator><name>size</name></name></expr></argument>,

<argument><expr><name><name>proto</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_NGHTTP2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name><name>proto</name><operator>.</operator><name>size</name></name> <operator>==</operator> <name>NGHTTP2_PROTO_VERSION_ID_LEN</name> <operator>&amp;&amp;</operator>

<operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name>NGHTTP2_PROTO_VERSION_ID</name></expr></argument>, <argument><expr><name><name>proto</name><operator>.</operator><name>data</name></name></expr></argument>,

<argument><expr><name>NGHTTP2_PROTO_VERSION_ID_LEN</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>negnpn</name></name> <operator>=</operator> <name>CURL_HTTP_VERSION_2</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

if<condition>(<expr><name><name>proto</name><operator>.</operator><name>size</name></name> <operator>==</operator> <name>ALPN_HTTP_1_1_LENGTH</name> <operator>&amp;&amp;</operator>

<operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name>ALPN_HTTP_1_1</name></expr></argument>, <argument><expr><name><name>proto</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name>ALPN_HTTP_1_1_LENGTH</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>negnpn</name></name> <operator>=</operator> <name>CURL_HTTP_VERSION_1_1</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"ALPN, server did not agree to a protocol\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>Curl_multiuse_state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>conn</name><operator>-&gt;</operator><name>negnpn</name></name> <operator>==</operator> <name>CURL_HTTP_VERSION_2</name></expr> ?</condition><then>

<expr><name>BUNDLE_MULTIPLEX</name></expr> </then><else>: <expr><name>BUNDLE_NO_MULTIUSE</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>ssl</name><index>[<expr><name>sockindex</name></expr>]</index></name><operator>.</operator><name>state</name> <operator>=</operator> <name>ssl_connection_complete</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>recv</name><index>[<expr><name>sockindex</name></expr>]</index></name> <operator>=</operator> <name>gtls_recv</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>send</name><index>[<expr><name>sockindex</name></expr>]</index></name> <operator>=</operator> <name>gtls_send</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>SSL_SET_OPTION</name><argument_list>(<argument><expr><name><name>primary</name><operator>.</operator><name>sessionid</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>connect_sessionid</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>connect_idsize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>gnutls_session_get_data</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>connect_idsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>connect_sessionid</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>connect_idsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if<condition>(<expr><name>connect_sessionid</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>incache</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ssl_sessionid</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>gnutls_session_get_data</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>connect_sessionid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>connect_idsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_ssl_sessionid_lock</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>incache</name> <operator>=</operator> <operator>!</operator><operator>(</operator><call><name>Curl_ssl_getsessionid</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ssl_sessionid</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><name>sockindex</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>incache</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>Curl_ssl_delsessionid</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>ssl_sessionid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_ssl_addsessionid</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>connect_sessionid</name></expr></argument>, <argument><expr><name>connect_idsize</name></expr></argument>,

<argument><expr><name>sockindex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_ssl_sessionid_unlock</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>connect_sessionid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_OUT_OF_MEMORY</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_OUT_OF_MEMORY</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type>

<name>gtls_connect_common</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>sockindex</name></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>nonblocking</name></decl></parameter>,

<parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>done</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ssl_connect_data</name></name> <modifier>*</modifier></type><name>connssl</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>ssl</name><index>[<expr><name>sockindex</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>ssl_connect_1</name> <operator>==</operator> <name><name>connssl</name><operator>-&gt;</operator><name>connecting_state</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>gtls_connect_step1</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>sockindex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>rc</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>handshake</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>sockindex</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>nonblocking</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>rc</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>ssl_connect_1</name> <operator>==</operator> <name><name>connssl</name><operator>-&gt;</operator><name>connecting_state</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>gtls_connect_step3</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>sockindex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>rc</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>done</name> <operator>=</operator> <name>ssl_connect_1</name> <operator>==</operator> <name><name>connssl</name><operator>-&gt;</operator><name>connecting_state</name></name></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>Curl_gtls_connect_nonblocking</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>sockindex</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>done</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>gtls_connect_common</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>sockindex</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>done</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>Curl_gtls_connect</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sockindex</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>done</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>gtls_connect_common</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>sockindex</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>done</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>DEBUGASSERT</name><argument_list>(<argument><expr><name>done</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>Curl_gtls_data_pending</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>connindex</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ssl_connect_data</name></name> <modifier>*</modifier></type><name>connssl</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>ssl</name><index>[<expr><name>connindex</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>res</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ssl_backend_data</name></name> <modifier>*</modifier></type><name>backend</name> <init>= <expr><name><name>connssl</name><operator>-&gt;</operator><name>backend</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>backend</name><operator>-&gt;</operator><name>session</name></name> <operator>&amp;&amp;</operator>

<literal type="number">0</literal> <operator>!=</operator> <call><name>gnutls_record_check_pending</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>session</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>res</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>connssl</name> <operator>=</operator> <operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>proxy_ssl</name><index>[<expr><name>connindex</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>backend</name><operator>-&gt;</operator><name>session</name></name> <operator>&amp;&amp;</operator>

<literal type="number">0</literal> <operator>!=</operator> <call><name>gnutls_record_check_pending</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>session</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>res</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ssize_t</name></type> <name>gtls_send</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>sockindex</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>mem</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>,

<parameter><decl><type><name>CURLcode</name> <modifier>*</modifier></type><name>curlcode</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>ssl_connect_data</name></name> <modifier>*</modifier></type><name>connssl</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>ssl</name><index>[<expr><name>sockindex</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ssl_backend_data</name></name> <modifier>*</modifier></type><name>backend</name> <init>= <expr><name><name>connssl</name><operator>-&gt;</operator><name>backend</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>rc</name> <init>= <expr><call><name>gnutls_record_send</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>session</name></name></expr></argument>, <argument><expr><name>mem</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>curlcode</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>rc</name> <operator>==</operator> <name>GNUTLS_E_AGAIN</name><operator>)</operator></expr>

?</condition><then> <expr><name>CURLE_AGAIN</name></expr>

</then><else>: <expr><name>CURLE_SEND_ERROR</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>rc</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>close_one</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ssl_connect_data</name></name> <modifier>*</modifier></type><name>connssl</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>ssl_backend_data</name></name> <modifier>*</modifier></type><name>backend</name> <init>= <expr><name><name>connssl</name><operator>-&gt;</operator><name>backend</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>backend</name><operator>-&gt;</operator><name>session</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>gnutls_bye</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>session</name></name></expr></argument>, <argument><expr><name>GNUTLS_SHUT_WR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gnutls_deinit</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>session</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>backend</name><operator>-&gt;</operator><name>session</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>backend</name><operator>-&gt;</operator><name>cred</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>gnutls_certificate_free_credentials</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>cred</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>backend</name><operator>-&gt;</operator><name>cred</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_TLS_SRP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name><name>backend</name><operator>-&gt;</operator><name>srp_client_cred</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>gnutls_srp_free_client_credentials</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>srp_client_cred</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>backend</name><operator>-&gt;</operator><name>srp_client_cred</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Curl_gtls_close</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sockindex</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>close_one</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>ssl</name><index>[<expr><name>sockindex</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>close_one</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>proxy_ssl</name><index>[<expr><name>sockindex</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Curl_gtls_shutdown</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sockindex</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>ssl_connect_data</name></name> <modifier>*</modifier></type><name>connssl</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>ssl</name><index>[<expr><name>sockindex</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ssl_backend_data</name></name> <modifier>*</modifier></type><name>backend</name> <init>= <expr><name><name>connssl</name><operator>-&gt;</operator><name>backend</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>retval</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_FTP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>ftp_ccc</name></name> <operator>==</operator> <name>CURLFTPSSL_CCC_ACTIVE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gnutls_bye</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>session</name></name></expr></argument>, <argument><expr><name>GNUTLS_SHUT_WR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if<condition>(<expr><name><name>backend</name><operator>-&gt;</operator><name>session</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>result</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>done</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">120</literal></expr>]</index></name></decl>;</decl_stmt>

<while>while<condition>(<expr><operator>!</operator><name>done</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>what</name> <init>= <expr><call><name>SOCKET_READABLE</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>sock</name><index>[<expr><name>sockindex</name></expr>]</index></name></expr></argument>,

<argument><expr><name>SSL_SHUTDOWN_TIMEOUT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>what</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>gnutls_record_recv</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>session</name></name></expr></argument>,

<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch<condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case>

<expr_stmt><expr><name>done</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>GNUTLS_E_AGAIN</name></expr>:</case>

<case>case <expr><name>GNUTLS_E_INTERRUPTED</name></expr>:</case>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"GNUTLS_E_AGAIN || GNUTLS_E_INTERRUPTED\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>done</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><literal type="number">0</literal> <operator>==</operator> <name>what</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"SSL shutdown timeout"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>done</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"select/poll on SSL socket, errno: %d"</literal></expr></argument>, <argument><expr><name>SOCKERRNO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>done</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>gnutls_deinit</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>session</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>gnutls_certificate_free_credentials</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>cred</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_TLS_SRP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><call><name>SSL_SET_OPTION</name><argument_list>(<argument><expr><name>authtype</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CURL_TLSAUTH_SRP</name>

<operator>&amp;&amp;</operator> <call><name>SSL_SET_OPTION</name><argument_list>(<argument><expr><name>username</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gnutls_srp_free_client_credentials</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>srp_client_cred</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>backend</name><operator>-&gt;</operator><name>cred</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>backend</name><operator>-&gt;</operator><name>session</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><name>retval</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ssize_t</name></type> <name>gtls_recv</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, 

<parameter><decl><type><name>int</name></type> <name>num</name></decl></parameter>, 

<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, 

<parameter><decl><type><name>size_t</name></type> <name>buffersize</name></decl></parameter>, 

<parameter><decl><type><name>CURLcode</name> <modifier>*</modifier></type><name>curlcode</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>ssl_connect_data</name></name> <modifier>*</modifier></type><name>connssl</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>ssl</name><index>[<expr><name>num</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ssl_backend_data</name></name> <modifier>*</modifier></type><name>backend</name> <init>= <expr><name><name>connssl</name><operator>-&gt;</operator><name>backend</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>gnutls_record_recv</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>session</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buffersize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>ret</name> <operator>==</operator> <name>GNUTLS_E_AGAIN</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>ret</name> <operator>==</operator> <name>GNUTLS_E_INTERRUPTED</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>curlcode</name> <operator>=</operator> <name>CURLE_AGAIN</name></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>ret</name> <operator>==</operator> <name>GNUTLS_E_REHANDSHAKE</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><call><name>handshake</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>num</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>curlcode</name> <operator>=</operator> <name>result</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>curlcode</name> <operator>=</operator> <name>CURLE_AGAIN</name></expr>;</expr_stmt></block_content></block></else></if_stmt> 

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"GnuTLS recv error (%d): %s"</literal></expr></argument>,

<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>ret</name></expr></argument>, <argument><expr><call><name>gnutls_strerror</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>curlcode</name> <operator>=</operator> <name>CURLE_RECV_ERROR</name></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Curl_gtls_session_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type> <name>Curl_gtls_version</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>msnprintf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="string">"GnuTLS/%s"</literal></expr></argument>, <argument><expr><call><name>gnutls_check_version</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>USE_GNUTLS_NETTLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type> <name>Curl_gtls_seed</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>ssl_seeded</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>gcry_fast_random_poll</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>ssl_seeded</name> <operator>||</operator> <name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_SSL_RANDOM_FILE</name></expr>]</index></name> <operator>||</operator>

<name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_SSL_EGDSOCKET</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ssl_seeded</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>Curl_gtls_random</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>entropy</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>length</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_GNUTLS_NETTLE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>data</name></expr>;</expr_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>gnutls_rnd</name><argument_list>(<argument><expr><name>GNUTLS_RND_RANDOM</name></expr></argument>, <argument><expr><name>entropy</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><ternary><condition><expr><name>rc</name></expr>?</condition><then><expr><name>CURLE_FAILED_INIT</name></expr></then><else>:<expr><name>CURLE_OK</name></expr></else></ternary></expr>;</return>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_GNUTLS</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<if_stmt><if>if<condition>(<expr><name>data</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>Curl_gtls_seed</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<expr_stmt><expr><call><name>gcry_randomize</name><argument_list>(<argument><expr><name>entropy</name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><name>GCRY_STRONG_RANDOM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>Curl_gtls_md5sum</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>tmp</name></decl></parameter>, 

<parameter><decl><type><name>size_t</name></type> <name>tmplen</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>md5sum</name></decl></parameter>, 

<parameter><decl><type><name>size_t</name></type> <name>md5len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_GNUTLS_NETTLE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name><name>struct</name> <name>md5_ctx</name></name></type> <name>MD5pw</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>md5_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>MD5pw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>md5_update</name><argument_list>(<argument><expr><operator>&amp;</operator><name>MD5pw</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name>tmplen</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>md5_digest</name><argument_list>(<argument><expr><operator>&amp;</operator><name>MD5pw</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name>md5len</name></expr></argument>, <argument><expr><name>md5sum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_GNUTLS</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<decl_stmt><decl><type><name>gcry_md_hd_t</name></type> <name>MD5pw</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>gcry_md_open</name><argument_list>(<argument><expr><operator>&amp;</operator><name>MD5pw</name></expr></argument>, <argument><expr><name>GCRY_MD_MD5</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gcry_md_write</name><argument_list>(<argument><expr><name>MD5pw</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>tmplen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>md5sum</name></expr></argument>, <argument><expr><call><name>gcry_md_read</name><argument_list>(<argument><expr><name>MD5pw</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>md5len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gcry_md_close</name><argument_list>(<argument><expr><name>MD5pw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>Curl_gtls_sha256sum</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>tmp</name></decl></parameter>, 

<parameter><decl><type><name>size_t</name></type> <name>tmplen</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>sha256sum</name></decl></parameter>, 

<parameter><decl><type><name>size_t</name></type> <name>sha256len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_GNUTLS_NETTLE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name><name>struct</name> <name>sha256_ctx</name></name></type> <name>SHA256pw</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>sha256_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>SHA256pw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sha256_update</name><argument_list>(<argument><expr><operator>&amp;</operator><name>SHA256pw</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name>tmplen</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sha256_digest</name><argument_list>(<argument><expr><operator>&amp;</operator><name>SHA256pw</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name>sha256len</name></expr></argument>, <argument><expr><name>sha256sum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_GNUTLS</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<decl_stmt><decl><type><name>gcry_md_hd_t</name></type> <name>SHA256pw</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>gcry_md_open</name><argument_list>(<argument><expr><operator>&amp;</operator><name>SHA256pw</name></expr></argument>, <argument><expr><name>GCRY_MD_SHA256</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gcry_md_write</name><argument_list>(<argument><expr><name>SHA256pw</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>tmplen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>sha256sum</name></expr></argument>, <argument><expr><call><name>gcry_md_read</name><argument_list>(<argument><expr><name>SHA256pw</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>sha256len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gcry_md_close</name><argument_list>(<argument><expr><name>SHA256pw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>Curl_gtls_cert_status_request</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAS_OCSP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><name>TRUE</name></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<return>return <expr><name>FALSE</name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>Curl_gtls_get_internals</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ssl_connect_data</name></name> <modifier>*</modifier></type><name>connssl</name></decl></parameter>,

<parameter><decl><type><name>CURLINFO</name> <name>info</name></type> <name>UNUSED_PARAM</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>ssl_backend_data</name></name> <modifier>*</modifier></type><name>backend</name> <init>= <expr><name><name>connssl</name><operator>-&gt;</operator><name>backend</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>info</name></expr>;</expr_stmt>

<return>return <expr><name><name>backend</name><operator>-&gt;</operator><name>session</name></name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>Curl_ssl</name></name></type> <name>Curl_ssl_gnutls</name> <init>= <expr><block>{

<expr><block>{ <expr><name>CURLSSLBACKEND_GNUTLS</name></expr>, <expr><literal type="string">"gnutls"</literal></expr> }</block></expr>, 

<expr><name>SSLSUPP_CA_PATH</name> <operator>|</operator>

<name>SSLSUPP_CERTINFO</name> <operator>|</operator>

<name>SSLSUPP_PINNEDPUBKEY</name> <operator>|</operator>

<name>SSLSUPP_HTTPS_PROXY</name></expr>,

<expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>ssl_backend_data</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><name>Curl_gtls_init</name></expr>, 

<expr><name>Curl_gtls_cleanup</name></expr>, 

<expr><name>Curl_gtls_version</name></expr>, 

<expr><name>Curl_none_check_cxn</name></expr>, 

<expr><name>Curl_gtls_shutdown</name></expr>, 

<expr><name>Curl_gtls_data_pending</name></expr>, 

<expr><name>Curl_gtls_random</name></expr>, 

<expr><name>Curl_gtls_cert_status_request</name></expr>, 

<expr><name>Curl_gtls_connect</name></expr>, 

<expr><name>Curl_gtls_connect_nonblocking</name></expr>, 

<expr><name>Curl_gtls_get_internals</name></expr>, 

<expr><name>Curl_gtls_close</name></expr>, 

<expr><name>Curl_none_close_all</name></expr>, 

<expr><name>Curl_gtls_session_free</name></expr>, 

<expr><name>Curl_none_set_engine</name></expr>, 

<expr><name>Curl_none_set_engine_default</name></expr>, 

<expr><name>Curl_none_engines_list</name></expr>, 

<expr><name>Curl_none_false_start</name></expr>, 

<expr><name>Curl_gtls_md5sum</name></expr>, 

<expr><name>Curl_gtls_sha256sum</name></expr> 

}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</unit>
