<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\curl-analysis\_cppstats\curl\lib\vtls\mbedtls.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_setup.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_MBEDTLS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mbedtls/version.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>MBEDTLS_VERSION_NUMBER</name> <operator>&gt;=</operator> <literal type="number">0x02040000</literal></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mbedtls/net_sockets.h&gt;</cpp:file></cpp:include>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mbedtls/net.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mbedtls/ssl.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mbedtls/certs.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mbedtls/x509.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mbedtls/error.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mbedtls/entropy.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mbedtls/ctr_drbg.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mbedtls/sha256.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"urldata.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sendf.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"inet_pton.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mbedtls.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vtls.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"parsedate.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"connect.h"</cpp:file></cpp:include> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"select.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"multiif.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mbedtls_threadlock.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_printf.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_memory.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memdebug.h"</cpp:file></cpp:include>

<struct>struct <name>ssl_backend_data</name> <block>{

<decl_stmt><decl><type><name>mbedtls_ctr_drbg_context</name></type> <name>ctr_drbg</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mbedtls_entropy_context</name></type> <name>entropy</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mbedtls_ssl_context</name></type> <name>ssl</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>server_fd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mbedtls_x509_crt</name></type> <name>cacert</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mbedtls_x509_crt</name></type> <name>clicert</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mbedtls_x509_crl</name></type> <name>crl</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mbedtls_pk_context</name></type> <name>pk</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mbedtls_ssl_config</name></type> <name>config</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>protocols</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

}</block>;</struct>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_THREADS_POSIX</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>USE_THREADS_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>THREADING_SUPPORT</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>THREADING_SUPPORT</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><specifier>static</specifier> <name>mbedtls_entropy_context</name></type> <name>ts_entropy</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>entropy_init_initialized</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>entropy_init_mutex</name><parameter_list>(<parameter><decl><type><name>mbedtls_entropy_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>Curl_mbedtlsthreadlock_lock_function</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>entropy_init_initialized</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>mbedtls_entropy_init</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>entropy_init_initialized</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>Curl_mbedtlsthreadlock_unlock_function</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>entropy_func_mutex</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>Curl_mbedtlsthreadlock_lock_function</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mbedtls_entropy_func</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>output</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_mbedtlsthreadlock_unlock_function</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>MBEDTLS_DEBUG</name></cpp:undef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type> <name>mbed_debug</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>f_name</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>line_nb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>line</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>context</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>data</name> <operator>=</operator> <operator>(</operator>struct <name>Curl_easy</name> <operator>*</operator><operator>)</operator><name>context</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>level</name></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_NGHTTP2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>HAS_ALPN</name></cpp:undef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_ALPN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAS_ALPN</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>mbedtls_x509_crt_profile</name></type> <name>mbedtls_x509_crt_profile_fr</name> <init>=

<expr><block>{

<expr><call><name>MBEDTLS_X509_ID_FLAG</name><argument_list>(<argument><expr><name>MBEDTLS_MD_SHA1</name></expr></argument>)</argument_list></call> <operator>|</operator>

<call><name>MBEDTLS_X509_ID_FLAG</name><argument_list>(<argument><expr><name>MBEDTLS_MD_RIPEMD160</name></expr></argument>)</argument_list></call> <operator>|</operator>

<call><name>MBEDTLS_X509_ID_FLAG</name><argument_list>(<argument><expr><name>MBEDTLS_MD_SHA224</name></expr></argument>)</argument_list></call> <operator>|</operator>

<call><name>MBEDTLS_X509_ID_FLAG</name><argument_list>(<argument><expr><name>MBEDTLS_MD_SHA256</name></expr></argument>)</argument_list></call> <operator>|</operator>

<call><name>MBEDTLS_X509_ID_FLAG</name><argument_list>(<argument><expr><name>MBEDTLS_MD_SHA384</name></expr></argument>)</argument_list></call> <operator>|</operator>

<call><name>MBEDTLS_X509_ID_FLAG</name><argument_list>(<argument><expr><name>MBEDTLS_MD_SHA512</name></expr></argument>)</argument_list></call></expr>,

<expr><literal type="number">0xFFFFFFF</literal></expr>, 

<expr><literal type="number">0xFFFFFFF</literal></expr>, 

<expr><literal type="number">1024</literal></expr>, 

}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RSA_PUB_DER_MAX_BYTES</name></cpp:macro> <cpp:value>(38 + 2 * MBEDTLS_MPI_MAX_SIZE)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ECP_PUB_DER_MAX_BYTES</name></cpp:macro> <cpp:value>(30 + 2 * MBEDTLS_ECP_MAX_BYTES)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PUB_DER_MAX_BYTES</name></cpp:macro> <cpp:value>(RSA_PUB_DER_MAX_BYTES &gt; ECP_PUB_DER_MAX_BYTES ? RSA_PUB_DER_MAX_BYTES : ECP_PUB_DER_MAX_BYTES)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>Curl_recv</name></type> <name>mbed_recv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>Curl_send</name></type> <name>mbed_send</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>mbedtls_version_from_curl</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>mbedver</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>version</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch<condition>(<expr><name>version</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>CURL_SSLVERSION_TLSv1_0</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>mbedver</name> <operator>=</operator> <name>MBEDTLS_SSL_MINOR_VERSION_1</name></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

<case>case <expr><name>CURL_SSLVERSION_TLSv1_1</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>mbedver</name> <operator>=</operator> <name>MBEDTLS_SSL_MINOR_VERSION_2</name></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

<case>case <expr><name>CURL_SSLVERSION_TLSv1_2</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>mbedver</name> <operator>=</operator> <name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

<case>case <expr><name>CURL_SSLVERSION_TLSv1_3</name></expr>:</case>

<break>break;</break>

</block_content>}</block></switch>

<return>return <expr><name>CURLE_SSL_CONNECT_ERROR</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type>

<name>set_ssl_version_min_max</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sockindex</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ssl_connect_data</name></name> <modifier>*</modifier></type><name>connssl</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>ssl</name><index>[<expr><name>sockindex</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ssl_backend_data</name></name> <modifier>*</modifier></type><name>backend</name> <init>= <expr><name><name>connssl</name><operator>-&gt;</operator><name>backend</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mbedtls_ver_min</name> <init>= <expr><name>MBEDTLS_SSL_MINOR_VERSION_1</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mbedtls_ver_max</name> <init>= <expr><name>MBEDTLS_SSL_MINOR_VERSION_1</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>ssl_version</name> <init>= <expr><call><name>SSL_CONN_CONFIG</name><argument_list>(<argument><expr><name>version</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>ssl_version_max</name> <init>= <expr><call><name>SSL_CONN_CONFIG</name><argument_list>(<argument><expr><name>version_max</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>

<switch>switch<condition>(<expr><name>ssl_version</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>CURL_SSLVERSION_DEFAULT</name></expr>:</case>

<case>case <expr><name>CURL_SSLVERSION_TLSv1</name></expr>:</case>

<expr_stmt><expr><name>ssl_version</name> <operator>=</operator> <name>CURL_SSLVERSION_TLSv1_0</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<switch>switch<condition>(<expr><name>ssl_version_max</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>CURL_SSLVERSION_MAX_NONE</name></expr>:</case>

<case>case <expr><name>CURL_SSLVERSION_MAX_DEFAULT</name></expr>:</case>

<expr_stmt><expr><name>ssl_version_max</name> <operator>=</operator> <name>CURL_SSLVERSION_MAX_TLSv1_2</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>mbedtls_version_from_curl</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mbedtls_ver_min</name></expr></argument>, <argument><expr><name>ssl_version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"unsupported min version passed via CURLOPT_SSLVERSION"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>mbedtls_version_from_curl</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mbedtls_ver_max</name></expr></argument>, <argument><expr><name>ssl_version_max</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"unsupported max version passed via CURLOPT_SSLVERSION"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>mbedtls_ssl_conf_min_version</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>backend</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr></argument>,

<argument><expr><name>mbedtls_ver_min</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mbedtls_ssl_conf_max_version</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>backend</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr></argument>,

<argument><expr><name>mbedtls_ver_max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type>

<name>mbed_connect_step1</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>sockindex</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ssl_connect_data</name></name><modifier>*</modifier></type> <name>connssl</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>ssl</name><index>[<expr><name>sockindex</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ssl_backend_data</name></name> <modifier>*</modifier></type><name>backend</name> <init>= <expr><name><name>connssl</name><operator>-&gt;</operator><name>backend</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>ssl_cafile</name> <init>= <expr><call><name>SSL_CONN_CONFIG</name><argument_list>(<argument><expr><name>CAfile</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>verifypeer</name> <init>= <expr><call><name>SSL_CONN_CONFIG</name><argument_list>(<argument><expr><name>verifypeer</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>ssl_capath</name> <init>= <expr><call><name>SSL_CONN_CONFIG</name><argument_list>(<argument><expr><name>CApath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>ssl_cert</name> <init>= <expr><call><name>SSL_SET_OPTION</name><argument_list>(<argument><expr><name>cert</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>ssl_crlfile</name> <init>= <expr><call><name>SSL_SET_OPTION</name><argument_list>(<argument><expr><name>CRLfile</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>hostname</name> <init>= <expr><ternary><condition><expr><call><name>SSL_IS_PROXY</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><name><name>conn</name><operator>-&gt;</operator><name>http_proxy</name><operator>.</operator><name>host</name><operator>.</operator><name>name</name></name></expr> </then><else>:

<expr><name><name>conn</name><operator>-&gt;</operator><name>host</name><operator>.</operator><name>name</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>long</name> <name>int</name></type> <name>port</name> <init>= <expr><ternary><condition><expr><call><name>SSL_IS_PROXY</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><name><name>conn</name><operator>-&gt;</operator><name>port</name></name></expr> </then><else>: <expr><name><name>conn</name><operator>-&gt;</operator><name>remote_port</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>errorbuf</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>errorbuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>SSL_CONN_CONFIG</name><argument_list>(<argument><expr><name>version</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CURL_SSLVERSION_SSLv2</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"mbedTLS does not support SSLv2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_SSL_CONNECT_ERROR</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>THREADING_SUPPORT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>entropy_init_mutex</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ts_entropy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mbedtls_ctr_drbg_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>backend</name><operator>-&gt;</operator><name>ctr_drbg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mbedtls_ctr_drbg_seed</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>backend</name><operator>-&gt;</operator><name>ctr_drbg</name></name></expr></argument>, <argument><expr><name>entropy_func_mutex</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>ts_entropy</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ERROR_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>mbedtls_strerror</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>errorbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>errorbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Failed - mbedTLS: ctr_drbg_init returned (-0x%04X) %s\n"</literal></expr></argument>,

<argument><expr><operator>-</operator><name>ret</name></expr></argument>, <argument><expr><name>errorbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>mbedtls_entropy_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>backend</name><operator>-&gt;</operator><name>entropy</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mbedtls_ctr_drbg_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>backend</name><operator>-&gt;</operator><name>ctr_drbg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mbedtls_ctr_drbg_seed</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>backend</name><operator>-&gt;</operator><name>ctr_drbg</name></name></expr></argument>, <argument><expr><name>mbedtls_entropy_func</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>backend</name><operator>-&gt;</operator><name>entropy</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ERROR_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>mbedtls_strerror</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>errorbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>errorbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Failed - mbedTLS: ctr_drbg_init returned (-0x%04X) %s\n"</literal></expr></argument>,

<argument><expr><operator>-</operator><name>ret</name></expr></argument>, <argument><expr><name>errorbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<expr_stmt><expr><call><name>mbedtls_x509_crt_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>backend</name><operator>-&gt;</operator><name>cacert</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>ssl_cafile</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mbedtls_x509_crt_parse_file</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>backend</name><operator>-&gt;</operator><name>cacert</name></name></expr></argument>, <argument><expr><name>ssl_cafile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>ret</name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ERROR_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>mbedtls_strerror</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>errorbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>errorbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Error reading ca cert file %s - mbedTLS: (-0x%04X) %s"</literal></expr></argument>,

<argument><expr><name>ssl_cafile</name></expr></argument>, <argument><expr><operator>-</operator><name>ret</name></expr></argument>, <argument><expr><name>errorbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>verifypeer</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_SSL_CACERT_BADFILE</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>ssl_capath</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mbedtls_x509_crt_parse_path</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>backend</name><operator>-&gt;</operator><name>cacert</name></name></expr></argument>, <argument><expr><name>ssl_capath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>ret</name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ERROR_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>mbedtls_strerror</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>errorbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>errorbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Error reading ca cert path %s - mbedTLS: (-0x%04X) %s"</literal></expr></argument>,

<argument><expr><name>ssl_capath</name></expr></argument>, <argument><expr><operator>-</operator><name>ret</name></expr></argument>, <argument><expr><name>errorbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>verifypeer</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_SSL_CACERT_BADFILE</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>mbedtls_x509_crt_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>backend</name><operator>-&gt;</operator><name>clicert</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>ssl_cert</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mbedtls_x509_crt_parse_file</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>backend</name><operator>-&gt;</operator><name>clicert</name></name></expr></argument>, <argument><expr><name>ssl_cert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ERROR_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>mbedtls_strerror</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>errorbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>errorbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Error reading client cert file %s - mbedTLS: (-0x%04X) %s"</literal></expr></argument>,

<argument><expr><name>ssl_cert</name></expr></argument>, <argument><expr><operator>-</operator><name>ret</name></expr></argument>, <argument><expr><name>errorbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_SSL_CERTPROBLEM</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>mbedtls_pk_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>backend</name><operator>-&gt;</operator><name>pk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>SSL_SET_OPTION</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mbedtls_pk_parse_keyfile</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>backend</name><operator>-&gt;</operator><name>pk</name></name></expr></argument>, <argument><expr><call><name>SSL_SET_OPTION</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>SSL_SET_OPTION</name><argument_list>(<argument><expr><name>key_passwd</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><call><name>mbedtls_pk_can_do</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>backend</name><operator>-&gt;</operator><name>pk</name></name></expr></argument>, <argument><expr><name>MBEDTLS_PK_RSA</name></expr></argument>)</argument_list></call> <operator>||</operator>

<call><name>mbedtls_pk_can_do</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>backend</name><operator>-&gt;</operator><name>pk</name></name></expr></argument>, <argument><expr><name>MBEDTLS_PK_ECKEY</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>MBEDTLS_ERR_PK_TYPE_MISMATCH</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ERROR_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>mbedtls_strerror</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>errorbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>errorbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Error reading private key %s - mbedTLS: (-0x%04X) %s"</literal></expr></argument>,

<argument><expr><call><name>SSL_SET_OPTION</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>-</operator><name>ret</name></expr></argument>, <argument><expr><name>errorbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_SSL_CERTPROBLEM</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>mbedtls_x509_crl_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>backend</name><operator>-&gt;</operator><name>crl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>ssl_crlfile</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mbedtls_x509_crl_parse_file</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>backend</name><operator>-&gt;</operator><name>crl</name></name></expr></argument>, <argument><expr><name>ssl_crlfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ERROR_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>mbedtls_strerror</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>errorbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>errorbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Error reading CRL file %s - mbedTLS: (-0x%04X) %s"</literal></expr></argument>,

<argument><expr><name>ssl_crlfile</name></expr></argument>, <argument><expr><operator>-</operator><name>ret</name></expr></argument>, <argument><expr><name>errorbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_SSL_CRL_BADFILE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"mbedTLS: Connecting to %s:%ld\n"</literal></expr></argument>, <argument><expr><name>hostname</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mbedtls_ssl_config_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>backend</name><operator>-&gt;</operator><name>config</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mbedtls_ssl_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>backend</name><operator>-&gt;</operator><name>ssl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>mbedtls_ssl_setup</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>backend</name><operator>-&gt;</operator><name>ssl</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>backend</name><operator>-&gt;</operator><name>config</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"mbedTLS: ssl_init failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_SSL_CONNECT_ERROR</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mbedtls_ssl_config_defaults</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>backend</name><operator>-&gt;</operator><name>config</name></name></expr></argument>,

<argument><expr><name>MBEDTLS_SSL_IS_CLIENT</name></expr></argument>,

<argument><expr><name>MBEDTLS_SSL_TRANSPORT_STREAM</name></expr></argument>,

<argument><expr><name>MBEDTLS_SSL_PRESET_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"mbedTLS: ssl_config failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_SSL_CONNECT_ERROR</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>mbedtls_ssl_conf_cert_profile</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>backend</name><operator>-&gt;</operator><name>config</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>mbedtls_x509_crt_profile_fr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch<condition>(<expr><call><name>SSL_CONN_CONFIG</name><argument_list>(<argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<case>case <expr><name>CURL_SSLVERSION_DEFAULT</name></expr>:</case>

<case>case <expr><name>CURL_SSLVERSION_TLSv1</name></expr>:</case>

<expr_stmt><expr><call><name>mbedtls_ssl_conf_min_version</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>backend</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr></argument>,

<argument><expr><name>MBEDTLS_SSL_MINOR_VERSION_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"mbedTLS: Set min SSL version to TLS 1.0\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>CURL_SSLVERSION_SSLv3</name></expr>:</case>

<expr_stmt><expr><call><name>mbedtls_ssl_conf_min_version</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>backend</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr></argument>,

<argument><expr><name>MBEDTLS_SSL_MINOR_VERSION_0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mbedtls_ssl_conf_max_version</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>backend</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr></argument>,

<argument><expr><name>MBEDTLS_SSL_MINOR_VERSION_0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"mbedTLS: Set SSL version to SSLv3\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>CURL_SSLVERSION_TLSv1_0</name></expr>:</case>

<case>case <expr><name>CURL_SSLVERSION_TLSv1_1</name></expr>:</case>

<case>case <expr><name>CURL_SSLVERSION_TLSv1_2</name></expr>:</case>

<case>case <expr><name>CURL_SSLVERSION_TLSv1_3</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><call><name>set_ssl_version_min_max</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>sockindex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name> <operator>!=</operator> <name>CURLE_OK</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

<break>break;</break>

</block_content>}</block>

<default>default:</default>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Unrecognized parameter passed via CURLOPT_SSLVERSION"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_SSL_CONNECT_ERROR</name></expr>;</return>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>mbedtls_ssl_conf_authmode</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>backend</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><name>MBEDTLS_SSL_VERIFY_OPTIONAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mbedtls_ssl_conf_rng</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>backend</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><name>mbedtls_ctr_drbg_random</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>backend</name><operator>-&gt;</operator><name>ctr_drbg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mbedtls_ssl_set_bio</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>backend</name><operator>-&gt;</operator><name>ssl</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>sock</name><index>[<expr><name>sockindex</name></expr>]</index></name></expr></argument>,

<argument><expr><name>mbedtls_net_send</name></expr></argument>,

<argument><expr><name>mbedtls_net_recv</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mbedtls_ssl_conf_ciphersuites</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>backend</name><operator>-&gt;</operator><name>config</name></name></expr></argument>,

<argument><expr><call><name>mbedtls_ssl_list_ciphersuites</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_RENEGOTIATION</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>mbedtls_ssl_conf_renegotiation</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>backend</name><operator>-&gt;</operator><name>config</name></name></expr></argument>,

<argument><expr><name>MBEDTLS_SSL_RENEGOTIATION_ENABLED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_SESSION_TICKETS</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>mbedtls_ssl_conf_session_tickets</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>backend</name><operator>-&gt;</operator><name>config</name></name></expr></argument>,

<argument><expr><name>MBEDTLS_SSL_SESSION_TICKETS_DISABLED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if<condition>(<expr><call><name>SSL_SET_OPTION</name><argument_list>(<argument><expr><name><name>primary</name><operator>.</operator><name>sessionid</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>old_session</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>Curl_ssl_sessionid_lock</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>Curl_ssl_getsessionid</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>old_session</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>sockindex</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mbedtls_ssl_set_session</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>backend</name><operator>-&gt;</operator><name>ssl</name></name></expr></argument>, <argument><expr><name>old_session</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>Curl_ssl_sessionid_unlock</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"mbedtls_ssl_set_session returned -0x%x"</literal></expr></argument>, <argument><expr><operator>-</operator><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_SSL_CONNECT_ERROR</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"mbedTLS re-using session\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>Curl_ssl_sessionid_unlock</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>mbedtls_ssl_conf_ca_chain</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>backend</name><operator>-&gt;</operator><name>config</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>backend</name><operator>-&gt;</operator><name>cacert</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>backend</name><operator>-&gt;</operator><name>crl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>SSL_SET_OPTION</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>mbedtls_ssl_conf_own_cert</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>backend</name><operator>-&gt;</operator><name>config</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>backend</name><operator>-&gt;</operator><name>clicert</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>backend</name><operator>-&gt;</operator><name>pk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>mbedtls_ssl_set_hostname</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>backend</name><operator>-&gt;</operator><name>ssl</name></name></expr></argument>, <argument><expr><name>hostname</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"couldn't set hostname in mbedTLS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_SSL_CONNECT_ERROR</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAS_ALPN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>tls_enable_alpn</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name> <init>= <expr><operator>&amp;</operator><name><name>backend</name><operator>-&gt;</operator><name>protocols</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_NGHTTP2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>httpversion</name></name> <operator>&gt;=</operator> <name>CURL_HTTP_VERSION_2</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name>NGHTTP2_PROTO_VERSION_ID</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name>ALPN_HTTP_1_1</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>mbedtls_ssl_conf_alpn_protocols</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>backend</name><operator>-&gt;</operator><name>config</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>backend</name><operator>-&gt;</operator><name>protocols</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Failed setting ALPN protocols"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_SSL_CONNECT_ERROR</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for<control>(<init><expr><name>p</name> <operator>=</operator> <operator>&amp;</operator><name><name>backend</name><operator>-&gt;</operator><name>protocols</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</init> <condition><expr><operator>*</operator><name>p</name></expr>;</condition> <incr><expr><operator>++</operator><name>p</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"ALPN, offering %s\n"</literal></expr></argument>, <argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>mbedtls_ssl_conf_dbg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>backend</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><name>mbed_debug</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mbedtls_debug_set_threshold</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>ssl</name><operator>.</operator><name>fsslctx</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call>(<modifier>*</modifier><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>ssl</name><operator>.</operator><name>fsslctx</name></name>)<argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>backend</name><operator>-&gt;</operator><name>config</name></name></expr></argument>,

<argument><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>ssl</name><operator>.</operator><name>fsslctxp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"error signaled by ssl ctx callback"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>connssl</name><operator>-&gt;</operator><name>connecting_state</name></name> <operator>=</operator> <name>ssl_connect_2</name></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type>

<name>mbed_connect_step2</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>sockindex</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ssl_connect_data</name></name><modifier>*</modifier></type> <name>connssl</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>ssl</name><index>[<expr><name>sockindex</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ssl_backend_data</name></name> <modifier>*</modifier></type><name>backend</name> <init>= <expr><name><name>connssl</name><operator>-&gt;</operator><name>backend</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>mbedtls_x509_crt</name> <modifier>*</modifier></type><name>peercert</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>pinnedpubkey</name> <init>= <expr><ternary><condition><expr><call><name>SSL_IS_PROXY</name><argument_list>()</argument_list></call></expr> ?</condition><then>

<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_SSL_PINNEDPUBLICKEY_PROXY</name></expr>]</index></name></expr> </then><else>:

<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_SSL_PINNEDPUBLICKEY_ORIG</name></expr>]</index></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>recv</name><index>[<expr><name>sockindex</name></expr>]</index></name> <operator>=</operator> <name>mbed_recv</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>send</name><index>[<expr><name>sockindex</name></expr>]</index></name> <operator>=</operator> <name>mbed_send</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mbedtls_ssl_handshake</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>backend</name><operator>-&gt;</operator><name>ssl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>ret</name> <operator>==</operator> <name>MBEDTLS_ERR_SSL_WANT_READ</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>connssl</name><operator>-&gt;</operator><name>connecting_state</name></name> <operator>=</operator> <name>ssl_connect_2_reading</name></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name>ret</name> <operator>==</operator> <name>MBEDTLS_ERR_SSL_WANT_WRITE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>connssl</name><operator>-&gt;</operator><name>connecting_state</name></name> <operator>=</operator> <name>ssl_connect_2_writing</name></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>errorbuf</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>errorbuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ERROR_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>mbedtls_strerror</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>errorbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>errorbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"ssl_handshake returned - mbedTLS: (-0x%04X) %s"</literal></expr></argument>,

<argument><expr><operator>-</operator><name>ret</name></expr></argument>, <argument><expr><name>errorbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_SSL_CONNECT_ERROR</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"mbedTLS: Handshake complete, cipher is %s\n"</literal></expr></argument>,

<argument><expr><call><name>mbedtls_ssl_get_ciphersuite</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>backend</name><operator>-&gt;</operator><name>ssl</name></name></expr></argument>)</argument_list></call></expr></argument>

)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mbedtls_ssl_get_verify_result</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>backend</name><operator>-&gt;</operator><name>ssl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>SSL_CONN_CONFIG</name><argument_list>(<argument><expr><name>verifyhost</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>&amp;=</operator> <operator>~</operator><name>MBEDTLS_X509_BADCERT_CN_MISMATCH</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>ret</name> <operator>&amp;&amp;</operator> <call><name>SSL_CONN_CONFIG</name><argument_list>(<argument><expr><name>verifypeer</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>ret</name> <operator>&amp;</operator> <name>MBEDTLS_X509_BADCERT_EXPIRED</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Cert verify failed: BADCERT_EXPIRED"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>(<expr><name>ret</name> <operator>&amp;</operator> <name>MBEDTLS_X509_BADCERT_REVOKED</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Cert verify failed: BADCERT_REVOKED"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>(<expr><name>ret</name> <operator>&amp;</operator> <name>MBEDTLS_X509_BADCERT_CN_MISMATCH</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Cert verify failed: BADCERT_CN_MISMATCH"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>(<expr><name>ret</name> <operator>&amp;</operator> <name>MBEDTLS_X509_BADCERT_NOT_TRUSTED</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Cert verify failed: BADCERT_NOT_TRUSTED"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>(<expr><name>ret</name> <operator>&amp;</operator> <name>MBEDTLS_X509_BADCERT_FUTURE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Cert verify failed: BADCERT_FUTURE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>CURLE_PEER_FAILED_VERIFICATION</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>peercert</name> <operator>=</operator> <call><name>mbedtls_ssl_get_peer_cert</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>backend</name><operator>-&gt;</operator><name>ssl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>peercert</name> <operator>&amp;&amp;</operator> <name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>verbose</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>bufsize</name> <init>= <expr><literal type="number">16384</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><name>bufsize</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>buffer</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>mbedtls_x509_crt_info</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>bufsize</name></expr></argument>, <argument><expr><literal type="string">"* "</literal></expr></argument>, <argument><expr><name>peercert</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Dumping cert info:\n%s\n"</literal></expr></argument>, <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Unable to dump certificate information.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>pinnedpubkey</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mbedtls_x509_crt</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>pubkey</name><index>[<expr><name>PUB_DER_MAX_BYTES</name></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>peercert</name> <operator>||</operator> <operator>!</operator><name><name>peercert</name><operator>-&gt;</operator><name>raw</name><operator>.</operator><name>p</name></name> <operator>||</operator> <operator>!</operator><name><name>peercert</name><operator>-&gt;</operator><name>raw</name><operator>.</operator><name>len</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Failed due to missing peer certificate"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_SSL_PINNEDPUBKEYNOTMATCH</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>p</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>mbedtls_x509_crt_init</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>mbedtls_x509_crt_parse_der</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>peercert</name><operator>-&gt;</operator><name>raw</name><operator>.</operator><name>p</name></name></expr></argument>, <argument><expr><name><name>peercert</name><operator>-&gt;</operator><name>raw</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Failed copying peer certificate"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mbedtls_x509_crt_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_SSL_PINNEDPUBKEYNOTMATCH</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>mbedtls_pk_write_pubkey_der</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>pk</name></name></expr></argument>, <argument><expr><name>pubkey</name></expr></argument>, <argument><expr><name>PUB_DER_MAX_BYTES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>size</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Failed copying public key from peer certificate"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mbedtls_x509_crt_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_SSL_PINNEDPUBKEYNOTMATCH</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_pin_peer_pubkey</name><argument_list>(<argument><expr><name>data</name></expr></argument>,

<argument><expr><name>pinnedpubkey</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>pubkey</name><index>[<expr><name>PUB_DER_MAX_BYTES</name> <operator>-</operator> <name>size</name></expr>]</index></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>mbedtls_x509_crt_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>mbedtls_x509_crt_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAS_ALPN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>tls_enable_alpn</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>next_protocol</name> <init>= <expr><call><name>mbedtls_ssl_get_alpn_protocol</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>backend</name><operator>-&gt;</operator><name>ssl</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>next_protocol</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"ALPN, server accepted to use %s\n"</literal></expr></argument>, <argument><expr><name>next_protocol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_NGHTTP2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>next_protocol</name></expr></argument>, <argument><expr><name>NGHTTP2_PROTO_VERSION_ID</name></expr></argument>,

<argument><expr><name>NGHTTP2_PROTO_VERSION_ID_LEN</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<operator>!</operator><name><name>next_protocol</name><index>[<expr><name>NGHTTP2_PROTO_VERSION_ID_LEN</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>negnpn</name></name> <operator>=</operator> <name>CURL_HTTP_VERSION_2</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

if<condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>next_protocol</name></expr></argument>, <argument><expr><name>ALPN_HTTP_1_1</name></expr></argument>, <argument><expr><name>ALPN_HTTP_1_1_LENGTH</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<operator>!</operator><name><name>next_protocol</name><index>[<expr><name>ALPN_HTTP_1_1_LENGTH</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>negnpn</name></name> <operator>=</operator> <name>CURL_HTTP_VERSION_1_1</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"ALPN, server did not agree to a protocol\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>Curl_multiuse_state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>conn</name><operator>-&gt;</operator><name>negnpn</name></name> <operator>==</operator> <name>CURL_HTTP_VERSION_2</name></expr> ?</condition><then>

<expr><name>BUNDLE_MULTIPLEX</name></expr> </then><else>: <expr><name>BUNDLE_NO_MULTIUSE</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>connssl</name><operator>-&gt;</operator><name>connecting_state</name></name> <operator>=</operator> <name>ssl_connect_3</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"SSL connected\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type>

<name>mbed_connect_step3</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>sockindex</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>retcode</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ssl_connect_data</name></name> <modifier>*</modifier></type><name>connssl</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>ssl</name><index>[<expr><name>sockindex</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ssl_backend_data</name></name> <modifier>*</modifier></type><name>backend</name> <init>= <expr><name><name>connssl</name><operator>-&gt;</operator><name>backend</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DEBUGASSERT</name><argument_list>(<argument><expr><name>ssl_connect_3</name> <operator>==</operator> <name><name>connssl</name><operator>-&gt;</operator><name>connecting_state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>SSL_SET_OPTION</name><argument_list>(<argument><expr><name><name>primary</name><operator>.</operator><name>sessionid</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mbedtls_ssl_session</name> <modifier>*</modifier></type><name>our_ssl_sessionid</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>old_ssl_sessionid</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>our_ssl_sessionid</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mbedtls_ssl_session</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>our_ssl_sessionid</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>mbedtls_ssl_session_init</name><argument_list>(<argument><expr><name>our_ssl_sessionid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mbedtls_ssl_get_session</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>backend</name><operator>-&gt;</operator><name>ssl</name></name></expr></argument>, <argument><expr><name>our_ssl_sessionid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>ret</name> <operator>!=</operator> <name>MBEDTLS_ERR_SSL_ALLOC_FAILED</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>mbedtls_ssl_session_free</name><argument_list>(<argument><expr><name>our_ssl_sessionid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>our_ssl_sessionid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"mbedtls_ssl_get_session returned -0x%x"</literal></expr></argument>, <argument><expr><operator>-</operator><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_SSL_CONNECT_ERROR</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>Curl_ssl_sessionid_lock</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>Curl_ssl_getsessionid</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>old_ssl_sessionid</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>sockindex</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>Curl_ssl_delsessionid</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>old_ssl_sessionid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>retcode</name> <operator>=</operator> <call><name>Curl_ssl_addsessionid</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>our_ssl_sessionid</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>sockindex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_ssl_sessionid_unlock</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>retcode</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>mbedtls_ssl_session_free</name><argument_list>(<argument><expr><name>our_ssl_sessionid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>our_ssl_sessionid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"failed to store ssl session"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>retcode</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>connssl</name><operator>-&gt;</operator><name>connecting_state</name></name> <operator>=</operator> <name>ssl_connect_done</name></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ssize_t</name></type> <name>mbed_send</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sockindex</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>mem</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>,

<parameter><decl><type><name>CURLcode</name> <modifier>*</modifier></type><name>curlcode</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>ssl_connect_data</name></name> <modifier>*</modifier></type><name>connssl</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>ssl</name><index>[<expr><name>sockindex</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ssl_backend_data</name></name> <modifier>*</modifier></type><name>backend</name> <init>= <expr><name><name>connssl</name><operator>-&gt;</operator><name>backend</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mbedtls_ssl_write</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>backend</name><operator>-&gt;</operator><name>ssl</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>mem</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>curlcode</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>ret</name> <operator>==</operator> <name>MBEDTLS_ERR_SSL_WANT_WRITE</name><operator>)</operator></expr> ?</condition><then>

<expr><name>CURLE_AGAIN</name></expr> </then><else>: <expr><name>CURLE_SEND_ERROR</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Curl_mbedtls_close_all</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>data</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Curl_mbedtls_close</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sockindex</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>ssl_connect_data</name></name> <modifier>*</modifier></type><name>connssl</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>ssl</name><index>[<expr><name>sockindex</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ssl_backend_data</name></name> <modifier>*</modifier></type><name>backend</name> <init>= <expr><name><name>connssl</name><operator>-&gt;</operator><name>backend</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>mbedtls_pk_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>backend</name><operator>-&gt;</operator><name>pk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mbedtls_x509_crt_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>backend</name><operator>-&gt;</operator><name>clicert</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mbedtls_x509_crt_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>backend</name><operator>-&gt;</operator><name>cacert</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mbedtls_x509_crl_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>backend</name><operator>-&gt;</operator><name>crl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mbedtls_ssl_config_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>backend</name><operator>-&gt;</operator><name>config</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mbedtls_ssl_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>backend</name><operator>-&gt;</operator><name>ssl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mbedtls_ctr_drbg_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>backend</name><operator>-&gt;</operator><name>ctr_drbg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>THREADING_SUPPORT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>mbedtls_entropy_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>backend</name><operator>-&gt;</operator><name>entropy</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ssize_t</name></type> <name>mbed_recv</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num</name></decl></parameter>,

<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>buffersize</name></decl></parameter>,

<parameter><decl><type><name>CURLcode</name> <modifier>*</modifier></type><name>curlcode</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>ssl_connect_data</name></name> <modifier>*</modifier></type><name>connssl</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>ssl</name><index>[<expr><name>num</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ssl_backend_data</name></name> <modifier>*</modifier></type><name>backend</name> <init>= <expr><name><name>connssl</name><operator>-&gt;</operator><name>backend</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>len</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>buffersize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mbedtls_ssl_read</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>backend</name><operator>-&gt;</operator><name>ssl</name></name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>buf</name></expr></argument>,

<argument><expr><name>buffersize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>ret</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>ret</name> <operator>==</operator> <name>MBEDTLS_ERR_SSL_PEER_CLOSE_NOTIFY</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>curlcode</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>ret</name> <operator>==</operator> <name>MBEDTLS_ERR_SSL_WANT_READ</name><operator>)</operator></expr> ?</condition><then>

<expr><name>CURLE_AGAIN</name></expr> </then><else>: <expr><name>CURLE_RECV_ERROR</name></expr></else></ternary></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name>ret</name></expr>;</expr_stmt>

<return>return <expr><name>len</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Curl_mbedtls_session_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>mbedtls_ssl_session_free</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type> <name>Curl_mbedtls_version</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_VERSION_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>version</name> <init>= <expr><call><name>mbedtls_version_get_number</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>msnprintf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="string">"mbedTLS/%u.%u.%u"</literal></expr></argument>, <argument><expr><name>version</name><operator>&gt;&gt;</operator><literal type="number">24</literal></expr></argument>,

<argument><expr><operator>(</operator><name>version</name><operator>&gt;&gt;</operator><literal type="number">16</literal><operator>)</operator><operator>&amp;</operator><literal type="number">0xff</literal></expr></argument>, <argument><expr><operator>(</operator><name>version</name><operator>&gt;&gt;</operator><literal type="number">8</literal><operator>)</operator><operator>&amp;</operator><literal type="number">0xff</literal></expr></argument>)</argument_list></call></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<return>return <expr><call><name>msnprintf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="string">"mbedTLS/%s"</literal></expr></argument>, <argument><expr><name>MBEDTLS_VERSION_STRING</name></expr></argument>)</argument_list></call></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>Curl_mbedtls_random</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>entropy</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>length</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CTR_DRBG_C</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>errorbuf</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mbedtls_entropy_context</name></type> <name>ctr_entropy</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mbedtls_ctr_drbg_context</name></type> <name>ctr_drbg</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>mbedtls_entropy_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctr_entropy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mbedtls_ctr_drbg_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctr_drbg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>errorbuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mbedtls_ctr_drbg_seed</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctr_drbg</name></expr></argument>, <argument><expr><name>mbedtls_entropy_func</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>ctr_entropy</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ERROR_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>mbedtls_strerror</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>errorbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>errorbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Failed - mbedTLS: ctr_drbg_seed returned (-0x%04X) %s\n"</literal></expr></argument>,

<argument><expr><operator>-</operator><name>ret</name></expr></argument>, <argument><expr><name>errorbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mbedtls_ctr_drbg_random</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctr_drbg</name></expr></argument>, <argument><expr><name>entropy</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ERROR_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>mbedtls_strerror</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>errorbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>errorbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"mbedTLS: ctr_drbg_init returned (-0x%04X) %s\n"</literal></expr></argument>,

<argument><expr><operator>-</operator><name>ret</name></expr></argument>, <argument><expr><name>errorbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>mbedtls_ctr_drbg_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctr_drbg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mbedtls_entropy_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctr_entropy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><ternary><condition><expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>CURLE_OK</name></expr> </then><else>: <expr><name>CURLE_FAILED_INIT</name></expr></else></ternary></expr>;</return>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_HAVEGE_C</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<decl_stmt><decl><type><name>mbedtls_havege_state</name></type> <name>hs</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>mbedtls_havege_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mbedtls_havege_random</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hs</name></expr></argument>, <argument><expr><name>entropy</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mbedtls_havege_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<return>return <expr><name>CURLE_NOT_BUILT_IN</name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type>

<name>mbed_connect_common</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>sockindex</name></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>nonblocking</name></decl></parameter>,

<parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>done</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>retcode</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ssl_connect_data</name></name> <modifier>*</modifier></type><name>connssl</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>ssl</name><index>[<expr><name>sockindex</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>curl_socket_t</name></type> <name>sockfd</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>sock</name><index>[<expr><name>sockindex</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>timediff_t</name></type> <name>timeout_ms</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>what</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>ssl_connection_complete</name> <operator>==</operator> <name><name>connssl</name><operator>-&gt;</operator><name>state</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>done</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>ssl_connect_1</name> <operator>==</operator> <name><name>connssl</name><operator>-&gt;</operator><name>connecting_state</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>timeout_ms</name> <operator>=</operator> <call><name>Curl_timeleft</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>timeout_ms</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"SSL connection timeout"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OPERATION_TIMEDOUT</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>retcode</name> <operator>=</operator> <call><name>mbed_connect_step1</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>sockindex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>retcode</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>retcode</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<while>while<condition>(<expr><name>ssl_connect_2</name> <operator>==</operator> <name><name>connssl</name><operator>-&gt;</operator><name>connecting_state</name></name> <operator>||</operator>

<name>ssl_connect_2_reading</name> <operator>==</operator> <name><name>connssl</name><operator>-&gt;</operator><name>connecting_state</name></name> <operator>||</operator>

<name>ssl_connect_2_writing</name> <operator>==</operator> <name><name>connssl</name><operator>-&gt;</operator><name>connecting_state</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>timeout_ms</name> <operator>=</operator> <call><name>Curl_timeleft</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>timeout_ms</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"SSL connection timeout"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OPERATION_TIMEDOUT</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>connssl</name><operator>-&gt;</operator><name>connecting_state</name></name> <operator>==</operator> <name>ssl_connect_2_reading</name>

<operator>||</operator> <name><name>connssl</name><operator>-&gt;</operator><name>connecting_state</name></name> <operator>==</operator> <name>ssl_connect_2_writing</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>curl_socket_t</name></type> <name>writefd</name> <init>= <expr><ternary><condition><expr><name>ssl_connect_2_writing</name> <operator>==</operator>

<name><name>connssl</name><operator>-&gt;</operator><name>connecting_state</name></name></expr>?</condition><then><expr><name>sockfd</name></expr></then><else>:<expr><name>CURL_SOCKET_BAD</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>curl_socket_t</name></type> <name>readfd</name> <init>= <expr><ternary><condition><expr><name>ssl_connect_2_reading</name> <operator>==</operator>

<name><name>connssl</name><operator>-&gt;</operator><name>connecting_state</name></name></expr>?</condition><then><expr><name>sockfd</name></expr></then><else>:<expr><name>CURL_SOCKET_BAD</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>what</name> <operator>=</operator> <call><name>Curl_socket_check</name><argument_list>(<argument><expr><name>readfd</name></expr></argument>, <argument><expr><name>CURL_SOCKET_BAD</name></expr></argument>, <argument><expr><name>writefd</name></expr></argument>,

<argument><expr><ternary><condition><expr><name>nonblocking</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>(</operator><name>time_t</name><operator>)</operator><name>timeout_ms</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>what</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"select/poll on SSL socket, errno: %d"</literal></expr></argument>, <argument><expr><name>SOCKERRNO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_SSL_CONNECT_ERROR</name></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><literal type="number">0</literal> <operator>==</operator> <name>what</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>nonblocking</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>done</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"SSL connection timeout"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OPERATION_TIMEDOUT</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>retcode</name> <operator>=</operator> <call><name>mbed_connect_step2</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>sockindex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>retcode</name> <operator>||</operator> <operator>(</operator><name>nonblocking</name> <operator>&amp;&amp;</operator>

<operator>(</operator><name>ssl_connect_2</name> <operator>==</operator> <name><name>connssl</name><operator>-&gt;</operator><name>connecting_state</name></name> <operator>||</operator>

<name>ssl_connect_2_reading</name> <operator>==</operator> <name><name>connssl</name><operator>-&gt;</operator><name>connecting_state</name></name> <operator>||</operator>

<name>ssl_connect_2_writing</name> <operator>==</operator> <name><name>connssl</name><operator>-&gt;</operator><name>connecting_state</name></name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>retcode</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></while> 

<if_stmt><if>if<condition>(<expr><name>ssl_connect_3</name> <operator>==</operator> <name><name>connssl</name><operator>-&gt;</operator><name>connecting_state</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>retcode</name> <operator>=</operator> <call><name>mbed_connect_step3</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>sockindex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>retcode</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>retcode</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>ssl_connect_done</name> <operator>==</operator> <name><name>connssl</name><operator>-&gt;</operator><name>connecting_state</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>connssl</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ssl_connection_complete</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>recv</name><index>[<expr><name>sockindex</name></expr>]</index></name> <operator>=</operator> <name>mbed_recv</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>send</name><index>[<expr><name>sockindex</name></expr>]</index></name> <operator>=</operator> <name>mbed_send</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>done</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>done</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>connssl</name><operator>-&gt;</operator><name>connecting_state</name></name> <operator>=</operator> <name>ssl_connect_1</name></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>Curl_mbedtls_connect_nonblocking</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>sockindex</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>done</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>mbed_connect_common</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>sockindex</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>done</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>Curl_mbedtls_connect</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sockindex</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>retcode</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>done</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>retcode</name> <operator>=</operator> <call><name>mbed_connect_common</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>sockindex</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>done</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>retcode</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>retcode</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>DEBUGASSERT</name><argument_list>(<argument><expr><name>done</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Curl_mbedtls_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>Curl_mbedtlsthreadlock_thread_setup</name><argument_list>()</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Curl_mbedtls_cleanup</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>Curl_mbedtlsthreadlock_thread_cleanup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>Curl_mbedtls_data_pending</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>sockindex</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ssl_connect_data</name></name> <modifier>*</modifier></type><name>connssl</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>ssl</name><index>[<expr><name>sockindex</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ssl_backend_data</name></name> <modifier>*</modifier></type><name>backend</name> <init>= <expr><name><name>connssl</name><operator>-&gt;</operator><name>backend</name></name></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>mbedtls_ssl_get_bytes_avail</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>backend</name><operator>-&gt;</operator><name>ssl</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>Curl_mbedtls_sha256sum</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>inputlen</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>sha256sum</name></decl></parameter>,

<parameter><decl><type><name>size_t</name> <name>sha256len</name></type> <name>UNUSED_PARAM</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>sha256len</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>MBEDTLS_VERSION_NUMBER</name> <operator>&lt;</operator> <literal type="number">0x02070000</literal></expr></cpp:if>

<expr_stmt><expr><call><name>mbedtls_sha256</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>inputlen</name></expr></argument>, <argument><expr><name>sha256sum</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<if_stmt><if>if<condition>(<expr><call><name>mbedtls_sha256_ret</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>inputlen</name></expr></argument>, <argument><expr><name>sha256sum</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_BAD_FUNCTION_ARGUMENT</name></expr>;</return></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>Curl_mbedtls_get_internals</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ssl_connect_data</name></name> <modifier>*</modifier></type><name>connssl</name></decl></parameter>,

<parameter><decl><type><name>CURLINFO</name> <name>info</name></type> <name>UNUSED_PARAM</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>ssl_backend_data</name></name> <modifier>*</modifier></type><name>backend</name> <init>= <expr><name><name>connssl</name><operator>-&gt;</operator><name>backend</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>info</name></expr>;</expr_stmt>

<return>return <expr><operator>&amp;</operator><name><name>backend</name><operator>-&gt;</operator><name>ssl</name></name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>Curl_ssl</name></name></type> <name>Curl_ssl_mbedtls</name> <init>= <expr><block>{

<expr><block>{ <expr><name>CURLSSLBACKEND_MBEDTLS</name></expr>, <expr><literal type="string">"mbedtls"</literal></expr> }</block></expr>, 

<expr><name>SSLSUPP_CA_PATH</name> <operator>|</operator>

<name>SSLSUPP_PINNEDPUBKEY</name> <operator>|</operator>

<name>SSLSUPP_SSL_CTX</name></expr>,

<expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>ssl_backend_data</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><name>Curl_mbedtls_init</name></expr>, 

<expr><name>Curl_mbedtls_cleanup</name></expr>, 

<expr><name>Curl_mbedtls_version</name></expr>, 

<expr><name>Curl_none_check_cxn</name></expr>, 

<expr><name>Curl_none_shutdown</name></expr>, 

<expr><name>Curl_mbedtls_data_pending</name></expr>, 

<expr><name>Curl_mbedtls_random</name></expr>, 

<expr><name>Curl_none_cert_status_request</name></expr>, 

<expr><name>Curl_mbedtls_connect</name></expr>, 

<expr><name>Curl_mbedtls_connect_nonblocking</name></expr>, 

<expr><name>Curl_mbedtls_get_internals</name></expr>, 

<expr><name>Curl_mbedtls_close</name></expr>, 

<expr><name>Curl_mbedtls_close_all</name></expr>, 

<expr><name>Curl_mbedtls_session_free</name></expr>, 

<expr><name>Curl_none_set_engine</name></expr>, 

<expr><name>Curl_none_set_engine_default</name></expr>, 

<expr><name>Curl_none_engines_list</name></expr>, 

<expr><name>Curl_none_false_start</name></expr>, 

<expr><name>Curl_none_md5sum</name></expr>, 

<expr><name>Curl_mbedtls_sha256sum</name></expr> 

}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</unit>
