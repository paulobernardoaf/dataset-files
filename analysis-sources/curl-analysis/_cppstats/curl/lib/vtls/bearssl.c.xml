<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\curl-analysis\_cppstats\curl\lib\vtls\bearssl.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_setup.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_BEARSSL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bearssl.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bearssl.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"urldata.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sendf.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"inet_pton.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vtls.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"connect.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"select.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"multiif.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_printf.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_memory.h"</cpp:file></cpp:include>

<struct>struct <name>x509_context</name> <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>br_x509_class</name> <modifier>*</modifier></type><name>vtable</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>br_x509_minimal_context</name></type> <name>minimal</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>verifyhost</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>verifypeer</name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>ssl_backend_data</name> <block>{

<decl_stmt><decl><type><name>br_ssl_client_context</name></type> <name>ctx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>x509_context</name></name></type> <name>x509</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buf</name><index>[<expr><name>BR_SSL_BUFSIZE_BIDI</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>br_x509_trust_anchor</name> <modifier>*</modifier></type><name>anchors</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>anchors_len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>protocols</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>active</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>pending_write</name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>cafile_parser</name> <block>{

<decl_stmt><decl><type><name>CURLcode</name></type> <name>err</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>in_cert</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>br_x509_decoder_context</name></type> <name>xc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>br_x509_trust_anchor</name> <modifier>*</modifier></type><name>anchors</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>anchors_len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>dn</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>dn_len</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type> <name>append_dn</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>cafile_parser</name></name> <modifier>*</modifier></type><name>ca</name> <init>= <expr><name>ctx</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ca</name><operator>-&gt;</operator><name>err</name></name> <operator>!=</operator> <name>CURLE_OK</name> <operator>||</operator> <operator>!</operator><name><name>ca</name><operator>-&gt;</operator><name>in_cert</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ca</name><operator>-&gt;</operator><name>dn</name></name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <name><name>ca</name><operator>-&gt;</operator><name>dn_len</name></name> <operator>&lt;</operator> <name>len</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ca</name><operator>-&gt;</operator><name>err</name></name> <operator>=</operator> <name>CURLE_FAILED_INIT</name></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ca</name><operator>-&gt;</operator><name>dn</name></name> <operator>+</operator> <name><name>ca</name><operator>-&gt;</operator><name>dn_len</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ca</name><operator>-&gt;</operator><name>dn_len</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>x509_push</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>cafile_parser</name></name> <modifier>*</modifier></type><name>ca</name> <init>= <expr><name>ctx</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ca</name><operator>-&gt;</operator><name>in_cert</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>br_x509_decoder_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ca</name><operator>-&gt;</operator><name>xc</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>load_cafile</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>br_x509_trust_anchor</name> <modifier>*</modifier><modifier>*</modifier></type><name>anchors</name></decl></parameter>,

<parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>anchors_len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>cafile_parser</name></name></type> <name>ca</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>br_pem_decoder_context</name></type> <name>pc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>br_x509_trust_anchor</name> <modifier>*</modifier></type><name>ta</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>ta_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>br_x509_trust_anchor</name> <modifier>*</modifier></type><name>new_anchors</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>new_anchors_len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>br_x509_pkey</name> <modifier>*</modifier></type><name>pkey</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buf</name><index>[<expr><name>BUFSIZ</name></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>pushed</name></decl>;</decl_stmt>

<expr_stmt><expr><name>fp</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">"rb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>fp</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_SSL_CACERT_BADFILE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ca</name><operator>.</operator><name>err</name></name> <operator>=</operator> <name>CURLE_OK</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ca</name><operator>.</operator><name>in_cert</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ca</name><operator>.</operator><name>anchors</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ca</name><operator>.</operator><name>anchors_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>br_pem_decoder_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>br_pem_decoder_setdest</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pc</name></expr></argument>, <argument><expr><name>x509_push</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ca</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>fread</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>

<while>while<condition>(<expr><name>n</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>pushed</name> <operator>=</operator> <call><name>br_pem_decoder_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pc</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ca</name><operator>.</operator><name>err</name></name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>pushed</name></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>-=</operator> <name>pushed</name></expr>;</expr_stmt>

<switch>switch<condition>(<expr><call><name>br_pem_decoder_event</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case>

<break>break;</break>

<case>case <expr><name>BR_PEM_BEGIN_OBJ</name></expr>:</case>

<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>br_pem_decoder_name</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"CERTIFICATE"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"X509 CERTIFICATE"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>br_x509_decoder_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ca</name><operator>.</operator><name>xc</name></name></expr></argument>, <argument><expr><name>append_dn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ca</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ca</name><operator>.</operator><name>anchors_len</name></name> <operator>==</operator> <name>SIZE_MAX</name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>ca</name><operator>.</operator><name>anchors</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ca</name><operator>.</operator><name>err</name></name> <operator>=</operator> <name>CURLE_OUT_OF_MEMORY</name></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>new_anchors_len</name> <operator>=</operator> <name><name>ca</name><operator>.</operator><name>anchors_len</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>new_anchors</name> <operator>=</operator> <call><name>realloc</name><argument_list>(<argument><expr><name><name>ca</name><operator>.</operator><name>anchors</name></name></expr></argument>,

<argument><expr><name>new_anchors_len</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>ca</name><operator>.</operator><name>anchors</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>new_anchors</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ca</name><operator>.</operator><name>err</name></name> <operator>=</operator> <name>CURLE_OUT_OF_MEMORY</name></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ca</name><operator>.</operator><name>anchors</name></name> <operator>=</operator> <name>new_anchors</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ca</name><operator>.</operator><name>anchors_len</name></name> <operator>=</operator> <name>new_anchors_len</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ca</name><operator>.</operator><name>in_cert</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ca</name><operator>.</operator><name>dn_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ta</name> <operator>=</operator> <operator>&amp;</operator><name><name>ca</name><operator>.</operator><name>anchors</name><index>[<expr><name><name>ca</name><operator>.</operator><name>anchors_len</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ta</name><operator>-&gt;</operator><name>dn</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>BR_PEM_END_OBJ</name></expr>:</case>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>ca</name><operator>.</operator><name>in_cert</name></name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ca</name><operator>.</operator><name>in_cert</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>br_x509_decoder_last_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ca</name><operator>.</operator><name>xc</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ca</name><operator>.</operator><name>err</name></name> <operator>=</operator> <name>CURLE_SSL_CACERT_BADFILE</name></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ta</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>br_x509_decoder_isCA</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ca</name><operator>.</operator><name>xc</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ta</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>BR_X509_TA_CA</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>pkey</name> <operator>=</operator> <call><name>br_x509_decoder_get_pkey</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ca</name><operator>.</operator><name>xc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>pkey</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ca</name><operator>.</operator><name>err</name></name> <operator>=</operator> <name>CURLE_SSL_CACERT_BADFILE</name></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ta</name><operator>-&gt;</operator><name>pkey</name></name> <operator>=</operator> <operator>*</operator><name>pkey</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ta_size</name> <operator>=</operator> <name><name>ca</name><operator>.</operator><name>dn_len</name></name></expr>;</expr_stmt>

<switch>switch<condition>(<expr><name><name>pkey</name><operator>-&gt;</operator><name>key_type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>BR_KEYTYPE_RSA</name></expr>:</case>

<expr_stmt><expr><name>ta_size</name> <operator>+=</operator> <name><name>pkey</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>rsa</name><operator>.</operator><name>nlen</name></name> <operator>+</operator> <name><name>pkey</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>rsa</name><operator>.</operator><name>elen</name></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>BR_KEYTYPE_EC</name></expr>:</case>

<expr_stmt><expr><name>ta_size</name> <operator>+=</operator> <name><name>pkey</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>ec</name><operator>.</operator><name>qlen</name></name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><name><name>ca</name><operator>.</operator><name>err</name></name> <operator>=</operator> <name>CURLE_FAILED_INIT</name></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></switch>

<expr_stmt><expr><name><name>ta</name><operator>-&gt;</operator><name>dn</name><operator>.</operator><name>data</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>ta_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>ta</name><operator>-&gt;</operator><name>dn</name><operator>.</operator><name>data</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ca</name><operator>.</operator><name>err</name></name> <operator>=</operator> <name>CURLE_OUT_OF_MEMORY</name></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ta</name><operator>-&gt;</operator><name>dn</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>ca</name><operator>.</operator><name>dn</name></name></expr></argument>, <argument><expr><name><name>ca</name><operator>.</operator><name>dn_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ta</name><operator>-&gt;</operator><name>dn</name><operator>.</operator><name>len</name></name> <operator>=</operator> <name><name>ca</name><operator>.</operator><name>dn_len</name></name></expr>;</expr_stmt>

<switch>switch<condition>(<expr><name><name>pkey</name><operator>-&gt;</operator><name>key_type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>BR_KEYTYPE_RSA</name></expr>:</case>

<expr_stmt><expr><name><name>ta</name><operator>-&gt;</operator><name>pkey</name><operator>.</operator><name>key</name><operator>.</operator><name>rsa</name><operator>.</operator><name>n</name></name> <operator>=</operator> <name><name>ta</name><operator>-&gt;</operator><name>dn</name><operator>.</operator><name>data</name></name> <operator>+</operator> <name><name>ta</name><operator>-&gt;</operator><name>dn</name><operator>.</operator><name>len</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ta</name><operator>-&gt;</operator><name>pkey</name><operator>.</operator><name>key</name><operator>.</operator><name>rsa</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>pkey</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>rsa</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>pkey</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>rsa</name><operator>.</operator><name>nlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ta</name><operator>-&gt;</operator><name>pkey</name><operator>.</operator><name>key</name><operator>.</operator><name>rsa</name><operator>.</operator><name>e</name></name> <operator>=</operator> <name><name>ta</name><operator>-&gt;</operator><name>pkey</name><operator>.</operator><name>key</name><operator>.</operator><name>rsa</name><operator>.</operator><name>n</name></name> <operator>+</operator> <name><name>ta</name><operator>-&gt;</operator><name>pkey</name><operator>.</operator><name>key</name><operator>.</operator><name>rsa</name><operator>.</operator><name>nlen</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ta</name><operator>-&gt;</operator><name>pkey</name><operator>.</operator><name>key</name><operator>.</operator><name>rsa</name><operator>.</operator><name>e</name></name></expr></argument>, <argument><expr><name><name>pkey</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>rsa</name><operator>.</operator><name>e</name></name></expr></argument>, <argument><expr><name><name>pkey</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>rsa</name><operator>.</operator><name>elen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>BR_KEYTYPE_EC</name></expr>:</case>

<expr_stmt><expr><name><name>ta</name><operator>-&gt;</operator><name>pkey</name><operator>.</operator><name>key</name><operator>.</operator><name>ec</name><operator>.</operator><name>q</name></name> <operator>=</operator> <name><name>ta</name><operator>-&gt;</operator><name>dn</name><operator>.</operator><name>data</name></name> <operator>+</operator> <name><name>ta</name><operator>-&gt;</operator><name>dn</name><operator>.</operator><name>len</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ta</name><operator>-&gt;</operator><name>pkey</name><operator>.</operator><name>key</name><operator>.</operator><name>ec</name><operator>.</operator><name>q</name></name></expr></argument>, <argument><expr><name><name>pkey</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>ec</name><operator>.</operator><name>q</name></name></expr></argument>, <argument><expr><name><name>pkey</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>ec</name><operator>.</operator><name>qlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><name><name>ca</name><operator>.</operator><name>err</name></name> <operator>=</operator> <name>CURLE_SSL_CACERT_BADFILE</name></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></switch>

</block_content>}</block></while>

</block_content>}</block></for>

<if_stmt><if>if<condition>(<expr><call><name>ferror</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ca</name><operator>.</operator><name>err</name></name> <operator>=</operator> <name>CURLE_READ_ERROR</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<label><name>fail</name>:</label>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ca</name><operator>.</operator><name>err</name></name> <operator>==</operator> <name>CURLE_OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>anchors</name> <operator>=</operator> <name><name>ca</name><operator>.</operator><name>anchors</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>anchors_len</name> <operator>=</operator> <name><name>ca</name><operator>.</operator><name>anchors_len</name></name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ca</name><operator>.</operator><name>anchors_len</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>ca</name><operator>.</operator><name>anchors</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>dn</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>ca</name><operator>.</operator><name>anchors</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name><name>ca</name><operator>.</operator><name>err</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>x509_start_chain</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>br_x509_class</name> <modifier>*</modifier><modifier>*</modifier></type><name>ctx</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>server_name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>x509_context</name></name> <modifier>*</modifier></type><name>x509</name> <init>= <expr><operator>(</operator>struct <name>x509_context</name> <operator>*</operator><operator>)</operator><name>ctx</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>x509</name><operator>-&gt;</operator><name>verifyhost</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>server_name</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name><name>x509</name><operator>-&gt;</operator><name>minimal</name><operator>.</operator><name>vtable</name><operator>-&gt;</operator><name>start_chain</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>x509</name><operator>-&gt;</operator><name>minimal</name><operator>.</operator><name>vtable</name></name></expr></argument>, <argument><expr><name>server_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>x509_start_cert</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>br_x509_class</name> <modifier>*</modifier><modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>length</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>x509_context</name></name> <modifier>*</modifier></type><name>x509</name> <init>= <expr><operator>(</operator>struct <name>x509_context</name> <operator>*</operator><operator>)</operator><name>ctx</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name><name>x509</name><operator>-&gt;</operator><name>minimal</name><operator>.</operator><name>vtable</name><operator>-&gt;</operator><name>start_cert</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>x509</name><operator>-&gt;</operator><name>minimal</name><operator>.</operator><name>vtable</name></name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>x509_append</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>br_x509_class</name> <modifier>*</modifier><modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>x509_context</name></name> <modifier>*</modifier></type><name>x509</name> <init>= <expr><operator>(</operator>struct <name>x509_context</name> <operator>*</operator><operator>)</operator><name>ctx</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name><name>x509</name><operator>-&gt;</operator><name>minimal</name><operator>.</operator><name>vtable</name><operator>-&gt;</operator><name>append</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>x509</name><operator>-&gt;</operator><name>minimal</name><operator>.</operator><name>vtable</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>x509_end_cert</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>br_x509_class</name> <modifier>*</modifier><modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>x509_context</name></name> <modifier>*</modifier></type><name>x509</name> <init>= <expr><operator>(</operator>struct <name>x509_context</name> <operator>*</operator><operator>)</operator><name>ctx</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name><name>x509</name><operator>-&gt;</operator><name>minimal</name><operator>.</operator><name>vtable</name><operator>-&gt;</operator><name>end_cert</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>x509</name><operator>-&gt;</operator><name>minimal</name><operator>.</operator><name>vtable</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name></type> <name>x509_end_chain</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>br_x509_class</name> <modifier>*</modifier><modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>x509_context</name></name> <modifier>*</modifier></type><name>x509</name> <init>= <expr><operator>(</operator>struct <name>x509_context</name> <operator>*</operator><operator>)</operator><name>ctx</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name><name>x509</name><operator>-&gt;</operator><name>minimal</name><operator>.</operator><name>vtable</name><operator>-&gt;</operator><name>end_chain</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>x509</name><operator>-&gt;</operator><name>minimal</name><operator>.</operator><name>vtable</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>err</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>x509</name><operator>-&gt;</operator><name>verifypeer</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <name>BR_ERR_OK</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>br_x509_pkey</name> <modifier>*</modifier></type><name>x509_get_pkey</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>br_x509_class</name> <modifier>*</modifier><specifier>const</specifier> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>usages</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>x509_context</name></name> <modifier>*</modifier></type><name>x509</name> <init>= <expr><operator>(</operator>struct <name>x509_context</name> <operator>*</operator><operator>)</operator><name>ctx</name></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name><name>x509</name><operator>-&gt;</operator><name>minimal</name><operator>.</operator><name>vtable</name><operator>-&gt;</operator><name>get_pkey</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>x509</name><operator>-&gt;</operator><name>minimal</name><operator>.</operator><name>vtable</name></name></expr></argument>, <argument><expr><name>usages</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>br_x509_class</name></type> <name>x509_vtable</name> <init>= <expr><block>{

<expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>x509_context</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><name>x509_start_chain</name></expr>,

<expr><name>x509_start_cert</name></expr>,

<expr><name>x509_append</name></expr>,

<expr><name>x509_end_cert</name></expr>,

<expr><name>x509_end_chain</name></expr>,

<expr><name>x509_get_pkey</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>bearssl_connect_step1</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sockindex</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ssl_connect_data</name></name> <modifier>*</modifier></type><name>connssl</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>ssl</name><index>[<expr><name>sockindex</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ssl_backend_data</name></name> <modifier>*</modifier></type><name>backend</name> <init>= <expr><name><name>connssl</name><operator>-&gt;</operator><name>backend</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>ssl_cafile</name> <init>= <expr><call><name>SSL_CONN_CONFIG</name><argument_list>(<argument><expr><name>CAfile</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>hostname</name> <init>= <expr><ternary><condition><expr><call><name>SSL_IS_PROXY</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><name><name>conn</name><operator>-&gt;</operator><name>http_proxy</name><operator>.</operator><name>host</name><operator>.</operator><name>name</name></name></expr> </then><else>:

<expr><name><name>conn</name><operator>-&gt;</operator><name>host</name><operator>.</operator><name>name</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>verifypeer</name> <init>= <expr><call><name>SSL_CONN_CONFIG</name><argument_list>(<argument><expr><name>verifypeer</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>verifyhost</name> <init>= <expr><call><name>SSL_CONN_CONFIG</name><argument_list>(<argument><expr><name>verifyhost</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>version_min</name></decl>, <decl><type ref="prev"/><name>version_max</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_IPV6</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name><name>struct</name> <name>in6_addr</name></name></type> <name>addr</name></decl>;</decl_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name><name>struct</name> <name>in_addr</name></name></type> <name>addr</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<switch>switch<condition>(<expr><call><name>SSL_CONN_CONFIG</name><argument_list>(<argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<case>case <expr><name>CURL_SSLVERSION_SSLv2</name></expr>:</case>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"BearSSL does not support SSLv2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_SSL_CONNECT_ERROR</name></expr>;</return>

<case>case <expr><name>CURL_SSLVERSION_SSLv3</name></expr>:</case>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"BearSSL does not support SSLv3"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_SSL_CONNECT_ERROR</name></expr>;</return>

<case>case <expr><name>CURL_SSLVERSION_TLSv1_0</name></expr>:</case>

<expr_stmt><expr><name>version_min</name> <operator>=</operator> <name>BR_TLS10</name></expr>;</expr_stmt>

<expr_stmt><expr><name>version_max</name> <operator>=</operator> <name>BR_TLS10</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>CURL_SSLVERSION_TLSv1_1</name></expr>:</case>

<expr_stmt><expr><name>version_min</name> <operator>=</operator> <name>BR_TLS11</name></expr>;</expr_stmt>

<expr_stmt><expr><name>version_max</name> <operator>=</operator> <name>BR_TLS11</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>CURL_SSLVERSION_TLSv1_2</name></expr>:</case>

<expr_stmt><expr><name>version_min</name> <operator>=</operator> <name>BR_TLS12</name></expr>;</expr_stmt>

<expr_stmt><expr><name>version_max</name> <operator>=</operator> <name>BR_TLS12</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>CURL_SSLVERSION_DEFAULT</name></expr>:</case>

<case>case <expr><name>CURL_SSLVERSION_TLSv1</name></expr>:</case>

<expr_stmt><expr><name>version_min</name> <operator>=</operator> <name>BR_TLS10</name></expr>;</expr_stmt>

<expr_stmt><expr><name>version_max</name> <operator>=</operator> <name>BR_TLS12</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"BearSSL: unknown CURLOPT_SSLVERSION"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_SSL_CONNECT_ERROR</name></expr>;</return>

</block_content>}</block></switch>

<if_stmt><if>if<condition>(<expr><name>ssl_cafile</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>load_cafile</name><argument_list>(<argument><expr><name>ssl_cafile</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>backend</name><operator>-&gt;</operator><name>anchors</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>backend</name><operator>-&gt;</operator><name>anchors_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>ret</name> <operator>!=</operator> <name>CURLE_OK</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>verifypeer</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"error setting certificate verify locations:\n"</literal>

<literal type="string">" CAfile: %s\n"</literal></expr></argument>, <argument><expr><name>ssl_cafile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"error setting certificate verify locations,"</literal>

<literal type="string">" continuing anyway:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>br_ssl_client_init_full</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>backend</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>backend</name><operator>-&gt;</operator><name>x509</name><operator>.</operator><name>minimal</name></name></expr></argument>,

<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>anchors</name></name></expr></argument>, <argument><expr><name><name>backend</name><operator>-&gt;</operator><name>anchors_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>br_ssl_engine_set_versions</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>backend</name><operator>-&gt;</operator><name>ctx</name><operator>.</operator><name>eng</name></name></expr></argument>, <argument><expr><name>version_min</name></expr></argument>, <argument><expr><name>version_max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>br_ssl_engine_set_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>backend</name><operator>-&gt;</operator><name>ctx</name><operator>.</operator><name>eng</name></name></expr></argument>, <argument><expr><name><name>backend</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>backend</name><operator>-&gt;</operator><name>x509</name><operator>.</operator><name>vtable</name></name> <operator>=</operator> <operator>&amp;</operator><name>x509_vtable</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>backend</name><operator>-&gt;</operator><name>x509</name><operator>.</operator><name>verifypeer</name></name> <operator>=</operator> <name>verifypeer</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>backend</name><operator>-&gt;</operator><name>x509</name><operator>.</operator><name>verifyhost</name></name> <operator>=</operator> <name>verifyhost</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>br_ssl_engine_set_x509</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>backend</name><operator>-&gt;</operator><name>ctx</name><operator>.</operator><name>eng</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>backend</name><operator>-&gt;</operator><name>x509</name><operator>.</operator><name>vtable</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>SSL_SET_OPTION</name><argument_list>(<argument><expr><name><name>primary</name><operator>.</operator><name>sessionid</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>session</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>Curl_ssl_sessionid_lock</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>Curl_ssl_getsessionid</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>session</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>sockindex</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>br_ssl_engine_set_session_parameters</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>backend</name><operator>-&gt;</operator><name>ctx</name><operator>.</operator><name>eng</name></name></expr></argument>, <argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"BearSSL: re-using session ID\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>Curl_ssl_sessionid_unlock</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>tls_enable_alpn</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>cur</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_NGHTTP2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>httpversion</name></name> <operator>&gt;=</operator> <name>CURL_HTTP_VERSION_2</name> <operator>&amp;&amp;</operator>

<operator>(</operator><operator>!</operator><call><name>SSL_IS_PROXY</name><argument_list>()</argument_list></call> <operator>||</operator> <operator>!</operator><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>tunnel_proxy</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>backend</name><operator>-&gt;</operator><name>protocols</name><index>[<expr><name>cur</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>NGHTTP2_PROTO_VERSION_ID</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"ALPN, offering %s\n"</literal></expr></argument>, <argument><expr><name>NGHTTP2_PROTO_VERSION_ID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>backend</name><operator>-&gt;</operator><name>protocols</name><index>[<expr><name>cur</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>ALPN_HTTP_1_1</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"ALPN, offering %s\n"</literal></expr></argument>, <argument><expr><name>ALPN_HTTP_1_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>br_ssl_engine_set_protocol_names</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>backend</name><operator>-&gt;</operator><name>ctx</name><operator>.</operator><name>eng</name></name></expr></argument>,

<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>protocols</name></name></expr></argument>, <argument><expr><name>cur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><literal type="number">1</literal> <operator>==</operator> <call><name>Curl_inet_pton</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><name>hostname</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>)</argument_list></call><operator>)</operator>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_IPV6</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>||</operator> <operator>(</operator><literal type="number">1</literal> <operator>==</operator> <call><name>Curl_inet_pton</name><argument_list>(<argument><expr><name>AF_INET6</name></expr></argument>, <argument><expr><name>hostname</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>)</argument_list></call><operator>)</operator></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>verifyhost</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"BearSSL: "</literal>

<literal type="string">"host verification of IP address is not supported"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_PEER_FAILED_VERIFICATION</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>hostname</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>br_ssl_client_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>backend</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name>hostname</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_FAILED_INIT</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>backend</name><operator>-&gt;</operator><name>active</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>connssl</name><operator>-&gt;</operator><name>connecting_state</name></name> <operator>=</operator> <name>ssl_connect_2</name></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>bearssl_run_until</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sockindex</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name></type> <name>target</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ssl_connect_data</name></name> <modifier>*</modifier></type><name>connssl</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>ssl</name><index>[<expr><name>sockindex</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ssl_backend_data</name></name> <modifier>*</modifier></type><name>backend</name> <init>= <expr><name><name>connssl</name><operator>-&gt;</operator><name>backend</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>curl_socket_t</name></type> <name>sockfd</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>sock</name><index>[<expr><name>sockindex</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>state</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<for>for<control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<expr_stmt><expr><name>state</name> <operator>=</operator> <call><name>br_ssl_engine_current_state</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>backend</name><operator>-&gt;</operator><name>ctx</name><operator>.</operator><name>eng</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>state</name> <operator>&amp;</operator> <name>BR_SSL_CLOSED</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>br_ssl_engine_last_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>backend</name><operator>-&gt;</operator><name>ctx</name><operator>.</operator><name>eng</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch<condition>(<expr><name>err</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>BR_ERR_OK</name></expr>:</case>

<if_stmt><if>if<condition>(<expr><name><name>connssl</name><operator>-&gt;</operator><name>state</name></name> <operator>!=</operator> <name>ssl_connection_complete</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"SSL: connection closed during handshake"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_SSL_CONNECT_ERROR</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

<case>case <expr><name>BR_ERR_X509_EXPIRED</name></expr>:</case>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"SSL: X.509 verification: "</literal>

<literal type="string">"certificate is expired or not yet valid"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_PEER_FAILED_VERIFICATION</name></expr>;</return>

<case>case <expr><name>BR_ERR_X509_BAD_SERVER_NAME</name></expr>:</case>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"SSL: X.509 verification: "</literal>

<literal type="string">"expected server name was not found in the chain"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_PEER_FAILED_VERIFICATION</name></expr>;</return>

<case>case <expr><name>BR_ERR_X509_NOT_TRUSTED</name></expr>:</case>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"SSL: X.509 verification: "</literal>

<literal type="string">"chain could not be linked to a trust anchor"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_PEER_FAILED_VERIFICATION</name></expr>;</return>

</block_content>}</block></switch>

<if_stmt><if>if<condition>(<expr><name>err</name> <operator>&gt;=</operator> <literal type="number">32</literal> <operator>&amp;&amp;</operator> <name>err</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_PEER_FAILED_VERIFICATION</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>CURLE_SSL_CONNECT_ERROR</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>state</name> <operator>&amp;</operator> <name>target</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_OK</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>state</name> <operator>&amp;</operator> <name>BR_SSL_SENDREC</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>br_ssl_engine_sendrec_buf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>backend</name><operator>-&gt;</operator><name>ctx</name><operator>.</operator><name>eng</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>swrite</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>ret</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>SOCKERRNO</name> <operator>==</operator> <name>EAGAIN</name> <operator>||</operator> <name>SOCKERRNO</name> <operator>==</operator> <name>EWOULDBLOCK</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>connssl</name><operator>-&gt;</operator><name>state</name></name> <operator>!=</operator> <name>ssl_connection_complete</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>connssl</name><operator>-&gt;</operator><name>connecting_state</name></name> <operator>=</operator> <name>ssl_connect_2_writing</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>CURLE_AGAIN</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>CURLE_WRITE_ERROR</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>br_ssl_engine_sendrec_ack</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>backend</name><operator>-&gt;</operator><name>ctx</name><operator>.</operator><name>eng</name></name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name>state</name> <operator>&amp;</operator> <name>BR_SSL_RECVREC</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>br_ssl_engine_recvrec_buf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>backend</name><operator>-&gt;</operator><name>ctx</name><operator>.</operator><name>eng</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>sread</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"SSL: EOF without close notify"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_READ_ERROR</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>ret</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>SOCKERRNO</name> <operator>==</operator> <name>EAGAIN</name> <operator>||</operator> <name>SOCKERRNO</name> <operator>==</operator> <name>EWOULDBLOCK</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>connssl</name><operator>-&gt;</operator><name>state</name></name> <operator>!=</operator> <name>ssl_connection_complete</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>connssl</name><operator>-&gt;</operator><name>connecting_state</name></name> <operator>=</operator> <name>ssl_connect_2_reading</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>CURLE_AGAIN</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>CURLE_READ_ERROR</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>br_ssl_engine_recvrec_ack</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>backend</name><operator>-&gt;</operator><name>ctx</name><operator>.</operator><name>eng</name></name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>bearssl_connect_step2</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sockindex</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ssl_connect_data</name></name> <modifier>*</modifier></type><name>connssl</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>ssl</name><index>[<expr><name>sockindex</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ssl_backend_data</name></name> <modifier>*</modifier></type><name>backend</name> <init>= <expr><name><name>connssl</name><operator>-&gt;</operator><name>backend</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>bearssl_run_until</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>sockindex</name></expr></argument>, <argument><expr><name>BR_SSL_SENDAPP</name> <operator>|</operator> <name>BR_SSL_RECVAPP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>ret</name> <operator>==</operator> <name>CURLE_AGAIN</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_OK</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>ret</name> <operator>==</operator> <name>CURLE_OK</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>br_ssl_engine_current_state</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>backend</name><operator>-&gt;</operator><name>ctx</name><operator>.</operator><name>eng</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>BR_SSL_CLOSED</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"SSL: connection closed during handshake"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_SSL_CONNECT_ERROR</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>connssl</name><operator>-&gt;</operator><name>connecting_state</name></name> <operator>=</operator> <name>ssl_connect_3</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>bearssl_connect_step3</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sockindex</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ssl_connect_data</name></name> <modifier>*</modifier></type><name>connssl</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>ssl</name><index>[<expr><name>sockindex</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ssl_backend_data</name></name> <modifier>*</modifier></type><name>backend</name> <init>= <expr><name><name>connssl</name><operator>-&gt;</operator><name>backend</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DEBUGASSERT</name><argument_list>(<argument><expr><name>ssl_connect_3</name> <operator>==</operator> <name><name>connssl</name><operator>-&gt;</operator><name>connecting_state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>tls_enable_alpn</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>protocol</name></decl>;</decl_stmt>

<expr_stmt><expr><name>protocol</name> <operator>=</operator> <call><name>br_ssl_engine_get_selected_protocol</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>backend</name><operator>-&gt;</operator><name>ctx</name><operator>.</operator><name>eng</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>protocol</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"ALPN, server accepted to use %s\n"</literal></expr></argument>, <argument><expr><name>protocol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_NGHTTP2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>protocol</name></expr></argument>, <argument><expr><name>NGHTTP2_PROTO_VERSION_ID</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>negnpn</name></name> <operator>=</operator> <name>CURL_HTTP_VERSION_2</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

if<condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>protocol</name></expr></argument>, <argument><expr><name>ALPN_HTTP_1_1</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>negnpn</name></name> <operator>=</operator> <name>CURL_HTTP_VERSION_1_1</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"ALPN, unrecognized protocol %s\n"</literal></expr></argument>, <argument><expr><name>protocol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>Curl_multiuse_state</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>conn</name><operator>-&gt;</operator><name>negnpn</name></name> <operator>==</operator> <name>CURL_HTTP_VERSION_2</name></expr> ?</condition><then>

<expr><name>BUNDLE_MULTIPLEX</name></expr> </then><else>: <expr><name>BUNDLE_NO_MULTIUSE</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"ALPN, server did not agree to a protocol\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>SSL_SET_OPTION</name><argument_list>(<argument><expr><name><name>primary</name><operator>.</operator><name>sessionid</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>incache</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>oldsession</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>br_ssl_session_parameters</name> <modifier>*</modifier></type><name>session</name></decl>;</decl_stmt>

<expr_stmt><expr><name>session</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>session</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>session</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>br_ssl_engine_get_session_parameters</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>backend</name><operator>-&gt;</operator><name>ctx</name><operator>.</operator><name>eng</name></name></expr></argument>, <argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_ssl_sessionid_lock</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>incache</name> <operator>=</operator> <operator>!</operator><operator>(</operator><call><name>Curl_ssl_getsessionid</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oldsession</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>sockindex</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>incache</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>Curl_ssl_delsessionid</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>oldsession</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>Curl_ssl_addsessionid</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>session</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>sockindex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_ssl_sessionid_unlock</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>connssl</name><operator>-&gt;</operator><name>connecting_state</name></name> <operator>=</operator> <name>ssl_connect_done</name></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ssize_t</name></type> <name>bearssl_send</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sockindex</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>CURLcode</name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ssl_connect_data</name></name> <modifier>*</modifier></type><name>connssl</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>ssl</name><index>[<expr><name>sockindex</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ssl_backend_data</name></name> <modifier>*</modifier></type><name>backend</name> <init>= <expr><name><name>connssl</name><operator>-&gt;</operator><name>backend</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>app</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>applen</name></decl>;</decl_stmt>

<for>for<control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>err</name> <operator>=</operator> <call><name>bearssl_run_until</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>sockindex</name></expr></argument>, <argument><expr><name>BR_SSL_SENDAPP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>err</name> <operator>!=</operator> <name>CURLE_OK</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>app</name> <operator>=</operator> <call><name>br_ssl_engine_sendapp_buf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>backend</name><operator>-&gt;</operator><name>ctx</name><operator>.</operator><name>eng</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>applen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>app</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"SSL: connection closed during write"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>err</name> <operator>=</operator> <name>CURLE_SEND_ERROR</name></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>backend</name><operator>-&gt;</operator><name>pending_write</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>applen</name> <operator>=</operator> <name><name>backend</name><operator>-&gt;</operator><name>pending_write</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>backend</name><operator>-&gt;</operator><name>pending_write</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>applen</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>applen</name> <operator>&gt;</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>applen</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>app</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>applen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>br_ssl_engine_sendapp_ack</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>backend</name><operator>-&gt;</operator><name>ctx</name><operator>.</operator><name>eng</name></name></expr></argument>, <argument><expr><name>applen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>br_ssl_engine_flush</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>backend</name><operator>-&gt;</operator><name>ctx</name><operator>.</operator><name>eng</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>backend</name><operator>-&gt;</operator><name>pending_write</name></name> <operator>=</operator> <name>applen</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ssize_t</name></type> <name>bearssl_recv</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sockindex</name></decl></parameter>,

<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>CURLcode</name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>ssl_connect_data</name></name> <modifier>*</modifier></type><name>connssl</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>ssl</name><index>[<expr><name>sockindex</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ssl_backend_data</name></name> <modifier>*</modifier></type><name>backend</name> <init>= <expr><name><name>connssl</name><operator>-&gt;</operator><name>backend</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>app</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>applen</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>err</name> <operator>=</operator> <call><name>bearssl_run_until</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>sockindex</name></expr></argument>, <argument><expr><name>BR_SSL_RECVAPP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>*</operator><name>err</name> <operator>!=</operator> <name>CURLE_OK</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>app</name> <operator>=</operator> <call><name>br_ssl_engine_recvapp_buf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>backend</name><operator>-&gt;</operator><name>ctx</name><operator>.</operator><name>eng</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>applen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>app</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>applen</name> <operator>&gt;</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>applen</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>app</name></expr></argument>, <argument><expr><name>applen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>br_ssl_engine_recvapp_ack</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>backend</name><operator>-&gt;</operator><name>ctx</name><operator>.</operator><name>eng</name></name></expr></argument>, <argument><expr><name>applen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>applen</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>bearssl_connect_common</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>sockindex</name></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>nonblocking</name></decl></parameter>,

<parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>done</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ssl_connect_data</name></name> <modifier>*</modifier></type><name>connssl</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>ssl</name><index>[<expr><name>sockindex</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>curl_socket_t</name></type> <name>sockfd</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>sock</name><index>[<expr><name>sockindex</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>time_t</name></type> <name>timeout_ms</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>what</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>ssl_connection_complete</name> <operator>==</operator> <name><name>connssl</name><operator>-&gt;</operator><name>state</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>done</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>ssl_connect_1</name> <operator>==</operator> <name><name>connssl</name><operator>-&gt;</operator><name>connecting_state</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>bearssl_connect_step1</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>sockindex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>ret</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<while>while<condition>(<expr><name>ssl_connect_2</name> <operator>==</operator> <name><name>connssl</name><operator>-&gt;</operator><name>connecting_state</name></name> <operator>||</operator>

<name>ssl_connect_2_reading</name> <operator>==</operator> <name><name>connssl</name><operator>-&gt;</operator><name>connecting_state</name></name> <operator>||</operator>

<name>ssl_connect_2_writing</name> <operator>==</operator> <name><name>connssl</name><operator>-&gt;</operator><name>connecting_state</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>timeout_ms</name> <operator>=</operator> <call><name>Curl_timeleft</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>timeout_ms</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"SSL connection timeout"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OPERATION_TIMEDOUT</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>ssl_connect_2_reading</name> <operator>==</operator> <name><name>connssl</name><operator>-&gt;</operator><name>connecting_state</name></name> <operator>||</operator>

<name>ssl_connect_2_writing</name> <operator>==</operator> <name><name>connssl</name><operator>-&gt;</operator><name>connecting_state</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>curl_socket_t</name></type> <name>writefd</name> <init>= <expr><ternary><condition><expr><name>ssl_connect_2_writing</name> <operator>==</operator>

<name><name>connssl</name><operator>-&gt;</operator><name>connecting_state</name></name></expr>?</condition><then><expr><name>sockfd</name></expr></then><else>:<expr><name>CURL_SOCKET_BAD</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>curl_socket_t</name></type> <name>readfd</name> <init>= <expr><ternary><condition><expr><name>ssl_connect_2_reading</name> <operator>==</operator>

<name><name>connssl</name><operator>-&gt;</operator><name>connecting_state</name></name></expr>?</condition><then><expr><name>sockfd</name></expr></then><else>:<expr><name>CURL_SOCKET_BAD</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>what</name> <operator>=</operator> <call><name>Curl_socket_check</name><argument_list>(<argument><expr><name>readfd</name></expr></argument>, <argument><expr><name>CURL_SOCKET_BAD</name></expr></argument>, <argument><expr><name>writefd</name></expr></argument>,

<argument><expr><ternary><condition><expr><name>nonblocking</name></expr>?</condition><then><expr><literal type="number">0</literal></expr></then><else>:<expr><name>timeout_ms</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>what</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"select/poll on SSL socket, errno: %d"</literal></expr></argument>, <argument><expr><name>SOCKERRNO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_SSL_CONNECT_ERROR</name></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><literal type="number">0</literal> <operator>==</operator> <name>what</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>nonblocking</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>done</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"SSL connection timeout"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OPERATION_TIMEDOUT</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>bearssl_connect_step2</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>sockindex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>ret</name> <operator>||</operator> <operator>(</operator><name>nonblocking</name> <operator>&amp;&amp;</operator>

<operator>(</operator><name>ssl_connect_2</name> <operator>==</operator> <name><name>connssl</name><operator>-&gt;</operator><name>connecting_state</name></name> <operator>||</operator>

<name>ssl_connect_2_reading</name> <operator>==</operator> <name><name>connssl</name><operator>-&gt;</operator><name>connecting_state</name></name> <operator>||</operator>

<name>ssl_connect_2_writing</name> <operator>==</operator> <name><name>connssl</name><operator>-&gt;</operator><name>connecting_state</name></name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if<condition>(<expr><name>ssl_connect_3</name> <operator>==</operator> <name><name>connssl</name><operator>-&gt;</operator><name>connecting_state</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>bearssl_connect_step3</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>sockindex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>ret</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>ssl_connect_done</name> <operator>==</operator> <name><name>connssl</name><operator>-&gt;</operator><name>connecting_state</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>connssl</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ssl_connection_complete</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>recv</name><index>[<expr><name>sockindex</name></expr>]</index></name> <operator>=</operator> <name>bearssl_recv</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>send</name><index>[<expr><name>sockindex</name></expr>]</index></name> <operator>=</operator> <name>bearssl_send</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>done</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>done</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>connssl</name><operator>-&gt;</operator><name>connecting_state</name></name> <operator>=</operator> <name>ssl_connect_1</name></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type> <name>Curl_bearssl_version</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>msnprintf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="string">"BearSSL"</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>Curl_bearssl_data_pending</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>connindex</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ssl_connect_data</name></name> <modifier>*</modifier></type><name>connssl</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>ssl</name><index>[<expr><name>connindex</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ssl_backend_data</name></name> <modifier>*</modifier></type><name>backend</name> <init>= <expr><name><name>connssl</name><operator>-&gt;</operator><name>backend</name></name></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>br_ssl_engine_current_state</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>backend</name><operator>-&gt;</operator><name>ctx</name><operator>.</operator><name>eng</name></name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>BR_SSL_RECVAPP</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>Curl_bearssl_random</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier><name>data</name></type> <name>UNUSED_PARAM</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>entropy</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>length</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>br_hmac_drbg_context</name></type> <name>ctx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>seeded</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>seeded</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>br_prng_seeder</name></type> <name>seeder</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>br_hmac_drbg_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>br_sha256_vtable</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>seeder</name> <operator>=</operator> <call><name>br_prng_seeder_system</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>seeder</name> <operator>||</operator> <operator>!</operator><call><name>seeder</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>.</operator><name>vtable</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_FAILED_INIT</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>seeded</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>br_hmac_drbg_generate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>entropy</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>Curl_bearssl_connect</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sockindex</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>done</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>bearssl_connect_common</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>sockindex</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>done</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>ret</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>DEBUGASSERT</name><argument_list>(<argument><expr><name>done</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>Curl_bearssl_connect_nonblocking</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>sockindex</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>done</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>bearssl_connect_common</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>sockindex</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>done</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>Curl_bearssl_get_internals</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ssl_connect_data</name></name> <modifier>*</modifier></type><name>connssl</name></decl></parameter>,

<parameter><decl><type><name>CURLINFO</name> <name>info</name></type> <name>UNUSED_PARAM</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>ssl_backend_data</name></name> <modifier>*</modifier></type><name>backend</name> <init>= <expr><name><name>connssl</name><operator>-&gt;</operator><name>backend</name></name></expr></init></decl>;</decl_stmt>

<return>return <expr><operator>&amp;</operator><name><name>backend</name><operator>-&gt;</operator><name>ctx</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Curl_bearssl_close</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sockindex</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>ssl_connect_data</name></name> <modifier>*</modifier></type><name>connssl</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>ssl</name><index>[<expr><name>sockindex</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ssl_backend_data</name></name> <modifier>*</modifier></type><name>backend</name> <init>= <expr><name><name>connssl</name><operator>-&gt;</operator><name>backend</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>backend</name><operator>-&gt;</operator><name>active</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>br_ssl_engine_close</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>backend</name><operator>-&gt;</operator><name>ctx</name><operator>.</operator><name>eng</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>bearssl_run_until</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>sockindex</name></expr></argument>, <argument><expr><name>BR_SSL_CLOSED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>backend</name><operator>-&gt;</operator><name>anchors_len</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>anchors</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>dn</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>backend</name><operator>-&gt;</operator><name>anchors</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Curl_bearssl_session_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>Curl_bearssl_md5sum</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>inputlen</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>md5sum</name></decl></parameter>,

<parameter><decl><type><name>size_t</name> <name>md5len</name></type> <name>UNUSED_PARAM</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>br_md5_context</name></type> <name>ctx</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>br_md5_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>br_md5_update</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><name>inputlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>br_md5_out</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>md5sum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>Curl_bearssl_sha256sum</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>inputlen</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>sha256sum</name></decl></parameter>,

<parameter><decl><type><name>size_t</name> <name>sha256len</name></type> <name>UNUSED_PARAM</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>br_sha256_context</name></type> <name>ctx</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>br_sha256_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>br_sha256_update</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><name>inputlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>br_sha256_out</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>sha256sum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>Curl_ssl</name></name></type> <name>Curl_ssl_bearssl</name> <init>= <expr><block>{

<expr><block>{ <expr><name>CURLSSLBACKEND_BEARSSL</name></expr>, <expr><literal type="string">"bearssl"</literal></expr> }</block></expr>,

<expr><literal type="number">0</literal></expr>,

<expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>ssl_backend_data</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><name>Curl_none_init</name></expr>,

<expr><name>Curl_none_cleanup</name></expr>,

<expr><name>Curl_bearssl_version</name></expr>,

<expr><name>Curl_none_check_cxn</name></expr>,

<expr><name>Curl_none_shutdown</name></expr>,

<expr><name>Curl_bearssl_data_pending</name></expr>,

<expr><name>Curl_bearssl_random</name></expr>,

<expr><name>Curl_none_cert_status_request</name></expr>,

<expr><name>Curl_bearssl_connect</name></expr>,

<expr><name>Curl_bearssl_connect_nonblocking</name></expr>,

<expr><name>Curl_bearssl_get_internals</name></expr>,

<expr><name>Curl_bearssl_close</name></expr>,

<expr><name>Curl_none_close_all</name></expr>,

<expr><name>Curl_bearssl_session_free</name></expr>,

<expr><name>Curl_none_set_engine</name></expr>,

<expr><name>Curl_none_set_engine_default</name></expr>,

<expr><name>Curl_none_engines_list</name></expr>,

<expr><name>Curl_none_false_start</name></expr>,

<expr><name>Curl_bearssl_md5sum</name></expr>,

<expr><name>Curl_bearssl_sha256sum</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</unit>
