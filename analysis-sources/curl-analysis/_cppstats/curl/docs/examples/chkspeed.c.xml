<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\curl-analysis\_cppstats\curl\docs\examples\chkspeed.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;curl/curl.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>URL_BASE</name></cpp:macro> <cpp:value>"http://speedtest.your.domain/"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>URL_1M</name></cpp:macro> <cpp:value>URL_BASE "file_1M.bin"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>URL_2M</name></cpp:macro> <cpp:value>URL_BASE "file_2M.bin"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>URL_5M</name></cpp:macro> <cpp:value>URL_BASE "file_5M.bin"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>URL_10M</name></cpp:macro> <cpp:value>URL_BASE "file_10M.bin"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>URL_20M</name></cpp:macro> <cpp:value>URL_BASE "file_20M.bin"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>URL_50M</name></cpp:macro> <cpp:value>URL_BASE "file_50M.bin"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>URL_100M</name></cpp:macro> <cpp:value>URL_BASE "file_100M.bin"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHKSPEED_VERSION</name></cpp:macro> <cpp:value>"1.0"</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>size_t</name></type> <name>WriteCallback</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>nmemb</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>ptr</name></expr>;</expr_stmt> 

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>data</name></expr>;</expr_stmt> 

<return>return <expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>size</name> <operator>*</operator> <name>nmemb</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CURL</name> <modifier>*</modifier></type><name>curl_handle</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>res</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>prtall</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>prtsep</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>prttime</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>url</name> <init>= <expr><name>URL_1M</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>appname</name> <init>= <expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>argc</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<for>for<control>(<init><expr><name>argc</name><operator>--</operator></expr><operator>,</operator> <expr><name>argv</name><operator>++</operator></expr>;</init> <condition><expr><operator>*</operator><name>argv</name></expr>;</condition> <incr><expr><name>argc</name><operator>--</operator></expr><operator>,</operator> <expr><name>argv</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>strncasecmp</name><argument_list>(<argument><expr><operator>*</operator><name>argv</name></expr></argument>, <argument><expr><literal type="string">"-"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>strncasecmp</name><argument_list>(<argument><expr><operator>*</operator><name>argv</name></expr></argument>, <argument><expr><literal type="string">"-H"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,

<argument><expr><literal type="string">"\rUsage: %s [-m=1|2|5|10|20|50|100] [-t] [-x] [url]\n"</literal></expr></argument>,

<argument><expr><name>appname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><call><name>strncasecmp</name><argument_list>(<argument><expr><operator>*</operator><name>argv</name></expr></argument>, <argument><expr><literal type="string">"-V"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\r%s %s - %s\n"</literal></expr></argument>,

<argument><expr><name>appname</name></expr></argument>, <argument><expr><name>CHKSPEED_VERSION</name></expr></argument>, <argument><expr><call><name>curl_version</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><call><name>strncasecmp</name><argument_list>(<argument><expr><operator>*</operator><name>argv</name></expr></argument>, <argument><expr><literal type="string">"-A"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>prtall</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><call><name>strncasecmp</name><argument_list>(<argument><expr><operator>*</operator><name>argv</name></expr></argument>, <argument><expr><literal type="string">"-X"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>prtsep</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><call><name>strncasecmp</name><argument_list>(<argument><expr><operator>*</operator><name>argv</name></expr></argument>, <argument><expr><literal type="string">"-T"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>prttime</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><call><name>strncasecmp</name><argument_list>(<argument><expr><operator>*</operator><name>argv</name></expr></argument>, <argument><expr><literal type="string">"-M="</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>long</name></type> <name>m</name> <init>= <expr><call><name>strtol</name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name>argv</name><operator>)</operator> <operator>+</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch<condition>(<expr><name>m</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<expr_stmt><expr><name>url</name> <operator>=</operator> <name>URL_1M</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case>

<expr_stmt><expr><name>url</name> <operator>=</operator> <name>URL_2M</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">5</literal></expr>:</case>

<expr_stmt><expr><name>url</name> <operator>=</operator> <name>URL_5M</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">10</literal></expr>:</case>

<expr_stmt><expr><name>url</name> <operator>=</operator> <name>URL_10M</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">20</literal></expr>:</case>

<expr_stmt><expr><name>url</name> <operator>=</operator> <name>URL_20M</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">50</literal></expr>:</case>

<expr_stmt><expr><name>url</name> <operator>=</operator> <name>URL_50M</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">100</literal></expr>:</case>

<expr_stmt><expr><name>url</name> <operator>=</operator> <name>URL_100M</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\r%s: invalid parameter %s\n"</literal></expr></argument>,

<argument><expr><name>appname</name></expr></argument>, <argument><expr><operator>*</operator><name>argv</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\r%s: invalid or unknown option %s\n"</literal></expr></argument>,

<argument><expr><name>appname</name></expr></argument>, <argument><expr><operator>*</operator><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>url</name> <operator>=</operator> <operator>*</operator><name>argv</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>prtsep</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"-------------------------------------------------\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>prttime</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>time_t</name></type> <name>t</name> <init>= <expr><call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Localtime: %s"</literal></expr></argument>, <argument><expr><call><name>ctime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>curl_global_init</name><argument_list>(<argument><expr><name>CURL_GLOBAL_ALL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>curl_handle</name> <operator>=</operator> <call><name>curl_easy_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name>curl_handle</name></expr></argument>, <argument><expr><name>CURLOPT_URL</name></expr></argument>, <argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name>curl_handle</name></expr></argument>, <argument><expr><name>CURLOPT_WRITEFUNCTION</name></expr></argument>, <argument><expr><name>WriteCallback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name>curl_handle</name></expr></argument>, <argument><expr><name>CURLOPT_USERAGENT</name></expr></argument>,

<argument><expr><literal type="string">"libcurl-speedchecker/"</literal> <name>CHKSPEED_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>curl_easy_perform</name><argument_list>(<argument><expr><name>curl_handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>CURLE_OK</name> <operator>==</operator> <name>res</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>curl_off_t</name></type> <name>val</name></decl>;</decl_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>curl_easy_getinfo</name><argument_list>(<argument><expr><name>curl_handle</name></expr></argument>, <argument><expr><name>CURLINFO_SIZE_DOWNLOAD_T</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>CURLE_OK</name> <operator>==</operator> <name>res</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>val</name><operator>&gt;</operator><literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Data downloaded: %"</literal> <name>CURL_FORMAT_CURL_OFF_T</name> <literal type="string">" bytes.\n"</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>curl_easy_getinfo</name><argument_list>(<argument><expr><name>curl_handle</name></expr></argument>, <argument><expr><name>CURLINFO_TOTAL_TIME_T</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>CURLE_OK</name> <operator>==</operator> <name>res</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>val</name><operator>&gt;</operator><literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Total download time: %"</literal> <name>CURL_FORMAT_CURL_OFF_T</name> <literal type="string">".%06ld sec.\n"</literal></expr></argument>,

<argument><expr><operator>(</operator><name>val</name> <operator>/</operator> <literal type="number">1000000</literal><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><operator>(</operator><name>val</name> <operator>%</operator> <literal type="number">1000000</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>curl_easy_getinfo</name><argument_list>(<argument><expr><name>curl_handle</name></expr></argument>, <argument><expr><name>CURLINFO_SPEED_DOWNLOAD_T</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>CURLE_OK</name> <operator>==</operator> <name>res</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>val</name><operator>&gt;</operator><literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Average download speed: %"</literal> <name>CURL_FORMAT_CURL_OFF_T</name>

<literal type="string">" kbyte/sec.\n"</literal></expr></argument>, <argument><expr><name>val</name> <operator>/</operator> <literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>prtall</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>curl_easy_getinfo</name><argument_list>(<argument><expr><name>curl_handle</name></expr></argument>, <argument><expr><name>CURLINFO_NAMELOOKUP_TIME_T</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>CURLE_OK</name> <operator>==</operator> <name>res</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>val</name><operator>&gt;</operator><literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Name lookup time: %"</literal> <name>CURL_FORMAT_CURL_OFF_T</name> <literal type="string">".%06ld sec.\n"</literal></expr></argument>,

<argument><expr><operator>(</operator><name>val</name> <operator>/</operator> <literal type="number">1000000</literal><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><operator>(</operator><name>val</name> <operator>%</operator> <literal type="number">1000000</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>curl_easy_getinfo</name><argument_list>(<argument><expr><name>curl_handle</name></expr></argument>, <argument><expr><name>CURLINFO_CONNECT_TIME_T</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>CURLE_OK</name> <operator>==</operator> <name>res</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>val</name><operator>&gt;</operator><literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Connect time: %"</literal> <name>CURL_FORMAT_CURL_OFF_T</name> <literal type="string">".%06ld sec.\n"</literal></expr></argument>,

<argument><expr><operator>(</operator><name>val</name> <operator>/</operator> <literal type="number">1000000</literal><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><operator>(</operator><name>val</name> <operator>%</operator> <literal type="number">1000000</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Error while fetching '%s' : %s\n"</literal></expr></argument>,

<argument><expr><name>url</name></expr></argument>, <argument><expr><call><name>curl_easy_strerror</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>curl_easy_cleanup</name><argument_list>(<argument><expr><name>curl_handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>curl_global_cleanup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

</unit>
