<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\curl-analysis\_cppstats\curl\docs\examples\progressfunc.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;curl/curl.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LIBCURL_VERSION_NUM</name> <operator>&gt;=</operator> <literal type="number">0x073d00</literal></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIME_IN_US</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIMETYPE</name></cpp:macro> <cpp:value>curl_off_t</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIMEOPT</name></cpp:macro> <cpp:value>CURLINFO_TOTAL_TIME_T</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MINIMAL_PROGRESS_FUNCTIONALITY_INTERVAL</name></cpp:macro> <cpp:value>3000000</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIMETYPE</name></cpp:macro> <cpp:value>double</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIMEOPT</name></cpp:macro> <cpp:value>CURLINFO_TOTAL_TIME</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MINIMAL_PROGRESS_FUNCTIONALITY_INTERVAL</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STOP_DOWNLOAD_AFTER_THIS_MANY_BYTES</name></cpp:macro> <cpp:value>6000</cpp:value></cpp:define>

<struct>struct <name>myprogress</name> <block>{

<decl_stmt><decl><type><name>TIMETYPE</name></type> <name>lastruntime</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>CURL</name> <modifier>*</modifier></type><name>curl</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <name>int</name></type> <name>xferinfo</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>,

<parameter><decl><type><name>curl_off_t</name></type> <name>dltotal</name></decl></parameter>, <parameter><decl><type><name>curl_off_t</name></type> <name>dlnow</name></decl></parameter>,

<parameter><decl><type><name>curl_off_t</name></type> <name>ultotal</name></decl></parameter>, <parameter><decl><type><name>curl_off_t</name></type> <name>ulnow</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>myprogress</name></name> <modifier>*</modifier></type><name>myp</name> <init>= <expr><operator>(</operator>struct <name>myprogress</name> <operator>*</operator><operator>)</operator><name>p</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CURL</name> <modifier>*</modifier></type><name>curl</name> <init>= <expr><name><name>myp</name><operator>-&gt;</operator><name>curl</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TIMETYPE</name></type> <name>curtime</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>curl_easy_getinfo</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>TIMEOPT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>curtime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>curtime</name> <operator>-</operator> <name><name>myp</name><operator>-&gt;</operator><name>lastruntime</name></name><operator>)</operator> <operator>&gt;=</operator> <name>MINIMAL_PROGRESS_FUNCTIONALITY_INTERVAL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>myp</name><operator>-&gt;</operator><name>lastruntime</name></name> <operator>=</operator> <name>curtime</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TIME_IN_US</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"TOTAL TIME: %"</literal> <name>CURL_FORMAT_CURL_OFF_T</name> <literal type="string">".%06ld\r\n"</literal></expr></argument>,

<argument><expr><operator>(</operator><name>curtime</name> <operator>/</operator> <literal type="number">1000000</literal><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><operator>(</operator><name>curtime</name> <operator>%</operator> <literal type="number">1000000</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"TOTAL TIME: %f \r\n"</literal></expr></argument>, <argument><expr><name>curtime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"UP: %"</literal> <name>CURL_FORMAT_CURL_OFF_T</name> <literal type="string">" of %"</literal> <name>CURL_FORMAT_CURL_OFF_T</name>

<literal type="string">" DOWN: %"</literal> <name>CURL_FORMAT_CURL_OFF_T</name> <literal type="string">" of %"</literal> <name>CURL_FORMAT_CURL_OFF_T</name>

<literal type="string">"\r\n"</literal></expr></argument>,

<argument><expr><name>ulnow</name></expr></argument>, <argument><expr><name>ultotal</name></expr></argument>, <argument><expr><name>dlnow</name></expr></argument>, <argument><expr><name>dltotal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>dlnow</name> <operator>&gt;</operator> <name>STOP_DOWNLOAD_AFTER_THIS_MANY_BYTES</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LIBCURL_VERSION_NUM</name> <operator>&lt;</operator> <literal type="number">0x072000</literal></expr></cpp:if>

<function><type><specifier>static</specifier> <name>int</name></type> <name>older_progress</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>,

<parameter><decl><type><name>double</name></type> <name>dltotal</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>dlnow</name></decl></parameter>,

<parameter><decl><type><name>double</name></type> <name>ultotal</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>ulnow</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>xferinfo</name><argument_list>(<argument><expr><name>p</name></expr></argument>,

<argument><expr><operator>(</operator><name>curl_off_t</name><operator>)</operator><name>dltotal</name></expr></argument>,

<argument><expr><operator>(</operator><name>curl_off_t</name><operator>)</operator><name>dlnow</name></expr></argument>,

<argument><expr><operator>(</operator><name>curl_off_t</name><operator>)</operator><name>ultotal</name></expr></argument>,

<argument><expr><operator>(</operator><name>curl_off_t</name><operator>)</operator><name>ulnow</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CURL</name> <modifier>*</modifier></type><name>curl</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>res</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>myprogress</name></name></type> <name>prog</name></decl>;</decl_stmt>

<expr_stmt><expr><name>curl</name> <operator>=</operator> <call><name>curl_easy_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>curl</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>prog</name><operator>.</operator><name>lastruntime</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>prog</name><operator>.</operator><name>curl</name></name> <operator>=</operator> <name>curl</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_URL</name></expr></argument>, <argument><expr><literal type="string">"https://example.com/"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LIBCURL_VERSION_NUM</name> <operator>&gt;=</operator> <literal type="number">0x072000</literal></expr></cpp:if>

<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_XFERINFOFUNCTION</name></expr></argument>, <argument><expr><name>xferinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_XFERINFODATA</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>prog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_PROGRESSFUNCTION</name></expr></argument>, <argument><expr><name>older_progress</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_PROGRESSDATA</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>prog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_NOPROGRESS</name></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>curl_easy_perform</name><argument_list>(<argument><expr><name>curl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>res</name> <operator>!=</operator> <name>CURLE_OK</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><call><name>curl_easy_strerror</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>curl_easy_cleanup</name><argument_list>(<argument><expr><name>curl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><name>res</name></expr>;</return>

</block_content>}</block></function>

</unit>
