<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\curl-analysis\_cppstats\curl\docs\examples\fopen.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/time.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;curl/curl.h&gt;</cpp:file></cpp:include>

<enum>enum <name>fcurl_type_e</name> <block>{

<decl><name>CFTYPE_NONE</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>CFTYPE_FILE</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,

<decl><name>CFTYPE_CURL</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>

}</block>;</enum>

<struct>struct <name>fcurl_data</name>

<block>{

<decl_stmt><decl><type><name><name>enum</name> <name>fcurl_type_e</name></name></type> <name>type</name></decl>;</decl_stmt> 

<union>union <block>{

<decl_stmt><decl><type><name>CURL</name> <modifier>*</modifier></type><name>curl</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>file</name></decl>;</decl_stmt>

}</block> <decl><name>handle</name></decl>;</union> 

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>size_t</name></type> <name>buffer_len</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>size_t</name></type> <name>buffer_pos</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>still_running</name></decl>;</decl_stmt> 

}</block>;</struct>

<typedef>typedef <type><name><name>struct</name> <name>fcurl_data</name></name></type> <name>URL_FILE</name>;</typedef>

<function_decl><type><name>URL_FILE</name> <modifier>*</modifier></type><name>url_fopen</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>url</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>operation</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>url_fclose</name><parameter_list>(<parameter><decl><type><name>URL_FILE</name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>url_feof</name><parameter_list>(<parameter><decl><type><name>URL_FILE</name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>size_t</name></type> <name>url_fread</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>nmemb</name></decl></parameter>, <parameter><decl><type><name>URL_FILE</name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>char</name> <modifier>*</modifier></type><name>url_fgets</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>URL_FILE</name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>url_rewind</name><parameter_list>(<parameter><decl><type><name>URL_FILE</name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <name>CURLM</name> <modifier>*</modifier></type><name>multi_handle</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>size_t</name></type> <name>write_callback</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>nitems</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>newbuff</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>rembuff</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>URL_FILE</name> <modifier>*</modifier></type><name>url</name> <init>= <expr><operator>(</operator><name>URL_FILE</name> <operator>*</operator><operator>)</operator><name>userp</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>size</name> <operator>*=</operator> <name>nitems</name></expr>;</expr_stmt>

<expr_stmt><expr><name>rembuff</name> <operator>=</operator> <name><name>url</name><operator>-&gt;</operator><name>buffer_len</name></name> <operator>-</operator> <name><name>url</name><operator>-&gt;</operator><name>buffer_pos</name></name></expr>;</expr_stmt> 

<if_stmt><if>if<condition>(<expr><name>size</name> <operator>&gt;</operator> <name>rembuff</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>newbuff</name> <operator>=</operator> <call><name>realloc</name><argument_list>(<argument><expr><name><name>url</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><name><name>url</name><operator>-&gt;</operator><name>buffer_len</name></name> <operator>+</operator> <operator>(</operator><name>size</name> <operator>-</operator> <name>rembuff</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>newbuff</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"callback buffer grow failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <name>rembuff</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name><name>url</name><operator>-&gt;</operator><name>buffer_len</name></name> <operator>+=</operator> <name>size</name> <operator>-</operator> <name>rembuff</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>url</name><operator>-&gt;</operator><name>buffer</name></name> <operator>=</operator> <name>newbuff</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>url</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><name><name>url</name><operator>-&gt;</operator><name>buffer_pos</name></name></expr>]</index></name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>url</name><operator>-&gt;</operator><name>buffer_pos</name></name> <operator>+=</operator> <name>size</name></expr>;</expr_stmt>

<return>return <expr><name>size</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>fill_buffer</name><parameter_list>(<parameter><decl><type><name>URL_FILE</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>want</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>fd_set</name></type> <name>fdread</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>fd_set</name></type> <name>fdwrite</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>fd_set</name></type> <name>fdexcep</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>timeout</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CURLMcode</name></type> <name>mc</name></decl>;</decl_stmt> 

<if_stmt><if>if<condition>(<expr><operator>(</operator><operator>!</operator><name><name>file</name><operator>-&gt;</operator><name>still_running</name></name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>file</name><operator>-&gt;</operator><name>buffer_pos</name></name> <operator>&gt;</operator> <name>want</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<do>do <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>maxfd</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>curl_timeo</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>FD_ZERO</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fdread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FD_ZERO</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fdwrite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FD_ZERO</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fdexcep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>timeout</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <literal type="number">60</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>timeout</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>curl_multi_timeout</name><argument_list>(<argument><expr><name>multi_handle</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>curl_timeo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>curl_timeo</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>timeout</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <name>curl_timeo</name> <operator>/</operator> <literal type="number">1000</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>timeout</name><operator>.</operator><name>tv_sec</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>timeout</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>timeout</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <operator>(</operator><name>curl_timeo</name> <operator>%</operator> <literal type="number">1000</literal><operator>)</operator> <operator>*</operator> <literal type="number">1000</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>mc</name> <operator>=</operator> <call><name>curl_multi_fdset</name><argument_list>(<argument><expr><name>multi_handle</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fdread</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fdwrite</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fdexcep</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>maxfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>mc</name> <operator>!=</operator> <name>CURLM_OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"curl_multi_fdset() failed, code %d.\n"</literal></expr></argument>, <argument><expr><name>mc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>maxfd</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>Sleep</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>wait</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">100</literal> <operator>*</operator> <literal type="number">1000</literal></expr> }</block></expr></init></decl>;</decl_stmt> 

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>select</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wait</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>select</name><argument_list>(<argument><expr><name>maxfd</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>fdread</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fdwrite</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fdexcep</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<switch>switch<condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>

<case>case <expr><operator>-</operator><literal type="number">1</literal></expr>:</case>

<break>break;</break>

<case>case <expr><literal type="number">0</literal></expr>:</case>

<default>default:</default>

<expr_stmt><expr><call><name>curl_multi_perform</name><argument_list>(<argument><expr><name>multi_handle</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>file</name><operator>-&gt;</operator><name>still_running</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block> while<condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>still_running</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>file</name><operator>-&gt;</operator><name>buffer_pos</name></name> <operator>&lt;</operator> <name>want</name><operator>)</operator></expr>)</condition>;</do>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>use_buffer</name><parameter_list>(<parameter><decl><type><name>URL_FILE</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>want</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>buffer_pos</name></name> <operator>&lt;=</operator> <name>want</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>buffer</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>buffer_pos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>buffer_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>file</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><name>want</name></expr>]</index></name></expr></argument>,

<argument><expr><operator>(</operator><name><name>file</name><operator>-&gt;</operator><name>buffer_pos</name></name> <operator>-</operator> <name>want</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>buffer_pos</name></name> <operator>-=</operator> <name>want</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>URL_FILE</name> <modifier>*</modifier></type><name>url_fopen</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>url</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>operation</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>URL_FILE</name> <modifier>*</modifier></type><name>file</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>operation</name></expr>;</expr_stmt>

<expr_stmt><expr><name>file</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>URL_FILE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>file</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>handle</name><operator>.</operator><name>file</name></name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr><name>operation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>handle</name><operator>.</operator><name>file</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>CFTYPE_FILE</name></expr>;</expr_stmt></block_content></block></if> 

<else>else <block>{<block_content>

<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>CFTYPE_CURL</name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>handle</name><operator>.</operator><name>curl</name></name> <operator>=</operator> <call><name>curl_easy_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>handle</name><operator>.</operator><name>curl</name></name></expr></argument>, <argument><expr><name>CURLOPT_URL</name></expr></argument>, <argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>handle</name><operator>.</operator><name>curl</name></name></expr></argument>, <argument><expr><name>CURLOPT_WRITEDATA</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>handle</name><operator>.</operator><name>curl</name></name></expr></argument>, <argument><expr><name>CURLOPT_VERBOSE</name></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>handle</name><operator>.</operator><name>curl</name></name></expr></argument>, <argument><expr><name>CURLOPT_WRITEFUNCTION</name></expr></argument>, <argument><expr><name>write_callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>multi_handle</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>multi_handle</name> <operator>=</operator> <call><name>curl_multi_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>curl_multi_add_handle</name><argument_list>(<argument><expr><name>multi_handle</name></expr></argument>, <argument><expr><name><name>file</name><operator>-&gt;</operator><name>handle</name><operator>.</operator><name>curl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>curl_multi_perform</name><argument_list>(<argument><expr><name>multi_handle</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>file</name><operator>-&gt;</operator><name>still_running</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>file</name><operator>-&gt;</operator><name>buffer_pos</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name><name>file</name><operator>-&gt;</operator><name>still_running</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>curl_multi_remove_handle</name><argument_list>(<argument><expr><name>multi_handle</name></expr></argument>, <argument><expr><name><name>file</name><operator>-&gt;</operator><name>handle</name><operator>.</operator><name>curl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>curl_easy_cleanup</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>handle</name><operator>.</operator><name>curl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>file</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>file</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>url_fclose</name><parameter_list>(<parameter><decl><type><name>URL_FILE</name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<switch>switch<condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>CFTYPE_FILE</name></expr>:</case>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>fclose</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>handle</name><operator>.</operator><name>file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<break>break;</break>

<case>case <expr><name>CFTYPE_CURL</name></expr>:</case>

<expr_stmt><expr><call><name>curl_multi_remove_handle</name><argument_list>(<argument><expr><name>multi_handle</name></expr></argument>, <argument><expr><name><name>file</name><operator>-&gt;</operator><name>handle</name><operator>.</operator><name>curl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>curl_easy_cleanup</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>handle</name><operator>.</operator><name>curl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default> 

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>EOF</name></expr>;</expr_stmt>

<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EBADF</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>url_feof</name><parameter_list>(<parameter><decl><type><name>URL_FILE</name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<switch>switch<condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>CFTYPE_FILE</name></expr>:</case>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>feof</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>handle</name><operator>.</operator><name>file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>CFTYPE_CURL</name></expr>:</case>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>file</name><operator>-&gt;</operator><name>buffer_pos</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name><name>file</name><operator>-&gt;</operator><name>still_running</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<default>default:</default> 

<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EBADF</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>url_fread</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>nmemb</name></decl></parameter>, <parameter><decl><type><name>URL_FILE</name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>want</name></decl>;</decl_stmt>

<switch>switch<condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>CFTYPE_FILE</name></expr>:</case>

<expr_stmt><expr><name>want</name> <operator>=</operator> <call><name>fread</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>nmemb</name></expr></argument>, <argument><expr><name><name>file</name><operator>-&gt;</operator><name>handle</name><operator>.</operator><name>file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>CFTYPE_CURL</name></expr>:</case>

<expr_stmt><expr><name>want</name> <operator>=</operator> <name>nmemb</name> <operator>*</operator> <name>size</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fill_buffer</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>want</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>file</name><operator>-&gt;</operator><name>buffer_pos</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>buffer_pos</name></name> <operator>&lt;</operator> <name>want</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>want</name> <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>buffer_pos</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name><name>file</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><name>want</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>use_buffer</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>want</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>want</name> <operator>=</operator> <name>want</name> <operator>/</operator> <name>size</name></expr>;</expr_stmt> 

<break>break;</break>

<default>default:</default> 

<expr_stmt><expr><name>want</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EBADF</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<return>return <expr><name>want</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>url_fgets</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>URL_FILE</name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>want</name> <init>= <expr><name>size</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>loop</name></decl>;</decl_stmt>

<switch>switch<condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>CFTYPE_FILE</name></expr>:</case>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>fgets</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>size</name></expr></argument>, <argument><expr><name><name>file</name><operator>-&gt;</operator><name>handle</name><operator>.</operator><name>file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>CFTYPE_CURL</name></expr>:</case>

<expr_stmt><expr><call><name>fill_buffer</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>want</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>file</name><operator>-&gt;</operator><name>buffer_pos</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>buffer_pos</name></name> <operator>&lt;</operator> <name>want</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>want</name> <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>buffer_pos</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for<control>(<init><expr><name>loop</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>loop</name> <operator>&lt;</operator> <name>want</name></expr>;</condition> <incr><expr><name>loop</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><name>loop</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>want</name> <operator>=</operator> <name>loop</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name><name>file</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><name>want</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ptr</name><index>[<expr><name>want</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>use_buffer</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>want</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default> 

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EBADF</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<return>return <expr><name>ptr</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>url_rewind</name><parameter_list>(<parameter><decl><type><name>URL_FILE</name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch<condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>CFTYPE_FILE</name></expr>:</case>

<expr_stmt><expr><call><name>rewind</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>handle</name><operator>.</operator><name>file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<break>break;</break>

<case>case <expr><name>CFTYPE_CURL</name></expr>:</case>

<expr_stmt><expr><call><name>curl_multi_remove_handle</name><argument_list>(<argument><expr><name>multi_handle</name></expr></argument>, <argument><expr><name><name>file</name><operator>-&gt;</operator><name>handle</name><operator>.</operator><name>curl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>curl_multi_add_handle</name><argument_list>(<argument><expr><name>multi_handle</name></expr></argument>, <argument><expr><name><name>file</name><operator>-&gt;</operator><name>handle</name><operator>.</operator><name>curl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>buffer</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>buffer_pos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>buffer_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default> 

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FGETSFILE</name></cpp:macro> <cpp:value>"fgets.test"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FREADFILE</name></cpp:macro> <cpp:value>"fread.test"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REWINDFILE</name></cpp:macro> <cpp:value>"rewind.test"</cpp:value></cpp:define>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>URL_FILE</name> <modifier>*</modifier></type><name>handle</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>outf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>nread</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>url</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>argc</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>url</name> <operator>=</operator> <literal type="string">"http://192.168.7.3/testfile"</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>url</name> <operator>=</operator> <name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>outf</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>FGETSFILE</name></expr></argument>, <argument><expr><literal type="string">"wb+"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>outf</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr><literal type="string">"couldn't open fgets output file\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>handle</name> <operator>=</operator> <call><name>url_fopen</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>handle</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"couldn't url_fopen() %s\n"</literal></expr></argument>, <argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>outf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">2</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<while>while<condition>(<expr><operator>!</operator><call><name>url_feof</name><argument_list>(<argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>url_fgets</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fwrite</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>outf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>url_fclose</name><argument_list>(<argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>outf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>outf</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>FREADFILE</name></expr></argument>, <argument><expr><literal type="string">"wb+"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>outf</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr><literal type="string">"couldn't open fread output file\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>handle</name> <operator>=</operator> <call><name>url_fopen</name><argument_list>(<argument><expr><literal type="string">"testfile"</literal></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>handle</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"couldn't url_fopen() testfile\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>outf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">2</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<do>do <block>{<block_content>

<expr_stmt><expr><name>nread</name> <operator>=</operator> <call><name>url_fread</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fwrite</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>nread</name></expr></argument>, <argument><expr><name>outf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block> while<condition>(<expr><name>nread</name></expr>)</condition>;</do>

<expr_stmt><expr><call><name>url_fclose</name><argument_list>(<argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>outf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>outf</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>REWINDFILE</name></expr></argument>, <argument><expr><literal type="string">"wb+"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>outf</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr><literal type="string">"couldn't open fread output file\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>handle</name> <operator>=</operator> <call><name>url_fopen</name><argument_list>(<argument><expr><literal type="string">"testfile"</literal></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>handle</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"couldn't url_fopen() testfile\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>outf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">2</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>nread</name> <operator>=</operator> <call><name>url_fread</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fwrite</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>nread</name></expr></argument>, <argument><expr><name>outf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>url_rewind</name><argument_list>(<argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><literal type="char">'\n'</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fwrite</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>outf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>nread</name> <operator>=</operator> <call><name>url_fread</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fwrite</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>nread</name></expr></argument>, <argument><expr><name>outf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>url_fclose</name><argument_list>(<argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>outf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

</unit>
