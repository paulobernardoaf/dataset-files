<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\curl-analysis\_cppstats\curl\docs\examples\imap-multi.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;curl/curl.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MULTI_PERFORM_HANG_TIMEOUT</name></cpp:macro> <cpp:value>60 * 1000</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>timeval</name></name></type> <name>tvnow</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>now</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>now</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <operator>(</operator><name>long</name><operator>)</operator><call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>now</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>now</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>long</name></type> <name>tvdiff</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>newer</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>older</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><name><name>newer</name><operator>.</operator><name>tv_sec</name></name> <operator>-</operator> <name><name>older</name><operator>.</operator><name>tv_sec</name></name><operator>)</operator> <operator>*</operator> <literal type="number">1000</literal> <operator>+</operator>

<operator>(</operator><name><name>newer</name><operator>.</operator><name>tv_usec</name></name> <operator>-</operator> <name><name>older</name><operator>.</operator><name>tv_usec</name></name><operator>)</operator> <operator>/</operator> <literal type="number">1000</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CURL</name> <modifier>*</modifier></type><name>curl</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CURLM</name> <modifier>*</modifier></type><name>mcurl</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>still_running</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>mp_start</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>curl_global_init</name><argument_list>(<argument><expr><name>CURL_GLOBAL_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>curl</name> <operator>=</operator> <call><name>curl_easy_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>curl</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>mcurl</name> <operator>=</operator> <call><name>curl_multi_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>mcurl</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">2</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_USERNAME</name></expr></argument>, <argument><expr><literal type="string">"user"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_PASSWORD</name></expr></argument>, <argument><expr><literal type="string">"secret"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_URL</name></expr></argument>, <argument><expr><literal type="string">"imap://imap.example.com/INBOX/;UID=1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>curl_multi_add_handle</name><argument_list>(<argument><expr><name>mcurl</name></expr></argument>, <argument><expr><name>curl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mp_start</name> <operator>=</operator> <call><name>tvnow</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>curl_multi_perform</name><argument_list>(<argument><expr><name>mcurl</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>still_running</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while<condition>(<expr><name>still_running</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>timeout</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>fd_set</name></type> <name>fdread</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>fd_set</name></type> <name>fdwrite</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>fd_set</name></type> <name>fdexcep</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>maxfd</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CURLMcode</name></type> <name>mc</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>long</name></type> <name>curl_timeo</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>FD_ZERO</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fdread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FD_ZERO</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fdwrite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FD_ZERO</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fdexcep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>timeout</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>timeout</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>curl_multi_timeout</name><argument_list>(<argument><expr><name>mcurl</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>curl_timeo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>curl_timeo</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>timeout</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <name>curl_timeo</name> <operator>/</operator> <literal type="number">1000</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>timeout</name><operator>.</operator><name>tv_sec</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>timeout</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>timeout</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <operator>(</operator><name>curl_timeo</name> <operator>%</operator> <literal type="number">1000</literal><operator>)</operator> <operator>*</operator> <literal type="number">1000</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>mc</name> <operator>=</operator> <call><name>curl_multi_fdset</name><argument_list>(<argument><expr><name>mcurl</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fdread</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fdwrite</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fdexcep</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>maxfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>mc</name> <operator>!=</operator> <name>CURLM_OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"curl_multi_fdset() failed, code %d.\n"</literal></expr></argument>, <argument><expr><name>mc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>maxfd</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>Sleep</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>wait</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">100</literal> <operator>*</operator> <literal type="number">1000</literal></expr> }</block></expr></init></decl>;</decl_stmt> 

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>select</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wait</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>select</name><argument_list>(<argument><expr><name>maxfd</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>fdread</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fdwrite</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fdexcep</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>tvdiff</name><argument_list>(<argument><expr><call><name>tvnow</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>mp_start</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>MULTI_PERFORM_HANG_TIMEOUT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,

<argument><expr><literal type="string">"ABORTING: Since it seems that we would have run forever.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<switch>switch<condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>

<case>case <expr><operator>-</operator><literal type="number">1</literal></expr>:</case> 

<break>break;</break>

<case>case <expr><literal type="number">0</literal></expr>:</case> 

<default>default:</default> 

<expr_stmt><expr><call><name>curl_multi_perform</name><argument_list>(<argument><expr><name>mcurl</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>still_running</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></while>

<expr_stmt><expr><call><name>curl_multi_remove_handle</name><argument_list>(<argument><expr><name>mcurl</name></expr></argument>, <argument><expr><name>curl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>curl_multi_cleanup</name><argument_list>(<argument><expr><name>mcurl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>curl_easy_cleanup</name><argument_list>(<argument><expr><name>curl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>curl_global_cleanup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

</unit>
