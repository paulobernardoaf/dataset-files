<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\curl-analysis\_cppstats\curl\docs\examples\synctime.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__CYGWIN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;winsock2.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;curl/curl.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_STRING</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_STRING1</name></cpp:macro> <cpp:value>MAX_STRING + 1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SYNCTIME_UA</name></cpp:macro> <cpp:value>"synctime/1.0"</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>char</name></type> <name><name>http_proxy</name><index>[<expr><name>MAX_STRING1</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>proxy_user</name><index>[<expr><name>MAX_STRING1</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>timeserver</name><index>[<expr><name>MAX_STRING1</name></expr>]</index></name></decl>;</decl_stmt>

}</block></struct></type> <name>conf_t</name>;</typedef>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>DefaultTimeServer</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>MAX_STRING1</name></expr>]</index></name> <init>=

<expr><block>{

<expr><literal type="string">"https://nist.time.gov/"</literal></expr>,

<expr><literal type="string">"https://www.google.com/"</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>DayStr</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="string">"Sun"</literal></expr>, <expr><literal type="string">"Mon"</literal></expr>, <expr><literal type="string">"Tue"</literal></expr>, <expr><literal type="string">"Wed"</literal></expr>, <expr><literal type="string">"Thu"</literal></expr>, <expr><literal type="string">"Fri"</literal></expr>, <expr><literal type="string">"Sat"</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>MthStr</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="string">"Jan"</literal></expr>, <expr><literal type="string">"Feb"</literal></expr>, <expr><literal type="string">"Mar"</literal></expr>, <expr><literal type="string">"Apr"</literal></expr>, <expr><literal type="string">"May"</literal></expr>, <expr><literal type="string">"Jun"</literal></expr>,

<expr><literal type="string">"Jul"</literal></expr>, <expr><literal type="string">"Aug"</literal></expr>, <expr><literal type="string">"Sep"</literal></expr>, <expr><literal type="string">"Oct"</literal></expr>, <expr><literal type="string">"Nov"</literal></expr>, <expr><literal type="string">"Dec"</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ShowAllHeader</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>AutoSyncTime</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SYSTEMTIME</name></type> <name>SYSTime</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SYSTEMTIME</name></type> <name>LOCALTime</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HTTP_COMMAND_HEAD</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HTTP_COMMAND_GET</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<function><type><name>size_t</name></type> <name>SyncTime_CURL_WriteOutput</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>nmemb</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>fwrite</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>nmemb</name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>nmemb</name><operator>*</operator><name>size</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>SyncTime_CURL_WriteHeader</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>nmemb</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>TmpStr1</name><index>[<expr><literal type="number">26</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>TmpStr2</name><index>[<expr><literal type="number">26</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>stream</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>ShowAllHeader</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><literal type="string">"Date:"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>ShowAllHeader</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"HTTP Server. %s"</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>AutoSyncTime</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>TmpStr1</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>TmpStr2</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">50</literal></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name>AutoSyncTime</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>RetVal</name> <init>= <expr><call><name>sscanf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><literal type="string">"Date: %s %hu %s %hu %hu:%hu:%hu"</literal></expr></argument>,

<argument><expr><name>TmpStr1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>SYSTime</name><operator>.</operator><name>wDay</name></name></expr></argument>, <argument><expr><name>TmpStr2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>SYSTime</name><operator>.</operator><name>wYear</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>SYSTime</name><operator>.</operator><name>wHour</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>SYSTime</name><operator>.</operator><name>wMinute</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>SYSTime</name><operator>.</operator><name>wSecond</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>RetVal</name> <operator>==</operator> <literal type="number">7</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>SYSTime</name><operator>.</operator><name>wMilliseconds</name></name> <operator>=</operator> <literal type="number">500</literal></expr>;</expr_stmt> 

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">12</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>MthStr</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>TmpStr2</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>SYSTime</name><operator>.</operator><name>wMonth</name></name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>AutoSyncTime</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt> 

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>AutoSyncTime</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><literal type="string">"X-Cache: HIT"</literal></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"ERROR: HTTP Server data is cached."</literal>

<literal type="string">" Server Date is no longer valid.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>AutoSyncTime</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name>nmemb</name><operator>*</operator><name>size</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>SyncTime_CURL_Init</name><parameter_list>(<parameter><decl><type><name>CURL</name> <modifier>*</modifier></type><name>curl</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>proxy_port</name></decl></parameter>,

<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>proxy_user_password</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>proxy_port</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_PROXY</name></expr></argument>, <argument><expr><name>proxy_port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>proxy_user_password</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_PROXYUSERPWD</name></expr></argument>, <argument><expr><name>proxy_user_password</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SYNCTIME_UA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_USERAGENT</name></expr></argument>, <argument><expr><name>SYNCTIME_UA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_WRITEFUNCTION</name></expr></argument>, <argument><expr><operator>*</operator><name>SyncTime_CURL_WriteOutput</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_HEADERFUNCTION</name></expr></argument>, <argument><expr><operator>*</operator><name>SyncTime_CURL_WriteHeader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>SyncTime_CURL_Fetch</name><parameter_list>(<parameter><decl><type><name>CURL</name> <modifier>*</modifier></type><name>curl</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>URL_Str</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>OutFileName</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>HttpGetBody</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>outfile</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>res</name></decl>;</decl_stmt>

<expr_stmt><expr><name>outfile</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>HttpGetBody</name> <operator>==</operator> <name>HTTP_COMMAND_HEAD</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_NOBODY</name></expr></argument>, <argument><expr><literal type="number">1L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>outfile</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>OutFileName</name></expr></argument>, <argument><expr><literal type="string">"wb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_WRITEDATA</name></expr></argument>, <argument><expr><name>outfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_URL</name></expr></argument>, <argument><expr><name>URL_Str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>curl_easy_perform</name><argument_list>(<argument><expr><name>curl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>outfile</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>outfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>res</name></expr>;</return> 

</block_content>}</block></function>

<function><type><name>void</name></type> <name>showUsage</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"SYNCTIME: Synchronising computer clock with time server"</literal>

<literal type="string">" using HTTP protocol.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Usage : SYNCTIME [Option]\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Options :\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">" --server=WEBSERVER Use this time server instead"</literal>

<literal type="string">" of default.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">" --showall Show all HTTP header.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">" --synctime Synchronising computer clock"</literal>

<literal type="string">" with time server.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">" --proxy-user=USER[:PASS] Set proxy username and"</literal>

<literal type="string">" password.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">" --proxy=HOST[:PORT] Use HTTP proxy on given"</literal>

<literal type="string">" port.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">" --help Print this help.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>conf_init</name><parameter_list>(<parameter><decl><type><name>conf_t</name> <modifier>*</modifier></type><name>conf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name><name>conf</name><operator>-&gt;</operator><name>http_proxy</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>MAX_STRING1</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>proxy_user</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></for> 

<expr_stmt><expr><operator>*</operator><name><name>conf</name><operator>-&gt;</operator><name>timeserver</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CURL</name> <modifier>*</modifier></type><name>curl</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>conf_t</name></type> <name><name>conf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>RetValue</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ShowAllHeader</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name>AutoSyncTime</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name>RetValue</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>conf_init</name><argument_list>(<argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>argc</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>OptionIndex</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while<condition>(<expr><name>OptionIndex</name> <operator>&lt;</operator> <name>argc</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>OptionIndex</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"--server="</literal></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>conf</name><operator>-&gt;</operator><name>timeserver</name></name></expr></argument>, <argument><expr><name>MAX_STRING</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>argv</name><index>[<expr><name>OptionIndex</name></expr>]</index><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>OptionIndex</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"--showall"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ShowAllHeader</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>OptionIndex</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"--synctime"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>AutoSyncTime</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>OptionIndex</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"--proxy-user="</literal></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>conf</name><operator>-&gt;</operator><name>proxy_user</name></name></expr></argument>, <argument><expr><name>MAX_STRING</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>argv</name><index>[<expr><name>OptionIndex</name></expr>]</index><index>[<expr><literal type="number">13</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>OptionIndex</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"--proxy="</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>conf</name><operator>-&gt;</operator><name>http_proxy</name></name></expr></argument>, <argument><expr><name>MAX_STRING</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>argv</name><index>[<expr><name>OptionIndex</name></expr>]</index><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>OptionIndex</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"--help"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator>

<operator>(</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>OptionIndex</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"/?"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>showUsage</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>OptionIndex</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>*</operator><name><name>conf</name><operator>-&gt;</operator><name>timeserver</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>conf</name><operator>-&gt;</operator><name>timeserver</name></name></expr></argument>, <argument><expr><name>MAX_STRING</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>DefaultTimeServer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>curl_global_init</name><argument_list>(<argument><expr><name>CURL_GLOBAL_ALL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>curl</name> <operator>=</operator> <call><name>curl_easy_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>curl</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>lt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>gmt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>time_t</name></type> <name>tt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>time_t</name></type> <name>tt_local</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>time_t</name></type> <name>tt_gmt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>tzonediffFloat</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>tzonediffWord</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>timeBuf</name><index>[<expr><literal type="number">61</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>tzoneBuf</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>SyncTime_CURL_Init</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name><name>conf</name><operator>-&gt;</operator><name>http_proxy</name></name></expr></argument>, <argument><expr><name><name>conf</name><operator>-&gt;</operator><name>proxy_user</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tt</name> <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lt</name> <operator>=</operator> <call><name>localtime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tt_local</name> <operator>=</operator> <call><name>mktime</name><argument_list>(<argument><expr><name>lt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>gmt</name> <operator>=</operator> <call><name>gmtime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tt_gmt</name> <operator>=</operator> <call><name>mktime</name><argument_list>(<argument><expr><name>gmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tzonediffFloat</name> <operator>=</operator> <call><name>difftime</name><argument_list>(<argument><expr><name>tt_local</name></expr></argument>, <argument><expr><name>tt_gmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tzonediffWord</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>tzonediffFloat</name><operator>/</operator><literal type="number">3600.0</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>double</name><operator>)</operator><operator>(</operator><name>tzonediffWord</name> <operator>*</operator> <literal type="number">3600</literal><operator>)</operator> <operator>==</operator> <name>tzonediffFloat</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>tzoneBuf</name></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>, <argument><expr><literal type="string">"%+03d'00'"</literal></expr></argument>, <argument><expr><name>tzonediffWord</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>tzoneBuf</name></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>, <argument><expr><literal type="string">"%+03d'30'"</literal></expr></argument>, <argument><expr><name>tzonediffWord</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>GetSystemTime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>SYSTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GetLocalTime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>LOCALTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>timeBuf</name></expr></argument>, <argument><expr><literal type="number">60</literal></expr></argument>, <argument><expr><literal type="string">"%s, %02d %s %04d %02d:%02d:%02d.%03d, "</literal></expr></argument>,

<argument><expr><name><name>DayStr</name><index>[<expr><name><name>LOCALTime</name><operator>.</operator><name>wDayOfWeek</name></name></expr>]</index></name></expr></argument>, <argument><expr><name><name>LOCALTime</name><operator>.</operator><name>wDay</name></name></expr></argument>,

<argument><expr><name><name>MthStr</name><index>[<expr><name><name>LOCALTime</name><operator>.</operator><name>wMonth</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>LOCALTime</name><operator>.</operator><name>wYear</name></name></expr></argument>,

<argument><expr><name><name>LOCALTime</name><operator>.</operator><name>wHour</name></name></expr></argument>, <argument><expr><name><name>LOCALTime</name><operator>.</operator><name>wMinute</name></name></expr></argument>, <argument><expr><name><name>LOCALTime</name><operator>.</operator><name>wSecond</name></name></expr></argument>,

<argument><expr><name><name>LOCALTime</name><operator>.</operator><name>wMilliseconds</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Fetch: %s\n\n"</literal></expr></argument>, <argument><expr><name><name>conf</name><operator>-&gt;</operator><name>timeserver</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Before HTTP. Date: %s%s\n\n"</literal></expr></argument>, <argument><expr><name>timeBuf</name></expr></argument>, <argument><expr><name>tzoneBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SyncTime_CURL_Fetch</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name><name>conf</name><operator>-&gt;</operator><name>timeserver</name></name></expr></argument>, <argument><expr><literal type="string">"index.htm"</literal></expr></argument>,

<argument><expr><name>HTTP_COMMAND_HEAD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GetLocalTime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>LOCALTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>timeBuf</name></expr></argument>, <argument><expr><literal type="number">60</literal></expr></argument>, <argument><expr><literal type="string">"%s, %02d %s %04d %02d:%02d:%02d.%03d, "</literal></expr></argument>,

<argument><expr><name><name>DayStr</name><index>[<expr><name><name>LOCALTime</name><operator>.</operator><name>wDayOfWeek</name></name></expr>]</index></name></expr></argument>, <argument><expr><name><name>LOCALTime</name><operator>.</operator><name>wDay</name></name></expr></argument>,

<argument><expr><name><name>MthStr</name><index>[<expr><name><name>LOCALTime</name><operator>.</operator><name>wMonth</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>LOCALTime</name><operator>.</operator><name>wYear</name></name></expr></argument>,

<argument><expr><name><name>LOCALTime</name><operator>.</operator><name>wHour</name></name></expr></argument>, <argument><expr><name><name>LOCALTime</name><operator>.</operator><name>wMinute</name></name></expr></argument>, <argument><expr><name><name>LOCALTime</name><operator>.</operator><name>wSecond</name></name></expr></argument>,

<argument><expr><name><name>LOCALTime</name><operator>.</operator><name>wMilliseconds</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\nAfter HTTP. Date: %s%s\n"</literal></expr></argument>, <argument><expr><name>timeBuf</name></expr></argument>, <argument><expr><name>tzoneBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>AutoSyncTime</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>SetSystemTime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>SYSTime</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"ERROR: Unable to set system time.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>RetValue</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>GetLocalTime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>LOCALTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>timeBuf</name></expr></argument>, <argument><expr><literal type="number">60</literal></expr></argument>, <argument><expr><literal type="string">"%s, %02d %s %04d %02d:%02d:%02d.%03d, "</literal></expr></argument>,

<argument><expr><name><name>DayStr</name><index>[<expr><name><name>LOCALTime</name><operator>.</operator><name>wDayOfWeek</name></name></expr>]</index></name></expr></argument>, <argument><expr><name><name>LOCALTime</name><operator>.</operator><name>wDay</name></name></expr></argument>,

<argument><expr><name><name>MthStr</name><index>[<expr><name><name>LOCALTime</name><operator>.</operator><name>wMonth</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>LOCALTime</name><operator>.</operator><name>wYear</name></name></expr></argument>,

<argument><expr><name><name>LOCALTime</name><operator>.</operator><name>wHour</name></name></expr></argument>, <argument><expr><name><name>LOCALTime</name><operator>.</operator><name>wMinute</name></name></expr></argument>, <argument><expr><name><name>LOCALTime</name><operator>.</operator><name>wSecond</name></name></expr></argument>,

<argument><expr><name><name>LOCALTime</name><operator>.</operator><name>wMilliseconds</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\nNew System's Date: %s%s\n"</literal></expr></argument>, <argument><expr><name>timeBuf</name></expr></argument>, <argument><expr><name>tzoneBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>conf_init</name><argument_list>(<argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>curl_easy_cleanup</name><argument_list>(<argument><expr><name>curl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>RetValue</name></expr>;</return>

</block_content>}</block></function>

</unit>
