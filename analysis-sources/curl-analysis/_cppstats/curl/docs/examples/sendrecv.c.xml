<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\curl-analysis\_cppstats\curl\docs\examples\sendrecv.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;curl/curl.h&gt;</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>int</name></type> <name>wait_on_socket</name><parameter_list>(<parameter><decl><type><name>curl_socket_t</name></type> <name>sockfd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>for_recv</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>timeout_ms</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>tv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>fd_set</name></type> <name>infd</name></decl>, <decl><type ref="prev"/><name>outfd</name></decl>, <decl><type ref="prev"/><name>errfd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>tv</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <name>timeout_ms</name> <operator>/</operator> <literal type="number">1000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tv</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <operator>(</operator><name>timeout_ms</name> <operator>%</operator> <literal type="number">1000</literal><operator>)</operator> <operator>*</operator> <literal type="number">1000</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FD_ZERO</name><argument_list>(<argument><expr><operator>&amp;</operator><name>infd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FD_ZERO</name><argument_list>(<argument><expr><operator>&amp;</operator><name>outfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FD_ZERO</name><argument_list>(<argument><expr><operator>&amp;</operator><name>errfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FD_SET</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>errfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if<condition>(<expr><name>for_recv</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>FD_SET</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>infd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>FD_SET</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>outfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>select</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>sockfd</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>infd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>outfd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>errfd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CURL</name> <modifier>*</modifier></type><name>curl</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>request</name> <init>= <expr><literal type="string">"GET / HTTP/1.0\r\nHost: example.com\r\n\r\n"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>request_len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>curl</name> <operator>=</operator> <call><name>curl_easy_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>curl</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>res</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>curl_socket_t</name></type> <name>sockfd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>nsent_total</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_URL</name></expr></argument>, <argument><expr><literal type="string">"https://example.com"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_CONNECT_ONLY</name></expr></argument>, <argument><expr><literal type="number">1L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>curl_easy_perform</name><argument_list>(<argument><expr><name>curl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>res</name> <operator>!=</operator> <name>CURLE_OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Error: %s\n"</literal></expr></argument>, <argument><expr><call><name>curl_easy_strerror</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>curl_easy_getinfo</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLINFO_ACTIVESOCKET</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sockfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>res</name> <operator>!=</operator> <name>CURLE_OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Error: %s\n"</literal></expr></argument>, <argument><expr><call><name>curl_easy_strerror</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Sending request.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<do>do <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>nsent</name></decl>;</decl_stmt>

<do>do <block>{<block_content>

<expr_stmt><expr><name>nsent</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>curl_easy_send</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>request</name> <operator>+</operator> <name>nsent_total</name></expr></argument>,

<argument><expr><name>request_len</name> <operator>-</operator> <name>nsent_total</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nsent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>nsent_total</name> <operator>+=</operator> <name>nsent</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>res</name> <operator>==</operator> <name>CURLE_AGAIN</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>wait_on_socket</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">60000L</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Error: timeout.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block> while<condition>(<expr><name>res</name> <operator>==</operator> <name>CURLE_AGAIN</name></expr>)</condition>;</do>

<if_stmt><if>if<condition>(<expr><name>res</name> <operator>!=</operator> <name>CURLE_OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Error: %s\n"</literal></expr></argument>, <argument><expr><call><name>curl_easy_strerror</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Sent %"</literal> <name>CURL_FORMAT_CURL_OFF_T</name> <literal type="string">" bytes.\n"</literal></expr></argument>,

<argument><expr><operator>(</operator><name>curl_off_t</name><operator>)</operator><name>nsent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block> while<condition>(<expr><name>nsent_total</name> <operator>&lt;</operator> <name>request_len</name></expr>)</condition>;</do>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Reading response.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>nread</name></decl>;</decl_stmt>

<do>do <block>{<block_content>

<expr_stmt><expr><name>nread</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>curl_easy_recv</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>nread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>res</name> <operator>==</operator> <name>CURLE_AGAIN</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>wait_on_socket</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">60000L</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Error: timeout.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block> while<condition>(<expr><name>res</name> <operator>==</operator> <name>CURLE_AGAIN</name></expr>)</condition>;</do>

<if_stmt><if>if<condition>(<expr><name>res</name> <operator>!=</operator> <name>CURLE_OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Error: %s\n"</literal></expr></argument>, <argument><expr><call><name>curl_easy_strerror</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>nread</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Received %"</literal> <name>CURL_FORMAT_CURL_OFF_T</name> <literal type="string">" bytes.\n"</literal></expr></argument>,

<argument><expr><operator>(</operator><name>curl_off_t</name><operator>)</operator><name>nread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>curl_easy_cleanup</name><argument_list>(<argument><expr><name>curl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

</unit>
