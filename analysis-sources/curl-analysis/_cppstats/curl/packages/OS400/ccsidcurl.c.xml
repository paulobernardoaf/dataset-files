<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\curl-analysis\_cppstats\curl\packages\OS400\ccsidcurl.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iconv.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>enum</name><name>(</name><name>int</name><name>)</name></cpp:pragma>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mprintf.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"slist.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"urldata.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"url.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"setopt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"getinfo.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ccsidcurl.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"os400sys.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SIZE_MAX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZE_MAX</name></cpp:macro> <cpp:value>((size_t) ~0)</cpp:value></cpp:define> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASCII_CCSID</name></cpp:macro> <cpp:value>819</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOCONV_CCSID</name></cpp:macro> <cpp:value>65535</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ICONV_ID_SIZE</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ICONV_OPEN_ERROR</name><parameter_list>(<parameter><type><name>t</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((t).return_value == -1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALLOC_GRANULE</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define> 

<function><type><specifier>static</specifier> <name>void</name></type>

<name>makeOS400IconvCode</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>ICONV_ID_SIZE</name></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>ccsid</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>ccsid</name> <operator>&amp;=</operator> <literal type="number">0xFFFF</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>ccsid</name> <operator>==</operator> <name>NOCONV_CCSID</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ccsid</name> <operator>=</operator> <name>ASCII_CCSID</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ICONV_ID_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>curl_msprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"IBMCCSID%05u0000000"</literal></expr></argument>, <argument><expr><name>ccsid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>iconv_t</name></type>

<name>iconv_open_CCSID</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>ccsidout</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>ccsidin</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>cstr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>fromcode</name><index>[<expr><name>ICONV_ID_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>tocode</name><index>[<expr><name>ICONV_ID_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>makeOS400IconvCode</name><argument_list>(<argument><expr><name>fromcode</name></expr></argument>, <argument><expr><name>ccsidin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>makeOS400IconvCode</name><argument_list>(<argument><expr><name>tocode</name></expr></argument>, <argument><expr><name>ccsidout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>tocode</name> <operator>+</operator> <literal type="number">13</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tocode</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if<condition>(<expr><name>cstr</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>fromcode</name><index>[<expr><literal type="number">18</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'1'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<return>return <expr><call><name>iconv_open</name><argument_list>(<argument><expr><name>tocode</name></expr></argument>, <argument><expr><name>fromcode</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>convert</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>dlen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dccsid</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>slen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sccsid</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>iconv_t</name></type> <name>cd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>lslen</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>sccsid</name> <operator>==</operator> <literal type="number">65535</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>sccsid</name> <operator>=</operator> <name>ASCII_CCSID</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>dccsid</name> <operator>==</operator> <literal type="number">65535</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>dccsid</name> <operator>=</operator> <name>ASCII_CCSID</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>sccsid</name> <operator>==</operator> <name>dccsid</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>lslen</name> <operator>=</operator> <ternary><condition><expr><name>slen</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>?</condition><then> <expr><name>slen</name></expr></then><else>: <expr><call><name>strlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <ternary><condition><expr><name>lslen</name> <operator>&lt;</operator> <name>dlen</name></expr>?</condition><then> <expr><name>lslen</name></expr></then><else>: <expr><name>dlen</name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>s</name> <operator>!=</operator> <name>d</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>i</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>slen</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>lslen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>cd</name> <operator>=</operator> <call><name>iconv_open_CCSID</name><argument_list>(<argument><expr><name>dccsid</name></expr></argument>, <argument><expr><name>sccsid</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>lslen</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <name>slen</name></expr>;</expr_stmt>

<expr_stmt><expr><name>cd</name> <operator>=</operator> <call><name>iconv_open_CCSID</name><argument_list>(<argument><expr><name>dccsid</name></expr></argument>, <argument><expr><name>sccsid</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>ICONV_OPEN_ERROR</name><argument_list>(<argument><expr><name>cd</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <name>dlen</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>iconv</name><argument_list>(<argument><expr><name>cd</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lslen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>d</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dlen</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>i</name> <operator>-=</operator> <name>dlen</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>iconv_close</name><argument_list>(<argument><expr><name>cd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>i</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>

<name>dynconvert</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>dccsid</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>slen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sccsid</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>d</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>dlen</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>l</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name>nullbyte</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>dlen</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <operator>(</operator><ternary><condition><expr><name>slen</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>?</condition><then> <expr><call><name>strlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></then><else>: <expr><name>slen</name></expr></else></ternary><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>dlen</name> <operator>*=</operator> <name>MAX_CONV_EXPANSION</name></expr>;</expr_stmt> 

<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>dlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>d</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>l</name> <operator>=</operator> <call><name>convert</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>dlen</name></expr></argument>, <argument><expr><name>dccsid</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>slen</name></expr></argument>, <argument><expr><name>sccsid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>l</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>slen</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>l2</name> <init>= <expr><call><name>convert</name><argument_list>(<argument><expr><name>d</name> <operator>+</operator> <name>l</name></expr></argument>, <argument><expr><name>dlen</name> <operator>-</operator> <name>l</name></expr></argument>, <argument><expr><name>dccsid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nullbyte</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>ASCII_CCSID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>l2</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>l</name> <operator>+=</operator> <name>l2</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>size_t</name><operator>)</operator> <name>l</name> <operator>&lt;</operator> <name>dlen</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>cp</name> <operator>=</operator> <call><name>realloc</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if<condition>(<expr><name>cp</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>d</name> <operator>=</operator> <name>cp</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>d</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>curl_slist</name></name> <modifier>*</modifier></type>

<name>slist_convert</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>dccsid</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>curl_slist</name></name> <modifier>*</modifier></type><name>from</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sccsid</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>curl_slist</name></name> <modifier>*</modifier></type><name>to</name> <init>= <expr><operator>(</operator>struct <name>curl_slist</name> <operator>*</operator><operator>)</operator> <name>NULL</name></expr></init></decl>;</decl_stmt>

<for>for<control>(<init>;</init> <condition><expr><name>from</name></expr>;</condition> <incr><expr><name>from</name> <operator>=</operator> <name><name>from</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>curl_slist</name></name> <modifier>*</modifier></type><name>nl</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cp</name> <init>= <expr><call><name>dynconvert</name><argument_list>(<argument><expr><name>dccsid</name></expr></argument>, <argument><expr><name><name>from</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>sccsid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>cp</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>curl_slist_free_all</name><argument_list>(<argument><expr><name>to</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator>struct <name>curl_slist</name> <operator>*</operator><operator>)</operator> <name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>nl</name> <operator>=</operator> <call><name>Curl_slist_append_nodup</name><argument_list>(<argument><expr><name>to</name></expr></argument>, <argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>nl</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>curl_slist_free_all</name><argument_list>(<argument><expr><name>to</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>to</name> <operator>=</operator> <name>nl</name></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>to</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>

<name>curl_version_ccsid</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>ccsid</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>aversion</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>eversion</name></decl>;</decl_stmt>

<expr_stmt><expr><name>aversion</name> <operator>=</operator> <call><name>curl_version</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>aversion</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>aversion</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>aversion</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>*=</operator> <name>MAX_CONV_EXPANSION</name></expr>;</expr_stmt>

<expr_stmt><expr><name>eversion</name> <operator>=</operator> <call><name>Curl_thread_buffer</name><argument_list>(<argument><expr><name>LK_CURL_VERSION</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>eversion</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>convert</name><argument_list>(<argument><expr><name>eversion</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>ccsid</name></expr></argument>, <argument><expr><name>aversion</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>ASCII_CCSID</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>eversion</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>

<name>curl_easy_escape_ccsid</name><parameter_list>(<parameter><decl><type><name>CURL</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>string</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>length</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>sccsid</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>dccsid</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>d</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>string</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>dynconvert</name><argument_list>(<argument><expr><name>ASCII_CCSID</name></expr></argument>, <argument><expr><name>string</name></expr></argument>, <argument><expr><ternary><condition><expr><name>length</name></expr>?</condition><then> <expr><name>length</name></expr></then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr></argument>, <argument><expr><name>sccsid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>s</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>curl_easy_escape</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>d</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>dynconvert</name><argument_list>(<argument><expr><name>dccsid</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>ASCII_CCSID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>s</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>

<name>curl_easy_unescape_ccsid</name><parameter_list>(<parameter><decl><type><name>CURL</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>string</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>length</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>outlength</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>sccsid</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>dccsid</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>d</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>string</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>dynconvert</name><argument_list>(<argument><expr><name>ASCII_CCSID</name></expr></argument>, <argument><expr><name>string</name></expr></argument>, <argument><expr><ternary><condition><expr><name>length</name></expr>?</condition><then> <expr><name>length</name></expr></then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr></argument>, <argument><expr><name>sccsid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>s</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>curl_easy_unescape</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>outlength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>d</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>dynconvert</name><argument_list>(<argument><expr><name>dccsid</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>ASCII_CCSID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>s</name> <operator>&amp;&amp;</operator> <name>outlength</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>outlength</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>s</name></expr>;</return>

</block_content>}</block></function>

<function><type><name><name>struct</name> <name>curl_slist</name></name> <modifier>*</modifier></type>

<name>curl_slist_append_ccsid</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>curl_slist</name></name> <modifier>*</modifier></type><name>list</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>ccsid</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>data</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>curl_slist_append</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>dynconvert</name><argument_list>(<argument><expr><name>ASCII_CCSID</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>ccsid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>s</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator>struct <name>curl_slist</name> <operator>*</operator><operator>)</operator> <name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>list</name> <operator>=</operator> <call><name>curl_slist_append</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>list</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>time_t</name></type>

<name>curl_getdate_ccsid</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>time_t</name> <modifier>*</modifier></type> <name>unused</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>ccsid</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>time_t</name></type> <name>t</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>p</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>curl_getdate</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>unused</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>dynconvert</name><argument_list>(<argument><expr><name>ASCII_CCSID</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>ccsid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>s</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><name>time_t</name><operator>)</operator> <operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>curl_getdate</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>unused</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>t</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>convert_version_info_string</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier> <modifier>*</modifier></type> <name>stringp</name></decl></parameter>,

<parameter><decl><type><name>char</name> <modifier>*</modifier> <modifier>*</modifier></type> <name>bufp</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>left</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>ccsid</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>*</operator><name>stringp</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><call><name>convert</name><argument_list>(<argument><expr><operator>*</operator><name>bufp</name></expr></argument>, <argument><expr><operator>*</operator><name>left</name></expr></argument>, <argument><expr><name>ccsid</name></expr></argument>, <argument><expr><operator>*</operator><name>stringp</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>ASCII_CCSID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>l</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>stringp</name> <operator>=</operator> <operator>*</operator><name>bufp</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>bufp</name> <operator>+=</operator> <name>l</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>left</name> <operator>-=</operator> <name>l</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>curl_version_info_data</name> <modifier>*</modifier></type>

<name>curl_version_info_ccsid</name><parameter_list>(<parameter><decl><type><name>CURLversion</name></type> <name>stamp</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>ccsid</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>curl_version_info_data</name> <modifier>*</modifier></type> <name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nproto</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>curl_version_info_data</name> <modifier>*</modifier></type> <name>id</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CURLVERSION_NOW</name> <operator>!=</operator> <name>CURLVERSION_FOURTH</name></expr></cpp:if>

<cpp:error>#<cpp:directive>error</cpp:directive> curl_version_info_data structure has changed: upgrade this procedure.</cpp:error>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if<condition>(<expr><name>stamp</name> <operator>&gt;</operator> <name>CURLVERSION_NOW</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><name>curl_version_info_data</name> <operator>*</operator><operator>)</operator> <name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>curl_version_info</name><argument_list>(<argument><expr><name>stamp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>p</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>p</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>nproto</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>protocols</name></name></expr>)</condition> <block>{<block_content>

<while>while<condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>protocols</name><index>[<expr><name>nproto</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>protocols</name><index>[<expr><name>nproto</name><operator>++</operator></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name>n</name> <operator>+=</operator> <name>nproto</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>version</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>version</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>host</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>host</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>ssl_version</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>ssl_version</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>libz_version</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>libz_version</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>ares</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>ares</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>libidn</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>libidn</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>libssh_version</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>libssh_version</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>n</name> <operator>*=</operator> <name>MAX_CONV_EXPANSION</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>nproto</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>n</name> <operator>+=</operator> <name>nproto</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>cp</name> <operator>=</operator> <call><name>Curl_thread_buffer</name><argument_list>(<argument><expr><name>LK_VERSION_INFO_DATA</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>id</name> <operator>=</operator> <operator>(</operator><name>curl_version_info_data</name> <operator>*</operator><operator>)</operator> <call><name>Curl_thread_buffer</name><argument_list>(<argument><expr><name>LK_VERSION_INFO</name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>id</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>id</name> <operator>||</operator> <operator>!</operator><name>cp</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><name>curl_version_info_data</name> <operator>*</operator><operator>)</operator> <name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>id</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>id</name><operator>-&gt;</operator><name>protocols</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>nproto</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>id</name><operator>-&gt;</operator><name>protocols</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>protocols</name></name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator> <specifier>const</specifier> <operator>*</operator><operator>)</operator> <name>cp</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name><name>p</name><operator>-&gt;</operator><name>protocols</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cp</name> <operator>+=</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>-=</operator> <name>i</name></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>id</name><operator>-&gt;</operator><name>protocols</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if<condition>(<expr><call><name>convert_version_info_string</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator> <operator>*</operator><operator>)</operator> <name><name>id</name><operator>-&gt;</operator><name>protocols</name></name><operator>)</operator> <operator>+</operator> <name>i</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>cp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><name>ccsid</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><name>curl_version_info_data</name> <operator>*</operator><operator>)</operator> <name>NULL</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>convert_version_info_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>id</name><operator>-&gt;</operator><name>version</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><name>ccsid</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><name>curl_version_info_data</name> <operator>*</operator><operator>)</operator> <name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>convert_version_info_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>id</name><operator>-&gt;</operator><name>host</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><name>ccsid</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><name>curl_version_info_data</name> <operator>*</operator><operator>)</operator> <name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>convert_version_info_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>id</name><operator>-&gt;</operator><name>ssl_version</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><name>ccsid</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><name>curl_version_info_data</name> <operator>*</operator><operator>)</operator> <name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>convert_version_info_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>id</name><operator>-&gt;</operator><name>libz_version</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><name>ccsid</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><name>curl_version_info_data</name> <operator>*</operator><operator>)</operator> <name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>convert_version_info_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>id</name><operator>-&gt;</operator><name>ares</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><name>ccsid</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><name>curl_version_info_data</name> <operator>*</operator><operator>)</operator> <name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>convert_version_info_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>id</name><operator>-&gt;</operator><name>libidn</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><name>ccsid</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><name>curl_version_info_data</name> <operator>*</operator><operator>)</operator> <name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>convert_version_info_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>id</name><operator>-&gt;</operator><name>libssh_version</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><name>ccsid</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><name>curl_version_info_data</name> <operator>*</operator><operator>)</operator> <name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>id</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>

<name>curl_easy_strerror_ccsid</name><parameter_list>(<parameter><decl><type><name>CURLcode</name></type> <name>error</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>ccsid</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>curl_easy_strerror</name><argument_list>(<argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>s</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>s</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <name>MAX_CONV_EXPANSION</name> <operator>*</operator> <operator>(</operator><call><name>strlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>Curl_thread_buffer</name><argument_list>(<argument><expr><name>LK_EASY_STRERROR</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>buf</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>convert</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>ccsid</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>ASCII_CCSID</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <name>buf</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>

<name>curl_share_strerror_ccsid</name><parameter_list>(<parameter><decl><type><name>CURLSHcode</name></type> <name>error</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>ccsid</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>curl_share_strerror</name><argument_list>(<argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>s</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>s</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <name>MAX_CONV_EXPANSION</name> <operator>*</operator> <operator>(</operator><call><name>strlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>Curl_thread_buffer</name><argument_list>(<argument><expr><name>LK_SHARE_STRERROR</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>buf</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>convert</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>ccsid</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>ASCII_CCSID</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <name>buf</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>

<name>curl_multi_strerror_ccsid</name><parameter_list>(<parameter><decl><type><name>CURLMcode</name></type> <name>error</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>ccsid</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>curl_multi_strerror</name><argument_list>(<argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>s</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>s</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <name>MAX_CONV_EXPANSION</name> <operator>*</operator> <operator>(</operator><call><name>strlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>Curl_thread_buffer</name><argument_list>(<argument><expr><name>LK_MULTI_STRERROR</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>buf</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>convert</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>ccsid</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>ASCII_CCSID</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <name>buf</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>curl_certinfo_free_all</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>curl_certinfo</name></name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>info</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>certinfo</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>info</name><operator>-&gt;</operator><name>num_of_certs</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>curl_slist_free_all</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>certinfo</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name><name>info</name><operator>-&gt;</operator><name>certinfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>CURLcode</name></type>

<name>curl_easy_getinfo_ccsid</name><parameter_list>(<parameter><decl><type><name>CURL</name> <modifier>*</modifier></type><name>curl</name></decl></parameter>, <parameter><decl><type><name>CURLINFO</name></type> <name>info</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>va_list</name></type> <name>arg</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>paramp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type> <name>data</name></decl>;</decl_stmt>

<expr_stmt><expr><name>data</name> <operator>=</operator> <operator>(</operator>struct <name>Curl_easy</name> <operator>*</operator><operator>)</operator> <name>curl</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>paramp</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>Curl_getinfo</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>info</name></expr></argument>, <argument><expr><name>paramp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>ret</name> <operator>==</operator> <name>CURLE_OK</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>ccsid</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>cpp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>curl_slist</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>slp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>curl_certinfo</name></name> <modifier>*</modifier></type><name>cipf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>curl_certinfo</name></name> <modifier>*</modifier></type><name>cipt</name></decl>;</decl_stmt>

<switch>switch<condition>(<expr><operator>(</operator><name>int</name><operator>)</operator> <name>info</name> <operator>&amp;</operator> <name>CURLINFO_TYPEMASK</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>CURLINFO_STRING</name></expr>:</case>

<expr_stmt><expr><name>ccsid</name> <operator>=</operator> <macro><name>va_arg</name><argument_list>(<argument>arg</argument>, <argument>unsigned int</argument>)</argument_list></macro></expr>;</expr_stmt>

<expr_stmt><expr><name>cpp</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator> <operator>*</operator><operator>)</operator> <name>paramp</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>*</operator><name>cpp</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>cpp</name> <operator>=</operator> <call><name>dynconvert</name><argument_list>(<argument><expr><name>ccsid</name></expr></argument>, <argument><expr><operator>*</operator><name>cpp</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>ASCII_CCSID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>*</operator><name>cpp</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>CURLE_OUT_OF_MEMORY</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>CURLINFO_SLIST</name></expr>:</case>

<expr_stmt><expr><name>ccsid</name> <operator>=</operator> <macro><name>va_arg</name><argument_list>(<argument>arg</argument>, <argument>unsigned int</argument>)</argument_list></macro></expr>;</expr_stmt>

<switch>switch<condition>(<expr><name>info</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>CURLINFO_CERTINFO</name></expr>:</case>

<expr_stmt><expr><name>cipf</name> <operator>=</operator> <operator>*</operator><operator>(</operator>struct <name>curl_certinfo</name> <operator>*</operator> <operator>*</operator><operator>)</operator> <name>paramp</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>cipf</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>cipt</name> <operator>=</operator> <operator>(</operator>struct <name>curl_certinfo</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>cipt</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>cipt</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>CURLE_OUT_OF_MEMORY</name></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name><name>cipt</name><operator>-&gt;</operator><name>certinfo</name></name> <operator>=</operator> <operator>(</operator>struct <name>curl_slist</name> <operator>*</operator><operator>*</operator><operator>)</operator>

<call><name>calloc</name><argument_list>(<argument><expr><name><name>cipf</name><operator>-&gt;</operator><name>num_of_certs</name></name> <operator>+</operator>

<literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>curl_slist</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>cipt</name><operator>-&gt;</operator><name>certinfo</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>CURLE_OUT_OF_MEMORY</name></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>cipt</name><operator>-&gt;</operator><name>num_of_certs</name></name> <operator>=</operator> <name><name>cipf</name><operator>-&gt;</operator><name>num_of_certs</name></name></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>cipf</name><operator>-&gt;</operator><name>num_of_certs</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if<condition>(<expr><name><name>cipf</name><operator>-&gt;</operator><name>certinfo</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><name><name>cipt</name><operator>-&gt;</operator><name>certinfo</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>slist_convert</name><argument_list>(<argument><expr><name>ccsid</name></expr></argument>,

<argument><expr><name><name>cipf</name><operator>-&gt;</operator><name>certinfo</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,

<argument><expr><name>ASCII_CCSID</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>CURLE_OUT_OF_MEMORY</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></for>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name>ret</name> <operator>!=</operator> <name>CURLE_OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>curl_certinfo_free_all</name><argument_list>(<argument><expr><name>cipt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cipt</name> <operator>=</operator> <operator>(</operator>struct <name>curl_certinfo</name> <operator>*</operator><operator>)</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator>struct <name>curl_certinfo</name> <operator>*</operator> <operator>*</operator><operator>)</operator> <name>paramp</name> <operator>=</operator> <name>cipt</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>CURLINFO_TLS_SESSION</name></expr>:</case>

<case>case <expr><name>CURLINFO_TLS_SSL_PTR</name></expr>:</case>

<case>case <expr><name>CURLINFO_SOCKET</name></expr>:</case>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><name>slp</name> <operator>=</operator> <operator>(</operator>struct <name>curl_slist</name> <operator>*</operator><operator>*</operator><operator>)</operator> <name>paramp</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>*</operator><name>slp</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>slp</name> <operator>=</operator> <call><name>slist_convert</name><argument_list>(<argument><expr><name>ccsid</name></expr></argument>, <argument><expr><operator>*</operator><name>slp</name></expr></argument>, <argument><expr><name>ASCII_CCSID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>*</operator><name>slp</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>CURLE_OUT_OF_MEMORY</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></switch>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>Curl_is_formadd_string</name><parameter_list>(<parameter><decl><type><name>CURLformoption</name></type> <name>option</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch<condition>(<expr><name>option</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>CURLFORM_FILENAME</name></expr>:</case>

<case>case <expr><name>CURLFORM_CONTENTTYPE</name></expr>:</case>

<case>case <expr><name>CURLFORM_BUFFER</name></expr>:</case>

<case>case <expr><name>CURLFORM_FILE</name></expr>:</case>

<case>case <expr><name>CURLFORM_FILECONTENT</name></expr>:</case>

<case>case <expr><name>CURLFORM_COPYCONTENTS</name></expr>:</case>

<case>case <expr><name>CURLFORM_COPYNAME</name></expr>:</case>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>Curl_formadd_release_local</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>curl_forms</name></name> <modifier>*</modifier></type> <name>forms</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nargs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>skip</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<while>while<condition>(<expr><name>nargs</name><operator>--</operator></expr>)</condition><block type="pseudo"><block_content>

<if_stmt><if>if<condition>(<expr><name>nargs</name> <operator>!=</operator> <name>skip</name></expr>)</condition><block type="pseudo"><block_content>

<if_stmt><if>if<condition>(<expr><call><name>Curl_is_formadd_string</name><argument_list>(<argument><expr><name><name>forms</name><index>[<expr><name>nargs</name></expr>]</index></name><operator>.</operator><name>option</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<if_stmt><if>if<condition>(<expr><name><name>forms</name><index>[<expr><name>nargs</name></expr>]</index></name><operator>.</operator><name>value</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name><name>forms</name><index>[<expr><name>nargs</name></expr>]</index></name><operator>.</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></while>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>forms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>Curl_formadd_convert</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>curl_forms</name></name> <modifier>*</modifier></type> <name>forms</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>formx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lengthx</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>ccsid</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>l</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cp2</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>formx</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <operator>!</operator><name><name>forms</name><index>[<expr><name>formx</name></expr>]</index></name><operator>.</operator><name>value</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>lengthx</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>l</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>forms</name><index>[<expr><name>lengthx</name></expr>]</index></name><operator>.</operator><name>value</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>l</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>forms</name><index>[<expr><name>formx</name></expr>]</index></name><operator>.</operator><name>value</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>cp</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>MAX_CONV_EXPANSION</name> <operator>*</operator> <name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>cp</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>l</name> <operator>=</operator> <call><name>convert</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><name>MAX_CONV_EXPANSION</name> <operator>*</operator> <name>l</name></expr></argument>, <argument><expr><name>ASCII_CCSID</name></expr></argument>,

<argument><expr><name><name>forms</name><index>[<expr><name>formx</name></expr>]</index></name><operator>.</operator><name>value</name></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><name>ccsid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>l</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>cp2</name> <operator>=</operator> <call><name>realloc</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if<condition>(<expr><name>cp2</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>cp</name> <operator>=</operator> <name>cp2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>forms</name><index>[<expr><name>formx</name></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <name>cp</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>lengthx</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>forms</name><index>[<expr><name>lengthx</name></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>l</name></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<return>return <expr><name>l</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>CURLFORMcode</name></type>

<name>curl_formadd_ccsid</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>curl_httppost</name></name> <modifier>*</modifier> <modifier>*</modifier></type> <name>httppost</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>curl_httppost</name></name> <modifier>*</modifier> <modifier>*</modifier></type> <name>last_post</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>va_list</name></type> <name>arg</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CURLformoption</name></type> <name>option</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CURLFORMcode</name></type> <name>result</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>curl_forms</name></name> <modifier>*</modifier></type> <name>forms</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>curl_forms</name></name> <modifier>*</modifier></type> <name>lforms</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>curl_forms</name></name> <modifier>*</modifier></type> <name>tforms</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>lformlen</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>ccsid</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nargs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>namex</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>namelengthx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>contentx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>lengthx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>contentccsid</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>nameccsid</name></decl>;</decl_stmt>

<expr_stmt><expr><name>lformlen</name> <operator>=</operator> <name>ALLOC_GRANULE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>lforms</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>lformlen</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>lforms</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>lforms</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURL_FORMADD_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURL_FORMADD_OK</name></expr>;</expr_stmt>

<expr_stmt><expr><name>nargs</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>contentx</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>lengthx</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>namex</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>namelengthx</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>forms</name> <operator>=</operator> <operator>(</operator>struct <name>curl_forms</name> <operator>*</operator><operator>)</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>last_post</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>nargs</name> <operator>&gt;=</operator> <name>lformlen</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>lformlen</name> <operator>+=</operator> <name>ALLOC_GRANULE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>tforms</name> <operator>=</operator> <call><name>realloc</name><argument_list>(<argument><expr><name>lforms</name></expr></argument>, <argument><expr><name>lformlen</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>lforms</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>tforms</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURL_FORMADD_MEMORY</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>lforms</name> <operator>=</operator> <name>tforms</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>forms</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>option</name> <operator>=</operator> <name><name>forms</name><operator>-&gt;</operator><name>option</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>value</name> <operator>=</operator> <name><name>forms</name><operator>-&gt;</operator><name>value</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>forms</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>option</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>CURLformoption</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>option</name> <operator>==</operator> <name>CURLFORM_END</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<switch>switch<condition>(<expr><name>option</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>CURLFORM_END</name></expr>:</case>

<expr_stmt><expr><name>forms</name> <operator>=</operator> <operator>(</operator>struct <name>curl_forms</name> <operator>*</operator><operator>)</operator> <name>NULL</name></expr>;</expr_stmt> 

<continue>continue;</continue>

<case>case <expr><name>CURLFORM_ARRAY</name></expr>:</case>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>forms</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>forms</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr>struct <name>curl_forms</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURL_FORMADD_ILLEGAL_ARRAY</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>CURLFORM_COPYNAME</name></expr>:</case>

<expr_stmt><expr><name>option</name> <operator>=</operator> <name>CURLFORM_PTRNAME</name></expr>;</expr_stmt> 

<case>case <expr><name>CURLFORM_PTRNAME</name></expr>:</case>

<if_stmt><if>if<condition>(<expr><name>namex</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURL_FORMADD_OPTION_TWICE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>namex</name> <operator>=</operator> <name>nargs</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>forms</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>nameccsid</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>long</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>nameccsid</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <name><name>forms</name><operator>-&gt;</operator><name>value</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>forms</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>CURLFORM_COPYCONTENTS</name></expr>:</case>

<if_stmt><if>if<condition>(<expr><name>contentx</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURL_FORMADD_OPTION_TWICE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>contentx</name> <operator>=</operator> <name>nargs</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>forms</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>contentccsid</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>long</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>contentccsid</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <name><name>forms</name><operator>-&gt;</operator><name>value</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>forms</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>CURLFORM_PTRCONTENTS</name></expr>:</case>

<case>case <expr><name>CURLFORM_BUFFERPTR</name></expr>:</case>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>forms</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<break>break;</break>

<case>case <expr><name>CURLFORM_CONTENTSLENGTH</name></expr>:</case>

<expr_stmt><expr><name>lengthx</name> <operator>=</operator> <name>nargs</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>forms</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>value</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>long</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>CURLFORM_CONTENTLEN</name></expr>:</case>

<expr_stmt><expr><name>lengthx</name> <operator>=</operator> <name>nargs</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>forms</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>value</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>curl_off_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>CURLFORM_NAMELENGTH</name></expr>:</case>

<expr_stmt><expr><name>namelengthx</name> <operator>=</operator> <name>nargs</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>forms</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>value</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>long</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>CURLFORM_BUFFERLENGTH</name></expr>:</case>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>forms</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>value</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>long</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>CURLFORM_CONTENTHEADER</name></expr>:</case>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>forms</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>value</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr>struct <name>curl_slist</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>CURLFORM_STREAM</name></expr>:</case>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>forms</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>value</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>CURLFORM_CONTENTTYPE</name></expr>:</case>

<if_stmt><if>if<condition>(<expr><call><name>Curl_formadd_convert</name><argument_list>(<argument><expr><name>lforms</name></expr></argument>, <argument><expr><name>contentx</name></expr></argument>, <argument><expr><name>lengthx</name></expr></argument>, <argument><expr><name>contentccsid</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURL_FORMADD_MEMORY</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>contentx</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>lengthx</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<default>default:</default>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>Curl_is_formadd_string</name><argument_list>(<argument><expr><name>option</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURL_FORMADD_UNKNOWN_OPTION</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>forms</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ccsid</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>long</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>ccsid</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <name><name>forms</name><operator>-&gt;</operator><name>value</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>forms</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>lforms</name><index>[<expr><name>nargs</name></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>Curl_formadd_convert</name><argument_list>(<argument><expr><name>lforms</name></expr></argument>, <argument><expr><name>nargs</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>ccsid</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURL_FORMADD_MEMORY</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>value</name> <operator>=</operator> <name><name>lforms</name><index>[<expr><name>nargs</name></expr>]</index></name><operator>.</operator><name>value</name></expr>;</expr_stmt>

</block_content>}</block></switch>

<if_stmt><if>if<condition>(<expr><name>result</name> <operator>!=</operator> <name>CURL_FORMADD_OK</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>lforms</name><index>[<expr><name>nargs</name></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>lforms</name><index>[<expr><name>nargs</name><operator>++</operator></expr>]</index></name><operator>.</operator><name>option</name> <operator>=</operator> <name>option</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name> <operator>==</operator> <name>CURL_FORMADD_OK</name> <operator>&amp;&amp;</operator> <name>namex</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>Curl_formadd_convert</name><argument_list>(<argument><expr><name>lforms</name></expr></argument>, <argument><expr><name>namex</name></expr></argument>, <argument><expr><name>namelengthx</name></expr></argument>, <argument><expr><name>nameccsid</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURL_FORMADD_MEMORY</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>lforms</name><index>[<expr><name>namex</name></expr>]</index></name><operator>.</operator><name>option</name> <operator>=</operator> <name>CURLFORM_COPYNAME</name></expr>;</expr_stmt></block_content></block></else></if_stmt> 

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name> <operator>==</operator> <name>CURL_FORMADD_OK</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>Curl_formadd_convert</name><argument_list>(<argument><expr><name>lforms</name></expr></argument>, <argument><expr><name>contentx</name></expr></argument>, <argument><expr><name>lengthx</name></expr></argument>, <argument><expr><name>contentccsid</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURL_FORMADD_MEMORY</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>contentx</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name> <operator>==</operator> <name>CURL_FORMADD_OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>lforms</name><index>[<expr><name>nargs</name></expr>]</index></name><operator>.</operator><name>option</name> <operator>=</operator> <name>CURLFORM_END</name></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>curl_formadd</name><argument_list>(<argument><expr><name>httppost</name></expr></argument>, <argument><expr><name>last_post</name></expr></argument>,

<argument><expr><name>CURLFORM_ARRAY</name></expr></argument>, <argument><expr><name>lforms</name></expr></argument>, <argument><expr><name>CURLFORM_END</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>Curl_formadd_release_local</name><argument_list>(<argument><expr><name>lforms</name></expr></argument>, <argument><expr><name>nargs</name></expr></argument>, <argument><expr><name>contentx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>curl_formget_callback</name></type> <name>append</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type> <name>arg</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>ccsid</name></decl>;</decl_stmt>

}</block></struct></type> <name>cfcdata</name>;</typedef>

<function><type><specifier>static</specifier> <name>size_t</name></type>

<name>Curl_formget_callback_ccsid</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>cfcdata</name> <modifier>*</modifier></type> <name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>b</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>l</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>cfcdata</name> <operator>*</operator><operator>)</operator> <name>arg</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>long</name><operator>)</operator> <name>len</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call>(<modifier>*</modifier><name><name>p</name><operator>-&gt;</operator><name>append</name></name>)<argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>MAX_CONV_EXPANSION</name> <operator>*</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>b</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><name>size_t</name><operator>)</operator> <operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>l</name> <operator>=</operator> <call><name>convert</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>MAX_CONV_EXPANSION</name> <operator>*</operator> <name>len</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>ccsid</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>ASCII_CCSID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>l</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>size_t</name><operator>)</operator> <operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call>(<modifier>*</modifier><name><name>p</name><operator>-&gt;</operator><name>append</name></name>)<argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><ternary><condition><expr><name>ret</name> <operator>==</operator> <name>l</name></expr>?</condition><then> <expr><name>len</name></expr></then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>curl_formget_ccsid</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>curl_httppost</name></name> <modifier>*</modifier></type><name>form</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>,

<parameter><decl><type><name>curl_formget_callback</name></type> <name>append</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>ccsid</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>cfcdata</name></type> <name>lcfc</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>lcfc</name><operator>.</operator><name>append</name></name> <operator>=</operator> <name>append</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>lcfc</name><operator>.</operator><name>arg</name></name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>lcfc</name><operator>.</operator><name>ccsid</name></name> <operator>=</operator> <name>ccsid</name></expr>;</expr_stmt>

<return>return <expr><call><name>curl_formget</name><argument_list>(<argument><expr><name>form</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>lcfc</name></expr></argument>, <argument><expr><name>Curl_formget_callback_ccsid</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>CURLcode</name></type>

<name>curl_easy_setopt_ccsid</name><parameter_list>(<parameter><decl><type><name>CURL</name> <modifier>*</modifier></type><name>curl</name></decl></parameter>, <parameter><decl><type><name>CURLoption</name></type> <name>tag</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>va_list</name></type> <name>arg</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>ccsid</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>curl_off_t</name></type> <name>pfsize</name></decl>;</decl_stmt>

<expr_stmt><expr><name>data</name> <operator>=</operator> <operator>(</operator>struct <name>Curl_easy</name> <operator>*</operator><operator>)</operator> <name>curl</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch<condition>(<expr><name>tag</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>CURLOPT_ABSTRACT_UNIX_SOCKET</name></expr>:</case>

<case>case <expr><name>CURLOPT_ALTSVC</name></expr>:</case>

<case>case <expr><name>CURLOPT_CAINFO</name></expr>:</case>

<case>case <expr><name>CURLOPT_CAPATH</name></expr>:</case>

<case>case <expr><name>CURLOPT_COOKIE</name></expr>:</case>

<case>case <expr><name>CURLOPT_COOKIEFILE</name></expr>:</case>

<case>case <expr><name>CURLOPT_COOKIEJAR</name></expr>:</case>

<case>case <expr><name>CURLOPT_COOKIELIST</name></expr>:</case>

<case>case <expr><name>CURLOPT_CRLFILE</name></expr>:</case>

<case>case <expr><name>CURLOPT_CUSTOMREQUEST</name></expr>:</case>

<case>case <expr><name>CURLOPT_DEFAULT_PROTOCOL</name></expr>:</case>

<case>case <expr><name>CURLOPT_DNS_SERVERS</name></expr>:</case>

<case>case <expr><name>CURLOPT_DNS_INTERFACE</name></expr>:</case>

<case>case <expr><name>CURLOPT_DNS_LOCAL_IP4</name></expr>:</case>

<case>case <expr><name>CURLOPT_DNS_LOCAL_IP6</name></expr>:</case>

<case>case <expr><name>CURLOPT_DOH_URL</name></expr>:</case>

<case>case <expr><name>CURLOPT_EGDSOCKET</name></expr>:</case>

<case>case <expr><name>CURLOPT_ENCODING</name></expr>:</case>

<case>case <expr><name>CURLOPT_FTPPORT</name></expr>:</case>

<case>case <expr><name>CURLOPT_FTP_ACCOUNT</name></expr>:</case>

<case>case <expr><name>CURLOPT_FTP_ALTERNATIVE_TO_USER</name></expr>:</case>

<case>case <expr><name>CURLOPT_INTERFACE</name></expr>:</case>

<case>case <expr><name>CURLOPT_ISSUERCERT</name></expr>:</case>

<case>case <expr><name>CURLOPT_KEYPASSWD</name></expr>:</case>

<case>case <expr><name>CURLOPT_KRBLEVEL</name></expr>:</case>

<case>case <expr><name>CURLOPT_LOGIN_OPTIONS</name></expr>:</case>

<case>case <expr><name>CURLOPT_MAIL_AUTH</name></expr>:</case>

<case>case <expr><name>CURLOPT_MAIL_FROM</name></expr>:</case>

<case>case <expr><name>CURLOPT_NETRC_FILE</name></expr>:</case>

<case>case <expr><name>CURLOPT_NOPROXY</name></expr>:</case>

<case>case <expr><name>CURLOPT_PASSWORD</name></expr>:</case>

<case>case <expr><name>CURLOPT_PINNEDPUBLICKEY</name></expr>:</case>

<case>case <expr><name>CURLOPT_PRE_PROXY</name></expr>:</case>

<case>case <expr><name>CURLOPT_PROXY</name></expr>:</case>

<case>case <expr><name>CURLOPT_PROXYPASSWORD</name></expr>:</case>

<case>case <expr><name>CURLOPT_PROXYUSERNAME</name></expr>:</case>

<case>case <expr><name>CURLOPT_PROXYUSERPWD</name></expr>:</case>

<case>case <expr><name>CURLOPT_PROXY_CAINFO</name></expr>:</case>

<case>case <expr><name>CURLOPT_PROXY_CAPATH</name></expr>:</case>

<case>case <expr><name>CURLOPT_PROXY_CRLFILE</name></expr>:</case>

<case>case <expr><name>CURLOPT_PROXY_KEYPASSWD</name></expr>:</case>

<case>case <expr><name>CURLOPT_PROXY_PINNEDPUBLICKEY</name></expr>:</case>

<case>case <expr><name>CURLOPT_PROXY_SERVICE_NAME</name></expr>:</case>

<case>case <expr><name>CURLOPT_PROXY_SSLCERT</name></expr>:</case>

<case>case <expr><name>CURLOPT_PROXY_SSLCERTTYPE</name></expr>:</case>

<case>case <expr><name>CURLOPT_PROXY_SSLKEY</name></expr>:</case>

<case>case <expr><name>CURLOPT_PROXY_SSLKEYTYPE</name></expr>:</case>

<case>case <expr><name>CURLOPT_PROXY_SSL_CIPHER_LIST</name></expr>:</case>

<case>case <expr><name>CURLOPT_PROXY_TLS13_CIPHERS</name></expr>:</case>

<case>case <expr><name>CURLOPT_PROXY_TLSAUTH_PASSWORD</name></expr>:</case>

<case>case <expr><name>CURLOPT_PROXY_TLSAUTH_TYPE</name></expr>:</case>

<case>case <expr><name>CURLOPT_PROXY_TLSAUTH_USERNAME</name></expr>:</case>

<case>case <expr><name>CURLOPT_RANDOM_FILE</name></expr>:</case>

<case>case <expr><name>CURLOPT_RANGE</name></expr>:</case>

<case>case <expr><name>CURLOPT_REFERER</name></expr>:</case>

<case>case <expr><name>CURLOPT_REQUEST_TARGET</name></expr>:</case>

<case>case <expr><name>CURLOPT_RTSP_SESSION_ID</name></expr>:</case>

<case>case <expr><name>CURLOPT_RTSP_STREAM_URI</name></expr>:</case>

<case>case <expr><name>CURLOPT_RTSP_TRANSPORT</name></expr>:</case>

<case>case <expr><name>CURLOPT_SASL_AUTHZID</name></expr>:</case>

<case>case <expr><name>CURLOPT_SERVICE_NAME</name></expr>:</case>

<case>case <expr><name>CURLOPT_SOCKS5_GSSAPI_SERVICE</name></expr>:</case>

<case>case <expr><name>CURLOPT_SSH_HOST_PUBLIC_KEY_MD5</name></expr>:</case>

<case>case <expr><name>CURLOPT_SSH_KNOWNHOSTS</name></expr>:</case>

<case>case <expr><name>CURLOPT_SSH_PRIVATE_KEYFILE</name></expr>:</case>

<case>case <expr><name>CURLOPT_SSH_PUBLIC_KEYFILE</name></expr>:</case>

<case>case <expr><name>CURLOPT_SSLCERT</name></expr>:</case>

<case>case <expr><name>CURLOPT_SSLCERTTYPE</name></expr>:</case>

<case>case <expr><name>CURLOPT_SSLENGINE</name></expr>:</case>

<case>case <expr><name>CURLOPT_SSLKEY</name></expr>:</case>

<case>case <expr><name>CURLOPT_SSLKEYTYPE</name></expr>:</case>

<case>case <expr><name>CURLOPT_SSL_CIPHER_LIST</name></expr>:</case>

<case>case <expr><name>CURLOPT_TLS13_CIPHERS</name></expr>:</case>

<case>case <expr><name>CURLOPT_TLSAUTH_PASSWORD</name></expr>:</case>

<case>case <expr><name>CURLOPT_TLSAUTH_TYPE</name></expr>:</case>

<case>case <expr><name>CURLOPT_TLSAUTH_USERNAME</name></expr>:</case>

<case>case <expr><name>CURLOPT_UNIX_SOCKET_PATH</name></expr>:</case>

<case>case <expr><name>CURLOPT_URL</name></expr>:</case>

<case>case <expr><name>CURLOPT_USERAGENT</name></expr>:</case>

<case>case <expr><name>CURLOPT_USERNAME</name></expr>:</case>

<case>case <expr><name>CURLOPT_USERPWD</name></expr>:</case>

<case>case <expr><name>CURLOPT_XOAUTH2_BEARER</name></expr>:</case>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ccsid</name> <operator>=</operator> <macro><name>va_arg</name><argument_list>(<argument>arg</argument>, <argument>unsigned int</argument>)</argument_list></macro></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>s</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>dynconvert</name><argument_list>(<argument><expr><name>ASCII_CCSID</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>ccsid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>s</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_OUT_OF_MEMORY</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>CURLOPT_COPYPOSTFIELDS</name></expr>:</case>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ccsid</name> <operator>=</operator> <macro><name>va_arg</name><argument_list>(<argument>arg</argument>, <argument>unsigned int</argument>)</argument_list></macro></expr>;</expr_stmt>

<expr_stmt><expr><name>pfsize</name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>postfieldsize</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>s</name> <operator>||</operator> <operator>!</operator><name>pfsize</name> <operator>||</operator> <name>ccsid</name> <operator>==</operator> <name>NOCONV_CCSID</name> <operator>||</operator> <name>ccsid</name> <operator>==</operator> <name>ASCII_CCSID</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_COPYPOSTFIELDS</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>pfsize</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>dynconvert</name><argument_list>(<argument><expr><name>ASCII_CCSID</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>ccsid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>s</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_OUT_OF_MEMORY</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>pfsize</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>pfsize</name></expr></argument> &gt;</argument_list></name> <name>SIZE_MAX</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_OUT_OF_MEMORY</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name>pfsize</name></expr>;</expr_stmt>

<expr_stmt><expr><name>pfsize</name> <operator>=</operator> <name>len</name> <operator>*</operator> <name>MAX_CONV_EXPANSION</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>pfsize</name> <operator>&gt;</operator> <name>SIZE_MAX</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>pfsize</name> <operator>=</operator> <name>SIZE_MAX</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>cp</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>pfsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>cp</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_OUT_OF_MEMORY</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pfsize</name> <operator>=</operator> <call><name>convert</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><name>pfsize</name></expr></argument>, <argument><expr><name>ASCII_CCSID</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>ccsid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>pfsize</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_OUT_OF_MEMORY</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>postfieldsize</name></name> <operator>=</operator> <name>pfsize</name></expr>;</expr_stmt> 

<expr_stmt><expr><name>s</name> <operator>=</operator> <name>cp</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_POSTFIELDS</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_COPYPOSTFIELDS</name></expr>]</index></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt> 

<break>break;</break>

<case>case <expr><name>CURLOPT_ERRORBUFFER</name></expr>:</case> 

<default>default:</default>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_vsetopt</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>

<name>curl_form_long_value</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>value</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>value</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>

<name>curl_pushheader_bynum_cssid</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>curl_pushheaders</name></name> <modifier>*</modifier></type><name>h</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>num</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>ccsid</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>d</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>curl_pushheader_bynum</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>num</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>s</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>dynconvert</name><argument_list>(<argument><expr><name>ccsid</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>ASCII_CCSID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>d</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>

<name>curl_pushheader_byname_ccsid</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>curl_pushheaders</name></name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>header</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>ccsidin</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>ccsidout</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>d</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>header</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>header</name> <operator>=</operator> <call><name>dynconvert</name><argument_list>(<argument><expr><name>ASCII_CCSID</name></expr></argument>, <argument><expr><name>header</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>ccsidin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>header</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>curl_pushheader_byname</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>header</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>s</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>dynconvert</name><argument_list>(<argument><expr><name>ccsidout</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>ASCII_CCSID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>d</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type>

<name>mime_string_call</name><parameter_list>(<parameter><decl><type><name>curl_mimepart</name> <modifier>*</modifier></type><name>part</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>string</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>ccsid</name></decl></parameter>,

<parameter><function_decl><type><name>CURLcode</name></type> (<modifier>*</modifier><name>mimefunc</name>)<parameter_list>(<parameter><decl><type><name>curl_mimepart</name> <modifier>*</modifier></type><name>part</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>string</name></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>string</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>mimefunc</name><argument_list>(<argument><expr><name>part</name></expr></argument>, <argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>dynconvert</name><argument_list>(<argument><expr><name>ASCII_CCSID</name></expr></argument>, <argument><expr><name>string</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>ccsid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>s</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>mimefunc</name><argument_list>(<argument><expr><name>part</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>CURLcode</name></type>

<name>curl_mime_name_ccsid</name><parameter_list>(<parameter><decl><type><name>curl_mimepart</name> <modifier>*</modifier></type><name>part</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>ccsid</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>mime_string_call</name><argument_list>(<argument><expr><name>part</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>ccsid</name></expr></argument>, <argument><expr><name>curl_mime_name</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>CURLcode</name></type>

<name>curl_mime_filename_ccsid</name><parameter_list>(<parameter><decl><type><name>curl_mimepart</name> <modifier>*</modifier></type><name>part</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>ccsid</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>mime_string_call</name><argument_list>(<argument><expr><name>part</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><name>ccsid</name></expr></argument>, <argument><expr><name>curl_mime_filename</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>CURLcode</name></type>

<name>curl_mime_type_ccsid</name><parameter_list>(<parameter><decl><type><name>curl_mimepart</name> <modifier>*</modifier></type><name>part</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mimetype</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>ccsid</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>mime_string_call</name><argument_list>(<argument><expr><name>part</name></expr></argument>, <argument><expr><name>mimetype</name></expr></argument>, <argument><expr><name>ccsid</name></expr></argument>, <argument><expr><name>curl_mime_type</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>CURLcode</name></type>

<name>curl_mime_encoder_ccsid</name><parameter_list>(<parameter><decl><type><name>curl_mimepart</name> <modifier>*</modifier></type><name>part</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>encoding</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>ccsid</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>mime_string_call</name><argument_list>(<argument><expr><name>part</name></expr></argument>, <argument><expr><name>encoding</name></expr></argument>, <argument><expr><name>ccsid</name></expr></argument>, <argument><expr><name>curl_mime_encoder</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>CURLcode</name></type>

<name>curl_mime_filedata_ccsid</name><parameter_list>(<parameter><decl><type><name>curl_mimepart</name> <modifier>*</modifier></type><name>part</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>ccsid</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>mime_string_call</name><argument_list>(<argument><expr><name>part</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><name>ccsid</name></expr></argument>, <argument><expr><name>curl_mime_filedata</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>CURLcode</name></type>

<name>curl_mime_data_ccsid</name><parameter_list>(<parameter><decl><type><name>curl_mimepart</name> <modifier>*</modifier></type><name>part</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>datasize</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>ccsid</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>data</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>curl_mime_data</name><argument_list>(<argument><expr><name>part</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>datasize</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>dynconvert</name><argument_list>(<argument><expr><name>ASCII_CCSID</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>datasize</name></expr></argument>, <argument><expr><name>ccsid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>s</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>curl_mime_data</name><argument_list>(<argument><expr><name>part</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>datasize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>CURLUcode</name></type>

<name>curl_url_get_ccsid</name><parameter_list>(<parameter><decl><type><name>CURLU</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>, <parameter><decl><type><name>CURLUPart</name></type> <name>what</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>part</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>ccsid</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CURLUcode</name></type> <name>result</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>part</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLUE_BAD_PARTPOINTER</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>part</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>curl_url_get</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>what</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name> <operator>==</operator> <name>CURLUE_OK</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>s</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>part</name> <operator>=</operator> <call><name>dynconvert</name><argument_list>(<argument><expr><name>ccsid</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>ASCII_CCSID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>*</operator><name>part</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLUE_OUT_OF_MEMORY</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>s</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>CURLUcode</name></type>

<name>curl_url_set_ccsid</name><parameter_list>(<parameter><decl><type><name>CURLU</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>, <parameter><decl><type><name>CURLUPart</name></type> <name>what</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>part</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>ccsid</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CURLUcode</name></type> <name>result</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>part</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>dynconvert</name><argument_list>(<argument><expr><name>ASCII_CCSID</name></expr></argument>, <argument><expr><name>part</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>ccsid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>s</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLUE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>curl_url_set</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>what</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>s</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

</unit>
