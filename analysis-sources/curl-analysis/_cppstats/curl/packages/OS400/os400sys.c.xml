<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\curl-analysis\_cppstats\curl\packages\OS400\os400sys.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;curl/curl.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config-os400.h"</cpp:file></cpp:include> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/socket.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/un.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pthread.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netdb.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;qadrt.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ZLIB_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;zlib.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_GSKIT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;gskssl.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;qsoasync.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_GSSAPI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;gssapi.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_LDAP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ldap.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet/in.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;arpa/inet.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"os400sys.h"</cpp:file></cpp:include>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>convert</name><name>(</name><name>0</name><name>)</name></cpp:pragma> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MIN_BYTE_GAIN</name></cpp:macro> <cpp:value>1024</cpp:value></cpp:define> 

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>size</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>buf</name></decl>;</decl_stmt> 

}</block></struct></type> <name>buffer_t</name>;</typedef>

<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type> <name>buffer_undef</name><parameter_list>(<parameter><decl><type><name>localkey_t</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type> <name>buffer_threaded</name><parameter_list>(<parameter><decl><type><name>localkey_t</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type> <name>buffer_unthreaded</name><parameter_list>(<parameter><decl><type><name>localkey_t</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <name>pthread_mutex_t</name></type> <name>mutex</name> <init>= <expr><name>PTHREAD_MUTEX_INITIALIZER</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>pthread_key_t</name></type> <name>thdkey</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>buffer_t</name> <modifier>*</modifier></type> <name>locbufs</name></decl>;</decl_stmt>

<function_decl><type><name>char</name> <modifier>*</modifier></type> (<modifier>*</modifier> <name>Curl_thread_buffer</name>)<parameter_list>(<parameter><decl><type><name>localkey_t</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>size</name></decl></parameter>)</parameter_list> <init>= <expr><name>buffer_undef</name></expr></init>;</function_decl>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>thdbufdestroy</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>private</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>private</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>buffer_t</name> <modifier>*</modifier></type> <name>p</name> <init>= <expr><operator>(</operator><name>buffer_t</name> <operator>*</operator><operator>)</operator> <name>private</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>localkey_t</name></type> <name>i</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <operator>(</operator><name>localkey_t</name><operator>)</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>LK_LAST</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>private</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>terminate</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>Curl_thread_buffer</name> <operator>==</operator> <name>buffer_threaded</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>locbufs</name> <operator>=</operator> <call><name>pthread_getspecific</name><argument_list>(<argument><expr><name>thdkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_setspecific</name><argument_list>(<argument><expr><name>thdkey</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_key_delete</name><argument_list>(<argument><expr><name>thdkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>Curl_thread_buffer</name> <operator>!=</operator> <name>buffer_undef</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>thdbufdestroy</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>locbufs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>locbufs</name> <operator>=</operator> <operator>(</operator><name>buffer_t</name> <operator>*</operator><operator>)</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>Curl_thread_buffer</name> <operator>=</operator> <name>buffer_undef</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>

<name>get_buffer</name><parameter_list>(<parameter><decl><type><name>buffer_t</name> <modifier>*</modifier></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>cp</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>size</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>buf</name><operator>-&gt;</operator><name>buf</name></name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>buf</name><operator>-&gt;</operator><name>buf</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>buf</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>buf</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name><name>buf</name><operator>-&gt;</operator><name>buf</name></name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name>size</name> <operator>&lt;=</operator> <name><name>buf</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <name>size</name> <operator>&lt;</operator> <name>MIN_BYTE_GAIN</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>buf</name><operator>-&gt;</operator><name>buf</name></name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>cp</name> <operator>=</operator> <call><name>realloc</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>cp</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>buf</name></name> <operator>=</operator> <name>cp</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name>size</name> <operator>&lt;=</operator> <name><name>buf</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>cp</name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>buf</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>cp</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>

<name>buffer_unthreaded</name><parameter_list>(<parameter><decl><type><name>localkey_t</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>get_buffer</name><argument_list>(<argument><expr><name>locbufs</name> <operator>+</operator> <name>key</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>

<name>buffer_threaded</name><parameter_list>(<parameter><decl><type><name>localkey_t</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>buffer_t</name> <modifier>*</modifier></type> <name>bufs</name></decl>;</decl_stmt>

<expr_stmt><expr><name>bufs</name> <operator>=</operator> <operator>(</operator><name>buffer_t</name> <operator>*</operator><operator>)</operator> <call><name>pthread_getspecific</name><argument_list>(<argument><expr><name>thdkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>bufs</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>size</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>NULL</name></expr>;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>bufs</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <name>LK_LAST</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>bufs</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>bufs</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>pthread_setspecific</name><argument_list>(<argument><expr><name>thdkey</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>bufs</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>bufs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>get_buffer</name><argument_list>(<argument><expr><name>bufs</name> <operator>+</operator> <name>key</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>

<name>buffer_undef</name><parameter_list>(<parameter><decl><type><name>localkey_t</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>Curl_thread_buffer</name> <operator>==</operator> <name>buffer_undef</name></expr>)</condition> <block>{<block_content> 

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>pthread_key_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>thdkey</name></expr></argument>, <argument><expr><name>thdbufdestroy</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>Curl_thread_buffer</name> <operator>=</operator> <name>buffer_threaded</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>(<expr><operator>!</operator><operator>(</operator><name>locbufs</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <name>LK_LAST</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>locbufs</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>NULL</name></expr>;</return>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>Curl_thread_buffer</name> <operator>=</operator> <name>buffer_unthreaded</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>atexit</name><argument_list>(<argument><expr><name>terminate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>Curl_thread_buffer</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>

<name>set_thread_string</name><parameter_list>(<parameter><decl><type><name>localkey_t</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>cp</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>s</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>cp</name> <operator>=</operator> <call><name>Curl_thread_buffer</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>MAX_CONV_EXPANSION</name> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>cp</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>QadrtConvertE2A</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>MAX_CONV_EXPANSION</name> <operator>*</operator> <name>i</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>cp</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>Curl_getnameinfo_a</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type> <name>sa</name></decl></parameter>, <parameter><decl><type><name>curl_socklen_t</name></type> <name>salen</name></decl></parameter>,

<parameter><decl><type><name>char</name> <modifier>*</modifier></type> <name>nodename</name></decl></parameter>, <parameter><decl><type><name>curl_socklen_t</name></type> <name>nodenamelen</name></decl></parameter>,

<parameter><decl><type><name>char</name> <modifier>*</modifier></type> <name>servname</name></decl></parameter>, <parameter><decl><type><name>curl_socklen_t</name></type> <name>servnamelen</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>enodename</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>eservname</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>nodename</name> <operator>&amp;&amp;</operator> <name>nodenamelen</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>enodename</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>nodenamelen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>enodename</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>EAI_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>servname</name> <operator>&amp;&amp;</operator> <name>servnamelen</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>eservname</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>servnamelen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>eservname</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>enodename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>EAI_MEMORY</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>getnameinfo</name><argument_list>(<argument><expr><name>sa</name></expr></argument>, <argument><expr><name>salen</name></expr></argument>, <argument><expr><name>enodename</name></expr></argument>, <argument><expr><name>nodenamelen</name></expr></argument>,

<argument><expr><name>eservname</name></expr></argument>, <argument><expr><name>servnamelen</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>status</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>enodename</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>QadrtConvertE2A</name><argument_list>(<argument><expr><name>nodename</name></expr></argument>, <argument><expr><name>enodename</name></expr></argument>,

<argument><expr><name>nodenamelen</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>enodename</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>nodename</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>eservname</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>QadrtConvertE2A</name><argument_list>(<argument><expr><name>servname</name></expr></argument>, <argument><expr><name>eservname</name></expr></argument>,

<argument><expr><name>servnamelen</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>eservname</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>servname</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>enodename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>eservname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>status</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>Curl_getaddrinfo_a</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>nodename</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>servname</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>addrinfo</name></name> <modifier>*</modifier></type> <name>hints</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>addrinfo</name></name> <modifier>*</modifier> <modifier>*</modifier></type> <name>res</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>enodename</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>eservname</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>enodename</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>eservname</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>nodename</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>nodename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>enodename</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>enodename</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>EAI_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>QadrtConvertA2E</name><argument_list>(<argument><expr><name>enodename</name></expr></argument>, <argument><expr><name>nodename</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>enodename</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>servname</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>servname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>eservname</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>eservname</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>enodename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>EAI_MEMORY</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>QadrtConvertA2E</name><argument_list>(<argument><expr><name>eservname</name></expr></argument>, <argument><expr><name>servname</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>eservname</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>getaddrinfo</name><argument_list>(<argument><expr><name>enodename</name></expr></argument>, <argument><expr><name>eservname</name></expr></argument>, <argument><expr><name>hints</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>enodename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>eservname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>status</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_GSKIT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<struct>struct <name>gskstrlist</name> <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>gskstrlist</name></name> <modifier>*</modifier></type> <name>next</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>ebcdicstr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>asciistr</name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>Curl_gsk_descriptor</name> <block>{

<decl_stmt><decl><type><name>gsk_handle</name></type> <name>h</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>gskstrlist</name></name> <modifier>*</modifier></type> <name>strlist</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><name>int</name></type>

<name>Curl_gsk_environment_open</name><parameter_list>(<parameter><decl><type><name>gsk_handle</name> <modifier>*</modifier></type> <name>my_env_handle</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>Curl_gsk_descriptor</name></name> <modifier>*</modifier></type> <name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>my_env_handle</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>GSK_OS400_ERROR_INVALID_POINTER</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator>struct <name>Curl_gsk_descriptor</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>p</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>GSK_INSUFFICIENT_STORAGE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>strlist</name></name> <operator>=</operator> <operator>(</operator>struct <name>gskstrlist</name> <operator>*</operator><operator>)</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>gsk_environment_open</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>!=</operator> <name>GSK_OK</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>my_env_handle</name> <operator>=</operator> <operator>(</operator><name>gsk_handle</name><operator>)</operator> <name>p</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><name>rc</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>Curl_gsk_secure_soc_open</name><parameter_list>(<parameter><decl><type><name>gsk_handle</name></type> <name>my_env_handle</name></decl></parameter>,

<parameter><decl><type><name>gsk_handle</name> <modifier>*</modifier></type> <name>my_session_handle</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>Curl_gsk_descriptor</name></name> <modifier>*</modifier></type> <name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>gsk_handle</name></type> <name>h</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>my_env_handle</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>GSK_INVALID_HANDLE</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>my_session_handle</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>GSK_OS400_ERROR_INVALID_POINTER</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>h</name> <operator>=</operator> <operator>(</operator><operator>(</operator>struct <name>Curl_gsk_descriptor</name> <operator>*</operator><operator>)</operator> <name>my_env_handle</name><operator>)</operator><operator>-&gt;</operator><name>h</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator>struct <name>Curl_gsk_descriptor</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>p</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>GSK_INSUFFICIENT_STORAGE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>strlist</name></name> <operator>=</operator> <operator>(</operator>struct <name>gskstrlist</name> <operator>*</operator><operator>)</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>gsk_secure_soc_open</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>!=</operator> <name>GSK_OK</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>my_session_handle</name> <operator>=</operator> <operator>(</operator><name>gsk_handle</name><operator>)</operator> <name>p</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><name>rc</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>gsk_free_handle</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_gsk_descriptor</name></name> <modifier>*</modifier></type> <name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>gskstrlist</name></name> <modifier>*</modifier></type> <name>q</name></decl>;</decl_stmt>

<while>while<condition>(<expr><operator>(</operator><name>q</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>strlist</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>strlist</name></name> <operator>=</operator> <name>q</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name><name>q</name><operator>-&gt;</operator><name>asciistr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>Curl_gsk_environment_close</name><parameter_list>(<parameter><decl><type><name>gsk_handle</name> <modifier>*</modifier></type> <name>my_env_handle</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>Curl_gsk_descriptor</name></name> <modifier>*</modifier></type> <name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>my_env_handle</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>GSK_OS400_ERROR_INVALID_POINTER</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>*</operator><name>my_env_handle</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>GSK_INVALID_HANDLE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator>struct <name>Curl_gsk_descriptor</name> <operator>*</operator><operator>)</operator> <operator>*</operator><name>my_env_handle</name></expr>;</expr_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>gsk_environment_close</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>==</operator> <name>GSK_OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>gsk_free_handle</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>my_env_handle</name> <operator>=</operator> <operator>(</operator><name>gsk_handle</name><operator>)</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>rc</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>Curl_gsk_secure_soc_close</name><parameter_list>(<parameter><decl><type><name>gsk_handle</name> <modifier>*</modifier></type> <name>my_session_handle</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>Curl_gsk_descriptor</name></name> <modifier>*</modifier></type> <name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>my_session_handle</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>GSK_OS400_ERROR_INVALID_POINTER</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>*</operator><name>my_session_handle</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>GSK_INVALID_HANDLE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator>struct <name>Curl_gsk_descriptor</name> <operator>*</operator><operator>)</operator> <operator>*</operator><name>my_session_handle</name></expr>;</expr_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>gsk_secure_soc_close</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>==</operator> <name>GSK_OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>gsk_free_handle</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>my_session_handle</name> <operator>=</operator> <operator>(</operator><name>gsk_handle</name><operator>)</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>rc</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>Curl_gsk_environment_init</name><parameter_list>(<parameter><decl><type><name>gsk_handle</name></type> <name>my_env_handle</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>Curl_gsk_descriptor</name></name> <modifier>*</modifier></type> <name>p</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>my_env_handle</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>GSK_INVALID_HANDLE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator>struct <name>Curl_gsk_descriptor</name> <operator>*</operator><operator>)</operator> <name>my_env_handle</name></expr>;</expr_stmt>

<return>return <expr><call><name>gsk_environment_init</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>h</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>Curl_gsk_secure_soc_init</name><parameter_list>(<parameter><decl><type><name>gsk_handle</name></type> <name>my_session_handle</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>Curl_gsk_descriptor</name></name> <modifier>*</modifier></type> <name>p</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>my_session_handle</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>GSK_INVALID_HANDLE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator>struct <name>Curl_gsk_descriptor</name> <operator>*</operator><operator>)</operator> <name>my_session_handle</name></expr>;</expr_stmt>

<return>return <expr><call><name>gsk_secure_soc_init</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>h</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>Curl_gsk_attribute_set_buffer_a</name><parameter_list>(<parameter><decl><type><name>gsk_handle</name></type> <name>my_gsk_handle</name></decl></parameter>, <parameter><decl><type><name>GSK_BUF_ID</name></type> <name>bufID</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>buffer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bufSize</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>Curl_gsk_descriptor</name></name> <modifier>*</modifier></type> <name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>ebcdicbuf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>my_gsk_handle</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>GSK_INVALID_HANDLE</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>buffer</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>GSK_OS400_ERROR_INVALID_POINTER</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>bufSize</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>GSK_ATTRIBUTE_INVALID_LENGTH</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator>struct <name>Curl_gsk_descriptor</name> <operator>*</operator><operator>)</operator> <name>my_gsk_handle</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>bufSize</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>bufSize</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ebcdicbuf</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>bufSize</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>ebcdicbuf</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>GSK_INSUFFICIENT_STORAGE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>QadrtConvertA2E</name><argument_list>(<argument><expr><name>ebcdicbuf</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>bufSize</name></expr></argument>, <argument><expr><name>bufSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ebcdicbuf</name><index>[<expr><name>bufSize</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>gsk_attribute_set_buffer</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>h</name></name></expr></argument>, <argument><expr><name>bufID</name></expr></argument>, <argument><expr><name>ebcdicbuf</name></expr></argument>, <argument><expr><name>bufSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ebcdicbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>rc</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>Curl_gsk_attribute_set_enum</name><parameter_list>(<parameter><decl><type><name>gsk_handle</name></type> <name>my_gsk_handle</name></decl></parameter>, <parameter><decl><type><name>GSK_ENUM_ID</name></type> <name>enumID</name></decl></parameter>,

<parameter><decl><type><name>GSK_ENUM_VALUE</name></type> <name>enumValue</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>Curl_gsk_descriptor</name></name> <modifier>*</modifier></type> <name>p</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>my_gsk_handle</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>GSK_INVALID_HANDLE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator>struct <name>Curl_gsk_descriptor</name> <operator>*</operator><operator>)</operator> <name>my_gsk_handle</name></expr>;</expr_stmt>

<return>return <expr><call><name>gsk_attribute_set_enum</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>h</name></name></expr></argument>, <argument><expr><name>enumID</name></expr></argument>, <argument><expr><name>enumValue</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>Curl_gsk_attribute_set_numeric_value</name><parameter_list>(<parameter><decl><type><name>gsk_handle</name></type> <name>my_gsk_handle</name></decl></parameter>,

<parameter><decl><type><name>GSK_NUM_ID</name></type> <name>numID</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>numValue</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>Curl_gsk_descriptor</name></name> <modifier>*</modifier></type> <name>p</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>my_gsk_handle</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>GSK_INVALID_HANDLE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator>struct <name>Curl_gsk_descriptor</name> <operator>*</operator><operator>)</operator> <name>my_gsk_handle</name></expr>;</expr_stmt>

<return>return <expr><call><name>gsk_attribute_set_numeric_value</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>h</name></name></expr></argument>, <argument><expr><name>numID</name></expr></argument>, <argument><expr><name>numValue</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>Curl_gsk_attribute_set_callback</name><parameter_list>(<parameter><decl><type><name>gsk_handle</name></type> <name>my_gsk_handle</name></decl></parameter>,

<parameter><decl><type><name>GSK_CALLBACK_ID</name></type> <name>callBackID</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>callBackAreaPtr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>Curl_gsk_descriptor</name></name> <modifier>*</modifier></type> <name>p</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>my_gsk_handle</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>GSK_INVALID_HANDLE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator>struct <name>Curl_gsk_descriptor</name> <operator>*</operator><operator>)</operator> <name>my_gsk_handle</name></expr>;</expr_stmt>

<return>return <expr><call><name>gsk_attribute_set_callback</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>h</name></name></expr></argument>, <argument><expr><name>callBackID</name></expr></argument>, <argument><expr><name>callBackAreaPtr</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>cachestring</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_gsk_descriptor</name></name> <modifier>*</modifier></type> <name>p</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>ebcdicbuf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bufsize</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier> <modifier>*</modifier></type> <name>buffer</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>asciibuf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>gskstrlist</name></name> <modifier>*</modifier></type> <name>sp</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>sp</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>strlist</name></name></expr>;</init> <condition><expr><name>sp</name></expr>;</condition> <incr><expr><name>sp</name> <operator>=</operator> <name><name>sp</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if<condition>(<expr><name><name>sp</name><operator>-&gt;</operator><name>ebcdicstr</name></name> <operator>==</operator> <name>ebcdicbuf</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>sp</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>sp</name> <operator>=</operator> <operator>(</operator>struct <name>gskstrlist</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>sp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>sp</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>GSK_INSUFFICIENT_STORAGE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>asciibuf</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>bufsize</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>asciibuf</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>GSK_INSUFFICIENT_STORAGE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>QadrtConvertE2A</name><argument_list>(<argument><expr><name>asciibuf</name></expr></argument>, <argument><expr><name>ebcdicbuf</name></expr></argument>, <argument><expr><name>bufsize</name></expr></argument>, <argument><expr><name>bufsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>asciibuf</name><index>[<expr><name>bufsize</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sp</name><operator>-&gt;</operator><name>ebcdicstr</name></name> <operator>=</operator> <name>ebcdicbuf</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sp</name><operator>-&gt;</operator><name>asciistr</name></name> <operator>=</operator> <name>asciibuf</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sp</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>strlist</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>strlist</name></name> <operator>=</operator> <name>sp</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>buffer</name> <operator>=</operator> <name><name>sp</name><operator>-&gt;</operator><name>asciistr</name></name></expr>;</expr_stmt>

<return>return <expr><name>GSK_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>Curl_gsk_attribute_get_buffer_a</name><parameter_list>(<parameter><decl><type><name>gsk_handle</name></type> <name>my_gsk_handle</name></decl></parameter>, <parameter><decl><type><name>GSK_BUF_ID</name></type> <name>bufID</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier> <modifier>*</modifier></type> <name>buffer</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type> <name>bufSize</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>Curl_gsk_descriptor</name></name> <modifier>*</modifier></type> <name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>mybuf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mylen</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>my_gsk_handle</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>GSK_INVALID_HANDLE</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>buffer</name> <operator>||</operator> <operator>!</operator><name>bufSize</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>GSK_OS400_ERROR_INVALID_POINTER</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator>struct <name>Curl_gsk_descriptor</name> <operator>*</operator><operator>)</operator> <name>my_gsk_handle</name></expr>;</expr_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>gsk_attribute_get_buffer</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>h</name></name></expr></argument>, <argument><expr><name>bufID</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mybuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mylen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>!=</operator> <name>GSK_OK</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>rc</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>cachestring</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>mybuf</name></expr></argument>, <argument><expr><name>mylen</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>==</operator> <name>GSK_OK</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>bufSize</name> <operator>=</operator> <name>mylen</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>rc</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>Curl_gsk_attribute_get_enum</name><parameter_list>(<parameter><decl><type><name>gsk_handle</name></type> <name>my_gsk_handle</name></decl></parameter>, <parameter><decl><type><name>GSK_ENUM_ID</name></type> <name>enumID</name></decl></parameter>,

<parameter><decl><type><name>GSK_ENUM_VALUE</name> <modifier>*</modifier></type> <name>enumValue</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>Curl_gsk_descriptor</name></name> <modifier>*</modifier></type> <name>p</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>my_gsk_handle</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>GSK_INVALID_HANDLE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator>struct <name>Curl_gsk_descriptor</name> <operator>*</operator><operator>)</operator> <name>my_gsk_handle</name></expr>;</expr_stmt>

<return>return <expr><call><name>gsk_attribute_get_enum</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>h</name></name></expr></argument>, <argument><expr><name>enumID</name></expr></argument>, <argument><expr><name>enumValue</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>Curl_gsk_attribute_get_numeric_value</name><parameter_list>(<parameter><decl><type><name>gsk_handle</name></type> <name>my_gsk_handle</name></decl></parameter>,

<parameter><decl><type><name>GSK_NUM_ID</name></type> <name>numID</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type> <name>numValue</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>Curl_gsk_descriptor</name></name> <modifier>*</modifier></type> <name>p</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>my_gsk_handle</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>GSK_INVALID_HANDLE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator>struct <name>Curl_gsk_descriptor</name> <operator>*</operator><operator>)</operator> <name>my_gsk_handle</name></expr>;</expr_stmt>

<return>return <expr><call><name>gsk_attribute_get_numeric_value</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>h</name></name></expr></argument>, <argument><expr><name>numID</name></expr></argument>, <argument><expr><name>numValue</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>Curl_gsk_attribute_get_cert_info</name><parameter_list>(<parameter><decl><type><name>gsk_handle</name></type> <name>my_gsk_handle</name></decl></parameter>,

<parameter><decl><type><name>GSK_CERT_ID</name></type> <name>certID</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>gsk_cert_data_elem</name> <modifier>*</modifier> <modifier>*</modifier></type> <name>certDataElem</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type> <name>certDataElementCount</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>Curl_gsk_descriptor</name></name> <modifier>*</modifier></type> <name>p</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>my_gsk_handle</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>GSK_INVALID_HANDLE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator>struct <name>Curl_gsk_descriptor</name> <operator>*</operator><operator>)</operator> <name>my_gsk_handle</name></expr>;</expr_stmt>

<return>return <expr><call><name>gsk_attribute_get_cert_info</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>h</name></name></expr></argument>, <argument><expr><name>certID</name></expr></argument>,

<argument><expr><name>certDataElem</name></expr></argument>, <argument><expr><name>certDataElementCount</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>Curl_gsk_secure_soc_misc</name><parameter_list>(<parameter><decl><type><name>gsk_handle</name></type> <name>my_session_handle</name></decl></parameter>, <parameter><decl><type><name>GSK_MISC_ID</name></type> <name>miscID</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>Curl_gsk_descriptor</name></name> <modifier>*</modifier></type> <name>p</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>my_session_handle</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>GSK_INVALID_HANDLE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator>struct <name>Curl_gsk_descriptor</name> <operator>*</operator><operator>)</operator> <name>my_session_handle</name></expr>;</expr_stmt>

<return>return <expr><call><name>gsk_secure_soc_misc</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>h</name></name></expr></argument>, <argument><expr><name>miscID</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>Curl_gsk_secure_soc_read</name><parameter_list>(<parameter><decl><type><name>gsk_handle</name></type> <name>my_session_handle</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type> <name>readBuffer</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>readBufSize</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type> <name>amtRead</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>Curl_gsk_descriptor</name></name> <modifier>*</modifier></type> <name>p</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>my_session_handle</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>GSK_INVALID_HANDLE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator>struct <name>Curl_gsk_descriptor</name> <operator>*</operator><operator>)</operator> <name>my_session_handle</name></expr>;</expr_stmt>

<return>return <expr><call><name>gsk_secure_soc_read</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>h</name></name></expr></argument>, <argument><expr><name>readBuffer</name></expr></argument>, <argument><expr><name>readBufSize</name></expr></argument>, <argument><expr><name>amtRead</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>Curl_gsk_secure_soc_write</name><parameter_list>(<parameter><decl><type><name>gsk_handle</name></type> <name>my_session_handle</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type> <name>writeBuffer</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>writeBufSize</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type> <name>amtWritten</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>Curl_gsk_descriptor</name></name> <modifier>*</modifier></type> <name>p</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>my_session_handle</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>GSK_INVALID_HANDLE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator>struct <name>Curl_gsk_descriptor</name> <operator>*</operator><operator>)</operator> <name>my_session_handle</name></expr>;</expr_stmt>

<return>return <expr><call><name>gsk_secure_soc_write</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>h</name></name></expr></argument>, <argument><expr><name>writeBuffer</name></expr></argument>, <argument><expr><name>writeBufSize</name></expr></argument>, <argument><expr><name>amtWritten</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>

<name>Curl_gsk_strerror_a</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>gsk_return_value</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>set_thread_string</name><argument_list>(<argument><expr><name>LK_GSK_ERROR</name></expr></argument>, <argument><expr><call><name>gsk_strerror</name><argument_list>(<argument><expr><name>gsk_return_value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>Curl_gsk_secure_soc_startInit</name><parameter_list>(<parameter><decl><type><name>gsk_handle</name></type> <name>my_session_handle</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>IOCompletionPort</name></decl></parameter>,

<parameter><decl><type><name>Qso_OverlappedIO_t</name> <modifier>*</modifier></type> <name>communicationsArea</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>Curl_gsk_descriptor</name></name> <modifier>*</modifier></type> <name>p</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>my_session_handle</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>GSK_INVALID_HANDLE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator>struct <name>Curl_gsk_descriptor</name> <operator>*</operator><operator>)</operator> <name>my_session_handle</name></expr>;</expr_stmt>

<return>return <expr><call><name>gsk_secure_soc_startInit</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>h</name></name></expr></argument>, <argument><expr><name>IOCompletionPort</name></expr></argument>, <argument><expr><name>communicationsArea</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_GSSAPI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type>

<name>Curl_gss_convert_in_place</name><parameter_list>(<parameter><decl><type><name>OM_uint32</name> <modifier>*</modifier></type> <name>minor_status</name></decl></parameter>, <parameter><decl><type><name>gss_buffer_t</name></type> <name>buf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><name><name>buf</name><operator>-&gt;</operator><name>length</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>i</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>t</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>t</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>gss_release_buffer</name><argument_list>(<argument><expr><name>minor_status</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>minor_status</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>minor_status</name> <operator>=</operator> <name>ENOMEM</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>QadrtConvertE2A</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name><name>buf</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>OM_uint32</name></type>

<name>Curl_gss_import_name_a</name><parameter_list>(<parameter><decl><type><name>OM_uint32</name> <modifier>*</modifier></type> <name>minor_status</name></decl></parameter>, <parameter><decl><type><name>gss_buffer_t</name></type> <name>in_name</name></decl></parameter>,

<parameter><decl><type><name>gss_OID</name></type> <name>in_name_type</name></decl></parameter>, <parameter><decl><type><name>gss_name_t</name> <modifier>*</modifier></type> <name>out_name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>gss_buffer_desc</name></type> <name>in</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>in_name</name> <operator>||</operator> <operator>!</operator><name><name>in_name</name><operator>-&gt;</operator><name>value</name></name> <operator>||</operator> <operator>!</operator><name><name>in_name</name><operator>-&gt;</operator><name>length</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>gss_import_name</name><argument_list>(<argument><expr><name>minor_status</name></expr></argument>, <argument><expr><name>in_name</name></expr></argument>, <argument><expr><name>in_name_type</name></expr></argument>, <argument><expr><name>out_name</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>in</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>in_name</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <name><name>in</name><operator>.</operator><name>length</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>in</name><operator>.</operator><name>value</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>in</name><operator>.</operator><name>value</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>minor_status</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>minor_status</name> <operator>=</operator> <name>ENOMEM</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>GSS_S_FAILURE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>QadrtConvertA2E</name><argument_list>(<argument><expr><name><name>in</name><operator>.</operator><name>value</name></name></expr></argument>, <argument><expr><name><name>in_name</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name><name>in</name><operator>.</operator><name>value</name></name><operator>)</operator><index>[<expr><name>i</name></expr>]</index> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>gss_import_name</name><argument_list>(<argument><expr><name>minor_status</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>in</name></expr></argument>, <argument><expr><name>in_name_type</name></expr></argument>, <argument><expr><name>out_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>in</name><operator>.</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>rc</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>OM_uint32</name></type>

<name>Curl_gss_display_status_a</name><parameter_list>(<parameter><decl><type><name>OM_uint32</name> <modifier>*</modifier></type> <name>minor_status</name></decl></parameter>, <parameter><decl><type><name>OM_uint32</name></type> <name>status_value</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>status_type</name></decl></parameter>, <parameter><decl><type><name>gss_OID</name></type> <name>mech_type</name></decl></parameter>,

<parameter><decl><type><name>gss_msg_ctx_t</name> <modifier>*</modifier></type> <name>message_context</name></decl></parameter>, <parameter><decl><type><name>gss_buffer_t</name></type> <name>status_string</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>gss_display_status</name><argument_list>(<argument><expr><name>minor_status</name></expr></argument>, <argument><expr><name>status_value</name></expr></argument>, <argument><expr><name>status_type</name></expr></argument>,

<argument><expr><name>mech_type</name></expr></argument>, <argument><expr><name>message_context</name></expr></argument>, <argument><expr><name>status_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>!=</operator> <name>GSS_S_COMPLETE</name> <operator>||</operator> <operator>!</operator><name>status_string</name> <operator>||</operator>

<operator>!</operator><name><name>status_string</name><operator>-&gt;</operator><name>length</name></name> <operator>||</operator> <operator>!</operator><name><name>status_string</name><operator>-&gt;</operator><name>value</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>rc</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>Curl_gss_convert_in_place</name><argument_list>(<argument><expr><name>minor_status</name></expr></argument>, <argument><expr><name>status_string</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>GSS_S_FAILURE</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>rc</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>OM_uint32</name></type>

<name>Curl_gss_init_sec_context_a</name><parameter_list>(<parameter><decl><type><name>OM_uint32</name> <modifier>*</modifier></type> <name>minor_status</name></decl></parameter>,

<parameter><decl><type><name>gss_cred_id_t</name></type> <name>cred_handle</name></decl></parameter>,

<parameter><decl><type><name>gss_ctx_id_t</name> <modifier>*</modifier></type> <name>context_handle</name></decl></parameter>,

<parameter><decl><type><name>gss_name_t</name></type> <name>target_name</name></decl></parameter>, <parameter><decl><type><name>gss_OID</name></type> <name>mech_type</name></decl></parameter>,

<parameter><decl><type><name>gss_flags_t</name></type> <name>req_flags</name></decl></parameter>, <parameter><decl><type><name>OM_uint32</name></type> <name>time_req</name></decl></parameter>,

<parameter><decl><type><name>gss_channel_bindings_t</name></type> <name>input_chan_bindings</name></decl></parameter>,

<parameter><decl><type><name>gss_buffer_t</name></type> <name>input_token</name></decl></parameter>,

<parameter><decl><type><name>gss_OID</name> <modifier>*</modifier></type> <name>actual_mech_type</name></decl></parameter>,

<parameter><decl><type><name>gss_buffer_t</name></type> <name>output_token</name></decl></parameter>, <parameter><decl><type><name>gss_flags_t</name> <modifier>*</modifier></type> <name>ret_flags</name></decl></parameter>,

<parameter><decl><type><name>OM_uint32</name> <modifier>*</modifier></type> <name>time_rec</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>gss_buffer_desc</name></type> <name>in</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>gss_buffer_t</name></type> <name>inp</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>in</name><operator>.</operator><name>value</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>inp</name> <operator>=</operator> <name>input_token</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>inp</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>inp</name><operator>-&gt;</operator><name>length</name></name> <operator>&amp;&amp;</operator> <name><name>inp</name><operator>-&gt;</operator><name>value</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><name><name>inp</name><operator>-&gt;</operator><name>length</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>in</name><operator>.</operator><name>value</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>in</name><operator>.</operator><name>value</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>minor_status</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>minor_status</name> <operator>=</operator> <name>ENOMEM</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>GSS_S_FAILURE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>QadrtConvertA2E</name><argument_list>(<argument><expr><name><name>in</name><operator>.</operator><name>value</name></name></expr></argument>, <argument><expr><name><name>input_token</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name><name>in</name><operator>.</operator><name>value</name></name><operator>)</operator><index>[<expr><name>i</name></expr>]</index> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>in</name><operator>.</operator><name>length</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><name>inp</name> <operator>=</operator> <operator>&amp;</operator><name>in</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>gss_init_sec_context</name><argument_list>(<argument><expr><name>minor_status</name></expr></argument>, <argument><expr><name>cred_handle</name></expr></argument>, <argument><expr><name>context_handle</name></expr></argument>,

<argument><expr><name>target_name</name></expr></argument>, <argument><expr><name>mech_type</name></expr></argument>, <argument><expr><name>req_flags</name></expr></argument>, <argument><expr><name>time_req</name></expr></argument>,

<argument><expr><name>input_chan_bindings</name></expr></argument>, <argument><expr><name>inp</name></expr></argument>, <argument><expr><name>actual_mech_type</name></expr></argument>,

<argument><expr><name>output_token</name></expr></argument>, <argument><expr><name>ret_flags</name></expr></argument>, <argument><expr><name>time_rec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>in</name><operator>.</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>!=</operator> <name>GSS_S_COMPLETE</name> <operator>||</operator> <operator>!</operator><name>output_token</name> <operator>||</operator>

<operator>!</operator><name><name>output_token</name><operator>-&gt;</operator><name>length</name></name> <operator>||</operator> <operator>!</operator><name><name>output_token</name><operator>-&gt;</operator><name>value</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>rc</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>Curl_gss_convert_in_place</name><argument_list>(<argument><expr><name>minor_status</name></expr></argument>, <argument><expr><name>output_token</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>GSS_S_FAILURE</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>rc</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>OM_uint32</name></type>

<name>Curl_gss_delete_sec_context_a</name><parameter_list>(<parameter><decl><type><name>OM_uint32</name> <modifier>*</modifier></type> <name>minor_status</name></decl></parameter>,

<parameter><decl><type><name>gss_ctx_id_t</name> <modifier>*</modifier></type> <name>context_handle</name></decl></parameter>,

<parameter><decl><type><name>gss_buffer_t</name></type> <name>output_token</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>gss_delete_sec_context</name><argument_list>(<argument><expr><name>minor_status</name></expr></argument>, <argument><expr><name>context_handle</name></expr></argument>, <argument><expr><name>output_token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>!=</operator> <name>GSS_S_COMPLETE</name> <operator>||</operator> <operator>!</operator><name>output_token</name> <operator>||</operator>

<operator>!</operator><name><name>output_token</name><operator>-&gt;</operator><name>length</name></name> <operator>||</operator> <operator>!</operator><name><name>output_token</name><operator>-&gt;</operator><name>value</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>rc</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>Curl_gss_convert_in_place</name><argument_list>(<argument><expr><name>minor_status</name></expr></argument>, <argument><expr><name>output_token</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>GSS_S_FAILURE</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>rc</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_LDAP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>void</name> <modifier>*</modifier></type>

<name>Curl_ldap_init_a</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type> <name>host</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>port</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>ehost</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type> <name>result</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>host</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <call><name>ldap_init</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ehost</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>ehost</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>QadrtConvertA2E</name><argument_list>(<argument><expr><name>ehost</name></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ehost</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <call><name>ldap_init</name><argument_list>(<argument><expr><name>ehost</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ehost</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>Curl_ldap_simple_bind_s_a</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>ld</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type> <name>dn</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type> <name>passwd</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>edn</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>epasswd</name></decl>;</decl_stmt>

<expr_stmt><expr><name>edn</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>epasswd</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>dn</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>dn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>edn</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>edn</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>LDAP_NO_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>QadrtConvertA2E</name><argument_list>(<argument><expr><name>edn</name></expr></argument>, <argument><expr><name>dn</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>edn</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>passwd</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>passwd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>epasswd</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>epasswd</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>edn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>LDAP_NO_MEMORY</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>QadrtConvertA2E</name><argument_list>(<argument><expr><name>epasswd</name></expr></argument>, <argument><expr><name>passwd</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>epasswd</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>ldap_simple_bind_s</name><argument_list>(<argument><expr><name>ld</name></expr></argument>, <argument><expr><name>edn</name></expr></argument>, <argument><expr><name>epasswd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>epasswd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>edn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>i</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>Curl_ldap_search_s_a</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>ld</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type> <name>base</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>scope</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type> <name>filter</name></decl></parameter>,

<parameter><decl><type><name>char</name> <modifier>*</modifier> <modifier>*</modifier></type> <name>attrs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>attrsonly</name></decl></parameter>, <parameter><decl><type><name>LDAPMessage</name> <modifier>*</modifier> <modifier>*</modifier></type> <name>res</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>ebase</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>efilter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier> <modifier>*</modifier></type> <name>eattrs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ebase</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>efilter</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>eattrs</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator> <operator>*</operator><operator>)</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <name>LDAP_SUCCESS</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>base</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ebase</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>ebase</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>status</name> <operator>=</operator> <name>LDAP_NO_MEMORY</name></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>QadrtConvertA2E</name><argument_list>(<argument><expr><name>ebase</name></expr></argument>, <argument><expr><name>base</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ebase</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>filter</name> <operator>&amp;&amp;</operator> <name>status</name> <operator>==</operator> <name>LDAP_SUCCESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>efilter</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>efilter</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>status</name> <operator>=</operator> <name>LDAP_NO_MEMORY</name></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>QadrtConvertA2E</name><argument_list>(<argument><expr><name>efilter</name></expr></argument>, <argument><expr><name>filter</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>efilter</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>attrs</name> <operator>&amp;&amp;</operator> <name>status</name> <operator>==</operator> <name>LDAP_SUCCESS</name></expr>)</condition> <block>{<block_content>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>attrs</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name></expr>;</condition><incr/>)</control><block type="pseudo"><block_content>

<empty_stmt>;</empty_stmt></block_content></block></for>

<expr_stmt><expr><name>eattrs</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>eattrs</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>eattrs</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>status</name> <operator>=</operator> <name>LDAP_NO_MEMORY</name></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<for>for<control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>attrs</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>attrs</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>eattrs</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>eattrs</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>status</name> <operator>=</operator> <name>LDAP_NO_MEMORY</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>QadrtConvertA2E</name><argument_list>(<argument><expr><name><name>eattrs</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>attrs</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>eattrs</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>status</name> <operator>==</operator> <name>LDAP_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>ldap_search_s</name><argument_list>(<argument><expr><name>ld</name></expr></argument>, <argument><expr><ternary><condition><expr><name>ebase</name></expr>?</condition><then> <expr><name>ebase</name></expr></then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>, <argument><expr><name>scope</name></expr></argument>,

<argument><expr><ternary><condition><expr><name>efilter</name></expr>?</condition><then> <expr><name>efilter</name></expr></then><else>: <expr><literal type="string">"(objectclass=*)"</literal></expr></else></ternary></expr></argument>,

<argument><expr><name>eattrs</name></expr></argument>, <argument><expr><name>attrsonly</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>eattrs</name></expr>)</condition> <block>{<block_content>

<for>for<control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>eattrs</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>eattrs</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>eattrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>efilter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ebase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>status</name></expr>;</return>

</block_content>}</block></function>

<function><type><name><name>struct</name> <name>berval</name></name> <modifier>*</modifier> <modifier>*</modifier></type>

<name>Curl_ldap_get_values_len_a</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>ld</name></decl></parameter>, <parameter><decl><type><name>LDAPMessage</name> <modifier>*</modifier></type> <name>entry</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>attr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>cp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>berval</name></name> <modifier>*</modifier> <modifier>*</modifier></type> <name>result</name></decl>;</decl_stmt>

<expr_stmt><expr><name>cp</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>attr</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>cp</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>cp</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ldap_set_lderrno</name><argument_list>(<argument><expr><name>ld</name></expr></argument>, <argument><expr><name>LDAP_NO_MEMORY</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><call><name>ldap_err2string</name><argument_list>(<argument><expr><name>LDAP_NO_MEMORY</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator>struct <name>berval</name> <operator>*</operator> <operator>*</operator><operator>)</operator> <name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>QadrtConvertA2E</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><name>attr</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>ldap_get_values_len</name><argument_list>(<argument><expr><name>ld</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>, <argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>

<name>Curl_ldap_err2string_a</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>error</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>set_thread_string</name><argument_list>(<argument><expr><name>LK_LDAP_ERROR</name></expr></argument>, <argument><expr><call><name>ldap_err2string</name><argument_list>(<argument><expr><name>error</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>

<name>Curl_ldap_get_dn_a</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>ld</name></decl></parameter>, <parameter><decl><type><name>LDAPMessage</name> <modifier>*</modifier></type> <name>entry</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>cp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>cp2</name></decl>;</decl_stmt>

<expr_stmt><expr><name>cp</name> <operator>=</operator> <call><name>ldap_get_dn</name><argument_list>(<argument><expr><name>ld</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>cp</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>cp</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cp2</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>cp2</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>cp2</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>QadrtConvertE2A</name><argument_list>(<argument><expr><name>cp2</name></expr></argument>, <argument><expr><name>cp</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cp2</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><name>cp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>cp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>cp</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>

<name>Curl_ldap_first_attribute_a</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>ld</name></decl></parameter>,

<parameter><decl><type><name>LDAPMessage</name> <modifier>*</modifier></type> <name>entry</name></decl></parameter>, <parameter><decl><type><name>BerElement</name> <modifier>*</modifier> <modifier>*</modifier></type> <name>berptr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>cp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>cp2</name></decl>;</decl_stmt>

<expr_stmt><expr><name>cp</name> <operator>=</operator> <call><name>ldap_first_attribute</name><argument_list>(<argument><expr><name>ld</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>, <argument><expr><name>berptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>cp</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>cp</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cp2</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>cp2</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>cp2</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>QadrtConvertE2A</name><argument_list>(<argument><expr><name>cp2</name></expr></argument>, <argument><expr><name>cp</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cp2</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><name>cp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>cp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>cp</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>

<name>Curl_ldap_next_attribute_a</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>ld</name></decl></parameter>,

<parameter><decl><type><name>LDAPMessage</name> <modifier>*</modifier></type> <name>entry</name></decl></parameter>, <parameter><decl><type><name>BerElement</name> <modifier>*</modifier></type> <name>berptr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>cp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>cp2</name></decl>;</decl_stmt>

<expr_stmt><expr><name>cp</name> <operator>=</operator> <call><name>ldap_next_attribute</name><argument_list>(<argument><expr><name>ld</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>, <argument><expr><name>berptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>cp</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>cp</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cp2</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>cp2</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>cp2</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>QadrtConvertE2A</name><argument_list>(<argument><expr><name>cp2</name></expr></argument>, <argument><expr><name>cp</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cp2</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><name>cp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>cp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>cp</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><specifier>static</specifier> <name>int</name></type>

<name>sockaddr2ebcdic</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sockaddr_storage</name></name> <modifier>*</modifier></type><name>dstaddr</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type><name>srcaddr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>srclen</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>sockaddr_un</name></name> <modifier>*</modifier></type><name>srcu</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_un</name></name> <modifier>*</modifier></type><name>dstu</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>dstsize</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>srcaddr</name> <operator>||</operator> <name>srclen</name> <operator>&lt;</operator> <call><name>offsetof</name><argument_list>(<argument><expr>struct <name>sockaddr</name></expr></argument>, <argument><expr><name>sa_family</name></expr></argument>)</argument_list></call> <operator>+</operator>

<sizeof>sizeof<argument_list>(<argument><expr><name><name>srcaddr</name><operator>-&gt;</operator><name>sa_family</name></name></expr></argument>)</argument_list></sizeof> <operator>||</operator> <name>srclen</name> <operator>&gt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>dstaddr</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>dstaddr</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>srcaddr</name></expr></argument>, <argument><expr><name>srclen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>srcaddr</name><operator>-&gt;</operator><name>sa_family</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AF_UNIX</name></expr>:</case>

<expr_stmt><expr><name>srcu</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> struct <name>sockaddr_un</name> <operator>*</operator><operator>)</operator> <name>srcaddr</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dstu</name> <operator>=</operator> <operator>(</operator>struct <name>sockaddr_un</name> <operator>*</operator><operator>)</operator> <name>dstaddr</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dstsize</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>dstaddr</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <call><name>offsetof</name><argument_list>(<argument><expr>struct <name>sockaddr_un</name></expr></argument>, <argument><expr><name>sun_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>srclen</name> <operator>-=</operator> <call><name>offsetof</name><argument_list>(<argument><expr>struct <name>sockaddr_un</name></expr></argument>, <argument><expr><name>sun_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>QadrtConvertA2E</name><argument_list>(<argument><expr><name><name>dstu</name><operator>-&gt;</operator><name>sun_path</name></name></expr></argument>, <argument><expr><name><name>srcu</name><operator>-&gt;</operator><name>sun_path</name></name></expr></argument>, <argument><expr><name>dstsize</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>srclen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstu</name><operator>-&gt;</operator><name>sun_path</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>srclen</name> <operator>=</operator> <name>i</name> <operator>+</operator> <call><name>offsetof</name><argument_list>(<argument><expr>struct <name>sockaddr_un</name></expr></argument>, <argument><expr><name>sun_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

<return>return <expr><name>srclen</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>sockaddr2ascii</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type><name>dstaddr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dstlen</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>sockaddr_storage</name></name> <modifier>*</modifier></type><name>srcaddr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>srclen</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>sockaddr_un</name></name> <modifier>*</modifier></type><name>srcu</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_un</name></name> <modifier>*</modifier></type><name>dstu</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>dstsize</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>srclen</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>srclen</name> <operator>&gt;</operator> <name>dstlen</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>srclen</name> <operator>=</operator> <name>dstlen</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>srcaddr</name> <operator>||</operator> <name>srclen</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>dstaddr</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>srcaddr</name></expr></argument>, <argument><expr><name>srclen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>srclen</name> <operator>&gt;=</operator> <call><name>offsetof</name><argument_list>(<argument><expr>struct <name>sockaddr_storage</name></expr></argument>, <argument><expr><name>ss_family</name></expr></argument>)</argument_list></call> <operator>+</operator>

<sizeof>sizeof<argument_list>(<argument><expr><name><name>srcaddr</name><operator>-&gt;</operator><name>ss_family</name></name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>

<switch>switch <condition>(<expr><name><name>srcaddr</name><operator>-&gt;</operator><name>ss_family</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AF_UNIX</name></expr>:</case>

<expr_stmt><expr><name>srcu</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> struct <name>sockaddr_un</name> <operator>*</operator><operator>)</operator> <name>srcaddr</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dstu</name> <operator>=</operator> <operator>(</operator>struct <name>sockaddr_un</name> <operator>*</operator><operator>)</operator> <name>dstaddr</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dstsize</name> <operator>=</operator> <name>dstlen</name> <operator>-</operator> <call><name>offsetof</name><argument_list>(<argument><expr>struct <name>sockaddr_un</name></expr></argument>, <argument><expr><name>sun_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>srclen</name> <operator>-=</operator> <call><name>offsetof</name><argument_list>(<argument><expr>struct <name>sockaddr_un</name></expr></argument>, <argument><expr><name>sun_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>dstsize</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>srclen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>srclen</name> <operator>=</operator> <call><name>QadrtConvertE2A</name><argument_list>(<argument><expr><name><name>dstu</name><operator>-&gt;</operator><name>sun_path</name></name></expr></argument>, <argument><expr><name><name>srcu</name><operator>-&gt;</operator><name>sun_path</name></name></expr></argument>,

<argument><expr><name>dstsize</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>srclen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstu</name><operator>-&gt;</operator><name>sun_path</name><index>[<expr><name>srclen</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>srclen</name> <operator>+=</operator> <call><name>offsetof</name><argument_list>(<argument><expr>struct <name>sockaddr_un</name></expr></argument>, <argument><expr><name>sun_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>srclen</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>Curl_os400_connect</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>sd</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type> <name>destaddr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>addrlen</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_storage</name></name></type> <name>laddr</name></decl>;</decl_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>sockaddr2ebcdic</name><argument_list>(<argument><expr><operator>&amp;</operator><name>laddr</name></expr></argument>, <argument><expr><name>destaddr</name></expr></argument>, <argument><expr><name>addrlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>connect</name><argument_list>(<argument><expr><name>sd</name></expr></argument>, <argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>laddr</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>Curl_os400_bind</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>sd</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type> <name>localaddr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>addrlen</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_storage</name></name></type> <name>laddr</name></decl>;</decl_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>sockaddr2ebcdic</name><argument_list>(<argument><expr><operator>&amp;</operator><name>laddr</name></expr></argument>, <argument><expr><name>localaddr</name></expr></argument>, <argument><expr><name>addrlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>bind</name><argument_list>(<argument><expr><name>sd</name></expr></argument>, <argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>laddr</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>Curl_os400_sendto</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>sd</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type> <name>buffer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buflen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type> <name>dstaddr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>addrlen</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_storage</name></name></type> <name>laddr</name></decl>;</decl_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>sockaddr2ebcdic</name><argument_list>(<argument><expr><operator>&amp;</operator><name>laddr</name></expr></argument>, <argument><expr><name>dstaddr</name></expr></argument>, <argument><expr><name>addrlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>sendto</name><argument_list>(<argument><expr><name>sd</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>laddr</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>Curl_os400_recvfrom</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>sd</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type> <name>buffer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buflen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type> <name>fromaddr</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type> <name>addrlen</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>rcvlen</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_storage</name></name></type> <name>laddr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>laddrlen</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>laddr</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>fromaddr</name> <operator>||</operator> <operator>!</operator><name>addrlen</name> <operator>||</operator> <operator>*</operator><name>addrlen</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>recvfrom</name><argument_list>(<argument><expr><name>sd</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>fromaddr</name></expr></argument>, <argument><expr><name>addrlen</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>laddr</name><operator>.</operator><name>ss_family</name></name> <operator>=</operator> <name>AF_UNSPEC</name></expr>;</expr_stmt> 

<expr_stmt><expr><name>rcvlen</name> <operator>=</operator> <call><name>recvfrom</name><argument_list>(<argument><expr><name>sd</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>,

<argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>laddr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>laddrlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rcvlen</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>rcvlen</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>laddr</name><operator>.</operator><name>ss_family</name></name> <operator>==</operator> <name>AF_UNSPEC</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>laddrlen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>laddrlen</name> <operator>=</operator> <call><name>sockaddr2ascii</name><argument_list>(<argument><expr><name>fromaddr</name></expr></argument>, <argument><expr><operator>*</operator><name>addrlen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>laddr</name></expr></argument>, <argument><expr><name>laddrlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>laddrlen</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>laddrlen</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><operator>*</operator><name>addrlen</name> <operator>=</operator> <name>laddrlen</name></expr>;</expr_stmt>

<return>return <expr><name>rcvlen</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>Curl_os400_getpeername</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>sd</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>addrlen</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_storage</name></name></type> <name>laddr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>laddrlen</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>laddr</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>retcode</name> <init>= <expr><call><name>getpeername</name><argument_list>(<argument><expr><name>sd</name></expr></argument>, <argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>laddr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>laddrlen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>retcode</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>laddrlen</name> <operator>=</operator> <call><name>sockaddr2ascii</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><operator>*</operator><name>addrlen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>laddr</name></expr></argument>, <argument><expr><name>laddrlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>laddrlen</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>laddrlen</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>addrlen</name> <operator>=</operator> <name>laddrlen</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>retcode</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>Curl_os400_getsockname</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>sd</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>addrlen</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_storage</name></name></type> <name>laddr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>laddrlen</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>laddr</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>retcode</name> <init>= <expr><call><name>getsockname</name><argument_list>(<argument><expr><name>sd</name></expr></argument>, <argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>laddr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>laddrlen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>retcode</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>laddrlen</name> <operator>=</operator> <call><name>sockaddr2ascii</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><operator>*</operator><name>addrlen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>laddr</name></expr></argument>, <argument><expr><name>laddrlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>laddrlen</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>laddrlen</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>addrlen</name> <operator>=</operator> <name>laddrlen</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>retcode</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LIBZ</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>

<name>Curl_os400_zlibVersion</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>set_thread_string</name><argument_list>(<argument><expr><name>LK_ZLIB_VERSION</name></expr></argument>, <argument><expr><call><name>zlibVersion</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>Curl_os400_inflateInit_</name><parameter_list>(<parameter><decl><type><name>z_streamp</name></type> <name>strm</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>version</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stream_size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>z_const</name> <name>char</name> <modifier>*</modifier></type> <name>msgb4</name> <init>= <expr><name><name>strm</name><operator>-&gt;</operator><name>msg</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>inflateInit</name><argument_list>(<argument><expr><name>strm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>strm</name><operator>-&gt;</operator><name>msg</name></name> <operator>!=</operator> <name>msgb4</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>strm</name><operator>-&gt;</operator><name>msg</name></name> <operator>=</operator> <call><name>set_thread_string</name><argument_list>(<argument><expr><name>LK_ZLIB_MSG</name></expr></argument>, <argument><expr><name><name>strm</name><operator>-&gt;</operator><name>msg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>Curl_os400_inflateInit2_</name><parameter_list>(<parameter><decl><type><name>z_streamp</name></type> <name>strm</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>windowBits</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>version</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stream_size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>z_const</name> <name>char</name> <modifier>*</modifier></type> <name>msgb4</name> <init>= <expr><name><name>strm</name><operator>-&gt;</operator><name>msg</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>inflateInit2</name><argument_list>(<argument><expr><name>strm</name></expr></argument>, <argument><expr><name>windowBits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>strm</name><operator>-&gt;</operator><name>msg</name></name> <operator>!=</operator> <name>msgb4</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>strm</name><operator>-&gt;</operator><name>msg</name></name> <operator>=</operator> <call><name>set_thread_string</name><argument_list>(<argument><expr><name>LK_ZLIB_MSG</name></expr></argument>, <argument><expr><name><name>strm</name><operator>-&gt;</operator><name>msg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>Curl_os400_inflate</name><parameter_list>(<parameter><decl><type><name>z_streamp</name></type> <name>strm</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flush</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>z_const</name> <name>char</name> <modifier>*</modifier></type> <name>msgb4</name> <init>= <expr><name><name>strm</name><operator>-&gt;</operator><name>msg</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>inflate</name><argument_list>(<argument><expr><name>strm</name></expr></argument>, <argument><expr><name>flush</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>strm</name><operator>-&gt;</operator><name>msg</name></name> <operator>!=</operator> <name>msgb4</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>strm</name><operator>-&gt;</operator><name>msg</name></name> <operator>=</operator> <call><name>set_thread_string</name><argument_list>(<argument><expr><name>LK_ZLIB_MSG</name></expr></argument>, <argument><expr><name><name>strm</name><operator>-&gt;</operator><name>msg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>Curl_os400_inflateEnd</name><parameter_list>(<parameter><decl><type><name>z_streamp</name></type> <name>strm</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>z_const</name> <name>char</name> <modifier>*</modifier></type> <name>msgb4</name> <init>= <expr><name><name>strm</name><operator>-&gt;</operator><name>msg</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>inflateEnd</name><argument_list>(<argument><expr><name>strm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>strm</name><operator>-&gt;</operator><name>msg</name></name> <operator>!=</operator> <name>msgb4</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>strm</name><operator>-&gt;</operator><name>msg</name></name> <operator>=</operator> <call><name>set_thread_string</name><argument_list>(<argument><expr><name>LK_ZLIB_MSG</name></expr></argument>, <argument><expr><name><name>strm</name><operator>-&gt;</operator><name>msg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
