<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\curl-analysis\_cppstats\curl\packages\vms\report_openssl_version.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dlfcn.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;openssl/opensslv.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;openssl/crypto.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;descrip.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libclidef.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stsdef.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>

<function_decl><type><name>unsigned</name> <name>long</name></type> <name>LIB$SET_SYMBOL</name><parameter_list>(

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>dsc$descriptor_s</name></name> <modifier>*</modifier></type> <name>symbol</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>dsc$descriptor_s</name></name> <modifier>*</modifier></type> <name>value</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>long</name> <modifier>*</modifier></type> <name>table_type</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type> <name>argv</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type> <name>libptr</name></decl>;</decl_stmt>

<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> (<modifier>*</modifier><name>ssl_version</name>)<parameter_list>(<parameter><decl><type><name>int</name></type> <name>t</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>version</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"report_openssl_version filename"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>libptr</name> <operator>=</operator> <call><name>dlopen</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ssl_version</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator> <call>(<modifier>*</modifier>)<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></call><operator>)</operator><call><name>dlsym</name><argument_list>(<argument><expr><name>libptr</name></expr></argument>, <argument><expr><literal type="string">"SSLeay_version"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>ssl_version</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ssl_version</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator> <call>(<modifier>*</modifier>)<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></call><operator>)</operator><call><name>dlsym</name><argument_list>(<argument><expr><name>libptr</name></expr></argument>, <argument><expr><literal type="string">"ssleay_version"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>ssl_version</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ssl_version</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator> <call>(<modifier>*</modifier>)<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></call><operator>)</operator><call><name>dlsym</name><argument_list>(<argument><expr><name>libptr</name></expr></argument>, <argument><expr><literal type="string">"SSLEAY_VERSION"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>dlclose</name><argument_list>(<argument><expr><name>libptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>ssl_version</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"Unable to lookup version of OpenSSL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>version</name> <operator>=</operator> <call><name>ssl_version</name><argument_list>(<argument><expr><name>SSLEAY_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>dsc$descriptor_s</name></name></type> <name>symbol_dsc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>dsc$descriptor_s</name></name></type> <name>value_dsc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>long</name></type> <name>table_type</name> <init>= <expr><name>LIB$K_CLI_LOCAL_SYM</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>symbol_dsc</name><operator>.</operator><name>dsc$a_pointer</name></name> <operator>=</operator> <name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>symbol_dsc</name><operator>.</operator><name>dsc$w_length</name></name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>symbol_dsc</name><operator>.</operator><name>dsc$b_dtype</name></name> <operator>=</operator> <name>DSC$K_DTYPE_T</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>symbol_dsc</name><operator>.</operator><name>dsc$b_class</name></name> <operator>=</operator> <name>DSC$K_CLASS_S</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>value_dsc</name><operator>.</operator><name>dsc$a_pointer</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>version</name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>value_dsc</name><operator>.</operator><name>dsc$w_length</name></name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>value_dsc</name><operator>.</operator><name>dsc$b_dtype</name></name> <operator>=</operator> <name>DSC$K_DTYPE_T</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>value_dsc</name><operator>.</operator><name>dsc$b_class</name></name> <operator>=</operator> <name>DSC$K_CLASS_S</name></expr>;</expr_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>LIB$SET_SYMBOL</name><argument_list>(<argument><expr><operator>&amp;</operator><name>symbol_dsc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value_dsc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>table_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>$VMS_STATUS_SUCCESS</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
