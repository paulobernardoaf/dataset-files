<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\curl-analysis\_cppstats\curl\tests\libtest\testtrace.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"test.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"testutil.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"testtrace.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memdebug.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name><name>struct</name> <name>libtest_trace_cfg</name></name></type> <name>libtest_debug_config</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>time_t</name></type> <name>epoch_offset</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>known_offset</name></decl>;</decl_stmt> 

<function><type><specifier>static</specifier>

<name>void</name></type> <name>libtest_debug_dump</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>timebuf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nohex</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>c</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>width</name> <init>= <expr><literal type="number">0x10</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>nohex</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>width</name> <operator>=</operator> <literal type="number">0x40</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">"%s%s, %zu bytes (0x%zx)\n"</literal></expr></argument>, <argument><expr><name>timebuf</name></expr></argument>, <argument><expr><name>text</name></expr></argument>,

<argument><expr><name>size</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <name>width</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">"%04zx: "</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>nohex</name></expr>)</condition> <block>{<block_content>

<for>for<control>(<init><expr><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if<condition>(<expr><name>i</name> <operator>+</operator> <name>c</name> <operator>&lt;</operator> <name>size</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">"%02x "</literal></expr></argument>, <argument><expr><name><name>ptr</name><index>[<expr><name>i</name> <operator>+</operator> <name>c</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

<for>for<control>(<init><expr><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>(</operator><name>c</name> <operator>&lt;</operator> <name>width</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>i</name> <operator>+</operator> <name>c</name> <operator>&lt;</operator> <name>size</name><operator>)</operator></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>nohex</name> <operator>&amp;&amp;</operator>

<operator>(</operator><name>i</name> <operator>+</operator> <name>c</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>size</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>ptr</name><index>[<expr><name>i</name> <operator>+</operator> <name>c</name></expr>]</index></name> <operator>==</operator> <literal type="number">0x0D</literal><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>ptr</name><index>[<expr><name>i</name> <operator>+</operator> <name>c</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x0A</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>i</name> <operator>+=</operator> <operator>(</operator><name>c</name> <operator>+</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name><operator>)</operator></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">"%c"</literal></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><operator>(</operator><name><name>ptr</name><index>[<expr><name>i</name> <operator>+</operator> <name>c</name></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">0x20</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>ptr</name><index>[<expr><name>i</name> <operator>+</operator> <name>c</name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0x80</literal><operator>)</operator><operator>)</operator></expr> ?</condition><then>

<expr><name><name>ptr</name><index>[<expr><name>i</name> <operator>+</operator> <name>c</name></expr>]</index></name></expr> </then><else>: <expr><literal type="char">'.'</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>nohex</name> <operator>&amp;&amp;</operator>

<operator>(</operator><name>i</name> <operator>+</operator> <name>c</name> <operator>+</operator> <literal type="number">2</literal> <operator>&lt;</operator> <name>size</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>ptr</name><index>[<expr><name>i</name> <operator>+</operator> <name>c</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x0D</literal><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>ptr</name><index>[<expr><name>i</name> <operator>+</operator> <name>c</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x0A</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>i</name> <operator>+=</operator> <operator>(</operator><name>c</name> <operator>+</operator> <literal type="number">3</literal> <operator>-</operator> <name>width</name><operator>)</operator></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>fputc</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></for>

<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>libtest_debug_cb</name><parameter_list>(<parameter><decl><type><name>CURL</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>, <parameter><decl><type><name>curl_infotype</name></type> <name>type</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>libtest_trace_cfg</name></name> <modifier>*</modifier></type><name>trace_cfg</name> <init>= <expr><name>userp</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>tv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>timebuf</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>timestr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>time_t</name></type> <name>secs</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>handle</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>timebuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>timestr</name> <operator>=</operator> <operator>&amp;</operator><name><name>timebuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>trace_cfg</name><operator>-&gt;</operator><name>tracetime</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>now</name></decl>;</decl_stmt>

<expr_stmt><expr><name>tv</name> <operator>=</operator> <call><name>tutil_tvnow</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>known_offset</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>epoch_offset</name> <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>tv</name><operator>.</operator><name>tv_sec</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>known_offset</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>secs</name> <operator>=</operator> <name>epoch_offset</name> <operator>+</operator> <name><name>tv</name><operator>.</operator><name>tv_sec</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>now</name> <operator>=</operator> <call><name>localtime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>secs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>msnprintf</name><argument_list>(<argument><expr><name>timebuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>timebuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%02d:%02d:%02d.%06ld "</literal></expr></argument>,

<argument><expr><name><name>now</name><operator>-&gt;</operator><name>tm_hour</name></name></expr></argument>, <argument><expr><name><name>now</name><operator>-&gt;</operator><name>tm_min</name></name></expr></argument>, <argument><expr><name><name>now</name><operator>-&gt;</operator><name>tm_sec</name></name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><name><name>tv</name><operator>.</operator><name>tv_usec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<switch>switch<condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>CURLINFO_TEXT</name></expr>:</case>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s== Info: %s"</literal></expr></argument>, <argument><expr><name>timestr</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<default>default:</default> 

<return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><name>CURLINFO_HEADER_OUT</name></expr>:</case>

<expr_stmt><expr><name>text</name> <operator>=</operator> <literal type="string">"=&gt; Send header"</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>CURLINFO_DATA_OUT</name></expr>:</case>

<expr_stmt><expr><name>text</name> <operator>=</operator> <literal type="string">"=&gt; Send data"</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>CURLINFO_SSL_DATA_OUT</name></expr>:</case>

<expr_stmt><expr><name>text</name> <operator>=</operator> <literal type="string">"=&gt; Send SSL data"</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>CURLINFO_HEADER_IN</name></expr>:</case>

<expr_stmt><expr><name>text</name> <operator>=</operator> <literal type="string">"&lt;= Recv header"</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>CURLINFO_DATA_IN</name></expr>:</case>

<expr_stmt><expr><name>text</name> <operator>=</operator> <literal type="string">"&lt;= Recv data"</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>CURLINFO_SSL_DATA_IN</name></expr>:</case>

<expr_stmt><expr><name>text</name> <operator>=</operator> <literal type="string">"&lt;= Recv SSL data"</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>libtest_debug_dump</name><argument_list>(<argument><expr><name>timebuf</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><name>stderr</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name><name>trace_cfg</name><operator>-&gt;</operator><name>nohex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

</unit>
