<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\curl-analysis\_cppstats\curl\tests\libtest\lib1560.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"test.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"testutil.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"warnless.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memdebug.h"</cpp:file></cpp:include> 

<struct>struct <name>part</name> <block>{

<decl_stmt><decl><type><name>CURLUPart</name></type> <name>part</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <name>int</name></type> <name>checkparts</name><parameter_list>(<parameter><decl><type><name>CURLU</name> <modifier>*</modifier></type><name>u</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>wanted</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>getflags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CURLUcode</name></type> <name>rc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>bufp</name> <init>= <expr><operator>&amp;</operator><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>part</name></name></type> <name><name>parts</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{<expr><name>CURLUPART_SCHEME</name></expr>, <expr><literal type="string">"scheme"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>CURLUPART_USER</name></expr>, <expr><literal type="string">"user"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>CURLUPART_PASSWORD</name></expr>, <expr><literal type="string">"password"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>CURLUPART_OPTIONS</name></expr>, <expr><literal type="string">"options"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>CURLUPART_HOST</name></expr>, <expr><literal type="string">"host"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>CURLUPART_PORT</name></expr>, <expr><literal type="string">"port"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>CURLUPART_PATH</name></expr>, <expr><literal type="string">"path"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>CURLUPART_QUERY</name></expr>, <expr><literal type="string">"query"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>CURLUPART_FRAGMENT</name></expr>, <expr><literal type="string">"fragment"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>parts</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>n</name></decl>;</decl_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>curl_url_get</name><argument_list>(<argument><expr><name>u</name></expr></argument>, <argument><expr><name><name>parts</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>part</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>getflags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>rc</name> <operator>&amp;&amp;</operator> <name>p</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msnprintf</name><argument_list>(<argument><expr><name>bufp</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="string">"%s%s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>?</condition><then><expr><literal type="string">" | "</literal></expr></then><else>:<expr><literal type="string">""</literal></expr></else></ternary></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msnprintf</name><argument_list>(<argument><expr><name>bufp</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="string">"%s[%d]"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>?</condition><then><expr><literal type="string">" | "</literal></expr></then><else>:<expr><literal type="string">""</literal></expr></else></ternary></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>bufp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bufp</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>-=</operator> <name>n</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>curl_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if<condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>wanted</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"in: %s\nwanted: %s\ngot: %s\n"</literal></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>wanted</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<struct>struct <name>redircase</name> <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>in</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>set</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>out</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>urlflags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>setflags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CURLUcode</name></type> <name>ucode</name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>setcase</name> <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>in</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>set</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>out</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>urlflags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>setflags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CURLUcode</name></type> <name>ucode</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>CURLUcode</name></type> <name>pcode</name></decl>;</decl_stmt> 

}</block>;</struct>

<struct>struct <name>testcase</name> <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>in</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>out</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>urlflags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>getflags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CURLUcode</name></type> <name>ucode</name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>urltestcase</name> <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>in</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>out</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>urlflags</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>getflags</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>CURLUcode</name></type> <name>ucode</name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>querycase</name> <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>in</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>q</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>out</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>urlflags</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>qflags</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>CURLUcode</name></type> <name>ucode</name></decl>;</decl_stmt>

}</block>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>testcase</name></name></type> <name><name>get_parts_list</name><index>[]</index></name> <init>=<expr><block>{

<expr><block>{<expr><literal type="string">"user:moo@ftp.example.com/color/#green?no-black"</literal></expr>,

<expr><literal type="string">"ftp | user | moo | [13] | ftp.example.com | [15] | /color/ | [16] | "</literal>

<literal type="string">"green?no-black"</literal></expr>,

<expr><name>CURLU_GUESS_SCHEME</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CURLUE_OK</name></expr> }</block></expr>,

<expr><block>{<expr><literal type="string">"ftp.user:moo@example.com/color/#green?no-black"</literal></expr>,

<expr><literal type="string">"http | ftp.user | moo | [13] | example.com | [15] | /color/ | [16] | "</literal>

<literal type="string">"green?no-black"</literal></expr>,

<expr><name>CURLU_GUESS_SCHEME</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CURLUE_OK</name></expr> }</block></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><literal type="string">"file:/C:\\programs\\foo"</literal></expr>,

<expr><literal type="string">"file | [11] | [12] | [13] | [14] | [15] | C:\\programs\\foo | [16] | [17]"</literal></expr>,

<expr><name>CURLU_DEFAULT_SCHEME</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CURLUE_OK</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"file://C:\\programs\\foo"</literal></expr>,

<expr><literal type="string">"file | [11] | [12] | [13] | [14] | [15] | C:\\programs\\foo | [16] | [17]"</literal></expr>,

<expr><name>CURLU_DEFAULT_SCHEME</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CURLUE_OK</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"file:///C:\\programs\\foo"</literal></expr>,

<expr><literal type="string">"file | [11] | [12] | [13] | [14] | [15] | C:\\programs\\foo | [16] | [17]"</literal></expr>,

<expr><name>CURLU_DEFAULT_SCHEME</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CURLUE_OK</name></expr>}</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{<expr><literal type="string">"https://example.com/color/#green?no-black"</literal></expr>,

<expr><literal type="string">"https | [11] | [12] | [13] | example.com | [15] | /color/ | [16] | "</literal>

<literal type="string">"green?no-black"</literal></expr>,

<expr><name>CURLU_DEFAULT_SCHEME</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CURLUE_OK</name></expr> }</block></expr>,

<expr><block>{<expr><literal type="string">"https://example.com/color/#green#no-black"</literal></expr>,

<expr><literal type="string">"https | [11] | [12] | [13] | example.com | [15] | /color/ | [16] | "</literal>

<literal type="string">"green#no-black"</literal></expr>,

<expr><name>CURLU_DEFAULT_SCHEME</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CURLUE_OK</name></expr> }</block></expr>,

<expr><block>{<expr><literal type="string">"https://example.com/color/?green#no-black"</literal></expr>,

<expr><literal type="string">"https | [11] | [12] | [13] | example.com | [15] | /color/ | green | "</literal>

<literal type="string">"no-black"</literal></expr>,

<expr><name>CURLU_DEFAULT_SCHEME</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CURLUE_OK</name></expr> }</block></expr>,

<expr><block>{<expr><literal type="string">"https://example.com/#color/?green#no-black"</literal></expr>,

<expr><literal type="string">"https | [11] | [12] | [13] | example.com | [15] | / | [16] | "</literal>

<literal type="string">"color/?green#no-black"</literal></expr>,

<expr><name>CURLU_DEFAULT_SCHEME</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CURLUE_OK</name></expr> }</block></expr>,

<expr><block>{<expr><literal type="string">"https://example.#com/color/?green#no-black"</literal></expr>,

<expr><literal type="string">"https | [11] | [12] | [13] | example. | [15] | / | [16] | "</literal>

<literal type="string">"com/color/?green#no-black"</literal></expr>,

<expr><name>CURLU_DEFAULT_SCHEME</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CURLUE_OK</name></expr> }</block></expr>,

<expr><block>{<expr><literal type="string">"http://[ab.be:1]/x"</literal></expr>, <expr><literal type="string">""</literal></expr>,

<expr><name>CURLU_DEFAULT_SCHEME</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CURLUE_MALFORMED_INPUT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"http://[ab.be]/x"</literal></expr>, <expr><literal type="string">""</literal></expr>,

<expr><name>CURLU_DEFAULT_SCHEME</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CURLUE_MALFORMED_INPUT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"http://a:b@/x"</literal></expr>, <expr><literal type="string">""</literal></expr>,

<expr><name>CURLU_DEFAULT_SCHEME</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CURLUE_NO_HOST</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"boing:80"</literal></expr>,

<expr><literal type="string">"https | [11] | [12] | [13] | boing | 80 | / | [16] | [17]"</literal></expr>,

<expr><name>CURLU_DEFAULT_SCHEME</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CURLUE_OK</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"http://[fd00:a41::50]:8080"</literal></expr>,

<expr><literal type="string">"http | [11] | [12] | [13] | [fd00:a41::50] | 8080 | / | [16] | [17]"</literal></expr>,

<expr><name>CURLU_DEFAULT_SCHEME</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CURLUE_OK</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"http://[fd00:a41::50]/"</literal></expr>,

<expr><literal type="string">"http | [11] | [12] | [13] | [fd00:a41::50] | [15] | / | [16] | [17]"</literal></expr>,

<expr><name>CURLU_DEFAULT_SCHEME</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CURLUE_OK</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"http://[fd00:a41::50]"</literal></expr>,

<expr><literal type="string">"http | [11] | [12] | [13] | [fd00:a41::50] | [15] | / | [16] | [17]"</literal></expr>,

<expr><name>CURLU_DEFAULT_SCHEME</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CURLUE_OK</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"https://[::1%252]:1234"</literal></expr>,

<expr><literal type="string">"https | [11] | [12] | [13] | [::1] | 1234 | / | [16] | [17]"</literal></expr>,

<expr><name>CURLU_DEFAULT_SCHEME</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CURLUE_OK</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"https://[fe80::20c:29ff:fe9c:409b%eth0]:1234"</literal></expr>,

<expr><literal type="string">"https | [11] | [12] | [13] | [fe80::20c:29ff:fe9c:409b] | 1234 "</literal>

<literal type="string">"| / | [16] | [17]"</literal></expr>,

<expr><name>CURLU_DEFAULT_SCHEME</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CURLUE_OK</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"https://127.0.0.1:443"</literal></expr>,

<expr><literal type="string">"https | [11] | [12] | [13] | 127.0.0.1 | [15] | / | [16] | [17]"</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><name>CURLU_NO_DEFAULT_PORT</name></expr>, <expr><name>CURLUE_OK</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"http://%3a:%3a@ex%0ample/%3f+?+%3f+%23#+%23%3f%g7"</literal></expr>,

<expr><literal type="string">"http | : | : | [13] | [6] | [15] | /?+ | ? #| +#?%g7"</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><name>CURLU_URLDECODE</name></expr>, <expr><name>CURLUE_OK</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"http://%3a:%3a@ex%0ample/%3f?%3f%35#%35%3f%g7"</literal></expr>,

<expr><literal type="string">"http | %3a | %3a | [13] | ex%0ample | [15] | /%3f | %3f%35 | %35%3f%g7"</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CURLUE_OK</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"http://HO0_-st%41/"</literal></expr>,

<expr><literal type="string">"http | [11] | [12] | [13] | HO0_-st%41 | [15] | / | [16] | [17]"</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CURLUE_OK</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"file://hello.html"</literal></expr>,

<expr><literal type="string">""</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CURLUE_MALFORMED_INPUT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"http://HO0_-st/"</literal></expr>,

<expr><literal type="string">"http | [11] | [12] | [13] | HO0_-st | [15] | / | [16] | [17]"</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CURLUE_OK</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"imap://user:pass;option@server/path"</literal></expr>,

<expr><literal type="string">"imap | user | pass | option | server | [15] | /path | [16] | [17]"</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CURLUE_OK</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"http://user:pass;option@server/path"</literal></expr>,

<expr><literal type="string">"http | user | pass;option | [13] | server | [15] | /path | [16] | [17]"</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CURLUE_OK</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"file:/hello.html"</literal></expr>,

<expr><literal type="string">"file | [11] | [12] | [13] | [14] | [15] | /hello.html | [16] | [17]"</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CURLUE_OK</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"file://127.0.0.1/hello.html"</literal></expr>,

<expr><literal type="string">"file | [11] | [12] | [13] | [14] | [15] | /hello.html | [16] | [17]"</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CURLUE_OK</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"file:////hello.html"</literal></expr>,

<expr><literal type="string">"file | [11] | [12] | [13] | [14] | [15] | //hello.html | [16] | [17]"</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CURLUE_OK</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"file:///hello.html"</literal></expr>,

<expr><literal type="string">"file | [11] | [12] | [13] | [14] | [15] | /hello.html | [16] | [17]"</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CURLUE_OK</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"https://127.0.0.1"</literal></expr>,

<expr><literal type="string">"https | [11] | [12] | [13] | 127.0.0.1 | 443 | / | [16] | [17]"</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><name>CURLU_DEFAULT_PORT</name></expr>, <expr><name>CURLUE_OK</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"https://127.0.0.1"</literal></expr>,

<expr><literal type="string">"https | [11] | [12] | [13] | 127.0.0.1 | [15] | / | [16] | [17]"</literal></expr>,

<expr><name>CURLU_DEFAULT_SCHEME</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CURLUE_OK</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"https://[::1]:1234"</literal></expr>,

<expr><literal type="string">"https | [11] | [12] | [13] | [::1] | 1234 | / | [16] | [17]"</literal></expr>,

<expr><name>CURLU_DEFAULT_SCHEME</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CURLUE_OK</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"https://127abc.com"</literal></expr>,

<expr><literal type="string">"https | [11] | [12] | [13] | 127abc.com | [15] | / | [16] | [17]"</literal></expr>,

<expr><name>CURLU_DEFAULT_SCHEME</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CURLUE_OK</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"https:// example.com?check"</literal></expr>,

<expr><literal type="string">""</literal></expr>,

<expr><name>CURLU_DEFAULT_SCHEME</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CURLUE_MALFORMED_INPUT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"https://e x a m p l e.com?check"</literal></expr>,

<expr><literal type="string">""</literal></expr>,

<expr><name>CURLU_DEFAULT_SCHEME</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CURLUE_MALFORMED_INPUT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"https://example.com?check"</literal></expr>,

<expr><literal type="string">"https | [11] | [12] | [13] | example.com | [15] | / | check | [17]"</literal></expr>,

<expr><name>CURLU_DEFAULT_SCHEME</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CURLUE_OK</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"https://example.com:65536"</literal></expr>,

<expr><literal type="string">""</literal></expr>,

<expr><name>CURLU_DEFAULT_SCHEME</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CURLUE_BAD_PORT_NUMBER</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"https://example.com:0#moo"</literal></expr>,

<expr><literal type="string">""</literal></expr>,

<expr><name>CURLU_DEFAULT_SCHEME</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CURLUE_BAD_PORT_NUMBER</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"https://example.com:01#moo"</literal></expr>,

<expr><literal type="string">"https | [11] | [12] | [13] | example.com | 1 | / | "</literal>

<literal type="string">"[16] | moo"</literal></expr>,

<expr><name>CURLU_DEFAULT_SCHEME</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CURLUE_OK</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"https://example.com:1#moo"</literal></expr>,

<expr><literal type="string">"https | [11] | [12] | [13] | example.com | 1 | / | "</literal>

<literal type="string">"[16] | moo"</literal></expr>,

<expr><name>CURLU_DEFAULT_SCHEME</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CURLUE_OK</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"http://example.com#moo"</literal></expr>,

<expr><literal type="string">"http | [11] | [12] | [13] | example.com | [15] | / | "</literal>

<literal type="string">"[16] | moo"</literal></expr>,

<expr><name>CURLU_DEFAULT_SCHEME</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CURLUE_OK</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"http://example.com"</literal></expr>,

<expr><literal type="string">"http | [11] | [12] | [13] | example.com | [15] | / | "</literal>

<literal type="string">"[16] | [17]"</literal></expr>,

<expr><name>CURLU_DEFAULT_SCHEME</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CURLUE_OK</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"http://example.com/path/html"</literal></expr>,

<expr><literal type="string">"http | [11] | [12] | [13] | example.com | [15] | /path/html | "</literal>

<literal type="string">"[16] | [17]"</literal></expr>,

<expr><name>CURLU_DEFAULT_SCHEME</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CURLUE_OK</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"http://example.com/path/html?query=name"</literal></expr>,

<expr><literal type="string">"http | [11] | [12] | [13] | example.com | [15] | /path/html | "</literal>

<literal type="string">"query=name | [17]"</literal></expr>,

<expr><name>CURLU_DEFAULT_SCHEME</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CURLUE_OK</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"http://example.com/path/html?query=name#anchor"</literal></expr>,

<expr><literal type="string">"http | [11] | [12] | [13] | example.com | [15] | /path/html | "</literal>

<literal type="string">"query=name | anchor"</literal></expr>,

<expr><name>CURLU_DEFAULT_SCHEME</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CURLUE_OK</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"http://example.com:1234/path/html?query=name#anchor"</literal></expr>,

<expr><literal type="string">"http | [11] | [12] | [13] | example.com | 1234 | /path/html | "</literal>

<literal type="string">"query=name | anchor"</literal></expr>,

<expr><name>CURLU_DEFAULT_SCHEME</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CURLUE_OK</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"http:///user:password@example.com:1234/path/html?query=name#anchor"</literal></expr>,

<expr><literal type="string">"http | user | password | [13] | example.com | 1234 | /path/html | "</literal>

<literal type="string">"query=name | anchor"</literal></expr>,

<expr><name>CURLU_DEFAULT_SCHEME</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CURLUE_OK</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"https://user:password@example.com:1234/path/html?query=name#anchor"</literal></expr>,

<expr><literal type="string">"https | user | password | [13] | example.com | 1234 | /path/html | "</literal>

<literal type="string">"query=name | anchor"</literal></expr>,

<expr><name>CURLU_DEFAULT_SCHEME</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CURLUE_OK</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"http://user:password@example.com:1234/path/html?query=name#anchor"</literal></expr>,

<expr><literal type="string">"http | user | password | [13] | example.com | 1234 | /path/html | "</literal>

<literal type="string">"query=name | anchor"</literal></expr>,

<expr><name>CURLU_DEFAULT_SCHEME</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CURLUE_OK</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"http:/user:password@example.com:1234/path/html?query=name#anchor"</literal></expr>,

<expr><literal type="string">"http | user | password | [13] | example.com | 1234 | /path/html | "</literal>

<literal type="string">"query=name | anchor"</literal></expr>,

<expr><name>CURLU_DEFAULT_SCHEME</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CURLUE_OK</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"http:////user:password@example.com:1234/path/html?query=name#anchor"</literal></expr>,

<expr><literal type="string">""</literal></expr>,

<expr><name>CURLU_DEFAULT_SCHEME</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CURLUE_MALFORMED_INPUT</name></expr>}</block></expr>,

<expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CURLUE_OK</name></expr>}</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>urltestcase</name></name></type> <name><name>get_url_list</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{<expr><literal type="string">"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA://hostname/path"</literal></expr>,

<expr><literal type="string">"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa://hostname/path"</literal></expr>,

<expr><name>CURLU_NON_SUPPORT_SCHEME</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CURLUE_OK</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA://hostname/path"</literal></expr>,

<expr><literal type="string">""</literal></expr>,

<expr><name>CURLU_NON_SUPPORT_SCHEME</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CURLUE_MALFORMED_INPUT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"https://[fe80::20c:29ff:fe9c:409b%]:1234"</literal></expr>,

<expr><literal type="string">""</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CURLUE_MALFORMED_INPUT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"https://[fe80::20c:29ff:fe9c:409b%25]:1234"</literal></expr>,

<expr><literal type="string">"https://[fe80::20c:29ff:fe9c:409b%2525]:1234/"</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CURLUE_OK</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"https://[fe80::20c:29ff:fe9c:409b%eth0]:1234"</literal></expr>,

<expr><literal type="string">"https://[fe80::20c:29ff:fe9c:409b%25eth0]:1234/"</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CURLUE_OK</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"https://[::%25fakeit]/moo"</literal></expr>,

<expr><literal type="string">"https://[::%25fakeit]/moo"</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CURLUE_OK</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"smtp.example.com/path/html"</literal></expr>,

<expr><literal type="string">"smtp://smtp.example.com/path/html"</literal></expr>,

<expr><name>CURLU_GUESS_SCHEME</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CURLUE_OK</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"https.example.com/path/html"</literal></expr>,

<expr><literal type="string">"http://https.example.com/path/html"</literal></expr>,

<expr><name>CURLU_GUESS_SCHEME</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CURLUE_OK</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"dict.example.com/path/html"</literal></expr>,

<expr><literal type="string">"dict://dict.example.com/path/html"</literal></expr>,

<expr><name>CURLU_GUESS_SCHEME</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CURLUE_OK</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"pop3.example.com/path/html"</literal></expr>,

<expr><literal type="string">"pop3://pop3.example.com/path/html"</literal></expr>,

<expr><name>CURLU_GUESS_SCHEME</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CURLUE_OK</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"ldap.example.com/path/html"</literal></expr>,

<expr><literal type="string">"ldap://ldap.example.com/path/html"</literal></expr>,

<expr><name>CURLU_GUESS_SCHEME</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CURLUE_OK</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"imap.example.com/path/html"</literal></expr>,

<expr><literal type="string">"imap://imap.example.com/path/html"</literal></expr>,

<expr><name>CURLU_GUESS_SCHEME</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CURLUE_OK</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"ftp.example.com/path/html"</literal></expr>,

<expr><literal type="string">"ftp://ftp.example.com/path/html"</literal></expr>,

<expr><name>CURLU_GUESS_SCHEME</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CURLUE_OK</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"example.com/path/html"</literal></expr>,

<expr><literal type="string">"http://example.com/path/html"</literal></expr>,

<expr><name>CURLU_GUESS_SCHEME</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CURLUE_OK</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"HTTP://test/"</literal></expr>, <expr><literal type="string">"http://test/"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CURLUE_OK</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"http://HO0_-st..~./"</literal></expr>, <expr><literal type="string">"http://HO0_-st..~./"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CURLUE_OK</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"http:/@example.com: 123/"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CURLUE_BAD_PORT_NUMBER</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"http:/@example.com:123 /"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CURLUE_BAD_PORT_NUMBER</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"http:/@example.com:123a/"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CURLUE_BAD_PORT_NUMBER</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"http://host/file\r"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CURLUE_MALFORMED_INPUT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"http://host/file\n\x03"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CURLUE_MALFORMED_INPUT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"htt\x02://host/file"</literal></expr>, <expr><literal type="string">""</literal></expr>,

<expr><name>CURLU_NON_SUPPORT_SCHEME</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CURLUE_MALFORMED_INPUT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">" http://host/file"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CURLUE_MALFORMED_INPUT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"imap://user:pass;word@host/file"</literal></expr>,

<expr><literal type="string">"imap://user:pass;word@host/file"</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CURLUE_OK</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"http://user:pass;word@host/file"</literal></expr>,

<expr><literal type="string">"http://user:pass;word@host/file"</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CURLUE_OK</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"file:///file.txt#moo"</literal></expr>,

<expr><literal type="string">"file:///file.txt#moo"</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CURLUE_OK</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"file:////file.txt"</literal></expr>,

<expr><literal type="string">"file:////file.txt"</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CURLUE_OK</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"file:///file.txt"</literal></expr>,

<expr><literal type="string">"file:///file.txt"</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CURLUE_OK</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"file:./"</literal></expr>,

<expr><literal type="string">"file://"</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CURLUE_MALFORMED_INPUT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"http://example.com/hello/../here"</literal></expr>,

<expr><literal type="string">"http://example.com/hello/../here"</literal></expr>,

<expr><name>CURLU_PATH_AS_IS</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CURLUE_OK</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"http://example.com/hello/../here"</literal></expr>,

<expr><literal type="string">"http://example.com/here"</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CURLUE_OK</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"http://example.com:80"</literal></expr>,

<expr><literal type="string">"http://example.com/"</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><name>CURLU_NO_DEFAULT_PORT</name></expr>, <expr><name>CURLUE_OK</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"tp://example.com/path/html"</literal></expr>,

<expr><literal type="string">""</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CURLUE_UNSUPPORTED_SCHEME</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"http://hello:fool@example.com"</literal></expr>,

<expr><literal type="string">""</literal></expr>,

<expr><name>CURLU_DISALLOW_USER</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CURLUE_USER_NOT_ALLOWED</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"http:/@example.com:123"</literal></expr>,

<expr><literal type="string">"http://example.com:123/"</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CURLUE_OK</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"http:/:password@example.com"</literal></expr>,

<expr><literal type="string">"http://:password@example.com/"</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CURLUE_OK</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"http://user@example.com?#"</literal></expr>,

<expr><literal type="string">"http://user@example.com/"</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CURLUE_OK</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"http://user@example.com?"</literal></expr>,

<expr><literal type="string">"http://user@example.com/"</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CURLUE_OK</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"http://user@example.com#anchor"</literal></expr>,

<expr><literal type="string">"http://user@example.com/#anchor"</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CURLUE_OK</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"example.com/path/html"</literal></expr>,

<expr><literal type="string">"https://example.com/path/html"</literal></expr>,

<expr><name>CURLU_DEFAULT_SCHEME</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CURLUE_OK</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"example.com/path/html"</literal></expr>,

<expr><literal type="string">""</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CURLUE_MALFORMED_INPUT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"http://user:password@example.com:1234/path/html?query=name#anchor"</literal></expr>,

<expr><literal type="string">"http://user:password@example.com:1234/path/html?query=name#anchor"</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CURLUE_OK</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"http://example.com:1234/path/html?query=name#anchor"</literal></expr>,

<expr><literal type="string">"http://example.com:1234/path/html?query=name#anchor"</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CURLUE_OK</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"http://example.com/path/html?query=name#anchor"</literal></expr>,

<expr><literal type="string">"http://example.com/path/html?query=name#anchor"</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CURLUE_OK</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"http://example.com/path/html?query=name"</literal></expr>,

<expr><literal type="string">"http://example.com/path/html?query=name"</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CURLUE_OK</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"http://example.com/path/html"</literal></expr>,

<expr><literal type="string">"http://example.com/path/html"</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CURLUE_OK</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"tp://example.com/path/html"</literal></expr>,

<expr><literal type="string">"tp://example.com/path/html"</literal></expr>,

<expr><name>CURLU_NON_SUPPORT_SCHEME</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CURLUE_OK</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"custom-scheme://host?expected=test-good"</literal></expr>,

<expr><literal type="string">"custom-scheme://host/?expected=test-good"</literal></expr>,

<expr><name>CURLU_NON_SUPPORT_SCHEME</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CURLUE_OK</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"custom-scheme://?expected=test-bad"</literal></expr>,

<expr><literal type="string">""</literal></expr>,

<expr><name>CURLU_NON_SUPPORT_SCHEME</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CURLUE_MALFORMED_INPUT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"custom-scheme://?expected=test-new-good"</literal></expr>,

<expr><literal type="string">"custom-scheme:///?expected=test-new-good"</literal></expr>,

<expr><name>CURLU_NON_SUPPORT_SCHEME</name> <operator>|</operator> <name>CURLU_NO_AUTHORITY</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CURLUE_OK</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"custom-scheme://host?expected=test-still-good"</literal></expr>,

<expr><literal type="string">"custom-scheme://host/?expected=test-still-good"</literal></expr>,

<expr><name>CURLU_NON_SUPPORT_SCHEME</name> <operator>|</operator> <name>CURLU_NO_AUTHORITY</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CURLUE_OK</name></expr>}</block></expr>,

<expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>checkurl</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>url</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Wanted: %s\nGot : %s\n"</literal></expr></argument>,

<argument><expr><name>out</name></expr></argument>, <argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>setcase</name></name></type> <name><name>set_parts_list</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{<expr><literal type="string">"https://example.com/"</literal></expr>,

<expr><literal type="string">"scheme=bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbc,"</literal></expr>,

<expr><literal type="string">"https://example.com/"</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><name>CURLU_NON_SUPPORT_SCHEME</name></expr>, <expr><name>CURLUE_OK</name></expr>, <expr><name>CURLUE_MALFORMED_INPUT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"https://example.com/"</literal></expr>,

<expr><literal type="string">"scheme=bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb,"</literal></expr>,

<expr><literal type="string">"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb://example.com/"</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><name>CURLU_NON_SUPPORT_SCHEME</name></expr>, <expr><name>CURLUE_OK</name></expr>, <expr><name>CURLUE_OK</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"https://[::1%25fake]:1234/"</literal></expr>,

<expr><literal type="string">"zoneid=NULL,"</literal></expr>,

<expr><literal type="string">"https://[::1]:1234/"</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CURLUE_OK</name></expr>, <expr><name>CURLUE_OK</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"https://host:1234/"</literal></expr>,

<expr><literal type="string">"port=NULL,"</literal></expr>,

<expr><literal type="string">"https://host/"</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CURLUE_OK</name></expr>, <expr><name>CURLUE_OK</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"https://host:1234/"</literal></expr>,

<expr><literal type="string">"port=\"\","</literal></expr>,

<expr><literal type="string">"https://host:1234/"</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CURLUE_OK</name></expr>, <expr><name>CURLUE_BAD_PORT_NUMBER</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"https://host:1234/"</literal></expr>,

<expr><literal type="string">"port=56 78,"</literal></expr>,

<expr><literal type="string">"https://host:1234/"</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CURLUE_OK</name></expr>, <expr><name>CURLUE_MALFORMED_INPUT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"https://host:1234/"</literal></expr>,

<expr><literal type="string">"port=0,"</literal></expr>,

<expr><literal type="string">"https://host:1234/"</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CURLUE_OK</name></expr>, <expr><name>CURLUE_BAD_PORT_NUMBER</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"https://host:1234/"</literal></expr>,

<expr><literal type="string">"port=65535,"</literal></expr>,

<expr><literal type="string">"https://host:65535/"</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CURLUE_OK</name></expr>, <expr><name>CURLUE_OK</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"https://host:1234/"</literal></expr>,

<expr><literal type="string">"port=65536,"</literal></expr>,

<expr><literal type="string">"https://host:1234/"</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CURLUE_OK</name></expr>, <expr><name>CURLUE_BAD_PORT_NUMBER</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"https://host/"</literal></expr>,

<expr><literal type="string">"path=%4A%4B%4C,"</literal></expr>,

<expr><literal type="string">"https://host/%4a%4b%4c"</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CURLUE_OK</name></expr>, <expr><name>CURLUE_OK</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"https://host/mooo?q#f"</literal></expr>,

<expr><literal type="string">"path=NULL,query=NULL,fragment=NULL,"</literal></expr>,

<expr><literal type="string">"https://host/"</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CURLUE_OK</name></expr>, <expr><name>CURLUE_OK</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"https://user:secret@host/"</literal></expr>,

<expr><literal type="string">"user=NULL,password=NULL,"</literal></expr>,

<expr><literal type="string">"https://host/"</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CURLUE_OK</name></expr>, <expr><name>CURLUE_OK</name></expr>}</block></expr>,

<expr><block>{<expr><name>NULL</name></expr>,

<expr><literal type="string">"scheme=https,user= @:,host=foobar,"</literal></expr>,

<expr><literal type="string">"https://%20%20%20%40%3a@foobar/"</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><name>CURLU_URLENCODE</name></expr>, <expr><name>CURLUE_OK</name></expr>, <expr><name>CURLUE_OK</name></expr>}</block></expr>,

<expr><block>{<expr><name>NULL</name></expr>,

<expr><literal type="string">"scheme=https,host= ,path= ,user= ,password= ,query= ,fragment= ,"</literal></expr>,

<expr><literal type="string">"https://%20:%20@%20%20/%20?+#%20"</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><name>CURLU_URLENCODE</name></expr>, <expr><name>CURLUE_OK</name></expr>, <expr><name>CURLUE_OK</name></expr>}</block></expr>,

<expr><block>{<expr><name>NULL</name></expr>,

<expr><literal type="string">"scheme=https,host=foobar,path=/this /path /is /here,"</literal></expr>,

<expr><literal type="string">"https://foobar/this%20/path%20/is%20/here"</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><name>CURLU_URLENCODE</name></expr>, <expr><name>CURLUE_OK</name></expr>, <expr><name>CURLUE_OK</name></expr>}</block></expr>,

<expr><block>{<expr><name>NULL</name></expr>,

<expr><literal type="string">"scheme=https,host=foobar,path=\xc3\xa4\xc3\xb6\xc3\xbc,"</literal></expr>,

<expr><literal type="string">"https://foobar/%c3%a4%c3%b6%c3%bc"</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><name>CURLU_URLENCODE</name></expr>, <expr><name>CURLUE_OK</name></expr>, <expr><name>CURLUE_OK</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"imap://user:secret;opt@host/"</literal></expr>,

<expr><literal type="string">"options=updated,scheme=imaps,password=p4ssw0rd,"</literal></expr>,

<expr><literal type="string">"imaps://user:p4ssw0rd;updated@host/"</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CURLUE_NO_HOST</name></expr>, <expr><name>CURLUE_OK</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"imap://user:secret;optit@host/"</literal></expr>,

<expr><literal type="string">"scheme=https,"</literal></expr>,

<expr><literal type="string">"https://user:secret@host/"</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CURLUE_NO_HOST</name></expr>, <expr><name>CURLUE_OK</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"file:///file#anchor"</literal></expr>,

<expr><literal type="string">"scheme=https,host=example,"</literal></expr>,

<expr><literal type="string">"https://example/file#anchor"</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CURLUE_NO_HOST</name></expr>, <expr><name>CURLUE_OK</name></expr>}</block></expr>,

<expr><block>{<expr><name>NULL</name></expr>, 

<expr><literal type="string">"scheme=file,host=127.0.0.1,path=/no,user=anonymous,"</literal></expr>,

<expr><literal type="string">"file:///no"</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CURLUE_OK</name></expr>, <expr><name>CURLUE_OK</name></expr>}</block></expr>,

<expr><block>{<expr><name>NULL</name></expr>, 

<expr><literal type="string">"scheme=ftp,host=127.0.0.1,path=/no,user=anonymous,"</literal></expr>,

<expr><literal type="string">"ftp://anonymous@127.0.0.1/no"</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CURLUE_OK</name></expr>, <expr><name>CURLUE_OK</name></expr>}</block></expr>,

<expr><block>{<expr><name>NULL</name></expr>, 

<expr><literal type="string">"scheme=https,host=example.com,"</literal></expr>,

<expr><literal type="string">"https://example.com/"</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><name>CURLU_NON_SUPPORT_SCHEME</name></expr>, <expr><name>CURLUE_OK</name></expr>, <expr><name>CURLUE_OK</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"http://user:foo@example.com/path?query#frag"</literal></expr>,

<expr><literal type="string">"fragment=changed,"</literal></expr>,

<expr><literal type="string">"http://user:foo@example.com/path?query#changed"</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><name>CURLU_NON_SUPPORT_SCHEME</name></expr>, <expr><name>CURLUE_OK</name></expr>, <expr><name>CURLUE_OK</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"http://example.com/"</literal></expr>,

<expr><literal type="string">"scheme=foo,"</literal></expr>, 

<expr><literal type="string">"http://example.com/"</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CURLUE_OK</name></expr>, <expr><name>CURLUE_UNSUPPORTED_SCHEME</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"http://example.com/"</literal></expr>,

<expr><literal type="string">"scheme=https,path=/hello,fragment=snippet,"</literal></expr>,

<expr><literal type="string">"https://example.com/hello#snippet"</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CURLUE_OK</name></expr>, <expr><name>CURLUE_OK</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"http://example.com:80"</literal></expr>,

<expr><literal type="string">"user=foo,port=1922,"</literal></expr>,

<expr><literal type="string">"http://foo@example.com:1922/"</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CURLUE_OK</name></expr>, <expr><name>CURLUE_OK</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"http://example.com:80"</literal></expr>,

<expr><literal type="string">"user=foo,password=bar,"</literal></expr>,

<expr><literal type="string">"http://foo:bar@example.com:80/"</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CURLUE_OK</name></expr>, <expr><name>CURLUE_OK</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"http://example.com:80"</literal></expr>,

<expr><literal type="string">"user=foo,"</literal></expr>,

<expr><literal type="string">"http://foo@example.com:80/"</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CURLUE_OK</name></expr>, <expr><name>CURLUE_OK</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"http://example.com"</literal></expr>,

<expr><literal type="string">"host=www.example.com,"</literal></expr>,

<expr><literal type="string">"http://www.example.com/"</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CURLUE_OK</name></expr>, <expr><name>CURLUE_OK</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"http://example.com:80"</literal></expr>,

<expr><literal type="string">"scheme=ftp,"</literal></expr>,

<expr><literal type="string">"ftp://example.com:80/"</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CURLUE_OK</name></expr>, <expr><name>CURLUE_OK</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"custom-scheme://host"</literal></expr>,

<expr><literal type="string">"host=\"\","</literal></expr>,

<expr><literal type="string">"custom-scheme://host/"</literal></expr>,

<expr><name>CURLU_NON_SUPPORT_SCHEME</name></expr>, <expr><name>CURLU_NON_SUPPORT_SCHEME</name></expr>, <expr><name>CURLUE_OK</name></expr>,

<expr><name>CURLUE_MALFORMED_INPUT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"custom-scheme://host"</literal></expr>,

<expr><literal type="string">"host=\"\","</literal></expr>,

<expr><literal type="string">"custom-scheme:///"</literal></expr>,

<expr><name>CURLU_NON_SUPPORT_SCHEME</name></expr>, <expr><name>CURLU_NON_SUPPORT_SCHEME</name> <operator>|</operator> <name>CURLU_NO_AUTHORITY</name></expr>,

<expr><name>CURLUE_OK</name></expr>, <expr><name>CURLUE_OK</name></expr>}</block></expr>,

<expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>CURLUPart</name></type> <name>part2id</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>part</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"url"</literal></expr></argument>, <argument><expr><name>part</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLUPART_URL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"scheme"</literal></expr></argument>, <argument><expr><name>part</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLUPART_SCHEME</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"user"</literal></expr></argument>, <argument><expr><name>part</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLUPART_USER</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"password"</literal></expr></argument>, <argument><expr><name>part</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLUPART_PASSWORD</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"options"</literal></expr></argument>, <argument><expr><name>part</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLUPART_OPTIONS</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"host"</literal></expr></argument>, <argument><expr><name>part</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLUPART_HOST</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"port"</literal></expr></argument>, <argument><expr><name>part</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLUPART_PORT</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"path"</literal></expr></argument>, <argument><expr><name>part</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLUPART_PATH</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"query"</literal></expr></argument>, <argument><expr><name>part</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLUPART_QUERY</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"fragment"</literal></expr></argument>, <argument><expr><name>part</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLUPART_FRAGMENT</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"zoneid"</literal></expr></argument>, <argument><expr><name>part</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLUPART_ZONEID</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">9999</literal></expr>;</return> 

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLUcode</name></type> <name>updateurl</name><parameter_list>(<parameter><decl><type><name>CURLU</name> <modifier>*</modifier></type><name>u</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>setflags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>cmd</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CURLUcode</name></type> <name>uc</name></decl>;</decl_stmt>

<while>while<condition>(<expr><name>p</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><call><name>strchr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>e</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>n</name> <init>= <expr><name>e</name><operator>-</operator><name>p</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">80</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>part</name><index>[<expr><literal type="number">80</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>value</name><index>[<expr><literal type="number">80</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>part</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>part</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><literal type="number">2</literal> <operator>==</operator> <call><name>sscanf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%79[^=]=%79[^,]"</literal></expr></argument>, <argument><expr><name>part</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>CURLUPart</name></type> <name>what</name> <init>= <expr><call><name>part2id</name><argument_list>(<argument><expr><name>part</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

fprintf(stderr, "%s = %s [%d]\n", part, value, (int)what);

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if<condition>(<expr><name>what</name> <operator>&gt;</operator> <name>CURLUPART_ZONEID</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"UNKNOWN part '%s'\n"</literal></expr></argument>, <argument><expr><name>part</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"NULL"</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>uc</name> <operator>=</operator> <call><name>curl_url_set</name><argument_list>(<argument><expr><name>u</name></expr></argument>, <argument><expr><name>what</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>setflags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"\"\""</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>uc</name> <operator>=</operator> <call><name>curl_url_set</name><argument_list>(<argument><expr><name>u</name></expr></argument>, <argument><expr><name>what</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>setflags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>uc</name> <operator>=</operator> <call><name>curl_url_set</name><argument_list>(<argument><expr><name>u</name></expr></argument>, <argument><expr><name>what</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>setflags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name>uc</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>uc</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>e</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block></while>

<return>return <expr><name>CURLUE_OK</name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>redircase</name></name></type> <name><name>set_url_list</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{<expr><literal type="string">"file://localhost/path?query#frag"</literal></expr>,

<expr><literal type="string">"foo#another"</literal></expr>,

<expr><literal type="string">"file:///foo#another"</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"http://example.com/path?query#frag"</literal></expr>,

<expr><literal type="string">"https://two.example.com/bradnew"</literal></expr>,

<expr><literal type="string">"https://two.example.com/bradnew"</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"http://example.com/path?query#frag"</literal></expr>,

<expr><literal type="string">"../../newpage#foo"</literal></expr>,

<expr><literal type="string">"http://example.com/newpage#foo"</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"http://user:foo@example.com/path?query#frag"</literal></expr>,

<expr><literal type="string">"../../newpage"</literal></expr>,

<expr><literal type="string">"http://user:foo@example.com/newpage"</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"http://user:foo@example.com/path?query#frag"</literal></expr>,

<expr><literal type="string">"../newpage"</literal></expr>,

<expr><literal type="string">"http://user:foo@example.com/newpage"</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>set_url</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>error</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>set_url_list</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>in</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>error</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>CURLUcode</name></type> <name>rc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CURLU</name> <modifier>*</modifier></type><name>urlp</name> <init>= <expr><call><name>curl_url</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>urlp</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>curl_url_set</name><argument_list>(<argument><expr><name>urlp</name></expr></argument>, <argument><expr><name>CURLUPART_URL</name></expr></argument>, <argument><expr><name><name>set_url_list</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>in</name></expr></argument>,

<argument><expr><name><name>set_url_list</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>urlflags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>rc</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>curl_url_set</name><argument_list>(<argument><expr><name>urlp</name></expr></argument>, <argument><expr><name>CURLUPART_URL</name></expr></argument>, <argument><expr><name><name>set_url_list</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>set</name></expr></argument>,

<argument><expr><name><name>set_url_list</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>setflags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s:%d Set URL %s returned %d\n"</literal></expr></argument>,

<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name><name>set_url_list</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>set</name></expr></argument>,

<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>error</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>url</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>curl_url_get</name><argument_list>(<argument><expr><name>urlp</name></expr></argument>, <argument><expr><name>CURLUPART_URL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>url</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s:%d Get URL returned %d\n"</literal></expr></argument>,

<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>error</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>checkurl</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr><name><name>set_url_list</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>out</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>error</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>curl_free</name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name>rc</name> <operator>!=</operator> <name><name>set_url_list</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ucode</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Set URL\nin: %s\nreturned %d (expected %d)\n"</literal></expr></argument>,

<argument><expr><name><name>set_url_list</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>in</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>rc</name></expr></argument>, <argument><expr><name><name>set_url_list</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ucode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>error</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>curl_url_cleanup</name><argument_list>(<argument><expr><name>urlp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>error</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>set_parts</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>error</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>set_parts_list</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>set</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>error</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>CURLUcode</name></type> <name>rc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CURLU</name> <modifier>*</modifier></type><name>urlp</name> <init>= <expr><call><name>curl_url</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>urlp</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>error</name><operator>++</operator></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>set_parts_list</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>in</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>curl_url_set</name><argument_list>(<argument><expr><name>urlp</name></expr></argument>, <argument><expr><name>CURLUPART_URL</name></expr></argument>, <argument><expr><name><name>set_parts_list</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>in</name></expr></argument>,

<argument><expr><name><name>set_parts_list</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>urlflags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <name>CURLUE_OK</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>rc</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>url</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CURLUcode</name></type> <name>uc</name> <init>= <expr><call><name>updateurl</name><argument_list>(<argument><expr><name>urlp</name></expr></argument>, <argument><expr><name><name>set_parts_list</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>set</name></expr></argument>,

<argument><expr><name><name>set_parts_list</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>setflags</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>uc</name> <operator>!=</operator> <name><name>set_parts_list</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pcode</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"updateurl\nin: %s\nreturned %d (expected %d)\n"</literal></expr></argument>,

<argument><expr><name><name>set_parts_list</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>set</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>uc</name></expr></argument>, <argument><expr><name><name>set_parts_list</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pcode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>error</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>curl_url_get</name><argument_list>(<argument><expr><name>urlp</name></expr></argument>, <argument><expr><name>CURLUPART_URL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>url</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s:%d Get URL returned %d\n"</literal></expr></argument>,

<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>error</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><call><name>checkurl</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr><name><name>set_parts_list</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>out</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>error</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>curl_free</name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name>rc</name> <operator>!=</operator> <name><name>set_parts_list</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ucode</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Set parts\nin: %s\nreturned %d (expected %d)\n"</literal></expr></argument>,

<argument><expr><name><name>set_parts_list</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>in</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>rc</name></expr></argument>, <argument><expr><name><name>set_parts_list</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ucode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>error</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>curl_url_cleanup</name><argument_list>(<argument><expr><name>urlp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>error</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_url</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>error</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>get_url_list</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>in</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>error</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>CURLUcode</name></type> <name>rc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CURLU</name> <modifier>*</modifier></type><name>urlp</name> <init>= <expr><call><name>curl_url</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>urlp</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>error</name><operator>++</operator></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>curl_url_set</name><argument_list>(<argument><expr><name>urlp</name></expr></argument>, <argument><expr><name>CURLUPART_URL</name></expr></argument>, <argument><expr><name><name>get_url_list</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>in</name></expr></argument>,

<argument><expr><name><name>get_url_list</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>urlflags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>rc</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>url</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>curl_url_get</name><argument_list>(<argument><expr><name>urlp</name></expr></argument>, <argument><expr><name>CURLUPART_URL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>url</name></expr></argument>, <argument><expr><name><name>get_url_list</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>getflags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s:%d returned %d\n"</literal></expr></argument>,

<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>error</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>checkurl</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr><name><name>get_url_list</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>out</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>error</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>curl_free</name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name>rc</name> <operator>!=</operator> <name><name>get_url_list</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ucode</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Get URL\nin: %s\nreturned %d (expected %d)\n"</literal></expr></argument>,

<argument><expr><name><name>get_url_list</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>in</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>rc</name></expr></argument>, <argument><expr><name><name>get_url_list</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ucode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>error</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>curl_url_cleanup</name><argument_list>(<argument><expr><name>urlp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>error</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_parts</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>error</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>get_parts_list</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>in</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>error</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>CURLUcode</name></type> <name>rc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CURLU</name> <modifier>*</modifier></type><name>urlp</name> <init>= <expr><call><name>curl_url</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>urlp</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>error</name><operator>++</operator></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>curl_url_set</name><argument_list>(<argument><expr><name>urlp</name></expr></argument>, <argument><expr><name>CURLUPART_URL</name></expr></argument>,

<argument><expr><name><name>get_parts_list</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>in</name></expr></argument>,

<argument><expr><name><name>get_parts_list</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>urlflags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>!=</operator> <name><name>get_parts_list</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ucode</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Get parts\nin: %s\nreturned %d (expected %d)\n"</literal></expr></argument>,

<argument><expr><name><name>get_parts_list</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>in</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>rc</name></expr></argument>, <argument><expr><name><name>get_parts_list</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ucode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>error</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name><name>get_parts_list</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ucode</name></expr>)</condition> <block>{<block_content>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><call><name>checkparts</name><argument_list>(<argument><expr><name>urlp</name></expr></argument>, <argument><expr><name><name>get_parts_list</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>in</name></expr></argument>, <argument><expr><name><name>get_parts_list</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>out</name></expr></argument>,

<argument><expr><name><name>get_parts_list</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>getflags</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>error</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>curl_url_cleanup</name><argument_list>(<argument><expr><name>urlp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>error</name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>querycase</name></name></type> <name><name>append_list</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{<expr><literal type="string">"HTTP://test/?s"</literal></expr>, <expr><literal type="string">"name=joe\x02"</literal></expr>, <expr><literal type="string">"http://test/?s&amp;name=joe%02"</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><name>CURLU_URLENCODE</name></expr>, <expr><name>CURLUE_OK</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"HTTP://test/?size=2#f"</literal></expr>, <expr><literal type="string">"name=joe="</literal></expr>, <expr><literal type="string">"http://test/?size=2&amp;name=joe%3d#f"</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><name>CURLU_URLENCODE</name></expr>, <expr><name>CURLUE_OK</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"HTTP://test/?size=2#f"</literal></expr>, <expr><literal type="string">"name=joe doe"</literal></expr>,

<expr><literal type="string">"http://test/?size=2&amp;name=joe+doe#f"</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><name>CURLU_URLENCODE</name></expr>, <expr><name>CURLUE_OK</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"HTTP://test/"</literal></expr>, <expr><literal type="string">"name=joe"</literal></expr>, <expr><literal type="string">"http://test/?name=joe"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CURLUE_OK</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"HTTP://test/?size=2"</literal></expr>, <expr><literal type="string">"name=joe"</literal></expr>, <expr><literal type="string">"http://test/?size=2&amp;name=joe"</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CURLUE_OK</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"HTTP://test/?size=2&amp;"</literal></expr>, <expr><literal type="string">"name=joe"</literal></expr>, <expr><literal type="string">"http://test/?size=2&amp;name=joe"</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CURLUE_OK</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"HTTP://test/?size=2#f"</literal></expr>, <expr><literal type="string">"name=joe"</literal></expr>, <expr><literal type="string">"http://test/?size=2&amp;name=joe#f"</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CURLUE_OK</name></expr>}</block></expr>,

<expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>append</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>error</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>append_list</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>in</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>error</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>CURLUcode</name></type> <name>rc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CURLU</name> <modifier>*</modifier></type><name>urlp</name> <init>= <expr><call><name>curl_url</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>urlp</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>error</name><operator>++</operator></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>curl_url_set</name><argument_list>(<argument><expr><name>urlp</name></expr></argument>, <argument><expr><name>CURLUPART_URL</name></expr></argument>,

<argument><expr><name><name>append_list</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>in</name></expr></argument>,

<argument><expr><name><name>append_list</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>urlflags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>error</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>curl_url_set</name><argument_list>(<argument><expr><name>urlp</name></expr></argument>, <argument><expr><name>CURLUPART_QUERY</name></expr></argument>,

<argument><expr><name><name>append_list</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>q</name></expr></argument>,

<argument><expr><name><name>append_list</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>qflags</name> <operator>|</operator> <name>CURLU_APPENDQUERY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name>error</name></expr>)</condition><block type="pseudo"><block_content>

<empty_stmt>;</empty_stmt></block_content></block></if>

<if type="elseif">else if<condition>(<expr><name>rc</name> <operator>!=</operator> <name><name>append_list</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ucode</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Append\nin: %s\nreturned %d (expected %d)\n"</literal></expr></argument>,

<argument><expr><name><name>append_list</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>in</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>rc</name></expr></argument>, <argument><expr><name><name>append_list</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ucode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>error</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name><name>append_list</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ucode</name></expr>)</condition> <block>{<block_content>

</block_content>}</block></if>

<else>else <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>url</name></decl>;</decl_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>curl_url_get</name><argument_list>(<argument><expr><name>urlp</name></expr></argument>, <argument><expr><name>CURLUPART_URL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>url</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s:%d Get URL returned %d\n"</literal></expr></argument>,

<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>error</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>checkurl</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr><name><name>append_list</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>out</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>error</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>curl_free</name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>curl_url_cleanup</name><argument_list>(<argument><expr><name>urlp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>error</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>scopeid</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CURLU</name> <modifier>*</modifier></type><name>u</name> <init>= <expr><call><name>curl_url</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>error</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CURLUcode</name></type> <name>rc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>url</name></decl>;</decl_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>curl_url_set</name><argument_list>(<argument><expr><name>u</name></expr></argument>, <argument><expr><name>CURLUPART_URL</name></expr></argument>,

<argument><expr><literal type="string">"https://[fe80::20c:29ff:fe9c:409b%25eth0]/hello.html"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>!=</operator> <name>CURLUE_OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s:%d curl_url_set returned %d\n"</literal></expr></argument>,

<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>error</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>curl_url_get</name><argument_list>(<argument><expr><name>u</name></expr></argument>, <argument><expr><name>CURLUPART_HOST</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>url</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>!=</operator> <name>CURLUE_OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s:%d curl_url_get CURLUPART_HOST returned %d\n"</literal></expr></argument>,

<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>error</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"we got %s\n"</literal></expr></argument>, <argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>curl_free</name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>curl_url_set</name><argument_list>(<argument><expr><name>u</name></expr></argument>, <argument><expr><name>CURLUPART_HOST</name></expr></argument>, <argument><expr><literal type="string">"[::1]"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>!=</operator> <name>CURLUE_OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s:%d curl_url_set CURLUPART_HOST returned %d\n"</literal></expr></argument>,

<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>error</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>curl_url_get</name><argument_list>(<argument><expr><name>u</name></expr></argument>, <argument><expr><name>CURLUPART_URL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>url</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>!=</operator> <name>CURLUE_OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s:%d curl_url_get CURLUPART_URL returned %d\n"</literal></expr></argument>,

<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>error</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"we got %s\n"</literal></expr></argument>, <argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>curl_free</name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>curl_url_set</name><argument_list>(<argument><expr><name>u</name></expr></argument>, <argument><expr><name>CURLUPART_HOST</name></expr></argument>, <argument><expr><literal type="string">"example.com"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>!=</operator> <name>CURLUE_OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s:%d curl_url_set CURLUPART_HOST returned %d\n"</literal></expr></argument>,

<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>error</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>curl_url_get</name><argument_list>(<argument><expr><name>u</name></expr></argument>, <argument><expr><name>CURLUPART_URL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>url</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>!=</operator> <name>CURLUE_OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s:%d curl_url_get CURLUPART_URL returned %d\n"</literal></expr></argument>,

<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>error</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"we got %s\n"</literal></expr></argument>, <argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>curl_free</name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>curl_url_set</name><argument_list>(<argument><expr><name>u</name></expr></argument>, <argument><expr><name>CURLUPART_HOST</name></expr></argument>,

<argument><expr><literal type="string">"[fe80::20c:29ff:fe9c:409b%25eth0]"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>!=</operator> <name>CURLUE_OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s:%d curl_url_set CURLUPART_HOST returned %d\n"</literal></expr></argument>,

<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>error</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>curl_url_get</name><argument_list>(<argument><expr><name>u</name></expr></argument>, <argument><expr><name>CURLUPART_URL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>url</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>!=</operator> <name>CURLUE_OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s:%d curl_url_get CURLUPART_URL returned %d\n"</literal></expr></argument>,

<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>error</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"we got %s\n"</literal></expr></argument>, <argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>curl_free</name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>curl_url_get</name><argument_list>(<argument><expr><name>u</name></expr></argument>, <argument><expr><name>CURLUPART_HOST</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>url</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>!=</operator> <name>CURLUE_OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s:%d curl_url_get CURLUPART_HOST returned %d\n"</literal></expr></argument>,

<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>error</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"we got %s\n"</literal></expr></argument>, <argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>curl_free</name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>curl_url_get</name><argument_list>(<argument><expr><name>u</name></expr></argument>, <argument><expr><name>CURLUPART_ZONEID</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>url</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>!=</operator> <name>CURLUE_OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s:%d curl_url_get CURLUPART_ZONEID returned %d\n"</literal></expr></argument>,

<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>error</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"we got %s\n"</literal></expr></argument>, <argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>curl_free</name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>curl_url_set</name><argument_list>(<argument><expr><name>u</name></expr></argument>, <argument><expr><name>CURLUPART_ZONEID</name></expr></argument>, <argument><expr><literal type="string">"clown"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>!=</operator> <name>CURLUE_OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s:%d curl_url_set CURLUPART_ZONEID returned %d\n"</literal></expr></argument>,

<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>error</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>curl_url_get</name><argument_list>(<argument><expr><name>u</name></expr></argument>, <argument><expr><name>CURLUPART_URL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>url</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>!=</operator> <name>CURLUE_OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s:%d curl_url_get CURLUPART_URL returned %d\n"</literal></expr></argument>,

<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>error</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"we got %s\n"</literal></expr></argument>, <argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>curl_free</name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>curl_url_cleanup</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>error</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>test</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>URL</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>URL</name></expr>;</expr_stmt> 

<if_stmt><if>if<condition>(<expr><call><name>scopeid</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">6</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>append</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">5</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>set_url</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>set_parts</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">2</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>get_url</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">3</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>get_parts</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">4</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"success\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

</unit>
