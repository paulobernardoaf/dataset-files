<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\curl-analysis\_cppstats\curl\tests\libtest\lib537.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"test.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SYS_RESOURCE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/resource.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_FCNTL_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"warnless.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memdebug.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_POLL_FINE</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>USE_WINSOCK</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>TPF</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FD_SETSIZE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"this test requires FD_SETSIZE"</cpp:literal></cpp:error>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SAFETY_MARGIN</name></cpp:macro> <cpp:value>(11)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MSDOS</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEV_NULL</name></cpp:macro> <cpp:value>"NUL"</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEV_NULL</name></cpp:macro> <cpp:value>"/dev/null"</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_GETRLIMIT</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SETRLIMIT</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name> <modifier>*</modifier></type><name>fd</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>rlimit</name></name></type> <name>num_open</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>msgbuff</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>store_errmsg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>err</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>err</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msnprintf</name><argument_list>(<argument><expr><name>msgbuff</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>msgbuff</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msnprintf</name><argument_list>(<argument><expr><name>msgbuff</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>msgbuff</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s, errno %d, %s"</literal></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>err</name></expr></argument>,

<argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>close_file_descriptors</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<for>for<control>(<init><expr><name><name>num_open</name><operator>.</operator><name>rlim_cur</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</init>

<condition><expr><name><name>num_open</name><operator>.</operator><name>rlim_cur</name></name> <operator>&lt;</operator> <name><name>num_open</name><operator>.</operator><name>rlim_max</name></name></expr>;</condition>

<incr><expr><name><name>num_open</name><operator>.</operator><name>rlim_cur</name></name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if<condition>(<expr><name><name>fd</name><index>[<expr><name><name>num_open</name><operator>.</operator><name>rlim_cur</name></name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>fd</name><index>[<expr><name><name>num_open</name><operator>.</operator><name>rlim_cur</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>fd</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>fopen_works</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name><name>fpa</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>fpa</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>fpa</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>DEV_NULL</name></expr></argument>, <argument><expr><name>FOPEN_READTEXT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>fpa</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>store_errmsg</name><argument_list>(<argument><expr><literal type="string">"fopen failed"</literal></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>msgbuff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>fpa</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name><name>fpa</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rlimit</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>keep_open</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>tmpfd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>rlim_t</name></type> <name>nitems</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>memchunk</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>fmt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>rlimit</name></name></type> <name>rl</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>strbuff</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>strbuff1</name><index>[<expr><literal type="number">81</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>fmt_u</name><index>[]</index></name> <init>= <expr><literal type="string">"%u"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>fmt_lu</name><index>[]</index></name> <init>= <expr><literal type="string">"%lu"</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LONGLONG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>char</name></type> <name><name>fmt_llu</name><index>[]</index></name> <init>= <expr><literal type="string">"%llu"</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>rl</name><operator>.</operator><name>rlim_max</name></name></expr></argument>)</argument_list></sizeof> <operator>&gt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>long</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>fmt</name> <operator>=</operator> <name>fmt_llu</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>fmt</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>rl</name><operator>.</operator><name>rlim_max</name></name></expr></argument>)</argument_list></sizeof> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>long</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>?</condition><then><expr><name>fmt_u</name></expr></then><else>:<expr><name>fmt_lu</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>getrlimit</name><argument_list>(<argument><expr><name>RLIMIT_NOFILE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rl</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>store_errmsg</name><argument_list>(<argument><expr><literal type="string">"getrlimit() failed"</literal></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>msgbuff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RLIM_INFINITY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name><name>rl</name><operator>.</operator><name>rlim_cur</name></name> <operator>==</operator> <name>RLIM_INFINITY</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>strbuff</name></expr></argument>, <argument><expr><literal type="string">"INFINITY"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>msnprintf</name><argument_list>(<argument><expr><name>strbuff</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>strbuff</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name><name>rl</name><operator>.</operator><name>rlim_cur</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"initial soft limit: %s\n"</literal></expr></argument>, <argument><expr><name>strbuff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RLIM_INFINITY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name><name>rl</name><operator>.</operator><name>rlim_max</name></name> <operator>==</operator> <name>RLIM_INFINITY</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>strbuff</name></expr></argument>, <argument><expr><literal type="string">"INFINITY"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>msnprintf</name><argument_list>(<argument><expr><name>strbuff</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>strbuff</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name><name>rl</name><operator>.</operator><name>rlim_max</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"initial hard limit: %s\n"</literal></expr></argument>, <argument><expr><name>strbuff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>rl</name><operator>.</operator><name>rlim_cur</name></name> <operator>!=</operator> <name><name>rl</name><operator>.</operator><name>rlim_max</name></name></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OPEN_MAX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>rl</name><operator>.</operator><name>rlim_cur</name></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>rl</name><operator>.</operator><name>rlim_cur</name></name> <operator>&lt;</operator> <name>OPEN_MAX</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"raising soft limit up to OPEN_MAX\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rl</name><operator>.</operator><name>rlim_cur</name></name> <operator>=</operator> <name>OPEN_MAX</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>setrlimit</name><argument_list>(<argument><expr><name>RLIMIT_NOFILE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rl</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>store_errmsg</name><argument_list>(<argument><expr><literal type="string">"setrlimit() failed"</literal></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>msgbuff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>msgbuff</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"raising soft limit up to hard limit\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rl</name><operator>.</operator><name>rlim_cur</name></name> <operator>=</operator> <name><name>rl</name><operator>.</operator><name>rlim_max</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>setrlimit</name><argument_list>(<argument><expr><name>RLIMIT_NOFILE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rl</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>store_errmsg</name><argument_list>(<argument><expr><literal type="string">"setrlimit() failed"</literal></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>msgbuff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>msgbuff</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>getrlimit</name><argument_list>(<argument><expr><name>RLIMIT_NOFILE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rl</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>store_errmsg</name><argument_list>(<argument><expr><literal type="string">"getrlimit() failed"</literal></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>msgbuff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">3</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RLIM_INFINITY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name><name>rl</name><operator>.</operator><name>rlim_cur</name></name> <operator>==</operator> <name>RLIM_INFINITY</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>strbuff</name></expr></argument>, <argument><expr><literal type="string">"INFINITY"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>msnprintf</name><argument_list>(<argument><expr><name>strbuff</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>strbuff</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name><name>rl</name><operator>.</operator><name>rlim_cur</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"current soft limit: %s\n"</literal></expr></argument>, <argument><expr><name>strbuff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RLIM_INFINITY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name><name>rl</name><operator>.</operator><name>rlim_max</name></name> <operator>==</operator> <name>RLIM_INFINITY</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>strbuff</name></expr></argument>, <argument><expr><literal type="string">"INFINITY"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>msnprintf</name><argument_list>(<argument><expr><name>strbuff</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>strbuff</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name><name>rl</name><operator>.</operator><name>rlim_max</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"current hard limit: %s\n"</literal></expr></argument>, <argument><expr><name>strbuff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt> 

<for>for<control>(<init><expr><name>nitems</name> <operator>=</operator> <name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>nitems</name> <operator>&lt;=</operator> <name>i</name></expr>;</condition> <incr><expr><name>i</name> <operator>*=</operator> <literal type="number">2</literal></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>nitems</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if<condition>(<expr><name>nitems</name> <operator>&gt;</operator> <literal type="number">0x7fff</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>nitems</name> <operator>=</operator> <literal type="number">0x40000</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<do>do <block>{<block_content>

<expr_stmt><expr><name><name>num_open</name><operator>.</operator><name>rlim_max</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>memchunk</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>nitems</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msnprintf</name><argument_list>(<argument><expr><name>strbuff</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>strbuff</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name><name>num_open</name><operator>.</operator><name>rlim_max</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"allocating memchunk %s byte array\n"</literal></expr></argument>, <argument><expr><name>strbuff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>memchunk</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>memchunk</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>nitems</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>memchunk</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"memchunk, malloc() failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>nitems</name> <operator>/=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block> while<condition>(<expr><name>nitems</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>memchunk</name></expr>)</condition>;</do>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>memchunk</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>store_errmsg</name><argument_list>(<argument><expr><literal type="string">"memchunk, malloc() failed"</literal></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>msgbuff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">4</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"initializing memchunk array\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nitems</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>memchunk</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></for>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RLIM_INFINITY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>rl</name><operator>.</operator><name>rlim_cur</name></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>rl</name><operator>.</operator><name>rlim_cur</name></name> <operator>!=</operator> <name>RLIM_INFINITY</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<if_stmt><if>if<condition>(<expr><name><name>rl</name><operator>.</operator><name>rlim_cur</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>num_open</name><operator>.</operator><name>rlim_max</name></name> <operator>=</operator> <name><name>rl</name><operator>.</operator><name>rlim_cur</name></name> <operator>-</operator> <name>SAFETY_MARGIN</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<for>for<control>(<init><expr><name>nitems</name> <operator>=</operator> <name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>nitems</name> <operator>&lt;=</operator> <name>i</name></expr>;</condition> <incr><expr><name>i</name> <operator>*=</operator> <literal type="number">2</literal></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>nitems</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if<condition>(<expr><name>nitems</name> <operator>&gt;</operator> <literal type="number">0x7fff</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>nitems</name> <operator>=</operator> <literal type="number">0x40000</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>num_open</name><operator>.</operator><name>rlim_max</name></name> <operator>=</operator> <name>nitems</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name><name>num_open</name><operator>.</operator><name>rlim_max</name></name><operator>)</operator> <operator>&gt;</operator> <operator>(</operator><operator>(</operator><name>size_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>fd</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msnprintf</name><argument_list>(<argument><expr><name>strbuff1</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>strbuff1</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name><name>num_open</name><operator>.</operator><name>rlim_max</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msnprintf</name><argument_list>(<argument><expr><name>strbuff</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>strbuff</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"unable to allocate an array for %s "</literal>

<literal type="string">"file descriptors, would overflow size_t"</literal></expr></argument>, <argument><expr><name>strbuff1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>store_errmsg</name><argument_list>(<argument><expr><name>strbuff</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>msgbuff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>memchunk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">5</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<do>do <block>{<block_content>

<expr_stmt><expr><call><name>msnprintf</name><argument_list>(<argument><expr><name>strbuff</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>strbuff</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name><name>num_open</name><operator>.</operator><name>rlim_max</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"allocating array for %s file descriptors\n"</literal></expr></argument>, <argument><expr><name>strbuff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>fd</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name><name>num_open</name><operator>.</operator><name>rlim_max</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>fd</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"fd, malloc() failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>num_open</name><operator>.</operator><name>rlim_max</name></name> <operator>/=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block> while<condition>(<expr><name><name>num_open</name><operator>.</operator><name>rlim_max</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>fd</name></expr>)</condition>;</do>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>fd</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>store_errmsg</name><argument_list>(<argument><expr><literal type="string">"fd, malloc() failed"</literal></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>msgbuff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>memchunk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">6</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"initializing fd array\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name><name>num_open</name><operator>.</operator><name>rlim_cur</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</init>

<condition><expr><name><name>num_open</name><operator>.</operator><name>rlim_cur</name></name> <operator>&lt;</operator> <name><name>num_open</name><operator>.</operator><name>rlim_max</name></name></expr>;</condition>

<incr><expr><name><name>num_open</name><operator>.</operator><name>rlim_cur</name></name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>fd</name><index>[<expr><name><name>num_open</name><operator>.</operator><name>rlim_cur</name></name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>msnprintf</name><argument_list>(<argument><expr><name>strbuff</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>strbuff</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name><name>num_open</name><operator>.</operator><name>rlim_max</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"trying to open %s file descriptors\n"</literal></expr></argument>, <argument><expr><name>strbuff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name>DEV_NULL</name></expr></argument>, <argument><expr><name>O_RDONLY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>fd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msnprintf</name><argument_list>(<argument><expr><name>strbuff</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>strbuff</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"opening of %s failed"</literal></expr></argument>, <argument><expr><name>DEV_NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>store_errmsg</name><argument_list>(<argument><expr><name>strbuff</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>msgbuff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>fd</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>memchunk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">7</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for<control>(<init><expr><name><name>num_open</name><operator>.</operator><name>rlim_cur</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</init>

<condition><expr><name><name>num_open</name><operator>.</operator><name>rlim_cur</name></name> <operator>&lt;</operator> <name><name>num_open</name><operator>.</operator><name>rlim_max</name></name></expr>;</condition>

<incr><expr><name><name>num_open</name><operator>.</operator><name>rlim_cur</name></name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>fd</name><index>[<expr><name><name>num_open</name><operator>.</operator><name>rlim_cur</name></name></expr>]</index></name> <operator>=</operator> <call><name>dup</name><argument_list>(<argument><expr><name><name>fd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>fd</name><index>[<expr><name><name>num_open</name><operator>.</operator><name>rlim_cur</name></name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>fd</name><index>[<expr><name><name>num_open</name><operator>.</operator><name>rlim_cur</name></name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msnprintf</name><argument_list>(<argument><expr><name>strbuff1</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>strbuff1</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name><name>num_open</name><operator>.</operator><name>rlim_cur</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msnprintf</name><argument_list>(<argument><expr><name>strbuff</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>strbuff</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"dup() attempt %s failed"</literal></expr></argument>, <argument><expr><name>strbuff1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>strbuff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msnprintf</name><argument_list>(<argument><expr><name>strbuff1</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>strbuff1</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name><name>num_open</name><operator>.</operator><name>rlim_cur</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msnprintf</name><argument_list>(<argument><expr><name>strbuff</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>strbuff</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"fds system limit seems close to %s"</literal></expr></argument>,

<argument><expr><name>strbuff1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>strbuff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>num_open</name><operator>.</operator><name>rlim_max</name></name> <operator>=</operator> <name><name>num_open</name><operator>.</operator><name>rlim_cur</name></name> <operator>-</operator> <name>SAFETY_MARGIN</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>num_open</name><operator>.</operator><name>rlim_cur</name></name> <operator>-=</operator> <name><name>num_open</name><operator>.</operator><name>rlim_max</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msnprintf</name><argument_list>(<argument><expr><name>strbuff1</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>strbuff1</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name><name>num_open</name><operator>.</operator><name>rlim_cur</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msnprintf</name><argument_list>(<argument><expr><name>strbuff</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>strbuff</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"closing %s file descriptors"</literal></expr></argument>,

<argument><expr><name>strbuff1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>strbuff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name><name>num_open</name><operator>.</operator><name>rlim_cur</name></name> <operator>=</operator> <name><name>num_open</name><operator>.</operator><name>rlim_max</name></name></expr>;</init>

<condition><expr><name><name>fd</name><index>[<expr><name><name>num_open</name><operator>.</operator><name>rlim_cur</name></name></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition>

<incr><expr><name><name>num_open</name><operator>.</operator><name>rlim_cur</name></name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>fd</name><index>[<expr><name><name>num_open</name><operator>.</operator><name>rlim_cur</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fd</name><index>[<expr><name><name>num_open</name><operator>.</operator><name>rlim_cur</name></name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>msnprintf</name><argument_list>(<argument><expr><name>strbuff</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>strbuff</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name><name>num_open</name><operator>.</operator><name>rlim_max</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"shrinking array for %s file descriptors\n"</literal></expr></argument>, <argument><expr><name>strbuff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmpfd</name> <operator>=</operator> <call><name>realloc</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>fd</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name><name>num_open</name><operator>.</operator><name>rlim_max</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>tmpfd</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>fd</name> <operator>=</operator> <name>tmpfd</name></expr>;</expr_stmt>

<expr_stmt><expr><name>tmpfd</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>msnprintf</name><argument_list>(<argument><expr><name>strbuff</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>strbuff</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name><name>num_open</name><operator>.</operator><name>rlim_max</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s file descriptors open\n"</literal></expr></argument>, <argument><expr><name>strbuff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_POLL_FINE</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>USE_WINSOCK</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>TPF</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><name><name>num_open</name><operator>.</operator><name>rlim_cur</name></name> <operator>=</operator> <name>FD_SETSIZE</name> <operator>-</operator> <name>SAFETY_MARGIN</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>num_open</name><operator>.</operator><name>rlim_max</name></name> <operator>&gt;</operator> <name><name>num_open</name><operator>.</operator><name>rlim_cur</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msnprintf</name><argument_list>(<argument><expr><name>strbuff</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>strbuff</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"select limit is FD_SETSIZE %d"</literal></expr></argument>,

<argument><expr><name>FD_SETSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>store_errmsg</name><argument_list>(<argument><expr><name>strbuff</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>msgbuff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>close_file_descriptors</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>memchunk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">8</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>num_open</name><operator>.</operator><name>rlim_cur</name></name> <operator>=</operator> <name>FD_SETSIZE</name> <operator>-</operator> <name>SAFETY_MARGIN</name></expr>;</expr_stmt>

<for>for<control>(<init><expr><name><name>rl</name><operator>.</operator><name>rlim_cur</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</init>

<condition><expr><name><name>rl</name><operator>.</operator><name>rlim_cur</name></name> <operator>&lt;</operator> <name><name>num_open</name><operator>.</operator><name>rlim_max</name></name></expr>;</condition>

<incr><expr><name><name>rl</name><operator>.</operator><name>rlim_cur</name></name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>fd</name><index>[<expr><name><name>rl</name><operator>.</operator><name>rlim_cur</name></name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name><name>fd</name><index>[<expr><name><name>rl</name><operator>.</operator><name>rlim_cur</name></name></expr>]</index></name> <operator>&gt;</operator> <name><name>num_open</name><operator>.</operator><name>rlim_cur</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msnprintf</name><argument_list>(<argument><expr><name>strbuff</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>strbuff</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"select limit is FD_SETSIZE %d"</literal></expr></argument>,

<argument><expr><name>FD_SETSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>store_errmsg</name><argument_list>(<argument><expr><name>strbuff</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>msgbuff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>close_file_descriptors</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>memchunk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">9</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>fopen_works</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msnprintf</name><argument_list>(<argument><expr><name>strbuff1</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>strbuff1</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name><name>num_open</name><operator>.</operator><name>rlim_max</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msnprintf</name><argument_list>(<argument><expr><name>strbuff</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>strbuff</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"fopen fails with %s fds open"</literal></expr></argument>,

<argument><expr><name>strbuff1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>msgbuff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msnprintf</name><argument_list>(<argument><expr><name>strbuff</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>strbuff</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"fopen fails with lots of fds open"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>store_errmsg</name><argument_list>(<argument><expr><name>strbuff</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>close_file_descriptors</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>memchunk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">10</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>memchunk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>keep_open</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>close_file_descriptors</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<function><type><name>int</name></type> <name>test</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>URL</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>res</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CURL</name> <modifier>*</modifier></type><name>curl</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>URL</name></expr></argument>, <argument><expr><literal type="string">"check"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>rlimit</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><literal type="string">"rlimit problem: %s\n"</literal></expr></argument>, <argument><expr><name>msgbuff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return> 

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>rlimit</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>TEST_ERR_MAJOR_BAD</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>curl_global_init</name><argument_list>(<argument><expr><name>CURL_GLOBAL_ALL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>CURLE_OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"curl_global_init() failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>close_file_descriptors</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>TEST_ERR_MAJOR_BAD</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>curl</name> <operator>=</operator> <call><name>curl_easy_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>curl</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"curl_easy_init() failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>close_file_descriptors</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>curl_global_cleanup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>TEST_ERR_MAJOR_BAD</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>test_setopt</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_URL</name></expr></argument>, <argument><expr><name>URL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_setopt</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_HEADER</name></expr></argument>, <argument><expr><literal type="number">1L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>curl_easy_perform</name><argument_list>(<argument><expr><name>curl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>test_cleanup</name>:</label>

<expr_stmt><expr><call><name>close_file_descriptors</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>curl_easy_cleanup</name><argument_list>(<argument><expr><name>curl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>curl_global_cleanup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><name>res</name></expr>;</return>

</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 

<function><type><name>int</name></type> <name>test</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>URL</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>URL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"system lacks necessary system function(s)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return> 

</block_content>}</block></function></block_content></block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</unit>
