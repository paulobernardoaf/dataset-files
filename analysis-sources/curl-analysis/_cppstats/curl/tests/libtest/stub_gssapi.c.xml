<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\curl-analysis\_cppstats\curl\tests\libtest\stub_gssapi.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stub_gssapi.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_CREDS_LENGTH</name></cpp:macro> <cpp:value>250</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APPROX_TOKEN_LEN</name></cpp:macro> <cpp:value>250</cpp:value></cpp:define>

<enum>enum <name>min_err_code</name> <block>{

<decl><name>GSS_OK</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>GSS_NO_MEMORY</name></decl>,

<decl><name>GSS_INVALID_ARGS</name></decl>,

<decl><name>GSS_INVALID_CREDS</name></decl>,

<decl><name>GSS_INVALID_CTX</name></decl>,

<decl><name>GSS_SERVER_ERR</name></decl>,

<decl><name>GSS_NO_MECH</name></decl>,

<decl><name>GSS_LAST</name></decl>

}</block>;</enum>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>min_err_table</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"stub-gss: no error"</literal></expr>,

<expr><literal type="string">"stub-gss: no memory"</literal></expr>,

<expr><literal type="string">"stub-gss: invalid arguments"</literal></expr>,

<expr><literal type="string">"stub-gss: invalid credentials"</literal></expr>,

<expr><literal type="string">"stub-gss: invalid context"</literal></expr>,

<expr><literal type="string">"stub-gss: server returned error"</literal></expr>,

<expr><literal type="string">"stub-gss: cannot find a mechanism"</literal></expr>,

<expr><name>NULL</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<struct>struct <name>gss_ctx_id_t_desc_struct</name> <block>{

<enum>enum <block>{ <decl><name>NONE</name></decl>, <decl><name>KRB5</name></decl>, <decl><name>NTLM1</name></decl>, <decl><name>NTLM3</name></decl> }</block> <decl><name>sent</name></decl>;</enum>

<decl_stmt><decl><type><name>int</name></type> <name>have_krb5</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>have_ntlm</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>OM_uint32</name></type> <name>flags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>creds</name><index>[<expr><name>MAX_CREDS_LENGTH</name></expr>]</index></name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><name>OM_uint32</name></type> <name>gss_init_sec_context</name><parameter_list>(<parameter><decl><type><name>OM_uint32</name> <modifier>*</modifier></type><name>min</name></decl></parameter>,

<parameter><decl><type><name>gss_const_cred_id_t</name></type> <name>initiator_cred_handle</name></decl></parameter>,

<parameter><decl><type><name>gss_ctx_id_t</name> <modifier>*</modifier></type><name>context_handle</name></decl></parameter>,

<parameter><decl><type><name>gss_const_name_t</name></type> <name>target_name</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>gss_OID</name></type> <name>mech_type</name></decl></parameter>,

<parameter><decl><type><name>OM_uint32</name></type> <name>req_flags</name></decl></parameter>,

<parameter><decl><type><name>OM_uint32</name></type> <name>time_req</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>gss_channel_bindings_t</name></type> <name>input_chan_bindings</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>gss_buffer_t</name></type> <name>input_token</name></decl></parameter>,

<parameter><decl><type><name>gss_OID</name> <modifier>*</modifier></type><name>actual_mech_type</name></decl></parameter>,

<parameter><decl><type><name>gss_buffer_t</name></type> <name>output_token</name></decl></parameter>,

<parameter><decl><type><name>OM_uint32</name> <modifier>*</modifier></type><name>ret_flags</name></decl></parameter>,

<parameter><decl><type><name>OM_uint32</name> <modifier>*</modifier></type><name>time_rec</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>length</name> <init>= <expr><name>APPROX_TOKEN_LEN</name> <operator>*</operator> <literal type="number">3</literal> <operator>/</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>used</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>token</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>creds</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>gss_ctx_id_t</name></type> <name>ctx</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>initiator_cred_handle</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>mech_type</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>time_req</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>input_chan_bindings</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>actual_mech_type</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>min</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>GSS_S_FAILURE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>min</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>context_handle</name> <operator>||</operator> <operator>!</operator><name>target_name</name> <operator>||</operator> <operator>!</operator><name>output_token</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>min</name> <operator>=</operator> <name>GSS_INVALID_ARGS</name></expr>;</expr_stmt>

<return>return <expr><name>GSS_S_FAILURE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>creds</name> <operator>=</operator> <call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"CURL_STUB_GSS_CREDS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>creds</name> <operator>||</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>creds</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name>MAX_CREDS_LENGTH</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>min</name> <operator>=</operator> <name>GSS_INVALID_CREDS</name></expr>;</expr_stmt>

<return>return <expr><name>GSS_S_FAILURE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ctx</name> <operator>=</operator> <operator>*</operator><name>context_handle</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>ctx</name> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>creds</name></name></expr></argument>, <argument><expr><name>creds</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>min</name> <operator>=</operator> <name>GSS_INVALID_CREDS</name></expr>;</expr_stmt>

<return>return <expr><name>GSS_S_FAILURE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>output_token</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>output_token</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>input_token</name> <operator>&amp;&amp;</operator> <name><name>input_token</name><operator>-&gt;</operator><name>length</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>ctx</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>min</name> <operator>=</operator> <name>GSS_INVALID_CTX</name></expr>;</expr_stmt>

<return>return <expr><name>GSS_S_FAILURE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name><name>input_token</name><operator>-&gt;</operator><name>value</name></name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>==</operator> <literal type="char">'D'</literal></expr>)</condition> <block>{<block_content>

<switch>switch<condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>sent</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>KRB5</name></expr>:</case>

<case>case <expr><name>NTLM3</name></expr>:</case>

<if_stmt><if>if<condition>(<expr><name>ret_flags</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>ret_flags</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>flags</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>time_rec</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>time_rec</name> <operator>=</operator> <name>GSS_C_INDEFINITE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>GSS_S_COMPLETE</name></expr>;</return>

<default>default:</default>

<expr_stmt><expr><operator>*</operator><name>min</name> <operator>=</operator> <name>GSS_SERVER_ERR</name></expr>;</expr_stmt>

<return>return <expr><name>GSS_S_FAILURE</name></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name><name>input_token</name><operator>-&gt;</operator><name>value</name></name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>!=</operator> <literal type="char">'C'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>min</name> <operator>=</operator> <name>GSS_SERVER_ERR</name></expr>;</expr_stmt>

<return>return <expr><name>GSS_S_FAILURE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<switch>switch<condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>sent</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>KRB5</name></expr>:</case>

<if_stmt><if>if<condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>have_ntlm</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>sent</name></name> <operator>=</operator> <name>NTLM1</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>min</name> <operator>=</operator> <name>GSS_SERVER_ERR</name></expr>;</expr_stmt>

<return>return <expr><name>GSS_S_FAILURE</name></expr>;</return>

</block_content>}</block></else></if_stmt>

<case>case <expr><name>NTLM1</name></expr>:</case>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>sent</name></name> <operator>=</operator> <name>NTLM3</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><operator>*</operator><name>min</name> <operator>=</operator> <name>GSS_SERVER_ERR</name></expr>;</expr_stmt>

<return>return <expr><name>GSS_S_FAILURE</name></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></if>

<else>else <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>ctx</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>min</name> <operator>=</operator> <name>GSS_INVALID_CTX</name></expr>;</expr_stmt>

<return>return <expr><name>GSS_S_FAILURE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ctx</name> <operator>=</operator> <operator>(</operator><name>gss_ctx_id_t</name><operator>)</operator> <call><name>calloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>ctx</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>ctx</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>min</name> <operator>=</operator> <name>GSS_NO_MEMORY</name></expr>;</expr_stmt>

<return>return <expr><name>GSS_S_FAILURE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>strstr</name><argument_list>(<argument><expr><name>creds</name></expr></argument>, <argument><expr><literal type="string">"KRB5"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>have_krb5</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>strstr</name><argument_list>(<argument><expr><name>creds</name></expr></argument>, <argument><expr><literal type="string">"NTLM"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>have_ntlm</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>have_krb5</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>sent</name></name> <operator>=</operator> <name>KRB5</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>have_ntlm</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>sent</name></name> <operator>=</operator> <name>NTLM1</name></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>min</name> <operator>=</operator> <name>GSS_NO_MECH</name></expr>;</expr_stmt>

<return>return <expr><name>GSS_S_FAILURE</name></expr>;</return>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>creds</name></name></expr></argument>, <argument><expr><name>creds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name>req_flags</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>token</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>token</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>min</name> <operator>=</operator> <name>GSS_NO_MEMORY</name></expr>;</expr_stmt>

<return>return <expr><name>GSS_S_FAILURE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>used</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>token</name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><literal type="string">"%s:%s:%d:"</literal></expr></argument>, <argument><expr><name>creds</name></expr></argument>,

<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>target_name</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>sent</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>used</name> <operator>&gt;=</operator> <name>length</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>min</name> <operator>=</operator> <name>GSS_NO_MEMORY</name></expr>;</expr_stmt>

<return>return <expr><name>GSS_S_FAILURE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>token</name> <operator>+</operator> <name>used</name></expr></argument>, <argument><expr><literal type="char">'A'</literal></expr></argument>, <argument><expr><name>length</name> <operator>-</operator> <name>used</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>context_handle</name> <operator>=</operator> <name>ctx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>output_token</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <name>token</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>output_token</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <name>length</name></expr>;</expr_stmt>

<return>return <expr><name>GSS_S_CONTINUE_NEEDED</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>OM_uint32</name></type> <name>gss_delete_sec_context</name><parameter_list>(<parameter><decl><type><name>OM_uint32</name> <modifier>*</modifier></type><name>min</name></decl></parameter>,

<parameter><decl><type><name>gss_ctx_id_t</name> <modifier>*</modifier></type><name>context_handle</name></decl></parameter>,

<parameter><decl><type><name>gss_buffer_t</name></type> <name>output_token</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>output_token</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>min</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>GSS_S_FAILURE</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>context_handle</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>min</name> <operator>=</operator> <name>GSS_INVALID_CTX</name></expr>;</expr_stmt>

<return>return <expr><name>GSS_S_FAILURE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>*</operator><name>context_handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>context_handle</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>min</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>GSS_S_COMPLETE</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>OM_uint32</name></type> <name>gss_release_buffer</name><parameter_list>(<parameter><decl><type><name>OM_uint32</name> <modifier>*</modifier></type><name>min</name></decl></parameter>,

<parameter><decl><type><name>gss_buffer_t</name></type> <name>buffer</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>min</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>min</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>buffer</name> <operator>&amp;&amp;</operator> <name><name>buffer</name><operator>-&gt;</operator><name>length</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>buffer</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buffer</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>GSS_S_COMPLETE</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>OM_uint32</name></type> <name>gss_import_name</name><parameter_list>(<parameter><decl><type><name>OM_uint32</name> <modifier>*</modifier></type><name>min</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>gss_buffer_t</name></type> <name>input_name_buffer</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>gss_OID</name></type> <name>input_name_type</name></decl></parameter>,

<parameter><decl><type><name>gss_name_t</name> <modifier>*</modifier></type><name>output_name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>input_name_type</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>min</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>GSS_S_FAILURE</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>input_name_buffer</name> <operator>||</operator> <operator>!</operator><name>output_name</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>min</name> <operator>=</operator> <name>GSS_INVALID_ARGS</name></expr>;</expr_stmt>

<return>return <expr><name>GSS_S_FAILURE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>strndup</name><argument_list>(<argument><expr><name><name>input_name_buffer</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><name><name>input_name_buffer</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>name</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>min</name> <operator>=</operator> <name>GSS_NO_MEMORY</name></expr>;</expr_stmt>

<return>return <expr><name>GSS_S_FAILURE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>output_name</name> <operator>=</operator> <operator>(</operator><name>gss_name_t</name><operator>)</operator> <name>name</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>min</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>GSS_S_COMPLETE</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>OM_uint32</name></type> <name>gss_release_name</name><parameter_list>(<parameter><decl><type><name>OM_uint32</name> <modifier>*</modifier></type><name>min</name></decl></parameter>,

<parameter><decl><type><name>gss_name_t</name> <modifier>*</modifier></type><name>input_name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>min</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>min</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>input_name</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>*</operator><name>input_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>GSS_S_COMPLETE</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>OM_uint32</name></type> <name>gss_display_status</name><parameter_list>(<parameter><decl><type><name>OM_uint32</name> <modifier>*</modifier></type><name>min</name></decl></parameter>,

<parameter><decl><type><name>OM_uint32</name></type> <name>status_value</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>status_type</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>gss_OID</name></type> <name>mech_type</name></decl></parameter>,

<parameter><decl><type><name>OM_uint32</name> <modifier>*</modifier></type><name>message_context</name></decl></parameter>,

<parameter><decl><type><name>gss_buffer_t</name></type> <name>status_string</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>maj_str</name><index>[]</index></name> <init>= <expr><literal type="string">"Stub GSS error"</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>mech_type</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>min</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>min</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>message_context</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>message_context</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>status_string</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>status_string</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>status_string</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>status_value</name> <operator>&gt;=</operator> <name>GSS_LAST</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>GSS_S_FAILURE</name></expr>;</return></block_content></block></if></if_stmt>

<switch>switch<condition>(<expr><name>status_type</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>GSS_C_GSS_CODE</name></expr>:</case>

<expr_stmt><expr><name><name>status_string</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>maj_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>GSS_C_MECH_CODE</name></expr>:</case>

<expr_stmt><expr><name><name>status_string</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name><name>min_err_table</name><index>[<expr><name>status_value</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<return>return <expr><name>GSS_S_FAILURE</name></expr>;</return>

</block_content>}</block></switch>

<if_stmt><if>if<condition>(<expr><name><name>status_string</name><operator>-&gt;</operator><name>value</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>status_string</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>status_string</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><name>GSS_S_FAILURE</name></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>GSS_S_COMPLETE</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>OM_uint32</name></type> <name>gss_display_name</name><parameter_list>(<parameter><decl><type><name>OM_uint32</name> <modifier>*</modifier></type><name>min</name></decl></parameter>,

<parameter><decl><type><name>gss_const_name_t</name></type> <name>input_name</name></decl></parameter>,

<parameter><decl><type><name>gss_buffer_t</name></type> <name>output_name_buffer</name></decl></parameter>,

<parameter><decl><type><name>gss_OID</name> <modifier>*</modifier></type><name>output_name_type</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>min</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>input_name</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>output_name_buffer</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>output_name_type</name></expr>;</expr_stmt>

<return>return <expr><name>GSS_S_FAILURE</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>OM_uint32</name></type> <name>gss_inquire_context</name><parameter_list>(<parameter><decl><type><name>OM_uint32</name> <modifier>*</modifier></type><name>min</name></decl></parameter>,

<parameter><decl><type><name>gss_const_ctx_id_t</name></type> <name>context_handle</name></decl></parameter>,

<parameter><decl><type><name>gss_name_t</name> <modifier>*</modifier></type><name>src_name</name></decl></parameter>,

<parameter><decl><type><name>gss_name_t</name> <modifier>*</modifier></type><name>targ_name</name></decl></parameter>,

<parameter><decl><type><name>OM_uint32</name> <modifier>*</modifier></type><name>lifetime_rec</name></decl></parameter>,

<parameter><decl><type><name>gss_OID</name> <modifier>*</modifier></type><name>mech_type</name></decl></parameter>,

<parameter><decl><type><name>OM_uint32</name> <modifier>*</modifier></type><name>ctx_flags</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>locally_initiated</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>open_context</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>min</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>context_handle</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>src_name</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>targ_name</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>lifetime_rec</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>mech_type</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>ctx_flags</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>locally_initiated</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>open_context</name></expr>;</expr_stmt>

<return>return <expr><name>GSS_S_FAILURE</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>OM_uint32</name></type> <name>gss_wrap</name><parameter_list>(<parameter><decl><type><name>OM_uint32</name> <modifier>*</modifier></type><name>min</name></decl></parameter>,

<parameter><decl><type><name>gss_const_ctx_id_t</name></type> <name>context_handle</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>conf_req_flag</name></decl></parameter>,

<parameter><decl><type><name>gss_qop_t</name></type> <name>qop_req</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>gss_buffer_t</name></type> <name>input_message_buffer</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>conf_state</name></decl></parameter>,

<parameter><decl><type><name>gss_buffer_t</name></type> <name>output_message_buffer</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>min</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>context_handle</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>conf_req_flag</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>qop_req</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>input_message_buffer</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>conf_state</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>output_message_buffer</name></expr>;</expr_stmt>

<return>return <expr><name>GSS_S_FAILURE</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>OM_uint32</name></type> <name>gss_unwrap</name><parameter_list>(<parameter><decl><type><name>OM_uint32</name> <modifier>*</modifier></type><name>min</name></decl></parameter>,

<parameter><decl><type><name>gss_const_ctx_id_t</name></type> <name>context_handle</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>gss_buffer_t</name></type> <name>input_message_buffer</name></decl></parameter>,

<parameter><decl><type><name>gss_buffer_t</name></type> <name>output_message_buffer</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>conf_state</name></decl></parameter>,

<parameter><decl><type><name>gss_qop_t</name> <modifier>*</modifier></type><name>qop_state</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>min</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>context_handle</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>input_message_buffer</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>output_message_buffer</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>conf_state</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>qop_state</name></expr>;</expr_stmt>

<return>return <expr><name>GSS_S_FAILURE</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>OM_uint32</name></type> <name>gss_seal</name><parameter_list>(<parameter><decl><type><name>OM_uint32</name> <modifier>*</modifier></type><name>min</name></decl></parameter>,

<parameter><decl><type><name>gss_ctx_id_t</name></type> <name>context_handle</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>conf_req_flag</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>qop_req</name></decl></parameter>,

<parameter><decl><type><name>gss_buffer_t</name></type> <name>input_message_buffer</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>conf_state</name></decl></parameter>,

<parameter><decl><type><name>gss_buffer_t</name></type> <name>output_message_buffer</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>min</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>context_handle</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>conf_req_flag</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>qop_req</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>input_message_buffer</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>conf_state</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>output_message_buffer</name></expr>;</expr_stmt>

<return>return <expr><name>GSS_S_FAILURE</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>OM_uint32</name></type> <name>gss_unseal</name><parameter_list>(<parameter><decl><type><name>OM_uint32</name> <modifier>*</modifier></type><name>min</name></decl></parameter>,

<parameter><decl><type><name>gss_ctx_id_t</name></type> <name>context_handle</name></decl></parameter>,

<parameter><decl><type><name>gss_buffer_t</name></type> <name>input_message_buffer</name></decl></parameter>,

<parameter><decl><type><name>gss_buffer_t</name></type> <name>output_message_buffer</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>conf_state</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>qop_state</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>min</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>context_handle</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>input_message_buffer</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>output_message_buffer</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>conf_state</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>qop_state</name></expr>;</expr_stmt>

<return>return <expr><name>GSS_S_FAILURE</name></expr>;</return>

</block_content>}</block></function>

</unit>
