<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\curl-analysis\_cppstats\curl\tests\libtest\lib544.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"test.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memdebug.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>teststring</name><index>[]</index></name> <init>=

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DOES_CONVERSIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{ <expr><literal type="char">'\x54'</literal></expr>, <expr><literal type="char">'\x68'</literal></expr>, <expr><literal type="char">'\x69'</literal></expr>, <expr><literal type="char">'\x73'</literal></expr>, <expr><literal type="char">'\x00'</literal></expr>, <expr><literal type="char">'\x20'</literal></expr>, <expr><literal type="char">'\x69'</literal></expr>, <expr><literal type="char">'\x73'</literal></expr>, <expr><literal type="char">'\x20'</literal></expr>,

<expr><literal type="char">'\x74'</literal></expr>, <expr><literal type="char">'\x65'</literal></expr>, <expr><literal type="char">'\x73'</literal></expr>, <expr><literal type="char">'\x74'</literal></expr>, <expr><literal type="char">'\x20'</literal></expr>, <expr><literal type="char">'\x62'</literal></expr>, <expr><literal type="char">'\x69'</literal></expr>, <expr><literal type="char">'\x6e'</literal></expr>, <expr><literal type="char">'\x61'</literal></expr>,

<expr><literal type="char">'\x72'</literal></expr>, <expr><literal type="char">'\x79'</literal></expr>, <expr><literal type="char">'\x20'</literal></expr>, <expr><literal type="char">'\x64'</literal></expr>, <expr><literal type="char">'\x61'</literal></expr>, <expr><literal type="char">'\x74'</literal></expr>, <expr><literal type="char">'\x61'</literal></expr>, <expr><literal type="char">'\x20'</literal></expr>, <expr><literal type="char">'\x77'</literal></expr>,

<expr><literal type="char">'\x69'</literal></expr>, <expr><literal type="char">'\x74'</literal></expr>, <expr><literal type="char">'\x68'</literal></expr>, <expr><literal type="char">'\x20'</literal></expr>, <expr><literal type="char">'\x61'</literal></expr>, <expr><literal type="char">'\x6e'</literal></expr>, <expr><literal type="char">'\x20'</literal></expr>, <expr><literal type="char">'\x65'</literal></expr>, <expr><literal type="char">'\x6d'</literal></expr>,

<expr><literal type="char">'\x62'</literal></expr>, <expr><literal type="char">'\x65'</literal></expr>, <expr><literal type="char">'\x64'</literal></expr>, <expr><literal type="char">'\x64'</literal></expr>, <expr><literal type="char">'\x65'</literal></expr>, <expr><literal type="char">'\x64'</literal></expr>, <expr><literal type="char">'\x20'</literal></expr>, <expr><literal type="char">'\x4e'</literal></expr>, <expr><literal type="char">'\x55'</literal></expr>,

<expr><literal type="char">'\x4c'</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<block>{<block_content> <expr><literal type="char">'T'</literal></expr><operator>,</operator> <expr><literal type="char">'h'</literal></expr><operator>,</operator> <expr><literal type="char">'i'</literal></expr><operator>,</operator> <expr><literal type="char">'s'</literal></expr><operator>,</operator> <expr><literal type="char">'\0'</literal></expr><operator>,</operator> <expr><literal type="char">' '</literal></expr><operator>,</operator> <expr><literal type="char">'i'</literal></expr><operator>,</operator> <expr><literal type="char">'s'</literal></expr><operator>,</operator> <expr><literal type="char">' '</literal></expr><operator>,</operator> <expr><literal type="char">'t'</literal></expr><operator>,</operator> <expr><literal type="char">'e'</literal></expr><operator>,</operator> <expr><literal type="char">'s'</literal></expr><operator>,</operator> <expr><literal type="char">'t'</literal></expr><operator>,</operator> <expr><literal type="char">' '</literal></expr><operator>,</operator>

<expr><literal type="char">'b'</literal></expr><operator>,</operator> <expr><literal type="char">'i'</literal></expr><operator>,</operator> <expr><literal type="char">'n'</literal></expr><operator>,</operator> <expr><literal type="char">'a'</literal></expr><operator>,</operator> <expr><literal type="char">'r'</literal></expr><operator>,</operator> <expr><literal type="char">'y'</literal></expr><operator>,</operator> <expr><literal type="char">' '</literal></expr><operator>,</operator> <expr><literal type="char">'d'</literal></expr><operator>,</operator> <expr><literal type="char">'a'</literal></expr><operator>,</operator> <expr><literal type="char">'t'</literal></expr><operator>,</operator> <expr><literal type="char">'a'</literal></expr><operator>,</operator> <expr><literal type="char">' '</literal></expr><operator>,</operator>

<expr><literal type="char">'w'</literal></expr><operator>,</operator> <expr><literal type="char">'i'</literal></expr><operator>,</operator> <expr><literal type="char">'t'</literal></expr><operator>,</operator> <expr><literal type="char">'h'</literal></expr><operator>,</operator> <expr><literal type="char">' '</literal></expr><operator>,</operator> <expr><literal type="char">'a'</literal></expr><operator>,</operator> <expr><literal type="char">'n'</literal></expr><operator>,</operator> <expr><literal type="char">' '</literal></expr><operator>,</operator>

<expr><literal type="char">'e'</literal></expr><operator>,</operator> <expr><literal type="char">'m'</literal></expr><operator>,</operator> <expr><literal type="char">'b'</literal></expr><operator>,</operator> <expr><literal type="char">'e'</literal></expr><operator>,</operator> <expr><literal type="char">'d'</literal></expr><operator>,</operator> <expr><literal type="char">'d'</literal></expr><operator>,</operator> <expr><literal type="char">'e'</literal></expr><operator>,</operator> <expr><literal type="char">'d'</literal></expr><operator>,</operator> <expr><literal type="char">' '</literal></expr><operator>,</operator> <expr><literal type="char">'N'</literal></expr><operator>,</operator> <expr><literal type="char">'U'</literal></expr><operator>,</operator> <expr><literal type="char">'L'</literal></expr></block_content>}</block><empty_stmt>;</empty_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>int</name></type> <name>test</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>URL</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CURL</name> <modifier>*</modifier></type><name>curl</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>res</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><call><name>curl_global_init</name><argument_list>(<argument><expr><name>CURL_GLOBAL_ALL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>CURLE_OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"curl_global_init() failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>TEST_ERR_MAJOR_BAD</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>curl</name> <operator>=</operator> <call><name>curl_easy_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>curl</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"curl_easy_init() failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>curl_global_cleanup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>TEST_ERR_MAJOR_BAD</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>test_setopt</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_URL</name></expr></argument>, <argument><expr><name>URL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LIB545</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>test_setopt</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_POSTFIELDSIZE</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>teststring</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>test_setopt</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_COPYPOSTFIELDS</name></expr></argument>, <argument><expr><name>teststring</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_setopt</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_VERBOSE</name></expr></argument>, <argument><expr><literal type="number">1L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>test_setopt</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_HEADER</name></expr></argument>, <argument><expr><literal type="number">1L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>teststring</name></expr></argument>, <argument><expr><literal type="string">"FAIL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LIB545</name></expr></argument>)</argument_list></call></expr></cpp:if>
<block>{<block_content>

<decl_stmt><decl><type><name>CURL</name> <modifier>*</modifier></type><name>handle2</name></decl>;</decl_stmt>

<expr_stmt><expr><name>handle2</name> <operator>=</operator> <call><name>curl_easy_duphandle</name><argument_list>(<argument><expr><name>curl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>curl_easy_cleanup</name><argument_list>(<argument><expr><name>curl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>curl</name> <operator>=</operator> <name>handle2</name></expr>;</expr_stmt>

</block_content>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>curl_easy_perform</name><argument_list>(<argument><expr><name>curl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>test_cleanup</name>:</label>

<expr_stmt><expr><call><name>curl_easy_cleanup</name><argument_list>(<argument><expr><name>curl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>curl_global_cleanup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><name>res</name></expr>;</return>

</block_content>}</block></function>

</unit>
