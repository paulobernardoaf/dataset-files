<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\curl-analysis\_cppstats\curl\tests\libtest\test.h"><cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CURL_NO_OLDIES</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_setup.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;curl/curl.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SYS_SELECT_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/select.h&gt;</cpp:file></cpp:include>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_UNISTD_H</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TPF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"select.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_printf.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>test_setopt</name><parameter_list>(<parameter><type><name>A</name></type></parameter>,<parameter><type><name>B</name></type></parameter>,<parameter><type><name>C</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if((res = curl_easy_setopt((A), (B), (C))) != CURLE_OK) goto test_cleanup</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>test_multi_setopt</name><parameter_list>(<parameter><type><name>A</name></type></parameter>,<parameter><type><name>B</name></type></parameter>,<parameter><type><name>C</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if((res = curl_multi_setopt((A), (B), (C))) != CURLE_OK) goto test_cleanup</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>extern</specifier> <name>char</name> <modifier>*</modifier></type><name>libtest_arg2</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>extern</specifier> <name>char</name> <modifier>*</modifier></type><name>libtest_arg3</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>test_argc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>test_argv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name><name>struct</name> <name>timeval</name></name></type> <name>tv_test_start</name></decl>;</decl_stmt> 

<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>select_wrapper</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>nfds</name></decl></parameter>, <parameter><decl><type><name>fd_set</name> <modifier>*</modifier></type><name>rd</name></decl></parameter>, <parameter><decl><type><name>fd_set</name> <modifier>*</modifier></type><name>wr</name></decl></parameter>, <parameter><decl><type><name>fd_set</name> <modifier>*</modifier></type><name>exc</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>timeval</name></name> <modifier>*</modifier></type><name>tv</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>wait_ms</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>ms</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>test</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>URL</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><specifier>extern</specifier> <name>char</name> <modifier>*</modifier></type><name>hexdump</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNITTESTS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>unitfail</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_ERR_MAJOR_BAD</name></cpp:macro> <cpp:value>126</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_ERR_RUNS_FOREVER</name></cpp:macro> <cpp:value>125</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_ERR_EASY_INIT</name></cpp:macro> <cpp:value>124</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_ERR_MULTI_INIT</name></cpp:macro> <cpp:value>123</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_ERR_NUM_HANDLES</name></cpp:macro> <cpp:value>122</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_ERR_SELECT</name></cpp:macro> <cpp:value>121</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_ERR_SUCCESS</name></cpp:macro> <cpp:value>120</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_ERR_FAILURE</name></cpp:macro> <cpp:value>119</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_ERR_USAGE</name></cpp:macro> <cpp:value>118</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_ERR_FOPEN</name></cpp:macro> <cpp:value>117</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_ERR_FSTAT</name></cpp:macro> <cpp:value>116</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_ERR_BAD_TIMEOUT</name></cpp:macro> <cpp:value>115</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>exe_easy_init</name><parameter_list>(<parameter><type><name>A</name></type></parameter>,<parameter><type><name>Y</name></type></parameter>,<parameter><type><name>Z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if(((A) = curl_easy_init()) == NULL) { fprintf(stderr, "%s:%d curl_easy_init() failed\n", (Y), (Z)); res = TEST_ERR_EASY_INIT; } } while(0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>res_easy_init</name><parameter_list>(<parameter><type><name>A</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>exe_easy_init((A), (__FILE__), (__LINE__))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>chk_easy_init</name><parameter_list>(<parameter><type><name>A</name></type></parameter>,<parameter><type><name>Y</name></type></parameter>,<parameter><type><name>Z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { exe_easy_init((A), (Y), (Z)); if(res) goto test_cleanup; } while(0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>easy_init</name><parameter_list>(<parameter><type><name>A</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>chk_easy_init((A), (__FILE__), (__LINE__))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>exe_multi_init</name><parameter_list>(<parameter><type><name>A</name></type></parameter>,<parameter><type><name>Y</name></type></parameter>,<parameter><type><name>Z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if(((A) = curl_multi_init()) == NULL) { fprintf(stderr, "%s:%d curl_multi_init() failed\n", (Y), (Z)); res = TEST_ERR_MULTI_INIT; } } while(0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>res_multi_init</name><parameter_list>(<parameter><type><name>A</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>exe_multi_init((A), (__FILE__), (__LINE__))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>chk_multi_init</name><parameter_list>(<parameter><type><name>A</name></type></parameter>,<parameter><type><name>Y</name></type></parameter>,<parameter><type><name>Z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { exe_multi_init((A), (Y), (Z)); if(res) goto test_cleanup; } while(0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>multi_init</name><parameter_list>(<parameter><type><name>A</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>chk_multi_init((A), (__FILE__), (__LINE__))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>exe_easy_setopt</name><parameter_list>(<parameter><type><name>A</name></type></parameter>,<parameter><type><name>B</name></type></parameter>,<parameter><type><name>C</name></type></parameter>,<parameter><type><name>Y</name></type></parameter>,<parameter><type><name>Z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { CURLcode ec; if((ec = curl_easy_setopt((A), (B), (C))) != CURLE_OK) { fprintf(stderr, "%s:%d curl_easy_setopt() failed, " "with code %d (%s)\n", (Y), (Z), (int)ec, curl_easy_strerror(ec)); res = (int)ec; } } while(0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>res_easy_setopt</name><parameter_list>(<parameter><type><name>A</name></type></parameter>, <parameter><type><name>B</name></type></parameter>, <parameter><type><name>C</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>exe_easy_setopt((A), (B), (C), (__FILE__), (__LINE__))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>chk_easy_setopt</name><parameter_list>(<parameter><type><name>A</name></type></parameter>, <parameter><type><name>B</name></type></parameter>, <parameter><type><name>C</name></type></parameter>, <parameter><type><name>Y</name></type></parameter>, <parameter><type><name>Z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { exe_easy_setopt((A), (B), (C), (Y), (Z)); if(res) goto test_cleanup; } while(0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>easy_setopt</name><parameter_list>(<parameter><type><name>A</name></type></parameter>, <parameter><type><name>B</name></type></parameter>, <parameter><type><name>C</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>chk_easy_setopt((A), (B), (C), (__FILE__), (__LINE__))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>exe_multi_setopt</name><parameter_list>(<parameter><type><name>A</name></type></parameter>, <parameter><type><name>B</name></type></parameter>, <parameter><type><name>C</name></type></parameter>, <parameter><type><name>Y</name></type></parameter>, <parameter><type><name>Z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { CURLMcode ec; if((ec = curl_multi_setopt((A), (B), (C))) != CURLM_OK) { fprintf(stderr, "%s:%d curl_multi_setopt() failed, " "with code %d (%s)\n", (Y), (Z), (int)ec, curl_multi_strerror(ec)); res = (int)ec; } } while(0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>res_multi_setopt</name><parameter_list>(<parameter><type><name>A</name></type></parameter>,<parameter><type><name>B</name></type></parameter>,<parameter><type><name>C</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>exe_multi_setopt((A), (B), (C), (__FILE__), (__LINE__))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>chk_multi_setopt</name><parameter_list>(<parameter><type><name>A</name></type></parameter>,<parameter><type><name>B</name></type></parameter>,<parameter><type><name>C</name></type></parameter>,<parameter><type><name>Y</name></type></parameter>,<parameter><type><name>Z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { exe_multi_setopt((A), (B), (C), (Y), (Z)); if(res) goto test_cleanup; } while(0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>multi_setopt</name><parameter_list>(<parameter><type><name>A</name></type></parameter>,<parameter><type><name>B</name></type></parameter>,<parameter><type><name>C</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>chk_multi_setopt((A), (B), (C), (__FILE__), (__LINE__))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>exe_multi_add_handle</name><parameter_list>(<parameter><type><name>A</name></type></parameter>,<parameter><type><name>B</name></type></parameter>,<parameter><type><name>Y</name></type></parameter>,<parameter><type><name>Z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { CURLMcode ec; if((ec = curl_multi_add_handle((A), (B))) != CURLM_OK) { fprintf(stderr, "%s:%d curl_multi_add_handle() failed, " "with code %d (%s)\n", (Y), (Z), (int)ec, curl_multi_strerror(ec)); res = (int)ec; } } while(0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>res_multi_add_handle</name><parameter_list>(<parameter><type><name>A</name></type></parameter>, <parameter><type><name>B</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>exe_multi_add_handle((A), (B), (__FILE__), (__LINE__))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>chk_multi_add_handle</name><parameter_list>(<parameter><type><name>A</name></type></parameter>, <parameter><type><name>B</name></type></parameter>, <parameter><type><name>Y</name></type></parameter>, <parameter><type><name>Z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { exe_multi_add_handle((A), (B), (Y), (Z)); if(res) goto test_cleanup; } while(0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>multi_add_handle</name><parameter_list>(<parameter><type><name>A</name></type></parameter>, <parameter><type><name>B</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>chk_multi_add_handle((A), (B), (__FILE__), (__LINE__))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>exe_multi_remove_handle</name><parameter_list>(<parameter><type><name>A</name></type></parameter>,<parameter><type><name>B</name></type></parameter>,<parameter><type><name>Y</name></type></parameter>,<parameter><type><name>Z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { CURLMcode ec; if((ec = curl_multi_remove_handle((A), (B))) != CURLM_OK) { fprintf(stderr, "%s:%d curl_multi_remove_handle() failed, " "with code %d (%s)\n", (Y), (Z), (int)ec, curl_multi_strerror(ec)); res = (int)ec; } } while(0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>res_multi_remove_handle</name><parameter_list>(<parameter><type><name>A</name></type></parameter>, <parameter><type><name>B</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>exe_multi_remove_handle((A), (B), (__FILE__), (__LINE__))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>chk_multi_remove_handle</name><parameter_list>(<parameter><type><name>A</name></type></parameter>, <parameter><type><name>B</name></type></parameter>, <parameter><type><name>Y</name></type></parameter>, <parameter><type><name>Z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { exe_multi_remove_handle((A), (B), (Y), (Z)); if(res) goto test_cleanup; } while(0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>multi_remove_handle</name><parameter_list>(<parameter><type><name>A</name></type></parameter>, <parameter><type><name>B</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>chk_multi_remove_handle((A), (B), (__FILE__), (__LINE__))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>exe_multi_perform</name><parameter_list>(<parameter><type><name>A</name></type></parameter>,<parameter><type><name>B</name></type></parameter>,<parameter><type><name>Y</name></type></parameter>,<parameter><type><name>Z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { CURLMcode ec; if((ec = curl_multi_perform((A), (B))) != CURLM_OK) { fprintf(stderr, "%s:%d curl_multi_perform() failed, " "with code %d (%s)\n", (Y), (Z), (int)ec, curl_multi_strerror(ec)); res = (int)ec; } else if(*((B)) &lt; 0) { fprintf(stderr, "%s:%d curl_multi_perform() succeeded, " "but returned invalid running_handles value (%d)\n", (Y), (Z), (int)*((B))); res = TEST_ERR_NUM_HANDLES; } } while(0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>res_multi_perform</name><parameter_list>(<parameter><type><name>A</name></type></parameter>, <parameter><type><name>B</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>exe_multi_perform((A), (B), (__FILE__), (__LINE__))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>chk_multi_perform</name><parameter_list>(<parameter><type><name>A</name></type></parameter>, <parameter><type><name>B</name></type></parameter>, <parameter><type><name>Y</name></type></parameter>, <parameter><type><name>Z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { exe_multi_perform((A), (B), (Y), (Z)); if(res) goto test_cleanup; } while(0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>multi_perform</name><parameter_list>(<parameter><type><name>A</name></type></parameter>,<parameter><type><name>B</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>chk_multi_perform((A), (B), (__FILE__), (__LINE__))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>exe_multi_fdset</name><parameter_list>(<parameter><type><name>A</name></type></parameter>, <parameter><type><name>B</name></type></parameter>, <parameter><type><name>C</name></type></parameter>, <parameter><type><name>D</name></type></parameter>, <parameter><type><name>E</name></type></parameter>, <parameter><type><name>Y</name></type></parameter>, <parameter><type><name>Z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { CURLMcode ec; if((ec = curl_multi_fdset((A), (B), (C), (D), (E))) != CURLM_OK) { fprintf(stderr, "%s:%d curl_multi_fdset() failed, " "with code %d (%s)\n", (Y), (Z), (int)ec, curl_multi_strerror(ec)); res = (int)ec; } else if(*((E)) &lt; -1) { fprintf(stderr, "%s:%d curl_multi_fdset() succeeded, " "but returned invalid max_fd value (%d)\n", (Y), (Z), (int)*((E))); res = TEST_ERR_NUM_HANDLES; } } while(0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>res_multi_fdset</name><parameter_list>(<parameter><type><name>A</name></type></parameter>, <parameter><type><name>B</name></type></parameter>, <parameter><type><name>C</name></type></parameter>, <parameter><type><name>D</name></type></parameter>, <parameter><type><name>E</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>exe_multi_fdset((A), (B), (C), (D), (E), (__FILE__), (__LINE__))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>chk_multi_fdset</name><parameter_list>(<parameter><type><name>A</name></type></parameter>, <parameter><type><name>B</name></type></parameter>, <parameter><type><name>C</name></type></parameter>, <parameter><type><name>D</name></type></parameter>, <parameter><type><name>E</name></type></parameter>, <parameter><type><name>Y</name></type></parameter>, <parameter><type><name>Z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { exe_multi_fdset((A), (B), (C), (D), (E), (Y), (Z)); if(res) goto test_cleanup; } while(0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>multi_fdset</name><parameter_list>(<parameter><type><name>A</name></type></parameter>, <parameter><type><name>B</name></type></parameter>, <parameter><type><name>C</name></type></parameter>, <parameter><type><name>D</name></type></parameter>, <parameter><type><name>E</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>chk_multi_fdset((A), (B), (C), (D), (E), (__FILE__), (__LINE__))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>exe_multi_timeout</name><parameter_list>(<parameter><type><name>A</name></type></parameter>,<parameter><type><name>B</name></type></parameter>,<parameter><type><name>Y</name></type></parameter>,<parameter><type><name>Z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { CURLMcode ec; if((ec = curl_multi_timeout((A), (B))) != CURLM_OK) { fprintf(stderr, "%s:%d curl_multi_timeout() failed, " "with code %d (%s)\n", (Y), (Z), (int)ec, curl_multi_strerror(ec)); res = (int)ec; } else if(*((B)) &lt; -1L) { fprintf(stderr, "%s:%d curl_multi_timeout() succeeded, " "but returned invalid timeout value (%ld)\n", (Y), (Z), (long)*((B))); res = TEST_ERR_BAD_TIMEOUT; } } while(0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>res_multi_timeout</name><parameter_list>(<parameter><type><name>A</name></type></parameter>, <parameter><type><name>B</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>exe_multi_timeout((A), (B), (__FILE__), (__LINE__))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>chk_multi_timeout</name><parameter_list>(<parameter><type><name>A</name></type></parameter>, <parameter><type><name>B</name></type></parameter>, <parameter><type><name>Y</name></type></parameter>, <parameter><type><name>Z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { exe_multi_timeout((A), (B), (Y), (Z)); if(res) goto test_cleanup; } while(0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>multi_timeout</name><parameter_list>(<parameter><type><name>A</name></type></parameter>, <parameter><type><name>B</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>chk_multi_timeout((A), (B), (__FILE__), (__LINE__))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>exe_multi_poll</name><parameter_list>(<parameter><type><name>A</name></type></parameter>,<parameter><type><name>B</name></type></parameter>,<parameter><type><name>C</name></type></parameter>,<parameter><type><name>D</name></type></parameter>,<parameter><type><name>E</name></type></parameter>,<parameter><type><name>Y</name></type></parameter>,<parameter><type><name>Z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { CURLMcode ec; if((ec = curl_multi_poll((A), (B), (C), (D), (E))) != CURLM_OK) { fprintf(stderr, "%s:%d curl_multi_poll() failed, " "with code %d (%s)\n", (Y), (Z), (int)ec, curl_multi_strerror(ec)); res = (int)ec; } else if(*((E)) &lt; 0) { fprintf(stderr, "%s:%d curl_multi_poll() succeeded, " "but returned invalid numfds value (%d)\n", (Y), (Z), (int)*((E))); res = TEST_ERR_NUM_HANDLES; } } while(0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>res_multi_poll</name><parameter_list>(<parameter><type><name>A</name></type></parameter>, <parameter><type><name>B</name></type></parameter>, <parameter><type><name>C</name></type></parameter>, <parameter><type><name>D</name></type></parameter>, <parameter><type><name>E</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>exe_multi_poll((A), (B), (C), (D), (E), (__FILE__), (__LINE__))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>chk_multi_poll</name><parameter_list>(<parameter><type><name>A</name></type></parameter>, <parameter><type><name>B</name></type></parameter>, <parameter><type><name>C</name></type></parameter>, <parameter><type><name>D</name></type></parameter>, <parameter><type><name>E</name></type></parameter>, <parameter><type><name>Y</name></type></parameter>, <parameter><type><name>Z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { exe_multi_poll((A), (B), (C), (D), (E), (Y), (Z)); if(res) goto test_cleanup; } while(0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>multi_poll</name><parameter_list>(<parameter><type><name>A</name></type></parameter>, <parameter><type><name>B</name></type></parameter>, <parameter><type><name>C</name></type></parameter>, <parameter><type><name>D</name></type></parameter>, <parameter><type><name>E</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>chk_multi_poll((A), (B), (C), (D), (E), (__FILE__), (__LINE__))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>exe_multi_wakeup</name><parameter_list>(<parameter><type><name>A</name></type></parameter>,<parameter><type><name>Y</name></type></parameter>,<parameter><type><name>Z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { CURLMcode ec; if((ec = curl_multi_wakeup((A))) != CURLM_OK) { fprintf(stderr, "%s:%d curl_multi_wakeup() failed, " "with code %d (%s)\n", (Y), (Z), (int)ec, curl_multi_strerror(ec)); res = (int)ec; } } while(0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>res_multi_wakeup</name><parameter_list>(<parameter><type><name>A</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>exe_multi_wakeup((A), (__FILE__), (__LINE__))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>chk_multi_wakeup</name><parameter_list>(<parameter><type><name>A</name></type></parameter>, <parameter><type><name>Y</name></type></parameter>, <parameter><type><name>Z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { exe_multi_wakeup((A), (Y), (Z)); if(res) goto test_cleanup; } while(0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>multi_wakeup</name><parameter_list>(<parameter><type><name>A</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>chk_multi_wakeup((A), (__FILE__), (__LINE__))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>exe_select_test</name><parameter_list>(<parameter><type><name>A</name></type></parameter>, <parameter><type><name>B</name></type></parameter>, <parameter><type><name>C</name></type></parameter>, <parameter><type><name>D</name></type></parameter>, <parameter><type><name>E</name></type></parameter>, <parameter><type><name>Y</name></type></parameter>, <parameter><type><name>Z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { int ec; if(select_wrapper((A), (B), (C), (D), (E)) == -1) { ec = SOCKERRNO; fprintf(stderr, "%s:%d select() failed, with " "errno %d (%s)\n", (Y), (Z), ec, strerror(ec)); res = TEST_ERR_SELECT; } } while(0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>res_select_test</name><parameter_list>(<parameter><type><name>A</name></type></parameter>, <parameter><type><name>B</name></type></parameter>, <parameter><type><name>C</name></type></parameter>, <parameter><type><name>D</name></type></parameter>, <parameter><type><name>E</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>exe_select_test((A), (B), (C), (D), (E), (__FILE__), (__LINE__))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>chk_select_test</name><parameter_list>(<parameter><type><name>A</name></type></parameter>, <parameter><type><name>B</name></type></parameter>, <parameter><type><name>C</name></type></parameter>, <parameter><type><name>D</name></type></parameter>, <parameter><type><name>E</name></type></parameter>, <parameter><type><name>Y</name></type></parameter>, <parameter><type><name>Z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { exe_select_test((A), (B), (C), (D), (E), (Y), (Z)); if(res) goto test_cleanup; } while(0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>select_test</name><parameter_list>(<parameter><type><name>A</name></type></parameter>, <parameter><type><name>B</name></type></parameter>, <parameter><type><name>C</name></type></parameter>, <parameter><type><name>D</name></type></parameter>, <parameter><type><name>E</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>chk_select_test((A), (B), (C), (D), (E), (__FILE__), (__LINE__))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>start_test_timing</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>do { tv_test_start = tutil_tvnow(); } while(0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>exe_test_timedout</name><parameter_list>(<parameter><type><name>Y</name></type></parameter>,<parameter><type><name>Z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if(tutil_tvdiff(tutil_tvnow(), tv_test_start) &gt; TEST_HANG_TIMEOUT) { fprintf(stderr, "%s:%d ABORTING TEST, since it seems " "that it would have run forever.\n", (Y), (Z)); res = TEST_ERR_RUNS_FOREVER; } } while(0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>res_test_timedout</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>exe_test_timedout((__FILE__), (__LINE__))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>chk_test_timedout</name><parameter_list>(<parameter><type><name>Y</name></type></parameter>, <parameter><type><name>Z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { exe_test_timedout(Y, Z); if(res) goto test_cleanup; } while(0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>abort_on_test_timeout</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>chk_test_timedout((__FILE__), (__LINE__))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>exe_global_init</name><parameter_list>(<parameter><type><name>A</name></type></parameter>,<parameter><type><name>Y</name></type></parameter>,<parameter><type><name>Z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { CURLcode ec; if((ec = curl_global_init((A))) != CURLE_OK) { fprintf(stderr, "%s:%d curl_global_init() failed, " "with code %d (%s)\n", (Y), (Z), (int)ec, curl_easy_strerror(ec)); res = (int)ec; } } while(0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>res_global_init</name><parameter_list>(<parameter><type><name>A</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>exe_global_init((A), (__FILE__), (__LINE__))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>chk_global_init</name><parameter_list>(<parameter><type><name>A</name></type></parameter>, <parameter><type><name>Y</name></type></parameter>, <parameter><type><name>Z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { exe_global_init((A), (Y), (Z)); if(res) return res; } while(0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>global_init</name><parameter_list>(<parameter><type><name>A</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>chk_global_init((A), (__FILE__), (__LINE__))</cpp:value></cpp:define>

</unit>
