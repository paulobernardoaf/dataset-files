<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\curl-analysis\_cppstats\curl\tests\libtest\lib1515.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"test.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"testutil.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"warnless.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memdebug.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_HANG_TIMEOUT</name></cpp:macro> <cpp:value>60 * 1000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DNS_TIMEOUT</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sleep</name><parameter_list>(<parameter><type><name>sec</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>Sleep ((sec)*1000)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name></type> <name>debug_callback</name><parameter_list>(<parameter><decl><type><name>CURL</name> <modifier>*</modifier></type><name>curl</name></decl></parameter>, <parameter><decl><type><name>curl_infotype</name></type> <name>info</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>curl</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>ptr</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>info</name> <operator>==</operator> <name>CURLINFO_TEXT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"debug: %.*s"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>len</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>do_one_request</name><parameter_list>(<parameter><decl><type><name>CURLM</name> <modifier>*</modifier></type><name>m</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>URL</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>resolve</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CURL</name> <modifier>*</modifier></type><name>curls</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>curl_slist</name></name> <modifier>*</modifier></type><name>resolve_list</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>still_running</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CURLMsg</name> <modifier>*</modifier></type><name>msg</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>msgs_left</name></decl>;</decl_stmt>

<expr_stmt><expr><name>resolve_list</name> <operator>=</operator> <call><name>curl_slist_append</name><argument_list>(<argument><expr><name>resolve_list</name></expr></argument>, <argument><expr><name>resolve</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>easy_init</name><argument_list>(<argument><expr><name>curls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>easy_setopt</name><argument_list>(<argument><expr><name>curls</name></expr></argument>, <argument><expr><name>CURLOPT_URL</name></expr></argument>, <argument><expr><name>URL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>easy_setopt</name><argument_list>(<argument><expr><name>curls</name></expr></argument>, <argument><expr><name>CURLOPT_RESOLVE</name></expr></argument>, <argument><expr><name>resolve_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>easy_setopt</name><argument_list>(<argument><expr><name>curls</name></expr></argument>, <argument><expr><name>CURLOPT_DEBUGFUNCTION</name></expr></argument>, <argument><expr><name>debug_callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>easy_setopt</name><argument_list>(<argument><expr><name>curls</name></expr></argument>, <argument><expr><name>CURLOPT_VERBOSE</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>easy_setopt</name><argument_list>(<argument><expr><name>curls</name></expr></argument>, <argument><expr><name>CURLOPT_DNS_CACHE_TIMEOUT</name></expr></argument>, <argument><expr><name>DNS_TIMEOUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>multi_add_handle</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>curls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>multi_perform</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>still_running</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>abort_on_test_timeout</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<while>while<condition>(<expr><name>still_running</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>timeout</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>fd_set</name></type> <name>fdread</name></decl>, <decl><type ref="prev"/><name>fdwrite</name></decl>, <decl><type ref="prev"/><name>fdexcep</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>maxfd</name> <init>= <expr><operator>-</operator><literal type="number">99</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>FD_ZERO</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fdread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FD_ZERO</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fdwrite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FD_ZERO</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fdexcep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>timeout</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>timeout</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>multi_fdset</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fdread</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fdwrite</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fdexcep</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>maxfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>select_test</name><argument_list>(<argument><expr><name>maxfd</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>fdread</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fdwrite</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fdexcep</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>abort_on_test_timeout</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>multi_perform</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>still_running</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>abort_on_test_timeout</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<do>do <block>{<block_content>

<expr_stmt><expr><name>msg</name> <operator>=</operator> <call><name>curl_multi_info_read</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>msgs_left</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>msg</name> <operator>&amp;&amp;</operator> <name><name>msg</name><operator>-&gt;</operator><name>msg</name></name> <operator>==</operator> <name>CURLMSG_DONE</name> <operator>&amp;&amp;</operator> <name><name>msg</name><operator>-&gt;</operator><name>easy_handle</name></name> <operator>==</operator> <name>curls</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>res</name> <operator>=</operator> <name><name>msg</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>result</name></name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block> while<condition>(<expr><name>msg</name></expr>)</condition>;</do>

<label><name>test_cleanup</name>:</label>

<expr_stmt><expr><call><name>curl_multi_remove_handle</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>curls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>curl_easy_cleanup</name><argument_list>(<argument><expr><name>curls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>curl_slist_free_all</name><argument_list>(<argument><expr><name>resolve_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>test</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>URL</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CURLM</name> <modifier>*</modifier></type><name>multi</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>address</name> <init>= <expr><name>libtest_arg2</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>port</name> <init>= <expr><name>libtest_arg3</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>path</name> <init>= <expr><name>URL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>dns_entry</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msnprintf</name><argument_list>(<argument><expr><name>dns_entry</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>dns_entry</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"testserver.example.com:%s:%s"</literal></expr></argument>,

<argument><expr><name>port</name></expr></argument>, <argument><expr><name>address</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>start_test_timing</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>global_init</name><argument_list>(<argument><expr><name>CURL_GLOBAL_ALL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>multi_init</name><argument_list>(<argument><expr><name>multi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>target_url</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msnprintf</name><argument_list>(<argument><expr><name>target_url</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>target_url</name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><literal type="string">"http://testserver.example.com:%s/%s%04d"</literal></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>do_one_request</name><argument_list>(<argument><expr><name>multi</name></expr></argument>, <argument><expr><name>target_url</name></expr></argument>, <argument><expr><name>dns_entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>res</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>test_cleanup</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>sleep</name><argument_list>(<argument><expr><name>DNS_TIMEOUT</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<label><name>test_cleanup</name>:</label>

<expr_stmt><expr><call><name>curl_multi_cleanup</name><argument_list>(<argument><expr><name>multi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>curl_global_cleanup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>int</name><operator>)</operator> <name>res</name></expr>;</return>

</block_content>}</block></function>

</unit>
