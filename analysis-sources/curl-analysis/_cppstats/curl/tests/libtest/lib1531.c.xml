<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\curl-analysis\_cppstats\curl\tests\libtest\lib1531.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"test.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"testutil.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"warnless.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memdebug.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_HANG_TIMEOUT</name></cpp:macro> <cpp:value>60 * 1000</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <specifier>const</specifier></type> <name><name>testData</name><index>[]</index></name> <init>= <expr><literal type="string">".abc\0xyz"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>off_t</name> <specifier>const</specifier></type> <name>testDataSize</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>testData</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>test</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>URL</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CURL</name> <modifier>*</modifier></type><name>easy</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CURLM</name> <modifier>*</modifier></type><name>multi_handle</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>still_running</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>CURLMsg</name> <modifier>*</modifier></type><name>msg</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>msgs_left</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>start_test_timing</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>global_init</name><argument_list>(<argument><expr><name>CURL_GLOBAL_ALL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>easy</name> <operator>=</operator> <call><name>curl_easy_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>multi_handle</name> <operator>=</operator> <call><name>curl_multi_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>curl_multi_add_handle</name><argument_list>(<argument><expr><name>multi_handle</name></expr></argument>, <argument><expr><name>easy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name>easy</name></expr></argument>, <argument><expr><name>CURLOPT_URL</name></expr></argument>, <argument><expr><name>URL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name>easy</name></expr></argument>, <argument><expr><name>CURLOPT_POSTFIELDSIZE_LARGE</name></expr></argument>,

<argument><expr><operator>(</operator><name>curl_off_t</name><operator>)</operator><name>testDataSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name>easy</name></expr></argument>, <argument><expr><name>CURLOPT_POSTFIELDS</name></expr></argument>, <argument><expr><name>testData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>curl_multi_perform</name><argument_list>(<argument><expr><name>multi_handle</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>still_running</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>abort_on_test_timeout</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<do>do <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>timeout</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>CURLMcode</name></type> <name>mc</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>fd_set</name></type> <name>fdread</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>fd_set</name></type> <name>fdwrite</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>fd_set</name></type> <name>fdexcep</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>maxfd</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>curl_timeo</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>FD_ZERO</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fdread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FD_ZERO</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fdwrite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FD_ZERO</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fdexcep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>timeout</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>timeout</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>curl_multi_timeout</name><argument_list>(<argument><expr><name>multi_handle</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>curl_timeo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>curl_timeo</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>timeout</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <name>curl_timeo</name> <operator>/</operator> <literal type="number">1000</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>timeout</name><operator>.</operator><name>tv_sec</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>timeout</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>timeout</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <operator>(</operator><name>curl_timeo</name> <operator>%</operator> <literal type="number">1000</literal><operator>)</operator> <operator>*</operator> <literal type="number">1000</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>mc</name> <operator>=</operator> <call><name>curl_multi_fdset</name><argument_list>(<argument><expr><name>multi_handle</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fdread</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fdwrite</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fdexcep</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>maxfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>mc</name> <operator>!=</operator> <name>CURLM_OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"curl_multi_fdset() failed, code %d.\n"</literal></expr></argument>, <argument><expr><name>mc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>maxfd</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>Sleep</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>wait</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">100</literal> <operator>*</operator> <literal type="number">1000</literal></expr> }</block></expr></init></decl>;</decl_stmt> 

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>select</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wait</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>select</name><argument_list>(<argument><expr><name>maxfd</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>fdread</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fdwrite</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fdexcep</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<switch>switch<condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>

<case>case <expr><operator>-</operator><literal type="number">1</literal></expr>:</case>

<break>break;</break>

<case>case <expr><literal type="number">0</literal></expr>:</case> 

<default>default:</default> 

<expr_stmt><expr><call><name>curl_multi_perform</name><argument_list>(<argument><expr><name>multi_handle</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>still_running</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>abort_on_test_timeout</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block> while<condition>(<expr><name>still_running</name></expr>)</condition>;</do>

<do>do <block>{<block_content>

<expr_stmt><expr><name>msg</name> <operator>=</operator> <call><name>curl_multi_info_read</name><argument_list>(<argument><expr><name>multi_handle</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>msgs_left</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>msg</name> <operator>&amp;&amp;</operator> <name><name>msg</name><operator>-&gt;</operator><name>msg</name></name> <operator>==</operator> <name>CURLMSG_DONE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"HTTP transfer completed with status %d\n"</literal></expr></argument>, <argument><expr><name><name>msg</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>result</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>abort_on_test_timeout</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block> while<condition>(<expr><name>msg</name></expr>)</condition>;</do>

<label><name>test_cleanup</name>:</label>

<expr_stmt><expr><call><name>curl_multi_cleanup</name><argument_list>(<argument><expr><name>multi_handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>curl_easy_cleanup</name><argument_list>(<argument><expr><name>easy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>curl_global_cleanup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></function>

</unit>
