<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\curl-analysis\_cppstats\curl\tests\server\rtspd.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"server_setup.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SIGNAL_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;signal.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_NETINET_IN_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet/in.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_NETINET_IN6_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet/in6.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ARPA_INET_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;arpa/inet.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_NETDB_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netdb.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_NETINET_TCP_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet/tcp.h&gt;</cpp:file></cpp:include> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENABLE_CURLX_PRINTF</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curlx.h"</cpp:file></cpp:include> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"getpart.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"server_sockaddr.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memdebug.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_WINSOCK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>EINTR</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EINTR</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define> 

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ERANGE</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ERANGE</name></cpp:macro> <cpp:value>34</cpp:value></cpp:define> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_IPV6</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>use_ipv6</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ipv_inuse</name> <init>= <expr><literal type="string">"IPv4"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>serverlogslocked</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REQBUFSIZ</name></cpp:macro> <cpp:value>150000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REQBUFSIZ_TXT</name></cpp:macro> <cpp:value>"149999"</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>long</name></type> <name>prevtestno</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>long</name></type> <name>prevpartno</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>prevbounce</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RCMD_NORMALREQ</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RCMD_IDLE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RCMD_STREAM</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define> 

<typedef>typedef <type><enum>enum <block>{

<decl><name>RPROT_NONE</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>RPROT_RTSP</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,

<decl><name>RPROT_HTTP</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>

}</block></enum></type> <name>reqprot_t</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SET_RTP_PKT_CHN</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((p)[1] = (unsigned char)((c) &amp; 0xFF))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SET_RTP_PKT_LEN</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>l</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((p)[2] = (unsigned char)(((l) &gt;&gt; 8) &amp; 0xFF)), ((p)[3] = (unsigned char)((l) &amp; 0xFF)))</cpp:value></cpp:define>

<struct>struct <name>httprequest</name> <block>{

<decl_stmt><decl><type><name>char</name></type> <name><name>reqbuf</name><index>[<expr><name>REQBUFSIZ</name></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>size_t</name></type> <name>checkindex</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>size_t</name></type> <name>offset</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>long</name></type> <name>testno</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>long</name></type> <name>partno</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>bool</name></type> <name>open</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>bool</name></type> <name>auth_req</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>bool</name></type> <name>auth</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>size_t</name></type> <name>cl</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>bool</name></type> <name>digest</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>bool</name></type> <name>ntlm</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>pipe</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>skip</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>rcmd</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>reqprot_t</name></type> <name>protocol</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>prot_version</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>bool</name></type> <name>pipelining</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>rtp_buffer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>rtp_buffersize</name></decl>;</decl_stmt>

}</block>;</struct>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>ProcessRequest</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>httprequest</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>storerequest</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>reqbuf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>totalsize</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_PORT</name></cpp:macro> <cpp:value>8999</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DEFAULT_LOGFILE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_LOGFILE</name></cpp:macro> <cpp:value>"log/rtspd.log"</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>serverlogfile</name> <init>= <expr><name>DEFAULT_LOGFILE</name></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RTSPDVERSION</name></cpp:macro> <cpp:value>"curl test suite RTSP server/0.1"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REQUEST_DUMP</name></cpp:macro> <cpp:value>"log/server.input"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RESPONSE_DUMP</name></cpp:macro> <cpp:value>"log/server.response"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAXDOCNAMELEN</name></cpp:macro> <cpp:value>140000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAXDOCNAMELEN_TXT</name></cpp:macro> <cpp:value>"139999"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REQUEST_KEYWORD_SIZE</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REQUEST_KEYWORD_SIZE_TXT</name></cpp:macro> <cpp:value>"255"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMD_AUTH_REQUIRED</name></cpp:macro> <cpp:value>"auth_required"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMD_IDLE</name></cpp:macro> <cpp:value>"idle"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMD_STREAM</name></cpp:macro> <cpp:value>"stream"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>END_OF_HEADERS</name></cpp:macro> <cpp:value>"\r\n\r\n"</cpp:value></cpp:define>

<enum>enum <block>{

<decl><name>DOCNUMBER_NOTHING</name> <init>= <expr><operator>-</operator><literal type="number">7</literal></expr></init></decl>,

<decl><name>DOCNUMBER_QUIT</name> <init>= <expr><operator>-</operator><literal type="number">6</literal></expr></init></decl>,

<decl><name>DOCNUMBER_BADCONNECT</name> <init>= <expr><operator>-</operator><literal type="number">5</literal></expr></init></decl>,

<decl><name>DOCNUMBER_INTERNAL</name> <init>= <expr><operator>-</operator><literal type="number">4</literal></expr></init></decl>,

<decl><name>DOCNUMBER_CONNECT</name> <init>= <expr><operator>-</operator><literal type="number">3</literal></expr></init></decl>,

<decl><name>DOCNUMBER_WERULEZ</name> <init>= <expr><operator>-</operator><literal type="number">2</literal></expr></init></decl>,

<decl><name>DOCNUMBER_404</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>

}</block>;</enum>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>docquit</name> <init>=

<expr><literal type="string">"HTTP/1.1 200 Goodbye"</literal> <name>END_OF_HEADERS</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>docconnect</name> <init>=

<expr><literal type="string">"HTTP/1.1 200 Mighty fine indeed"</literal> <name>END_OF_HEADERS</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>docbadconnect</name> <init>=

<expr><literal type="string">"HTTP/1.1 501 Forbidden you fool"</literal> <name>END_OF_HEADERS</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>doc404_HTTP</name> <init>= <expr><literal type="string">"HTTP/1.1 404 Not Found\r\n"</literal>

<literal type="string">"Server: "</literal> <name>RTSPDVERSION</name> <literal type="string">"\r\n"</literal>

<literal type="string">"Connection: close\r\n"</literal>

<literal type="string">"Content-Type: text/html"</literal>

<name>END_OF_HEADERS</name>

<literal type="string">"&lt;!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML 2.0//EN\"&gt;\n"</literal>

<literal type="string">"&lt;HTML&gt;&lt;HEAD&gt;\n"</literal>

<literal type="string">"&lt;TITLE&gt;404 Not Found&lt;/TITLE&gt;\n"</literal>

<literal type="string">"&lt;/HEAD&gt;&lt;BODY&gt;\n"</literal>

<literal type="string">"&lt;H1&gt;Not Found&lt;/H1&gt;\n"</literal>

<literal type="string">"The requested URL was not found on this server.\n"</literal>

<literal type="string">"&lt;P&gt;&lt;HR&gt;&lt;ADDRESS&gt;"</literal> <name>RTSPDVERSION</name> <literal type="string">"&lt;/ADDRESS&gt;\n"</literal> <literal type="string">"&lt;/BODY&gt;&lt;/HTML&gt;\n"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>doc404_RTSP</name> <init>= <expr><literal type="string">"RTSP/1.0 404 Not Found\r\n"</literal>

<literal type="string">"Server: "</literal> <name>RTSPDVERSION</name>

<name>END_OF_HEADERS</name></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RTP_DATA_SIZE</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>RTP_DATA</name> <init>= <expr><literal type="string">"$_1234\n\0asdf"</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SIGINTERRUPT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>siginterrupt</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {} while(0)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <function_decl><type><name>RETSIGTYPE</name></type> (<modifier>*</modifier><name>SIGHANDLER_T</name>)<parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIGHUP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>SIGHANDLER_T</name></type> <name>old_sighup_handler</name> <init>= <expr><name>SIG_ERR</name></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIGPIPE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>SIGHANDLER_T</name></type> <name>old_sigpipe_handler</name> <init>= <expr><name>SIG_ERR</name></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIGALRM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>SIGHANDLER_T</name></type> <name>old_sigalrm_handler</name> <init>= <expr><name>SIG_ERR</name></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIGINT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>SIGHANDLER_T</name></type> <name>old_sigint_handler</name> <init>= <expr><name>SIG_ERR</name></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIGTERM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>SIGHANDLER_T</name></type> <name>old_sigterm_handler</name> <init>= <expr><name>SIG_ERR</name></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIGBREAK</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><specifier>static</specifier> <name>SIGHANDLER_T</name></type> <name>old_sigbreak_handler</name> <init>= <expr><name>SIG_ERR</name></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>SIG_ATOMIC_T</name></type> <name>got_exit_signal</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>volatile</specifier> <name>int</name></type> <name>exit_signal</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>RETSIGTYPE</name></type> <name>exit_signal_handler</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>signum</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>old_errno</name> <init>= <expr><name>errno</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>got_exit_signal</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>got_exit_signal</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>exit_signal</name> <operator>=</operator> <name>signum</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>signal</name><argument_list>(<argument><expr><name>signum</name></expr></argument>, <argument><expr><name>exit_signal_handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>old_errno</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>install_signal_handlers</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIGHUP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>old_sighup_handler</name> <operator>=</operator> <call><name>signal</name><argument_list>(<argument><expr><name>SIGHUP</name></expr></argument>, <argument><expr><name>SIG_IGN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>old_sighup_handler</name> <operator>==</operator> <name>SIG_ERR</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"cannot install SIGHUP handler: %s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIGPIPE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>old_sigpipe_handler</name> <operator>=</operator> <call><name>signal</name><argument_list>(<argument><expr><name>SIGPIPE</name></expr></argument>, <argument><expr><name>SIG_IGN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>old_sigpipe_handler</name> <operator>==</operator> <name>SIG_ERR</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"cannot install SIGPIPE handler: %s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIGALRM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>old_sigalrm_handler</name> <operator>=</operator> <call><name>signal</name><argument_list>(<argument><expr><name>SIGALRM</name></expr></argument>, <argument><expr><name>SIG_IGN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>old_sigalrm_handler</name> <operator>==</operator> <name>SIG_ERR</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"cannot install SIGALRM handler: %s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIGINT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>old_sigint_handler</name> <operator>=</operator> <call><name>signal</name><argument_list>(<argument><expr><name>SIGINT</name></expr></argument>, <argument><expr><name>exit_signal_handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>old_sigint_handler</name> <operator>==</operator> <name>SIG_ERR</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"cannot install SIGINT handler: %s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>siginterrupt</name><argument_list>(<argument><expr><name>SIGINT</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIGTERM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>old_sigterm_handler</name> <operator>=</operator> <call><name>signal</name><argument_list>(<argument><expr><name>SIGTERM</name></expr></argument>, <argument><expr><name>exit_signal_handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>old_sigterm_handler</name> <operator>==</operator> <name>SIG_ERR</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"cannot install SIGTERM handler: %s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>siginterrupt</name><argument_list>(<argument><expr><name>SIGTERM</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIGBREAK</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><name>old_sigbreak_handler</name> <operator>=</operator> <call><name>signal</name><argument_list>(<argument><expr><name>SIGBREAK</name></expr></argument>, <argument><expr><name>exit_signal_handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>old_sigbreak_handler</name> <operator>==</operator> <name>SIG_ERR</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"cannot install SIGBREAK handler: %s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>siginterrupt</name><argument_list>(<argument><expr><name>SIGBREAK</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>restore_signal_handlers</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIGHUP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name>SIG_ERR</name> <operator>!=</operator> <name>old_sighup_handler</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>signal</name><argument_list>(<argument><expr><name>SIGHUP</name></expr></argument>, <argument><expr><name>old_sighup_handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIGPIPE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name>SIG_ERR</name> <operator>!=</operator> <name>old_sigpipe_handler</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>signal</name><argument_list>(<argument><expr><name>SIGPIPE</name></expr></argument>, <argument><expr><name>old_sigpipe_handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIGALRM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name>SIG_ERR</name> <operator>!=</operator> <name>old_sigalrm_handler</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>signal</name><argument_list>(<argument><expr><name>SIGALRM</name></expr></argument>, <argument><expr><name>old_sigalrm_handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIGINT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name>SIG_ERR</name> <operator>!=</operator> <name>old_sigint_handler</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>signal</name><argument_list>(<argument><expr><name>SIGINT</name></expr></argument>, <argument><expr><name>old_sigint_handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIGTERM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name>SIG_ERR</name> <operator>!=</operator> <name>old_sigterm_handler</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>signal</name><argument_list>(<argument><expr><name>SIGTERM</name></expr></argument>, <argument><expr><name>old_sigterm_handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIGBREAK</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if<condition>(<expr><name>SIG_ERR</name> <operator>!=</operator> <name>old_sigbreak_handler</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>signal</name><argument_list>(<argument><expr><name>SIGBREAK</name></expr></argument>, <argument><expr><name>old_sigbreak_handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ProcessRequest</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>httprequest</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>line</name> <init>= <expr><operator>&amp;</operator><name><name>req</name><operator>-&gt;</operator><name>reqbuf</name><index>[<expr><name><name>req</name><operator>-&gt;</operator><name>checkindex</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>chunked</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>request</name><index>[<expr><name>REQUEST_KEYWORD_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>doc</name><index>[<expr><name>MAXDOCNAMELEN</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>prot_str</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>prot_major</name></decl>, <decl><type ref="prev"/><name>prot_minor</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>end</name> <init>= <expr><call><name>strstr</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>END_OF_HEADERS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"ProcessRequest() called with testno %ld and line [%s]"</literal></expr></argument>,

<argument><expr><name><name>req</name><operator>-&gt;</operator><name>testno</name></name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>req</name><operator>-&gt;</operator><name>testno</name></name> <operator>==</operator> <name>DOCNUMBER_NOTHING</name><operator>)</operator> <operator>&amp;&amp;</operator>

<call><name>sscanf</name><argument_list>(<argument><expr><name>line</name></expr></argument>,

<argument><expr><literal type="string">"%"</literal> <name>REQUEST_KEYWORD_SIZE_TXT</name><literal type="string">"s %"</literal> <name>MAXDOCNAMELEN_TXT</name> <literal type="string">"s %4s/%d.%d"</literal></expr></argument>,

<argument><expr><name>request</name></expr></argument>,

<argument><expr><name>doc</name></expr></argument>,

<argument><expr><name>prot_str</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>prot_major</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>prot_minor</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">5</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>logbuf</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>prot_str</name></expr></argument>, <argument><expr><literal type="string">"HTTP"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>protocol</name></name> <operator>=</operator> <name>RPROT_HTTP</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>prot_str</name></expr></argument>, <argument><expr><literal type="string">"RTSP"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>protocol</name></name> <operator>=</operator> <name>RPROT_RTSP</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>protocol</name></name> <operator>=</operator> <name>RPROT_NONE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"got unknown protocol %s"</literal></expr></argument>, <argument><expr><name>prot_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>prot_version</name></name> <operator>=</operator> <name>prot_major</name><operator>*</operator><literal type="number">10</literal> <operator>+</operator> <name>prot_minor</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>strrchr</name><argument_list>(<argument><expr><name>doc</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>ptr</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>stream</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>filename</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><call><name>strlen</name><argument_list>(<argument><expr><name>doc</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">200</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msnprintf</name><argument_list>(<argument><expr><name>logbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>logbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"Got request: %s %s %s/%d.%d"</literal></expr></argument>,

<argument><expr><name>request</name></expr></argument>, <argument><expr><name>doc</name></expr></argument>, <argument><expr><name>prot_str</name></expr></argument>, <argument><expr><name>prot_major</name></expr></argument>, <argument><expr><name>prot_minor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msnprintf</name><argument_list>(<argument><expr><name>logbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>logbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"Got a *HUGE* request %s/%d.%d"</literal></expr></argument>,

<argument><expr><name>prot_str</name></expr></argument>, <argument><expr><name>prot_major</name></expr></argument>, <argument><expr><name>prot_minor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>logbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><literal type="string">"/verifiedserver"</literal></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"Are-we-friendly question received"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>testno</name></name> <operator>=</operator> <name>DOCNUMBER_WERULEZ</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return> 

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><literal type="string">"/quit"</literal></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"Request-to-quit received"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>testno</name></name> <operator>=</operator> <name>DOCNUMBER_QUIT</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt> 

<while>while<condition>(<expr><operator>*</operator><name>ptr</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>ISDIGIT</name><argument_list>(<argument><expr><operator>*</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>testno</name></name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>req</name><operator>-&gt;</operator><name>testno</name></name> <operator>&gt;</operator> <literal type="number">10000</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>partno</name></name> <operator>=</operator> <name><name>req</name><operator>-&gt;</operator><name>testno</name></name> <operator>%</operator> <literal type="number">10000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>testno</name></name> <operator>/=</operator> <literal type="number">10000</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>partno</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>msnprintf</name><argument_list>(<argument><expr><name>logbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>logbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"Requested test number %ld part %ld"</literal></expr></argument>,

<argument><expr><name><name>req</name><operator>-&gt;</operator><name>testno</name></name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>partno</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>logbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>filename</name> <operator>=</operator> <call><name>test2file</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>testno</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>stream</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="string">"rb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>stream</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>error</name> <init>= <expr><name>errno</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"fopen() failed with error: %d %s"</literal></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>error</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"Error opening file: %s"</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"Couldn't open test file %ld"</literal></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>testno</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>open</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> 

<return>return <expr><literal type="number">1</literal></expr>;</return> 

</block_content>}</block></if>

<else>else <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cmd</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>cmdsize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>num</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rtp_channel</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rtp_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rtp_partno</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>rtp_scratch</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>error</name> <init>= <expr><call><name>getpart</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cmdsize</name></expr></argument>, <argument><expr><literal type="string">"reply"</literal></expr></argument>, <argument><expr><literal type="string">"servercmd"</literal></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>error</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"getpart() failed with error: %d"</literal></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>open</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> 

<return>return <expr><literal type="number">1</literal></expr>;</return> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>cmd</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>cmdsize</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"Found a reply-servercmd section!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<do>do <block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>CMD_AUTH_REQUIRED</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>CMD_AUTH_REQUIRED</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"instructed to require authorization header"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>auth_req</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>CMD_IDLE</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>CMD_IDLE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"instructed to idle"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>rcmd</name></name> <operator>=</operator> <name>RCMD_IDLE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>open</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>CMD_STREAM</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>CMD_STREAM</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"instructed to stream"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>rcmd</name></name> <operator>=</operator> <name>RCMD_STREAM</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><literal type="number">1</literal> <operator>==</operator> <call><name>sscanf</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"pipe: %d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>num</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"instructed to allow a pipe size of %d"</literal></expr></argument>, <argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>num</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"negative pipe size ignored"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>(<expr><name>num</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>pipe</name></name> <operator>=</operator> <name>num</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><literal type="number">1</literal> <operator>==</operator> <call><name>sscanf</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"skip: %d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>num</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"instructed to skip this number of bytes %d"</literal></expr></argument>, <argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>skip</name></name> <operator>=</operator> <name>num</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><literal type="number">3</literal> <operator>==</operator> <call><name>sscanf</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"rtp: part %d channel %d size %d"</literal></expr></argument>,

<argument><expr><operator>&amp;</operator><name>rtp_partno</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rtp_channel</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rtp_size</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>rtp_partno</name> <operator>==</operator> <name><name>req</name><operator>-&gt;</operator><name>partno</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"RTP: part %d channel %d size %d"</literal></expr></argument>,

<argument><expr><name>rtp_partno</name></expr></argument>, <argument><expr><name>rtp_channel</name></expr></argument>, <argument><expr><name>rtp_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rtp_scratch</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>rtp_size</name> <operator>+</operator> <literal type="number">4</literal> <operator>+</operator> <name>RTP_DATA_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rtp_scratch</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'$'</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SET_RTP_PKT_CHN</name><argument_list>(<argument><expr><name>rtp_scratch</name></expr></argument>, <argument><expr><name>rtp_channel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SET_RTP_PKT_LEN</name><argument_list>(<argument><expr><name>rtp_scratch</name></expr></argument>, <argument><expr><name>rtp_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>rtp_size</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <name>RTP_DATA_SIZE</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>rtp_scratch</name> <operator>+</operator> <literal type="number">4</literal> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>RTP_DATA</name></expr></argument>, <argument><expr><name>RTP_DATA_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if<condition>(<expr><name><name>req</name><operator>-&gt;</operator><name>rtp_buffer</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>rtp_buffer</name></name> <operator>=</operator> <name>rtp_scratch</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>rtp_buffersize</name></name> <operator>=</operator> <name>rtp_size</name> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>rtp_buffer</name></name> <operator>=</operator> <call><name>realloc</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>rtp_buffer</name></name></expr></argument>,

<argument><expr><name><name>req</name><operator>-&gt;</operator><name>rtp_buffersize</name></name> <operator>+</operator>

<name>rtp_size</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>rtp_buffer</name></name> <operator>+</operator> <name><name>req</name><operator>-&gt;</operator><name>rtp_buffersize</name></name></expr></argument>, <argument><expr><name>rtp_scratch</name></expr></argument>,

<argument><expr><name>rtp_size</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>rtp_buffersize</name></name> <operator>+=</operator> <name>rtp_size</name> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>rtp_scratch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"rtp_buffersize is %zu, rtp_size is %d."</literal></expr></argument>,

<argument><expr><name><name>req</name><operator>-&gt;</operator><name>rtp_buffersize</name></name></expr></argument>, <argument><expr><name>rtp_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"funny instruction found: %s"</literal></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>ptr</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block> while<condition>(<expr><name>ptr</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>ptr</name></expr>)</condition>;</do>

<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"Done parsing server commands"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>sscanf</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>reqbuf</name></name></expr></argument>, <argument><expr><literal type="string">"CONNECT %"</literal> <name>MAXDOCNAMELEN_TXT</name> <literal type="string">"s HTTP/%d.%d"</literal></expr></argument>,

<argument><expr><name>doc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>prot_major</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>prot_minor</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msnprintf</name><argument_list>(<argument><expr><name>logbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>logbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><literal type="string">"Received a CONNECT %s HTTP/%d.%d request"</literal></expr></argument>,

<argument><expr><name>doc</name></expr></argument>, <argument><expr><name>prot_major</name></expr></argument>, <argument><expr><name>prot_minor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>logbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>req</name><operator>-&gt;</operator><name>prot_version</name></name> <operator>==</operator> <literal type="number">10</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>open</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>doc</name></expr></argument>, <argument><expr><literal type="string">"bad"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>testno</name></name> <operator>=</operator> <name>DOCNUMBER_BADCONNECT</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>doc</name></expr></argument>, <argument><expr><literal type="string">"test"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>portp</name> <init>= <expr><call><name>strchr</name><argument_list>(<argument><expr><name>doc</name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>portp</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><operator>(</operator><name>portp</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>!=</operator> <literal type="char">'\0'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>ISDIGIT</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>portp</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>testno</name></name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name>portp</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>testno</name></name> <operator>=</operator> <name>DOCNUMBER_CONNECT</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>testno</name></name> <operator>=</operator> <name>DOCNUMBER_CONNECT</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"Did not find test number in PATH"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>testno</name></name> <operator>=</operator> <name>DOCNUMBER_404</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>end</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"ProcessRequest returned without a complete request"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"ProcessRequest found a complete request"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>req</name><operator>-&gt;</operator><name>pipe</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>checkindex</name></name> <operator>+=</operator> <operator>(</operator><name>end</name> <operator>-</operator> <name>line</name><operator>)</operator> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>END_OF_HEADERS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<do>do <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>got_exit_signal</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt> 

<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>req</name><operator>-&gt;</operator><name>cl</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>strncasecompare</name><argument_list>(<argument><expr><literal type="string">"Content-Length:"</literal></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>endptr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name>line</name> <operator>+</operator> <literal type="number">15</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>clen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while<condition>(<expr><operator>*</operator><name>ptr</name> <operator>&amp;&amp;</operator> <call><name>ISSPACE</name><argument_list>(<argument><expr><operator>*</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name>endptr</name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>

<expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>clen</name> <operator>=</operator> <call><name>strtoul</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>endptr</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>ptr</name> <operator>==</operator> <name>endptr</name><operator>)</operator> <operator>||</operator> <operator>!</operator><call><name>ISSPACE</name><argument_list>(<argument><expr><operator>*</operator><name>endptr</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><name>ERANGE</name> <operator>==</operator> <name>errno</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"Found invalid Content-Length: (%s) in the request"</literal></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>open</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> 

<return>return <expr><literal type="number">1</literal></expr>;</return> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>cl</name></name> <operator>=</operator> <name>clen</name> <operator>-</operator> <name><name>req</name><operator>-&gt;</operator><name>skip</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"Found Content-Length: %lu in the request"</literal></expr></argument>, <argument><expr><name>clen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>req</name><operator>-&gt;</operator><name>skip</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"... but will abort after %zu bytes"</literal></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>cl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><call><name>strncasecompare</name><argument_list>(<argument><expr><literal type="string">"Transfer-Encoding: chunked"</literal></expr></argument>, <argument><expr><name>line</name></expr></argument>,

<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><literal type="string">"Transfer-Encoding: chunked"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>chunked</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>chunked</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>strstr</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>reqbuf</name></name></expr></argument>, <argument><expr><literal type="string">"\r\n0\r\n\r\n"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if> 

<else>else<block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></else></if_stmt> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>line</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>line</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block> while<condition>(<expr><name>line</name></expr>)</condition>;</do>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>req</name><operator>-&gt;</operator><name>auth</name></name> <operator>&amp;&amp;</operator> <call><name>strstr</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>reqbuf</name></name></expr></argument>, <argument><expr><literal type="string">"Authorization:"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>auth</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt> 

<if_stmt><if>if<condition>(<expr><name><name>req</name><operator>-&gt;</operator><name>auth_req</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"Authorization header found, as required"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>req</name><operator>-&gt;</operator><name>digest</name></name> <operator>&amp;&amp;</operator> <call><name>strstr</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>reqbuf</name></name></expr></argument>, <argument><expr><literal type="string">"Authorization: Digest"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>partno</name></name> <operator>+=</operator> <literal type="number">1000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>digest</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"Received Digest request, sending back data %ld"</literal></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>partno</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><operator>!</operator><name><name>req</name><operator>-&gt;</operator><name>ntlm</name></name> <operator>&amp;&amp;</operator>

<call><name>strstr</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>reqbuf</name></name></expr></argument>, <argument><expr><literal type="string">"Authorization: NTLM TlRMTVNTUAAD"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>partno</name></name> <operator>+=</operator> <literal type="number">1002</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>ntlm</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"Received NTLM type-3, sending back data %ld"</literal></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>partno</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>req</name><operator>-&gt;</operator><name>cl</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">" Expecting %zu POSTed bytes"</literal></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>cl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><operator>!</operator><name><name>req</name><operator>-&gt;</operator><name>ntlm</name></name> <operator>&amp;&amp;</operator>

<call><name>strstr</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>reqbuf</name></name></expr></argument>, <argument><expr><literal type="string">"Authorization: NTLM TlRMTVNTUAAB"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>partno</name></name> <operator>+=</operator> <literal type="number">1001</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>ntlm</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"Received NTLM type-1, sending back data %ld"</literal></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>partno</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><operator>(</operator><name><name>req</name><operator>-&gt;</operator><name>partno</name></name> <operator>&gt;=</operator> <literal type="number">1000</literal><operator>)</operator> <operator>&amp;&amp;</operator>

<call><name>strstr</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>reqbuf</name></name></expr></argument>, <argument><expr><literal type="string">"Authorization: Basic"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>partno</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"Received Basic request, sending back data %ld"</literal></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>partno</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>strstr</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>reqbuf</name></name></expr></argument>, <argument><expr><literal type="string">"Connection: close"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>open</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>req</name><operator>-&gt;</operator><name>pipe</name></name> <operator>&amp;&amp;</operator>

<name><name>req</name><operator>-&gt;</operator><name>open</name></name> <operator>&amp;&amp;</operator>

<name><name>req</name><operator>-&gt;</operator><name>prot_version</name></name> <operator>&gt;=</operator> <literal type="number">11</literal> <operator>&amp;&amp;</operator>

<name>end</name> <operator>&amp;&amp;</operator>

<name><name>req</name><operator>-&gt;</operator><name>reqbuf</name></name> <operator>+</operator> <name><name>req</name><operator>-&gt;</operator><name>offset</name></name> <operator>&gt;</operator> <name>end</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>END_OF_HEADERS</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<operator>(</operator><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>reqbuf</name></name></expr></argument>, <argument><expr><literal type="string">"GET"</literal></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><literal type="string">"GET"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>||</operator>

<operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>reqbuf</name></name></expr></argument>, <argument><expr><literal type="string">"HEAD"</literal></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><literal type="string">"HEAD"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>checkindex</name></name> <operator>=</operator> <operator>(</operator><name>end</name> <operator>-</operator> <name><name>req</name><operator>-&gt;</operator><name>reqbuf</name></name><operator>)</operator> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>END_OF_HEADERS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>pipelining</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<while>while<condition>(<expr><name><name>req</name><operator>-&gt;</operator><name>pipe</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>got_exit_signal</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>line</name> <operator>=</operator> <operator>&amp;</operator><name><name>req</name><operator>-&gt;</operator><name>reqbuf</name><index>[<expr><name><name>req</name><operator>-&gt;</operator><name>checkindex</name></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>end</name> <operator>=</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>END_OF_HEADERS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>end</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>checkindex</name></name> <operator>+=</operator> <operator>(</operator><name>end</name> <operator>-</operator> <name>line</name><operator>)</operator> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>END_OF_HEADERS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>pipe</name></name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if<condition>(<expr><name><name>req</name><operator>-&gt;</operator><name>auth_req</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>req</name><operator>-&gt;</operator><name>auth</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt> 

<if_stmt><if>if<condition>(<expr><name><name>req</name><operator>-&gt;</operator><name>cl</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>req</name><operator>-&gt;</operator><name>cl</name></name> <operator>&lt;=</operator> <name><name>req</name><operator>-&gt;</operator><name>offset</name></name> <operator>-</operator> <operator>(</operator><name>end</name> <operator>-</operator> <name><name>req</name><operator>-&gt;</operator><name>reqbuf</name></name><operator>)</operator> <operator>-</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>END_OF_HEADERS</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if> 

<else>else<block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></else></if_stmt> 

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return> 

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>storerequest</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>reqbuf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>totalsize</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>error</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>written</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>writeleft</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>dump</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>reqbuf</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>totalsize</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<do>do <block>{<block_content>

<expr_stmt><expr><name>dump</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>REQUEST_DUMP</name></expr></argument>, <argument><expr><literal type="string">"ab"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block> while<condition>(<expr><operator>(</operator><name>dump</name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>error</name> <operator>=</operator> <name>errno</name><operator>)</operator> <operator>==</operator> <name>EINTR</name><operator>)</operator></expr>)</condition>;</do>

<if_stmt><if>if<condition>(<expr><name>dump</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"Error opening file %s error: %d %s"</literal></expr></argument>,

<argument><expr><name>REQUEST_DUMP</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>error</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"Failed to write request input to "</literal> <name>REQUEST_DUMP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>writeleft</name> <operator>=</operator> <name>totalsize</name></expr>;</expr_stmt>

<do>do <block>{<block_content>

<expr_stmt><expr><name>written</name> <operator>=</operator> <call><name>fwrite</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>reqbuf</name><index>[<expr><name>totalsize</name><operator>-</operator><name>writeleft</name></expr>]</index></name></expr></argument>,

<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>writeleft</name></expr></argument>, <argument><expr><name>dump</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>got_exit_signal</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>storerequest_cleanup</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>written</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>writeleft</name> <operator>-=</operator> <name>written</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block> while<condition>(<expr><operator>(</operator><name>writeleft</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>error</name> <operator>=</operator> <name>errno</name><operator>)</operator> <operator>==</operator> <name>EINTR</name><operator>)</operator></expr>)</condition>;</do>

<if_stmt><if>if<condition>(<expr><name>writeleft</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"Wrote request (%zu bytes) input to "</literal> <name>REQUEST_DUMP</name></expr></argument>, <argument><expr><name>totalsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>(<expr><name>writeleft</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"Error writing file %s error: %d %s"</literal></expr></argument>,

<argument><expr><name>REQUEST_DUMP</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>error</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"Wrote only (%zu bytes) of (%zu bytes) request input to %s"</literal></expr></argument>,

<argument><expr><name>totalsize</name><operator>-</operator><name>writeleft</name></expr></argument>, <argument><expr><name>totalsize</name></expr></argument>, <argument><expr><name>REQUEST_DUMP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<label><name>storerequest_cleanup</name>:</label>

<do>do <block>{<block_content>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>fclose</name><argument_list>(<argument><expr><name>dump</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block> while<condition>(<expr><name>res</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>error</name> <operator>=</operator> <name>errno</name><operator>)</operator> <operator>==</operator> <name>EINTR</name><operator>)</operator></expr>)</condition>;</do>

<if_stmt><if>if<condition>(<expr><name>res</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"Error closing file %s error: %d %s"</literal></expr></argument>,

<argument><expr><name>REQUEST_DUMP</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>error</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_request</name><parameter_list>(<parameter><decl><type><name>curl_socket_t</name></type> <name>sock</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>httprequest</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>error</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>fail</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>done_processing</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>reqbuf</name> <init>= <expr><name><name>req</name><operator>-&gt;</operator><name>reqbuf</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>got</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pipereq</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>pipereq_length</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>req</name><operator>-&gt;</operator><name>pipelining</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>pipereq</name> <operator>=</operator> <name>reqbuf</name> <operator>+</operator> <name><name>req</name><operator>-&gt;</operator><name>checkindex</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>pipereq_length</name> <operator>=</operator> <name><name>req</name><operator>-&gt;</operator><name>offset</name></name> <operator>-</operator> <name><name>req</name><operator>-&gt;</operator><name>checkindex</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>checkindex</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>testno</name></name> <operator>=</operator> <name>DOCNUMBER_NOTHING</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>partno</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>open</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>auth_req</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>auth</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>cl</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>digest</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>ntlm</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>pipe</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>skip</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>rcmd</name></name> <operator>=</operator> <name>RCMD_NORMALREQ</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>protocol</name></name> <operator>=</operator> <name>RPROT_NONE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>prot_version</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>pipelining</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>rtp_buffer</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>rtp_buffersize</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while<condition>(<expr><operator>!</operator><name>done_processing</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>req</name><operator>-&gt;</operator><name>offset</name></name> <operator>&lt;</operator> <name>REQBUFSIZ</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>pipereq_length</name> <operator>&amp;&amp;</operator> <name>pipereq</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>reqbuf</name></expr></argument>, <argument><expr><name>pipereq</name></expr></argument>, <argument><expr><name>pipereq_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>got</name> <operator>=</operator> <call><name>curlx_uztosz</name><argument_list>(<argument><expr><name>pipereq_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pipereq_length</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>req</name><operator>-&gt;</operator><name>skip</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>got</name> <operator>=</operator> <call><name>sread</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>reqbuf</name> <operator>+</operator> <name><name>req</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>cl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>got</name> <operator>=</operator> <call><name>sread</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>reqbuf</name> <operator>+</operator> <name><name>req</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><name>REQBUFSIZ</name><operator>-</operator><literal type="number">1</literal> <operator>-</operator> <name><name>req</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name>got_exit_signal</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>got</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"Connection closed by client"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>fail</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name>got</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>error</name> <operator>=</operator> <name>SOCKERRNO</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"recv() returned error: (%d) %s"</literal></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>error</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>fail</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>fail</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>reqbuf</name><index>[<expr><name><name>req</name><operator>-&gt;</operator><name>offset</name></name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>storerequest</name><argument_list>(<argument><expr><name>reqbuf</name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"Read %zd bytes"</literal></expr></argument>, <argument><expr><name>got</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>offset</name></name> <operator>+=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>got</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>reqbuf</name><index>[<expr><name><name>req</name><operator>-&gt;</operator><name>offset</name></name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>done_processing</name> <operator>=</operator> <call><name>ProcessRequest</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>got_exit_signal</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>done_processing</name> <operator>&amp;&amp;</operator> <name><name>req</name><operator>-&gt;</operator><name>pipe</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"Waiting for another piped request"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>done_processing</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>pipe</name></name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>req</name><operator>-&gt;</operator><name>offset</name></name> <operator>==</operator> <name>REQBUFSIZ</name><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>got</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"Request would overflow buffer, closing connection"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>reqbuf</name><index>[<expr><name>REQBUFSIZ</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>fail</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name><name>req</name><operator>-&gt;</operator><name>offset</name></name> <operator>&gt;</operator> <name>REQBUFSIZ</name><operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"Request buffer overflow, closing connection"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>reqbuf</name><index>[<expr><name>REQBUFSIZ</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>fail</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>reqbuf</name><index>[<expr><name><name>req</name><operator>-&gt;</operator><name>offset</name></name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>storerequest</name><argument_list>(<argument><expr><name>reqbuf</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>req</name><operator>-&gt;</operator><name>pipelining</name></name></expr> ?</condition><then> <expr><name><name>req</name><operator>-&gt;</operator><name>checkindex</name></name></expr> </then><else>: <expr><name><name>req</name><operator>-&gt;</operator><name>offset</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>got_exit_signal</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>fail</name></expr>;</return> 

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>send_doc</name><parameter_list>(<parameter><decl><type><name>curl_socket_t</name></type> <name>sock</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>httprequest</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>written</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buffer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cmd</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>cmdsize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>dump</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>persistent</name> <init>= <expr><name>TRUE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>sendfailure</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>responsesize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>error</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>weare</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"Send response number %ld part %ld"</literal></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>testno</name></name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>partno</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch<condition>(<expr><name><name>req</name><operator>-&gt;</operator><name>rcmd</name></name></expr>)</condition> <block>{<block_content>

<default>default:</default>

<case>case <expr><name>RCMD_NORMALREQ</name></expr>:</case>

<break>break;</break> 

<case>case <expr><name>RCMD_STREAM</name></expr>:</case>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STREAMTHIS</name></cpp:macro> <cpp:value>"a string to stream 01234567890\n"</cpp:value></cpp:define>

<expr_stmt><expr><name>count</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>STREAMTHIS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<expr_stmt><expr><name>written</name> <operator>=</operator> <call><name>swrite</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>STREAMTHIS</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>got_exit_signal</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>written</name> <operator>!=</operator> <operator>(</operator><name>ssize_t</name><operator>)</operator><name>count</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"Stopped streaming"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

<case>case <expr><name>RCMD_IDLE</name></expr>:</case>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></switch>

<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>open</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>req</name><operator>-&gt;</operator><name>testno</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>msglen</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>msgbuf</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>

<switch>switch<condition>(<expr><name><name>req</name><operator>-&gt;</operator><name>testno</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>DOCNUMBER_QUIT</name></expr>:</case>

<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"Replying to QUIT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>buffer</name> <operator>=</operator> <name>docquit</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>DOCNUMBER_WERULEZ</name></expr>:</case>

<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"Identifying ourselves as friends"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msnprintf</name><argument_list>(<argument><expr><name>msgbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>msgbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"RTSP_SERVER WE ROOLZ: %ld\r\n"</literal></expr></argument>,

<argument><expr><operator>(</operator><name>long</name><operator>)</operator><call><name>getpid</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>msglen</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>msgbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msnprintf</name><argument_list>(<argument><expr><name>weare</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>weare</name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><literal type="string">"HTTP/1.1 200 OK\r\nContent-Length: %zu\r\n\r\n%s"</literal></expr></argument>,

<argument><expr><name>msglen</name></expr></argument>, <argument><expr><name>msgbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>buffer</name> <operator>=</operator> <name>weare</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>DOCNUMBER_INTERNAL</name></expr>:</case>

<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"Bailing out due to internal error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

<case>case <expr><name>DOCNUMBER_CONNECT</name></expr>:</case>

<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"Replying to CONNECT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>buffer</name> <operator>=</operator> <name>docconnect</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>DOCNUMBER_BADCONNECT</name></expr>:</case>

<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"Replying to a bad CONNECT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>buffer</name> <operator>=</operator> <name>docbadconnect</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>DOCNUMBER_404</name></expr>:</case>

<default>default:</default>

<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"Replying to with a 404"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>req</name><operator>-&gt;</operator><name>protocol</name></name> <operator>==</operator> <name>RPROT_HTTP</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>buffer</name> <operator>=</operator> <name>doc404_HTTP</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>buffer</name> <operator>=</operator> <name>doc404_RTSP</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><name>count</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>filename</name> <init>= <expr><call><name>test2file</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>testno</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>partbuf</name><index>[<expr><literal type="number">80</literal></expr>]</index></name><init>=<expr><literal type="string">"data"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>stream</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><literal type="number">0</literal> <operator>!=</operator> <name><name>req</name><operator>-&gt;</operator><name>partno</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msnprintf</name><argument_list>(<argument><expr><name>partbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>partbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"data%ld"</literal></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>partno</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>stream</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="string">"rb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>stream</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>error</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"fopen() failed with error: %d %s"</literal></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>error</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"Error opening file: %s"</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"Couldn't open test file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>getpart</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>count</name></expr></argument>, <argument><expr><literal type="string">"reply"</literal></expr></argument>, <argument><expr><name>partbuf</name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>error</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"getpart() failed with error: %d"</literal></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>buffer</name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name>got_exit_signal</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>stream</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="string">"rb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>stream</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>error</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"fopen() failed with error: %d %s"</literal></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>error</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"Error opening file: %s"</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"Couldn't open test file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>getpart</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cmdsize</name></expr></argument>, <argument><expr><literal type="string">"reply"</literal></expr></argument>, <argument><expr><literal type="string">"postcmd"</literal></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>error</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"getpart() failed with error: %d"</literal></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name>got_exit_signal</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>strstr</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"swsclose"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><name>count</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>persistent</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"connection close instruction \"swsclose\" found in response"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>strstr</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"swsbounce"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>prevbounce</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"enable \"swsbounce\" in the next request"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>prevbounce</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>dump</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>RESPONSE_DUMP</name></expr></argument>, <argument><expr><literal type="string">"ab"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>dump</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>error</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"fopen() failed with error: %d %s"</literal></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>error</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"Error opening file: %s"</literal></expr></argument>, <argument><expr><name>RESPONSE_DUMP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"couldn't create logfile: "</literal> <name>RESPONSE_DUMP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>responsesize</name> <operator>=</operator> <name>count</name></expr>;</expr_stmt>

<do>do <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>num</name> <init>= <expr><name>count</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>num</name> <operator>&gt;</operator> <literal type="number">200</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>num</name> <operator>=</operator> <literal type="number">200</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>written</name> <operator>=</operator> <call><name>swrite</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>written</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>sendfailure</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"Sent off %zd bytes"</literal></expr></argument>, <argument><expr><name>written</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>fwrite</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>written</name></expr></argument>, <argument><expr><name>dump</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>got_exit_signal</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>count</name> <operator>-=</operator> <name>written</name></expr>;</expr_stmt>

<expr_stmt><expr><name>buffer</name> <operator>+=</operator> <name>written</name></expr>;</expr_stmt>

</block_content>}</block> while<condition>(<expr><name>count</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition>;</do>

<if_stmt><if>if<condition>(<expr><name><name>req</name><operator>-&gt;</operator><name>rtp_buffer</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"About to write %zu RTP bytes"</literal></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>rtp_buffersize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>count</name> <operator>=</operator> <name><name>req</name><operator>-&gt;</operator><name>rtp_buffersize</name></name></expr>;</expr_stmt>

<do>do <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>num</name> <init>= <expr><name>count</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>num</name> <operator>&gt;</operator> <literal type="number">200</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>num</name> <operator>=</operator> <literal type="number">200</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>written</name> <operator>=</operator> <call><name>swrite</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>rtp_buffer</name></name> <operator>+</operator> <operator>(</operator><name><name>req</name><operator>-&gt;</operator><name>rtp_buffersize</name></name> <operator>-</operator> <name>count</name><operator>)</operator></expr></argument>,

<argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>written</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>sendfailure</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>count</name> <operator>-=</operator> <name>written</name></expr>;</expr_stmt>

</block_content>}</block> while<condition>(<expr><name>count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>;</do>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>rtp_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>rtp_buffersize</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<do>do <block>{<block_content>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>fclose</name><argument_list>(<argument><expr><name>dump</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block> while<condition>(<expr><name>res</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>error</name> <operator>=</operator> <name>errno</name><operator>)</operator> <operator>==</operator> <name>EINTR</name><operator>)</operator></expr>)</condition>;</do>

<if_stmt><if>if<condition>(<expr><name>res</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"Error closing file %s error: %d %s"</literal></expr></argument>,

<argument><expr><name>RESPONSE_DUMP</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>error</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>got_exit_signal</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>sendfailure</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"Sending response failed. Only (%zu bytes) of "</literal>

<literal type="string">"(%zu bytes) were sent"</literal></expr></argument>,

<argument><expr><name>responsesize</name><operator>-</operator><name>count</name></expr></argument>, <argument><expr><name>responsesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"Response sent (%zu bytes) and written to "</literal> <name>RESPONSE_DUMP</name></expr></argument>,

<argument><expr><name>responsesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>cmdsize</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>command</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>quarters</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>num</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>cmd</name></expr>;</expr_stmt>

<do>do <block>{<block_content>

<if_stmt><if>if<condition>(<expr><literal type="number">2</literal> <operator>==</operator> <call><name>sscanf</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"%31s %d"</literal></expr></argument>, <argument><expr><name>command</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>num</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"wait"</literal></expr></argument>, <argument><expr><name>command</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"Told to sleep for %d seconds"</literal></expr></argument>, <argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>quarters</name> <operator>=</operator> <name>num</name> <operator>*</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<while>while<condition>(<expr><name>quarters</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>quarters</name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>wait_ms</name><argument_list>(<argument><expr><literal type="number">250</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>got_exit_signal</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>res</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>error</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"wait_ms() failed with error: (%d) %s"</literal></expr></argument>,

<argument><expr><name>error</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>error</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>quarters</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"Continuing after sleeping %d seconds"</literal></expr></argument>, <argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"Unknown command in reply command section"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>ptr</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block> while<condition>(<expr><name>ptr</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>ptr</name></expr>)</condition>;</do>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>open</name></name> <operator>=</operator> <name>persistent</name></expr>;</expr_stmt>

<expr_stmt><expr><name>prevtestno</name> <operator>=</operator> <name><name>req</name><operator>-&gt;</operator><name>testno</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prevpartno</name> <operator>=</operator> <name><name>req</name><operator>-&gt;</operator><name>partno</name></name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>srvr_sockaddr_union_t</name></type> <name>me</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>curl_socket_t</name></type> <name>sock</name> <init>= <expr><name>CURL_SOCKET_BAD</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>curl_socket_t</name></type> <name>msgsock</name> <init>= <expr><name>CURL_SOCKET_BAD</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>wrotepidfile</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>flag</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>port</name> <init>= <expr><name>DEFAULT_PORT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pidname</name> <init>= <expr><literal type="string">".rtsp.pid"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>httprequest</name></name></type> <name>req</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>error</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>arg</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>pid</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>req</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while<condition>(<expr><name>argc</name><operator>&gt;</operator><name>arg</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"--version"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>arg</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"rtspd IPv4%s"</literal>

<literal type="string">"\n"</literal></expr></argument>

,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_IPV6</name></expr></argument>)</argument_list></call></expr></cpp:if>
<argument><expr><literal type="string">"/IPv6"</literal>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<literal type="string">""</literal></expr></argument>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"--pidfile"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>arg</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>arg</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>argc</name><operator>&gt;</operator><name>arg</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>pidname</name> <operator>=</operator> <name><name>argv</name><index>[<expr><name>arg</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"--logfile"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>arg</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>arg</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>argc</name><operator>&gt;</operator><name>arg</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>serverlogfile</name> <operator>=</operator> <name><name>argv</name><index>[<expr><name>arg</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"--ipv4"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>arg</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_IPV6</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>ipv_inuse</name> <operator>=</operator> <literal type="string">"IPv4"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>use_ipv6</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>arg</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"--ipv6"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>arg</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_IPV6</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>ipv_inuse</name> <operator>=</operator> <literal type="string">"IPv6"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>use_ipv6</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>arg</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"--port"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>arg</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>arg</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>argc</name><operator>&gt;</operator><name>arg</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>endptr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>ulnum</name> <init>= <expr><call><name>strtoul</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>arg</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>endptr</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>endptr</name> <operator>!=</operator> <name><name>argv</name><index>[<expr><name>arg</name></expr>]</index></name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>arg</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator>

<operator>(</operator><name>ulnum</name> <operator>&lt;</operator> <literal type="number">1025UL</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>ulnum</name> <operator>&gt;</operator> <literal type="number">65535UL</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"rtspd: invalid --port argument (%s)\n"</literal></expr></argument>,

<argument><expr><name><name>argv</name><index>[<expr><name>arg</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>port</name> <operator>=</operator> <call><name>curlx_ultous</name><argument_list>(<argument><expr><name>ulnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>arg</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"--srcdir"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>arg</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>arg</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>argc</name><operator>&gt;</operator><name>arg</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>path</name> <operator>=</operator> <name><name>argv</name><index>[<expr><name>arg</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>arg</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"Usage: rtspd [option]\n"</literal>

<literal type="string">" --version\n"</literal>

<literal type="string">" --logfile [file]\n"</literal>

<literal type="string">" --pidfile [file]\n"</literal>

<literal type="string">" --ipv4\n"</literal>

<literal type="string">" --ipv6\n"</literal>

<literal type="string">" --port [port]\n"</literal>

<literal type="string">" --srcdir [path]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>win32_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>atexit</name><argument_list>(<argument><expr><name>win32_cleanup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>install_signal_handlers</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pid</name> <operator>=</operator> <operator>(</operator><name>long</name><operator>)</operator><call><name>getpid</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_IPV6</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>use_ipv6</name></expr>)</condition><block type="pseudo"><block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>sock</name> <operator>=</operator> <call><name>socket</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><name>SOCK_STREAM</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_IPV6</name></expr></argument>)</argument_list></call></expr></cpp:if>
<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>sock</name> <operator>=</operator> <call><name>socket</name><argument_list>(<argument><expr><name>AF_INET6</name></expr></argument>, <argument><expr><name>SOCK_STREAM</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if<condition>(<expr><name>CURL_SOCKET_BAD</name> <operator>==</operator> <name>sock</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>error</name> <operator>=</operator> <name>SOCKERRNO</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"Error creating socket: (%d) %s"</literal></expr></argument>,

<argument><expr><name>error</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>error</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>server_cleanup</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>flag</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><literal type="number">0</literal> <operator>!=</operator> <call><name>setsockopt</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>SOL_SOCKET</name></expr></argument>, <argument><expr><name>SO_REUSEADDR</name></expr></argument>,

<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>flag</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>flag</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>error</name> <operator>=</operator> <name>SOCKERRNO</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"setsockopt(SO_REUSEADDR) failed with error: (%d) %s"</literal></expr></argument>,

<argument><expr><name>error</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>error</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>server_cleanup</name>;</goto>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_IPV6</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>use_ipv6</name></expr>)</condition> <block>{<block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>me</name><operator>.</operator><name>sa4</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>me</name><operator>.</operator><name>sa4</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>me</name><operator>.</operator><name>sa4</name><operator>.</operator><name>sin_family</name></name> <operator>=</operator> <name>AF_INET</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>me</name><operator>.</operator><name>sa4</name><operator>.</operator><name>sin_addr</name><operator>.</operator><name>s_addr</name></name> <operator>=</operator> <name>INADDR_ANY</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>me</name><operator>.</operator><name>sa4</name><operator>.</operator><name>sin_port</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>bind</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>me</name><operator>.</operator><name>sa</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>me</name><operator>.</operator><name>sa4</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_IPV6</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>me</name><operator>.</operator><name>sa6</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>me</name><operator>.</operator><name>sa6</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>me</name><operator>.</operator><name>sa6</name><operator>.</operator><name>sin6_family</name></name> <operator>=</operator> <name>AF_INET6</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>me</name><operator>.</operator><name>sa6</name><operator>.</operator><name>sin6_addr</name></name> <operator>=</operator> <name>in6addr_any</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>me</name><operator>.</operator><name>sa6</name><operator>.</operator><name>sin6_port</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>bind</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>me</name><operator>.</operator><name>sa</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>me</name><operator>.</operator><name>sa6</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<if_stmt><if>if<condition>(<expr><literal type="number">0</literal> <operator>!=</operator> <name>rc</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>error</name> <operator>=</operator> <name>SOCKERRNO</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"Error binding socket on port %hu: (%d) %s"</literal></expr></argument>,

<argument><expr><name>port</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>error</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>server_cleanup</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"Running %s version on port %d"</literal></expr></argument>, <argument><expr><name>ipv_inuse</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>listen</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><literal type="number">0</literal> <operator>!=</operator> <name>rc</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>error</name> <operator>=</operator> <name>SOCKERRNO</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"listen() failed with error: (%d) %s"</literal></expr></argument>,

<argument><expr><name>error</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>error</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>server_cleanup</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>wrotepidfile</name> <operator>=</operator> <call><name>write_pidfile</name><argument_list>(<argument><expr><name>pidname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>wrotepidfile</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>server_cleanup</name>;</goto></block_content></block></if></if_stmt>

<for>for<control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<expr_stmt><expr><name>msgsock</name> <operator>=</operator> <call><name>accept</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>got_exit_signal</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>CURL_SOCKET_BAD</name> <operator>==</operator> <name>msgsock</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>error</name> <operator>=</operator> <name>SOCKERRNO</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"MAJOR ERROR: accept() failed with error: (%d) %s"</literal></expr></argument>,

<argument><expr><name>error</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>error</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>set_advisor_read_lock</name><argument_list>(<argument><expr><name>SERVERLOGS_LOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>serverlogslocked</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"====&gt; Client connect"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TCP_NODELAY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>flag</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>setsockopt</name><argument_list>(<argument><expr><name>msgsock</name></expr></argument>, <argument><expr><name>IPPROTO_TCP</name></expr></argument>, <argument><expr><name>TCP_NODELAY</name></expr></argument>,

<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>flag</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>flag</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"====&gt; TCP_NODELAY failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>req</name><operator>.</operator><name>pipelining</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<do>do <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>got_exit_signal</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>get_request</name><argument_list>(<argument><expr><name>msgsock</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>req</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>prevbounce</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>req</name><operator>.</operator><name>testno</name></name> <operator>==</operator> <name>prevtestno</name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>req</name><operator>.</operator><name>partno</name></name> <operator>==</operator> <name>prevpartno</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>req</name><operator>.</operator><name>partno</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"BOUNCE part number to %ld"</literal></expr></argument>, <argument><expr><name><name>req</name><operator>.</operator><name>partno</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>prevbounce</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>prevtestno</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>prevpartno</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>send_doc</name><argument_list>(<argument><expr><name>msgsock</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>got_exit_signal</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>req</name><operator>.</operator><name>testno</name></name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>req</name><operator>.</operator><name>testno</name></name> <operator>!=</operator> <name>DOCNUMBER_CONNECT</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"special request received, no persistency"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>req</name><operator>.</operator><name>open</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"instructed to close connection after server-reply"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>req</name><operator>.</operator><name>open</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"=&gt; persistent connection request ended, awaits new request"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block> while<condition>(<expr><name><name>req</name><operator>.</operator><name>open</name></name> <operator>||</operator> <operator>(</operator><name><name>req</name><operator>.</operator><name>testno</name></name> <operator>==</operator> <name>DOCNUMBER_CONNECT</name><operator>)</operator></expr>)</condition>;</do>

<if_stmt><if>if<condition>(<expr><name>got_exit_signal</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"====&gt; Client disconnect"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sclose</name><argument_list>(<argument><expr><name>msgsock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>msgsock</name> <operator>=</operator> <name>CURL_SOCKET_BAD</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>serverlogslocked</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>serverlogslocked</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>clear_advisor_read_lock</name><argument_list>(<argument><expr><name>SERVERLOGS_LOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>req</name><operator>.</operator><name>testno</name></name> <operator>==</operator> <name>DOCNUMBER_QUIT</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

<label><name>server_cleanup</name>:</label>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>msgsock</name> <operator>!=</operator> <name>sock</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>msgsock</name> <operator>!=</operator> <name>CURL_SOCKET_BAD</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>sclose</name><argument_list>(<argument><expr><name>msgsock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>sock</name> <operator>!=</operator> <name>CURL_SOCKET_BAD</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>sclose</name><argument_list>(<argument><expr><name>sock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>got_exit_signal</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"signalled to die"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>wrotepidfile</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>unlink</name><argument_list>(<argument><expr><name>pidname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>serverlogslocked</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>serverlogslocked</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>clear_advisor_read_lock</name><argument_list>(<argument><expr><name>SERVERLOGS_LOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>restore_signal_handlers</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>got_exit_signal</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"========&gt; %s rtspd (port: %d pid: %ld) exits with signal (%d)"</literal></expr></argument>,

<argument><expr><name>ipv_inuse</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>port</name></expr></argument>, <argument><expr><name>pid</name></expr></argument>, <argument><expr><name>exit_signal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>raise</name><argument_list>(<argument><expr><name>exit_signal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"========&gt; rtspd quits"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

</unit>
