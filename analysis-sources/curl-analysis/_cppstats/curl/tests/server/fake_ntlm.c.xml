<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\curl-analysis\_cppstats\curl\tests\server\fake_ntlm.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"server_setup.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENABLE_CURLX_PRINTF</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curlx.h"</cpp:file></cpp:include> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"getpart.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memdebug.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOGFILE</name></cpp:macro> <cpp:value>"log/fake_ntlm%ld.log"</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>serverlogfile</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>printable</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>inbuf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>inlength</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>outbuf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>newbuf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>newsize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>outsize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>outincr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>o</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEX_FMT_STR</name></cpp:macro> <cpp:value>"[0x%02X]"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEX_STR_LEN</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOTHING_STR</name></cpp:macro> <cpp:value>"[NOTHING]"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOTHING_LEN</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>inlength</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>inlength</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>inbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>inlength</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>outincr</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><operator>(</operator><name>inlength</name><operator>/</operator><literal type="number">2</literal><operator>)</operator> <operator>&lt;</operator> <operator>(</operator><name>HEX_STR_LEN</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr> ?</condition><then>

<expr><name>HEX_STR_LEN</name> <operator>+</operator> <literal type="number">1</literal></expr> </then><else>: <expr><name>inlength</name><operator>/</operator><literal type="number">2</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>outsize</name> <operator>=</operator> <name>inlength</name> <operator>+</operator> <name>outincr</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>outsize</name> <operator>=</operator> <name>NOTHING_LEN</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>outbuf</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>outsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>outbuf</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>inlength</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msnprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>outbuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>outsize</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>NOTHING_STR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>outbuf</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>inlength</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>o</name> <operator>&gt;</operator> <name>outsize</name> <operator>-</operator> <operator>(</operator><name>HEX_STR_LEN</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>newsize</name> <operator>=</operator> <name>outsize</name> <operator>+</operator> <name>outincr</name></expr>;</expr_stmt>

<expr_stmt><expr><name>newbuf</name> <operator>=</operator> <call><name>realloc</name><argument_list>(<argument><expr><name>outbuf</name></expr></argument>, <argument><expr><name>newsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>newbuf</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>outbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>outbuf</name> <operator>=</operator> <name>newbuf</name></expr>;</expr_stmt>

<expr_stmt><expr><name>outsize</name> <operator>=</operator> <name>newsize</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>inbuf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0x20</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>inbuf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0x7F</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>outbuf</name><index>[<expr><name>o</name></expr>]</index></name> <operator>=</operator> <name><name>inbuf</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>o</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>msnprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>outbuf</name><index>[<expr><name>o</name></expr>]</index></name></expr></argument>, <argument><expr><name>outsize</name> <operator>-</operator> <name>o</name></expr></argument>, <argument><expr><name>HEX_FMT_STR</name></expr></argument>, <argument><expr><name><name>inbuf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>o</name> <operator>+=</operator> <name>HEX_STR_LEN</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>outbuf</name><index>[<expr><name>o</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<return>return <expr><name>outbuf</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>logfilename</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>stream</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>filename</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>error</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>type1_input</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>type3_input</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>type1_output</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>type3_output</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>testnum</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>env</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>arg</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>helper_user</name> <init>= <expr><literal type="string">"unknown"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>helper_proto</name> <init>= <expr><literal type="string">"unknown"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>helper_domain</name> <init>= <expr><literal type="string">"unknown"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>use_cached_creds</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>msgbuf</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<while>while<condition>(<expr><name>argc</name> <operator>&gt;</operator> <name>arg</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"--use-cached-creds"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>arg</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>use_cached_creds</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>arg</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"--helper-protocol"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>arg</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>arg</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>argc</name> <operator>&gt;</operator> <name>arg</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>helper_proto</name> <operator>=</operator> <name><name>argv</name><index>[<expr><name>arg</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"--username"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>arg</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>arg</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>argc</name> <operator>&gt;</operator> <name>arg</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>helper_user</name> <operator>=</operator> <name><name>argv</name><index>[<expr><name>arg</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"--domain"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>arg</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>arg</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>argc</name> <operator>&gt;</operator> <name>arg</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>helper_domain</name> <operator>=</operator> <name><name>argv</name><index>[<expr><name>arg</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"Usage: fake_ntlm [option]\n"</literal>

<literal type="string">" --use-cached-creds\n"</literal>

<literal type="string">" --helper-protocol [protocol]\n"</literal>

<literal type="string">" --username [username]\n"</literal>

<literal type="string">" --domain [domain]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>env</name> <operator>=</operator> <call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"CURL_NTLM_AUTH_TESTNUM"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>env</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>endptr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>lnum</name> <init>= <expr><call><name>strtol</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>endptr</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>endptr</name> <operator>!=</operator> <name>env</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>env</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <operator>(</operator><name>lnum</name> <operator>&lt;</operator> <literal type="number">1L</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Test number not valid in CURL_NTLM_AUTH_TESTNUM"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>testnum</name> <operator>=</operator> <name>lnum</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Test number not specified in CURL_NTLM_AUTH_TESTNUM"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>msnprintf</name><argument_list>(<argument><expr><name>logfilename</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>logfilename</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>LOGFILE</name></expr></argument>, <argument><expr><name>testnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>serverlogfile</name> <operator>=</operator> <name>logfilename</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"fake_ntlm (user: %s) (proto: %s) (domain: %s) (cached creds: %s)"</literal></expr></argument>,

<argument><expr><name>helper_user</name></expr></argument>, <argument><expr><name>helper_proto</name></expr></argument>, <argument><expr><name>helper_domain</name></expr></argument>,

<argument><expr><ternary><condition><expr><operator>(</operator><name>use_cached_creds</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"yes"</literal></expr> </then><else>: <expr><literal type="string">"no"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>env</name> <operator>=</operator> <call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"CURL_NTLM_AUTH_SRCDIR"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>env</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>path</name> <operator>=</operator> <name>env</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>filename</name> <operator>=</operator> <call><name>test2file</name><argument_list>(<argument><expr><name>testnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>stream</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="string">"rb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>stream</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>error</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"fopen() failed with error: %d %s"</literal></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>error</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"Error opening file: %s"</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"Couldn't open test file %ld"</literal></expr></argument>, <argument><expr><name>testnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>getpart</name><argument_list>(<argument><expr><operator>&amp;</operator><name>type1_input</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>, <argument><expr><literal type="string">"ntlm_auth_type1"</literal></expr></argument>, <argument><expr><literal type="string">"input"</literal></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>error</name> <operator>||</operator> <name>size</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"getpart() type 1 input failed with error: %d"</literal></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>stream</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="string">"rb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>stream</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>error</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"fopen() failed with error: %d %s"</literal></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>error</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"Error opening file: %s"</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"Couldn't open test file %ld"</literal></expr></argument>, <argument><expr><name>testnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>getpart</name><argument_list>(<argument><expr><operator>&amp;</operator><name>type3_input</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>, <argument><expr><literal type="string">"ntlm_auth_type3"</literal></expr></argument>, <argument><expr><literal type="string">"input"</literal></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>error</name> <operator>||</operator> <name>size</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"getpart() type 3 input failed with error: %d"</literal></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<while>while<condition>(<expr><call><name>fgets</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>type1_input</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>stream</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="string">"rb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>stream</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>error</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"fopen() failed with error: %d %s"</literal></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>error</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"Error opening file: %s"</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"Couldn't open test file %ld"</literal></expr></argument>, <argument><expr><name>testnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>getpart</name><argument_list>(<argument><expr><operator>&amp;</operator><name>type1_output</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>, <argument><expr><literal type="string">"ntlm_auth_type1"</literal></expr></argument>, <argument><expr><literal type="string">"output"</literal></expr></argument>,

<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>error</name> <operator>||</operator> <name>size</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"getpart() type 1 output failed with error: %d"</literal></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>type1_output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>type3_input</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>type3_input</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>stream</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="string">"rb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>stream</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>error</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"fopen() failed with error: %d %s"</literal></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>error</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"Error opening file: %s"</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"Couldn't open test file %ld"</literal></expr></argument>, <argument><expr><name>testnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>getpart</name><argument_list>(<argument><expr><operator>&amp;</operator><name>type3_output</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>, <argument><expr><literal type="string">"ntlm_auth_type3"</literal></expr></argument>, <argument><expr><literal type="string">"output"</literal></expr></argument>,

<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>error</name> <operator>||</operator> <name>size</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"getpart() type 3 output failed with error: %d"</literal></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>type3_output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Unknown request\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>msgbuf</name> <operator>=</operator> <call><name>printable</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>msgbuf</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"invalid input: '%s'\n"</literal></expr></argument>, <argument><expr><name>msgbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>msgbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"OOM formatting invalid input: '%s'\n"</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"Exit"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

</unit>
