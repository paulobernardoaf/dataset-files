<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\curl-analysis\_cppstats\curl\tests\server\tftpd.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"server_setup.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SYS_IOCTL_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/ioctl.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SIGNAL_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;signal.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_FCNTL_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_NETINET_IN_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet/in.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ARPA_INET_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;arpa/inet.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ARPA_TFTP_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;arpa/tftp.h&gt;</cpp:file></cpp:include>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tftp.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_NETDB_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netdb.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SYS_FILIO_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/filio.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;setjmp.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_PWD_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pwd.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENABLE_CURLX_PRINTF</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curlx.h"</cpp:file></cpp:include> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"getpart.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"server_sockaddr.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memdebug.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>PKTSIZE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PKTSIZE</name></cpp:macro> <cpp:value>(SEGSIZE + 4)</cpp:value></cpp:define> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<struct>struct <name>testcase</name> <block>{

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>size_t</name></type> <name>bufsize</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>rptr</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>size_t</name></type> <name>rcount</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>long</name></type> <name>testno</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>ofile</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>writedelay</name></decl>;</decl_stmt> 

}</block>;</struct>

<struct>struct <name>formats</name> <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>f_mode</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>f_convert</name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>errmsg</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name>e_code</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>e_msg</name></decl>;</decl_stmt>

}</block>;</struct>

<typedef>typedef <type><union>union <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>tftphdr</name></name></type> <name>hdr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>storage</name><index>[<expr><name>PKTSIZE</name></expr>]</index></name></decl>;</decl_stmt>

}</block></union></type> <name>tftphdr_storage_t</name>;</typedef>

<struct>struct <name>bf</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name>counter</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>tftphdr_storage_t</name></type> <name>buf</name></decl>;</decl_stmt> 

}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BF_ALLOC</name></cpp:macro> <cpp:value>-3</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BF_FREE</name></cpp:macro> <cpp:value>-2</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>opcode_RRQ</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>opcode_WRQ</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>opcode_DATA</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>opcode_ACK</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>opcode_ERROR</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIMEOUT</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>MIN</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MIN</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x)&lt;(y)?(x):(y))</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DEFAULT_LOGFILE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_LOGFILE</name></cpp:macro> <cpp:value>"log/tftpd.log"</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REQUEST_DUMP</name></cpp:macro> <cpp:value>"log/server.input"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_PORT</name></cpp:macro> <cpp:value>8999</cpp:value></cpp:define> 

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>errmsg</name></name></type> <name><name>errmsgs</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><name>EUNDEF</name></expr>, <expr><literal type="string">"Undefined error code"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>ENOTFOUND</name></expr>, <expr><literal type="string">"File not found"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>EACCESS</name></expr>, <expr><literal type="string">"Access violation"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>ENOSPACE</name></expr>, <expr><literal type="string">"Disk full or allocation exceeded"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>EBADOP</name></expr>, <expr><literal type="string">"Illegal TFTP operation"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>EBADID</name></expr>, <expr><literal type="string">"Unknown transfer ID"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>EEXISTS</name></expr>, <expr><literal type="string">"File already exists"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>ENOUSER</name></expr>, <expr><literal type="string">"No such user"</literal></expr> }</block></expr>,

<expr><block>{ <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>formats</name></name></type> <name><name>formata</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"netascii"</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"octet"</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>bf</name></name></type> <name><name>bfs</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>nextone</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>current</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>newline</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>prevchar</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>tftphdr_storage_t</name></type> <name>buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>tftphdr_storage_t</name></type> <name>ackbuf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>srvr_sockaddr_union_t</name></type> <name>from</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>curl_socklen_t</name></type> <name>fromlen</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>curl_socket_t</name></type> <name>peer</name> <init>= <expr><name>CURL_SOCKET_BAD</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name>timeout</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name>maxtimeout</name> <init>= <expr><literal type="number">5</literal> <operator>*</operator> <name>TIMEOUT</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_IPV6</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>use_ipv6</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ipv_inuse</name> <init>= <expr><literal type="string">"IPv4"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>serverlogfile</name> <init>= <expr><name>DEFAULT_LOGFILE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pidname</name> <init>= <expr><literal type="string">".tftpd.pid"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>serverlogslocked</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>wrotepidfile</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SIGSETJMP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>sigjmp_buf</name></type> <name>timeoutbuf</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ALARM</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>SIGALRM</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>rexmtval</name> <init>= <expr><name>TIMEOUT</name></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SIGINTERRUPT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>siginterrupt</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {} while(0)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <function_decl><type><name>RETSIGTYPE</name></type> (<modifier>*</modifier><name>SIGHANDLER_T</name>)<parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIGHUP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>SIGHANDLER_T</name></type> <name>old_sighup_handler</name> <init>= <expr><name>SIG_ERR</name></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIGPIPE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>SIGHANDLER_T</name></type> <name>old_sigpipe_handler</name> <init>= <expr><name>SIG_ERR</name></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIGINT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>SIGHANDLER_T</name></type> <name>old_sigint_handler</name> <init>= <expr><name>SIG_ERR</name></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIGTERM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>SIGHANDLER_T</name></type> <name>old_sigterm_handler</name> <init>= <expr><name>SIG_ERR</name></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIGBREAK</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><specifier>static</specifier> <name>SIGHANDLER_T</name></type> <name>old_sigbreak_handler</name> <init>= <expr><name>SIG_ERR</name></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>SIG_ATOMIC_T</name></type> <name>got_exit_signal</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>volatile</specifier> <name>int</name></type> <name>exit_signal</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name><name>struct</name> <name>tftphdr</name></name> <modifier>*</modifier></type><name>rw_init</name><parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name><name>struct</name> <name>tftphdr</name></name> <modifier>*</modifier></type><name>w_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name><name>struct</name> <name>tftphdr</name></name> <modifier>*</modifier></type><name>r_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>read_ahead</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>testcase</name></name> <modifier>*</modifier></type><name>test</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>convert</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>ssize_t</name></type> <name>write_behind</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>testcase</name></name> <modifier>*</modifier></type><name>test</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>convert</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>synchnet</name><parameter_list>(<parameter><decl><type><name>curl_socket_t</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>do_tftp</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>testcase</name></name> <modifier>*</modifier></type><name>test</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>tftphdr</name></name> <modifier>*</modifier></type><name>tp</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>validate_access</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>testcase</name></name> <modifier>*</modifier></type><name>test</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fname</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>sendtftp</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>testcase</name></name> <modifier>*</modifier></type><name>test</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>formats</name></name> <modifier>*</modifier></type><name>pf</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>recvtftp</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>testcase</name></name> <modifier>*</modifier></type><name>test</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>formats</name></name> <modifier>*</modifier></type><name>pf</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>nak</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>error</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ALARM</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>SIGALRM</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>mysignal</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>sig</name></decl></parameter>, <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>handler</name>)<parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>timer</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>signum</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>justtimeout</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>signum</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function_decl><type><specifier>static</specifier> <name>RETSIGTYPE</name></type> <name>exit_signal_handler</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>signum</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>install_signal_handlers</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>restore_signal_handlers</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ALARM</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>SIGALRM</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mysignal</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>sig</name></decl></parameter>, <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>handler</name>)<parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>sigaction</name></name></type> <name>sa</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sa</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sa</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sa</name><operator>.</operator><name>sa_handler</name></name> <operator>=</operator> <name>handler</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sigaction</name><argument_list>(<argument><expr><name>sig</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sa</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>timer</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>signum</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>signum</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"alarm!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>timeout</name> <operator>+=</operator> <name>rexmtval</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>timeout</name> <operator>&gt;=</operator> <name>maxtimeout</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>wrotepidfile</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>wrotepidfile</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>unlink</name><argument_list>(<argument><expr><name>pidname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>serverlogslocked</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>serverlogslocked</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>clear_advisor_read_lock</name><argument_list>(<argument><expr><name>SERVERLOGS_LOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SIGSETJMP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>siglongjmp</name><argument_list>(<argument><expr><name>timeoutbuf</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>justtimeout</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>signum</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>signum</name></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><specifier>static</specifier> <name>RETSIGTYPE</name></type> <name>exit_signal_handler</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>signum</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>old_errno</name> <init>= <expr><name>errno</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>got_exit_signal</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>got_exit_signal</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>exit_signal</name> <operator>=</operator> <name>signum</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>signal</name><argument_list>(<argument><expr><name>signum</name></expr></argument>, <argument><expr><name>exit_signal_handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>old_errno</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>install_signal_handlers</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIGHUP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>old_sighup_handler</name> <operator>=</operator> <call><name>signal</name><argument_list>(<argument><expr><name>SIGHUP</name></expr></argument>, <argument><expr><name>SIG_IGN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>old_sighup_handler</name> <operator>==</operator> <name>SIG_ERR</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"cannot install SIGHUP handler: %s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIGPIPE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>old_sigpipe_handler</name> <operator>=</operator> <call><name>signal</name><argument_list>(<argument><expr><name>SIGPIPE</name></expr></argument>, <argument><expr><name>SIG_IGN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>old_sigpipe_handler</name> <operator>==</operator> <name>SIG_ERR</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"cannot install SIGPIPE handler: %s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIGINT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>old_sigint_handler</name> <operator>=</operator> <call><name>signal</name><argument_list>(<argument><expr><name>SIGINT</name></expr></argument>, <argument><expr><name>exit_signal_handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>old_sigint_handler</name> <operator>==</operator> <name>SIG_ERR</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"cannot install SIGINT handler: %s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>siginterrupt</name><argument_list>(<argument><expr><name>SIGINT</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIGTERM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>old_sigterm_handler</name> <operator>=</operator> <call><name>signal</name><argument_list>(<argument><expr><name>SIGTERM</name></expr></argument>, <argument><expr><name>exit_signal_handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>old_sigterm_handler</name> <operator>==</operator> <name>SIG_ERR</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"cannot install SIGTERM handler: %s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>siginterrupt</name><argument_list>(<argument><expr><name>SIGTERM</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIGBREAK</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><name>old_sigbreak_handler</name> <operator>=</operator> <call><name>signal</name><argument_list>(<argument><expr><name>SIGBREAK</name></expr></argument>, <argument><expr><name>exit_signal_handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>old_sigbreak_handler</name> <operator>==</operator> <name>SIG_ERR</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"cannot install SIGBREAK handler: %s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>siginterrupt</name><argument_list>(<argument><expr><name>SIGBREAK</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>restore_signal_handlers</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIGHUP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name>SIG_ERR</name> <operator>!=</operator> <name>old_sighup_handler</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>signal</name><argument_list>(<argument><expr><name>SIGHUP</name></expr></argument>, <argument><expr><name>old_sighup_handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIGPIPE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name>SIG_ERR</name> <operator>!=</operator> <name>old_sigpipe_handler</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>signal</name><argument_list>(<argument><expr><name>SIGPIPE</name></expr></argument>, <argument><expr><name>old_sigpipe_handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIGINT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name>SIG_ERR</name> <operator>!=</operator> <name>old_sigint_handler</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>signal</name><argument_list>(<argument><expr><name>SIGINT</name></expr></argument>, <argument><expr><name>old_sigint_handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIGTERM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name>SIG_ERR</name> <operator>!=</operator> <name>old_sigterm_handler</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>signal</name><argument_list>(<argument><expr><name>SIGTERM</name></expr></argument>, <argument><expr><name>old_sigterm_handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIGBREAK</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if<condition>(<expr><name>SIG_ERR</name> <operator>!=</operator> <name>old_sigbreak_handler</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>signal</name><argument_list>(<argument><expr><name>SIGBREAK</name></expr></argument>, <argument><expr><name>old_sigbreak_handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>tftphdr</name></name> <modifier>*</modifier></type><name>rw_init</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>newline</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name>prevchar</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bfs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>counter</name> <operator>=</operator> <name>BF_ALLOC</name></expr>;</expr_stmt> 

<expr_stmt><expr><name>current</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bfs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>counter</name> <operator>=</operator> <name>BF_FREE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>nextone</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt> 

<return>return <expr><operator>&amp;</operator><name><name>bfs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>buf</name><operator>.</operator><name>hdr</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>tftphdr</name></name> <modifier>*</modifier></type><name>w_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>rw_init</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return> 

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>tftphdr</name></name> <modifier>*</modifier></type><name>r_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>rw_init</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return> 

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>readit</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>testcase</name></name> <modifier>*</modifier></type><name>test</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>tftphdr</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>dpp</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>convert</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>bf</name></name> <modifier>*</modifier></type><name>b</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>bfs</name><index>[<expr><name>current</name></expr>]</index></name><operator>.</operator><name>counter</name> <operator>=</operator> <name>BF_FREE</name></expr>;</expr_stmt> 

<expr_stmt><expr><name>current</name> <operator>=</operator> <operator>!</operator><name>current</name></expr>;</expr_stmt> 

<expr_stmt><expr><name>b</name> <operator>=</operator> <operator>&amp;</operator><name><name>bfs</name><index>[<expr><name>current</name></expr>]</index></name></expr>;</expr_stmt> 

<if_stmt><if>if<condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>counter</name></name> <operator>==</operator> <name>BF_FREE</name></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><call><name>read_ahead</name><argument_list>(<argument><expr><name>test</name></expr></argument>, <argument><expr><name>convert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<expr_stmt><expr><operator>*</operator><name>dpp</name> <operator>=</operator> <operator>&amp;</operator><name><name>b</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>hdr</name></name></expr>;</expr_stmt> 

<return>return <expr><name><name>b</name><operator>-&gt;</operator><name>counter</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>read_ahead</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>testcase</name></name> <modifier>*</modifier></type><name>test</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>convert</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>bf</name></name> <modifier>*</modifier></type><name>b</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>tftphdr</name></name> <modifier>*</modifier></type><name>dp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <operator>&amp;</operator><name><name>bfs</name><index>[<expr><name>nextone</name></expr>]</index></name></expr>;</expr_stmt> 

<if_stmt><if>if<condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>counter</name></name> <operator>!=</operator> <name>BF_FREE</name></expr>)</condition><block type="pseudo"><block_content> 

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>nextone</name> <operator>=</operator> <operator>!</operator><name>nextone</name></expr>;</expr_stmt> 

<expr_stmt><expr><name>dp</name> <operator>=</operator> <operator>&amp;</operator><name><name>b</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>hdr</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>convert</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>copy_n</name> <init>= <expr><call><name>MIN</name><argument_list>(<argument><expr><name>SEGSIZE</name></expr></argument>, <argument><expr><name><name>test</name><operator>-&gt;</operator><name>rcount</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>dp</name><operator>-&gt;</operator><name>th_data</name></name></expr></argument>, <argument><expr><name><name>test</name><operator>-&gt;</operator><name>rptr</name></name></expr></argument>, <argument><expr><name>copy_n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>test</name><operator>-&gt;</operator><name>rcount</name></name> <operator>-=</operator> <name>copy_n</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>test</name><operator>-&gt;</operator><name>rptr</name></name> <operator>+=</operator> <name>copy_n</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>counter</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>copy_n</name></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>dp</name><operator>-&gt;</operator><name>th_data</name></name></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>SEGSIZE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>newline</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>prevchar</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt></block_content></block></if> 

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></else></if_stmt> 

<expr_stmt><expr><name>newline</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>test</name><operator>-&gt;</operator><name>rcount</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>test</name><operator>-&gt;</operator><name>rptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>test</name><operator>-&gt;</operator><name>rptr</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>test</name><operator>-&gt;</operator><name>rcount</name></name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<break>break;</break></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\n'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'\r'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>prevchar</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">'\r'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>newline</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><name>c</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>counter</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>p</name> <operator>-</operator> <name><name>dp</name><operator>-&gt;</operator><name>th_data</name></name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>writeit</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>testcase</name></name> <modifier>*</modifier></type><name>test</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>tftphdr</name></name> <modifier>*</modifier> <specifier>volatile</specifier> <modifier>*</modifier></type><name>dpp</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>ct</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>convert</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>bfs</name><index>[<expr><name>current</name></expr>]</index></name><operator>.</operator><name>counter</name> <operator>=</operator> <name>ct</name></expr>;</expr_stmt> 

<expr_stmt><expr><name>current</name> <operator>=</operator> <operator>!</operator><name>current</name></expr>;</expr_stmt> 

<if_stmt><if>if<condition>(<expr><name><name>bfs</name><index>[<expr><name>current</name></expr>]</index></name><operator>.</operator><name>counter</name> <operator>!=</operator> <name>BF_FREE</name></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><call><name>write_behind</name><argument_list>(<argument><expr><name>test</name></expr></argument>, <argument><expr><name>convert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<expr_stmt><expr><name><name>bfs</name><index>[<expr><name>current</name></expr>]</index></name><operator>.</operator><name>counter</name> <operator>=</operator> <name>BF_ALLOC</name></expr>;</expr_stmt> 

<expr_stmt><expr><operator>*</operator><name>dpp</name> <operator>=</operator> <operator>&amp;</operator><name><name>bfs</name><index>[<expr><name>current</name></expr>]</index></name><operator>.</operator><name><name>buf</name><operator>.</operator><name>hdr</name></name></expr>;</expr_stmt>

<return>return <expr><name>ct</name></expr>;</return> 

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ssize_t</name></type> <name>write_behind</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>testcase</name></name> <modifier>*</modifier></type><name>test</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>convert</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>writebuf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ct</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name><name>struct</name> <name>bf</name></name> <modifier>*</modifier></type><name>b</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>tftphdr</name></name> <modifier>*</modifier></type><name>dp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <operator>&amp;</operator><name><name>bfs</name><index>[<expr><name>nextone</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>counter</name></name> <operator>&lt;</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> 

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> 

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>test</name><operator>-&gt;</operator><name>ofile</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>outfile</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msnprintf</name><argument_list>(<argument><expr><name>outfile</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>outfile</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"log/upload.%ld"</literal></expr></argument>, <argument><expr><name><name>test</name><operator>-&gt;</operator><name>testno</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>test</name><operator>-&gt;</operator><name>ofile</name></name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name>outfile</name></expr></argument>, <argument><expr><name>O_CREAT</name><operator>|</operator><name>O_RDWR</name><operator>|</operator><name>O_BINARY</name></expr></argument>, <argument><expr><literal type="number">0777</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name><name>test</name><operator>-&gt;</operator><name>ofile</name></name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name>outfile</name></expr></argument>, <argument><expr><name>O_CREAT</name><operator>|</operator><name>O_RDWR</name></expr></argument>, <argument><expr><literal type="number">0777</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if<condition>(<expr><name><name>test</name><operator>-&gt;</operator><name>ofile</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"Couldn't create and/or open file %s for upload!"</literal></expr></argument>, <argument><expr><name>outfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return> 

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>count</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>counter</name></name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>counter</name></name> <operator>=</operator> <name>BF_FREE</name></expr>;</expr_stmt> 

<expr_stmt><expr><name>dp</name> <operator>=</operator> <operator>&amp;</operator><name><name>b</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>hdr</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>nextone</name> <operator>=</operator> <operator>!</operator><name>nextone</name></expr>;</expr_stmt> 

<expr_stmt><expr><name>writebuf</name> <operator>=</operator> <name><name>dp</name><operator>-&gt;</operator><name>th_data</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>count</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt> 

<if_stmt><if>if<condition>(<expr><name>convert</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>write</name><argument_list>(<argument><expr><name><name>test</name><operator>-&gt;</operator><name>ofile</name></name></expr></argument>, <argument><expr><name>writebuf</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>writebuf</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ct</name> <operator>=</operator> <name>count</name></expr>;</expr_stmt>

<while>while<condition>(<expr><name>ct</name><operator>--</operator></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>p</name><operator>++</operator></expr>;</expr_stmt> 

<if_stmt><if>if<condition>(<expr><name>prevchar</name> <operator>==</operator> <literal type="char">'\r'</literal></expr>)</condition> <block>{<block_content> 

<if_stmt><if>if<condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><call><name>lseek</name><argument_list>(<argument><expr><name><name>test</name><operator>-&gt;</operator><name>ofile</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>SEEK_CUR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if> 

<if type="elseif">else

if<condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content> 

<goto>goto <name>skipit</name>;</goto></block_content></block></if></if_stmt> 

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><literal type="number">1</literal> <operator>!=</operator> <call><name>write</name><argument_list>(<argument><expr><name><name>test</name><operator>-&gt;</operator><name>ofile</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<label><name>skipit</name>:</label>

<expr_stmt><expr><name>prevchar</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>count</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>synchnet</name><parameter_list>(<parameter><decl><type><name>curl_socket_t</name></type> <name>f</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_IOCTLSOCKET</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>i</name></decl>;</decl_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>rbuf</name><index>[<expr><name>PKTSIZE</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>srvr_sockaddr_union_t</name></type> <name>fromaddr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>curl_socklen_t</name></type> <name>fromaddrlen</name></decl>;</decl_stmt>

<for>for<control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_IOCTLSOCKET</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>ioctlsocket</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>FIONREAD</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>ioctl</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>FIONREAD</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if<condition>(<expr><name>i</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_IPV6</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>use_ipv6</name></expr>)</condition><block type="pseudo"><block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>fromaddrlen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>fromaddr</name><operator>.</operator><name>sa4</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt></block_content></block></if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_IPV6</name></expr></argument>)</argument_list></call></expr></cpp:if>
<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>fromaddrlen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>fromaddr</name><operator>.</operator><name>sa6</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt></block_content></block></else></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>recvfrom</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>rbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>rbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>fromaddr</name><operator>.</operator><name>sa</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fromaddrlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<break>break;</break></block_content></block></else></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>j</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>srvr_sockaddr_union_t</name></type> <name>me</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>tftphdr</name></name> <modifier>*</modifier></type><name>tp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>arg</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>port</name> <init>= <expr><name>DEFAULT_PORT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>curl_socket_t</name></type> <name>sock</name> <init>= <expr><name>CURL_SOCKET_BAD</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>flag</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>error</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>pid</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>testcase</name></name></type> <name>test</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>test</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>test</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while<condition>(<expr><name>argc</name><operator>&gt;</operator><name>arg</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"--version"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>arg</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"tftpd IPv4%s\n"</literal></expr></argument>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_IPV6</name></expr></argument>)</argument_list></call></expr></cpp:if>
<argument><expr><literal type="string">"/IPv6"</literal>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<literal type="string">""</literal></expr></argument>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"--pidfile"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>arg</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>arg</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>argc</name><operator>&gt;</operator><name>arg</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>pidname</name> <operator>=</operator> <name><name>argv</name><index>[<expr><name>arg</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"--logfile"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>arg</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>arg</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>argc</name><operator>&gt;</operator><name>arg</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>serverlogfile</name> <operator>=</operator> <name><name>argv</name><index>[<expr><name>arg</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"--ipv4"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>arg</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_IPV6</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>ipv_inuse</name> <operator>=</operator> <literal type="string">"IPv4"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>use_ipv6</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>arg</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"--ipv6"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>arg</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_IPV6</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>ipv_inuse</name> <operator>=</operator> <literal type="string">"IPv6"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>use_ipv6</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>arg</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"--port"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>arg</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>arg</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>argc</name><operator>&gt;</operator><name>arg</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>endptr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>ulnum</name> <init>= <expr><call><name>strtoul</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>arg</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>endptr</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>endptr</name> <operator>!=</operator> <name><name>argv</name><index>[<expr><name>arg</name></expr>]</index></name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>arg</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator>

<operator>(</operator><name>ulnum</name> <operator>&lt;</operator> <literal type="number">1025UL</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>ulnum</name> <operator>&gt;</operator> <literal type="number">65535UL</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"tftpd: invalid --port argument (%s)\n"</literal></expr></argument>,

<argument><expr><name><name>argv</name><index>[<expr><name>arg</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>port</name> <operator>=</operator> <call><name>curlx_ultous</name><argument_list>(<argument><expr><name>ulnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>arg</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"--srcdir"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>arg</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>arg</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>argc</name><operator>&gt;</operator><name>arg</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>path</name> <operator>=</operator> <name><name>argv</name><index>[<expr><name>arg</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>arg</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"Usage: tftpd [option]\n"</literal>

<literal type="string">" --version\n"</literal>

<literal type="string">" --logfile [file]\n"</literal>

<literal type="string">" --pidfile [file]\n"</literal>

<literal type="string">" --ipv4\n"</literal>

<literal type="string">" --ipv6\n"</literal>

<literal type="string">" --port [port]\n"</literal>

<literal type="string">" --srcdir [path]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>win32_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>atexit</name><argument_list>(<argument><expr><name>win32_cleanup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>install_signal_handlers</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pid</name> <operator>=</operator> <operator>(</operator><name>long</name><operator>)</operator><call><name>getpid</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_IPV6</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>use_ipv6</name></expr>)</condition><block type="pseudo"><block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>sock</name> <operator>=</operator> <call><name>socket</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><name>SOCK_DGRAM</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_IPV6</name></expr></argument>)</argument_list></call></expr></cpp:if>
<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>sock</name> <operator>=</operator> <call><name>socket</name><argument_list>(<argument><expr><name>AF_INET6</name></expr></argument>, <argument><expr><name>SOCK_DGRAM</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if<condition>(<expr><name>CURL_SOCKET_BAD</name> <operator>==</operator> <name>sock</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>error</name> <operator>=</operator> <name>SOCKERRNO</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"Error creating socket: (%d) %s"</literal></expr></argument>,

<argument><expr><name>error</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>error</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<goto>goto <name>tftpd_cleanup</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>flag</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><literal type="number">0</literal> <operator>!=</operator> <call><name>setsockopt</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>SOL_SOCKET</name></expr></argument>, <argument><expr><name>SO_REUSEADDR</name></expr></argument>,

<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>flag</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>flag</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>error</name> <operator>=</operator> <name>SOCKERRNO</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"setsockopt(SO_REUSEADDR) failed with error: (%d) %s"</literal></expr></argument>,

<argument><expr><name>error</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>error</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<goto>goto <name>tftpd_cleanup</name>;</goto>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_IPV6</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>use_ipv6</name></expr>)</condition> <block>{<block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>me</name><operator>.</operator><name>sa4</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>me</name><operator>.</operator><name>sa4</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>me</name><operator>.</operator><name>sa4</name><operator>.</operator><name>sin_family</name></name> <operator>=</operator> <name>AF_INET</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>me</name><operator>.</operator><name>sa4</name><operator>.</operator><name>sin_addr</name><operator>.</operator><name>s_addr</name></name> <operator>=</operator> <name>INADDR_ANY</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>me</name><operator>.</operator><name>sa4</name><operator>.</operator><name>sin_port</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>bind</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>me</name><operator>.</operator><name>sa</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>me</name><operator>.</operator><name>sa4</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_IPV6</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>me</name><operator>.</operator><name>sa6</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>me</name><operator>.</operator><name>sa6</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>me</name><operator>.</operator><name>sa6</name><operator>.</operator><name>sin6_family</name></name> <operator>=</operator> <name>AF_INET6</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>me</name><operator>.</operator><name>sa6</name><operator>.</operator><name>sin6_addr</name></name> <operator>=</operator> <name>in6addr_any</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>me</name><operator>.</operator><name>sa6</name><operator>.</operator><name>sin6_port</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>bind</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>me</name><operator>.</operator><name>sa</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>me</name><operator>.</operator><name>sa6</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<if_stmt><if>if<condition>(<expr><literal type="number">0</literal> <operator>!=</operator> <name>rc</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>error</name> <operator>=</operator> <name>SOCKERRNO</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"Error binding socket on port %hu: (%d) %s"</literal></expr></argument>,

<argument><expr><name>port</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>error</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<goto>goto <name>tftpd_cleanup</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>wrotepidfile</name> <operator>=</operator> <call><name>write_pidfile</name><argument_list>(<argument><expr><name>pidname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>wrotepidfile</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<goto>goto <name>tftpd_cleanup</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"Running %s version on port UDP/%d"</literal></expr></argument>, <argument><expr><name>ipv_inuse</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<expr_stmt><expr><name>fromlen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_IPV6</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>use_ipv6</name></expr>)</condition><block type="pseudo"><block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>fromlen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>from</name><operator>.</operator><name>sa4</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt></block_content></block></if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_IPV6</name></expr></argument>)</argument_list></call></expr></cpp:if>
<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>fromlen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>from</name><operator>.</operator><name>sa6</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt></block_content></block></else></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><name>ssize_t</name><operator>)</operator><call><name>recvfrom</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>buf</name><operator>.</operator><name>storage</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>buf</name><operator>.</operator><name>storage</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>from</name><operator>.</operator><name>sa</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fromlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>got_exit_signal</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"recvfrom"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>set_advisor_read_lock</name><argument_list>(<argument><expr><name>SERVERLOGS_LOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>serverlogslocked</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_IPV6</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>use_ipv6</name></expr>)</condition> <block>{<block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>from</name><operator>.</operator><name>sa4</name><operator>.</operator><name>sin_family</name></name> <operator>=</operator> <name>AF_INET</name></expr>;</expr_stmt>

<expr_stmt><expr><name>peer</name> <operator>=</operator> <call><name>socket</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><name>SOCK_DGRAM</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>CURL_SOCKET_BAD</name> <operator>==</operator> <name>peer</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"socket"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>connect</name><argument_list>(<argument><expr><name>peer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>from</name><operator>.</operator><name>sa</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>from</name><operator>.</operator><name>sa4</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"connect: fail"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_IPV6</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name><name>from</name><operator>.</operator><name>sa6</name><operator>.</operator><name>sin6_family</name></name> <operator>=</operator> <name>AF_INET6</name></expr>;</expr_stmt>

<expr_stmt><expr><name>peer</name> <operator>=</operator> <call><name>socket</name><argument_list>(<argument><expr><name>AF_INET6</name></expr></argument>, <argument><expr><name>SOCK_DGRAM</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>CURL_SOCKET_BAD</name> <operator>==</operator> <name>peer</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"socket"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>connect</name><argument_list>(<argument><expr><name>peer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>from</name><operator>.</operator><name>sa</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>from</name><operator>.</operator><name>sa6</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"connect: fail"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>maxtimeout</name> <operator>=</operator> <literal type="number">5</literal><operator>*</operator><name>TIMEOUT</name></expr>;</expr_stmt>

<expr_stmt><expr><name>tp</name> <operator>=</operator> <operator>&amp;</operator><name><name>buf</name><operator>.</operator><name>hdr</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tp</name><operator>-&gt;</operator><name>th_opcode</name></name> <operator>=</operator> <call><name>ntohs</name><argument_list>(<argument><expr><name><name>tp</name><operator>-&gt;</operator><name>th_opcode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>tp</name><operator>-&gt;</operator><name>th_opcode</name></name> <operator>==</operator> <name>opcode_RRQ</name> <operator>||</operator> <name><name>tp</name><operator>-&gt;</operator><name>th_opcode</name></name> <operator>==</operator> <name>opcode_WRQ</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>test</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>test</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>do_tftp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>test</name></expr></argument>, <argument><expr><name>tp</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>test</name><operator>.</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>sclose</name><argument_list>(<argument><expr><name>peer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>peer</name> <operator>=</operator> <name>CURL_SOCKET_BAD</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>test</name><operator>.</operator><name>ofile</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>test</name><operator>.</operator><name>ofile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>test</name><operator>.</operator><name>ofile</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>got_exit_signal</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>serverlogslocked</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>serverlogslocked</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>clear_advisor_read_lock</name><argument_list>(<argument><expr><name>SERVERLOGS_LOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"end of one transfer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<label><name>tftpd_cleanup</name>:</label>

<if_stmt><if>if<condition>(<expr><name><name>test</name><operator>.</operator><name>ofile</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>test</name><operator>.</operator><name>ofile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>peer</name> <operator>!=</operator> <name>sock</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>peer</name> <operator>!=</operator> <name>CURL_SOCKET_BAD</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>sclose</name><argument_list>(<argument><expr><name>peer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>sock</name> <operator>!=</operator> <name>CURL_SOCKET_BAD</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>sclose</name><argument_list>(<argument><expr><name>sock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>got_exit_signal</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"signalled to die"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>wrotepidfile</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>unlink</name><argument_list>(<argument><expr><name>pidname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>serverlogslocked</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>serverlogslocked</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>clear_advisor_read_lock</name><argument_list>(<argument><expr><name>SERVERLOGS_LOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>restore_signal_handlers</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>got_exit_signal</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"========&gt; %s tftpd (port: %d pid: %ld) exits with signal (%d)"</literal></expr></argument>,

<argument><expr><name>ipv_inuse</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>port</name></expr></argument>, <argument><expr><name>pid</name></expr></argument>, <argument><expr><name>exit_signal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>raise</name><argument_list>(<argument><expr><name>exit_signal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"========&gt; tftpd quits"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>do_tftp</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>testcase</name></name> <modifier>*</modifier></type><name>test</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>tftphdr</name></name> <modifier>*</modifier></type><name>tp</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>first</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>ecode</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>formats</name></name> <modifier>*</modifier></type><name>pf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>filename</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>mode</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_WINSOCK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>DWORD</name></type> <name>recvtimeout</name></decl>, <decl><type ref="prev"/><name>recvtimeoutbak</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>option</name> <init>= <expr><literal type="string">"mode"</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>toggle</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>server</name> <init>= <expr><call><name>fopen</name><argument_list>(<argument><expr><name>REQUEST_DUMP</name></expr></argument>, <argument><expr><literal type="string">"ab"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>server</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>error</name> <init>= <expr><name>errno</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"fopen() failed with error: %d %s"</literal></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>error</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"Error opening file: %s"</literal></expr></argument>, <argument><expr><name>REQUEST_DUMP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>server</name></expr></argument>, <argument><expr><literal type="string">"opcode: %x\n"</literal></expr></argument>, <argument><expr><name><name>tp</name><operator>-&gt;</operator><name>th_opcode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cp</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>tp</name><operator>-&gt;</operator><name>th_stuff</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>filename</name> <operator>=</operator> <name>cp</name></expr>;</expr_stmt>

<do>do <block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>endofit</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<while>while<condition>(<expr><name>cp</name> <operator>&lt;</operator> <operator>&amp;</operator><name><name>buf</name><operator>.</operator><name>storage</name><index>[<expr><name>size</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>*</operator><name>cp</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>endofit</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>cp</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if<condition>(<expr><name>endofit</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>cp</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;</operator> <operator>&amp;</operator><name><name>buf</name><operator>.</operator><name>storage</name><index>[<expr><name>size</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>++</operator><name>cp</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>first</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mode</name> <operator>=</operator> <name>cp</name></expr>;</expr_stmt>

<expr_stmt><expr><name>first</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>toggle</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>server</name></expr></argument>, <argument><expr><literal type="string">"%s: %s\n"</literal></expr></argument>, <argument><expr><name>option</name></expr></argument>, <argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>option</name> <operator>=</operator> <name>cp</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>toggle</name> <operator>^=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<break>break;</break></block_content></block></else></if_stmt>

</block_content>}</block> while<condition>(<expr><literal type="number">1</literal></expr>)</condition>;</do>

<if_stmt><if>if<condition>(<expr><operator>*</operator><name>cp</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>nak</name><argument_list>(<argument><expr><name>EBADOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>server</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">3</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>server</name></expr></argument>, <argument><expr><literal type="string">"filename: %s\n"</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>cp</name> <operator>=</operator> <name>mode</name></expr>;</init> <condition><expr><name>cp</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>cp</name></expr>;</condition> <incr><expr><name>cp</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if<condition>(<expr><call><name>ISUPPER</name><argument_list>(<argument><expr><operator>*</operator><name>cp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>cp</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><call><name>tolower</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>*</operator><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>server</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>pf</name> <operator>=</operator> <name>formata</name></expr>;</init> <condition><expr><name><name>pf</name><operator>-&gt;</operator><name>f_mode</name></name></expr>;</condition> <incr><expr><name>pf</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if<condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>pf</name><operator>-&gt;</operator><name>f_mode</name></name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>pf</name><operator>-&gt;</operator><name>f_mode</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>nak</name><argument_list>(<argument><expr><name>EBADOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">2</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ecode</name> <operator>=</operator> <call><name>validate_access</name><argument_list>(<argument><expr><name>test</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><name><name>tp</name><operator>-&gt;</operator><name>th_opcode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>ecode</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>nak</name><argument_list>(<argument><expr><name>ecode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_WINSOCK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>recvtimeout</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>recvtimeoutbak</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><call><name>getsockopt</name><argument_list>(<argument><expr><name>peer</name></expr></argument>, <argument><expr><name>SOL_SOCKET</name></expr></argument>, <argument><expr><name>SO_RCVTIMEO</name></expr></argument>,

<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>recvtimeoutbak</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>recvtimeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>recvtimeout</name> <operator>=</operator> <name>TIMEOUT</name><operator>*</operator><literal type="number">1000</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>setsockopt</name><argument_list>(<argument><expr><name>peer</name></expr></argument>, <argument><expr><name>SOL_SOCKET</name></expr></argument>, <argument><expr><name>SO_RCVTIMEO</name></expr></argument>,

<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>recvtimeout</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>recvtimeout</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if<condition>(<expr><name><name>tp</name><operator>-&gt;</operator><name>th_opcode</name></name> <operator>==</operator> <name>opcode_WRQ</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>recvtftp</name><argument_list>(<argument><expr><name>test</name></expr></argument>, <argument><expr><name>pf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>sendtftp</name><argument_list>(<argument><expr><name>test</name></expr></argument>, <argument><expr><name>pf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_WINSOCK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>recvtimeout</name> <operator>=</operator> <name>recvtimeoutbak</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>setsockopt</name><argument_list>(<argument><expr><name>peer</name></expr></argument>, <argument><expr><name>SOL_SOCKET</name></expr></argument>, <argument><expr><name>SO_RCVTIMEO</name></expr></argument>,

<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>recvtimeout</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>recvtimeout</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>parse_servercmd</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>testcase</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>stream</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>filename</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>error</name></decl>;</decl_stmt>

<expr_stmt><expr><name>filename</name> <operator>=</operator> <call><name>test2file</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>testno</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>stream</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="string">"rb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>stream</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>error</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"fopen() failed with error: %d %s"</literal></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>error</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">" [1] Error opening file: %s"</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">" Couldn't open test file %ld"</literal></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>testno</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return> 

</block_content>}</block></if>

<else>else <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>orgcmd</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cmd</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>cmdsize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>num</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>getpart</name><argument_list>(<argument><expr><operator>&amp;</operator><name>orgcmd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cmdsize</name></expr></argument>, <argument><expr><literal type="string">"reply"</literal></expr></argument>, <argument><expr><literal type="string">"servercmd"</literal></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>error</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"getpart() failed with error: %d"</literal></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>cmd</name> <operator>=</operator> <name>orgcmd</name></expr>;</expr_stmt>

<while>while<condition>(<expr><name>cmd</name> <operator>&amp;&amp;</operator> <name>cmdsize</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>check</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><literal type="number">1</literal> <operator>==</operator> <call><name>sscanf</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"writedelay: %d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>num</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"instructed to delay %d secs between packets"</literal></expr></argument>, <argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>writedelay</name></name> <operator>=</operator> <name>num</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"Unknown &lt;servercmd&gt; instruction found: %s"</literal></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>check</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="char">'\r'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>check</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>check</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>check</name></expr>)</condition> <block>{<block_content>

<while>while<condition>(<expr><operator>(</operator><operator>*</operator><name>check</name> <operator>==</operator> <literal type="char">'\r'</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>*</operator><name>check</name> <operator>==</operator> <literal type="char">'\n'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>check</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>*</operator><name>check</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>cmd</name> <operator>=</operator> <name>check</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<break>break;</break></block_content></block></else></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>orgcmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return> 

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>validate_access</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>testcase</name></name> <modifier>*</modifier></type><name>test</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"trying to get file: %s mode %x"</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><literal type="string">"verifiedserver"</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>weare</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>count</name> <init>= <expr><call><name>msnprintf</name><argument_list>(<argument><expr><name>weare</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>weare</name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><literal type="string">"WE ROOLZ: %ld\r\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><call><name>getpid</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"Are-we-friendly question received"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>test</name><operator>-&gt;</operator><name>buffer</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>weare</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>test</name><operator>-&gt;</operator><name>rptr</name></name> <operator>=</operator> <name><name>test</name><operator>-&gt;</operator><name>buffer</name></name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>test</name><operator>-&gt;</operator><name>bufsize</name></name> <operator>=</operator> <name>count</name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>test</name><operator>-&gt;</operator><name>rcount</name></name> <operator>=</operator> <name>count</name></expr>;</expr_stmt> 

<return>return <expr><literal type="number">0</literal></expr>;</return> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>strrchr</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>ptr</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>partbuf</name><index>[<expr><literal type="number">80</literal></expr>]</index></name><init>=<expr><literal type="string">"data"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>partno</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>testno</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>file</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt> 

<while>while<condition>(<expr><operator>*</operator><name>ptr</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>ISDIGIT</name><argument_list>(<argument><expr><operator>*</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name>testno</name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>testno</name> <operator>&gt;</operator> <literal type="number">10000</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>partno</name> <operator>=</operator> <name>testno</name> <operator>%</operator> <literal type="number">10000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>testno</name> <operator>/=</operator> <literal type="number">10000</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>partno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"requested test number %ld part %ld"</literal></expr></argument>, <argument><expr><name>testno</name></expr></argument>, <argument><expr><name>partno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>test</name><operator>-&gt;</operator><name>testno</name></name> <operator>=</operator> <name>testno</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>parse_servercmd</name><argument_list>(<argument><expr><name>test</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>file</name> <operator>=</operator> <call><name>test2file</name><argument_list>(<argument><expr><name>testno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><literal type="number">0</literal> <operator>!=</operator> <name>partno</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msnprintf</name><argument_list>(<argument><expr><name>partbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>partbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"data%ld"</literal></expr></argument>, <argument><expr><name>partno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>file</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>stream</name> <init>= <expr><call><name>fopen</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><literal type="string">"rb"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>stream</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>error</name> <init>= <expr><name>errno</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"fopen() failed with error: %d %s"</literal></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>error</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"Error opening file: %s"</literal></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"Couldn't open test file: %s"</literal></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>EACCESS</name></expr>;</return>

</block_content>}</block></if>

<else>else <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>error</name> <init>= <expr><call><name>getpart</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>test</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>count</name></expr></argument>, <argument><expr><literal type="string">"reply"</literal></expr></argument>, <argument><expr><name>partbuf</name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>error</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"getpart() failed with error: %d"</literal></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>EACCESS</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>test</name><operator>-&gt;</operator><name>buffer</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>test</name><operator>-&gt;</operator><name>rptr</name></name> <operator>=</operator> <name><name>test</name><operator>-&gt;</operator><name>buffer</name></name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>test</name><operator>-&gt;</operator><name>bufsize</name></name> <operator>=</operator> <name>count</name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>test</name><operator>-&gt;</operator><name>rcount</name></name> <operator>=</operator> <name>count</name></expr>;</expr_stmt> 

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><name>EACCESS</name></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><name>EACCESS</name></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"no slash found in path"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>EACCESS</name></expr>;</return> 

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"file opened and all is good"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>sendtftp</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>testcase</name></name> <modifier>*</modifier></type><name>test</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>formats</name></name> <modifier>*</modifier></type><name>pf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>n</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>volatile</specifier> <name>unsigned</name> <name>short</name></type> <name>sendblock</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name><name>struct</name> <name>tftphdr</name></name> <modifier>*</modifier> <specifier>volatile</specifier></type> <name>sdp</name> <init>= <expr><call><name>r_init</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name><name>struct</name> <name>tftphdr</name></name> <modifier>*</modifier> <specifier>const</specifier></type> <name>sap</name> <init>= <expr><operator>&amp;</operator><name><name>ackbuf</name><operator>.</operator><name>hdr</name></name></expr></init></decl>;</decl_stmt> 

<expr_stmt><expr><name>sendblock</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ALARM</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>SIGALRM</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>mysignal</name><argument_list>(<argument><expr><name>SIGALRM</name></expr></argument>, <argument><expr><name>timer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<do>do <block>{<block_content>

<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>readit</name><argument_list>(<argument><expr><name>test</name></expr></argument>, <argument><expr><operator>(</operator>struct <name>tftphdr</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>sdp</name></expr></argument>, <argument><expr><name><name>pf</name><operator>-&gt;</operator><name>f_convert</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>size</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>nak</name><argument_list>(<argument><expr><name>errno</name> <operator>+</operator> <literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sdp</name><operator>-&gt;</operator><name>th_opcode</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>short</name><operator>)</operator><name>opcode_DATA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sdp</name><operator>-&gt;</operator><name>th_block</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name>sendblock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>timeout</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SIGSETJMP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>sigsetjmp</name><argument_list>(<argument><expr><name>timeoutbuf</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if<condition>(<expr><name><name>test</name><operator>-&gt;</operator><name>writedelay</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"Pausing %d seconds before %d bytes"</literal></expr></argument>, <argument><expr><name><name>test</name><operator>-&gt;</operator><name>writedelay</name></name></expr></argument>,

<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>wait_ms</name><argument_list>(<argument><expr><literal type="number">1000</literal><operator>*</operator><name><name>test</name><operator>-&gt;</operator><name>writedelay</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<label><name>send_data</name>:</label>

<if_stmt><if>if<condition>(<expr><call><name>swrite</name><argument_list>(<argument><expr><name>peer</name></expr></argument>, <argument><expr><name>sdp</name></expr></argument>, <argument><expr><name>size</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>size</name> <operator>+</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"write"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>read_ahead</name><argument_list>(<argument><expr><name>test</name></expr></argument>, <argument><expr><name><name>pf</name><operator>-&gt;</operator><name>f_convert</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ALARM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>alarm</name><argument_list>(<argument><expr><name>rexmtval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>sread</name><argument_list>(<argument><expr><name>peer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ackbuf</name><operator>.</operator><name>storage</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ackbuf</name><operator>.</operator><name>storage</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ALARM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>alarm</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if<condition>(<expr><name>got_exit_signal</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"read: fail"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sap</name><operator>-&gt;</operator><name>th_opcode</name></name> <operator>=</operator> <call><name>ntohs</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>short</name><operator>)</operator><name><name>sap</name><operator>-&gt;</operator><name>th_opcode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sap</name><operator>-&gt;</operator><name>th_block</name></name> <operator>=</operator> <call><name>ntohs</name><argument_list>(<argument><expr><name><name>sap</name><operator>-&gt;</operator><name>th_block</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>sap</name><operator>-&gt;</operator><name>th_opcode</name></name> <operator>==</operator> <name>opcode_ERROR</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"got ERROR"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>sap</name><operator>-&gt;</operator><name>th_opcode</name></name> <operator>==</operator> <name>opcode_ACK</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>sap</name><operator>-&gt;</operator><name>th_block</name></name> <operator>==</operator> <name>sendblock</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>synchnet</name><argument_list>(<argument><expr><name>peer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>sap</name><operator>-&gt;</operator><name>th_block</name></name> <operator>==</operator> <operator>(</operator><name>sendblock</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<goto>goto <name>send_data</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>sendblock</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block> while<condition>(<expr><name>size</name> <operator>==</operator> <name>SEGSIZE</name></expr>)</condition>;</do>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>recvtftp</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>testcase</name></name> <modifier>*</modifier></type><name>test</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>formats</name></name> <modifier>*</modifier></type><name>pf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>volatile</specifier> <name>unsigned</name> <name>short</name></type> <name>recvblock</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name><name>struct</name> <name>tftphdr</name></name> <modifier>*</modifier> <specifier>volatile</specifier></type> <name>rdp</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name><name>struct</name> <name>tftphdr</name></name> <modifier>*</modifier></type><name>rap</name></decl>;</decl_stmt> 

<expr_stmt><expr><name>recvblock</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>rdp</name> <operator>=</operator> <call><name>w_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ALARM</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>SIGALRM</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>mysignal</name><argument_list>(<argument><expr><name>SIGALRM</name></expr></argument>, <argument><expr><name>timer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>rap</name> <operator>=</operator> <operator>&amp;</operator><name><name>ackbuf</name><operator>.</operator><name>hdr</name></name></expr>;</expr_stmt>

<do>do <block>{<block_content>

<expr_stmt><expr><name>timeout</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rap</name><operator>-&gt;</operator><name>th_opcode</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>short</name><operator>)</operator><name>opcode_ACK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rap</name><operator>-&gt;</operator><name>th_block</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name>recvblock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>recvblock</name><operator>++</operator></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SIGSETJMP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>sigsetjmp</name><argument_list>(<argument><expr><name>timeoutbuf</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<label><name>send_ack</name>:</label>

<if_stmt><if>if<condition>(<expr><call><name>swrite</name><argument_list>(<argument><expr><name>peer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ackbuf</name><operator>.</operator><name>storage</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"write: fail\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>abort</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>write_behind</name><argument_list>(<argument><expr><name>test</name></expr></argument>, <argument><expr><name><name>pf</name><operator>-&gt;</operator><name>f_convert</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ALARM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>alarm</name><argument_list>(<argument><expr><name>rexmtval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>sread</name><argument_list>(<argument><expr><name>peer</name></expr></argument>, <argument><expr><name>rdp</name></expr></argument>, <argument><expr><name>PKTSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ALARM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>alarm</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if<condition>(<expr><name>got_exit_signal</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>abort</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"read: fail\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>abort</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>rdp</name><operator>-&gt;</operator><name>th_opcode</name></name> <operator>=</operator> <call><name>ntohs</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>short</name><operator>)</operator><name><name>rdp</name><operator>-&gt;</operator><name>th_opcode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rdp</name><operator>-&gt;</operator><name>th_block</name></name> <operator>=</operator> <call><name>ntohs</name><argument_list>(<argument><expr><name><name>rdp</name><operator>-&gt;</operator><name>th_block</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>rdp</name><operator>-&gt;</operator><name>th_opcode</name></name> <operator>==</operator> <name>opcode_ERROR</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>abort</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>rdp</name><operator>-&gt;</operator><name>th_opcode</name></name> <operator>==</operator> <name>opcode_DATA</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>rdp</name><operator>-&gt;</operator><name>th_block</name></name> <operator>==</operator> <name>recvblock</name></expr>)</condition> <block>{<block_content>

<break>break;</break> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>synchnet</name><argument_list>(<argument><expr><name>peer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>rdp</name><operator>-&gt;</operator><name>th_block</name></name> <operator>==</operator> <operator>(</operator><name>recvblock</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>send_ack</name>;</goto></block_content></block></if></if_stmt> 

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>writeit</name><argument_list>(<argument><expr><name>test</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rdp</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>n</name> <operator>-</operator> <literal type="number">4</literal><operator>)</operator></expr></argument>, <argument><expr><name><name>pf</name><operator>-&gt;</operator><name>f_convert</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>size</name> <operator>!=</operator> <operator>(</operator><name>n</name><operator>-</operator><literal type="number">4</literal><operator>)</operator></expr>)</condition> <block>{<block_content> 

<if_stmt><if>if<condition>(<expr><name>size</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>nak</name><argument_list>(<argument><expr><name>errno</name> <operator>+</operator> <literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>nak</name><argument_list>(<argument><expr><name>ENOSPACE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<goto>goto <name>abort</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block> while<condition>(<expr><name>size</name> <operator>==</operator> <name>SEGSIZE</name></expr>)</condition>;</do>

<expr_stmt><expr><call><name>write_behind</name><argument_list>(<argument><expr><name>test</name></expr></argument>, <argument><expr><name><name>pf</name><operator>-&gt;</operator><name>f_convert</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rap</name><operator>-&gt;</operator><name>th_opcode</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>short</name><operator>)</operator><name>opcode_ACK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>rap</name><operator>-&gt;</operator><name>th_block</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name>recvblock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>swrite</name><argument_list>(<argument><expr><name>peer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ackbuf</name><operator>.</operator><name>storage</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ALARM</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>SIGALRM</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>mysignal</name><argument_list>(<argument><expr><name>SIGALRM</name></expr></argument>, <argument><expr><name>justtimeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>alarm</name><argument_list>(<argument><expr><name>rexmtval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>sread</name><argument_list>(<argument><expr><name>peer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>buf</name><operator>.</operator><name>storage</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>buf</name><operator>.</operator><name>storage</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ALARM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>alarm</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if<condition>(<expr><name>got_exit_signal</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>abort</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>n</name> <operator>&gt;=</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> 

<name><name>rdp</name><operator>-&gt;</operator><name>th_opcode</name></name> <operator>==</operator> <name>opcode_DATA</name> <operator>&amp;&amp;</operator> 

<name>recvblock</name> <operator>==</operator> <name><name>rdp</name><operator>-&gt;</operator><name>th_block</name></name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>swrite</name><argument_list>(<argument><expr><name>peer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ackbuf</name><operator>.</operator><name>storage</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<label><name>abort</name>:</label>

<return>return;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>nak</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>error</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>tftphdr</name></name> <modifier>*</modifier></type><name>tp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>length</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>errmsg</name></name> <modifier>*</modifier></type><name>pe</name></decl>;</decl_stmt>

<expr_stmt><expr><name>tp</name> <operator>=</operator> <operator>&amp;</operator><name><name>buf</name><operator>.</operator><name>hdr</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tp</name><operator>-&gt;</operator><name>th_opcode</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>short</name><operator>)</operator><name>opcode_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tp</name><operator>-&gt;</operator><name>th_code</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>short</name><operator>)</operator><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>pe</name> <operator>=</operator> <name>errmsgs</name></expr>;</init> <condition><expr><name><name>pe</name><operator>-&gt;</operator><name>e_code</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>pe</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if<condition>(<expr><name><name>pe</name><operator>-&gt;</operator><name>e_code</name></name> <operator>==</operator> <name>error</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

<if_stmt><if>if<condition>(<expr><name><name>pe</name><operator>-&gt;</operator><name>e_code</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pe</name><operator>-&gt;</operator><name>e_msg</name></name> <operator>=</operator> <call><name>strerror</name><argument_list>(<argument><expr><name>error</name> <operator>-</operator> <literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tp</name><operator>-&gt;</operator><name>th_code</name></name> <operator>=</operator> <name>EUNDEF</name></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>length</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name><name>pe</name><operator>-&gt;</operator><name>e_msg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>tp</name><operator>-&gt;</operator><name>th_msg</name></name></expr></argument>, <argument><expr><name><name>pe</name><operator>-&gt;</operator><name>e_msg</name></name></expr></argument>, <argument><expr><name>length</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>length</name> <operator>+=</operator> <literal type="number">5</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>swrite</name><argument_list>(<argument><expr><name>peer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>buf</name><operator>.</operator><name>storage</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>length</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"nak: fail\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

</unit>
