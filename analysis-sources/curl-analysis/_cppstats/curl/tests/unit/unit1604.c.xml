<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\curl-analysis\_cppstats\curl\tests\unit\unit1604.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curlcheck.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tool_cfgable.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tool_doswin.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memdebug.h"</cpp:file></cpp:include> 

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>unit_setup</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>unit_stop</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSDOS</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>getflagstr</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><literal type="number">256</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>buf</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msnprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">256</literal></expr></argument>, <argument><expr><literal type="string">"%s,%s,%s,%s"</literal></expr></argument>,

<argument><expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>SANITIZE_ALLOW_COLONS</name><operator>)</operator></expr> ?</condition><then>

<expr><literal type="string">"SANITIZE_ALLOW_COLONS"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary><operator>)</operator></expr></argument>,

<argument><expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>SANITIZE_ALLOW_PATH</name><operator>)</operator></expr> ?</condition><then>

<expr><literal type="string">"SANITIZE_ALLOW_PATH"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary><operator>)</operator></expr></argument>,

<argument><expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>SANITIZE_ALLOW_RESERVED</name><operator>)</operator></expr> ?</condition><then>

<expr><literal type="string">"SANITIZE_ALLOW_RESERVED"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary><operator>)</operator></expr></argument>,

<argument><expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>SANITIZE_ALLOW_TRUNCATE</name><operator>)</operator></expr> ?</condition><then>

<expr><literal type="string">"SANITIZE_ALLOW_TRUNCATE"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>buf</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>getcurlcodestr</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>cc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><literal type="number">256</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>buf</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msnprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">256</literal></expr></argument>, <argument><expr><literal type="string">"%s (%d)"</literal></expr></argument>,

<argument><expr><operator>(</operator><ternary><condition><expr><name>cc</name> <operator>==</operator> <name>SANITIZE_ERR_OK</name></expr> ?</condition><then> <expr><literal type="string">"SANITIZE_ERR_OK"</literal></expr> </then><else>:

<expr><ternary><condition><expr><name>cc</name> <operator>==</operator> <name>SANITIZE_ERR_BAD_ARGUMENT</name></expr> ?</condition><then> <expr><literal type="string">"SANITIZE_ERR_BAD_ARGUMENT"</literal></expr> </then><else>:

<expr><ternary><condition><expr><name>cc</name> <operator>==</operator> <name>SANITIZE_ERR_INVALID_PATH</name></expr> ?</condition><then> <expr><literal type="string">"SANITIZE_ERR_INVALID_PATH"</literal></expr> </then><else>:

<expr><ternary><condition><expr><name>cc</name> <operator>==</operator> <name>SANITIZE_ERR_OUT_OF_MEMORY</name></expr> ?</condition><then> <expr><literal type="string">"SANITIZE_ERR_OUT_OF_MEMORY"</literal></expr></then><else>:

<expr><literal type="string">"unexpected error code - add name"</literal></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr></else></ternary><operator>)</operator></expr></argument>,

<argument><expr><name>cc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>buf</name></expr>;</return>

</block_content>}</block></function>

<struct>struct <name>data</name> <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>input</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>expected_output</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>expected_result</name></decl>;</decl_stmt>

}</block>;</struct>

<macro><name>UNITTEST_START</name></macro>

<block>{<block_content> 

<decl_stmt><decl><type><name><name>struct</name> <name>data</name></name></type> <name><name>data</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">""</literal></expr>, <expr><literal type="number">0</literal></expr>,

<expr><literal type="string">""</literal></expr>, <expr><name>SANITIZE_ERR_OK</name></expr>

}</block></expr>,

<expr><block>{ <expr><literal type="string">"normal filename"</literal></expr>, <expr><literal type="number">0</literal></expr>,

<expr><literal type="string">"normal filename"</literal></expr>, <expr><name>SANITIZE_ERR_OK</name></expr>

}</block></expr>,

<expr><block>{ <expr><literal type="string">"control\tchar"</literal></expr>, <expr><literal type="number">0</literal></expr>,

<expr><literal type="string">"control_char"</literal></expr>, <expr><name>SANITIZE_ERR_OK</name></expr>

}</block></expr>,

<expr><block>{ <expr><literal type="string">"banned*char"</literal></expr>, <expr><literal type="number">0</literal></expr>,

<expr><literal type="string">"banned_char"</literal></expr>, <expr><name>SANITIZE_ERR_OK</name></expr>

}</block></expr>,

<expr><block>{ <expr><literal type="string">"f:foo"</literal></expr>, <expr><literal type="number">0</literal></expr>,

<expr><literal type="string">"f_foo"</literal></expr>, <expr><name>SANITIZE_ERR_OK</name></expr>

}</block></expr>,

<expr><block>{ <expr><literal type="string">"f:foo"</literal></expr>, <expr><name>SANITIZE_ALLOW_COLONS</name></expr>,

<expr><literal type="string">"f:foo"</literal></expr>, <expr><name>SANITIZE_ERR_OK</name></expr>

}</block></expr>,

<expr><block>{ <expr><literal type="string">"f:foo"</literal></expr>, <expr><name>SANITIZE_ALLOW_PATH</name></expr>,

<expr><literal type="string">"f:foo"</literal></expr>, <expr><name>SANITIZE_ERR_OK</name></expr>

}</block></expr>,

<expr><block>{ <expr><literal type="string">"f:\\foo"</literal></expr>, <expr><literal type="number">0</literal></expr>,

<expr><literal type="string">"f__foo"</literal></expr>, <expr><name>SANITIZE_ERR_OK</name></expr>

}</block></expr>,

<expr><block>{ <expr><literal type="string">"f:\\foo"</literal></expr>, <expr><name>SANITIZE_ALLOW_PATH</name></expr>,

<expr><literal type="string">"f:\\foo"</literal></expr>, <expr><name>SANITIZE_ERR_OK</name></expr>

}</block></expr>,

<expr><block>{ <expr><literal type="string">"f:/foo"</literal></expr>, <expr><literal type="number">0</literal></expr>,

<expr><literal type="string">"f__foo"</literal></expr>, <expr><name>SANITIZE_ERR_OK</name></expr>

}</block></expr>,

<expr><block>{ <expr><literal type="string">"f:/foo"</literal></expr>, <expr><name>SANITIZE_ALLOW_PATH</name></expr>,

<expr><literal type="string">"f:/foo"</literal></expr>, <expr><name>SANITIZE_ERR_OK</name></expr>

}</block></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MSDOS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{ <expr><literal type="string">"\\\\?\\C:\\foo"</literal></expr>, <expr><name>SANITIZE_ALLOW_PATH</name></expr>,

<expr><literal type="string">"\\\\?\\C:\\foo"</literal></expr>, <expr><name>SANITIZE_ERR_OK</name></expr>

}</block></expr>,

<expr><block>{ <expr><literal type="string">"\\\\?\\C:\\foo"</literal></expr>, <expr><literal type="number">0</literal></expr>,

<expr><literal type="string">"____C__foo"</literal></expr>, <expr><name>SANITIZE_ERR_OK</name></expr>

}</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{ <expr><literal type="string">"foo:bar"</literal></expr>, <expr><literal type="number">0</literal></expr>,

<expr><literal type="string">"foo_bar"</literal></expr>, <expr><name>SANITIZE_ERR_OK</name></expr>

}</block></expr>,

<expr><block>{ <expr><literal type="string">"foo|&lt;&gt;/bar\\\":?*baz"</literal></expr>, <expr><literal type="number">0</literal></expr>,

<expr><literal type="string">"foo____bar_____baz"</literal></expr>, <expr><name>SANITIZE_ERR_OK</name></expr>

}</block></expr>,

<expr><block>{ <expr><literal type="string">"f:foo::$DATA"</literal></expr>, <expr><literal type="number">0</literal></expr>,

<expr><literal type="string">"f_foo__$DATA"</literal></expr>, <expr><name>SANITIZE_ERR_OK</name></expr>

}</block></expr>,

<expr><block>{ <expr><literal type="string">"con . air"</literal></expr>, <expr><literal type="number">0</literal></expr>,

<expr><literal type="string">"con _ air"</literal></expr>, <expr><name>SANITIZE_ERR_OK</name></expr>

}</block></expr>,

<expr><block>{ <expr><literal type="string">"con.air"</literal></expr>, <expr><literal type="number">0</literal></expr>,

<expr><literal type="string">"con_air"</literal></expr>, <expr><name>SANITIZE_ERR_OK</name></expr>

}</block></expr>,

<expr><block>{ <expr><literal type="string">"con:/x"</literal></expr>, <expr><literal type="number">0</literal></expr>,

<expr><literal type="string">"con__x"</literal></expr>, <expr><name>SANITIZE_ERR_OK</name></expr>

}</block></expr>,

<expr><block>{ <expr><literal type="string">"file . . . . .. ."</literal></expr>, <expr><literal type="number">0</literal></expr>,

<expr><literal type="string">"file"</literal></expr>, <expr><name>SANITIZE_ERR_OK</name></expr>

}</block></expr>,

<expr><block>{ <expr><literal type="string">"foo . . ? . . "</literal></expr>, <expr><literal type="number">0</literal></expr>,

<expr><literal type="string">"foo . . _"</literal></expr>, <expr><name>SANITIZE_ERR_OK</name></expr>

}</block></expr>,

<expr><block>{ <expr><literal type="string">"com1"</literal></expr>, <expr><literal type="number">0</literal></expr>,

<expr><literal type="string">"_com1"</literal></expr>, <expr><name>SANITIZE_ERR_OK</name></expr>

}</block></expr>,

<expr><block>{ <expr><literal type="string">"com1"</literal></expr>, <expr><name>SANITIZE_ALLOW_RESERVED</name></expr>,

<expr><literal type="string">"com1"</literal></expr>, <expr><name>SANITIZE_ERR_OK</name></expr>

}</block></expr>,

<expr><block>{ <expr><literal type="string">"f:\\com1"</literal></expr>, <expr><literal type="number">0</literal></expr>,

<expr><literal type="string">"f__com1"</literal></expr>, <expr><name>SANITIZE_ERR_OK</name></expr>

}</block></expr>,

<expr><block>{ <expr><literal type="string">"f:\\com1"</literal></expr>, <expr><name>SANITIZE_ALLOW_PATH</name></expr>,

<expr><literal type="string">"f:\\_com1"</literal></expr>, <expr><name>SANITIZE_ERR_OK</name></expr>

}</block></expr>,

<expr><block>{ <expr><literal type="string">"f:\\com1"</literal></expr>, <expr><name>SANITIZE_ALLOW_RESERVED</name></expr>,

<expr><literal type="string">"f__com1"</literal></expr>, <expr><name>SANITIZE_ERR_OK</name></expr>

}</block></expr>,

<expr><block>{ <expr><literal type="string">"f:\\com1"</literal></expr>, <expr><name>SANITIZE_ALLOW_RESERVED</name> <operator>|</operator> <name>SANITIZE_ALLOW_COLONS</name></expr>,

<expr><literal type="string">"f:_com1"</literal></expr>, <expr><name>SANITIZE_ERR_OK</name></expr>

}</block></expr>,

<expr><block>{ <expr><literal type="string">"f:\\com1"</literal></expr>, <expr><name>SANITIZE_ALLOW_RESERVED</name> <operator>|</operator> <name>SANITIZE_ALLOW_PATH</name></expr>,

<expr><literal type="string">"f:\\com1"</literal></expr>, <expr><name>SANITIZE_ERR_OK</name></expr>

}</block></expr>,

<expr><block>{ <expr><literal type="string">"com1:\\com1"</literal></expr>, <expr><name>SANITIZE_ALLOW_PATH</name></expr>,

<expr><literal type="string">"_com1:\\_com1"</literal></expr>, <expr><name>SANITIZE_ERR_OK</name></expr>

}</block></expr>,

<expr><block>{ <expr><literal type="string">"com1:\\com1"</literal></expr>, <expr><name>SANITIZE_ALLOW_RESERVED</name> <operator>|</operator> <name>SANITIZE_ALLOW_PATH</name></expr>,

<expr><literal type="string">"com1:\\com1"</literal></expr>, <expr><name>SANITIZE_ERR_OK</name></expr>

}</block></expr>,

<expr><block>{ <expr><literal type="string">"com1:\\com1"</literal></expr>, <expr><name>SANITIZE_ALLOW_RESERVED</name></expr>,

<expr><literal type="string">"com1__com1"</literal></expr>, <expr><name>SANITIZE_ERR_OK</name></expr>

}</block></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MSDOS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{ <expr><literal type="string">"\\com1"</literal></expr>, <expr><name>SANITIZE_ALLOW_PATH</name></expr>,

<expr><literal type="string">"\\_com1"</literal></expr>, <expr><name>SANITIZE_ERR_OK</name></expr>

}</block></expr>,

<expr><block>{ <expr><literal type="string">"\\\\com1"</literal></expr>, <expr><name>SANITIZE_ALLOW_PATH</name></expr>,

<expr><literal type="string">"\\\\com1"</literal></expr>, <expr><name>SANITIZE_ERR_OK</name></expr>

}</block></expr>,

<expr><block>{ <expr><literal type="string">"\\\\?\\C:\\com1"</literal></expr>, <expr><name>SANITIZE_ALLOW_PATH</name></expr>,

<expr><literal type="string">"\\\\?\\C:\\com1"</literal></expr>, <expr><name>SANITIZE_ERR_OK</name></expr>

}</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{ <expr><literal type="string">"CoM1"</literal></expr>, <expr><literal type="number">0</literal></expr>,

<expr><literal type="string">"_CoM1"</literal></expr>, <expr><name>SANITIZE_ERR_OK</name></expr>

}</block></expr>,

<expr><block>{ <expr><literal type="string">"CoM1"</literal></expr>, <expr><name>SANITIZE_ALLOW_RESERVED</name></expr>,

<expr><literal type="string">"CoM1"</literal></expr>, <expr><name>SANITIZE_ERR_OK</name></expr>

}</block></expr>,

<expr><block>{ <expr><literal type="string">"COM56"</literal></expr>, <expr><literal type="number">0</literal></expr>,

<expr><literal type="string">"COM56"</literal></expr>, <expr><name>SANITIZE_ERR_OK</name></expr>

}</block></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MSDOS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{ <expr><literal type="string">"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"</literal>

<literal type="string">"BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB"</literal>

<literal type="string">"CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC"</literal>

<literal type="string">"DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD"</literal>

<literal type="string">"EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE"</literal>

<literal type="string">"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"</literal></expr>,

<expr><name>SANITIZE_ALLOW_TRUNCATE</name></expr>,

<expr><literal type="string">"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"</literal>

<literal type="string">"BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB"</literal>

<literal type="string">"CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC"</literal>

<literal type="string">"DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD"</literal>

<literal type="string">"EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE"</literal>

<literal type="string">"FFFFF"</literal></expr>, <expr><name>SANITIZE_ERR_OK</name></expr>

}</block></expr>,

<expr><block>{ <expr><literal type="string">"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"</literal>

<literal type="string">"BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB"</literal>

<literal type="string">"CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC"</literal>

<literal type="string">"DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD"</literal>

<literal type="string">"EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE"</literal>

<literal type="string">"FFF\\FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"</literal></expr>,

<expr><name>SANITIZE_ALLOW_TRUNCATE</name> <operator>|</operator> <name>SANITIZE_ALLOW_PATH</name></expr>,

<expr><literal type="string">"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"</literal>

<literal type="string">"BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB"</literal>

<literal type="string">"CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC"</literal>

<literal type="string">"DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD"</literal>

<literal type="string">"EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE"</literal>

<literal type="string">"FFF\\FFFFF"</literal></expr>, <expr><name>SANITIZE_ERR_OK</name></expr>

}</block></expr>,

<expr><block>{ <expr><literal type="string">"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"</literal>

<literal type="string">"BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB"</literal>

<literal type="string">"CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC"</literal>

<literal type="string">"DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD"</literal>

<literal type="string">"EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE"</literal>

<literal type="string">"FFF\\FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"</literal></expr>,

<expr><name>SANITIZE_ALLOW_TRUNCATE</name></expr>,

<expr><literal type="string">"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"</literal>

<literal type="string">"BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB"</literal>

<literal type="string">"CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC"</literal>

<literal type="string">"DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD"</literal>

<literal type="string">"EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE"</literal>

<literal type="string">"FFF_F"</literal></expr>, <expr><name>SANITIZE_ERR_OK</name></expr>

}</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<expr><block>{ <expr><literal type="string">"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"</literal>

<literal type="string">"BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB"</literal>

<literal type="string">"CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC"</literal>

<literal type="string">"DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD"</literal>

<literal type="string">"EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE"</literal>

<literal type="string">"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"</literal></expr>,

<expr><literal type="number">0</literal></expr>,

<expr><name>NULL</name></expr>, <expr><name>SANITIZE_ERR_INVALID_PATH</name></expr>

}</block></expr>,

<expr><block>{ <expr><literal type="string">"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"</literal>

<literal type="string">"BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB"</literal>

<literal type="string">"CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC"</literal>

<literal type="string">"DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD"</literal>

<literal type="string">"EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE"</literal>

<literal type="string">"FFFF\\FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"</literal></expr>,

<expr><name>SANITIZE_ALLOW_TRUNCATE</name></expr>,

<expr><name>NULL</name></expr>, <expr><name>SANITIZE_ERR_INVALID_PATH</name></expr>

}</block></expr>,

<expr><block>{ <expr><literal type="string">"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"</literal>

<literal type="string">"BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB"</literal>

<literal type="string">"CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC"</literal>

<literal type="string">"DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD"</literal>

<literal type="string">"EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE"</literal>

<literal type="string">"FFFFFFFFFFFFFFFFFFFFFFFFF\\FFFFFFFFFFFFFFFFFFFFFFFF"</literal></expr>,

<expr><name>SANITIZE_ALLOW_TRUNCATE</name> <operator>|</operator> <name>SANITIZE_ALLOW_PATH</name></expr>,

<expr><name>NULL</name></expr>, <expr><name>SANITIZE_ERR_INVALID_PATH</name></expr>

}</block></expr>,

<expr><block>{ <expr><literal type="string">"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"</literal>

<literal type="string">"BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB"</literal>

<literal type="string">"CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC"</literal>

<literal type="string">"DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD"</literal>

<literal type="string">"EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE"</literal>

<literal type="string">"FFF\\FFFFFFFFFFFFFFFFFFFFF:FFFFFFFFFFFFFFFFFFFFFFFF"</literal></expr>,

<expr><name>SANITIZE_ALLOW_TRUNCATE</name> <operator>|</operator> <name>SANITIZE_ALLOW_PATH</name></expr>,

<expr><name>NULL</name></expr>, <expr><name>SANITIZE_ERR_INVALID_PATH</name></expr>

}</block></expr>,

<expr><block>{ <expr><literal type="string">"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"</literal>

<literal type="string">"BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB"</literal>

<literal type="string">"CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC"</literal>

<literal type="string">"DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD"</literal>

<literal type="string">"EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE"</literal>

<literal type="string">"FF\\F:FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"</literal></expr>,

<expr><name>SANITIZE_ALLOW_TRUNCATE</name> <operator>|</operator> <name>SANITIZE_ALLOW_PATH</name></expr>,

<expr><name>NULL</name></expr>, <expr><name>SANITIZE_ERR_INVALID_PATH</name></expr>

}</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>,

<expr><name>NULL</name></expr>, <expr><name>SANITIZE_ERR_BAD_ARGUMENT</name></expr>

}</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>output</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>flagstr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>received_ccstr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>expected_ccstr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>res</name> <init>= <expr><call><name>sanitize_file_name</name><argument_list>(<argument><expr><operator>&amp;</operator><name>output</name></expr></argument>, <argument><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>input</name></expr></argument>, <argument><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>flags</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>res</name> <operator>==</operator> <name><name>data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>expected_result</name> <operator>&amp;&amp;</operator>

<operator>(</operator><operator>(</operator><operator>!</operator><name>output</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>expected_output</name><operator>)</operator> <operator>||</operator>

<operator>(</operator><name>output</name> <operator>&amp;&amp;</operator> <name><name>data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>expected_output</name> <operator>&amp;&amp;</operator>

<operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>expected_output</name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>flagstr</name> <operator>=</operator> <call><name>getflagstr</name><argument_list>(<argument><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>abort_unless</name><argument_list>(<argument><expr><name>flagstr</name></expr></argument>, <argument><expr><literal type="string">"out of memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>received_ccstr</name> <operator>=</operator> <call><name>getcurlcodestr</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>abort_unless</name><argument_list>(<argument><expr><name>received_ccstr</name></expr></argument>, <argument><expr><literal type="string">"out of memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>expected_ccstr</name> <operator>=</operator> <call><name>getcurlcodestr</name><argument_list>(<argument><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>expected_result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>abort_unless</name><argument_list>(<argument><expr><name>expected_ccstr</name></expr></argument>, <argument><expr><literal type="string">"out of memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>unitfail</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal>

<literal type="string">"%s:%d sanitize_file_name failed.\n"</literal>

<literal type="string">"input: %s\n"</literal>

<literal type="string">"flags: %s\n"</literal>

<literal type="string">"output: %s\n"</literal>

<literal type="string">"result: %s\n"</literal>

<literal type="string">"expected output: %s\n"</literal>

<literal type="string">"expected result: %s\n"</literal></expr></argument>,

<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>,

<argument><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>input</name></expr></argument>,

<argument><expr><name>flagstr</name></expr></argument>,

<argument><expr><operator>(</operator><ternary><condition><expr><name>output</name></expr> ?</condition><then> <expr><name>output</name></expr> </then><else>: <expr><literal type="string">"(null)"</literal></expr></else></ternary><operator>)</operator></expr></argument>,

<argument><expr><name>received_ccstr</name></expr></argument>,

<argument><expr><operator>(</operator><ternary><condition><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>expected_output</name></expr> ?</condition><then> <expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>expected_output</name></expr> </then><else>: <expr><literal type="string">"(null)"</literal></expr></else></ternary><operator>)</operator></expr></argument>,

<argument><expr><name>expected_ccstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>flagstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>received_ccstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>expected_ccstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block> 

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<macro><name>UNITTEST_START</name></macro>

<block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Skipped test not for this platform\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<expr><name>UNITTEST_STOP</name></expr>

</unit>
