




















#include "test.h"


#define fail_if(expr, msg) if(expr) { fprintf(stderr, "%s:%d Assertion '%s' met: %s\n", __FILE__, __LINE__, #expr, msg); unitfail++; }






#define fail_unless(expr, msg) if(!(expr)) { fprintf(stderr, "%s:%d Assertion '%s' failed: %s\n", __FILE__, __LINE__, #expr, msg); unitfail++; }






#define verify_memory(dynamic, check, len) if(dynamic && memcmp(dynamic, check, len)) { fprintf(stderr, "%s:%d Memory buffer mismatch size %d. '%s' is not\n", __FILE__, __LINE__, len, hexdump((const unsigned char *)check, len)); fprintf(stderr, "%s:%d the same as '%s'\n", __FILE__, __LINE__, hexdump((const unsigned char *)dynamic, len)); unitfail++; }











#define fail(msg) do { fprintf(stderr, "%s:%d test failed: '%s'\n", __FILE__, __LINE__, msg); unitfail++; } while(0)







#define abort_if(expr, msg) if(expr) { fprintf(stderr, "%s:%d Abort assertion '%s' met: %s\n", __FILE__, __LINE__, #expr, msg); unitfail++; goto unit_test_abort; }







#define abort_unless(expr, msg) if(!(expr)) { fprintf(stderr, "%s:%d Abort assertion '%s' failed: %s\n", __FILE__, __LINE__, #expr, msg); unitfail++; goto unit_test_abort; }







#define abort_test(msg) do { fprintf(stderr, "%s:%d test aborted: '%s'\n", __FILE__, __LINE__, msg); unitfail++; goto unit_test_abort; } while(0)








extern int unitfail;

#define UNITTEST_START int test(char *arg) { (void)arg; if(unit_setup()) { fail("unit_setup() failure"); } else {








#define UNITTEST_STOP goto unit_test_abort; unit_test_abort: unit_stop(); } return unitfail; }






