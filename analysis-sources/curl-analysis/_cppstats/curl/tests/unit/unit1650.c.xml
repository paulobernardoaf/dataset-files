<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\curl-analysis\_cppstats\curl\tests\unit\unit1650.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curlcheck.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"doh.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>unit_setup</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>unit_stop</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_DOH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DNS_PREAMBLE</name></cpp:macro> <cpp:value>"\x00\x00\x01\x00\x00\x01\x00\x00\x00\x00\x00\x00"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LABEL_TEST</name></cpp:macro> <cpp:value>"\x04\x74\x65\x73\x74"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LABEL_HOST</name></cpp:macro> <cpp:value>"\x04\x68\x6f\x73\x74"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LABEL_NAME</name></cpp:macro> <cpp:value>"\x04\x6e\x61\x6d\x65"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DNSA_TYPE</name></cpp:macro> <cpp:value>"\x01"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DNSAAAA_TYPE</name></cpp:macro> <cpp:value>"\x1c"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DNSA_EPILOGUE</name></cpp:macro> <cpp:value>"\x00\x00" DNSA_TYPE "\x00\x01"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DNSAAAA_EPILOGUE</name></cpp:macro> <cpp:value>"\x00\x00" DNSAAAA_TYPE "\x00\x01"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DNS_Q1</name></cpp:macro> <cpp:value>DNS_PREAMBLE LABEL_TEST LABEL_HOST LABEL_NAME DNSA_EPILOGUE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DNS_Q2</name></cpp:macro> <cpp:value>DNS_PREAMBLE LABEL_TEST LABEL_HOST LABEL_NAME DNSAAAA_EPILOGUE</cpp:value></cpp:define>

<struct>struct <name>dohrequest</name> <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DNStype</name></type> <name>type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>packet</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

}</block>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>dohrequest</name></name></type> <name><name>req</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{<expr><literal type="string">"test.host.name"</literal></expr>, <expr><name>DNS_TYPE_A</name></expr>, <expr><name>DNS_Q1</name></expr>, <expr><sizeof>sizeof<argument_list>(<argument><expr><name>DNS_Q1</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{<expr><literal type="string">"test.host.name"</literal></expr>, <expr><name>DNS_TYPE_AAAA</name></expr>, <expr><name>DNS_Q2</name></expr>, <expr><sizeof>sizeof<argument_list>(<argument><expr><name>DNS_Q2</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{<expr><literal type="string">"zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz"</literal>

<literal type="string">".host.name"</literal></expr>,

<expr><name>DNS_TYPE_AAAA</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>DOH_DNS_BAD_LABEL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<struct>struct <name>dohresp</name> <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>packet</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DNStype</name></type> <name>type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>out</name></decl>;</decl_stmt>

}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DNS_FOO_EXAMPLE_COM</name></cpp:macro> <cpp:value>"\x00\x00\x01\x00\x00\x01\x00\x01\x00\x00\x00\x00\x03\x66\x6f\x6f" "\x07\x65\x78\x61\x6d\x70\x6c\x65\x03\x63\x6f\x6d\x00\x00\x01\x00" "\x01\xc0\x0c\x00\x01\x00\x01\x00\x00\x00\x37\x00\x04\x7f\x00\x00" "\x01"</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>full49</name><index>[]</index></name> <init>= <expr><name>DNS_FOO_EXAMPLE_COM</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>dohresp</name></name></type> <name><name>resp</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{<expr><literal type="string">"\x00\x00"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>DNS_TYPE_A</name></expr>, <expr><name>DOH_TOO_SMALL_BUFFER</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,

<expr><block>{<expr><literal type="string">"\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01"</literal></expr>, <expr><literal type="number">12</literal></expr>,

<expr><name>DNS_TYPE_A</name></expr>, <expr><name>DOH_DNS_BAD_ID</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,

<expr><block>{<expr><literal type="string">"\x00\x00\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01"</literal></expr>, <expr><literal type="number">12</literal></expr>,

<expr><name>DNS_TYPE_A</name></expr>, <expr><name>DOH_DNS_BAD_RCODE</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,

<expr><block>{<expr><literal type="string">"\x00\x00\x01\x00\x00\x01\x00\x01\x00\x00\x00\x00\x03\x66\x6f\x6f"</literal></expr>, <expr><literal type="number">16</literal></expr>,

<expr><name>DNS_TYPE_A</name></expr>, <expr><name>DOH_DNS_OUT_OF_RANGE</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,

<expr><block>{<expr><literal type="string">"\x00\x00\x01\x00\x00\x01\x00\x01\x00\x00\x00\x00\x03\x66\x6f\x6f\x00"</literal></expr>, <expr><literal type="number">17</literal></expr>,

<expr><name>DNS_TYPE_A</name></expr>, <expr><name>DOH_DNS_OUT_OF_RANGE</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,

<expr><block>{<expr><literal type="string">"\x00\x00\x01\x00\x00\x01\x00\x01\x00\x00\x00\x00\x03\x66\x6f\x6f\x00"</literal>

<literal type="string">"\x00\x01\x00\x01"</literal></expr>, <expr><literal type="number">21</literal></expr>,

<expr><name>DNS_TYPE_A</name></expr>, <expr><name>DOH_DNS_OUT_OF_RANGE</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,

<expr><block>{<expr><literal type="string">"\x00\x00\x01\x00\x00\x01\x00\x01\x00\x00\x00\x00\x03\x66\x6f\x6f\x00"</literal>

<literal type="string">"\x00\x01\x00\x01"</literal>

<literal type="string">"\x04"</literal></expr>, <expr><literal type="number">18</literal></expr>,

<expr><name>DNS_TYPE_A</name></expr>, <expr><name>DOH_DNS_OUT_OF_RANGE</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,

<expr><block>{<expr><literal type="string">"\x00\x00\x01\x00\x00\x01\x00\x01\x00\x00\x00\x00\x04\x63\x75\x72"</literal>

<literal type="string">"\x6c\x04\x63\x75\x72\x6c\x00\x00\x05\x00\x01\xc0\x0c\x00\x05\x00"</literal>

<literal type="string">"\x01\x00\x00\x00\x37\x00\x11\x08\x61\x6e\x79\x77\x68\x65\x72\x65"</literal>

<literal type="string">"\x06\x72\x65\x61\x6c\x6c\x79\x00"</literal></expr>, <expr><literal type="number">56</literal></expr>,

<expr><name>DNS_TYPE_A</name></expr>, <expr><name>DOH_OK</name></expr>, <expr><literal type="string">"anywhere.really "</literal></expr>}</block></expr>,

<expr><block>{<expr><name>DNS_FOO_EXAMPLE_COM</name></expr>, <expr><literal type="number">49</literal></expr>, <expr><name>DNS_TYPE_A</name></expr>, <expr><name>DOH_OK</name></expr>, <expr><literal type="string">"127.0.0.1 "</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"\x00\x00\x01\x00\x00\x01\x00\x01\x00\x00\x00\x00\x04\x61\x61\x61"</literal>

<literal type="string">"\x61\x07\x65\x78\x61\x6d\x70\x6c\x65\x03\x63\x6f\x6d\x00\x00\x1c"</literal>

<literal type="string">"\x00\x01\xc0\x0c\x00\x1c\x00\x01\x00\x00\x00\x37\x00\x10\x20\x20"</literal>

<literal type="string">"\x20\x20\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x20\x20"</literal></expr>, <expr><literal type="number">62</literal></expr>,

<expr><name>DNS_TYPE_AAAA</name></expr>, <expr><name>DOH_OK</name></expr>,

<expr><literal type="string">"2020:2020:0000:0000:0000:0000:0000:2020 "</literal></expr> }</block></expr>,

<expr><block>{<expr><literal type="string">"\x00\x00\x01\x00\x00\x01\x00\x01\x00\x00\x00\x00\x04\x63\x75\x72"</literal>

<literal type="string">"\x6c\x04\x63\x75\x72\x6c\x00\x00\x05\x00\x01\xc0\x0c\x00\x05\x00"</literal>

<literal type="string">"\x01\x00\x00\x00\x37\x00"</literal>

<literal type="string">"\x07\x03\x61\x6e\x79\xc0\x27\x00"</literal></expr>, <expr><literal type="number">46</literal></expr>,

<expr><name>DNS_TYPE_A</name></expr>, <expr><name>DOH_DNS_LABEL_LOOP</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"\x00\x00\x01\x00\x00\x01\x00\x01\x00\x01\x00\x00\x04\x61\x61\x61"</literal>

<literal type="string">"\x61\x07\x65\x78\x61\x6d\x70\x6c\x65\x03\x63\x6f\x6d\x00\x00\x1c"</literal>

<literal type="string">"\x00\x01\xc0\x0c\x00\x1c\x00\x01\x00\x00\x00\x37\x00\x10\x20\x20"</literal>

<literal type="string">"\x20\x20\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x20\x20"</literal>

<name>LABEL_TEST</name> <name>LABEL_HOST</name> <name>LABEL_NAME</name> <name>DNSAAAA_EPILOGUE</name> <literal type="string">"\x00\x00\x00\x01"</literal>

<literal type="string">"\00\x04\x01\x01\x01\x01"</literal></expr>, 

<expr><literal type="number">62</literal> <operator>+</operator> <literal type="number">30</literal></expr>,

<expr><name>DNS_TYPE_AAAA</name></expr>, <expr><name>DOH_OK</name></expr>,

<expr><literal type="string">"2020:2020:0000:0000:0000:0000:0000:2020 "</literal></expr> }</block></expr>,

<expr><block>{<expr><literal type="string">"\x00\x00\x01\x00\x00\x01\x00\x01\x00\x00\x00\x01\x04\x61\x61\x61"</literal>

<literal type="string">"\x61\x07\x65\x78\x61\x6d\x70\x6c\x65\x03\x63\x6f\x6d\x00\x00\x1c"</literal>

<literal type="string">"\x00\x01\xc0\x0c\x00\x1c\x00\x01\x00\x00\x00\x37\x00\x10\x20\x20"</literal>

<literal type="string">"\x20\x20\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x20\x20"</literal>

<name>LABEL_TEST</name> <name>LABEL_HOST</name> <name>LABEL_NAME</name> <name>DNSAAAA_EPILOGUE</name> <literal type="string">"\x00\x00\x00\x01"</literal>

<literal type="string">"\00\x04\x01\x01\x01\x01"</literal></expr>, 

<expr><literal type="number">62</literal> <operator>+</operator> <literal type="number">30</literal></expr>,

<expr><name>DNS_TYPE_AAAA</name></expr>, <expr><name>DOH_OK</name></expr>,

<expr><literal type="string">"2020:2020:0000:0000:0000:0000:0000:2020 "</literal></expr> }</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<macro><name>UNITTEST_START</name></macro>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buffer</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>req</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><call><name>doh_encode</name><argument_list>(<argument><expr><name><name>req</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name><name>req</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name></expr></argument>,

<argument><expr><name>buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>!=</operator> <name><name>req</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>rc</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"req %zu: Expected return code %d got %d\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>,

<argument><expr><name><name>req</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>rc</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name>size</name> <operator>!=</operator> <name><name>req</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"req %zu: Expected size %zu got %zu\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>,

<argument><expr><name><name>req</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"DNS encode made: %s\n"</literal></expr></argument>, <argument><expr><call><name>hexdump</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">2</literal></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name><name>req</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>packet</name> <operator>&amp;&amp;</operator> <call><name>memcmp</name><argument_list>(<argument><expr><name><name>req</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>packet</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"DNS encode made: %s\n"</literal></expr></argument>, <argument><expr><call><name>hexdump</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"... instead of: %s\n"</literal></expr></argument>,

<argument><expr><call><name>hexdump</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>req</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>packet</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">3</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>resp</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>resp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>dohentry</name></name></type> <name>d</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>u</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>d</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>doh_decode</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>resp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>packet</name></expr></argument>, <argument><expr><name><name>resp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name></expr></argument>,

<argument><expr><name><name>resp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>!=</operator> <name><name>resp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>rc</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"resp %zu: Expected return code %d got %d\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>,

<argument><expr><name><name>resp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>rc</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">4</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>buffer</name></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>u</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>u</name> <operator>&lt;</operator> <name><name>d</name><operator>.</operator><name>numaddr</name></name></expr>;</condition> <incr><expr><name>u</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>o</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>dohaddr</name></name> <modifier>*</modifier></type><name>a</name></decl>;</decl_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <operator>&amp;</operator><name><name>d</name><operator>.</operator><name>addr</name><index>[<expr><name>u</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>resp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>DNS_TYPE_A</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>ip</name><operator>.</operator><name>v4</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msnprintf</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="string">"%u.%u.%u.%u "</literal></expr></argument>, <argument><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>p</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>o</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>-=</operator> <name>o</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <name>o</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>j</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>l</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msnprintf</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="string">"%s%02x%02x"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>j</name></expr>?</condition><then><expr><literal type="string">":"</literal></expr></then><else>:<expr><literal type="string">""</literal></expr></else></ternary></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>ip</name><operator>.</operator><name>v6</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>a</name><operator>-&gt;</operator><name>ip</name><operator>.</operator><name>v6</name><index>[<expr><name>j</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>l</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>-=</operator> <name>l</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <name>l</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>msnprintf</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<for>for<control>(<init><expr><name>u</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>u</name> <operator>&lt;</operator> <name><name>d</name><operator>.</operator><name>numcname</name></name></expr>;</condition> <incr><expr><name>u</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>o</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msnprintf</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="string">"%s "</literal></expr></argument>, <argument><expr><name><name>d</name><operator>.</operator><name>cname</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name>alloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>o</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>-=</operator> <name>o</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <name>o</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>de_cleanup</name><argument_list>(<argument><expr><operator>&amp;</operator><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>resp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>out</name> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>buffer</name></expr></argument>, <argument><expr><name><name>resp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>out</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"resp %zu: Expected %s got %s\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>,

<argument><expr><name><name>resp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>out</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<block>{<block_content>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>full49</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>dohentry</name></name></type> <name>d</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>d</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>doh_decode</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>full49</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>DNS_TYPE_A</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>rc</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%zu: %d\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">5</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>full49</name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>dohentry</name></name></type> <name>d</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>d</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>doh_decode</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>full49</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>full49</name></expr></argument>)</argument_list></sizeof><operator>-</operator><name>i</name><operator>-</operator><literal type="number">1</literal></expr></argument>,

<argument><expr><name>DNS_TYPE_A</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>rc</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"2 %zu: %d\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">7</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>dohentry</name></name></type> <name>d</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>dohaddr</name></name> <modifier>*</modifier></type><name>a</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>d</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>doh_decode</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>full49</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>full49</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></argument>,

<argument><expr><name>DNS_TYPE_A</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fail_if</name><argument_list>(<argument><expr><name><name>d</name><operator>.</operator><name>numaddr</name></name> <operator>!=</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"missing address"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <operator>&amp;</operator><name><name>d</name><operator>.</operator><name>addr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>ip</name><operator>.</operator><name>v4</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msnprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><literal type="string">"%u.%u.%u.%u"</literal></expr></argument>, <argument><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>p</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>||</operator> <call><name>strcmp</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"127.0.0.1"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"bad address decoded: %s, rc == %d\n"</literal></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">7</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>fail_if</name><argument_list>(<argument><expr><name><name>d</name><operator>.</operator><name>numcname</name></name></expr></argument>, <argument><expr><literal type="string">"bad cname counter"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

</block_content>}</block>

</block_content>}</block>

<decl_stmt><decl><type><name>UNITTEST_STOP</name></type>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 

<name>UNITTEST_START</name>

<block>{<block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return> 

</block_content>}</block></decl></decl_stmt>

<expr><name>UNITTEST_STOP</name></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
