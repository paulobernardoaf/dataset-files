<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\curl-analysis\_cppstats\curl\tests\unit\unit1602.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curlcheck.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENABLE_CURLX_PRINTF</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curlx.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hash.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memdebug.h"</cpp:file></cpp:include> 

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>curl_hash</name></name></type> <name>hash_static</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mydtor</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>p</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>unit_setup</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>Curl_hash_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hash_static</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><name>Curl_hash_str</name></expr></argument>,

<argument><expr><name>Curl_str_key_compare</name></expr></argument>, <argument><expr><name>mydtor</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>unit_stop</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>Curl_hash_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hash_static</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><name>UNITTEST_START</name>

<name>int</name> <modifier>*</modifier></type><name>value</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>value2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>nodep</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>klen</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>key</name> <init>= <expr><literal type="number">20</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>key2</name> <init>= <expr><literal type="number">25</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>abort_unless</name><argument_list>(<argument><expr><name>value</name> <operator>!=</operator> <name>NULL</name></expr></argument>, <argument><expr><literal type="string">"Out of memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>value</name> <operator>=</operator> <literal type="number">199</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>nodep</name> <operator>=</operator> <call><name>Curl_hash_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hash_static</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><name>klen</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>nodep</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>abort_unless</name><argument_list>(<argument><expr><name>nodep</name></expr></argument>, <argument><expr><literal type="string">"insertion into hash failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_hash_clean</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hash_static</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>value2</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>abort_unless</name><argument_list>(<argument><expr><name>value2</name> <operator>!=</operator> <name>NULL</name></expr></argument>, <argument><expr><literal type="string">"Out of memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>value2</name> <operator>=</operator> <literal type="number">204</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>nodep</name> <operator>=</operator> <call><name>Curl_hash_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hash_static</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key2</name></expr></argument>, <argument><expr><name>klen</name></expr></argument>, <argument><expr><name>value2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>nodep</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>value2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>abort_unless</name><argument_list>(<argument><expr><name>nodep</name></expr></argument>, <argument><expr><literal type="string">"insertion into hash failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr><name>UNITTEST_STOP</name></expr>

</unit>
