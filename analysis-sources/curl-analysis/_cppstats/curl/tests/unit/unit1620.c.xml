<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\curl-analysis\_cppstats\curl\tests\unit\unit1620.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curlcheck.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"urldata.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"url.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memdebug.h"</cpp:file></cpp:include> 

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>unit_setup</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>unit_stop</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

</block_content>}</block></function>

<macro><name>UNITTEST_START</name></macro>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>empty</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>hostname</name> <init>= <expr><literal type="string">"hostname"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>dupstring</name></name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>async</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>protocol_connect</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>Curl_open</name><argument_list>(<argument><expr><operator>&amp;</operator><name>empty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>unit_test_abort</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>fail_unless</name><argument_list>(<argument><expr><name>rc</name> <operator>==</operator> <name>CURLE_OK</name></expr></argument>, <argument><expr><literal type="string">"Curl_open() failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>Curl_connect</name><argument_list>(<argument><expr><name>empty</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>async</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>protocol_connect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fail_unless</name><argument_list>(<argument><expr><name>rc</name> <operator>==</operator> <name>CURLE_URL_MALFORMAT</name></expr></argument>,

<argument><expr><literal type="string">"Curl_connect() failed to return CURLE_URL_MALFORMAT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fail_unless</name><argument_list>(<argument><expr><name><name>empty</name><operator>-&gt;</operator><name>magic</name></name> <operator>==</operator> <name>CURLEASY_MAGIC_NUMBER</name></expr></argument>,

<argument><expr><literal type="string">"empty-&gt;magic should be equal to CURLEASY_MAGIC_NUMBER"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>Curl_connect</name><argument_list>(<argument><expr><name>empty</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>async</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>protocol_connect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fail_unless</name><argument_list>(<argument><expr><name>rc</name> <operator>==</operator> <name>CURLE_URL_MALFORMAT</name></expr></argument>,

<argument><expr><literal type="string">"Curl_connect() failed to return CURLE_URL_MALFORMAT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>Curl_init_userdefined</name><argument_list>(<argument><expr><name>empty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fail_unless</name><argument_list>(<argument><expr><name>rc</name> <operator>==</operator> <name>CURLE_OK</name></expr></argument>, <argument><expr><literal type="string">"Curl_userdefined() failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>Curl_init_do</name><argument_list>(<argument><expr><name>empty</name></expr></argument>, <argument><expr><name><name>empty</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fail_unless</name><argument_list>(<argument><expr><name>rc</name> <operator>==</operator> <name>CURLE_OK</name></expr></argument>, <argument><expr><literal type="string">"Curl_init_do() failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>Curl_parse_login_details</name><argument_list>(

<argument><expr><name>hostname</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>hostname</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fail_unless</name><argument_list>(<argument><expr><name>rc</name> <operator>==</operator> <name>CURLE_OK</name></expr></argument>,

<argument><expr><literal type="string">"Curl_parse_login_details() failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>Curl_disconnect</name><argument_list>(<argument><expr><name>empty</name></expr></argument>, <argument><expr><name><name>empty</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fail_unless</name><argument_list>(<argument><expr><name>rc</name> <operator>==</operator> <name>CURLE_OK</name></expr></argument>,

<argument><expr><literal type="string">"Curl_disconnect() with dead_connection set FALSE failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_freeset</name><argument_list>(<argument><expr><name>empty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <operator>(</operator>enum <name>dupstring</name><operator>)</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>STRING_LAST</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>fail_unless</name><argument_list>(<argument><expr><name><name>empty</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr></argument>,

<argument><expr><literal type="string">"Curl_free() did not set to NULL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>Curl_free_request_state</name><argument_list>(<argument><expr><name>empty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>Curl_close</name><argument_list>(<argument><expr><operator>&amp;</operator><name>empty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fail_unless</name><argument_list>(<argument><expr><name>rc</name> <operator>==</operator> <name>CURLE_OK</name></expr></argument>, <argument><expr><literal type="string">"Curl_close() failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<expr><name>UNITTEST_STOP</name></expr>

</unit>
