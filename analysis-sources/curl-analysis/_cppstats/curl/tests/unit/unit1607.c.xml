<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\curl-analysis\_cppstats\curl\tests\unit\unit1607.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curlcheck.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"urldata.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"connect.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"share.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memdebug.h"</cpp:file></cpp:include> 

<function><type><specifier>static</specifier> <name>void</name></type> <name>unit_stop</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>curl_global_cleanup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>unit_setup</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>global_init</name><argument_list>(<argument><expr><name>CURL_GLOBAL_ALL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></function>

<struct>struct <name>testcase</name> <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>optval</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>host</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>port</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>address</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>

}</block>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name>skip</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_IPV6</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IPV6ONLY</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>x</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IPV6ONLY</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>&amp;skip</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>testcase</name></name></type> <name><name>tests</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"test.com:80:127.0.0.1, 127.0.0.2"</literal></expr>,

<expr><literal type="string">"test.com"</literal></expr>, <expr><literal type="number">80</literal></expr>, <expr><block>{ <expr><name>NULL</name></expr>, }</block></expr>

}</block></expr>,

<expr><block>{ <expr><literal type="string">"TEST.com:80:,,127.0.0.1,,,127.0.0.2,,,,::1,,,"</literal></expr>,

<expr><literal type="string">"test.com"</literal></expr>, <expr><literal type="number">80</literal></expr>, <expr><block>{ <expr><literal type="string">"127.0.0.1"</literal></expr>, <expr><literal type="string">"127.0.0.2"</literal></expr>, <expr><call><name>IPV6ONLY</name><argument_list>(<argument><expr><literal type="string">"::1"</literal></expr></argument>)</argument_list></call></expr>, }</block></expr>

}</block></expr>,

<expr><block>{ <expr><literal type="string">"test.com:80:::1,127.0.0.1"</literal></expr>,

<expr><literal type="string">"test.com"</literal></expr>, <expr><literal type="number">80</literal></expr>, <expr><block>{ <expr><call><name>IPV6ONLY</name><argument_list>(<argument><expr><literal type="string">"::1"</literal></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"127.0.0.1"</literal></expr>, }</block></expr>

}</block></expr>,

<expr><block>{ <expr><literal type="string">"test.com:80:[::1],127.0.0.1"</literal></expr>,

<expr><literal type="string">"test.com"</literal></expr>, <expr><literal type="number">80</literal></expr>, <expr><block>{ <expr><call><name>IPV6ONLY</name><argument_list>(<argument><expr><literal type="string">"::1"</literal></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"127.0.0.1"</literal></expr>, }</block></expr>

}</block></expr>,

<expr><block>{ <expr><literal type="string">"test.com:80:::1"</literal></expr>,

<expr><literal type="string">"test.com"</literal></expr>, <expr><literal type="number">80</literal></expr>, <expr><block>{ <expr><call><name>IPV6ONLY</name><argument_list>(<argument><expr><literal type="string">"::1"</literal></expr></argument>)</argument_list></call></expr>, }</block></expr>

}</block></expr>,

<expr><block>{ <expr><literal type="string">"test.com:80:[::1]"</literal></expr>,

<expr><literal type="string">"test.com"</literal></expr>, <expr><literal type="number">80</literal></expr>, <expr><block>{ <expr><call><name>IPV6ONLY</name><argument_list>(<argument><expr><literal type="string">"::1"</literal></expr></argument>)</argument_list></call></expr>, }</block></expr>

}</block></expr>,

<expr><block>{ <expr><literal type="string">"test.com:80:127.0.0.1"</literal></expr>,

<expr><literal type="string">"test.com"</literal></expr>, <expr><literal type="number">80</literal></expr>, <expr><block>{ <expr><literal type="string">"127.0.0.1"</literal></expr>, }</block></expr>

}</block></expr>,

<expr><block>{ <expr><literal type="string">"test.com:80:,127.0.0.1"</literal></expr>,

<expr><literal type="string">"test.com"</literal></expr>, <expr><literal type="number">80</literal></expr>, <expr><block>{ <expr><literal type="string">"127.0.0.1"</literal></expr>, }</block></expr>

}</block></expr>,

<expr><block>{ <expr><literal type="string">"test.com:80:127.0.0.1,"</literal></expr>,

<expr><literal type="string">"test.com"</literal></expr>, <expr><literal type="number">80</literal></expr>, <expr><block>{ <expr><literal type="string">"127.0.0.1"</literal></expr>, }</block></expr>

}</block></expr>,

<expr><block>{ <expr><literal type="string">"test.com:0:127.0.0.1"</literal></expr>,

<expr><literal type="string">"test.com"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><block>{ <expr><literal type="string">"127.0.0.1"</literal></expr>, }</block></expr>

}</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<macro><name>UNITTEST_START</name></macro>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>testnum</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>tests</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>testcase</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>Curl_multi</name></name> <modifier>*</modifier></type><name>multi</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>easy</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>curl_slist</name></name> <modifier>*</modifier></type><name>list</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>testnum</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>addressnum</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>tests</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>address</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>tests</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>address</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>Curl_addrinfo</name></name> <modifier>*</modifier></type><name>addr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>Curl_dns_entry</name></name> <modifier>*</modifier></type><name>dns</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>entry_id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>problem</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>easy</name> <operator>=</operator> <call><name>curl_easy_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>easy</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>multi</name> <operator>=</operator> <call><name>curl_multi_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>curl_multi_add_handle</name><argument_list>(<argument><expr><name>multi</name></expr></argument>, <argument><expr><name>easy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>list</name> <operator>=</operator> <call><name>curl_slist_append</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>tests</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>optval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>list</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name>easy</name></expr></argument>, <argument><expr><name>CURLOPT_RESOLVE</name></expr></argument>, <argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_loadhostpairs</name><argument_list>(<argument><expr><name>easy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>entry_id</name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><call><name>aprintf</name><argument_list>(<argument><expr><literal type="string">"%s:%d"</literal></expr></argument>, <argument><expr><name><name>tests</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>host</name></expr></argument>, <argument><expr><name><name>tests</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>entry_id</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>dns</name> <operator>=</operator> <call><name>Curl_hash_pick</name><argument_list>(<argument><expr><name><name>easy</name><operator>-&gt;</operator><name>dns</name><operator>.</operator><name>hostcache</name></name></expr></argument>, <argument><expr><name>entry_id</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>entry_id</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>entry_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>entry_id</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>addr</name> <operator>=</operator> <ternary><condition><expr><name>dns</name></expr> ?</condition><then> <expr><name><name>dns</name><operator>-&gt;</operator><name>addr</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>addressnum</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>long</name></type> <name>port</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>ipaddress</name><index>[<expr><name>MAX_IPADR_LEN</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>addr</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>tests</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>address</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>tests</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>address</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <operator>&amp;</operator><name>skip</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>addr</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>Curl_addr2string</name><argument_list>(<argument><expr><name><name>addr</name><operator>-&gt;</operator><name>ai_addr</name></name></expr></argument>, <argument><expr><name><name>addr</name><operator>-&gt;</operator><name>ai_addrlen</name></name></expr></argument>,

<argument><expr><name>ipaddress</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>port</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s:%d tests[%d] failed. getaddressinfo failed.\n"</literal></expr></argument>,

<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>problem</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>addr</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>tests</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>address</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s:%d tests[%d] failed. the retrieved addr "</literal>

<literal type="string">"is %s but tests[%d].address[%d] is NULL.\n"</literal></expr></argument>,

<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>ipaddress</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>problem</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>addr</name> <operator>&amp;&amp;</operator> <name><name>tests</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>address</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s:%d tests[%d] failed. the retrieved addr "</literal>

<literal type="string">"is NULL but tests[%d].address[%d] is %s.\n"</literal></expr></argument>,

<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name><name>tests</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>address</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>problem</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>curl_strequal</name><argument_list>(<argument><expr><name>ipaddress</name></expr></argument>, <argument><expr><name><name>tests</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>address</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s:%d tests[%d] failed. the retrieved addr "</literal>

<literal type="string">"%s is not equal to tests[%d].address[%d] %s.\n"</literal></expr></argument>,

<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>ipaddress</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name><name>tests</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>address</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>problem</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>port</name> <operator>!=</operator> <name><name>tests</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>port</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s:%d tests[%d] failed. the retrieved port "</literal>

<literal type="string">"for tests[%d].address[%d] is %ld but tests[%d].port is %d.\n"</literal></expr></argument>,

<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>tests</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>problem</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>dns</name><operator>-&gt;</operator><name>timestamp</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s:%d tests[%d] failed. the timestamp is not zero. "</literal>

<literal type="string">"for tests[%d].address[%d\n"</literal></expr></argument>,

<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>problem</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>addr</name> <operator>=</operator> <name><name>addr</name><operator>-&gt;</operator><name>ai_next</name></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>curl_easy_cleanup</name><argument_list>(<argument><expr><name>easy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>easy</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>curl_multi_cleanup</name><argument_list>(<argument><expr><name>multi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>multi</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>curl_slist_free_all</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>list</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>problem</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>unitfail</name><operator>++</operator></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<label><name>error</name>:</label>

<expr_stmt><expr><call><name>curl_easy_cleanup</name><argument_list>(<argument><expr><name>easy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>curl_multi_cleanup</name><argument_list>(<argument><expr><name>multi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>curl_slist_free_all</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<expr><name>UNITTEST_STOP</name></expr>

</unit>
