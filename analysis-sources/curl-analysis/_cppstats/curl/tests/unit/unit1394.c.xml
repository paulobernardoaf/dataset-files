<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\curl-analysis\_cppstats\curl\tests\unit\unit1394.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curlcheck.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tool_getparam.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memdebug.h"</cpp:file></cpp:include> 

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>unit_setup</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>unit_stop</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

</block_content>}</block></function>

<decl_stmt><decl><type><name>UNITTEST_START</name>

<specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>values</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"foo:bar:baz"</literal></expr>, <expr><literal type="string">"foo"</literal></expr>, <expr><literal type="string">"bar:baz"</literal></expr>,

<expr><literal type="string">"foo\\:bar:baz"</literal></expr>, <expr><literal type="string">"foo:bar"</literal></expr>, <expr><literal type="string">"baz"</literal></expr>,

<expr><literal type="string">"foo\\\\:bar:baz"</literal></expr>, <expr><literal type="string">"foo\\"</literal></expr>, <expr><literal type="string">"bar:baz"</literal></expr>,

<expr><literal type="string">"foo:bar\\:baz"</literal></expr>, <expr><literal type="string">"foo"</literal></expr>, <expr><literal type="string">"bar\\:baz"</literal></expr>,

<expr><literal type="string">"foo:bar\\\\:baz"</literal></expr>, <expr><literal type="string">"foo"</literal></expr>, <expr><literal type="string">"bar\\\\:baz"</literal></expr>,

<expr><literal type="string">"foo\\bar\\baz"</literal></expr>, <expr><literal type="string">"foo\\bar\\baz"</literal></expr>, <expr><name>NULL</name></expr>,

<expr><literal type="string">"foo\\\\bar\\\\baz"</literal></expr>, <expr><literal type="string">"foo\\bar\\baz"</literal></expr>, <expr><name>NULL</name></expr>,

<expr><literal type="string">"foo\\"</literal></expr>, <expr><literal type="string">"foo\\"</literal></expr>, <expr><name>NULL</name></expr>,

<expr><literal type="string">"foo\\\\"</literal></expr>, <expr><literal type="string">"foo\\"</literal></expr>, <expr><name>NULL</name></expr>,

<expr><literal type="string">"foo:bar\\"</literal></expr>, <expr><literal type="string">"foo"</literal></expr>, <expr><literal type="string">"bar\\"</literal></expr>,

<expr><literal type="string">"foo:bar\\\\"</literal></expr>, <expr><literal type="string">"foo"</literal></expr>, <expr><literal type="string">"bar\\\\"</literal></expr>,

<expr><literal type="string">"foo:bar:"</literal></expr>, <expr><literal type="string">"foo"</literal></expr>, <expr><literal type="string">"bar:"</literal></expr>,

<expr><literal type="string">"foo\\::bar\\:"</literal></expr>, <expr><literal type="string">"foo:"</literal></expr>, <expr><literal type="string">"bar\\:"</literal></expr>,

<expr><literal type="string">"pkcs11:foobar"</literal></expr>, <expr><literal type="string">"pkcs11:foobar"</literal></expr>, <expr><name>NULL</name></expr>,

<expr><literal type="string">"PKCS11:foobar"</literal></expr>, <expr><literal type="string">"PKCS11:foobar"</literal></expr>, <expr><name>NULL</name></expr>,

<expr><literal type="string">"PkCs11:foobar"</literal></expr>, <expr><literal type="string">"PkCs11:foobar"</literal></expr>, <expr><name>NULL</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"c:\\foo:bar:baz"</literal></expr>, <expr><literal type="string">"c:\\foo"</literal></expr>, <expr><literal type="string">"bar:baz"</literal></expr>,

<expr><literal type="string">"c:\\foo\\:bar:baz"</literal></expr>, <expr><literal type="string">"c:\\foo:bar"</literal></expr>, <expr><literal type="string">"baz"</literal></expr>,

<expr><literal type="string">"c:\\foo\\\\:bar:baz"</literal></expr>, <expr><literal type="string">"c:\\foo\\"</literal></expr>, <expr><literal type="string">"bar:baz"</literal></expr>,

<expr><literal type="string">"c:\\foo:bar\\:baz"</literal></expr>, <expr><literal type="string">"c:\\foo"</literal></expr>, <expr><literal type="string">"bar\\:baz"</literal></expr>,

<expr><literal type="string">"c:\\foo:bar\\\\:baz"</literal></expr>, <expr><literal type="string">"c:\\foo"</literal></expr>, <expr><literal type="string">"bar\\\\:baz"</literal></expr>,

<expr><literal type="string">"c:\\foo\\bar\\baz"</literal></expr>, <expr><literal type="string">"c:\\foo\\bar\\baz"</literal></expr>, <expr><name>NULL</name></expr>,

<expr><literal type="string">"c:\\foo\\\\bar\\\\baz"</literal></expr>, <expr><literal type="string">"c:\\foo\\bar\\baz"</literal></expr>, <expr><name>NULL</name></expr>,

<expr><literal type="string">"c:\\foo\\"</literal></expr>, <expr><literal type="string">"c:\\foo\\"</literal></expr>, <expr><name>NULL</name></expr>,

<expr><literal type="string">"c:\\foo\\\\"</literal></expr>, <expr><literal type="string">"c:\\foo\\"</literal></expr>, <expr><name>NULL</name></expr>,

<expr><literal type="string">"c:\\foo:bar\\"</literal></expr>, <expr><literal type="string">"c:\\foo"</literal></expr>, <expr><literal type="string">"bar\\"</literal></expr>,

<expr><literal type="string">"c:\\foo:bar\\\\"</literal></expr>, <expr><literal type="string">"c:\\foo"</literal></expr>, <expr><literal type="string">"bar\\\\"</literal></expr>,

<expr><literal type="string">"c:\\foo:bar:"</literal></expr>, <expr><literal type="string">"c:\\foo"</literal></expr>, <expr><literal type="string">"bar:"</literal></expr>,

<expr><literal type="string">"c:\\foo\\::bar\\:"</literal></expr>, <expr><literal type="string">"c:\\foo:"</literal></expr>, <expr><literal type="string">"bar\\:"</literal></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>certname</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>passphrase</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>p</name> <operator>=</operator> <name>values</name></expr>;</init> <condition><expr><operator>*</operator><name>p</name></expr>;</condition> <incr><expr><name>p</name> <operator>+=</operator> <literal type="number">3</literal></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>parse_cert_parameter</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>certname</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>passphrase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>certname</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>certname</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"expected certname '%s' but got '%s' "</literal>

<literal type="string">"for -E param '%s'\n"</literal></expr></argument>, <argument><expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>certname</name></expr></argument>, <argument><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"assertion failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"expected certname '%s' but got NULL "</literal>

<literal type="string">"for -E param '%s'\n"</literal></expr></argument>, <argument><expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"assertion failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>certname</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"expected certname NULL but got '%s' "</literal>

<literal type="string">"for -E param '%s'\n"</literal></expr></argument>, <argument><expr><name>certname</name></expr></argument>, <argument><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"assertion failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>passphrase</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>passphrase</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"expected passphrase '%s' but got '%s'"</literal>

<literal type="string">"for -E param '%s'\n"</literal></expr></argument>, <argument><expr><name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>passphrase</name></expr></argument>, <argument><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"assertion failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"expected passphrase '%s' but got NULL "</literal>

<literal type="string">"for -E param '%s'\n"</literal></expr></argument>, <argument><expr><name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"assertion failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>passphrase</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"expected passphrase NULL but got '%s' "</literal>

<literal type="string">"for -E param '%s'\n"</literal></expr></argument>, <argument><expr><name>passphrase</name></expr></argument>, <argument><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"assertion failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name>certname</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>certname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>passphrase</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>passphrase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr><name>UNITTEST_STOP</name></expr>

</unit>
