<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\curl-analysis\_cppstats\curl\tests\unit\unit1621.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curlcheck.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"urldata.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"url.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memdebug.h"</cpp:file></cpp:include> 

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>unit_setup</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>unit_stop</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__MINGW32__</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_FSETXATTR</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__FreeBSD_version</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><name>__FreeBSD_version</name> <operator>&lt;</operator> <literal type="number">500000</literal><operator>)</operator><operator>)</operator><operator>)</operator></expr></cpp:if>

<macro><name>UNITTEST_START</name></macro>

<block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block>

<function_decl><type><name>UNITTEST_STOP</name>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<name>bool</name></type> <name>stripcredentials</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>url</name></decl></parameter>)</parameter_list>;</function_decl>

<struct>struct <name>checkthis</name> <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>input</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>output</name></decl>;</decl_stmt>

}</block>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>checkthis</name></name></type> <name><name>tests</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"ninja://foo@example.com"</literal></expr>, <expr><literal type="string">"ninja://foo@example.com"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"https://foo@example.com"</literal></expr>, <expr><literal type="string">"https://example.com/"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"https://localhost:45"</literal></expr>, <expr><literal type="string">"https://localhost:45/"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"https://foo@localhost:45"</literal></expr>, <expr><literal type="string">"https://localhost:45/"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"http://daniel:password@localhost"</literal></expr>, <expr><literal type="string">"http://localhost/"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"http://daniel@localhost"</literal></expr>, <expr><literal type="string">"http://localhost/"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"http://localhost/"</literal></expr>, <expr><literal type="string">"http://localhost/"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr> 

}</block></expr></init></decl>;</decl_stmt>

<macro><name>UNITTEST_START</name></macro>

<block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>cleanup</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>url</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>tests</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>input</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>url</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>tests</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>input</name></expr>;</expr_stmt>

<expr_stmt><expr><name>cleanup</name> <operator>=</operator> <call><name>stripcredentials</name><argument_list>(<argument><expr><operator>&amp;</operator><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Test %u got input \"%s\", output: \"%s\"\n"</literal></expr></argument>,

<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>tests</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>input</name></expr></argument>, <argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>tests</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>output</name></expr></argument>, <argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Test %u got input \"%s\", expected output \"%s\"\n"</literal>

<literal type="string">" Actual output: \"%s\"\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>tests</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>input</name></expr></argument>, <argument><expr><name><name>tests</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>output</name></expr></argument>,

<argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rc</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>cleanup</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>curl_free</name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>rc</name></expr>;</return>

</block_content>}</block>

<expr><name>UNITTEST_STOP</name></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
