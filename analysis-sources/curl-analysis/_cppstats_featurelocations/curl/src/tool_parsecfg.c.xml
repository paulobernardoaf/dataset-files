<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\curl-analysis\_cppstats_featurelocations\curl\src\tool_parsecfg.c">




















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tool_setup.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENABLE_CURLX_PRINTF</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curlx.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tool_cfgable.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tool_getparam.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tool_helpers.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tool_homedir.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tool_msgs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tool_parsecfg.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memdebug.h"</cpp:file></cpp:include> 



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ISSEP</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>dash</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(!dash &amp;&amp; (((x) == '=') || ((x) == ':')))</cpp:value></cpp:define>

<function_decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>unslashquote</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>line</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>param</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>my_get_line</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>FILE</name> <modifier>*</modifier></type><name>execpath</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>filebuffer</name><index>[<expr><literal type="number">512</literal></expr>]</index></name></decl>;</decl_stmt>




<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>len</name> <init>= <expr><call><name>GetModuleFileNameA</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>filebuffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>filebuffer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>len</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>filebuffer</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>lastdirchar</name> <init>= <expr><call><name>strrchr</name><argument_list>(<argument><expr><name>filebuffer</name></expr></argument>, <argument><expr><literal type="char">'\\'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>lastdirchar</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>remaining</name></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>lastdirchar</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>remaining</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>filebuffer</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>filebuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>remaining</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msnprintf</name><argument_list>(<argument><expr><name>lastdirchar</name></expr></argument>, <argument><expr><name>remaining</name></expr></argument>, <argument><expr><literal type="string">"%s%s"</literal></expr></argument>, <argument><expr><name>DIR_CHAR</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>fopen</name><argument_list>(<argument><expr><name>filebuffer</name></expr></argument>, <argument><expr><name>FOPEN_READTEXT</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<function><type><name>int</name></type> <name>parseconfig</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>GlobalConfig</name></name> <modifier>*</modifier></type><name>global</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>file</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>usedarg</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>OperationConfig</name></name> <modifier>*</modifier></type><name>operation</name> <init>= <expr><name><name>global</name><operator>-&gt;</operator><name>last</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pathalloc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>filename</name> <operator>||</operator> <operator>!</operator><operator>*</operator><name>filename</name></expr>)</condition> <block>{<block_content>


<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>home</name> <init>= <expr><call><name>homedir</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt> 
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name>home</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>pathalloc</name> <operator>=</operator> <call><name>curl_maprintf</name><argument_list>(<argument><expr><literal type="string">"%s%s.curlrc"</literal></expr></argument>, <argument><expr><name>home</name></expr></argument>, <argument><expr><name>DIR_CHAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>pathalloc</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>home</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return> 
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>filename</name> <operator>=</operator> <name>pathalloc</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 
<if_stmt><if>if<condition>(<expr><name>home</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>prefix</name> <init>= <expr><literal type="char">'.'</literal></expr></init></decl>;</decl_stmt>
<do>do <block>{<block_content>

<expr_stmt><expr><call><name>curl_free</name><argument_list>(<argument><expr><name>pathalloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pathalloc</name> <operator>=</operator> <call><name>curl_maprintf</name><argument_list>(<argument><expr><literal type="string">"%s%s%ccurlrc"</literal></expr></argument>, <argument><expr><name>home</name></expr></argument>, <argument><expr><name>DIR_CHAR</name></expr></argument>, <argument><expr><name>prefix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>pathalloc</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>home</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return> 
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>file</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>pathalloc</name></expr></argument>, <argument><expr><name>FOPEN_READTEXT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>file</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>filename</name> <operator>=</operator> <name>pathalloc</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>prefix</name> <operator>=</operator> <literal type="char">'_'</literal></expr>;</expr_stmt>
</block_content>}</block> while<condition>(<expr><operator>++</operator><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition>;</do>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>filename</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>file</name> <operator>=</operator> <call><name>execpath</name><argument_list>(<argument><expr><literal type="string">".curlrc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>file</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>file</name> <operator>=</operator> <call><name>execpath</name><argument_list>(<argument><expr><literal type="string">"_curlrc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name>home</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>file</name> <operator>&amp;&amp;</operator> <name>filename</name></expr>)</condition> <block>{<block_content> 
<if_stmt><if>if<condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="string">"-"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>file</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>FOPEN_READTEXT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>file</name> <operator>=</operator> <name>stdin</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>file</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>line</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>aline</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>option</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>param</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>lineno</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>dashed_option</name></decl>;</decl_stmt>

<while>while<condition>(<expr><name>NULL</name> <operator>!=</operator> <operator>(</operator><name>aline</name> <operator>=</operator> <call><name>my_get_line</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>alloced_param</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>lineno</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>line</name> <operator>=</operator> <name>aline</name></expr>;</expr_stmt>


<while>while<condition>(<expr><operator>*</operator><name>line</name> <operator>&amp;&amp;</operator> <call><name>ISSPACE</name><argument_list>(<argument><expr><operator>*</operator><name>line</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>line</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<switch>switch<condition>(<expr><operator>*</operator><name>line</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'#'</literal></expr>:</case>
<case>case <expr><literal type="char">'/'</literal></expr>:</case>
<case>case <expr><literal type="char">'\r'</literal></expr>:</case>
<case>case <expr><literal type="char">'\n'</literal></expr>:</case>
<case>case <expr><literal type="char">'*'</literal></expr>:</case>
<case>case <expr><literal type="char">'\0'</literal></expr>:</case>
<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name>aline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></switch>


<expr_stmt><expr><name>option</name> <operator>=</operator> <name>line</name></expr>;</expr_stmt>


<expr_stmt><expr><name>dashed_option</name> <operator>=</operator> <ternary><condition><expr><name><name>option</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><literal type="char">'-'</literal></expr>?</condition><then><expr><name>TRUE</name></expr></then><else>:<expr><name>FALSE</name></expr></else></ternary></expr>;</expr_stmt>

<while>while<condition>(<expr><operator>*</operator><name>line</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>ISSPACE</name><argument_list>(<argument><expr><operator>*</operator><name>line</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>ISSEP</name><argument_list>(<argument><expr><operator>*</operator><name>line</name></expr></argument>, <argument><expr><name>dashed_option</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>line</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>


<if_stmt><if>if<condition>(<expr><operator>*</operator><name>line</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>line</name><operator>++</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG_CONFIG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"GOT: %s\n"</literal></expr></argument>, <argument><expr><name>option</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<while>while<condition>(<expr><operator>*</operator><name>line</name> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>ISSPACE</name><argument_list>(<argument><expr><operator>*</operator><name>line</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>ISSEP</name><argument_list>(<argument><expr><operator>*</operator><name>line</name></expr></argument>, <argument><expr><name>dashed_option</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>line</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>


<if_stmt><if>if<condition>(<expr><operator>*</operator><name>line</name> <operator>==</operator> <literal type="char">'\"'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>line</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>param</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>param</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name>aline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>alloced_param</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>unslashquote</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>param</name> <operator>=</operator> <name>line</name></expr>;</expr_stmt> 
<while>while<condition>(<expr><operator>*</operator><name>line</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>ISSPACE</name><argument_list>(<argument><expr><operator>*</operator><name>line</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>line</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if<condition>(<expr><operator>*</operator><name>line</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>line</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt> 


<expr_stmt><expr><name>line</name><operator>++</operator></expr>;</expr_stmt>

<while>while<condition>(<expr><operator>*</operator><name>line</name> <operator>&amp;&amp;</operator> <call><name>ISSPACE</name><argument_list>(<argument><expr><operator>*</operator><name>line</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>line</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<switch>switch<condition>(<expr><operator>*</operator><name>line</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'\0'</literal></expr>:</case>
<case>case <expr><literal type="char">'\r'</literal></expr>:</case>
<case>case <expr><literal type="char">'\n'</literal></expr>:</case>
<case>case <expr><literal type="char">'#'</literal></expr>:</case> 
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>warnf</name><argument_list>(<argument><expr><name><name>operation</name><operator>-&gt;</operator><name>global</name></name></expr></argument>, <argument><expr><literal type="string">"%s:%d: warning: '%s' uses unquoted "</literal>
<literal type="string">"white space in the line that may cause side-effects!\n"</literal></expr></argument>,
<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>option</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>*</operator><name>param</name></expr>)</condition><block type="pseudo"><block_content>


<expr_stmt><expr><name>param</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG_CONFIG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"PARAM: \"%s\"\n"</literal></expr></argument>,<argument><expr><operator>(</operator><ternary><condition><expr><name>param</name></expr> ?</condition><then> <expr><name>param</name></expr> </then><else>: <expr><literal type="string">"(null)"</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>getparameter</name><argument_list>(<argument><expr><name>option</name></expr></argument>, <argument><expr><name>param</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>usedarg</name></expr></argument>, <argument><expr><name>global</name></expr></argument>, <argument><expr><name>operation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>operation</name> <operator>=</operator> <name><name>global</name><operator>-&gt;</operator><name>last</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>res</name> <operator>&amp;&amp;</operator> <name>param</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>param</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>usedarg</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>res</name> <operator>=</operator> <name>PARAM_GOT_EXTRA_PARAMETER</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>res</name> <operator>==</operator> <name>PARAM_NEXT_OPERATION</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>operation</name><operator>-&gt;</operator><name>url_list</name></name> <operator>&amp;&amp;</operator> <name><name>operation</name><operator>-&gt;</operator><name>url_list</name><operator>-&gt;</operator><name>url</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>operation</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>OperationConfig</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>operation</name><operator>-&gt;</operator><name>next</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>config_init</name><argument_list>(<argument><expr><name><name>operation</name><operator>-&gt;</operator><name>next</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>operation</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>global</name></name> <operator>=</operator> <name>global</name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>global</name><operator>-&gt;</operator><name>last</name></name> <operator>=</operator> <name><name>operation</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>operation</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>operation</name></expr>;</expr_stmt>
<expr_stmt><expr><name>operation</name> <operator>=</operator> <name><name>operation</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <name>PARAM_NO_MEM</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>res</name> <operator>!=</operator> <name>PARAM_OK</name> <operator>&amp;&amp;</operator> <name>res</name> <operator>!=</operator> <name>PARAM_NEXT_OPERATION</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="string">"-"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>filename</name> <operator>=</operator> <literal type="string">"&lt;stdin&gt;"</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>res</name> <operator>!=</operator> <name>PARAM_HELP_REQUESTED</name> <operator>&amp;&amp;</operator>
<name>res</name> <operator>!=</operator> <name>PARAM_MANUAL_REQUESTED</name> <operator>&amp;&amp;</operator>
<name>res</name> <operator>!=</operator> <name>PARAM_VERSION_INFO_REQUESTED</name> <operator>&amp;&amp;</operator>
<name>res</name> <operator>!=</operator> <name>PARAM_ENGINES_REQUESTED</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>reason</name> <init>= <expr><call><name>param2text</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>warnf</name><argument_list>(<argument><expr><name><name>operation</name><operator>-&gt;</operator><name>global</name></name></expr></argument>, <argument><expr><literal type="string">"%s:%d: warning: '%s' %s\n"</literal></expr></argument>,
<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>option</name></expr></argument>, <argument><expr><name>reason</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>alloced_param</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name>aline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if<condition>(<expr><name>file</name> <operator>!=</operator> <name>stdin</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt> 

<expr_stmt><expr><call><name>curl_free</name><argument_list>(<argument><expr><name>pathalloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>unslashquote</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>line</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>param</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<while>while<condition>(<expr><operator>*</operator><name>line</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>line</name> <operator>!=</operator> <literal type="char">'\"'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>*</operator><name>line</name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name>out</name></decl>;</decl_stmt>
<expr_stmt><expr><name>line</name><operator>++</operator></expr>;</expr_stmt>


<switch>switch<condition>(<expr><name>out</name> <operator>=</operator> <operator>*</operator><name>line</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'\0'</literal></expr>:</case>
<continue>continue;</continue> 
<case>case <expr><literal type="char">'t'</literal></expr>:</case>
<expr_stmt><expr><name>out</name> <operator>=</operator> <literal type="char">'\t'</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'n'</literal></expr>:</case>
<expr_stmt><expr><name>out</name> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'r'</literal></expr>:</case>
<expr_stmt><expr><name>out</name> <operator>=</operator> <literal type="char">'\r'</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'v'</literal></expr>:</case>
<expr_stmt><expr><name>out</name> <operator>=</operator> <literal type="char">'\v'</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><operator>*</operator><name>param</name><operator>++</operator> <operator>=</operator> <name>out</name></expr>;</expr_stmt>
<expr_stmt><expr><name>line</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>param</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>line</name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><operator>*</operator><name>param</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt> 
<return>return <expr><name>line</name></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>my_get_line</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">4096</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>nl</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>line</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<do>do <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>NULL</name> <operator>==</operator> <call><name>fgets</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>line</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>line</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>linelen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>realloc</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>linelen</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>ptr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>line</name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>line</name><index>[<expr><name>linelen</name></expr>]</index></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>nl</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block> while<condition>(<expr><operator>!</operator><name>nl</name></expr>)</condition>;</do>

<if_stmt><if>if<condition>(<expr><name>nl</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>nl</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>line</name></expr>;</return>
</block_content>}</block></function>
</unit>
