<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\curl-analysis\_cppstats_featurelocations\curl\src\tool_cb_rea.c">




















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tool_setup.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENABLE_CURLX_PRINTF</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curlx.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tool_cfgable.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tool_cb_rea.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tool_operate.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memdebug.h"</cpp:file></cpp:include> 





<function><type><name>size_t</name></type> <name>tool_read_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sz</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>nmemb</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userdata</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>rc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>InStruct</name></name> <modifier>*</modifier></type><name>in</name> <init>= <expr><name>userdata</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>read</name><argument_list>(<argument><expr><name><name>in</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>sz</name><operator>*</operator><name>nmemb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>errno</name> <operator>==</operator> <name>EAGAIN</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>in</name><operator>-&gt;</operator><name>config</name><operator>-&gt;</operator><name>readbusy</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<return>return <expr><name>CURL_READFUNC_PAUSE</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>in</name><operator>-&gt;</operator><name>config</name><operator>-&gt;</operator><name>readbusy</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>size_t</name><operator>)</operator><name>rc</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>int</name></type> <name>tool_readbusy_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>clientp</name></decl></parameter>,
<parameter><decl><type><name>curl_off_t</name></type> <name>dltotal</name></decl></parameter>, <parameter><decl><type><name>curl_off_t</name></type> <name>dlnow</name></decl></parameter>,
<parameter><decl><type><name>curl_off_t</name></type> <name>ultotal</name></decl></parameter>, <parameter><decl><type><name>curl_off_t</name></type> <name>ulnow</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>per_transfer</name></name> <modifier>*</modifier></type><name>per</name> <init>= <expr><name>clientp</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>OperationConfig</name></name> <modifier>*</modifier></type><name>config</name> <init>= <expr><name><name>per</name><operator>-&gt;</operator><name>config</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>dltotal</name></expr>;</expr_stmt> 
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>dlnow</name></expr>;</expr_stmt> 
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>ultotal</name></expr>;</expr_stmt> 
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>ulnow</name></expr>;</expr_stmt> 

<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>readbusy</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>readbusy</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>curl_easy_pause</name><argument_list>(<argument><expr><name><name>per</name><operator>-&gt;</operator><name>curl</name></name></expr></argument>, <argument><expr><name>CURLPAUSE_CONT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><ternary><condition><expr><name><name>per</name><operator>-&gt;</operator><name>noprogress</name></name></expr>?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>CURL_PROGRESSFUNC_CONTINUE</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>
</unit>
