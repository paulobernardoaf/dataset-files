<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\curl-analysis\_cppstats_featurelocations\curl\src\tool_xattr.c">




















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tool_setup.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_FSETXATTR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/xattr.h&gt;</cpp:file></cpp:include> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USE_XATTR</name></cpp:macro></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__FreeBSD_version</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>__FreeBSD_version</name> <operator>&gt;</operator> <literal type="number">500000</literal><operator>)</operator></expr></cpp:elif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/extattr.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USE_XATTR</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tool_xattr.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memdebug.h"</cpp:file></cpp:include> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_XATTR</name></expr></argument>)</argument_list></call></expr></cpp:if>


<struct><specifier>static</specifier> <specifier>const</specifier> struct <name>xattr_mapping</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>attr</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>CURLINFO</name></type> <name>info</name></decl>;</decl_stmt>
}</block> <decl><name><name>mappings</name><index>[]</index></name> <init>= <expr><block>{



<expr><block>{ <expr><literal type="string">"user.xdg.origin.url"</literal></expr>, <expr><name>CURLINFO_EFFECTIVE_URL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"user.mime_type"</literal></expr>, <expr><name>CURLINFO_CONTENT_TYPE</name></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr>, <expr><name>CURLINFO_NONE</name></expr> }</block></expr> 
}</block></expr></init></decl>;</struct>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNITTESTS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>bool</name></type> <name>stripcredentials</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>url</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function><type><specifier>static</specifier>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<name>bool</name></type> <name>stripcredentials</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>url</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CURLU</name> <modifier>*</modifier></type><name>u</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CURLUcode</name></type> <name>uc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>nurl</name></decl>;</decl_stmt>
<expr_stmt><expr><name>u</name> <operator>=</operator> <call><name>curl_url</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>u</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>uc</name> <operator>=</operator> <call><name>curl_url_set</name><argument_list>(<argument><expr><name>u</name></expr></argument>, <argument><expr><name>CURLUPART_URL</name></expr></argument>, <argument><expr><operator>*</operator><name>url</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>uc</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>uc</name> <operator>=</operator> <call><name>curl_url_set</name><argument_list>(<argument><expr><name>u</name></expr></argument>, <argument><expr><name>CURLUPART_USER</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>uc</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>uc</name> <operator>=</operator> <call><name>curl_url_set</name><argument_list>(<argument><expr><name>u</name></expr></argument>, <argument><expr><name>CURLUPART_PASSWORD</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>uc</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>uc</name> <operator>=</operator> <call><name>curl_url_get</name><argument_list>(<argument><expr><name>u</name></expr></argument>, <argument><expr><name>CURLUPART_URL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nurl</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>uc</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>curl_url_cleanup</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>url</name> <operator>=</operator> <name>nurl</name></expr>;</expr_stmt>
<return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<label><name>error</name>:</label>
<expr_stmt><expr><call><name>curl_url_cleanup</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>int</name></type> <name>fwrite_xattr</name><parameter_list>(<parameter><decl><type><name>CURL</name> <modifier>*</modifier></type><name>curl</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<while>while<condition>(<expr><name>err</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>mappings</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>attr</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>value</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><call><name>curl_easy_getinfo</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name><name>mappings</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>info</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>result</name> <operator>&amp;&amp;</operator> <name>value</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>freeptr</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>CURLINFO_EFFECTIVE_URL</name> <operator>==</operator> <name><name>mappings</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>info</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>freeptr</name> <operator>=</operator> <call><name>stripcredentials</name><argument_list>(<argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>value</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_FSETXATTR_6</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>fsetxattr</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name><name>mappings</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>attr</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_FSETXATTR_5</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>fsetxattr</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name><name>mappings</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>attr</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__FreeBSD_version</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<block>{<block_content>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>rc</name> <init>= <expr><call><name>extattr_set_fd</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>EXTATTR_NAMESPACE_USER</name></expr></argument>,
<argument><expr><name><name>mappings</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>attr</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name>err</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>rc</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if<condition>(<expr><name>freeptr</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>curl_free</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>

<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function><type><name>int</name></type> <name>fwrite_xattr</name><parameter_list>(<parameter><decl><type><name>CURL</name> <modifier>*</modifier></type><name>curl</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>curl</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>fd</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
