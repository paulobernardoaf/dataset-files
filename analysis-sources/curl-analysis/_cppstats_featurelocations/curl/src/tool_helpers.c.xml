<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\curl-analysis\_cppstats_featurelocations\curl\src\tool_helpers.c">




















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tool_setup.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"strcase.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENABLE_CURLX_PRINTF</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curlx.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tool_cfgable.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tool_msgs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tool_getparam.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tool_helpers.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memdebug.h"</cpp:file></cpp:include> 





<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>param2text</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>res</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ParameterError</name></type> <name>error</name> <init>= <expr><operator>(</operator><name>ParameterError</name><operator>)</operator><name>res</name></expr></init></decl>;</decl_stmt>
<switch>switch<condition>(<expr><name>error</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>PARAM_GOT_EXTRA_PARAMETER</name></expr>:</case>
<return>return <expr><literal type="string">"had unsupported trailing garbage"</literal></expr>;</return>
<case>case <expr><name>PARAM_OPTION_UNKNOWN</name></expr>:</case>
<return>return <expr><literal type="string">"is unknown"</literal></expr>;</return>
<case>case <expr><name>PARAM_OPTION_AMBIGUOUS</name></expr>:</case>
<return>return <expr><literal type="string">"is ambiguous"</literal></expr>;</return>
<case>case <expr><name>PARAM_REQUIRES_PARAMETER</name></expr>:</case>
<return>return <expr><literal type="string">"requires parameter"</literal></expr>;</return>
<case>case <expr><name>PARAM_BAD_USE</name></expr>:</case>
<return>return <expr><literal type="string">"is badly used here"</literal></expr>;</return>
<case>case <expr><name>PARAM_BAD_NUMERIC</name></expr>:</case>
<return>return <expr><literal type="string">"expected a proper numerical parameter"</literal></expr>;</return>
<case>case <expr><name>PARAM_NEGATIVE_NUMERIC</name></expr>:</case>
<return>return <expr><literal type="string">"expected a positive numerical parameter"</literal></expr>;</return>
<case>case <expr><name>PARAM_LIBCURL_DOESNT_SUPPORT</name></expr>:</case>
<return>return <expr><literal type="string">"the installed libcurl version doesn't support this"</literal></expr>;</return>
<case>case <expr><name>PARAM_LIBCURL_UNSUPPORTED_PROTOCOL</name></expr>:</case>
<return>return <expr><literal type="string">"a specified protocol is unsupported by libcurl"</literal></expr>;</return>
<case>case <expr><name>PARAM_NO_MEM</name></expr>:</case>
<return>return <expr><literal type="string">"out of memory"</literal></expr>;</return>
<case>case <expr><name>PARAM_NO_PREFIX</name></expr>:</case>
<return>return <expr><literal type="string">"the given option can't be reversed with a --no- prefix"</literal></expr>;</return>
<case>case <expr><name>PARAM_NUMBER_TOO_LARGE</name></expr>:</case>
<return>return <expr><literal type="string">"too large number"</literal></expr>;</return>
<case>case <expr><name>PARAM_NO_NOT_BOOLEAN</name></expr>:</case>
<return>return <expr><literal type="string">"used '--no-' for option that isn't a boolean"</literal></expr>;</return>
<default>default:</default>
<return>return <expr><literal type="string">"unknown error"</literal></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>SetHTTPrequest</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>OperationConfig</name></name> <modifier>*</modifier></type><name>config</name></decl></parameter>, <parameter><decl><type><name>HttpReq</name></type> <name>req</name></decl></parameter>, <parameter><decl><type><name>HttpReq</name> <modifier>*</modifier></type><name>store</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>reqname</name><index>[]</index></name><init>= <expr><block>{
<expr><literal type="string">""</literal></expr>, 
<expr><literal type="string">"GET (-G, --get)"</literal></expr>,
<expr><literal type="string">"HEAD (-I, --head)"</literal></expr>,
<expr><literal type="string">"multipart formpost (-F, --form)"</literal></expr>,
<expr><literal type="string">"POST (-d, --data)"</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><operator>*</operator><name>store</name> <operator>==</operator> <name>HTTPREQ_UNSPEC</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><operator>*</operator><name>store</name> <operator>==</operator> <name>req</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>store</name> <operator>=</operator> <name>req</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>warnf</name><argument_list>(<argument><expr><name><name>config</name><operator>-&gt;</operator><name>global</name></name></expr></argument>, <argument><expr><literal type="string">"You can only select one HTTP request method! "</literal>
<literal type="string">"You asked for both %s and %s.\n"</literal></expr></argument>,
<argument><expr><name><name>reqname</name><index>[<expr><name>req</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>reqname</name><index>[<expr><operator>*</operator><name>store</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>customrequest_helper</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>OperationConfig</name></name> <modifier>*</modifier></type><name>config</name></decl></parameter>, <parameter><decl><type><name>HttpReq</name></type> <name>req</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>method</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>dflt</name><index>[]</index></name><init>= <expr><block>{
<expr><literal type="string">"GET"</literal></expr>,
<expr><literal type="string">"GET"</literal></expr>,
<expr><literal type="string">"HEAD"</literal></expr>,
<expr><literal type="string">"POST"</literal></expr>,
<expr><literal type="string">"POST"</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>method</name></expr>)</condition><block type="pseudo"><block_content>
<empty_stmt>;</empty_stmt></block_content></block></if>
<if type="elseif">else if<condition>(<expr><call><name>curl_strequal</name><argument_list>(<argument><expr><name>method</name></expr></argument>, <argument><expr><name><name>dflt</name><index>[<expr><name>req</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>notef</name><argument_list>(<argument><expr><name><name>config</name><operator>-&gt;</operator><name>global</name></name></expr></argument>, <argument><expr><literal type="string">"Unnecessary use of -X or --request, %s is already "</literal>
<literal type="string">"inferred.\n"</literal></expr></argument>, <argument><expr><name><name>dflt</name><index>[<expr><name>req</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><call><name>curl_strequal</name><argument_list>(<argument><expr><name>method</name></expr></argument>, <argument><expr><literal type="string">"head"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>warnf</name><argument_list>(<argument><expr><name><name>config</name><operator>-&gt;</operator><name>global</name></name></expr></argument>,
<argument><expr><literal type="string">"Setting custom HTTP method to HEAD with -X/--request may not work "</literal>
<literal type="string">"the way you want. Consider using -I/--head instead.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
</unit>
