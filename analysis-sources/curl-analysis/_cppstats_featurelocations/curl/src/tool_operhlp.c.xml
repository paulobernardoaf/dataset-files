<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\curl-analysis\_cppstats_featurelocations\curl\src\tool_operhlp.c">




















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tool_setup.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"strcase.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENABLE_CURLX_PRINTF</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curlx.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tool_cfgable.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tool_convert.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tool_doswin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tool_operhlp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tool_metalink.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memdebug.h"</cpp:file></cpp:include> 

<function><type><name>void</name></type> <name>clean_getout</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>OperationConfig</name></name> <modifier>*</modifier></type><name>config</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>config</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>getout</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>getout</name></name> <modifier>*</modifier></type><name>node</name> <init>= <expr><name><name>config</name><operator>-&gt;</operator><name>url_list</name></name></expr></init></decl>;</decl_stmt>

<while>while<condition>(<expr><name>node</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>next</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>outfile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>infile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>node</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>url_list</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>output_expected</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>url</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>uploadfile</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>uploadfile</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt> 
<if_stmt><if>if<condition>(<expr><call><name>checkprefix</name><argument_list>(<argument><expr><literal type="string">"http://"</literal></expr></argument>, <argument><expr><name>url</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>checkprefix</name><argument_list>(<argument><expr><literal type="string">"https://"</literal></expr></argument>, <argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt> 

<return>return <expr><name>FALSE</name></expr>;</return> 
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>stdin_upload</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>uploadfile</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><operator>(</operator><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>uploadfile</name></expr></argument>, <argument><expr><literal type="string">"-"</literal></expr></argument>)</argument_list></call> <operator>||</operator>
<operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>uploadfile</name></expr></argument>, <argument><expr><literal type="string">"."</literal></expr></argument>)</argument_list></call><operator>)</operator></expr> ?</condition><then> <expr><name>TRUE</name></expr> </then><else>: <expr><name>FALSE</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>





<function><type><name>char</name> <modifier>*</modifier></type><name>add_file_name_to_url</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>url</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><call><name>strstr</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr><literal type="string">"://"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CURL</name> <modifier>*</modifier></type><name>curl</name> <init>= <expr><call><name>curl_easy_init</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt> 
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>curl</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt> 
<if_stmt><if>if<condition>(<expr><name>ptr</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>url</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>strrchr</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>ptr</name> <operator>||</operator> <operator>!</operator><operator>*</operator><operator>++</operator><name>ptr</name></expr>)</condition> <block>{<block_content>






<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filep</name> <init>= <expr><call><name>strrchr</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>file2</name> <init>= <expr><call><name>strrchr</name><argument_list>(<argument><expr><ternary><condition><expr><name>filep</name></expr>?</condition><then><expr><name>filep</name></expr></then><else>:<expr><name>filename</name></expr></else></ternary></expr></argument>, <argument><expr><literal type="char">'\\'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>encfile</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>file2</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>filep</name> <operator>=</operator> <name>file2</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>(<expr><name>filep</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>filep</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>filep</name> <operator>=</operator> <name>filename</name></expr>;</expr_stmt></block_content></block></else></if_stmt>


<expr_stmt><expr><name>encfile</name> <operator>=</operator> <call><name>curl_easy_escape</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>filep</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>encfile</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>urlbuffer</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>ptr</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>urlbuffer</name> <operator>=</operator> <call><name>aprintf</name><argument_list>(<argument><expr><literal type="string">"%s%s"</literal></expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr><name>encfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>urlbuffer</name> <operator>=</operator> <call><name>aprintf</name><argument_list>(<argument><expr><literal type="string">"%s/%s"</literal></expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr><name>encfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>curl_free</name><argument_list>(<argument><expr><name>encfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>urlbuffer</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>url</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>url</name> <operator>=</operator> <name>urlbuffer</name></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<label><name>end</name>:</label>
<expr_stmt><expr><call><name>curl_easy_cleanup</name><argument_list>(<argument><expr><name>curl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>url</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>CURLcode</name></type> <name>get_url_file_name</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>url</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pc</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pc2</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>filename</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>


<expr_stmt><expr><name>pc</name> <operator>=</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr><literal type="string">"://"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>pc</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>pc</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>pc</name> <operator>=</operator> <name>url</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>pc2</name> <operator>=</operator> <call><name>strrchr</name><argument_list>(<argument><expr><name>pc</name></expr></argument>, <argument><expr><literal type="char">'\\'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pc</name> <operator>=</operator> <call><name>strrchr</name><argument_list>(<argument><expr><name>pc</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>pc2</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name>pc</name> <operator>||</operator> <name>pc</name> <operator>&lt;</operator> <name>pc2</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>pc</name> <operator>=</operator> <name>pc2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>pc</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>pc</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>pc</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><operator>*</operator><name>filename</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>pc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>*</operator><name>filename</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSDOS</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>sanitized</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SANITIZEcode</name></type> <name>sc</name> <init>= <expr><call><name>sanitize_file_name</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sanitized</name></expr></argument>, <argument><expr><operator>*</operator><name>filename</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><operator>*</operator><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>sc</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_URL_MALFORMAT</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>filename</name> <operator>=</operator> <name>sanitized</name></expr>;</expr_stmt>
</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 





<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUGBUILD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tdir</name> <init>= <expr><call><name>curlx_getenv</name><argument_list>(<argument><expr><literal type="string">"CURL_TESTDIR"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>tdir</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr><literal type="number">512</literal></expr>]</index></name></decl>;</decl_stmt> 
<expr_stmt><expr><call><name>msnprintf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s/%s"</literal></expr></argument>, <argument><expr><name>tdir</name></expr></argument>, <argument><expr><operator>*</operator><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><operator>*</operator><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>filename</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>curl_free</name><argument_list>(<argument><expr><name>tdir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>*</operator><name>filename</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>CURLE_OK</name></expr>;</return>
</block_content>}</block></function>
</unit>
