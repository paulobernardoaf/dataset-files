<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\curl-analysis\_cppstats_featurelocations\curl\src\tool_libinfo.c">




















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tool_setup.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"strcase.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENABLE_CURLX_PRINTF</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curlx.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tool_libinfo.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memdebug.h"</cpp:file></cpp:include> 



<decl_stmt><decl><type><name>curl_version_info_data</name> <modifier>*</modifier></type><name>curlinfo</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>built_in_protos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>









<function><type><name>CURLcode</name></type> <name>get_libcurl_info</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<struct><specifier>static</specifier> struct <name>proto_name_pattern</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>proto_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>proto_pattern</name></decl>;</decl_stmt>
}</block> <decl>const <name><name>possibly_built_in</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"dict"</literal></expr>, <expr><name>CURLPROTO_DICT</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"file"</literal></expr>, <expr><name>CURLPROTO_FILE</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"ftp"</literal></expr>, <expr><name>CURLPROTO_FTP</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"ftps"</literal></expr>, <expr><name>CURLPROTO_FTPS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"gopher"</literal></expr>, <expr><name>CURLPROTO_GOPHER</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"http"</literal></expr>, <expr><name>CURLPROTO_HTTP</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"https"</literal></expr>, <expr><name>CURLPROTO_HTTPS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"imap"</literal></expr>, <expr><name>CURLPROTO_IMAP</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"imaps"</literal></expr>, <expr><name>CURLPROTO_IMAPS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"ldap"</literal></expr>, <expr><name>CURLPROTO_LDAP</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"ldaps"</literal></expr>, <expr><name>CURLPROTO_LDAPS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"pop3"</literal></expr>, <expr><name>CURLPROTO_POP3</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"pop3s"</literal></expr>, <expr><name>CURLPROTO_POP3S</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"rtmp"</literal></expr>, <expr><name>CURLPROTO_RTMP</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"rtsp"</literal></expr>, <expr><name>CURLPROTO_RTSP</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"scp"</literal></expr>, <expr><name>CURLPROTO_SCP</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"sftp"</literal></expr>, <expr><name>CURLPROTO_SFTP</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"smb"</literal></expr>, <expr><name>CURLPROTO_SMB</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"smbs"</literal></expr>, <expr><name>CURLPROTO_SMBS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"smtp"</literal></expr>, <expr><name>CURLPROTO_SMTP</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"smtps"</literal></expr>, <expr><name>CURLPROTO_SMTPS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"telnet"</literal></expr>, <expr><name>CURLPROTO_TELNET</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"tftp"</literal></expr>, <expr><name>CURLPROTO_TFTP</name></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>
}</block></expr></init></decl>;</struct>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier> <modifier>*</modifier></type><name>proto</name></decl>;</decl_stmt>


<expr_stmt><expr><name>curlinfo</name> <operator>=</operator> <call><name>curl_version_info</name><argument_list>(<argument><expr><name>CURLVERSION_NOW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>curlinfo</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_FAILED_INIT</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>built_in_protos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>curlinfo</name><operator>-&gt;</operator><name>protocols</name></name></expr>)</condition> <block>{<block_content>
<for>for<control>(<init><expr><name>proto</name> <operator>=</operator> <name><name>curlinfo</name><operator>-&gt;</operator><name>protocols</name></name></expr>;</init> <condition><expr><operator>*</operator><name>proto</name></expr>;</condition> <incr><expr><name>proto</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>proto_name_pattern</name></name> <specifier>const</specifier> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<for>for<control>(<init><expr><name>p</name> <operator>=</operator> <name>possibly_built_in</name></expr>;</init> <condition><expr><name><name>p</name><operator>-&gt;</operator><name>proto_name</name></name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><call><name>curl_strequal</name><argument_list>(<argument><expr><operator>*</operator><name>proto</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>proto_name</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>built_in_protos</name> <operator>|=</operator> <name><name>p</name><operator>-&gt;</operator><name>proto_pattern</name></name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>
</block_content>}</block></function>
</unit>
