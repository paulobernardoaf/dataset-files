<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\curl-analysis\_cppstats_featurelocations\curl\src\tool_progress.c">




















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tool_setup.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tool_operate.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tool_progress.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tool_util.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENABLE_CURLX_PRINTF</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curlx.h"</cpp:file></cpp:include>




<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>max5data</name><parameter_list>(<parameter><decl><type><name>curl_off_t</name></type> <name>bytes</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>max5</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ONE_KILOBYTE</name></cpp:macro> <cpp:value>CURL_OFF_T_C(1024)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ONE_MEGABYTE</name></cpp:macro> <cpp:value>(CURL_OFF_T_C(1024) * ONE_KILOBYTE)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ONE_GIGABYTE</name></cpp:macro> <cpp:value>(CURL_OFF_T_C(1024) * ONE_MEGABYTE)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ONE_TERABYTE</name></cpp:macro> <cpp:value>(CURL_OFF_T_C(1024) * ONE_GIGABYTE)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ONE_PETABYTE</name></cpp:macro> <cpp:value>(CURL_OFF_T_C(1024) * ONE_TERABYTE)</cpp:value></cpp:define>

<if_stmt><if>if<condition>(<expr><name>bytes</name> <operator>&lt;</operator> <call><name>CURL_OFF_T_C</name><argument_list>(<argument><expr><literal type="number">100000</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msnprintf</name><argument_list>(<argument><expr><name>max5</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="string">"%5"</literal> <name>CURL_FORMAT_CURL_OFF_T</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>(<expr><name>bytes</name> <operator>&lt;</operator> <call><name>CURL_OFF_T_C</name><argument_list>(<argument><expr><literal type="number">10000</literal></expr></argument>)</argument_list></call> <operator>*</operator> <name>ONE_KILOBYTE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msnprintf</name><argument_list>(<argument><expr><name>max5</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="string">"%4"</literal> <name>CURL_FORMAT_CURL_OFF_T</name> <literal type="string">"k"</literal></expr></argument>, <argument><expr><name>bytes</name><operator>/</operator><name>ONE_KILOBYTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>(<expr><name>bytes</name> <operator>&lt;</operator> <call><name>CURL_OFF_T_C</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call> <operator>*</operator> <name>ONE_MEGABYTE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msnprintf</name><argument_list>(<argument><expr><name>max5</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="string">"%2"</literal> <name>CURL_FORMAT_CURL_OFF_T</name> <literal type="string">".%0"</literal>
<name>CURL_FORMAT_CURL_OFF_T</name> <literal type="string">"M"</literal></expr></argument>, <argument><expr><name>bytes</name><operator>/</operator><name>ONE_MEGABYTE</name></expr></argument>,
<argument><expr><operator>(</operator><name>bytes</name><operator>%</operator><name>ONE_MEGABYTE</name><operator>)</operator> <operator>/</operator> <operator>(</operator><name>ONE_MEGABYTE</name><operator>/</operator><call><name>CURL_OFF_T_C</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>CURL_SIZEOF_CURL_OFF_T</name> <operator>&gt;</operator> <literal type="number">4</literal><operator>)</operator></expr></cpp:if>

<if type="elseif">else if<condition>(<expr><name>bytes</name> <operator>&lt;</operator> <call><name>CURL_OFF_T_C</name><argument_list>(<argument><expr><literal type="number">10000</literal></expr></argument>)</argument_list></call> <operator>*</operator> <name>ONE_MEGABYTE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msnprintf</name><argument_list>(<argument><expr><name>max5</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="string">"%4"</literal> <name>CURL_FORMAT_CURL_OFF_T</name> <literal type="string">"M"</literal></expr></argument>, <argument><expr><name>bytes</name><operator>/</operator><name>ONE_MEGABYTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>(<expr><name>bytes</name> <operator>&lt;</operator> <call><name>CURL_OFF_T_C</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call> <operator>*</operator> <name>ONE_GIGABYTE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msnprintf</name><argument_list>(<argument><expr><name>max5</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="string">"%2"</literal> <name>CURL_FORMAT_CURL_OFF_T</name> <literal type="string">".%0"</literal>
<name>CURL_FORMAT_CURL_OFF_T</name> <literal type="string">"G"</literal></expr></argument>, <argument><expr><name>bytes</name><operator>/</operator><name>ONE_GIGABYTE</name></expr></argument>,
<argument><expr><operator>(</operator><name>bytes</name><operator>%</operator><name>ONE_GIGABYTE</name><operator>)</operator> <operator>/</operator> <operator>(</operator><name>ONE_GIGABYTE</name><operator>/</operator><call><name>CURL_OFF_T_C</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>(<expr><name>bytes</name> <operator>&lt;</operator> <call><name>CURL_OFF_T_C</name><argument_list>(<argument><expr><literal type="number">10000</literal></expr></argument>)</argument_list></call> <operator>*</operator> <name>ONE_GIGABYTE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msnprintf</name><argument_list>(<argument><expr><name>max5</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="string">"%4"</literal> <name>CURL_FORMAT_CURL_OFF_T</name> <literal type="string">"G"</literal></expr></argument>, <argument><expr><name>bytes</name><operator>/</operator><name>ONE_GIGABYTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>(<expr><name>bytes</name> <operator>&lt;</operator> <call><name>CURL_OFF_T_C</name><argument_list>(<argument><expr><literal type="number">10000</literal></expr></argument>)</argument_list></call> <operator>*</operator> <name>ONE_TERABYTE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msnprintf</name><argument_list>(<argument><expr><name>max5</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="string">"%4"</literal> <name>CURL_FORMAT_CURL_OFF_T</name> <literal type="string">"T"</literal></expr></argument>, <argument><expr><name>bytes</name><operator>/</operator><name>ONE_TERABYTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msnprintf</name><argument_list>(<argument><expr><name>max5</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="string">"%4"</literal> <name>CURL_FORMAT_CURL_OFF_T</name> <literal type="string">"P"</literal></expr></argument>, <argument><expr><name>bytes</name><operator>/</operator><name>ONE_PETABYTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else>




<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msnprintf</name><argument_list>(<argument><expr><name>max5</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="string">"%4"</literal> <name>CURL_FORMAT_CURL_OFF_T</name> <literal type="string">"M"</literal></expr></argument>, <argument><expr><name>bytes</name><operator>/</operator><name>ONE_MEGABYTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>max5</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>xferinfo_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>clientp</name></decl></parameter>,
<parameter><decl><type><name>curl_off_t</name></type> <name>dltotal</name></decl></parameter>,
<parameter><decl><type><name>curl_off_t</name></type> <name>dlnow</name></decl></parameter>,
<parameter><decl><type><name>curl_off_t</name></type> <name>ultotal</name></decl></parameter>,
<parameter><decl><type><name>curl_off_t</name></type> <name>ulnow</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>per_transfer</name></name> <modifier>*</modifier></type><name>per</name> <init>= <expr><name>clientp</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>OperationConfig</name></name> <modifier>*</modifier></type><name>config</name> <init>= <expr><name><name>per</name><operator>-&gt;</operator><name>config</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>per</name><operator>-&gt;</operator><name>dltotal</name></name> <operator>=</operator> <name>dltotal</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>per</name><operator>-&gt;</operator><name>dlnow</name></name> <operator>=</operator> <name>dlnow</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>per</name><operator>-&gt;</operator><name>ultotal</name></name> <operator>=</operator> <name>ultotal</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>per</name><operator>-&gt;</operator><name>ulnow</name></name> <operator>=</operator> <name>ulnow</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>-&gt;</operator><name>readbusy</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>readbusy</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>curl_easy_pause</name><argument_list>(<argument><expr><name><name>per</name><operator>-&gt;</operator><name>curl</name></name></expr></argument>, <argument><expr><name>CURLPAUSE_CONT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>void</name></type> <name>time2str</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>curl_off_t</name></type> <name>seconds</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>curl_off_t</name></type> <name>h</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>seconds</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="string">"--:--:--"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>h</name> <operator>=</operator> <name>seconds</name> <operator>/</operator> <call><name>CURL_OFF_T_C</name><argument_list>(<argument><expr><literal type="number">3600</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>h</name> <operator>&lt;=</operator> <call><name>CURL_OFF_T_C</name><argument_list>(<argument><expr><literal type="number">99</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>curl_off_t</name></type> <name>m</name> <init>= <expr><operator>(</operator><name>seconds</name> <operator>-</operator> <operator>(</operator><name>h</name><operator>*</operator><call><name>CURL_OFF_T_C</name><argument_list>(<argument><expr><literal type="number">3600</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator> <operator>/</operator> <call><name>CURL_OFF_T_C</name><argument_list>(<argument><expr><literal type="number">60</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>curl_off_t</name></type> <name>s</name> <init>= <expr><operator>(</operator><name>seconds</name> <operator>-</operator> <operator>(</operator><name>h</name><operator>*</operator><call><name>CURL_OFF_T_C</name><argument_list>(<argument><expr><literal type="number">3600</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator> <operator>-</operator> <operator>(</operator><name>m</name><operator>*</operator><call><name>CURL_OFF_T_C</name><argument_list>(<argument><expr><literal type="number">60</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>msnprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><literal type="string">"%2"</literal> <name>CURL_FORMAT_CURL_OFF_T</name> <literal type="string">":%02"</literal> <name>CURL_FORMAT_CURL_OFF_T</name>
<literal type="string">":%02"</literal> <name>CURL_FORMAT_CURL_OFF_T</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>


<decl_stmt><decl><type><name>curl_off_t</name></type> <name>d</name> <init>= <expr><name>seconds</name> <operator>/</operator> <call><name>CURL_OFF_T_C</name><argument_list>(<argument><expr><literal type="number">86400</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>h</name> <operator>=</operator> <operator>(</operator><name>seconds</name> <operator>-</operator> <operator>(</operator><name>d</name><operator>*</operator><call><name>CURL_OFF_T_C</name><argument_list>(<argument><expr><literal type="number">86400</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator> <operator>/</operator> <call><name>CURL_OFF_T_C</name><argument_list>(<argument><expr><literal type="number">3600</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>d</name> <operator>&lt;=</operator> <call><name>CURL_OFF_T_C</name><argument_list>(<argument><expr><literal type="number">999</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msnprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><literal type="string">"%3"</literal> <name>CURL_FORMAT_CURL_OFF_T</name>
<literal type="string">"d %02"</literal> <name>CURL_FORMAT_CURL_OFF_T</name> <literal type="string">"h"</literal></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msnprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><literal type="string">"%7"</literal> <name>CURL_FORMAT_CURL_OFF_T</name> <literal type="string">"d"</literal></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>curl_off_t</name></type> <name>all_dltotal</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>curl_off_t</name></type> <name>all_ultotal</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>curl_off_t</name></type> <name>all_dlalready</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>curl_off_t</name></type> <name>all_ulalready</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>curl_off_t</name></type> <name>all_xfers</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<struct>struct <name>speedcount</name> <block>{
<decl_stmt><decl><type><name>curl_off_t</name></type> <name>dl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>curl_off_t</name></type> <name>ul</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>stamp</name></decl>;</decl_stmt>
}</block>;</struct>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPEEDCNT</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name>speedindex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>indexwrapped</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>speedcount</name></name></type> <name><name>speedstore</name><index>[<expr><name>SPEEDCNT</name></expr>]</index></name></decl>;</decl_stmt>





<function><type><name>bool</name></type> <name>progress_meter</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>GlobalConfig</name></name> <modifier>*</modifier></type><name>global</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>timeval</name></name> <modifier>*</modifier></type><name>start</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>final</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>timeval</name></name></type> <name>stamp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>header</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>now</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>diff</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>global</name><operator>-&gt;</operator><name>noprogress</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>now</name> <operator>=</operator> <call><name>tvnow</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>diff</name> <operator>=</operator> <call><name>tvdiff</name><argument_list>(<argument><expr><name>now</name></expr></argument>, <argument><expr><name>stamp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>header</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>header</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><literal type="string">"DL% UL% Dled Uled Xfers Live Qd "</literal>
<literal type="string">"Total Current Left Speed\n"</literal></expr></argument>,
<argument><expr><name><name>global</name><operator>-&gt;</operator><name>errors</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>final</name> <operator>||</operator> <operator>(</operator><name>diff</name> <operator>&gt;</operator> <literal type="number">500</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>time_left</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>time_total</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>time_spent</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>curl_off_t</name></type> <name>spent</name> <init>= <expr><call><name>tvdiff</name><argument_list>(<argument><expr><name>now</name></expr></argument>, <argument><expr><operator>*</operator><name>start</name></expr></argument>)</argument_list></call><operator>/</operator><literal type="number">1000</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>dlpercen</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><init>=<expr><literal type="string">"--"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>ulpercen</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><init>=<expr><literal type="string">"--"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>per_transfer</name></name> <modifier>*</modifier></type><name>per</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>curl_off_t</name></type> <name>all_dlnow</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>curl_off_t</name></type> <name>all_ulnow</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>dlknown</name> <init>= <expr><name>TRUE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>ulknown</name> <init>= <expr><name>TRUE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>curl_off_t</name></type> <name>all_running</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>curl_off_t</name></type> <name>all_queued</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>curl_off_t</name></type> <name>speed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>
<expr_stmt><expr><name>stamp</name> <operator>=</operator> <name>now</name></expr>;</expr_stmt>


<expr_stmt><expr><name>all_dlnow</name> <operator>+=</operator> <name>all_dlalready</name></expr>;</expr_stmt>
<expr_stmt><expr><name>all_ulnow</name> <operator>+=</operator> <name>all_ulalready</name></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>per</name> <operator>=</operator> <name>transfers</name></expr>;</init> <condition><expr><name>per</name></expr>;</condition> <incr><expr><name>per</name> <operator>=</operator> <name><name>per</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>all_dlnow</name> <operator>+=</operator> <name><name>per</name><operator>-&gt;</operator><name>dlnow</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>all_ulnow</name> <operator>+=</operator> <name><name>per</name><operator>-&gt;</operator><name>ulnow</name></name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>per</name><operator>-&gt;</operator><name>dltotal</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>dlknown</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>(<expr><operator>!</operator><name><name>per</name><operator>-&gt;</operator><name>dltotal_added</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>all_dltotal</name> <operator>+=</operator> <name><name>per</name><operator>-&gt;</operator><name>dltotal</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>per</name><operator>-&gt;</operator><name>dltotal_added</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>per</name><operator>-&gt;</operator><name>ultotal</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ulknown</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>(<expr><operator>!</operator><name><name>per</name><operator>-&gt;</operator><name>ultotal_added</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>all_ultotal</name> <operator>+=</operator> <name><name>per</name><operator>-&gt;</operator><name>ultotal</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>per</name><operator>-&gt;</operator><name>ultotal_added</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>per</name><operator>-&gt;</operator><name>added</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>all_queued</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>all_running</name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if<condition>(<expr><name>dlknown</name> <operator>&amp;&amp;</operator> <name>all_dltotal</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msnprintf</name><argument_list>(<argument><expr><name>dlpercen</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>dlpercen</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%3d"</literal></expr></argument>,
<argument><expr><name>all_dlnow</name> <operator>*</operator> <literal type="number">100</literal> <operator>/</operator> <name>all_dltotal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>ulknown</name> <operator>&amp;&amp;</operator> <name>all_ultotal</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msnprintf</name><argument_list>(<argument><expr><name>ulpercen</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ulpercen</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%3d"</literal></expr></argument>,
<argument><expr><name>all_ulnow</name> <operator>*</operator> <literal type="number">100</literal> <operator>/</operator> <name>all_ultotal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



<expr_stmt><expr><name>i</name> <operator>=</operator> <name>speedindex</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>speedstore</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dl</name> <operator>=</operator> <name>all_dlnow</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>speedstore</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ul</name> <operator>=</operator> <name>all_ulnow</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>speedstore</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>stamp</name> <operator>=</operator> <name>now</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>++</operator><name>speedindex</name> <operator>&gt;=</operator> <name>SPEEDCNT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>indexwrapped</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>speedindex</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>deltams</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>curl_off_t</name></type> <name>dl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>curl_off_t</name></type> <name>ul</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>curl_off_t</name></type> <name>dls</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>curl_off_t</name></type> <name>uls</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>indexwrapped</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>deltams</name> <operator>=</operator> <call><name>tvdiff</name><argument_list>(<argument><expr><name>now</name></expr></argument>, <argument><expr><name><name>speedstore</name><index>[<expr><name>speedindex</name></expr>]</index></name><operator>.</operator><name>stamp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dl</name> <operator>=</operator> <name>all_dlnow</name> <operator>-</operator> <name><name>speedstore</name><index>[<expr><name>speedindex</name></expr>]</index></name><operator>.</operator><name>dl</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ul</name> <operator>=</operator> <name>all_ulnow</name> <operator>-</operator> <name><name>speedstore</name><index>[<expr><name>speedindex</name></expr>]</index></name><operator>.</operator><name>ul</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>

<expr_stmt><expr><name>deltams</name> <operator>=</operator> <call><name>tvdiff</name><argument_list>(<argument><expr><name>now</name></expr></argument>, <argument><expr><operator>*</operator><name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dl</name> <operator>=</operator> <name>all_dlnow</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ul</name> <operator>=</operator> <name>all_ulnow</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>dls</name> <operator>=</operator> <operator>(</operator><name>curl_off_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>double</name><operator>)</operator><name>dl</name> <operator>/</operator> <operator>(</operator><operator>(</operator><name>double</name><operator>)</operator><name>deltams</name><operator>/</operator><literal type="number">1000.0</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>uls</name> <operator>=</operator> <operator>(</operator><name>curl_off_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>double</name><operator>)</operator><name>ul</name> <operator>/</operator> <operator>(</operator><operator>(</operator><name>double</name><operator>)</operator><name>deltams</name><operator>/</operator><literal type="number">1000.0</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>speed</name> <operator>=</operator> <ternary><condition><expr><name>dls</name> <operator>&gt;</operator> <name>uls</name></expr> ?</condition><then> <expr><name>dls</name></expr> </then><else>: <expr><name>uls</name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block>


<if_stmt><if>if<condition>(<expr><name>dlknown</name> <operator>&amp;&amp;</operator> <name>speed</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>curl_off_t</name></type> <name>est</name> <init>= <expr><name>all_dltotal</name> <operator>/</operator> <name>speed</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>curl_off_t</name></type> <name>left</name> <init>= <expr><operator>(</operator><name>all_dltotal</name> <operator>-</operator> <name>all_dlnow</name><operator>)</operator> <operator>/</operator> <name>speed</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>time2str</name><argument_list>(<argument><expr><name>time_left</name></expr></argument>, <argument><expr><name>left</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>time2str</name><argument_list>(<argument><expr><name>time_total</name></expr></argument>, <argument><expr><name>est</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>time2str</name><argument_list>(<argument><expr><name>time_left</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>time2str</name><argument_list>(<argument><expr><name>time_total</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>time2str</name><argument_list>(<argument><expr><name>time_spent</name></expr></argument>, <argument><expr><name>spent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>global</name><operator>-&gt;</operator><name>errors</name></name></expr></argument>,
<argument><expr><literal type="string">"\r"</literal>
<literal type="string">"%-3s "</literal> 
<literal type="string">"%-3s "</literal> 
<literal type="string">"%s "</literal> 
<literal type="string">"%s "</literal> 
<literal type="string">"%5"</literal> <name>CURL_FORMAT_CURL_OFF_T</name> <literal type="string">" "</literal> 
<literal type="string">"%5"</literal> <name>CURL_FORMAT_CURL_OFF_T</name> <literal type="string">" "</literal> 
<literal type="string">"%5"</literal> <name>CURL_FORMAT_CURL_OFF_T</name> <literal type="string">" "</literal> 
<literal type="string">"%s "</literal> 
<literal type="string">"%s "</literal> 
<literal type="string">"%s "</literal> 
<literal type="string">"%s "</literal> 
<literal type="string">"%5s"</literal></expr></argument> ,

<argument><expr><name>dlpercen</name></expr></argument>, 
<argument><expr><name>ulpercen</name></expr></argument>, 
<argument><expr><call><name>max5data</name><argument_list>(<argument><expr><name>all_dlnow</name></expr></argument>, <argument><expr><name><name>buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>max5data</name><argument_list>(<argument><expr><name>all_ulnow</name></expr></argument>, <argument><expr><name><name>buffer</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>all_xfers</name></expr></argument>,
<argument><expr><name>all_running</name></expr></argument>,
<argument><expr><name>all_queued</name></expr></argument>,
<argument><expr><name>time_total</name></expr></argument>,
<argument><expr><name>time_spent</name></expr></argument>,
<argument><expr><name>time_left</name></expr></argument>,
<argument><expr><call><name>max5data</name><argument_list>(<argument><expr><name>speed</name></expr></argument>, <argument><expr><name><name>buffer</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, 
<argument><expr><ternary><condition><expr><name>final</name></expr> ?</condition><then> <expr><literal type="string">"\n"</literal></expr> </then><else>:<expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>progress_finalize</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>per_transfer</name></name> <modifier>*</modifier></type><name>per</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><name>all_dlalready</name> <operator>+=</operator> <name><name>per</name><operator>-&gt;</operator><name>dlnow</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>all_ulalready</name> <operator>+=</operator> <name><name>per</name><operator>-&gt;</operator><name>ulnow</name></name></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
