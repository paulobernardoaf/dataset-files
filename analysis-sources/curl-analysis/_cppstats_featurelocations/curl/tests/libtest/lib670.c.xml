<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\curl-analysis\_cppstats_featurelocations\curl\tests\libtest\lib670.c">





















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"test.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memdebug.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PAUSE_TIME</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>


<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>name</name><index>[]</index></name> <init>= <expr><literal type="string">"field"</literal></expr></init></decl>;</decl_stmt>

<struct>struct <name>ReadThis</name> <block>{
<decl_stmt><decl><type><name>CURL</name> <modifier>*</modifier></type><name>easy</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>time_t</name></type> <name>origin</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>;</decl_stmt>
}</block>;</struct>


<function><type><specifier>static</specifier> <name>size_t</name></type> <name>read_callback</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>nmemb</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>ReadThis</name></name> <modifier>*</modifier></type><name>pooh</name> <init>= <expr><operator>(</operator>struct <name>ReadThis</name> <operator>*</operator><operator>)</operator> <name>userp</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>time_t</name></type> <name>delta</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>size</name> <operator>*</operator> <name>nmemb</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<switch>switch<condition>(<expr><name><name>pooh</name><operator>-&gt;</operator><name>count</name></name><operator>++</operator></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <literal type="char">'\x41'</literal></expr>;</expr_stmt> 
<return>return <expr><literal type="number">1</literal></expr>;</return>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<expr_stmt><expr><name><name>pooh</name><operator>-&gt;</operator><name>origin</name></name> <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURL_READFUNC_PAUSE</name></expr>;</return>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<expr_stmt><expr><name>delta</name> <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>pooh</name><operator>-&gt;</operator><name>origin</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <ternary><condition><expr><name>delta</name> <operator>&gt;=</operator> <name>PAUSE_TIME</name></expr>?</condition><then> <expr><literal type="char">'\x42'</literal></expr></then><else>: <expr><literal type="char">'\x41'</literal></expr></else></ternary></expr>;</expr_stmt> 
<return>return <expr><literal type="number">1</literal></expr>;</return>
<case>case <expr><literal type="number">3</literal></expr>:</case>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Read callback called after EOF\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LIB670</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LIB672</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type> <name>xferinfo</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>clientp</name></decl></parameter>, <parameter><decl><type><name>curl_off_t</name></type> <name>dltotal</name></decl></parameter>, <parameter><decl><type><name>curl_off_t</name></type> <name>dlnow</name></decl></parameter>,
<parameter><decl><type><name>curl_off_t</name></type> <name>ultotal</name></decl></parameter>, <parameter><decl><type><name>curl_off_t</name></type> <name>ulnow</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>ReadThis</name></name> <modifier>*</modifier></type><name>pooh</name> <init>= <expr><operator>(</operator>struct <name>ReadThis</name> <operator>*</operator><operator>)</operator> <name>clientp</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>dltotal</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>dlnow</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>ultotal</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>ulnow</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>pooh</name><operator>-&gt;</operator><name>origin</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>time_t</name></type> <name>delta</name> <init>= <expr><call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>pooh</name><operator>-&gt;</operator><name>origin</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>delta</name> <operator>&gt;=</operator> <literal type="number">4</literal> <operator>*</operator> <name>PAUSE_TIME</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"unpausing failed: drain problem?\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_ABORTED_BY_CALLBACK</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>delta</name> <operator>&gt;=</operator> <name>PAUSE_TIME</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>curl_easy_pause</name><argument_list>(<argument><expr><name><name>pooh</name><operator>-&gt;</operator><name>easy</name></name></expr></argument>, <argument><expr><name>CURLPAUSE_CONT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>int</name></type> <name>test</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>URL</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LIB670</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>LIB671</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>curl_mime</name> <modifier>*</modifier></type><name>mime</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>curl_mimepart</name> <modifier>*</modifier></type><name>part</name></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>CURLFORMcode</name></type> <name>formrc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>curl_httppost</name></name> <modifier>*</modifier></type><name>formpost</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>curl_httppost</name></name> <modifier>*</modifier></type><name>lastptr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LIB670</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>LIB672</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>CURLM</name> <modifier>*</modifier></type><name>multi</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CURLMcode</name></type> <name>mres</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CURLMsg</name> <modifier>*</modifier></type><name>msg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>msgs_left</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>still_running</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name><name>struct</name> <name>ReadThis</name></name></type> <name>pooh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><name>TEST_ERR_FAILURE</name></expr></init></decl>;</decl_stmt>





<if_stmt><if>if<condition>(<expr><call><name>curl_global_init</name><argument_list>(<argument><expr><name>CURL_GLOBAL_ALL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>CURLE_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"curl_global_init() failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>TEST_ERR_MAJOR_BAD</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>pooh</name><operator>.</operator><name>origin</name></name> <operator>=</operator> <operator>(</operator><name>time_t</name><operator>)</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pooh</name><operator>.</operator><name>count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pooh</name><operator>.</operator><name>easy</name></name> <operator>=</operator> <call><name>curl_easy_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>test_setopt</name><argument_list>(<argument><expr><name><name>pooh</name><operator>.</operator><name>easy</name></name></expr></argument>, <argument><expr><name>CURLOPT_URL</name></expr></argument>, <argument><expr><name>URL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>test_setopt</name><argument_list>(<argument><expr><name><name>pooh</name><operator>.</operator><name>easy</name></name></expr></argument>, <argument><expr><name>CURLOPT_VERBOSE</name></expr></argument>, <argument><expr><literal type="number">1L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>test_setopt</name><argument_list>(<argument><expr><name><name>pooh</name><operator>.</operator><name>easy</name></name></expr></argument>, <argument><expr><name>CURLOPT_HEADER</name></expr></argument>, <argument><expr><literal type="number">1L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LIB670</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>LIB671</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><name>mime</name> <operator>=</operator> <call><name>curl_mime_init</name><argument_list>(<argument><expr><name><name>pooh</name><operator>.</operator><name>easy</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>part</name> <operator>=</operator> <call><name>curl_mime_addpart</name><argument_list>(<argument><expr><name>mime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>curl_mime_name</name><argument_list>(<argument><expr><name>part</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>curl_mime_data_cb</name><argument_list>(<argument><expr><name>part</name></expr></argument>, <argument><expr><operator>(</operator><name>curl_off_t</name><operator>)</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>read_callback</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pooh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<argument><expr><literal type="string">"Something went wrong when building the mime structure: %d\n"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>test_cleanup</name>;</goto>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>(<expr><operator>!</operator><name>res</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>test_setopt</name><argument_list>(<argument><expr><name><name>pooh</name><operator>.</operator><name>easy</name></name></expr></argument>, <argument><expr><name>CURLOPT_MIMEPOST</name></expr></argument>, <argument><expr><name>mime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name>formrc</name> <operator>=</operator> <call><name>curl_formadd</name><argument_list>(<argument><expr><operator>&amp;</operator><name>formpost</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lastptr</name></expr></argument>,
<argument><expr><name>CURLFORM_COPYNAME</name></expr></argument>, <argument><expr><name>name</name></expr></argument>,
<argument><expr><name>CURLFORM_STREAM</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pooh</name></expr></argument>,
<argument><expr><name>CURLFORM_CONTENTLEN</name></expr></argument>, <argument><expr><operator>(</operator><name>curl_off_t</name><operator>)</operator> <literal type="number">2</literal></expr></argument>,
<argument><expr><name>CURLFORM_END</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>formrc</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"curl_formadd() = %d\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>formrc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>test_cleanup</name>;</goto>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>test_setopt</name><argument_list>(<argument><expr><name><name>pooh</name><operator>.</operator><name>easy</name></name></expr></argument>, <argument><expr><name>CURLOPT_READFUNCTION</name></expr></argument>, <argument><expr><name>read_callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>test_setopt</name><argument_list>(<argument><expr><name><name>pooh</name><operator>.</operator><name>easy</name></name></expr></argument>, <argument><expr><name>CURLOPT_HTTPPOST</name></expr></argument>, <argument><expr><name>formpost</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LIB670</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>LIB672</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><name>multi</name> <operator>=</operator> <call><name>curl_multi_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mres</name> <operator>=</operator> <call><name>curl_multi_add_handle</name><argument_list>(<argument><expr><name>multi</name></expr></argument>, <argument><expr><name><name>pooh</name><operator>.</operator><name>easy</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while<condition>(<expr><operator>!</operator><name>mres</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>timeout</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>fd_set</name></type> <name>fdread</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>fd_set</name></type> <name>fdwrite</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>fd_set</name></type> <name>fdexcept</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>maxfd</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>mres</name> <operator>=</operator> <call><name>curl_multi_perform</name><argument_list>(<argument><expr><name>multi</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>still_running</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>still_running</name> <operator>||</operator> <name>mres</name> <operator>!=</operator> <name>CURLM_OK</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>pooh</name><operator>.</operator><name>origin</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>time_t</name></type> <name>delta</name> <init>= <expr><call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>pooh</name><operator>.</operator><name>origin</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>delta</name> <operator>&gt;=</operator> <literal type="number">4</literal> <operator>*</operator> <name>PAUSE_TIME</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"unpausing failed: drain problem?\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <name>CURLE_OPERATION_TIMEDOUT</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>delta</name> <operator>&gt;=</operator> <name>PAUSE_TIME</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>curl_easy_pause</name><argument_list>(<argument><expr><name><name>pooh</name><operator>.</operator><name>easy</name></name></expr></argument>, <argument><expr><name>CURLPAUSE_CONT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>FD_ZERO</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fdread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FD_ZERO</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fdwrite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FD_ZERO</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fdexcept</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>timeout</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>timeout</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <literal type="number">1000000</literal> <operator>*</operator> <name>PAUSE_TIME</name> <operator>/</operator> <literal type="number">10</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>mres</name> <operator>=</operator> <call><name>curl_multi_fdset</name><argument_list>(<argument><expr><name>multi</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fdread</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fdwrite</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fdexcept</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>maxfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>mres</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name>maxfd</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>Sleep</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>select</name><argument_list>(<argument><expr><name>maxfd</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>fdread</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fdwrite</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fdexcept</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Select error\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>

<if_stmt><if>if<condition>(<expr><name>mres</name> <operator>!=</operator> <name>CURLM_OK</name></expr>)</condition><block type="pseudo"><block_content>
<for>for<control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><name>msg</name> <operator>=</operator> <call><name>curl_multi_info_read</name><argument_list>(<argument><expr><name>multi</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>msgs_left</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>msg</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name><name>msg</name><operator>-&gt;</operator><name>msg</name></name> <operator>==</operator> <name>CURLMSG_DONE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name><name>msg</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>result</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>result</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>curl_multi_remove_handle</name><argument_list>(<argument><expr><name>multi</name></expr></argument>, <argument><expr><name><name>pooh</name><operator>.</operator><name>easy</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>curl_multi_cleanup</name><argument_list>(<argument><expr><name>multi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>test_setopt</name><argument_list>(<argument><expr><name><name>pooh</name><operator>.</operator><name>easy</name></name></expr></argument>, <argument><expr><name>CURLOPT_XFERINFODATA</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pooh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_setopt</name><argument_list>(<argument><expr><name><name>pooh</name><operator>.</operator><name>easy</name></name></expr></argument>, <argument><expr><name>CURLOPT_XFERINFOFUNCTION</name></expr></argument>, <argument><expr><name>xferinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_setopt</name><argument_list>(<argument><expr><name><name>pooh</name><operator>.</operator><name>easy</name></name></expr></argument>, <argument><expr><name>CURLOPT_NOPROGRESS</name></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>curl_easy_perform</name><argument_list>(<argument><expr><name><name>pooh</name><operator>.</operator><name>easy</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>result</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<label><name>test_cleanup</name>:</label>
<expr_stmt><expr><call><name>curl_easy_cleanup</name><argument_list>(<argument><expr><name><name>pooh</name><operator>.</operator><name>easy</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LIB670</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>LIB671</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>curl_mime_free</name><argument_list>(<argument><expr><name>mime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>curl_formfree</name><argument_list>(<argument><expr><name>formpost</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>curl_global_cleanup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>
</unit>
