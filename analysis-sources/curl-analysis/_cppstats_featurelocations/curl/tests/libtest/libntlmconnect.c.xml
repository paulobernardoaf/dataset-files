<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\curl-analysis\_cppstats_featurelocations\curl\tests\libtest\libntlmconnect.c">




















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"test.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"testutil.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"warnless.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memdebug.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_HANG_TIMEOUT</name></cpp:macro> <cpp:value>5 * 1000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_EASY_HANDLES</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name><name>counter</name><index>[<expr><name>MAX_EASY_HANDLES</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>CURL</name> <modifier>*</modifier></type><name><name>easy</name><index>[<expr><name>MAX_EASY_HANDLES</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>curl_socket_t</name></type> <name><name>sockets</name><index>[<expr><name>MAX_EASY_HANDLES</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>size_t</name></type> <name>callback</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>nmemb</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>idx</name> <init>= <expr><operator>(</operator><operator>(</operator><name>CURL</name> <operator>*</operator><operator>*</operator><operator>)</operator> <name>data</name><operator>)</operator> <operator>-</operator> <name>easy</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>curl_socket_t</name></type> <name>sock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>longdata</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>code</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>failure</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>size</name> <operator>&amp;&amp;</operator> <name>nmemb</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>ptr</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>counter</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>+=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>size</name> <operator>*</operator> <name>nmemb</name><operator>)</operator></expr>;</expr_stmt>


<expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>curl_easy_getinfo</name><argument_list>(<argument><expr><name><name>easy</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>, <argument><expr><name>CURLINFO_LASTSOCKET</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>longdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>CURLE_OK</name> <operator>!=</operator> <name>code</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s:%d curl_easy_getinfo() failed, "</literal>
<literal type="string">"with code %d (%s)\n"</literal></expr></argument>,
<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>code</name></expr></argument>, <argument><expr><call><name>curl_easy_strerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <name>TEST_ERR_MAJOR_BAD</name></expr>;</expr_stmt>
<return>return <expr><name>failure</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>longdata</name> <operator>==</operator> <operator>-</operator><literal type="number">1L</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>sock</name> <operator>=</operator> <name>CURL_SOCKET_BAD</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>sock</name> <operator>=</operator> <operator>(</operator><name>curl_socket_t</name><operator>)</operator><name>longdata</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name>sock</name> <operator>!=</operator> <name>CURL_SOCKET_BAD</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>sockets</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>==</operator> <name>CURL_SOCKET_BAD</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sockets</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>=</operator> <name>sock</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><name>sock</name> <operator>!=</operator> <name><name>sockets</name><index>[<expr><name>idx</name></expr>]</index></name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Handle %d started on socket %d and moved to %d\n"</literal></expr></argument>,
<argument><expr><call><name>curlx_sztosi</name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>sockets</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>sock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <name>TEST_ERR_MAJOR_BAD</name></expr>;</expr_stmt>
<return>return <expr><name>failure</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>size</name> <operator>*</operator> <name>nmemb</name></expr>;</return>
</block_content>}</block></function>

<enum>enum <name>HandleState</name> <block>{
<decl><name>ReadyForNewHandle</name></decl>,
<decl><name>NeedSocketForNewHandle</name></decl>,
<decl><name>NoMoreHandles</name></decl>
}</block>;</enum>

<function><type><name>int</name></type> <name>test</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>url</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CURLM</name> <modifier>*</modifier></type><name>multi</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>running</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>num_handles</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>HandleState</name></name></type> <name>state</name> <init>= <expr><name>ReadyForNewHandle</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>urllen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>full_url</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><name>urllen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>start_test_timing</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>full_url</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Not enough memory for full url\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>TEST_ERR_MAJOR_BAD</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_EASY_HANDLES</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>easy</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sockets</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>CURL_SOCKET_BAD</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>res_global_init</name><argument_list>(<argument><expr><name>CURL_GLOBAL_ALL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>res</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>full_url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>multi_init</name><argument_list>(<argument><expr><name>multi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_PIPELINING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>multi_setopt</name><argument_list>(<argument><expr><name>multi</name></expr></argument>, <argument><expr><name>CURLMOPT_PIPELINING</name></expr></argument>, <argument><expr><literal type="number">1L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>multi_setopt</name><argument_list>(<argument><expr><name>multi</name></expr></argument>, <argument><expr><name>CURLMOPT_MAX_HOST_CONNECTIONS</name></expr></argument>, <argument><expr><literal type="number">5L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>multi_setopt</name><argument_list>(<argument><expr><name>multi</name></expr></argument>, <argument><expr><name>CURLMOPT_MAX_TOTAL_CONNECTIONS</name></expr></argument>, <argument><expr><literal type="number">10L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<for>for<control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>interval</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>fd_set</name></type> <name>fdread</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>fd_set</name></type> <name>fdwrite</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>fd_set</name></type> <name>fdexcep</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>timeout</name> <init>= <expr><operator>-</operator><literal type="number">99</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>maxfd</name> <init>= <expr><operator>-</operator><literal type="number">99</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>found_new_socket</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if<condition>(<expr><name>state</name> <operator>==</operator> <name>ReadyForNewHandle</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>easy_init</name><argument_list>(<argument><expr><name><name>easy</name><index>[<expr><name>num_handles</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>num_handles</name> <operator>%</operator> <literal type="number">3</literal> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msnprintf</name><argument_list>(<argument><expr><name>full_url</name></expr></argument>, <argument><expr><name>urllen</name></expr></argument>, <argument><expr><literal type="string">"%s0200"</literal></expr></argument>, <argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>easy_setopt</name><argument_list>(<argument><expr><name><name>easy</name><index>[<expr><name>num_handles</name></expr>]</index></name></expr></argument>, <argument><expr><name>CURLOPT_HTTPAUTH</name></expr></argument>, <argument><expr><name>CURLAUTH_NTLM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>msnprintf</name><argument_list>(<argument><expr><name>full_url</name></expr></argument>, <argument><expr><name>urllen</name></expr></argument>, <argument><expr><literal type="string">"%s0100"</literal></expr></argument>, <argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>easy_setopt</name><argument_list>(<argument><expr><name><name>easy</name><index>[<expr><name>num_handles</name></expr>]</index></name></expr></argument>, <argument><expr><name>CURLOPT_HTTPAUTH</name></expr></argument>, <argument><expr><name>CURLAUTH_BASIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>easy_setopt</name><argument_list>(<argument><expr><name><name>easy</name><index>[<expr><name>num_handles</name></expr>]</index></name></expr></argument>, <argument><expr><name>CURLOPT_FRESH_CONNECT</name></expr></argument>, <argument><expr><literal type="number">1L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>easy_setopt</name><argument_list>(<argument><expr><name><name>easy</name><index>[<expr><name>num_handles</name></expr>]</index></name></expr></argument>, <argument><expr><name>CURLOPT_URL</name></expr></argument>, <argument><expr><name>full_url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>easy_setopt</name><argument_list>(<argument><expr><name><name>easy</name><index>[<expr><name>num_handles</name></expr>]</index></name></expr></argument>, <argument><expr><name>CURLOPT_VERBOSE</name></expr></argument>, <argument><expr><literal type="number">1L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>easy_setopt</name><argument_list>(<argument><expr><name><name>easy</name><index>[<expr><name>num_handles</name></expr>]</index></name></expr></argument>, <argument><expr><name>CURLOPT_HTTPGET</name></expr></argument>, <argument><expr><literal type="number">1L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>easy_setopt</name><argument_list>(<argument><expr><name><name>easy</name><index>[<expr><name>num_handles</name></expr>]</index></name></expr></argument>, <argument><expr><name>CURLOPT_USERPWD</name></expr></argument>, <argument><expr><literal type="string">"testuser:testpass"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>easy_setopt</name><argument_list>(<argument><expr><name><name>easy</name><index>[<expr><name>num_handles</name></expr>]</index></name></expr></argument>, <argument><expr><name>CURLOPT_WRITEFUNCTION</name></expr></argument>, <argument><expr><name>callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>easy_setopt</name><argument_list>(<argument><expr><name><name>easy</name><index>[<expr><name>num_handles</name></expr>]</index></name></expr></argument>, <argument><expr><name>CURLOPT_WRITEDATA</name></expr></argument>, <argument><expr><name>easy</name> <operator>+</operator> <name>num_handles</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>easy_setopt</name><argument_list>(<argument><expr><name><name>easy</name><index>[<expr><name>num_handles</name></expr>]</index></name></expr></argument>, <argument><expr><name>CURLOPT_HEADER</name></expr></argument>, <argument><expr><literal type="number">1L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>multi_add_handle</name><argument_list>(<argument><expr><name>multi</name></expr></argument>, <argument><expr><name><name>easy</name><index>[<expr><name>num_handles</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>num_handles</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>state</name> <operator>=</operator> <name>NeedSocketForNewHandle</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>multi_perform</name><argument_list>(<argument><expr><name>multi</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>running</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s:%d running %d state %d\n"</literal></expr></argument>,
<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>running</name></expr></argument>, <argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>abort_on_test_timeout</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>running</name> <operator>&amp;&amp;</operator> <name>state</name> <operator>==</operator> <name>NoMoreHandles</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt> 

<expr_stmt><expr><call><name>FD_ZERO</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fdread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FD_ZERO</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fdwrite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FD_ZERO</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fdexcep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>multi_fdset</name><argument_list>(<argument><expr><name>multi</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fdread</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fdwrite</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fdexcep</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>maxfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if<condition>(<expr><name>state</name> <operator>==</operator> <name>NeedSocketForNewHandle</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>maxfd</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>found_new_socket</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Warning: socket did not open immediately for new "</literal>
<literal type="string">"handle (trying again)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>state</name> <operator>=</operator> <ternary><condition><expr><name>num_handles</name> <operator>&lt;</operator> <name>MAX_EASY_HANDLES</name></expr> ?</condition><then> <expr><name>ReadyForNewHandle</name></expr>
</then><else>: <expr><name>NoMoreHandles</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s:%d new state %d\n"</literal></expr></argument>,
<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>multi_timeout</name><argument_list>(<argument><expr><name>multi</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s:%d num_handles %d timeout %ld running %d\n"</literal></expr></argument>,
<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>num_handles</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>, <argument><expr><name>running</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>timeout</name> <operator>!=</operator> <operator>-</operator><literal type="number">1L</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>itimeout</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>timeout</name> <operator>&gt;</operator> <operator>(</operator><name>long</name><operator>)</operator><name>INT_MAX</name><operator>)</operator></expr> ?</condition><then> <expr><name>INT_MAX</name></expr> </then><else>: <expr><operator>(</operator><name>int</name><operator>)</operator><name>timeout</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>interval</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <name>itimeout</name><operator>/</operator><literal type="number">1000</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>interval</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <operator>(</operator><name>itimeout</name><operator>%</operator><literal type="number">1000</literal><operator>)</operator><operator>*</operator><literal type="number">1000</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name><name>interval</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>interval</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <literal type="number">5000</literal></expr>;</expr_stmt>




<if_stmt><if>if<condition>(<expr><operator>!</operator><name>running</name> <operator>&amp;&amp;</operator> <name>num_handles</name> <operator>==</operator> <name>MAX_EASY_HANDLES</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>select_test</name><argument_list>(<argument><expr><name>maxfd</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>fdread</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fdwrite</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fdexcep</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>interval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>abort_on_test_timeout</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<label><name>test_cleanup</name>:</label>



<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_EASY_HANDLES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Data connection %d: %d\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>counter</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>curl_multi_remove_handle</name><argument_list>(<argument><expr><name>multi</name></expr></argument>, <argument><expr><name><name>easy</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>curl_easy_cleanup</name><argument_list>(<argument><expr><name><name>easy</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>curl_multi_cleanup</name><argument_list>(<argument><expr><name>multi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>curl_global_cleanup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>full_url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>
</unit>
