<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\curl-analysis\_cppstats_featurelocations\curl\tests\libtest\lib540.c">





























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"test.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"testutil.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"warnless.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memdebug.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_HANG_TIMEOUT</name></cpp:macro> <cpp:value>60 * 1000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROXY</name></cpp:macro> <cpp:value>libtest_arg2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROXYUSERPWD</name></cpp:macro> <cpp:value>libtest_arg3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HOST</name></cpp:macro> <cpp:value>test_argv[4]</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUM_HANDLES</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>CURL</name> <modifier>*</modifier></type><name><name>eh</name><index>[<expr><name>NUM_HANDLES</name></expr>]</index></name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>init</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>num</name></decl></parameter>, <parameter><decl><type><name>CURLM</name> <modifier>*</modifier></type><name>cm</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>url</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>userpwd</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>curl_slist</name></name> <modifier>*</modifier></type><name>headers</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>res_easy_init</name><argument_list>(<argument><expr><name><name>eh</name><index>[<expr><name>num</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>res</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>init_failed</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>res_easy_setopt</name><argument_list>(<argument><expr><name><name>eh</name><index>[<expr><name>num</name></expr>]</index></name></expr></argument>, <argument><expr><name>CURLOPT_URL</name></expr></argument>, <argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>res</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>init_failed</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>res_easy_setopt</name><argument_list>(<argument><expr><name><name>eh</name><index>[<expr><name>num</name></expr>]</index></name></expr></argument>, <argument><expr><name>CURLOPT_PROXY</name></expr></argument>, <argument><expr><name>PROXY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>res</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>init_failed</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>res_easy_setopt</name><argument_list>(<argument><expr><name><name>eh</name><index>[<expr><name>num</name></expr>]</index></name></expr></argument>, <argument><expr><name>CURLOPT_PROXYUSERPWD</name></expr></argument>, <argument><expr><name>userpwd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>res</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>init_failed</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>res_easy_setopt</name><argument_list>(<argument><expr><name><name>eh</name><index>[<expr><name>num</name></expr>]</index></name></expr></argument>, <argument><expr><name>CURLOPT_PROXYAUTH</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><name>CURLAUTH_ANY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>res</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>init_failed</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>res_easy_setopt</name><argument_list>(<argument><expr><name><name>eh</name><index>[<expr><name>num</name></expr>]</index></name></expr></argument>, <argument><expr><name>CURLOPT_VERBOSE</name></expr></argument>, <argument><expr><literal type="number">1L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>res</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>init_failed</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>res_easy_setopt</name><argument_list>(<argument><expr><name><name>eh</name><index>[<expr><name>num</name></expr>]</index></name></expr></argument>, <argument><expr><name>CURLOPT_HEADER</name></expr></argument>, <argument><expr><literal type="number">1L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>res</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>init_failed</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>res_easy_setopt</name><argument_list>(<argument><expr><name><name>eh</name><index>[<expr><name>num</name></expr>]</index></name></expr></argument>, <argument><expr><name>CURLOPT_HTTPHEADER</name></expr></argument>, <argument><expr><name>headers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<if_stmt><if>if<condition>(<expr><name>res</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>init_failed</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>res_multi_add_handle</name><argument_list>(<argument><expr><name>cm</name></expr></argument>, <argument><expr><name><name>eh</name><index>[<expr><name>num</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>res</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>init_failed</name>;</goto></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return> 

<label><name>init_failed</name>:</label>

<expr_stmt><expr><call><name>curl_easy_cleanup</name><argument_list>(<argument><expr><name><name>eh</name><index>[<expr><name>num</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>eh</name><index>[<expr><name>num</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><name>res</name></expr>;</return> 
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>loop</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>num</name></decl></parameter>, <parameter><decl><type><name>CURLM</name> <modifier>*</modifier></type><name>cm</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>url</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>userpwd</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>curl_slist</name></name> <modifier>*</modifier></type><name>headers</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CURLMsg</name> <modifier>*</modifier></type><name>msg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>L</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>Q</name></decl>, <decl><type ref="prev"/><name>U</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>fd_set</name></type> <name>R</name></decl>, <decl><type ref="prev"/><name>W</name></decl>, <decl><type ref="prev"/><name>E</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>T</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>init</name><argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><name>cm</name></expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr><name>userpwd</name></expr></argument>, <argument><expr><name>headers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>res</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>

<while>while<condition>(<expr><name>U</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>M</name> <init>= <expr><operator>-</operator><literal type="number">99</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>res_multi_perform</name><argument_list>(<argument><expr><name>cm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>U</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>res</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>res_test_timedout</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>res</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>U</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>FD_ZERO</name><argument_list>(<argument><expr><operator>&amp;</operator><name>R</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FD_ZERO</name><argument_list>(<argument><expr><operator>&amp;</operator><name>W</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FD_ZERO</name><argument_list>(<argument><expr><operator>&amp;</operator><name>E</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>res_multi_fdset</name><argument_list>(<argument><expr><name>cm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>R</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>W</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>E</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>M</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>res</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>



<expr_stmt><expr><call><name>res_multi_timeout</name><argument_list>(<argument><expr><name>cm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>res</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>



<if_stmt><if>if<condition>(<expr><name>L</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>itimeout</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>L</name> <operator>&gt;</operator> <operator>(</operator><name>long</name><operator>)</operator><name>INT_MAX</name><operator>)</operator></expr> ?</condition><then> <expr><name>INT_MAX</name></expr> </then><else>: <expr><operator>(</operator><name>int</name><operator>)</operator><name>L</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>T</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <name>itimeout</name><operator>/</operator><literal type="number">1000</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>T</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <operator>(</operator><name>itimeout</name><operator>%</operator><literal type="number">1000</literal><operator>)</operator><operator>*</operator><literal type="number">1000</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name><name>T</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>T</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>res_select_test</name><argument_list>(<argument><expr><name>M</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>R</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>W</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>E</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>T</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>res</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<while>while<condition>(<expr><operator>(</operator><name>msg</name> <operator>=</operator> <call><name>curl_multi_info_read</name><argument_list>(<argument><expr><name>cm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Q</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>msg</name><operator>-&gt;</operator><name>msg</name></name> <operator>==</operator> <name>CURLMSG_DONE</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CURL</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><name><name>msg</name><operator>-&gt;</operator><name>easy_handle</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"R: %d - %s\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>msg</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>result</name></name></expr></argument>,
<argument><expr><call><name>curl_easy_strerror</name><argument_list>(<argument><expr><name><name>msg</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>result</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>curl_multi_remove_handle</name><argument_list>(<argument><expr><name>cm</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>curl_easy_cleanup</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NUM_HANDLES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>eh</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>e</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>eh</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"E: CURLMsg (%d)\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>msg</name><operator>-&gt;</operator><name>msg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>res_test_timedout</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>res</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></while>

<return>return <expr><literal type="number">0</literal></expr>;</return> 
</block_content>}</block></function>

<function><type><name>int</name></type> <name>test</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>URL</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CURLM</name> <modifier>*</modifier></type><name>cm</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>curl_slist</name></name> <modifier>*</modifier></type><name>headers</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr><literal type="number">246</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NUM_HANDLES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>eh</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>start_test_timing</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>test_argc</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">99</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>msnprintf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"Host: %s"</literal></expr></argument>, <argument><expr><name>HOST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>headers</name> <operator>=</operator> <call><name>curl_slist_append</name><argument_list>(<argument><expr><name>headers</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>headers</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"curl_slist_append() failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>TEST_ERR_MAJOR_BAD</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>res_global_init</name><argument_list>(<argument><expr><name>CURL_GLOBAL_ALL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>res</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>curl_slist_free_all</name><argument_list>(<argument><expr><name>headers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>res_multi_init</name><argument_list>(<argument><expr><name>cm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>res</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>curl_global_cleanup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>curl_slist_free_all</name><argument_list>(<argument><expr><name>headers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>loop</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>cm</name></expr></argument>, <argument><expr><name>URL</name></expr></argument>, <argument><expr><name>PROXYUSERPWD</name></expr></argument>, <argument><expr><name>headers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>res</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>test_cleanup</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"lib540: now we do the request again\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>loop</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>cm</name></expr></argument>, <argument><expr><name>URL</name></expr></argument>, <argument><expr><name>PROXYUSERPWD</name></expr></argument>, <argument><expr><name>headers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>test_cleanup</name>:</label>



<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NUM_HANDLES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>curl_multi_remove_handle</name><argument_list>(<argument><expr><name>cm</name></expr></argument>, <argument><expr><name><name>eh</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>curl_easy_cleanup</name><argument_list>(<argument><expr><name><name>eh</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>curl_multi_cleanup</name><argument_list>(<argument><expr><name>cm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>curl_global_cleanup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>curl_slist_free_all</name><argument_list>(<argument><expr><name>headers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>
</unit>
