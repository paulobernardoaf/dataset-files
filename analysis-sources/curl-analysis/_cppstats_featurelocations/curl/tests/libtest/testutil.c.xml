<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\curl-analysis\_cppstats_featurelocations\curl\tests\libtest\testutil.c">




















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_setup.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;curl/curl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"testutil.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memdebug.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MSDOS</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name><name>struct</name> <name>timeval</name></name></type> <name>tutil_tvnow</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>





<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>now</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>milliseconds</name> <init>= <expr><call><name>GetTickCount</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>now</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <name>milliseconds</name> <operator>/</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>now</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <operator>(</operator><name>milliseconds</name> <operator>%</operator> <literal type="number">1000</literal><operator>)</operator> <operator>*</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
<return>return <expr><name>now</name></expr>;</return>
</block_content>}</block></function>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CLOCK_GETTIME_MONOTONIC</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<function><type><name><name>struct</name> <name>timeval</name></name></type> <name>tutil_tvnow</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>







<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>now</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>timespec</name></name></type> <name>tsnow</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><literal type="number">0</literal> <operator>==</operator> <call><name>clock_gettime</name><argument_list>(<argument><expr><name>CLOCK_MONOTONIC</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tsnow</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>now</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <name><name>tsnow</name><operator>.</operator><name>tv_sec</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>now</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <name><name>tsnow</name><operator>.</operator><name>tv_nsec</name></name> <operator>/</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
</block_content>}</block></if>





<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_GETTIMEOFDAY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>gettimeofday</name><argument_list>(<argument><expr><operator>&amp;</operator><name>now</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<else>else <block>{<block_content>
<expr_stmt><expr><name><name>now</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <operator>(</operator><name>long</name><operator>)</operator><call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>now</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>now</name></expr>;</return>
</block_content>}</block></function>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_GETTIMEOFDAY</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<function><type><name><name>struct</name> <name>timeval</name></name></type> <name>tutil_tvnow</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>





<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>now</name></decl>;</decl_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>gettimeofday</name><argument_list>(<argument><expr><operator>&amp;</operator><name>now</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>now</name></expr>;</return>
</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<function><type><name><name>struct</name> <name>timeval</name></name></type> <name>tutil_tvnow</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>



<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>now</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>now</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <operator>(</operator><name>long</name><operator>)</operator><call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>now</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>now</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>







<function><type><name>long</name></type> <name>tutil_tvdiff</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>newer</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>older</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>long</name><operator>)</operator><operator>(</operator><name><name>newer</name><operator>.</operator><name>tv_sec</name></name><operator>-</operator><name><name>older</name><operator>.</operator><name>tv_sec</name></name><operator>)</operator><operator>*</operator><literal type="number">1000</literal><operator>+</operator>
<operator>(</operator><name>long</name><operator>)</operator><operator>(</operator><name><name>newer</name><operator>.</operator><name>tv_usec</name></name><operator>-</operator><name><name>older</name><operator>.</operator><name>tv_usec</name></name><operator>)</operator><operator>/</operator><literal type="number">1000</literal></expr>;</return>
</block_content>}</block></function>







<function><type><name>double</name></type> <name>tutil_tvdiff_secs</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>newer</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>older</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>newer</name><operator>.</operator><name>tv_sec</name></name> <operator>!=</operator> <name><name>older</name><operator>.</operator><name>tv_sec</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>double</name><operator>)</operator><operator>(</operator><name><name>newer</name><operator>.</operator><name>tv_sec</name></name><operator>-</operator><name><name>older</name><operator>.</operator><name>tv_sec</name></name><operator>)</operator><operator>+</operator>
<operator>(</operator><name>double</name><operator>)</operator><operator>(</operator><name><name>newer</name><operator>.</operator><name>tv_usec</name></name><operator>-</operator><name><name>older</name><operator>.</operator><name>tv_usec</name></name><operator>)</operator><operator>/</operator><literal type="number">1000000.0</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>double</name><operator>)</operator><operator>(</operator><name><name>newer</name><operator>.</operator><name>tv_usec</name></name><operator>-</operator><name><name>older</name><operator>.</operator><name>tv_usec</name></name><operator>)</operator><operator>/</operator><literal type="number">1000000.0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
