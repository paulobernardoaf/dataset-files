<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\curl-analysis\_cppstats_featurelocations\curl\tests\libtest\lib576.c">




















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"test.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"testutil.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memdebug.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>int</name></type> <name>remains</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>print_content</name></decl>;</decl_stmt>
}</block></struct></type> <name>chunk_data_t</name>;</typedef>

<function_decl><type><specifier>static</specifier>
<name>long</name></type> <name>chunk_bgn</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>curl_fileinfo</name></name> <modifier>*</modifier></type><name>finfo</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>remains</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier>
<name>long</name></type> <name>chunk_end</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier>
<name>long</name></type> <name>chunk_bgn</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>curl_fileinfo</name></name> <modifier>*</modifier></type><name>finfo</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>remains</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>chunk_data_t</name> <modifier>*</modifier></type><name>ch_d</name> <init>= <expr><name>ptr</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ch_d</name><operator>-&gt;</operator><name>remains</name></name> <operator>=</operator> <name>remains</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"=============================================================\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Remains: %d\n"</literal></expr></argument>, <argument><expr><name>remains</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Filename: %s\n"</literal></expr></argument>, <argument><expr><name><name>finfo</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>finfo</name><operator>-&gt;</operator><name>strings</name><operator>.</operator><name>perm</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Permissions: %s"</literal></expr></argument>, <argument><expr><name><name>finfo</name><operator>-&gt;</operator><name>strings</name><operator>.</operator><name>perm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>finfo</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CURLFINFOFLAG_KNOWN_PERM</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" (parsed =&gt; %o)"</literal></expr></argument>, <argument><expr><name><name>finfo</name><operator>-&gt;</operator><name>perm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Size: %ldB\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><name><name>finfo</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>finfo</name><operator>-&gt;</operator><name>strings</name><operator>.</operator><name>user</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"User: %s\n"</literal></expr></argument>, <argument><expr><name><name>finfo</name><operator>-&gt;</operator><name>strings</name><operator>.</operator><name>user</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name><name>finfo</name><operator>-&gt;</operator><name>strings</name><operator>.</operator><name>group</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Group: %s\n"</literal></expr></argument>, <argument><expr><name><name>finfo</name><operator>-&gt;</operator><name>strings</name><operator>.</operator><name>group</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name><name>finfo</name><operator>-&gt;</operator><name>strings</name><operator>.</operator><name>time</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Time: %s\n"</literal></expr></argument>, <argument><expr><name><name>finfo</name><operator>-&gt;</operator><name>strings</name><operator>.</operator><name>time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Filetype: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch<condition>(<expr><name><name>finfo</name><operator>-&gt;</operator><name>filetype</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>CURLFILETYPE_FILE</name></expr>:</case>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"regular file\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CURLFILETYPE_DIRECTORY</name></expr>:</case>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"directory\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CURLFILETYPE_SYMLINK</name></expr>:</case>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"symlink\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Target: %s\n"</literal></expr></argument>, <argument><expr><name><name>finfo</name><operator>-&gt;</operator><name>strings</name><operator>.</operator><name>target</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"other type\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<if_stmt><if>if<condition>(<expr><name><name>finfo</name><operator>-&gt;</operator><name>filetype</name></name> <operator>==</operator> <name>CURLFILETYPE_FILE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ch_d</name><operator>-&gt;</operator><name>print_content</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Content:\n-----------------------"</literal>
<literal type="string">"--------------------------------------\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>finfo</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>, <argument><expr><literal type="string">"someothertext.txt"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"#THIS CONTENT WAS SKIPPED IN CHUNK_BGN CALLBACK #\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURL_CHUNK_BGN_FUNC_SKIP</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>CURL_CHUNK_BGN_FUNC_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier>
<name>long</name></type> <name>chunk_end</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>chunk_data_t</name> <modifier>*</modifier></type><name>ch_d</name> <init>= <expr><name>ptr</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name><name>ch_d</name><operator>-&gt;</operator><name>print_content</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ch_d</name><operator>-&gt;</operator><name>print_content</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"-------------------------------------------------------------\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name><name>ch_d</name><operator>-&gt;</operator><name>remains</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"=============================================================\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>CURL_CHUNK_END_FUNC_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>test</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>URL</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CURL</name> <modifier>*</modifier></type><name>handle</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>res</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>chunk_data_t</name></type> <name>chunk_data</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>curl_global_init</name><argument_list>(<argument><expr><name>CURL_GLOBAL_ALL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>handle</name> <operator>=</operator> <call><name>curl_easy_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>handle</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <name>CURLE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
<goto>goto <name>test_cleanup</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>test_setopt</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>CURLOPT_URL</name></expr></argument>, <argument><expr><name>URL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_setopt</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>CURLOPT_WILDCARDMATCH</name></expr></argument>, <argument><expr><literal type="number">1L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_setopt</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>CURLOPT_CHUNK_BGN_FUNCTION</name></expr></argument>, <argument><expr><name>chunk_bgn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_setopt</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>CURLOPT_CHUNK_END_FUNCTION</name></expr></argument>, <argument><expr><name>chunk_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_setopt</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>CURLOPT_CHUNK_DATA</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>chunk_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>curl_easy_perform</name><argument_list>(<argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>test_cleanup</name>:</label>
<if_stmt><if>if<condition>(<expr><name>handle</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>curl_easy_cleanup</name><argument_list>(<argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>curl_global_cleanup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>
</unit>
