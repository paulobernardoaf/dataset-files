<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\curl-analysis\_cppstats_featurelocations\curl\tests\libtest\lib582.c">




















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"test.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"testutil.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"warnless.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memdebug.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_HANG_TIMEOUT</name></cpp:macro> <cpp:value>60 * 1000</cpp:value></cpp:define>

<struct>struct <name>Sockets</name>
<block>{
<decl_stmt><decl><type><name>curl_socket_t</name> <modifier>*</modifier></type><name>sockets</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>max_count</name></decl>;</decl_stmt> 
}</block>;</struct>

<struct>struct <name>ReadWriteSockets</name>
<block>{
<decl_stmt><decl><type><name><name>struct</name> <name>Sockets</name></name></type> <name>read</name></decl>, <decl><type ref="prev"/><name>write</name></decl>;</decl_stmt>
}</block>;</struct>




<function><type><specifier>static</specifier> <name>void</name></type> <name>removeFd</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Sockets</name></name><modifier>*</modifier></type> <name>sockets</name></decl></parameter>, <parameter><decl><type><name>curl_socket_t</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mention</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>mention</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Remove socket fd %d\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>sockets</name><operator>-&gt;</operator><name>count</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>sockets</name><operator>-&gt;</operator><name>sockets</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>fd</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>i</name> <operator>&lt;</operator> <name><name>sockets</name><operator>-&gt;</operator><name>count</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sockets</name><operator>-&gt;</operator><name>sockets</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sockets</name><operator>-&gt;</operator><name>sockets</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>curl_socket_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name><name>sockets</name><operator>-&gt;</operator><name>count</name></name> <operator>-</operator> <operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>--</operator><name><name>sockets</name><operator>-&gt;</operator><name>count</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>addFd</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Sockets</name></name><modifier>*</modifier></type> <name>sockets</name></decl></parameter>, <parameter><decl><type><name>curl_socket_t</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>what</name></decl></parameter>)</parameter_list>
<block>{<block_content>




<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Add socket fd %d for %s\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>fd</name></expr></argument>, <argument><expr><name>what</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>removeFd</name><argument_list>(<argument><expr><name>sockets</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>sockets</name><operator>-&gt;</operator><name>sockets</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>sockets</name><operator>-&gt;</operator><name>sockets</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>curl_socket_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">20U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>sockets</name><operator>-&gt;</operator><name>sockets</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>sockets</name><operator>-&gt;</operator><name>max_count</name></name> <operator>=</operator> <literal type="number">20</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><name><name>sockets</name><operator>-&gt;</operator><name>count</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;</operator> <name><name>sockets</name><operator>-&gt;</operator><name>max_count</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>curl_socket_t</name> <modifier>*</modifier></type><name>oldptr</name> <init>= <expr><name><name>sockets</name><operator>-&gt;</operator><name>sockets</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>sockets</name><operator>-&gt;</operator><name>sockets</name></name> <operator>=</operator> <call><name>realloc</name><argument_list>(<argument><expr><name>oldptr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>curl_socket_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator>
<operator>(</operator><name><name>sockets</name><operator>-&gt;</operator><name>max_count</name></name> <operator>+</operator> <literal type="number">20</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>sockets</name><operator>-&gt;</operator><name>sockets</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sockets</name><operator>-&gt;</operator><name>sockets</name></name> <operator>=</operator> <name>oldptr</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>sockets</name><operator>-&gt;</operator><name>max_count</name></name> <operator>+=</operator> <literal type="number">20</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><name><name>sockets</name><operator>-&gt;</operator><name>sockets</name><index>[<expr><name><name>sockets</name><operator>-&gt;</operator><name>count</name></name></expr>]</index></name> <operator>=</operator> <name>fd</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name><name>sockets</name><operator>-&gt;</operator><name>count</name></name></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>curlSocketCallback</name><parameter_list>(<parameter><decl><type><name>CURL</name> <modifier>*</modifier></type><name>easy</name></decl></parameter>, <parameter><decl><type><name>curl_socket_t</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>action</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userp</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>socketp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>ReadWriteSockets</name></name><modifier>*</modifier></type> <name>sockets</name> <init>= <expr><name>userp</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>easy</name></expr>;</expr_stmt> 
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>socketp</name></expr>;</expr_stmt> 

<if_stmt><if>if<condition>(<expr><name>action</name> <operator>==</operator> <name>CURL_POLL_IN</name> <operator>||</operator> <name>action</name> <operator>==</operator> <name>CURL_POLL_INOUT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>addFd</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sockets</name><operator>-&gt;</operator><name>read</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"read"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>action</name> <operator>==</operator> <name>CURL_POLL_OUT</name> <operator>||</operator> <name>action</name> <operator>==</operator> <name>CURL_POLL_INOUT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>addFd</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sockets</name><operator>-&gt;</operator><name>write</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"write"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>action</name> <operator>==</operator> <name>CURL_POLL_REMOVE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>removeFd</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sockets</name><operator>-&gt;</operator><name>read</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>removeFd</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sockets</name><operator>-&gt;</operator><name>write</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>curlTimerCallback</name><parameter_list>(<parameter><decl><type><name>CURLM</name> <modifier>*</modifier></type><name>multi</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>timeout_ms</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name><modifier>*</modifier></type> <name>timeout</name> <init>= <expr><name>userp</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>multi</name></expr>;</expr_stmt> 
<if_stmt><if>if<condition>(<expr><name>timeout_ms</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>timeout</name> <operator>=</operator> <call><name>tutil_tvnow</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>timeout</name><operator>-&gt;</operator><name>tv_usec</name></name> <operator>+=</operator> <name>timeout_ms</name> <operator>*</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name><name>timeout</name><operator>-&gt;</operator><name>tv_sec</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>checkForCompletion</name><parameter_list>(<parameter><decl><type><name>CURLM</name> <modifier>*</modifier></type><name>curl</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>success</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>numMessages</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CURLMsg</name> <modifier>*</modifier></type><name>message</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>success</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while<condition>(<expr><operator>(</operator><name>message</name> <operator>=</operator> <call><name>curl_multi_info_read</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>numMessages</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>message</name><operator>-&gt;</operator><name>msg</name></name> <operator>==</operator> <name>CURLMSG_DONE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>message</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>result</name></name> <operator>==</operator> <name>CURLE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>success</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>success</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Got an unexpected message from curl: %i\n"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>message</name><operator>-&gt;</operator><name>msg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>success</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>getMicroSecondTimeout</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>timeval</name></name><modifier>*</modifier></type> <name>timeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>now</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>result</name></decl>;</decl_stmt>
<expr_stmt><expr><name>now</name> <operator>=</operator> <call><name>tutil_tvnow</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>(</operator><name>ssize_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>timeout</name><operator>-&gt;</operator><name>tv_sec</name></name> <operator>-</operator> <name><name>now</name><operator>.</operator><name>tv_sec</name></name><operator>)</operator> <operator>*</operator> <literal type="number">1000000</literal> <operator>+</operator>
<name><name>timeout</name><operator>-&gt;</operator><name>tv_usec</name></name> <operator>-</operator> <name><name>now</name><operator>.</operator><name>tv_usec</name></name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><call><name>curlx_sztosi</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>updateFdSet</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Sockets</name></name><modifier>*</modifier></type> <name>sockets</name></decl></parameter>, <parameter><decl><type><name>fd_set</name><modifier>*</modifier></type> <name>fdset</name></decl></parameter>,
<parameter><decl><type><name>curl_socket_t</name> <modifier>*</modifier></type><name>maxFd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>sockets</name><operator>-&gt;</operator><name>count</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>FD_SET</name><argument_list>(<argument><expr><name><name>sockets</name><operator>-&gt;</operator><name>sockets</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>fdset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>*</operator><name>maxFd</name> <operator>&lt;</operator> <name><name>sockets</name><operator>-&gt;</operator><name>sockets</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>maxFd</name> <operator>=</operator> <name><name>sockets</name><operator>-&gt;</operator><name>sockets</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>notifyCurl</name><parameter_list>(<parameter><decl><type><name>CURLM</name> <modifier>*</modifier></type><name>curl</name></decl></parameter>, <parameter><decl><type><name>curl_socket_t</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>evBitmask</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>numhandles</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CURLMcode</name></type> <name>result</name> <init>= <expr><call><name>curl_multi_socket_action</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>evBitmask</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>numhandles</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name> <operator>!=</operator> <name>CURLM_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Curl error on %s: %i (%s)\n"</literal></expr></argument>,
<argument><expr><name>info</name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><call><name>curl_multi_strerror</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>checkFdSet</name><parameter_list>(<parameter><decl><type><name>CURLM</name> <modifier>*</modifier></type><name>curl</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>Sockets</name></name> <modifier>*</modifier></type><name>sockets</name></decl></parameter>, <parameter><decl><type><name>fd_set</name> <modifier>*</modifier></type><name>fdset</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>evBitmask</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>sockets</name><operator>-&gt;</operator><name>count</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><call><name>FD_ISSET</name><argument_list>(<argument><expr><name><name>sockets</name><operator>-&gt;</operator><name>sockets</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>fdset</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>notifyCurl</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name><name>sockets</name><operator>-&gt;</operator><name>sockets</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>evBitmask</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>test</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>URL</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CURL</name> <modifier>*</modifier></type><name>curl</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>hd_src</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>hd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>struct_stat</name></type> <name>file_info</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CURLM</name> <modifier>*</modifier></type><name>m</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ReadWriteSockets</name></name></type> <name>sockets</name> <init>= <expr><block>{<expr><block>{<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>timeout</name> <init>= <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>success</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>start_test_timing</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>libtest_arg3</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Usage: lib582 [url] [filename] [username]\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>TEST_ERR_USAGE</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>hd_src</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>libtest_arg2</name></expr></argument>, <argument><expr><literal type="string">"rb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>NULL</name> <operator>==</operator> <name>hd_src</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"fopen() failed with error: %d (%s)\n"</literal></expr></argument>,
<argument><expr><name>errno</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Error opening file: (%s)\n"</literal></expr></argument>, <argument><expr><name>libtest_arg2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>TEST_ERR_FOPEN</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>hd</name> <operator>=</operator> <call><name>fstat</name><argument_list>(<argument><expr><call><name>fileno</name><argument_list>(<argument><expr><name>hd_src</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>file_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>hd</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"fstat() failed with error: %d (%s)\n"</literal></expr></argument>,
<argument><expr><name>errno</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"ERROR: cannot open file (%s)\n"</literal></expr></argument>, <argument><expr><name>libtest_arg2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>hd_src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>TEST_ERR_FSTAT</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Set to upload %d bytes\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>file_info</name><operator>.</operator><name>st_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>res_global_init</name><argument_list>(<argument><expr><name>CURL_GLOBAL_ALL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>res</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>hd_src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>easy_init</name><argument_list>(<argument><expr><name>curl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>easy_setopt</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_UPLOAD</name></expr></argument>, <argument><expr><literal type="number">1L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>easy_setopt</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_URL</name></expr></argument>, <argument><expr><name>URL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>easy_setopt</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_VERBOSE</name></expr></argument>, <argument><expr><literal type="number">1L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>easy_setopt</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_READDATA</name></expr></argument>, <argument><expr><name>hd_src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>easy_setopt</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_USERPWD</name></expr></argument>, <argument><expr><name>libtest_arg3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>easy_setopt</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_SSH_PUBLIC_KEYFILE</name></expr></argument>, <argument><expr><literal type="string">"curl_client_key.pub"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>easy_setopt</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_SSH_PRIVATE_KEYFILE</name></expr></argument>, <argument><expr><literal type="string">"curl_client_key"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>easy_setopt</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_SSL_VERIFYHOST</name></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>easy_setopt</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_INFILESIZE_LARGE</name></expr></argument>, <argument><expr><operator>(</operator><name>curl_off_t</name><operator>)</operator><name><name>file_info</name><operator>.</operator><name>st_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>multi_init</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>multi_setopt</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>CURLMOPT_SOCKETFUNCTION</name></expr></argument>, <argument><expr><name>curlSocketCallback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>multi_setopt</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>CURLMOPT_SOCKETDATA</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sockets</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>multi_setopt</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>CURLMOPT_TIMERFUNCTION</name></expr></argument>, <argument><expr><name>curlTimerCallback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>multi_setopt</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>CURLMOPT_TIMERDATA</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>multi_add_handle</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>curl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while<condition>(<expr><operator>!</operator><call><name>checkForCompletion</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>success</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>fd_set</name></type> <name>readSet</name></decl>, <decl><type ref="prev"/><name>writeSet</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>curl_socket_t</name></type> <name>maxFd</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>tv</name> <init>= <expr><block>{<expr><literal type="number">10</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>FD_ZERO</name><argument_list>(<argument><expr><operator>&amp;</operator><name>readSet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FD_ZERO</name><argument_list>(<argument><expr><operator>&amp;</operator><name>writeSet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>updateFdSet</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sockets</name><operator>.</operator><name>read</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>readSet</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>maxFd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>updateFdSet</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sockets</name><operator>.</operator><name>write</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>writeSet</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>maxFd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>timeout</name><operator>.</operator><name>tv_sec</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>usTimeout</name> <init>= <expr><call><name>getMicroSecondTimeout</name><argument_list>(<argument><expr><operator>&amp;</operator><name>timeout</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>tv</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <name>usTimeout</name> <operator>/</operator> <literal type="number">1000000</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tv</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <name>usTimeout</name> <operator>%</operator> <literal type="number">1000000</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><name>maxFd</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>tv</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tv</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <literal type="number">100000</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>select_test</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>maxFd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>readSet</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>writeSet</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>checkFdSet</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sockets</name><operator>.</operator><name>read</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>readSet</name></expr></argument>, <argument><expr><name>CURL_CSELECT_IN</name></expr></argument>, <argument><expr><literal type="string">"read"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>checkFdSet</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sockets</name><operator>.</operator><name>write</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>writeSet</name></expr></argument>, <argument><expr><name>CURL_CSELECT_OUT</name></expr></argument>, <argument><expr><literal type="string">"write"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>timeout</name><operator>.</operator><name>tv_sec</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name>getMicroSecondTimeout</name><argument_list>(<argument><expr><operator>&amp;</operator><name>timeout</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>notifyCurl</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>CURL_SOCKET_TIMEOUT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"timeout"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>abort_on_test_timeout</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>success</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Error uploading file.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <name>TEST_ERR_MAJOR_BAD</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<label><name>test_cleanup</name>:</label>



<expr_stmt><expr><call><name>curl_multi_remove_handle</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>curl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>curl_easy_cleanup</name><argument_list>(<argument><expr><name>curl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>curl_multi_cleanup</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>curl_global_cleanup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>hd_src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>sockets</name><operator>.</operator><name>read</name><operator>.</operator><name>sockets</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>sockets</name><operator>.</operator><name>write</name><operator>.</operator><name>sockets</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>
</unit>
