<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\curl-analysis\_cppstats_featurelocations\curl\tests\libtest\lib1156.c">




















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"test.h"</cpp:file></cpp:include>












<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memdebug.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F_RESUME</name></cpp:macro> <cpp:value>(1 &lt;&lt; 0)</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F_HTTP416</name></cpp:macro> <cpp:value>(1 &lt;&lt; 1)</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F_FAIL</name></cpp:macro> <cpp:value>(1 &lt;&lt; 2)</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F_CONTENTRANGE</name></cpp:macro> <cpp:value>(1 &lt;&lt; 3)</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F_IGNOREBODY</name></cpp:macro> <cpp:value>(1 &lt;&lt; 4)</cpp:value></cpp:define> 

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>flags</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name></decl>;</decl_stmt> 
}</block></struct></type> <name>testparams</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>testparams</name></type> <name><name>params</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><name>CURLE_OK</name></expr> }</block></expr>,
<expr><block>{ <expr><name>F_CONTENTRANGE</name></expr>, <expr><name>CURLE_OK</name></expr> }</block></expr>,
<expr><block>{ <expr><name>F_FAIL</name></expr>, <expr><name>CURLE_OK</name></expr> }</block></expr>,
<expr><block>{ <expr><name>F_FAIL</name> <operator>|</operator> <name>F_CONTENTRANGE</name></expr>, <expr><name>CURLE_OK</name></expr> }</block></expr>,
<expr><block>{ <expr><name>F_HTTP416</name></expr>, <expr><name>CURLE_OK</name></expr> }</block></expr>,
<expr><block>{ <expr><name>F_HTTP416</name> <operator>|</operator> <name>F_CONTENTRANGE</name></expr>, <expr><name>CURLE_OK</name></expr> }</block></expr>,
<expr><block>{ <expr><name>F_HTTP416</name> <operator>|</operator> <name>F_FAIL</name> <operator>|</operator> <name>F_IGNOREBODY</name></expr>,
<expr><name>CURLE_HTTP_RETURNED_ERROR</name></expr> }</block></expr>,
<expr><block>{ <expr><name>F_HTTP416</name> <operator>|</operator> <name>F_FAIL</name> <operator>|</operator> <name>F_CONTENTRANGE</name> <operator>|</operator> <name>F_IGNOREBODY</name></expr>,
<expr><name>CURLE_HTTP_RETURNED_ERROR</name></expr> }</block></expr>,
<expr><block>{ <expr><name>F_RESUME</name> <operator>|</operator> <name>F_IGNOREBODY</name></expr>,
<expr><name>CURLE_RANGE_ERROR</name></expr> }</block></expr>,
<expr><block>{ <expr><name>F_RESUME</name> <operator>|</operator> <name>F_CONTENTRANGE</name></expr>, <expr><name>CURLE_OK</name></expr> }</block></expr>,
<expr><block>{ <expr><name>F_RESUME</name> <operator>|</operator> <name>F_FAIL</name> <operator>|</operator> <name>F_IGNOREBODY</name></expr>,
<expr><name>CURLE_RANGE_ERROR</name></expr> }</block></expr>,
<expr><block>{ <expr><name>F_RESUME</name> <operator>|</operator> <name>F_FAIL</name> <operator>|</operator> <name>F_CONTENTRANGE</name></expr>, <expr><name>CURLE_OK</name></expr> }</block></expr>,
<expr><block>{ <expr><name>F_RESUME</name> <operator>|</operator> <name>F_HTTP416</name> <operator>|</operator> <name>F_IGNOREBODY</name></expr>, <expr><name>CURLE_OK</name></expr> }</block></expr>,
<expr><block>{ <expr><name>F_RESUME</name> <operator>|</operator> <name>F_HTTP416</name> <operator>|</operator> <name>F_CONTENTRANGE</name> <operator>|</operator> <name>F_IGNOREBODY</name></expr>, <expr><name>CURLE_OK</name></expr> }</block></expr>,
<expr><block>{ <expr><name>F_RESUME</name> <operator>|</operator> <name>F_HTTP416</name> <operator>|</operator> <name>F_FAIL</name> <operator>|</operator> <name>F_IGNOREBODY</name></expr>,
<expr><name>CURLE_HTTP_RETURNED_ERROR</name></expr> }</block></expr>,
<expr><block>{ <expr><name>F_RESUME</name> <operator>|</operator> <name>F_HTTP416</name> <operator>|</operator> <name>F_FAIL</name> <operator>|</operator> <name>F_CONTENTRANGE</name> <operator>|</operator> <name>F_IGNOREBODY</name></expr>,
<expr><name>CURLE_HTTP_RETURNED_ERROR</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>hasbody</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>size_t</name></type> <name>writedata</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>nmemb</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userdata</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>data</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>userdata</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>size</name> <operator>&amp;&amp;</operator> <name>nmemb</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>hasbody</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>size</name> <operator>*</operator> <name>nmemb</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>onetest</name><parameter_list>(<parameter><decl><type><name>CURL</name> <modifier>*</modifier></type><name>curl</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>url</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>testparams</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>res</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>replyselector</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>urlbuf</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name>replyselector</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>F_CONTENTRANGE</name><operator>)</operator></expr>?</condition><then> <expr><literal type="number">1</literal></expr></then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>F_HTTP416</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>replyselector</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>msnprintf</name><argument_list>(<argument><expr><name>urlbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>urlbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s%04u"</literal></expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr><name>replyselector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_setopt</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_URL</name></expr></argument>, <argument><expr><name>urlbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_setopt</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_RESUME_FROM</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>F_RESUME</name><operator>)</operator></expr>?</condition><then> <expr><literal type="number">3</literal></expr></then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_setopt</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_RANGE</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>!</operator><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>F_RESUME</name><operator>)</operator></expr>?</condition><then>
<expr><literal type="string">"3-1000000"</literal></expr></then><else>: <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>NULL</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>test_setopt</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_FAILONERROR</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>F_FAIL</name><operator>)</operator></expr>?</condition><then> <expr><literal type="number">1</literal></expr></then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>hasbody</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>curl_easy_perform</name><argument_list>(<argument><expr><name>curl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>res</name> <operator>!=</operator> <name><name>p</name><operator>-&gt;</operator><name>result</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"bad error code (%d): resume=%s, fail=%s, http416=%s, "</literal>
<literal type="string">"content-range=%s, expected=%d\n"</literal></expr></argument>, <argument><expr><name>res</name></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>F_RESUME</name><operator>)</operator></expr>?</condition><then> <expr><literal type="string">"yes"</literal></expr></then><else>: <expr><literal type="string">"no"</literal></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>F_FAIL</name><operator>)</operator></expr>?</condition><then> <expr><literal type="string">"yes"</literal></expr></then><else>: <expr><literal type="string">"no"</literal></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>F_HTTP416</name><operator>)</operator></expr>?</condition><then> <expr><literal type="string">"yes"</literal></expr></then><else>: <expr><literal type="string">"no"</literal></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>F_CONTENTRANGE</name><operator>)</operator></expr>?</condition><then> <expr><literal type="string">"yes"</literal></expr></then><else>: <expr><literal type="string">"no"</literal></expr></else></ternary></expr></argument>,
<argument><expr><name><name>p</name><operator>-&gt;</operator><name>result</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>hasbody</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>F_IGNOREBODY</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"body should be ignored and is not: resume=%s, fail=%s, "</literal>
<literal type="string">"http416=%s, content-range=%s\n"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>F_RESUME</name><operator>)</operator></expr>?</condition><then> <expr><literal type="string">"yes"</literal></expr></then><else>: <expr><literal type="string">"no"</literal></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>F_FAIL</name><operator>)</operator></expr>?</condition><then> <expr><literal type="string">"yes"</literal></expr></then><else>: <expr><literal type="string">"no"</literal></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>F_HTTP416</name><operator>)</operator></expr>?</condition><then> <expr><literal type="string">"yes"</literal></expr></then><else>: <expr><literal type="string">"no"</literal></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>F_CONTENTRANGE</name><operator>)</operator></expr>?</condition><then> <expr><literal type="string">"yes"</literal></expr></then><else>: <expr><literal type="string">"no"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>test_cleanup</name>:</label>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>test</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>URL</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>res</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CURL</name> <modifier>*</modifier></type><name>curl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>status</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><call><name>curl_global_init</name><argument_list>(<argument><expr><name>CURL_GLOBAL_ALL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>CURLE_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"curl_global_init() failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>TEST_ERR_MAJOR_BAD</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>curl</name> <operator>=</operator> <call><name>curl_easy_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>curl</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"curl_easy_init() failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>curl_global_cleanup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>TEST_ERR_MAJOR_BAD</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>test_setopt</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_WRITEFUNCTION</name></expr></argument>, <argument><expr><name>writedata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>params</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>status</name> <operator>|=</operator> <call><name>onetest</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>URL</name></expr></argument>, <argument><expr><name>params</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>curl_easy_cleanup</name><argument_list>(<argument><expr><name>curl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>curl_global_cleanup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>status</name></expr>;</return>

<label><name>test_cleanup</name>:</label>

<expr_stmt><expr><call><name>curl_easy_cleanup</name><argument_list>(<argument><expr><name>curl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>curl_global_cleanup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><name>res</name></expr>;</return>
</block_content>}</block></function>
</unit>
