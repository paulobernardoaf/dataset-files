<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\curl-analysis\_cppstats_featurelocations\curl\tests\libtest\lib509.c">




















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"test.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
















<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>seen_malloc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>seen_free</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>seen_realloc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>seen_strdup</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>seen_calloc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<function_decl><type><name>void</name> <modifier>*</modifier></type><name>custom_malloc</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>custom_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name> <modifier>*</modifier></type><name>custom_realloc</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>char</name> <modifier>*</modifier></type><name>custom_strdup</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name> <modifier>*</modifier></type><name>custom_calloc</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>nmemb</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>


<function><type><name>void</name> <modifier>*</modifier></type><name>custom_calloc</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>nmemb</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>seen_calloc</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"seen custom_calloc()\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>seen_calloc</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><name>calloc</name><operator>)</operator><operator>(</operator><name>nmemb</name><operator>,</operator> <name>size</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>custom_malloc</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>seen_malloc</name> <operator>&amp;&amp;</operator> <name>seen_calloc</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"seen custom_malloc()\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>seen_malloc</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><name>malloc</name><operator>)</operator><operator>(</operator><name>size</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>custom_strdup</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>seen_strdup</name> <operator>&amp;&amp;</operator> <name>seen_malloc</name></expr>)</condition> <block>{<block_content>






<expr_stmt><expr><name>seen_strdup</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><name>strdup</name><operator>)</operator><operator>(</operator><name>ptr</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>custom_realloc</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>seen_realloc</name> <operator>&amp;&amp;</operator> <name>seen_malloc</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"seen custom_realloc()\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>seen_realloc</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><name>realloc</name><operator>)</operator><operator>(</operator><name>ptr</name><operator>,</operator> <name>size</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>custom_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>seen_free</name> <operator>&amp;&amp;</operator> <name>seen_realloc</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"seen custom_free()\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>seen_free</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><name>free</name><operator>)</operator><operator>(</operator><name>ptr</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>test</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>URL</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>a</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0x2f</literal></expr>, <expr><literal type="number">0x3a</literal></expr>, <expr><literal type="number">0x3b</literal></expr>, <expr><literal type="number">0x3c</literal></expr>, <expr><literal type="number">0x3d</literal></expr>, <expr><literal type="number">0x3e</literal></expr>, <expr><literal type="number">0x3f</literal></expr>,
<expr><literal type="number">0x91</literal></expr>, <expr><literal type="number">0xa2</literal></expr>, <expr><literal type="number">0xb3</literal></expr>, <expr><literal type="number">0xc4</literal></expr>, <expr><literal type="number">0xd5</literal></expr>, <expr><literal type="number">0xe6</literal></expr>, <expr><literal type="number">0xf7</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>res</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CURL</name> <modifier>*</modifier></type><name>curl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>asize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>URL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>curl_global_init_mem</name><argument_list>(<argument><expr><name>CURL_GLOBAL_ALL</name></expr></argument>,
<argument><expr><name>custom_malloc</name></expr></argument>,
<argument><expr><name>custom_free</name></expr></argument>,
<argument><expr><name>custom_realloc</name></expr></argument>,
<argument><expr><name>custom_strdup</name></expr></argument>,
<argument><expr><name>custom_calloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>res</name> <operator>!=</operator> <name>CURLE_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"curl_global_init_mem() failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>TEST_ERR_MAJOR_BAD</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>curl</name> <operator>=</operator> <call><name>curl_easy_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>curl</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"curl_easy_init() failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>curl_global_cleanup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>TEST_ERR_MAJOR_BAD</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>test_setopt</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_USERAGENT</name></expr></argument>, <argument><expr><literal type="string">"test509"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>asize</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>curl_easy_escape</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>a</name></expr></argument>, <argument><expr><name>asize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<label><name>test_cleanup</name>:</label>

<if_stmt><if>if<condition>(<expr><name>str</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>curl_free</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>curl_easy_cleanup</name><argument_list>(<argument><expr><name>curl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>curl_global_cleanup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><name>res</name></expr>;</return>
</block_content>}</block></function>
</unit>
