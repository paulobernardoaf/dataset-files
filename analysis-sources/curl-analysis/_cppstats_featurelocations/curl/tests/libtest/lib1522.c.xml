<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\curl-analysis\_cppstats_featurelocations\curl\tests\libtest\lib1522.c">




















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"test.h"</cpp:file></cpp:include>



<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"testutil.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"warnless.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memdebug.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>g_Data</name><index>[<expr><literal type="number">40</literal> <operator>*</operator> <literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt> 

<function><type><specifier>static</specifier> <name>int</name></type> <name>sockopt_callback</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>clientp</name></decl></parameter>, <parameter><decl><type><name>curl_socket_t</name></type> <name>curlfd</name></decl></parameter>,
<parameter><decl><type><name>curlsocktype</name></type> <name>purpose</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SOL_SOCKET</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>SO_SNDBUF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>sndbufsize</name> <init>= <expr><literal type="number">4</literal> <operator>*</operator> <literal type="number">1024</literal></expr></init></decl>;</decl_stmt> 
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>clientp</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>purpose</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>setsockopt</name><argument_list>(<argument><expr><name>curlfd</name></expr></argument>, <argument><expr><name>SOL_SOCKET</name></expr></argument>, <argument><expr><name>SO_SNDBUF</name></expr></argument>,
<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>sndbufsize</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sndbufsize</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>clientp</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>curlfd</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>purpose</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>CURL_SOCKOPT_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>test</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>URL</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>code</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>curl_slist</name></name> <modifier>*</modifier></type><name>pHeaderList</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CURL</name> <modifier>*</modifier></type><name>pCurl</name> <init>= <expr><call><name>curl_easy_init</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>g_Data</name></expr></argument>, <argument><expr><literal type="char">'A'</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>g_Data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name>pCurl</name></expr></argument>, <argument><expr><name>CURLOPT_SOCKOPTFUNCTION</name></expr></argument>, <argument><expr><name>sockopt_callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name>pCurl</name></expr></argument>, <argument><expr><name>CURLOPT_URL</name></expr></argument>, <argument><expr><name>URL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name>pCurl</name></expr></argument>, <argument><expr><name>CURLOPT_POSTFIELDS</name></expr></argument>, <argument><expr><name>g_Data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name>pCurl</name></expr></argument>, <argument><expr><name>CURLOPT_POSTFIELDSIZE</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>g_Data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>pHeaderList</name> <operator>=</operator> <call><name>curl_slist_append</name><argument_list>(<argument><expr><name>pHeaderList</name></expr></argument>, <argument><expr><literal type="string">"Expect:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name>pCurl</name></expr></argument>, <argument><expr><name>CURLOPT_HTTPHEADER</name></expr></argument>, <argument><expr><name>pHeaderList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>curl_easy_perform</name><argument_list>(<argument><expr><name>pCurl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>code</name> <operator>==</operator> <name>CURLE_OK</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>curl_off_t</name></type> <name>uploadSize</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>curl_easy_getinfo</name><argument_list>(<argument><expr><name>pCurl</name></expr></argument>, <argument><expr><name>CURLINFO_SIZE_UPLOAD_T</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>uploadSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"uploadSize = %ld\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><name>uploadSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>size_t</name><operator>)</operator> <name>uploadSize</name> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>g_Data</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"!!!!!!!!!! PASS\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"!!!!!!!!!! FAIL\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"curl_easy_perform() failed. e = %d\n"</literal></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>curl_slist_free_all</name><argument_list>(<argument><expr><name>pHeaderList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>curl_easy_cleanup</name><argument_list>(<argument><expr><name>pCurl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>curl_global_cleanup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
