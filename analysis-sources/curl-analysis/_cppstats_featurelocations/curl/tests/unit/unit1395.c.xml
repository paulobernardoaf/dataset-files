<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\curl-analysis\_cppstats_featurelocations\curl\tests\unit\unit1395.c">




















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curlcheck.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dotdot.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memdebug.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>unit_setup</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>CURLE_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>unit_stop</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>

</block_content>}</block></function>

<struct>struct <name>dotdot</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>input</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>output</name></decl>;</decl_stmt>
}</block>;</struct>

<decl_stmt><decl><type><name>UNITTEST_START</name>

<name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fails</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>dotdot</name></name></type> <name><name>pairs</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"/a/b/c/./../../g"</literal></expr>, <expr><literal type="string">"/a/g"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"mid/content=5/../6"</literal></expr>, <expr><literal type="string">"mid/6"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"/hello/../moo"</literal></expr>, <expr><literal type="string">"/moo"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"/1/../1"</literal></expr>, <expr><literal type="string">"/1"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"/1/./1"</literal></expr>, <expr><literal type="string">"/1/1"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"/1/.."</literal></expr>, <expr><literal type="string">"/"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"/1/."</literal></expr>, <expr><literal type="string">"/1/"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"/1/./.."</literal></expr>, <expr><literal type="string">"/"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"/1/./../2"</literal></expr>, <expr><literal type="string">"/2"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"/hello/1/./../2"</literal></expr>, <expr><literal type="string">"/hello/2"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"test/this"</literal></expr>, <expr><literal type="string">"test/this"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"test/this/../now"</literal></expr>, <expr><literal type="string">"test/now"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"/1../moo../foo"</literal></expr>, <expr><literal type="string">"/1../moo../foo"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"/../../moo"</literal></expr>, <expr><literal type="string">"/moo"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"/../../moo?andnot/../yay"</literal></expr>, <expr><literal type="string">"/moo?andnot/../yay"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"/123?foo=/./&amp;bar=/../"</literal></expr>, <expr><literal type="string">"/123?foo=/./&amp;bar=/../"</literal></expr>}</block></expr>,
<expr><block>{ <expr><literal type="string">"/../moo/..?what"</literal></expr>, <expr><literal type="string">"/?what"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"/"</literal></expr>, <expr><literal type="string">"/"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"/.../"</literal></expr>, <expr><literal type="string">"/.../"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"./moo"</literal></expr>, <expr><literal type="string">"moo"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"../moo"</literal></expr>, <expr><literal type="string">"moo"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"/."</literal></expr>, <expr><literal type="string">"/"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"/.."</literal></expr>, <expr><literal type="string">"/"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"/moo/.."</literal></expr>, <expr><literal type="string">"/"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">".."</literal></expr>, <expr><literal type="string">""</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"."</literal></expr>, <expr><literal type="string">""</literal></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pairs</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>pairs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><call><name>Curl_dedotdotify</name><argument_list>(<argument><expr><name><name>pairs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>input</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>abort_unless</name><argument_list>(<argument><expr><name>out</name> <operator>!=</operator> <name>NULL</name></expr></argument>, <argument><expr><literal type="string">"returned NULL!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name><name>pairs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>output</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Test %u: '%s' gave '%s' instead of '%s'\n"</literal></expr></argument>,
<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>pairs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>input</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name><name>pairs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><literal type="string">"Test case output mismatched"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fails</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Test %u: OK\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>fail_if</name><argument_list>(<argument><expr><name>fails</name></expr></argument>, <argument><expr><literal type="string">"output mismatched"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr><name>UNITTEST_STOP</name></expr>
</unit>
