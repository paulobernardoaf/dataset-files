<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\curl-analysis\_cppstats_featurelocations\curl\tests\unit\unit1655.c">




















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curlcheck.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"doh.h"</cpp:file></cpp:include> 

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>unit_setup</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>

<return>return <expr><name>CURLE_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>unit_stop</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_DOH</name></expr></argument>)</argument_list></call></expr></cpp:if>

<macro><name>UNITTEST_START</name></macro>







<do>do <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>max</name> <init>=


<expr><literal type="string">"this.is.a.maximum-length.hostname."</literal> 
<literal type="string">"with-no-label-of-greater-length-than-the-sixty-three-characters."</literal>

<literal type="string">"specified.in.the.RFCs."</literal> 
<literal type="string">"and.with.a.QNAME.encoding.whose.length.is.exactly."</literal> 
<literal type="string">"the.maximum.length.allowed."</literal> 
<literal type="string">"that.is.two-hundred.and.fifty-six."</literal> 
<literal type="string">"including.the.last.null."</literal> 
<literal type="string">""</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>toolong</name> <init>=


<expr><literal type="string">"here.is.a.hostname.which.is.just.barely.too.long."</literal> 
<literal type="string">"to.be.encoded.as.a.QNAME.of.the.maximum.allowed.length."</literal>

<literal type="string">"which.is.256.including.a.final.zero-length.label."</literal> 
<literal type="string">"representing.the.root.node.so.that.a.name.with."</literal> 
<literal type="string">"a.trailing.dot.may.have.up.to."</literal> 
<literal type="string">"255.characters.never.more."</literal> 
<literal type="string">""</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>emptylabel</name> <init>=
<expr><literal type="string">"this.is.an.otherwise-valid.hostname."</literal>
<literal type="string">".with.an.empty.label."</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>outsizelabel</name> <init>=
<expr><literal type="string">"this.is.an.otherwise-valid.hostname."</literal>
<literal type="string">"with-a-label-of-greater-length-than-the-sixty-three-characters-"</literal>
<literal type="string">"specified.in.the.RFCs."</literal></expr></init></decl>;</decl_stmt>

<struct>struct <name>test</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>DOHcode</name></type> <name>expected_result</name></decl>;</decl_stmt>
}</block>;</struct>


<struct>struct <name>demo</name> <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>dohbuffer</name><index>[<expr><literal type="number">255</literal> <operator>+</operator> <literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>canary1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>canary2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>canary3</name></decl>;</decl_stmt>
}</block>;</struct>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>test</name></name></type> <name><name>playlist</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><name>toolong</name></expr>, <expr><name>DOH_DNS_NAME_TOO_LONG</name></expr> }</block></expr>, 
<expr><block>{ <expr><name>emptylabel</name></expr>, <expr><name>DOH_DNS_BAD_LABEL</name></expr> }</block></expr>, 
<expr><block>{ <expr><name>outsizelabel</name></expr>, <expr><name>DOH_DNS_BAD_LABEL</name></expr> }</block></expr>, 
<expr><block>{ <expr><name>max</name></expr>, <expr><name>DOH_OK</name></expr> }</block></expr> 
}</block></expr></init></decl>;</decl_stmt>

<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>playlist</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><name><name>playlist</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>olen</name> <init>= <expr><literal type="number">100000</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>demo</name></name></type> <name>victim</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DOHcode</name></type> <name>d</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>victim</name><operator>.</operator><name>canary1</name></name> <operator>=</operator> <literal type="number">87</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>victim</name><operator>.</operator><name>canary2</name></name> <operator>=</operator> <literal type="number">35</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>victim</name><operator>.</operator><name>canary3</name></name> <operator>=</operator> <literal type="number">41</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>doh_encode</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>DNS_TYPE_A</name></expr></argument>, <argument><expr><name><name>victim</name><operator>.</operator><name>dohbuffer</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>demo</name></expr></argument>)</argument_list></sizeof></expr></argument>, 
<argument><expr><operator>&amp;</operator><name>olen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fail_unless</name><argument_list>(<argument><expr><name>d</name> <operator>==</operator> <name><name>playlist</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>expected_result</name></expr></argument>,
<argument><expr><literal type="string">"result returned was not as expected"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>d</name> <operator>==</operator> <name><name>playlist</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>expected_result</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>name</name> <operator>==</operator> <name>max</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fail_if</name><argument_list>(<argument><expr><name><name>victim</name><operator>.</operator><name>canary1</name></name> <operator>==</operator> <literal type="number">87</literal></expr></argument>,
<argument><expr><literal type="string">"demo one-byte buffer overwrite did not happen"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>fail_unless</name><argument_list>(<argument><expr><name><name>victim</name><operator>.</operator><name>canary1</name></name> <operator>==</operator> <literal type="number">87</literal></expr></argument>,
<argument><expr><literal type="string">"one-byte buffer overwrite has happened"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>fail_unless</name><argument_list>(<argument><expr><name><name>victim</name><operator>.</operator><name>canary2</name></name> <operator>==</operator> <literal type="number">35</literal></expr></argument>,
<argument><expr><literal type="string">"two-byte buffer overwrite has happened"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fail_unless</name><argument_list>(<argument><expr><name><name>victim</name><operator>.</operator><name>canary3</name></name> <operator>==</operator> <literal type="number">41</literal></expr></argument>,
<argument><expr><literal type="string">"three-byte buffer overwrite has happened"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>d</name> <operator>==</operator> <name>DOH_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fail_unless</name><argument_list>(<argument><expr><name>olen</name> <operator>&lt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>victim</name><operator>.</operator><name>dohbuffer</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"wrote outside bounds"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fail_unless</name><argument_list>(<argument><expr><name>olen</name> <operator>&gt;</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"unrealistic low size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block> while<condition>(<expr><literal type="number">0</literal></expr>)</condition>;</do>


<do>do <block>{<block_content>
<decl_stmt><decl><type><name>DNStype</name></type> <name>dnstype</name> <init>= <expr><name>DNS_TYPE_A</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buffer</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>buflen</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>magic1</name> <init>= <expr><literal type="number">9765</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>olen1</name> <init>= <expr><name>magic1</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sunshine1</name> <init>= <expr><literal type="string">"a.com"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dotshine1</name> <init>= <expr><literal type="string">"a.com."</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sunshine2</name> <init>= <expr><literal type="string">"aa.com"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>olen2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DOHcode</name></type> <name>ret2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>olen</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DOHcode</name></type> <name>ret</name> <init>= <expr><call><name>doh_encode</name><argument_list>(<argument><expr><name>sunshine1</name></expr></argument>, <argument><expr><name>dnstype</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>olen1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>fail_unless</name><argument_list>(<argument><expr><name>ret</name> <operator>==</operator> <name>DOH_OK</name></expr></argument>, <argument><expr><literal type="string">"sunshine case 1 should pass fine"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fail_if</name><argument_list>(<argument><expr><name>olen1</name> <operator>==</operator> <name>magic1</name></expr></argument>, <argument><expr><literal type="string">"olen has not been assigned properly"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fail_unless</name><argument_list>(<argument><expr><name>olen1</name> <operator>&gt;</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>sunshine1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"bad out length"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>olen2</name> <operator>=</operator> <name>magic1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ret2</name> <operator>=</operator> <call><name>doh_encode</name><argument_list>(<argument><expr><name>dotshine1</name></expr></argument>, <argument><expr><name>dnstype</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>olen2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fail_unless</name><argument_list>(<argument><expr><name>ret2</name> <operator>==</operator> <name>DOH_OK</name></expr></argument>, <argument><expr><literal type="string">"dotshine case should pass fine"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fail_if</name><argument_list>(<argument><expr><name>olen2</name> <operator>==</operator> <name>magic1</name></expr></argument>, <argument><expr><literal type="string">"olen has not been assigned properly"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fail_unless</name><argument_list>(<argument><expr><name>olen1</name> <operator>==</operator> <name>olen2</name></expr></argument>, <argument><expr><literal type="string">"olen should not grow for a trailing dot"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>olen2</name> <operator>=</operator> <name>magic1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ret2</name> <operator>=</operator> <call><name>doh_encode</name><argument_list>(<argument><expr><name>sunshine2</name></expr></argument>, <argument><expr><name>dnstype</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>olen2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fail_unless</name><argument_list>(<argument><expr><name>ret2</name> <operator>==</operator> <name>DOH_OK</name></expr></argument>, <argument><expr><literal type="string">"sunshine case 2 should pass fine"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fail_if</name><argument_list>(<argument><expr><name>olen2</name> <operator>==</operator> <name>magic1</name></expr></argument>, <argument><expr><literal type="string">"olen has not been assigned properly"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fail_unless</name><argument_list>(<argument><expr><name>olen1</name> <operator>+</operator> <literal type="number">1</literal> <operator>==</operator> <name>olen2</name></expr></argument>, <argument><expr><literal type="string">"olen should grow with the hostname"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>doh_encode</name><argument_list>(<argument><expr><name>sunshine1</name></expr></argument>, <argument><expr><name>dnstype</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>olen1</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>olen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fail_if</name><argument_list>(<argument><expr><name>ret</name> <operator>==</operator> <name>DOH_OK</name></expr></argument>, <argument><expr><literal type="string">"short buffer should have been noticed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>doh_encode</name><argument_list>(<argument><expr><name>sunshine1</name></expr></argument>, <argument><expr><name>dnstype</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>olen1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>olen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fail_unless</name><argument_list>(<argument><expr><name>ret</name> <operator>==</operator> <name>DOH_OK</name></expr></argument>, <argument><expr><literal type="string">"minimal length buffer should be long enough"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fail_unless</name><argument_list>(<argument><expr><name>olen</name> <operator>==</operator> <name>olen1</name></expr></argument>, <argument><expr><literal type="string">"bad buffer length"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block> while<condition>(<expr><literal type="number">0</literal></expr>)</condition>;</do>
<decl_stmt><decl><type><name>UNITTEST_STOP</name></type>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 

<name>UNITTEST_START</name>
<block>{<block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return> 
</block_content>}</block></decl></decl_stmt>
<expr><name>UNITTEST_STOP</name></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
