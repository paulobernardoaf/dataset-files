<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\curl-analysis\_cppstats_featurelocations\curl\tests\unit\curlcheck.h">




















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"test.h"</cpp:file></cpp:include>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fail_if</name><parameter_list>(<parameter><type><name>expr</name></type></parameter>, <parameter><type><name>msg</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if(expr) { fprintf(stderr, "%s:%d Assertion '%s' met: %s\n", __FILE__, __LINE__, #expr, msg); unitfail++; }</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fail_unless</name><parameter_list>(<parameter><type><name>expr</name></type></parameter>, <parameter><type><name>msg</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if(!(expr)) { fprintf(stderr, "%s:%d Assertion '%s' failed: %s\n", __FILE__, __LINE__, #expr, msg); unitfail++; }</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>verify_memory</name><parameter_list>(<parameter><type><name>dynamic</name></type></parameter>, <parameter><type><name>check</name></type></parameter>, <parameter><type><name>len</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if(dynamic &amp;&amp; memcmp(dynamic, check, len)) { fprintf(stderr, "%s:%d Memory buffer mismatch size %d. '%s' is not\n", __FILE__, __LINE__, len, hexdump((const unsigned char *)check, len)); fprintf(stderr, "%s:%d the same as '%s'\n", __FILE__, __LINE__, hexdump((const unsigned char *)dynamic, len)); unitfail++; }</cpp:value></cpp:define>











<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fail</name><parameter_list>(<parameter><type><name>msg</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { fprintf(stderr, "%s:%d test failed: '%s'\n", __FILE__, __LINE__, msg); unitfail++; } while(0)</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>abort_if</name><parameter_list>(<parameter><type><name>expr</name></type></parameter>, <parameter><type><name>msg</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if(expr) { fprintf(stderr, "%s:%d Abort assertion '%s' met: %s\n", __FILE__, __LINE__, #expr, msg); unitfail++; goto unit_test_abort; }</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>abort_unless</name><parameter_list>(<parameter><type><name>expr</name></type></parameter>, <parameter><type><name>msg</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if(!(expr)) { fprintf(stderr, "%s:%d Abort assertion '%s' failed: %s\n", __FILE__, __LINE__, #expr, msg); unitfail++; goto unit_test_abort; }</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>abort_test</name><parameter_list>(<parameter><type><name>msg</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { fprintf(stderr, "%s:%d test aborted: '%s'\n", __FILE__, __LINE__, msg); unitfail++; goto unit_test_abort; } while(0)</cpp:value></cpp:define>








<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>unitfail</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNITTEST_START</name></cpp:macro> <cpp:value>int test(char *arg) { (void)arg; if(unit_setup()) { fail("unit_setup() failure"); } else {</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNITTEST_STOP</name></cpp:macro> <cpp:value>goto unit_test_abort; unit_test_abort: unit_stop(); } return unitfail; }</cpp:value></cpp:define>






</unit>
