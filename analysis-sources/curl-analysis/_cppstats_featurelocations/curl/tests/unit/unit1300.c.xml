<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\curl-analysis\_cppstats_featurelocations\curl\tests\unit\unit1300.c">




















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curlcheck.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llist.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>curl_llist</name></name></type> <name>llist</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>curl_llist</name></name></type> <name>llist_destination</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_curl_llist_dtor</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>key</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>value</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>unit_setup</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>Curl_llist_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>llist</name></expr></argument>, <argument><expr><name>test_curl_llist_dtor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_llist_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>llist_destination</name></expr></argument>, <argument><expr><name>test_curl_llist_dtor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>unit_stop</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
</block_content>}</block></function>

<macro><name>UNITTEST_START</name></macro>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>unusedData_case1</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>unusedData_case2</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>unusedData_case3</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>curl_llist_element</name></name></type> <name>case1_list</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>curl_llist_element</name></name></type> <name>case2_list</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>curl_llist_element</name></name></type> <name>case3_list</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>curl_llist_element</name></name></type> <name>case4_list</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>curl_llist_element</name></name> <modifier>*</modifier></type><name>head</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>curl_llist_element</name></name> <modifier>*</modifier></type><name>element_next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>curl_llist_element</name></name> <modifier>*</modifier></type><name>element_prev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>curl_llist_element</name></name> <modifier>*</modifier></type><name>to_remove</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>llist_size</name> <init>= <expr><call><name>Curl_llist_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name>llist</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>












<expr_stmt><expr><call><name>fail_unless</name><argument_list>(<argument><expr><name><name>llist</name><operator>.</operator><name>size</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"list initial size should be zero"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fail_unless</name><argument_list>(<argument><expr><name><name>llist</name><operator>.</operator><name>head</name></name> <operator>==</operator> <name>NULL</name></expr></argument>, <argument><expr><literal type="string">"list head should initiate to NULL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fail_unless</name><argument_list>(<argument><expr><name><name>llist</name><operator>.</operator><name>tail</name></name> <operator>==</operator> <name>NULL</name></expr></argument>, <argument><expr><literal type="string">"list tail should intiate to NULL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fail_unless</name><argument_list>(<argument><expr><name><name>llist</name><operator>.</operator><name>dtor</name></name> <operator>==</operator> <name>test_curl_llist_dtor</name></expr></argument>,
<argument><expr><literal type="string">"list dtor should initiate to test_curl_llist_dtor"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>











<expr_stmt><expr><call><name>Curl_llist_insert_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>llist</name></expr></argument>, <argument><expr><name><name>llist</name><operator>.</operator><name>head</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>unusedData_case1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>case1_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fail_unless</name><argument_list>(<argument><expr><call><name>Curl_llist_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name>llist</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr></argument>,
<argument><expr><literal type="string">"List size should be 1 after adding a new element"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fail_unless</name><argument_list>(<argument><expr><name><name>llist</name><operator>.</operator><name>head</name><operator>-&gt;</operator><name>ptr</name></name> <operator>==</operator> <operator>&amp;</operator><name>unusedData_case1</name></expr></argument>,
<argument><expr><literal type="string">"head ptr should be first entry"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fail_unless</name><argument_list>(<argument><expr><name><name>llist</name><operator>.</operator><name>tail</name></name> <operator>==</operator> <name><name>llist</name><operator>.</operator><name>head</name></name></expr></argument>,
<argument><expr><literal type="string">"tail and head should be the same"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>










<expr_stmt><expr><call><name>Curl_llist_insert_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>llist</name></expr></argument>, <argument><expr><name><name>llist</name><operator>.</operator><name>head</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>unusedData_case3</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>case3_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fail_unless</name><argument_list>(<argument><expr><name><name>llist</name><operator>.</operator><name>head</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>ptr</name></name> <operator>==</operator> <operator>&amp;</operator><name>unusedData_case3</name></expr></argument>,
<argument><expr><literal type="string">"the node next to head is not getting set correctly"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fail_unless</name><argument_list>(<argument><expr><name><name>llist</name><operator>.</operator><name>tail</name><operator>-&gt;</operator><name>ptr</name></name> <operator>==</operator> <operator>&amp;</operator><name>unusedData_case3</name></expr></argument>,
<argument><expr><literal type="string">"the list tail is not getting set correctly"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>










<expr_stmt><expr><call><name>Curl_llist_insert_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>llist</name></expr></argument>, <argument><expr><name><name>llist</name><operator>.</operator><name>head</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>unusedData_case2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>case2_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fail_unless</name><argument_list>(<argument><expr><name><name>llist</name><operator>.</operator><name>head</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>ptr</name></name> <operator>==</operator> <operator>&amp;</operator><name>unusedData_case2</name></expr></argument>,
<argument><expr><literal type="string">"the node next to head is not getting set correctly"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fail_unless</name><argument_list>(<argument><expr><name><name>llist</name><operator>.</operator><name>tail</name><operator>-&gt;</operator><name>ptr</name></name> <operator>!=</operator> <operator>&amp;</operator><name>unusedData_case2</name></expr></argument>,
<argument><expr><literal type="string">"the list tail is not getting set correctly"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>












<expr_stmt><expr><name>head</name> <operator>=</operator> <name><name>llist</name><operator>.</operator><name>head</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>abort_unless</name><argument_list>(<argument><expr><name>head</name></expr></argument>, <argument><expr><literal type="string">"llist.head is NULL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>element_next</name> <operator>=</operator> <name><name>head</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>llist_size</name> <operator>=</operator> <call><name>Curl_llist_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name>llist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_llist_remove</name><argument_list>(<argument><expr><operator>&amp;</operator><name>llist</name></expr></argument>, <argument><expr><name><name>llist</name><operator>.</operator><name>head</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fail_unless</name><argument_list>(<argument><expr><call><name>Curl_llist_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name>llist</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>(</operator><name>llist_size</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr></argument>,
<argument><expr><literal type="string">"llist size not decremented as expected"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fail_unless</name><argument_list>(<argument><expr><name><name>llist</name><operator>.</operator><name>head</name></name> <operator>==</operator> <name>element_next</name></expr></argument>,
<argument><expr><literal type="string">"llist new head not modified properly"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>abort_unless</name><argument_list>(<argument><expr><name><name>llist</name><operator>.</operator><name>head</name></name></expr></argument>, <argument><expr><literal type="string">"llist.head is NULL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fail_unless</name><argument_list>(<argument><expr><name><name>llist</name><operator>.</operator><name>head</name><operator>-&gt;</operator><name>prev</name></name> <operator>==</operator> <name>NULL</name></expr></argument>,
<argument><expr><literal type="string">"new head previous not set to null"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>











<expr_stmt><expr><call><name>Curl_llist_insert_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>llist</name></expr></argument>, <argument><expr><name><name>llist</name><operator>.</operator><name>head</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>unusedData_case3</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>case4_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>llist_size</name> <operator>=</operator> <call><name>Curl_llist_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name>llist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fail_unless</name><argument_list>(<argument><expr><name>llist_size</name> <operator>==</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"should be 3 list members"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>to_remove</name> <operator>=</operator> <name><name>llist</name><operator>.</operator><name>head</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>abort_unless</name><argument_list>(<argument><expr><name>to_remove</name></expr></argument>, <argument><expr><literal type="string">"to_remove is NULL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>element_next</name> <operator>=</operator> <name><name>to_remove</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>element_prev</name> <operator>=</operator> <name><name>to_remove</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_llist_remove</name><argument_list>(<argument><expr><operator>&amp;</operator><name>llist</name></expr></argument>, <argument><expr><name>to_remove</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fail_unless</name><argument_list>(<argument><expr><name><name>element_prev</name><operator>-&gt;</operator><name>next</name></name> <operator>==</operator> <name>element_next</name></expr></argument>,
<argument><expr><literal type="string">"element previous-&gt;next is not being adjusted"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>abort_unless</name><argument_list>(<argument><expr><name>element_next</name></expr></argument>, <argument><expr><literal type="string">"element_next is NULL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fail_unless</name><argument_list>(<argument><expr><name><name>element_next</name><operator>-&gt;</operator><name>prev</name></name> <operator>==</operator> <name>element_prev</name></expr></argument>,
<argument><expr><literal type="string">"element next-&gt;previous is not being adjusted"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>











<expr_stmt><expr><name>to_remove</name> <operator>=</operator> <name><name>llist</name><operator>.</operator><name>tail</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>element_prev</name> <operator>=</operator> <name><name>to_remove</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_llist_remove</name><argument_list>(<argument><expr><operator>&amp;</operator><name>llist</name></expr></argument>, <argument><expr><name>to_remove</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fail_unless</name><argument_list>(<argument><expr><name><name>llist</name><operator>.</operator><name>tail</name></name> <operator>==</operator> <name>element_prev</name></expr></argument>,
<argument><expr><literal type="string">"llist tail is not being adjusted when removing tail"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>










<expr_stmt><expr><name>to_remove</name> <operator>=</operator> <name><name>llist</name><operator>.</operator><name>head</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_llist_remove</name><argument_list>(<argument><expr><operator>&amp;</operator><name>llist</name></expr></argument>, <argument><expr><name>to_remove</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fail_unless</name><argument_list>(<argument><expr><name><name>llist</name><operator>.</operator><name>head</name></name> <operator>==</operator> <name>NULL</name></expr></argument>,
<argument><expr><literal type="string">"llist head is not NULL while the llist is empty"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fail_unless</name><argument_list>(<argument><expr><name><name>llist</name><operator>.</operator><name>tail</name></name> <operator>==</operator> <name>NULL</name></expr></argument>,
<argument><expr><literal type="string">"llist tail is not NULL while the llist is empty"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_llist_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>llist</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_llist_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>llist_destination</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<expr><name>UNITTEST_STOP</name></expr>
</unit>
