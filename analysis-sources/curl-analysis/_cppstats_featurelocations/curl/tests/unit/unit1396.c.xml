<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\curl-analysis\_cppstats_featurelocations\curl\tests\unit\unit1396.c">




















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curlcheck.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>CURL</name> <modifier>*</modifier></type><name>hnd</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>unit_setup</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>global_init</name><argument_list>(<argument><expr><name>CURL_GLOBAL_ALL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>unit_stop</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>hnd</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>curl_easy_cleanup</name><argument_list>(<argument><expr><name>hnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>curl_global_cleanup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<struct>struct <name>test</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>in</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>inlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>out</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>outlen</name></decl>;</decl_stmt>
}</block>;</struct>

<macro><name>UNITTEST_START</name></macro>
<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>test</name></name></type> <name><name>list1</name><index>[]</index></name><init>=<expr><block>{
<expr><block>{<expr><literal type="string">"%61"</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="string">"a"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"%61a"</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="string">"aa"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"%61b"</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="string">"ab"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"%6 1"</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="string">"%6 1"</literal></expr>, <expr><literal type="number">4</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"%61"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"%"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"%61"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="string">"%6"</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"%6%a"</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="string">"%6%a"</literal></expr>, <expr><literal type="number">4</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"%6a"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"j"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"%FF"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"\xff"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"%FF%00%ff"</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="string">"\xff\x00\xff"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"%-2"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"%-2"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"%FG"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"%FG"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr> 
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>test</name></name></type> <name><name>list2</name><index>[]</index></name><init>=<expr><block>{
<expr><block>{<expr><literal type="string">"a"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"a"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"/"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"%2F"</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"a=b"</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="string">"a%3Db"</literal></expr>, <expr><literal type="number">5</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"a=b"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"a%3Db"</literal></expr>, <expr><literal type="number">5</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"a=b"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"a"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"a=b"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="string">"a%3D"</literal></expr>, <expr><literal type="number">4</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"1/./0"</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="string">"1%2F.%2F0"</literal></expr>, <expr><literal type="number">9</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"-._~!#%&amp;"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"-._~%21%23%25%26"</literal></expr>, <expr><literal type="number">16</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"a"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="string">"a%00"</literal></expr>, <expr><literal type="number">4</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"a\xff\x01g"</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="string">"a%FF%01g"</literal></expr>, <expr><literal type="number">8</literal></expr>}</block></expr>,
<expr><block>{<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr> 
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>hnd</name> <operator>=</operator> <call><name>curl_easy_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>abort_unless</name><argument_list>(<argument><expr><name>hnd</name> <operator>!=</operator> <name>NULL</name></expr></argument>, <argument><expr><literal type="string">"returned NULL!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>list1</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>in</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>outlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><call><name>curl_easy_unescape</name><argument_list>(<argument><expr><name>hnd</name></expr></argument>,
<argument><expr><name><name>list1</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>in</name></expr></argument>, <argument><expr><name><name>list1</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>inlen</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>outlen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>abort_unless</name><argument_list>(<argument><expr><name>out</name> <operator>!=</operator> <name>NULL</name></expr></argument>, <argument><expr><literal type="string">"returned NULL!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fail_unless</name><argument_list>(<argument><expr><name>outlen</name> <operator>==</operator> <name><name>list1</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>outlen</name></expr></argument>, <argument><expr><literal type="string">"wrong output length returned"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fail_unless</name><argument_list>(<argument><expr><operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name><name>list1</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>out</name></expr></argument>, <argument><expr><name><name>list1</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>outlen</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><literal type="string">"bad output data returned"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"curl_easy_unescape test %d DONE\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>curl_free</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>list2</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>in</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>outlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><call><name>curl_easy_escape</name><argument_list>(<argument><expr><name>hnd</name></expr></argument>, <argument><expr><name><name>list2</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>in</name></expr></argument>, <argument><expr><name><name>list2</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>inlen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>abort_unless</name><argument_list>(<argument><expr><name>out</name> <operator>!=</operator> <name>NULL</name></expr></argument>, <argument><expr><literal type="string">"returned NULL!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>outlen</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fail_unless</name><argument_list>(<argument><expr><name>outlen</name> <operator>==</operator> <name><name>list2</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>outlen</name></expr></argument>, <argument><expr><literal type="string">"wrong output length returned"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fail_unless</name><argument_list>(<argument><expr><operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name><name>list2</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>out</name></expr></argument>, <argument><expr><name><name>list2</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>outlen</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><literal type="string">"bad output data returned"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"curl_easy_escape test %d DONE (%s)\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>curl_free</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block>
<expr><name>UNITTEST_STOP</name></expr>
</unit>
