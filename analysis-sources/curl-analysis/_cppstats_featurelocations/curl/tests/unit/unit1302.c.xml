<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\curl-analysis\_cppstats_featurelocations\curl\tests\unit\unit1302.c">




















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curlcheck.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"urldata.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"url.h"</cpp:file></cpp:include> 
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_base64.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memdebug.h"</cpp:file></cpp:include> 

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>unit_setup</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>global_init</name><argument_list>(<argument><expr><name>CURL_GLOBAL_ALL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>curl_easy_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>data</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>unit_stop</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>curl_easy_cleanup</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>curl_global_cleanup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><name>UNITTEST_START</name>

<name>char</name> <modifier>*</modifier></type><name>output</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>decoded</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>anychar</name> <init>= <expr><literal type="char">'x'</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>rc</name></decl>;</decl_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>Curl_base64_encode</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"i"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>output</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fail_unless</name><argument_list>(<argument><expr><name>rc</name> <operator>==</operator> <name>CURLE_OK</name></expr></argument>, <argument><expr><literal type="string">"return code should be CURLE_OK"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fail_unless</name><argument_list>(<argument><expr><name>size</name> <operator>==</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"size should be 4"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>verify_memory</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"aQ=="</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>Curl_base64_encode</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"ii"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>output</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fail_unless</name><argument_list>(<argument><expr><name>rc</name> <operator>==</operator> <name>CURLE_OK</name></expr></argument>, <argument><expr><literal type="string">"return code should be CURLE_OK"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fail_unless</name><argument_list>(<argument><expr><name>size</name> <operator>==</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"size should be 4"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>verify_memory</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"aWk="</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>Curl_base64_encode</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"iii"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>output</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fail_unless</name><argument_list>(<argument><expr><name>rc</name> <operator>==</operator> <name>CURLE_OK</name></expr></argument>, <argument><expr><literal type="string">"return code should be CURLE_OK"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fail_unless</name><argument_list>(<argument><expr><name>size</name> <operator>==</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"size should be 4"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>verify_memory</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"aWlp"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>Curl_base64_encode</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"iiii"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>output</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fail_unless</name><argument_list>(<argument><expr><name>rc</name> <operator>==</operator> <name>CURLE_OK</name></expr></argument>, <argument><expr><literal type="string">"return code should be CURLE_OK"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fail_unless</name><argument_list>(<argument><expr><name>size</name> <operator>==</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><literal type="string">"size should be 8"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>verify_memory</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"aWlpaQ=="</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>Curl_base64_encode</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"\xff\x01\xfe\x02"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>output</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fail_unless</name><argument_list>(<argument><expr><name>rc</name> <operator>==</operator> <name>CURLE_OK</name></expr></argument>, <argument><expr><literal type="string">"return code should be CURLE_OK"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fail_unless</name><argument_list>(<argument><expr><name>size</name> <operator>==</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><literal type="string">"size should be 8"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>verify_memory</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"/wH+Ag=="</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>Curl_base64url_encode</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"\xff\x01\xfe\x02"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>output</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fail_unless</name><argument_list>(<argument><expr><name>rc</name> <operator>==</operator> <name>CURLE_OK</name></expr></argument>, <argument><expr><literal type="string">"return code should be CURLE_OK"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fail_unless</name><argument_list>(<argument><expr><name>size</name> <operator>==</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><literal type="string">"size should be 8"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>verify_memory</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"_wH-Ag=="</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>Curl_base64url_encode</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"iiii"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>output</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fail_unless</name><argument_list>(<argument><expr><name>rc</name> <operator>==</operator> <name>CURLE_OK</name></expr></argument>, <argument><expr><literal type="string">"return code should be CURLE_OK"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fail_unless</name><argument_list>(<argument><expr><name>size</name> <operator>==</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><literal type="string">"size should be 8"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>verify_memory</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"aWlpaQ=="</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>Curl_base64_encode</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"iiii"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>output</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fail_unless</name><argument_list>(<argument><expr><name>rc</name> <operator>==</operator> <name>CURLE_OK</name></expr></argument>, <argument><expr><literal type="string">"return code should be CURLE_OK"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fail_unless</name><argument_list>(<argument><expr><name>size</name> <operator>==</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><literal type="string">"size should be 8"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>verify_memory</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"aWlpaQ=="</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>Curl_base64_decode</name><argument_list>(<argument><expr><literal type="string">"aWlpaQ=="</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>decoded</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fail_unless</name><argument_list>(<argument><expr><name>rc</name> <operator>==</operator> <name>CURLE_OK</name></expr></argument>, <argument><expr><literal type="string">"return code should be CURLE_OK"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fail_unless</name><argument_list>(<argument><expr><name>size</name> <operator>==</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"size should be 4"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>verify_memory</name><argument_list>(<argument><expr><name>decoded</name></expr></argument>, <argument><expr><literal type="string">"iiii"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name>decoded</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>Curl_base64_decode</name><argument_list>(<argument><expr><literal type="string">"aWlp"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>decoded</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fail_unless</name><argument_list>(<argument><expr><name>rc</name> <operator>==</operator> <name>CURLE_OK</name></expr></argument>, <argument><expr><literal type="string">"return code should be CURLE_OK"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fail_unless</name><argument_list>(<argument><expr><name>size</name> <operator>==</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"size should be 3"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>verify_memory</name><argument_list>(<argument><expr><name>decoded</name></expr></argument>, <argument><expr><literal type="string">"iii"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name>decoded</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>Curl_base64_decode</name><argument_list>(<argument><expr><literal type="string">"aWk="</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>decoded</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fail_unless</name><argument_list>(<argument><expr><name>rc</name> <operator>==</operator> <name>CURLE_OK</name></expr></argument>, <argument><expr><literal type="string">"return code should be CURLE_OK"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fail_unless</name><argument_list>(<argument><expr><name>size</name> <operator>==</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"size should be 2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>verify_memory</name><argument_list>(<argument><expr><name>decoded</name></expr></argument>, <argument><expr><literal type="string">"ii"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name>decoded</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>Curl_base64_decode</name><argument_list>(<argument><expr><literal type="string">"aQ=="</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>decoded</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fail_unless</name><argument_list>(<argument><expr><name>rc</name> <operator>==</operator> <name>CURLE_OK</name></expr></argument>, <argument><expr><literal type="string">"return code should be CURLE_OK"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fail_unless</name><argument_list>(<argument><expr><name>size</name> <operator>==</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"size should be 1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>verify_memory</name><argument_list>(<argument><expr><name>decoded</name></expr></argument>, <argument><expr><literal type="string">"i"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name>decoded</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name>decoded</name> <operator>=</operator> <operator>&amp;</operator><name>anychar</name></expr>;</expr_stmt> 
<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>Curl_base64_decode</name><argument_list>(<argument><expr><literal type="string">"aQ"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>decoded</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fail_unless</name><argument_list>(<argument><expr><name>rc</name> <operator>==</operator> <name>CURLE_BAD_CONTENT_ENCODING</name></expr></argument>,
<argument><expr><literal type="string">"return code should be CURLE_BAD_CONTENT_ENCODING"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fail_unless</name><argument_list>(<argument><expr><name>size</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"size should be 0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fail_if</name><argument_list>(<argument><expr><name>decoded</name></expr></argument>, <argument><expr><literal type="string">"returned pointer should be NULL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name>decoded</name> <operator>=</operator> <operator>&amp;</operator><name>anychar</name></expr>;</expr_stmt> 
<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>Curl_base64_decode</name><argument_list>(<argument><expr><literal type="string">"a==="</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>decoded</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fail_unless</name><argument_list>(<argument><expr><name>rc</name> <operator>==</operator> <name>CURLE_BAD_CONTENT_ENCODING</name></expr></argument>,
<argument><expr><literal type="string">"return code should be CURLE_BAD_CONTENT_ENCODING"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fail_unless</name><argument_list>(<argument><expr><name>size</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"size should be 0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fail_if</name><argument_list>(<argument><expr><name>decoded</name></expr></argument>, <argument><expr><literal type="string">"returned pointer should be NULL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name>decoded</name> <operator>=</operator> <operator>&amp;</operator><name>anychar</name></expr>;</expr_stmt> 
<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>Curl_base64_decode</name><argument_list>(<argument><expr><literal type="string">"a=Q="</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>decoded</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fail_unless</name><argument_list>(<argument><expr><name>rc</name> <operator>==</operator> <name>CURLE_BAD_CONTENT_ENCODING</name></expr></argument>,
<argument><expr><literal type="string">"return code should be CURLE_BAD_CONTENT_ENCODING"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fail_unless</name><argument_list>(<argument><expr><name>size</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"size should be 0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fail_if</name><argument_list>(<argument><expr><name>decoded</name></expr></argument>, <argument><expr><literal type="string">"returned pointer should be NULL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name>decoded</name> <operator>=</operator> <operator>&amp;</operator><name>anychar</name></expr>;</expr_stmt> 
<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>Curl_base64_decode</name><argument_list>(<argument><expr><literal type="string">"a\x1f=="</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>decoded</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fail_unless</name><argument_list>(<argument><expr><name>rc</name> <operator>==</operator> <name>CURLE_BAD_CONTENT_ENCODING</name></expr></argument>,
<argument><expr><literal type="string">"return code should be CURLE_BAD_CONTENT_ENCODING"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fail_unless</name><argument_list>(<argument><expr><name>size</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"size should be 0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fail_if</name><argument_list>(<argument><expr><name>decoded</name></expr></argument>, <argument><expr><literal type="string">"returned pointer should be NULL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr><name>UNITTEST_STOP</name></expr>
</unit>
