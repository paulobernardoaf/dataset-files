<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\curl-analysis\_cppstats_featurelocations\curl\tests\unit\unit1606.c">




















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curlcheck.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"speedcheck.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"urldata.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>CURL</name> <modifier>*</modifier></type><name>easy</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>unit_setup</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>global_init</name><argument_list>(<argument><expr><name>CURL_GLOBAL_ALL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>easy</name> <operator>=</operator> <call><name>curl_easy_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>easy</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>unit_stop</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>curl_easy_cleanup</name><argument_list>(<argument><expr><name>easy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>curl_global_cleanup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>runawhile</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>time_limit</name></decl></parameter>,
<parameter><decl><type><name>long</name></type> <name>speed_limit</name></decl></parameter>,
<parameter><decl><type><name>curl_off_t</name></type> <name>speed</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>dec</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>counter</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>curltime</name></name></type> <name>now</name> <init>= <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>finaltime</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name>easy</name></expr></argument>, <argument><expr><name>CURLOPT_LOW_SPEED_LIMIT</name></expr></argument>, <argument><expr><name>speed_limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name>easy</name></expr></argument>, <argument><expr><name>CURLOPT_LOW_SPEED_TIME</name></expr></argument>, <argument><expr><name>time_limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_speedinit</name><argument_list>(<argument><expr><name>easy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<do>do <block>{<block_content>

<expr_stmt><expr><name><name>easy</name><operator>-&gt;</operator><name>progress</name><operator>.</operator><name>current_speed</name></name> <operator>=</operator> <name>speed</name></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_speedcheck</name><argument_list>(<argument><expr><name>easy</name></expr></argument>, <argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>now</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <operator>++</operator><name>counter</name></expr>;</expr_stmt>
<expr_stmt><expr><name>speed</name> <operator>-=</operator> <name>dec</name></expr>;</expr_stmt>
</block_content>}</block> while<condition>(<expr><name>counter</name> <operator>&lt;</operator> <literal type="number">100</literal></expr>)</condition>;</do>

<expr_stmt><expr><name>finaltime</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>now</name><operator>.</operator><name>tv_sec</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<return>return <expr><name>finaltime</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>UNITTEST_START</name></type>
<name>fail_unless</name><argument_list>(<argument><expr><call><name>runawhile</name><argument_list>(<argument><expr><literal type="number">41</literal></expr></argument>, <argument><expr><literal type="number">41</literal></expr></argument>, <argument><expr><literal type="number">40</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">41</literal></expr></argument>,
<argument><expr><literal type="string">"wrong low speed timeout"</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
<expr_stmt><expr><call><name>fail_unless</name><argument_list>(<argument><expr><call><name>runawhile</name><argument_list>(<argument><expr><literal type="number">21</literal></expr></argument>, <argument><expr><literal type="number">21</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">21</literal></expr></argument>,
<argument><expr><literal type="string">"wrong low speed timeout"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fail_unless</name><argument_list>(<argument><expr><call><name>runawhile</name><argument_list>(<argument><expr><literal type="number">60</literal></expr></argument>, <argument><expr><literal type="number">60</literal></expr></argument>, <argument><expr><literal type="number">40</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">60</literal></expr></argument>,
<argument><expr><literal type="string">"wrong log speed timeout"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fail_unless</name><argument_list>(<argument><expr><call><name>runawhile</name><argument_list>(<argument><expr><literal type="number">50</literal></expr></argument>, <argument><expr><literal type="number">50</literal></expr></argument>, <argument><expr><literal type="number">40</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">50</literal></expr></argument>,
<argument><expr><literal type="string">"wrong log speed timeout"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fail_unless</name><argument_list>(<argument><expr><call><name>runawhile</name><argument_list>(<argument><expr><literal type="number">40</literal></expr></argument>, <argument><expr><literal type="number">40</literal></expr></argument>, <argument><expr><literal type="number">40</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">99</literal></expr></argument>,
<argument><expr><literal type="string">"should not time out"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fail_unless</name><argument_list>(<argument><expr><call><name>runawhile</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">50</literal></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">36</literal></expr></argument>,
<argument><expr><literal type="string">"bad timeout"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr><name>UNITTEST_STOP</name></expr>
</unit>
