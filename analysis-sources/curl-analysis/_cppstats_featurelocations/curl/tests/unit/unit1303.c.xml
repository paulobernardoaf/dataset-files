<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\curl-analysis\_cppstats_featurelocations\curl\tests\unit\unit1303.c">




















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curlcheck.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"urldata.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"connect.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memdebug.h"</cpp:file></cpp:include> 

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>unit_setup</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>global_init</name><argument_list>(<argument><expr><name>CURL_GLOBAL_ALL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>curl_easy_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>data</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>unit_stop</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>curl_easy_cleanup</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>curl_global_cleanup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BASE</name></cpp:macro> <cpp:value>1000000</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOW</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>now.tv_sec = x; now.tv_usec = y</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIMEOUTS</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>data-&gt;set.timeout = x; data-&gt;set.connecttimeout = y</cpp:value></cpp:define>










<struct>struct <name>timetest</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>now_s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>now_us</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>timeout_ms</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>connecttimeout_ms</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>connecting</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>timediff_t</name></type> <name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>comment</name></decl>;</decl_stmt>
}</block>;</struct>

<macro><name>UNITTEST_START</name></macro>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>curltime</name></name></type> <name>now</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>timetest</name></name></type> <name><name>run</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{<expr><name>BASE</name> <operator>+</operator> <literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">10000</literal></expr>, <expr><literal type="number">8000</literal></expr>, <expr><name>FALSE</name></expr>, <expr><literal type="number">6000</literal></expr>, <expr><literal type="string">"6 seconds should be left"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>BASE</name> <operator>+</operator> <literal type="number">4</literal></expr>, <expr><literal type="number">990000</literal></expr>, <expr><literal type="number">10000</literal></expr>, <expr><literal type="number">8000</literal></expr>, <expr><name>FALSE</name></expr>, <expr><literal type="number">5010</literal></expr>, <expr><literal type="string">"5010 ms should be left"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>BASE</name> <operator>+</operator> <literal type="number">10</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">10000</literal></expr>, <expr><literal type="number">8000</literal></expr>, <expr><name>FALSE</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="string">"timeout is -1, expired"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>BASE</name> <operator>+</operator> <literal type="number">12</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">10000</literal></expr>, <expr><literal type="number">8000</literal></expr>, <expr><name>FALSE</name></expr>, <expr><operator>-</operator><literal type="number">2000</literal></expr>, <expr><literal type="string">"-2000, overdue 2 seconds"</literal></expr>}</block></expr>,


<expr><block>{<expr><name>BASE</name> <operator>+</operator> <literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">10000</literal></expr>, <expr><literal type="number">8000</literal></expr>, <expr><name>TRUE</name></expr>, <expr><literal type="number">4000</literal></expr>, <expr><literal type="string">"4 seconds should be left"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>BASE</name> <operator>+</operator> <literal type="number">4</literal></expr>, <expr><literal type="number">990000</literal></expr>, <expr><literal type="number">10000</literal></expr>, <expr><literal type="number">8000</literal></expr>, <expr><name>TRUE</name></expr>, <expr><literal type="number">3010</literal></expr>, <expr><literal type="string">"3010 ms should be left"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>BASE</name> <operator>+</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">10000</literal></expr>, <expr><literal type="number">8000</literal></expr>, <expr><name>TRUE</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="string">"timeout is -1, expired"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>BASE</name> <operator>+</operator> <literal type="number">10</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">10000</literal></expr>, <expr><literal type="number">8000</literal></expr>, <expr><name>TRUE</name></expr>, <expr><operator>-</operator><literal type="number">2000</literal></expr>, <expr><literal type="string">"-2000, overdue 2 seconds"</literal></expr>}</block></expr>,


<expr><block>{<expr><name>BASE</name> <operator>+</operator> <literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">10000</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FALSE</name></expr>, <expr><literal type="number">6000</literal></expr>, <expr><literal type="string">"6 seconds should be left"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>BASE</name> <operator>+</operator> <literal type="number">4</literal></expr>, <expr><literal type="number">990000</literal></expr>, <expr><literal type="number">10000</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FALSE</name></expr>, <expr><literal type="number">5010</literal></expr>, <expr><literal type="string">"5010 ms should be left"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>BASE</name> <operator>+</operator> <literal type="number">10</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">10000</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FALSE</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="string">"timeout is -1, expired"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>BASE</name> <operator>+</operator> <literal type="number">12</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">10000</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FALSE</name></expr>, <expr><operator>-</operator><literal type="number">2000</literal></expr>, <expr><literal type="string">"-2000, overdue 2 seconds"</literal></expr>}</block></expr>,


<expr><block>{<expr><name>BASE</name> <operator>+</operator> <literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">10000</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FALSE</name></expr>, <expr><literal type="number">6000</literal></expr>, <expr><literal type="string">"6 seconds should be left"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>BASE</name> <operator>+</operator> <literal type="number">4</literal></expr>, <expr><literal type="number">990000</literal></expr>, <expr><literal type="number">10000</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FALSE</name></expr>, <expr><literal type="number">5010</literal></expr>, <expr><literal type="string">"5010 ms should be left"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>BASE</name> <operator>+</operator> <literal type="number">10</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">10000</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FALSE</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="string">"timeout is -1, expired"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>BASE</name> <operator>+</operator> <literal type="number">12</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">10000</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FALSE</name></expr>, <expr><operator>-</operator><literal type="number">2000</literal></expr>, <expr><literal type="string">"-2000, overdue 2 seconds"</literal></expr>}</block></expr>,


<expr><block>{<expr><name>BASE</name> <operator>+</operator> <literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">10000</literal></expr>, <expr><name>FALSE</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"no timeout active"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>BASE</name> <operator>+</operator> <literal type="number">4</literal></expr>, <expr><literal type="number">990000</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">10000</literal></expr>, <expr><name>FALSE</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"no timeout active"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>BASE</name> <operator>+</operator> <literal type="number">10</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">10000</literal></expr>, <expr><name>FALSE</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"no timeout active"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>BASE</name> <operator>+</operator> <literal type="number">12</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">10000</literal></expr>, <expr><name>FALSE</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"no timeout active"</literal></expr>}</block></expr>,


<expr><block>{<expr><name>BASE</name> <operator>+</operator> <literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">10000</literal></expr>, <expr><name>TRUE</name></expr>, <expr><literal type="number">6000</literal></expr>, <expr><literal type="string">"6 seconds should be left"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>BASE</name> <operator>+</operator> <literal type="number">4</literal></expr>, <expr><literal type="number">990000</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">10000</literal></expr>, <expr><name>TRUE</name></expr>, <expr><literal type="number">5010</literal></expr>, <expr><literal type="string">"5010 ms should be left"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>BASE</name> <operator>+</operator> <literal type="number">10</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">10000</literal></expr>, <expr><name>TRUE</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="string">"timeout is -1, expired"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>BASE</name> <operator>+</operator> <literal type="number">12</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">10000</literal></expr>, <expr><name>TRUE</name></expr>, <expr><operator>-</operator><literal type="number">2000</literal></expr>, <expr><literal type="string">"-2000, overdue 2 seconds"</literal></expr>}</block></expr>,


<expr><block>{<expr><name>BASE</name> <operator>+</operator> <literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FALSE</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"no timeout active"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>BASE</name> <operator>+</operator> <literal type="number">4</literal></expr>, <expr><literal type="number">990000</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FALSE</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"no timeout active"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>BASE</name> <operator>+</operator> <literal type="number">10</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FALSE</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"no timeout active"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>BASE</name> <operator>+</operator> <literal type="number">12</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FALSE</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"no timeout active"</literal></expr>}</block></expr>,


<expr><block>{<expr><name>BASE</name> <operator>+</operator> <literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>TRUE</name></expr>, <expr><literal type="number">296000</literal></expr>, <expr><literal type="string">"no timeout active"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>BASE</name> <operator>+</operator> <literal type="number">4</literal></expr>, <expr><literal type="number">990000</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>TRUE</name></expr>, <expr><literal type="number">295010</literal></expr>, <expr><literal type="string">"no timeout active"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>BASE</name> <operator>+</operator> <literal type="number">10</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>TRUE</name></expr>, <expr><literal type="number">290000</literal></expr>, <expr><literal type="string">"no timeout active"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>BASE</name> <operator>+</operator> <literal type="number">12</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>TRUE</name></expr>, <expr><literal type="number">288000</literal></expr>, <expr><literal type="string">"no timeout active"</literal></expr>}</block></expr>,


<expr><block>{<expr><name>BASE</name> <operator>+</operator> <literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">10000</literal></expr>, <expr><literal type="number">12000</literal></expr>, <expr><name>TRUE</name></expr>, <expr><literal type="number">6000</literal></expr>, <expr><literal type="string">"6 seconds should be left"</literal></expr>}</block></expr>,

}</block></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>progress</name><operator>.</operator><name>t_startsingle</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <name>BASE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>progress</name><operator>.</operator><name>t_startsingle</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>progress</name><operator>.</operator><name>t_startop</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <name>BASE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>progress</name><operator>.</operator><name>t_startop</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>run</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>run</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>timediff_t</name></type> <name>timeout</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>NOW</name><argument_list>(<argument><expr><name><name>run</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>now_s</name></expr></argument>, <argument><expr><name><name>run</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>now_us</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TIMEOUTS</name><argument_list>(<argument><expr><name><name>run</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>timeout_ms</name></expr></argument>, <argument><expr><name><name>run</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>connecttimeout_ms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>timeout</name> <operator>=</operator> <call><name>Curl_timeleft</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>now</name></expr></argument>, <argument><expr><name><name>run</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>connecting</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>timeout</name> <operator>!=</operator> <name><name>run</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><name><name>run</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>comment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block>
<expr><name>UNITTEST_STOP</name></expr>
</unit>
