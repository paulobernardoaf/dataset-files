<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\curl-analysis\_cppstats_featurelocations\curl\tests\server\getpart.c">




















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"server_setup.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"getpart.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENABLE_CURLX_PRINTF</name></cpp:macro></cpp:define>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curlx.h"</cpp:file></cpp:include> 


<struct>struct <name>Curl_easy</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>fake</name></decl>;</decl_stmt>
}</block>;</struct>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_base64.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_memory.h"</cpp:file></cpp:include>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memdebug.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EAT_SPACE</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>while(*(p) &amp;&amp; ISSPACE(*(p))) (p)++</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EAT_WORD</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>while(*(p) &amp;&amp; !ISSPACE(*(p)) &amp;&amp; ('&gt;' != *(p))) (p)++</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG_GETPART</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>show</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>printf x</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>show</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>Curl_nop_stmt</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_DLL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name><name>(</name><name>disable</name><name>:</name><name>4232</name><name>)</name></cpp:pragma> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>curl_malloc_callback</name></type> <name>Curl_cmalloc</name> <init>= <expr><operator>(</operator><name>curl_malloc_callback</name><operator>)</operator><name>malloc</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>curl_free_callback</name></type> <name>Curl_cfree</name> <init>= <expr><operator>(</operator><name>curl_free_callback</name><operator>)</operator><name>free</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>curl_realloc_callback</name></type> <name>Curl_crealloc</name> <init>= <expr><operator>(</operator><name>curl_realloc_callback</name><operator>)</operator><name>realloc</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>curl_strdup_callback</name></type> <name>Curl_cstrdup</name> <init>= <expr><operator>(</operator><name>curl_strdup_callback</name><operator>)</operator><name>strdup</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>curl_calloc_callback</name></type> <name>Curl_ccalloc</name> <init>= <expr><operator>(</operator><name>curl_calloc_callback</name><operator>)</operator><name>calloc</name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>UNICODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>curl_wcsdup_callback</name></type> <name>Curl_cwcsdup</name> <init>= <expr><operator>(</operator><name>curl_wcsdup_callback</name><operator>)</operator><name>_wcsdup</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_DLL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name><name>(</name><name>default</name><name>:</name><name>4232</name><name>)</name></cpp:pragma> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>









<function_decl><type><name>CURLcode</name></type> <name>Curl_convert_clone</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>indata</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>insize</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>outbuf</name></decl></parameter>)</parameter_list>;</function_decl>
<function><type><name>CURLcode</name></type> <name>Curl_convert_clone</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>indata</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>insize</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>outbuf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>convbuf</name></decl>;</decl_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>data</name></expr>;</expr_stmt>

<expr_stmt><expr><name>convbuf</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>insize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>convbuf</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>convbuf</name></expr></argument>, <argument><expr><name>indata</name></expr></argument>, <argument><expr><name>insize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>outbuf</name> <operator>=</operator> <name>convbuf</name></expr>;</expr_stmt>
<return>return <expr><name>CURLE_OK</name></expr>;</return>
</block_content>}</block></function>



















<function><type><specifier>static</specifier> <name>int</name></type> <name>readline</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>bufsize</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>newptr</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>*</operator><name>buffer</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>buffer</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>*</operator><name>buffer</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>GPE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>bufsize</name> <operator>=</operator> <literal type="number">128</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<for>for<control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>length</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bytestoread</name> <init>= <expr><call><name>curlx_uztosi</name><argument_list>(<argument><expr><operator>*</operator><name>bufsize</name> <operator>-</operator> <name>offset</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>fgets</name><argument_list>(<argument><expr><operator>*</operator><name>buffer</name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><name>bytestoread</name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><ternary><condition><expr><operator>(</operator><name>offset</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>GPE_OK</name></expr> </then><else>: <expr><name>GPE_END_OF_FILE</name></expr></else></ternary></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>length</name> <operator>=</operator> <name>offset</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><operator>*</operator><name>buffer</name> <operator>+</operator> <name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>*</operator><operator>(</operator><operator>*</operator><name>buffer</name> <operator>+</operator> <name>length</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <name>length</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>length</name> <operator>&lt;</operator> <operator>*</operator><name>bufsize</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>newptr</name> <operator>=</operator> <call><name>realloc</name><argument_list>(<argument><expr><operator>*</operator><name>buffer</name></expr></argument>, <argument><expr><operator>*</operator><name>bufsize</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>newptr</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>GPE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>buffer</name> <operator>=</operator> <name>newptr</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>bufsize</name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><name>GPE_OK</name></expr>;</return>
</block_content>}</block></function>



























<function><type><specifier>static</specifier> <name>int</name></type> <name>appenddata</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>dst_buf</name></decl></parameter>, 
<parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>dst_len</name></decl></parameter>, 
<parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>dst_alloc</name></decl></parameter>, 
<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>src_buf</name></decl></parameter>, 
<parameter><decl><type><name>int</name></type> <name>src_b64</name></decl></parameter>)</parameter_list> 
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>need_alloc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>src_len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>src_buf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>src_len</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>GPE_OK</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>need_alloc</name> <operator>=</operator> <name>src_len</name> <operator>+</operator> <operator>*</operator><name>dst_len</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>src_b64</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>src_buf</name><index>[<expr><name>src_len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\r'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>src_len</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>src_buf</name><index>[<expr><name>src_len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>src_len</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>(<expr><name>need_alloc</name> <operator>&gt;</operator> <operator>*</operator><name>dst_alloc</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>newsize</name> <init>= <expr><name>need_alloc</name> <operator>*</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>newptr</name> <init>= <expr><call><name>realloc</name><argument_list>(<argument><expr><operator>*</operator><name>dst_buf</name></expr></argument>, <argument><expr><name>newsize</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>newptr</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>GPE_OUT_OF_MEMORY</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>dst_alloc</name> <operator>=</operator> <name>newsize</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dst_buf</name> <operator>=</operator> <name>newptr</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>*</operator><name>dst_buf</name> <operator>+</operator> <operator>*</operator><name>dst_len</name></expr></argument>, <argument><expr><name>src_buf</name></expr></argument>, <argument><expr><name>src_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dst_len</name> <operator>+=</operator> <name>src_len</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>*</operator><name>dst_buf</name> <operator>+</operator> <operator>*</operator><name>dst_len</name><operator>)</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<return>return <expr><name>GPE_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decodedata</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>buf</name></decl></parameter>, 
<parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>len</name></decl></parameter>)</parameter_list> 
<block>{<block_content>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>error</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf64</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>src_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>*</operator><name>len</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>GPE_OK</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>Curl_base64_decode</name><argument_list>(<argument><expr><operator>*</operator><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf64</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>src_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>error</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>GPE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>src_len</name></expr>)</condition> <block>{<block_content>






<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buf64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>GPE_OUT_OF_MEMORY</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>*</operator><name>buf</name></expr></argument>, <argument><expr><name>buf64</name></expr></argument>, <argument><expr><name>src_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>len</name> <operator>=</operator> <name>src_len</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>*</operator><name>buf</name> <operator>+</operator> <name>src_len</name><operator>)</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buf64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>GPE_OK</name></expr>;</return>
</block_content>}</block></function>























<decl_stmt><decl><type><name>int</name></type> <name>getpart</name><argument_list>(<argument><expr><name>char</name> <operator>*</operator><operator>*</operator><name>outbuf</name></expr></argument>, <argument><expr><name>size_t</name> <operator>*</operator><name>outlen</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator>main</expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>sub</name></expr></argument>, <argument><expr><name>FILE</name> <operator>*</operator><name>stream</name></expr></argument>)</argument_list>
<block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_TAG_LEN</name></cpp:macro> <cpp:value>79</cpp:value></cpp:define>
<decl_stmt><decl><type><name>char</name></type> <name><name>couter</name><index>[<expr><name>MAX_TAG_LEN</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name></type> <name><name>cmain</name><index>[<expr><name>MAX_TAG_LEN</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name></type> <name><name>csub</name><index>[<expr><name>MAX_TAG_LEN</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name></type> <name><name>ptag</name><index>[<expr><name>MAX_TAG_LEN</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name></type> <name><name>patt</name><index>[<expr><name>MAX_TAG_LEN</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>
<union>union <block>{
<decl_stmt><decl><type><name>ssize_t</name></type> <name>sig</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>uns</name></decl>;</decl_stmt>
}</block> <decl><name>len</name></decl>;</union>
<decl_stmt><decl><type><name>size_t</name></type> <name>bufsize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>outalloc</name> <init>= <expr><literal type="number">256</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>in_wanted_part</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>base64</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>error</name></decl>;</decl_stmt>

<enum>enum <block>{
<decl><name>STATE_OUTSIDE</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>STATE_OUTER</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>STATE_INMAIN</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>STATE_INSUB</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,
<decl><name>STATE_ILLEGAL</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>
}</block> <decl><name>state</name> <init>= <expr><name>STATE_OUTSIDE</name></expr></init></decl>;</enum>

<expr_stmt><expr><operator>*</operator><name>outlen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>outbuf</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>outalloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>*</operator><name>outbuf</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>GPE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>*</operator><name>outbuf</name><operator>)</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>couter</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>cmain</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>csub</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>ptag</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>patt</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<while>while<condition>(<expr><operator>(</operator><name>error</name> <operator>=</operator> <call><name>readline</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bufsize</name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>GPE_OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>buffer</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EAT_SPACE</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><literal type="char">'&lt;'</literal> <operator>!=</operator> <operator>*</operator><name>ptr</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>in_wanted_part</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>show</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"=&gt; %s"</literal><operator>,</operator> <name>buffer</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>appenddata</name><argument_list>(<argument><expr><name>outbuf</name></expr></argument>, <argument><expr><name>outlen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>outalloc</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>base64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>error</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><literal type="char">'/'</literal> <operator>==</operator> <operator>*</operator><name>ptr</name></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>end</name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EAT_WORD</name><argument_list>(<argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>len</name><operator>.</operator><name>sig</name></name> <operator>=</operator> <name>end</name> <operator>-</operator> <name>ptr</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>len</name><operator>.</operator><name>sig</name></name> <operator>&gt;</operator> <name>MAX_TAG_LEN</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>error</name> <operator>=</operator> <name>GPE_NO_BUFFER_SPACE</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>ptag</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name><name>len</name><operator>.</operator><name>uns</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ptag</name><index>[<expr><name><name>len</name><operator>.</operator><name>uns</name></name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>STATE_INSUB</name> <operator>==</operator> <name>state</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>csub</name></expr></argument>, <argument><expr><name>ptag</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>state</name> <operator>=</operator> <name>STATE_INMAIN</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>csub</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>in_wanted_part</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>in_wanted_part</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<if_stmt><if>if<condition>(<expr><name>base64</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>decodedata</name><argument_list>(<argument><expr><name>outbuf</name></expr></argument>, <argument><expr><name>outlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>error</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>error</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><operator>(</operator><name>STATE_INMAIN</name> <operator>==</operator> <name>state</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>cmain</name></expr></argument>, <argument><expr><name>ptag</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>state</name> <operator>=</operator> <name>STATE_OUTER</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cmain</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>in_wanted_part</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>in_wanted_part</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<if_stmt><if>if<condition>(<expr><name>base64</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>decodedata</name><argument_list>(<argument><expr><name>outbuf</name></expr></argument>, <argument><expr><name>outlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>error</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>error</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><operator>(</operator><name>STATE_OUTER</name> <operator>==</operator> <name>state</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>couter</name></expr></argument>, <argument><expr><name>ptag</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>state</name> <operator>=</operator> <name>STATE_OUTSIDE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>couter</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>in_wanted_part</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>in_wanted_part</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><operator>!</operator><name>in_wanted_part</name></expr>)</condition> <block>{<block_content>





<expr_stmt><expr><name>end</name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EAT_WORD</name><argument_list>(<argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>len</name><operator>.</operator><name>sig</name></name> <operator>=</operator> <name>end</name> <operator>-</operator> <name>ptr</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>len</name><operator>.</operator><name>sig</name></name> <operator>&gt;</operator> <name>MAX_TAG_LEN</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>error</name> <operator>=</operator> <name>GPE_NO_BUFFER_SPACE</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>ptag</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name><name>len</name><operator>.</operator><name>uns</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ptag</name><index>[<expr><name><name>len</name><operator>.</operator><name>uns</name></name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>


<if_stmt><if>if<condition>(<expr><operator>(</operator><literal type="char">'!'</literal> <operator>==</operator> <name><name>ptag</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>||</operator> <operator>(</operator><literal type="char">'?'</literal> <operator>==</operator> <name><name>ptag</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>show</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"* ignoring (%s)"</literal><operator>,</operator> <name>buffer</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>end</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EAT_SPACE</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>end</name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>
<while>while<condition>(<expr><operator>*</operator><name>end</name> <operator>&amp;&amp;</operator> <operator>(</operator><literal type="char">'&gt;'</literal> <operator>!=</operator> <operator>*</operator><name>end</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>end</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><name><name>len</name><operator>.</operator><name>sig</name></name> <operator>=</operator> <name>end</name> <operator>-</operator> <name>ptr</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>len</name><operator>.</operator><name>sig</name></name> <operator>&gt;</operator> <name>MAX_TAG_LEN</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>error</name> <operator>=</operator> <name>GPE_NO_BUFFER_SPACE</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>patt</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name><name>len</name><operator>.</operator><name>uns</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>patt</name><index>[<expr><name><name>len</name><operator>.</operator><name>uns</name></name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>STATE_OUTSIDE</name> <operator>==</operator> <name>state</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>couter</name></expr></argument>, <argument><expr><name>ptag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>state</name> <operator>=</operator> <name>STATE_OUTER</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><name>STATE_OUTER</name> <operator>==</operator> <name>state</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>cmain</name></expr></argument>, <argument><expr><name>ptag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>state</name> <operator>=</operator> <name>STATE_INMAIN</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><name>STATE_INMAIN</name> <operator>==</operator> <name>state</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>csub</name></expr></argument>, <argument><expr><name>ptag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>state</name> <operator>=</operator> <name>STATE_INSUB</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>cmain</name></expr></argument>, <argument><expr>main</expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>csub</name></expr></argument>, <argument><expr><name>sub</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>in_wanted_part</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><call><name>strstr</name><argument_list>(<argument><expr><name>patt</name></expr></argument>, <argument><expr><literal type="string">"base64="</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>


<expr_stmt><expr><name>base64</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>in_wanted_part</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>show</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"=&gt; %s"</literal><operator>,</operator> <name>buffer</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>appenddata</name><argument_list>(<argument><expr><name>outbuf</name></expr></argument>, <argument><expr><name>outlen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>outalloc</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>base64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>error</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

</block_content>}</block></while> 

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>error</name> <operator>!=</operator> <name>GPE_OK</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>error</name> <operator>==</operator> <name>GPE_END_OF_FILE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>error</name> <operator>=</operator> <name>GPE_OK</name></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>*</operator><name>outbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>outbuf</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>outlen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>error</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>
</unit>
