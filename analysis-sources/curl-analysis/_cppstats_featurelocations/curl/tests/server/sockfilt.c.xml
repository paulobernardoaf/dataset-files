<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\curl-analysis\_cppstats_featurelocations\curl\tests\server\sockfilt.c">




















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"server_setup.h"</cpp:file></cpp:include>































































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SIGNAL_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;signal.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_NETINET_IN_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet/in.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_NETINET_IN6_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet/in6.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ARPA_INET_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;arpa/inet.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_NETDB_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netdb.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENABLE_CURLX_PRINTF</name></cpp:macro></cpp:define>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curlx.h"</cpp:file></cpp:include> 
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"getpart.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"inet_pton.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"server_sockaddr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"warnless.h"</cpp:file></cpp:include>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memdebug.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_WINSOCK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>EINTR</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EINTR</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define> 
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>EAGAIN</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EAGAIN</name></cpp:macro> <cpp:value>11</cpp:value></cpp:define> 
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ENOMEM</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENOMEM</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define> 
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>EINVAL</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EINVAL</name></cpp:macro> <cpp:value>22</cpp:value></cpp:define> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_PORT</name></cpp:macro> <cpp:value>8999</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DEFAULT_LOGFILE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_LOGFILE</name></cpp:macro> <cpp:value>"log/sockfilt.log"</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>serverlogfile</name> <init>= <expr><name>DEFAULT_LOGFILE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>verbose</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>bind_only</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_IPV6</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>use_ipv6</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ipv_inuse</name> <init>= <expr><literal type="string">"IPv4"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>short</name></type> <name>port</name> <init>= <expr><name>DEFAULT_PORT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>short</name></type> <name>connectport</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<enum>enum <name>sockmode</name> <block>{
<decl><name>PASSIVE_LISTEN</name></decl>, 
<decl><name>PASSIVE_CONNECT</name></decl>, 
<decl><name>ACTIVE</name></decl>, 
<decl><name>ACTIVE_DISCONNECT</name></decl> 
}</block>;</enum>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SIGINTERRUPT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>siginterrupt</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {} while(0)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<typedef>typedef <function_decl><type><name>RETSIGTYPE</name></type> (<modifier>*</modifier><name>SIGHANDLER_T</name>)<parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIGHUP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>SIGHANDLER_T</name></type> <name>old_sighup_handler</name> <init>= <expr><name>SIG_ERR</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIGPIPE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>SIGHANDLER_T</name></type> <name>old_sigpipe_handler</name> <init>= <expr><name>SIG_ERR</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIGALRM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>SIGHANDLER_T</name></type> <name>old_sigalrm_handler</name> <init>= <expr><name>SIG_ERR</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIGINT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>SIGHANDLER_T</name></type> <name>old_sigint_handler</name> <init>= <expr><name>SIG_ERR</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIGTERM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>SIGHANDLER_T</name></type> <name>old_sigterm_handler</name> <init>= <expr><name>SIG_ERR</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIGBREAK</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>SIGHANDLER_T</name></type> <name>old_sigbreak_handler</name> <init>= <expr><name>SIG_ERR</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<decl_stmt><decl><type><name>SIG_ATOMIC_T</name></type> <name>got_exit_signal</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>



<decl_stmt><decl><type><specifier>static</specifier> <specifier>volatile</specifier> <name>int</name></type> <name>exit_signal</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>






<function><type><specifier>static</specifier> <name>RETSIGTYPE</name></type> <name>exit_signal_handler</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>signum</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>old_errno</name> <init>= <expr><name>errno</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>got_exit_signal</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>got_exit_signal</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>exit_signal</name> <operator>=</operator> <name>signum</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>signal</name><argument_list>(<argument><expr><name>signum</name></expr></argument>, <argument><expr><name>exit_signal_handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>old_errno</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>install_signal_handlers</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIGHUP</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><name>old_sighup_handler</name> <operator>=</operator> <call><name>signal</name><argument_list>(<argument><expr><name>SIGHUP</name></expr></argument>, <argument><expr><name>SIG_IGN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>old_sighup_handler</name> <operator>==</operator> <name>SIG_ERR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"cannot install SIGHUP handler: %s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIGPIPE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><name>old_sigpipe_handler</name> <operator>=</operator> <call><name>signal</name><argument_list>(<argument><expr><name>SIGPIPE</name></expr></argument>, <argument><expr><name>SIG_IGN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>old_sigpipe_handler</name> <operator>==</operator> <name>SIG_ERR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"cannot install SIGPIPE handler: %s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIGALRM</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><name>old_sigalrm_handler</name> <operator>=</operator> <call><name>signal</name><argument_list>(<argument><expr><name>SIGALRM</name></expr></argument>, <argument><expr><name>SIG_IGN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>old_sigalrm_handler</name> <operator>==</operator> <name>SIG_ERR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"cannot install SIGALRM handler: %s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIGINT</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><name>old_sigint_handler</name> <operator>=</operator> <call><name>signal</name><argument_list>(<argument><expr><name>SIGINT</name></expr></argument>, <argument><expr><name>exit_signal_handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>old_sigint_handler</name> <operator>==</operator> <name>SIG_ERR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"cannot install SIGINT handler: %s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>siginterrupt</name><argument_list>(<argument><expr><name>SIGINT</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIGTERM</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><name>old_sigterm_handler</name> <operator>=</operator> <call><name>signal</name><argument_list>(<argument><expr><name>SIGTERM</name></expr></argument>, <argument><expr><name>exit_signal_handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>old_sigterm_handler</name> <operator>==</operator> <name>SIG_ERR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"cannot install SIGTERM handler: %s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>siginterrupt</name><argument_list>(<argument><expr><name>SIGTERM</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIGBREAK</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><name>old_sigbreak_handler</name> <operator>=</operator> <call><name>signal</name><argument_list>(<argument><expr><name>SIGBREAK</name></expr></argument>, <argument><expr><name>exit_signal_handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>old_sigbreak_handler</name> <operator>==</operator> <name>SIG_ERR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"cannot install SIGBREAK handler: %s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>siginterrupt</name><argument_list>(<argument><expr><name>SIGBREAK</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>restore_signal_handlers</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIGHUP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name>SIG_ERR</name> <operator>!=</operator> <name>old_sighup_handler</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>signal</name><argument_list>(<argument><expr><name>SIGHUP</name></expr></argument>, <argument><expr><name>old_sighup_handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIGPIPE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name>SIG_ERR</name> <operator>!=</operator> <name>old_sigpipe_handler</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>signal</name><argument_list>(<argument><expr><name>SIGPIPE</name></expr></argument>, <argument><expr><name>old_sigpipe_handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIGALRM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name>SIG_ERR</name> <operator>!=</operator> <name>old_sigalrm_handler</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>signal</name><argument_list>(<argument><expr><name>SIGALRM</name></expr></argument>, <argument><expr><name>old_sigalrm_handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIGINT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name>SIG_ERR</name> <operator>!=</operator> <name>old_sigint_handler</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>signal</name><argument_list>(<argument><expr><name>SIGINT</name></expr></argument>, <argument><expr><name>old_sigint_handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIGTERM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name>SIG_ERR</name> <operator>!=</operator> <name>old_sigterm_handler</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>signal</name><argument_list>(<argument><expr><name>SIGTERM</name></expr></argument>, <argument><expr><name>old_sigterm_handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIGBREAK</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name>SIG_ERR</name> <operator>!=</operator> <name>old_sigbreak_handler</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>signal</name><argument_list>(<argument><expr><name>SIGBREAK</name></expr></argument>, <argument><expr><name>old_sigbreak_handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>



<function><type><specifier>static</specifier> <name>ssize_t</name></type> <name>read_wincon</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>HANDLE</name></type> <name>handle</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>mode</name></decl>, <decl><type ref="prev"/><name>rcount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BOOL</name></type> <name>success</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>fd</name> <operator>==</operator> <call><name>fileno</name><argument_list>(<argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>handle</name> <operator>=</operator> <call><name>GetStdHandle</name><argument_list>(<argument><expr><name>STD_INPUT_HANDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<return>return <expr><call><name>read</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>GetConsoleMode</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mode</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>success</name> <operator>=</operator> <call><name>ReadConsole</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><call><name>curlx_uztoul</name><argument_list>(<argument><expr><name>count</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>rcount</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>success</name> <operator>=</operator> <call><name>ReadFile</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><call><name>curlx_uztoul</name><argument_list>(<argument><expr><name>count</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>rcount</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if<condition>(<expr><name>success</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>rcount</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>errno</name> <operator>=</operator> <call><name>GetLastError</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>read</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>read</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>read_wincon(a,b,c)</cpp:value></cpp:define>




<function><type><specifier>static</specifier> <name>ssize_t</name></type> <name>write_wincon</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>HANDLE</name></type> <name>handle</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>mode</name></decl>, <decl><type ref="prev"/><name>wcount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BOOL</name></type> <name>success</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>fd</name> <operator>==</operator> <call><name>fileno</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>handle</name> <operator>=</operator> <call><name>GetStdHandle</name><argument_list>(<argument><expr><name>STD_OUTPUT_HANDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><name>fd</name> <operator>==</operator> <call><name>fileno</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>handle</name> <operator>=</operator> <call><name>GetStdHandle</name><argument_list>(<argument><expr><name>STD_ERROR_HANDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<return>return <expr><call><name>write</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>GetConsoleMode</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mode</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>success</name> <operator>=</operator> <call><name>WriteConsole</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><call><name>curlx_uztoul</name><argument_list>(<argument><expr><name>count</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>wcount</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>success</name> <operator>=</operator> <call><name>WriteFile</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><call><name>curlx_uztoul</name><argument_list>(<argument><expr><name>count</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>wcount</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if<condition>(<expr><name>success</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>wcount</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>errno</name> <operator>=</operator> <call><name>GetLastError</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>write</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>write</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>write_wincon(a,b,c)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>








<function><type><specifier>static</specifier> <name>ssize_t</name></type> <name>fullread</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>filedes</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>nbytes</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>error</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>nread</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<do>do <block>{<block_content>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>rc</name> <init>= <expr><call><name>read</name><argument_list>(<argument><expr><name>filedes</name></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>buffer</name> <operator>+</operator> <name>nread</name></expr></argument>, <argument><expr><name>nbytes</name> <operator>-</operator> <name>nread</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>got_exit_signal</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"signalled to die"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>error</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>(</operator><name>error</name> <operator>==</operator> <name>EINTR</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>error</name> <operator>==</operator> <name>EAGAIN</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"reading from file descriptor: %d,"</literal></expr></argument>, <argument><expr><name>filedes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"unrecoverable read() failure: (%d) %s"</literal></expr></argument>,
<argument><expr><name>error</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>error</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"got 0 reading from stdin"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>nread</name> <operator>+=</operator> <name>rc</name></expr>;</expr_stmt>

</block_content>}</block> while<condition>(<expr><operator>(</operator><name>size_t</name><operator>)</operator><name>nread</name> <operator>&lt;</operator> <name>nbytes</name></expr>)</condition>;</do>

<if_stmt><if>if<condition>(<expr><name>verbose</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"read %zd bytes"</literal></expr></argument>, <argument><expr><name>nread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>nread</name></expr>;</return>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>ssize_t</name></type> <name>fullwrite</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>filedes</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>nbytes</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>error</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>nwrite</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<do>do <block>{<block_content>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>wc</name> <init>= <expr><call><name>write</name><argument_list>(<argument><expr><name>filedes</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>buffer</name> <operator>+</operator> <name>nwrite</name></expr></argument>,
<argument><expr><name>nbytes</name> <operator>-</operator> <name>nwrite</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>got_exit_signal</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"signalled to die"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>wc</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>error</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>(</operator><name>error</name> <operator>==</operator> <name>EINTR</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>error</name> <operator>==</operator> <name>EAGAIN</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"writing to file descriptor: %d,"</literal></expr></argument>, <argument><expr><name>filedes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"unrecoverable write() failure: (%d) %s"</literal></expr></argument>,
<argument><expr><name>error</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>error</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>wc</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"put 0 writing to stdout"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>nwrite</name> <operator>+=</operator> <name>wc</name></expr>;</expr_stmt>

</block_content>}</block> while<condition>(<expr><operator>(</operator><name>size_t</name><operator>)</operator><name>nwrite</name> <operator>&lt;</operator> <name>nbytes</name></expr>)</condition>;</do>

<if_stmt><if>if<condition>(<expr><name>verbose</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"wrote %zd bytes"</literal></expr></argument>, <argument><expr><name>nwrite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>nwrite</name></expr>;</return>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>bool</name></type> <name>read_stdin</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>nbytes</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>nread</name> <init>= <expr><call><name>fullread</name><argument_list>(<argument><expr><call><name>fileno</name><argument_list>(<argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>nbytes</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>nread</name> <operator>!=</operator> <operator>(</operator><name>ssize_t</name><operator>)</operator><name>nbytes</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"exiting..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>bool</name></type> <name>write_stdout</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>nbytes</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>nwrite</name> <init>= <expr><call><name>fullwrite</name><argument_list>(<argument><expr><call><name>fileno</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>nbytes</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>nwrite</name> <operator>!=</operator> <operator>(</operator><name>ssize_t</name><operator>)</operator><name>nbytes</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"exiting..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>lograw</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>data</name><index>[<expr><literal type="number">120</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name>buffer</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>optr</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>width</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>left</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<switch>switch<condition>(<expr><name><name>ptr</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'\n'</literal></expr>:</case>
<expr_stmt><expr><call><name>msnprintf</name><argument_list>(<argument><expr><name>optr</name></expr></argument>, <argument><expr><name>left</name></expr></argument>, <argument><expr><literal type="string">"\\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>width</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>optr</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>left</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'\r'</literal></expr>:</case>
<expr_stmt><expr><call><name>msnprintf</name><argument_list>(<argument><expr><name>optr</name></expr></argument>, <argument><expr><name>left</name></expr></argument>, <argument><expr><literal type="string">"\\r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>width</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>optr</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>left</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>msnprintf</name><argument_list>(<argument><expr><name>optr</name></expr></argument>, <argument><expr><name>left</name></expr></argument>, <argument><expr><literal type="string">"%c"</literal></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><call><name>ISGRAPH</name><argument_list>(<argument><expr><name><name>ptr</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>||</operator>
<name><name>ptr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">0x20</literal><operator>)</operator></expr> ?</condition><then><expr><name><name>ptr</name><index>[<expr><name>i</name></expr>]</index></name></expr></then><else>:<expr><literal type="char">'.'</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>width</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>optr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>left</name><operator>--</operator></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<if_stmt><if>if<condition>(<expr><name>width</name><operator>&gt;</operator><literal type="number">60</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"'%s'"</literal></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>width</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>optr</name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
<expr_stmt><expr><name>left</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if<condition>(<expr><name>width</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"'%s'"</literal></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_WINSOCK</name></expr></argument>)</argument_list></call></expr></cpp:if>












<struct>struct <name>select_ws_wait_data</name> <block>{
<decl_stmt><decl><type><name>HANDLE</name></type> <name>handle</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>HANDLE</name></type> <name>signal</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>HANDLE</name></type> <name>abort</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>HANDLE</name></type> <name>mutex</name></decl>;</decl_stmt> 
}</block>;</struct>
<function><type><specifier>static</specifier> <name>DWORD</name> <name>WINAPI</name></type> <name>select_ws_wait_thread</name><parameter_list>(<parameter><decl><type><name>LPVOID</name></type> <name>lpParameter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>select_ws_wait_data</name></name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HANDLE</name></type> <name>mutex</name></decl>, <decl><type ref="prev"/><name>signal</name></decl>, <decl><type ref="prev"/><name>handle</name></decl>, <decl><type ref="prev"/><name><name>handles</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>INPUT_RECORD</name></type> <name>inputrecord</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LARGE_INTEGER</name></type> <name>size</name></decl>, <decl><type ref="prev"/><name>pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>type</name></decl>, <decl><type ref="prev"/><name>length</name></decl>;</decl_stmt>


<expr_stmt><expr><name>data</name> <operator>=</operator> <operator>(</operator>struct <name>select_ws_wait_data</name> <operator>*</operator><operator>)</operator> <name>lpParameter</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>data</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>handle</name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>handle</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>handles</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>abort</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>handles</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>handle</name></expr>;</expr_stmt>
<expr_stmt><expr><name>signal</name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>signal</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>mutex</name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>mutex</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>DWORD</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></else></if_stmt>


<expr_stmt><expr><name>type</name> <operator>=</operator> <call><name>GetFileType</name><argument_list>(<argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch<condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>FILE_TYPE_DISK</name></expr>:</case>








<while>while<condition>(<expr><call><name>WaitForMultipleObjectsEx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>handles</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call>
<operator>==</operator> <name>WAIT_TIMEOUT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>length</name> <operator>=</operator> <call><name>WaitForSingleObjectEx</name><argument_list>(<argument><expr><name>mutex</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>length</name> <operator>==</operator> <name>WAIT_OBJECT_0</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>length</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>size</name><operator>.</operator><name>QuadPart</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>size</name><operator>.</operator><name>LowPart</name></name> <operator>=</operator> <call><name>GetFileSize</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>size</name><operator>.</operator><name>LowPart</name></name> <operator>!=</operator> <name>INVALID_FILE_SIZE</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><call><name>GetLastError</name><argument_list>()</argument_list></call> <operator>==</operator> <name>NO_ERROR</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>size</name><operator>.</operator><name>HighPart</name></name> <operator>=</operator> <name>length</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pos</name><operator>.</operator><name>QuadPart</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pos</name><operator>.</operator><name>LowPart</name></name> <operator>=</operator> <call><name>SetFilePointer</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pos</name><operator>.</operator><name>HighPart</name></name></expr></argument>,
<argument><expr><name>FILE_CURRENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>pos</name><operator>.</operator><name>LowPart</name></name> <operator>!=</operator> <name>INVALID_SET_FILE_POINTER</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><call><name>GetLastError</name><argument_list>()</argument_list></call> <operator>==</operator> <name>NO_ERROR</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>size</name><operator>.</operator><name>QuadPart</name></name> <operator>==</operator> <name><name>pos</name><operator>.</operator><name>QuadPart</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>SleepEx</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ReleaseMutex</name><argument_list>(<argument><expr><name>mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"[select_ws_wait_thread] data available, DISK: %p"</literal></expr></argument>, <argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetEvent</name><argument_list>(<argument><expr><name>signal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ReleaseMutex</name><argument_list>(<argument><expr><name>mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><name>length</name> <operator>==</operator> <name>WAIT_ABANDONED</name></expr>)</condition> <block>{<block_content>


<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<break>break;</break>

<case>case <expr><name>FILE_TYPE_CHAR</name></expr>:</case>







<while>while<condition>(<expr><call><name>WaitForMultipleObjectsEx</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>handles</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>INFINITE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call>
<operator>==</operator> <name>WAIT_OBJECT_0</name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>length</name> <operator>=</operator> <call><name>WaitForSingleObjectEx</name><argument_list>(<argument><expr><name>mutex</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>length</name> <operator>==</operator> <name>WAIT_OBJECT_0</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>length</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><call><name>GetConsoleMode</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>length</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>length</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><call><name>PeekConsoleInput</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>inputrecord</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>length</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>length</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>inputrecord</name><operator>.</operator><name>EventType</name></name> <operator>!=</operator> <name>KEY_EVENT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ReadConsoleInput</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>inputrecord</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ReleaseMutex</name><argument_list>(<argument><expr><name>mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"[select_ws_wait_thread] data available, CHAR: %p"</literal></expr></argument>, <argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetEvent</name><argument_list>(<argument><expr><name>signal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ReleaseMutex</name><argument_list>(<argument><expr><name>mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><name>length</name> <operator>==</operator> <name>WAIT_ABANDONED</name></expr>)</condition> <block>{<block_content>


<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<break>break;</break>

<case>case <expr><name>FILE_TYPE_PIPE</name></expr>:</case>







<while>while<condition>(<expr><call><name>WaitForMultipleObjectsEx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>handles</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call>
<operator>==</operator> <name>WAIT_TIMEOUT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>length</name> <operator>=</operator> <call><name>WaitForSingleObjectEx</name><argument_list>(<argument><expr><name>mutex</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>length</name> <operator>==</operator> <name>WAIT_OBJECT_0</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>length</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><call><name>PeekNamedPipe</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>length</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>length</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>SleepEx</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ReleaseMutex</name><argument_list>(<argument><expr><name>mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"[select_ws_wait_thread] PeekNamedPipe len: %d"</literal></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>

<expr_stmt><expr><name>length</name> <operator>=</operator> <call><name>GetLastError</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"[select_ws_wait_thread] PeekNamedPipe error: %d"</literal></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>length</name> <operator>==</operator> <name>ERROR_BROKEN_PIPE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>SleepEx</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ReleaseMutex</name><argument_list>(<argument><expr><name>mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"[select_ws_wait_thread] data available, PIPE: %p"</literal></expr></argument>, <argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetEvent</name><argument_list>(<argument><expr><name>signal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ReleaseMutex</name><argument_list>(<argument><expr><name>mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><name>length</name> <operator>==</operator> <name>WAIT_ABANDONED</name></expr>)</condition> <block>{<block_content>


<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<break>break;</break>

<default>default:</default>

<if_stmt><if>if<condition>(<expr><call><name>WaitForMultipleObjectsEx</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>handles</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>INFINITE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call>
<operator>==</operator> <name>WAIT_OBJECT_0</name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><call><name>WaitForSingleObjectEx</name><argument_list>(<argument><expr><name>mutex</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>WAIT_OBJECT_0</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"[select_ws_wait_thread] data available, HANDLE: %p"</literal></expr></argument>, <argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetEvent</name><argument_list>(<argument><expr><name>signal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ReleaseMutex</name><argument_list>(<argument><expr><name>mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></switch>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>HANDLE</name></type> <name>select_ws_wait</name><parameter_list>(<parameter><decl><type><name>HANDLE</name></type> <name>handle</name></decl></parameter>, <parameter><decl><type><name>HANDLE</name></type> <name>signal</name></decl></parameter>,
<parameter><decl><type><name>HANDLE</name></type> <name>abort</name></decl></parameter>, <parameter><decl><type><name>HANDLE</name></type> <name>mutex</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>select_ws_wait_data</name></name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HANDLE</name></type> <name>thread</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>select_ws_wait_data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>data</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>handle</name></name> <operator>=</operator> <name>handle</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>signal</name></name> <operator>=</operator> <name>signal</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>abort</name></name> <operator>=</operator> <name>abort</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>mutex</name></name> <operator>=</operator> <name>mutex</name></expr>;</expr_stmt>


<expr_stmt><expr><name>thread</name> <operator>=</operator> <call><name>CreateThread</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name>select_ws_wait_thread</name></expr></argument>,
<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if<condition>(<expr><operator>!</operator><name>thread</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>thread</name></expr>;</return>
</block_content>}</block></function>
<struct>struct <name>select_ws_data</name> <block>{
<decl_stmt><decl><type><name>WSANETWORKEVENTS</name></type> <name>pre</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>curl_socket_t</name></type> <name>fd</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>curl_socket_t</name></type> <name>wsasock</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>WSAEVENT</name></type> <name>wsaevent</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>HANDLE</name></type> <name>signal</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>HANDLE</name></type> <name>thread</name></decl>;</decl_stmt> 
}</block>;</struct>
<function><type><specifier>static</specifier> <name>int</name></type> <name>select_ws</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>nfds</name></decl></parameter>, <parameter><decl><type><name>fd_set</name> <modifier>*</modifier></type><name>readfds</name></decl></parameter>, <parameter><decl><type><name>fd_set</name> <modifier>*</modifier></type><name>writefds</name></decl></parameter>,
<parameter><decl><type><name>fd_set</name> <modifier>*</modifier></type><name>exceptfds</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>timeval</name></name> <modifier>*</modifier></type><name>tv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>HANDLE</name></type> <name>abort</name></decl>, <decl><type ref="prev"/><name>mutex</name></decl>, <decl><type ref="prev"/><name>signal</name></decl>, <decl><type ref="prev"/><name>handle</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>handles</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>fd_set</name></type> <name>readsock</name></decl>, <decl><type ref="prev"/><name>writesock</name></decl>, <decl><type ref="prev"/><name>exceptsock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>milliseconds</name></decl>, <decl><type ref="prev"/><name>wait</name></decl>, <decl><type ref="prev"/><name>idx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WSANETWORKEVENTS</name></type> <name>wsanetevents</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>select_ws_data</name></name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WSAEVENT</name></type> <name>wsaevent</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>error</name></decl>, <decl><type ref="prev"/><name>fds</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>nfd</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>thd</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>wsa</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<if_stmt><if>if<condition>(<expr><name>nfds</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>(<expr><name>tv</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>milliseconds</name> <operator>=</operator> <operator>(</operator><name><name>tv</name><operator>-&gt;</operator><name>tv_sec</name></name><operator>*</operator><literal type="number">1000</literal><operator>)</operator><operator>+</operator><operator>(</operator><name>DWORD</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>double</name><operator>)</operator><name><name>tv</name><operator>-&gt;</operator><name>tv_usec</name></name><operator>)</operator><operator>/</operator><literal type="number">1000.0</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>milliseconds</name> <operator>=</operator> <name>INFINITE</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<if_stmt><if>if<condition>(<expr><operator>!</operator><name>nfds</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>SleepEx</name><argument_list>(<argument><expr><name>milliseconds</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>abort</name> <operator>=</operator> <call><name>CreateEvent</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>abort</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ENOMEM</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>mutex</name> <operator>=</operator> <call><name>CreateMutex</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>mutex</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ENOMEM</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><name>nfds</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>select_ws_data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>data</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ENOMEM</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>handles</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><name>nfds</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>HANDLE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>handles</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ENOMEM</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>


<for>for<control>(<init><expr><name>fds</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>fds</name> <operator>&lt;</operator> <name>nfds</name></expr>;</condition> <incr><expr><name>fds</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>networkevents</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>handles</name><index>[<expr><name>nfd</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FD_ZERO</name><argument_list>(<argument><expr><operator>&amp;</operator><name>readsock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FD_ZERO</name><argument_list>(<argument><expr><operator>&amp;</operator><name>writesock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FD_ZERO</name><argument_list>(<argument><expr><operator>&amp;</operator><name>exceptsock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>FD_ISSET</name><argument_list>(<argument><expr><name>fds</name></expr></argument>, <argument><expr><name>readfds</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>FD_SET</name><argument_list>(<argument><expr><name>fds</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>readsock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>networkevents</name> <operator>|=</operator> <name>FD_READ</name><operator>|</operator><name>FD_ACCEPT</name><operator>|</operator><name>FD_CLOSE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>FD_ISSET</name><argument_list>(<argument><expr><name>fds</name></expr></argument>, <argument><expr><name>writefds</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>FD_SET</name><argument_list>(<argument><expr><name>fds</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>writesock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>networkevents</name> <operator>|=</operator> <name>FD_WRITE</name><operator>|</operator><name>FD_CONNECT</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>FD_ISSET</name><argument_list>(<argument><expr><name>fds</name></expr></argument>, <argument><expr><name>exceptfds</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>FD_SET</name><argument_list>(<argument><expr><name>fds</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>exceptsock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>networkevents</name> <operator>|=</operator> <name>FD_OOB</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>(<expr><name>networkevents</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>data</name><index>[<expr><name>nfd</name></expr>]</index></name><operator>.</operator><name>fd</name> <operator>=</operator> <call><name>curlx_sitosk</name><argument_list>(<argument><expr><name>fds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>fds</name> <operator>==</operator> <call><name>fileno</name><argument_list>(<argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>handle</name> <operator>=</operator> <call><name>GetStdHandle</name><argument_list>(<argument><expr><name>STD_INPUT_HANDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>signal</name> <operator>=</operator> <call><name>CreateEvent</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>signal</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>handle</name> <operator>=</operator> <call><name>select_ws_wait</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>signal</name></expr></argument>, <argument><expr><name>abort</name></expr></argument>, <argument><expr><name>mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>handle</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>handles</name><index>[<expr><name>nfd</name></expr>]</index></name> <operator>=</operator> <name>signal</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><index>[<expr><name>thd</name></expr>]</index></name><operator>.</operator><name>signal</name> <operator>=</operator> <name>signal</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><index>[<expr><name>thd</name></expr>]</index></name><operator>.</operator><name>thread</name> <operator>=</operator> <name>handle</name></expr>;</expr_stmt>
<expr_stmt><expr><name>thd</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>signal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><name>fds</name> <operator>==</operator> <call><name>fileno</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>handles</name><index>[<expr><name>nfd</name></expr>]</index></name> <operator>=</operator> <call><name>GetStdHandle</name><argument_list>(<argument><expr><name>STD_OUTPUT_HANDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><name>fds</name> <operator>==</operator> <call><name>fileno</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>handles</name><index>[<expr><name>nfd</name></expr>]</index></name> <operator>=</operator> <call><name>GetStdHandle</name><argument_list>(<argument><expr><name>STD_ERROR_HANDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>wsaevent</name> <operator>=</operator> <call><name>WSACreateEvent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>wsaevent</name> <operator>!=</operator> <name>WSA_INVALID_EVENT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>WSAEventSelect</name><argument_list>(<argument><expr><name>fds</name></expr></argument>, <argument><expr><name>wsaevent</name></expr></argument>, <argument><expr><name>networkevents</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>error</name> <operator>!=</operator> <name>SOCKET_ERROR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>handle</name> <operator>=</operator> <operator>(</operator><name>HANDLE</name><operator>)</operator> <name>wsaevent</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>handles</name><index>[<expr><name>nfd</name></expr>]</index></name> <operator>=</operator> <name>handle</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><index>[<expr><name>wsa</name></expr>]</index></name><operator>.</operator><name>wsasock</name> <operator>=</operator> <call><name>curlx_sitosk</name><argument_list>(<argument><expr><name>fds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><index>[<expr><name>wsa</name></expr>]</index></name><operator>.</operator><name>wsaevent</name> <operator>=</operator> <name>wsaevent</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><index>[<expr><name>nfd</name></expr>]</index></name><operator>.</operator><name><name>pre</name><operator>.</operator><name>lNetworkEvents</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tv</name><operator>-&gt;</operator><name>tv_sec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tv</name><operator>-&gt;</operator><name>tv_usec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>select</name><argument_list>(<argument><expr><name>fds</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>readsock</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>writesock</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>exceptsock</name></expr></argument>, <argument><expr><name>tv</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"[select_ws] socket %d is ready"</literal></expr></argument>, <argument><expr><name>fds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>WSASetEvent</name><argument_list>(<argument><expr><name>wsaevent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><call><name>FD_ISSET</name><argument_list>(<argument><expr><name>fds</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>readsock</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>data</name><index>[<expr><name>nfd</name></expr>]</index></name><operator>.</operator><name><name>pre</name><operator>.</operator><name>lNetworkEvents</name></name> <operator>|=</operator> <name>FD_READ</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><call><name>FD_ISSET</name><argument_list>(<argument><expr><name>fds</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>writesock</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>data</name><index>[<expr><name>nfd</name></expr>]</index></name><operator>.</operator><name><name>pre</name><operator>.</operator><name>lNetworkEvents</name></name> <operator>|=</operator> <name>FD_WRITE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><call><name>FD_ISSET</name><argument_list>(<argument><expr><name>fds</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>exceptsock</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>data</name><index>[<expr><name>nfd</name></expr>]</index></name><operator>.</operator><name><name>pre</name><operator>.</operator><name>lNetworkEvents</name></name> <operator>|=</operator> <name>FD_OOB</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>wsa</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><name>curl_socket_t</name></type> <name>socket</name> <init>= <expr><call><name>curlx_sitosk</name><argument_list>(<argument><expr><name>fds</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>WSACloseEvent</name><argument_list>(<argument><expr><name>wsaevent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>handle</name> <operator>=</operator> <operator>(</operator><name>HANDLE</name><operator>)</operator> <name>socket</name></expr>;</expr_stmt>
<expr_stmt><expr><name>signal</name> <operator>=</operator> <call><name>CreateEvent</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>signal</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>handle</name> <operator>=</operator> <call><name>select_ws_wait</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>signal</name></expr></argument>, <argument><expr><name>abort</name></expr></argument>, <argument><expr><name>mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>handle</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>handles</name><index>[<expr><name>nfd</name></expr>]</index></name> <operator>=</operator> <name>signal</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><index>[<expr><name>thd</name></expr>]</index></name><operator>.</operator><name>signal</name> <operator>=</operator> <name>signal</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><index>[<expr><name>thd</name></expr>]</index></name><operator>.</operator><name>thread</name> <operator>=</operator> <name>handle</name></expr>;</expr_stmt>
<expr_stmt><expr><name>thd</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>signal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>nfd</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>


<expr_stmt><expr><name>wait</name> <operator>=</operator> <call><name>WaitForMultipleObjectsEx</name><argument_list>(<argument><expr><name>nfd</name></expr></argument>, <argument><expr><name>handles</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>milliseconds</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>WaitForSingleObjectEx</name><argument_list>(<argument><expr><name>mutex</name></expr></argument>, <argument><expr><name>INFINITE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<for>for<control>(<init><expr><name>idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>idx</name> <operator>&lt;</operator> <name>nfd</name></expr>;</condition> <incr><expr><name>idx</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>curl_socket_t</name></type> <name>sock</name> <init>= <expr><name><name>data</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>fd</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>handle</name> <operator>=</operator> <name><name>handles</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>fds</name> <operator>=</operator> <call><name>curlx_sktosi</name><argument_list>(<argument><expr><name>sock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if<condition>(<expr><name>wait</name> <operator>!=</operator> <name>WAIT_FAILED</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>wait</name> <operator>-</operator> <name>WAIT_OBJECT_0</name><operator>)</operator> <operator>&lt;=</operator> <name>idx</name> <operator>&amp;&amp;</operator>
<call><name>WaitForSingleObjectEx</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>WAIT_OBJECT_0</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>fds</name> <operator>==</operator> <call><name>fileno</name><argument_list>(<argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>FD_CLR</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>writefds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FD_CLR</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>exceptfds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><name>fds</name> <operator>==</operator> <call><name>fileno</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>fds</name> <operator>==</operator> <call><name>fileno</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>FD_CLR</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>readfds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FD_CLR</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>exceptfds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>

<expr_stmt><expr><name><name>wsanetevents</name><operator>.</operator><name>lNetworkEvents</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>WSAEnumNetworkEvents</name><argument_list>(<argument><expr><name>fds</name></expr></argument>, <argument><expr><name>handle</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wsanetevents</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>error</name> <operator>!=</operator> <name>SOCKET_ERROR</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>wsanetevents</name><operator>.</operator><name>lNetworkEvents</name></name> <operator>|=</operator> <name><name>data</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name><name>pre</name><operator>.</operator><name>lNetworkEvents</name></name></expr>;</expr_stmt>


<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><name><name>wsanetevents</name><operator>.</operator><name>lNetworkEvents</name></name> <operator>&amp;</operator> <operator>(</operator><name>FD_READ</name><operator>|</operator><name>FD_ACCEPT</name><operator>|</operator><name>FD_CLOSE</name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>FD_CLR</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>readfds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><name><name>wsanetevents</name><operator>.</operator><name>lNetworkEvents</name></name> <operator>&amp;</operator> <operator>(</operator><name>FD_WRITE</name><operator>|</operator><name>FD_CONNECT</name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>FD_CLR</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>writefds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><name><name>wsanetevents</name><operator>.</operator><name>lNetworkEvents</name></name> <operator>&amp;</operator> <operator>(</operator><name>FD_OOB</name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>FD_CLR</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>exceptfds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>


<if_stmt><if>if<condition>(<expr><call><name>FD_ISSET</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>readfds</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>FD_ISSET</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>writefds</name></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>FD_ISSET</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>exceptfds</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>

<expr_stmt><expr><call><name>FD_CLR</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>readfds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FD_CLR</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>writefds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FD_CLR</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>exceptfds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>


<expr_stmt><expr><call><name>SetEvent</name><argument_list>(<argument><expr><name>abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>fds</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>fds</name> <operator>&lt;</operator> <name>nfds</name></expr>;</condition> <incr><expr><name>fds</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><call><name>FD_ISSET</name><argument_list>(<argument><expr><name>fds</name></expr></argument>, <argument><expr><name>readfds</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"[select_ws] %d is readable"</literal></expr></argument>, <argument><expr><name>fds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>FD_ISSET</name><argument_list>(<argument><expr><name>fds</name></expr></argument>, <argument><expr><name>writefds</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"[select_ws] %d is writable"</literal></expr></argument>, <argument><expr><name>fds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>FD_ISSET</name><argument_list>(<argument><expr><name>fds</name></expr></argument>, <argument><expr><name>exceptfds</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"[select_ws] %d is exceptional"</literal></expr></argument>, <argument><expr><name>fds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<for>for<control>(<init><expr><name>idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>idx</name> <operator>&lt;</operator> <name>wsa</name></expr>;</condition> <incr><expr><name>idx</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>WSAEventSelect</name><argument_list>(<argument><expr><name><name>data</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>wsasock</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>WSACloseEvent</name><argument_list>(<argument><expr><name><name>data</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>wsaevent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for<control>(<init><expr><name>idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>idx</name> <operator>&lt;</operator> <name>thd</name></expr>;</condition> <incr><expr><name>idx</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>WaitForSingleObjectEx</name><argument_list>(<argument><expr><name><name>data</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>thread</name></expr></argument>, <argument><expr><name>INFINITE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name><name>data</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>thread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name><name>data</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>signal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>handles</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>select</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>,<parameter><type><name>e</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>select_ws(a,b,c,d,e)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 







<function><type><specifier>static</specifier> <name>bool</name></type> <name>juggle</name><parameter_list>(<parameter><decl><type><name>curl_socket_t</name> <modifier>*</modifier></type><name>sockfdp</name></decl></parameter>,
<parameter><decl><type><name>curl_socket_t</name></type> <name>listenfd</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>sockmode</name></name> <modifier>*</modifier></type><name>mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>timeout</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>fd_set</name></type> <name>fds_read</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>fd_set</name></type> <name>fds_write</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>fd_set</name></type> <name>fds_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>curl_socket_t</name></type> <name>sockfd</name> <init>= <expr><name>CURL_SOCKET_BAD</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>maxfd</name> <init>= <expr><operator>-</operator><literal type="number">99</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>rc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>error</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>



<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buffer</name><index>[<expr><literal type="number">17010</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>data</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>got_exit_signal</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"signalled to die, exiting..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_GETPPID</name></expr></argument>)</argument_list></call></expr></cpp:if>


<if_stmt><if>if<condition>(<expr><call><name>getppid</name><argument_list>()</argument_list></call> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"process becomes orphan, exiting"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>timeout</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <literal type="number">120</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>timeout</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FD_ZERO</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fds_read</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FD_ZERO</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fds_write</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FD_ZERO</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fds_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FD_SET</name><argument_list>(<argument><expr><operator>(</operator><name>curl_socket_t</name><operator>)</operator><call><name>fileno</name><argument_list>(<argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>fds_read</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch<condition>(<expr><operator>*</operator><name>mode</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>PASSIVE_LISTEN</name></expr>:</case>


<expr_stmt><expr><name>sockfd</name> <operator>=</operator> <name>listenfd</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FD_SET</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fds_read</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>maxfd</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>sockfd</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>PASSIVE_CONNECT</name></expr>:</case>

<expr_stmt><expr><name>sockfd</name> <operator>=</operator> <operator>*</operator><name>sockfdp</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>CURL_SOCKET_BAD</name> <operator>==</operator> <name>sockfd</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"socket is -1! on %s:%d"</literal></expr></argument>, <argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>maxfd</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
</block_content>}</block></if>
<else>else <block>{<block_content>

<expr_stmt><expr><call><name>FD_SET</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fds_read</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>maxfd</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>sockfd</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>

<case>case <expr><name>ACTIVE</name></expr>:</case>

<expr_stmt><expr><name>sockfd</name> <operator>=</operator> <operator>*</operator><name>sockfdp</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>CURL_SOCKET_BAD</name> <operator>!=</operator> <name>sockfd</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>FD_SET</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fds_read</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>maxfd</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>sockfd</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"No socket to read on"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>maxfd</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>

<case>case <expr><name>ACTIVE_DISCONNECT</name></expr>:</case>

<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"disconnected, no socket to read on"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>maxfd</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>sockfd</name> <operator>=</operator> <name>CURL_SOCKET_BAD</name></expr>;</expr_stmt>
<break>break;</break>

</block_content>}</block></switch> 


<do>do <block>{<block_content>



<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>select</name><argument_list>(<argument><expr><name>maxfd</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>fds_read</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fds_write</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fds_err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>got_exit_signal</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"signalled to die, exiting..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></if></if_stmt>

</block_content>}</block> while<condition>(<expr><operator>(</operator><name>rc</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>error</name> <operator>=</operator> <name>errno</name><operator>)</operator> <operator>==</operator> <name>EINTR</name><operator>)</operator></expr>)</condition>;</do>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"select() failed with error: (%d) %s"</literal></expr></argument>,
<argument><expr><name>error</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>error</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if<condition>(<expr><call><name>FD_ISSET</name><argument_list>(<argument><expr><call><name>fileno</name><argument_list>(<argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>fds_read</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>buffer_len</name></decl>;</decl_stmt>















<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>read_stdin</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"Received %c%c%c%c (on stdin)"</literal></expr></argument>,
<argument><expr><name><name>buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>buffer</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>buffer</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>buffer</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><literal type="string">"PING"</literal></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>write_stdout</name><argument_list>(<argument><expr><literal type="string">"PONG\n"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><literal type="string">"PORT"</literal></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><call><name>msnprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s/%hu\n"</literal></expr></argument>, <argument><expr><name>ipv_inuse</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>buffer_len</name> <operator>=</operator> <operator>(</operator><name>ssize_t</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msnprintf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"PORT\n%04zx\n"</literal></expr></argument>, <argument><expr><name>buffer_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>write_stdout</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>write_stdout</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>buffer_len</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><literal type="string">"QUIT"</literal></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"quits"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><literal type="string">"DATA"</literal></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>


<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>read_stdin</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>buffer</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>buffer_len</name> <operator>=</operator> <operator>(</operator><name>ssize_t</name><operator>)</operator><call><name>strtol</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>buffer</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>buffer_len</name> <operator>&gt;</operator> <operator>(</operator><name>ssize_t</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"ERROR: Buffer size (%zu bytes) too small for data size "</literal>
<literal type="string">"(%zd bytes)"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>buffer_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"&gt; %zd bytes data, server =&gt; client"</literal></expr></argument>, <argument><expr><name>buffer_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>read_stdin</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>buffer_len</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>lograw</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>buffer_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>*</operator><name>mode</name> <operator>==</operator> <name>PASSIVE_LISTEN</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"*** We are disconnected!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>write_stdout</name><argument_list>(<argument><expr><literal type="string">"DISC\n"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>bytes_written</name> <init>= <expr><call><name>swrite</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>buffer_len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>bytes_written</name> <operator>!=</operator> <name>buffer_len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"Not all data was sent. Bytes to send: %zd sent: %zd"</literal></expr></argument>,
<argument><expr><name>buffer_len</name></expr></argument>, <argument><expr><name>bytes_written</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><literal type="string">"DISC"</literal></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>write_stdout</name><argument_list>(<argument><expr><literal type="string">"DISC\n"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>sockfd</name> <operator>!=</operator> <name>CURL_SOCKET_BAD</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"====&gt; Client forcibly disconnected"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sclose</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>sockfdp</name> <operator>=</operator> <name>CURL_SOCKET_BAD</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>*</operator><name>mode</name> <operator>==</operator> <name>PASSIVE_CONNECT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>mode</name> <operator>=</operator> <name>PASSIVE_LISTEN</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>mode</name> <operator>=</operator> <name>ACTIVE_DISCONNECT</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"attempt to close already dead connection"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>(<expr><operator>(</operator><name>sockfd</name> <operator>!=</operator> <name>CURL_SOCKET_BAD</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>FD_ISSET</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fds_read</name></expr></argument>)</argument_list></call><operator>)</operator></expr> )</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>nread_socket</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><operator>*</operator><name>mode</name> <operator>==</operator> <name>PASSIVE_LISTEN</name></expr>)</condition> <block>{<block_content>


<decl_stmt><decl><type><name>curl_socket_t</name></type> <name>newfd</name> <init>= <expr><call><name>accept</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>CURL_SOCKET_BAD</name> <operator>==</operator> <name>newfd</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>error</name> <operator>=</operator> <name>SOCKERRNO</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"accept(%d, NULL, NULL) failed with error: (%d) %s"</literal></expr></argument>,
<argument><expr><name>sockfd</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>error</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"====&gt; Client connect"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>write_stdout</name><argument_list>(<argument><expr><literal type="string">"CNCT\n"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>sockfdp</name> <operator>=</operator> <name>newfd</name></expr>;</expr_stmt> 
<expr_stmt><expr><operator>*</operator><name>mode</name> <operator>=</operator> <name>PASSIVE_CONNECT</name></expr>;</expr_stmt> 
</block_content>}</block></else></if_stmt>
<return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>nread_socket</name> <operator>=</operator> <call><name>sread</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>nread_socket</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msnprintf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"DATA\n%04zx\n"</literal></expr></argument>, <argument><expr><name>nread_socket</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>write_stdout</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>write_stdout</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>nread_socket</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"&lt; %zd bytes data, client =&gt; server"</literal></expr></argument>, <argument><expr><name>nread_socket</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lograw</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>nread_socket</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>nread_socket</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"====&gt; Client disconnect"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>write_stdout</name><argument_list>(<argument><expr><literal type="string">"DISC\n"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>sclose</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>sockfdp</name> <operator>=</operator> <name>CURL_SOCKET_BAD</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>*</operator><name>mode</name> <operator>==</operator> <name>PASSIVE_CONNECT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>mode</name> <operator>=</operator> <name>PASSIVE_LISTEN</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>mode</name> <operator>=</operator> <name>ACTIVE_DISCONNECT</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>curl_socket_t</name></type> <name>sockdaemon</name><parameter_list>(<parameter><decl><type><name>curl_socket_t</name></type> <name>sock</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>short</name> <modifier>*</modifier></type><name>listenport</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name>srvr_sockaddr_union_t</name></type> <name>listener</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>flag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>totdelay</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>maxretr</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>delay</name> <init>= <expr><literal type="number">20</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>attempt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>error</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<do>do <block>{<block_content>
<expr_stmt><expr><name>attempt</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>flag</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>setsockopt</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>SOL_SOCKET</name></expr></argument>, <argument><expr><name>SO_REUSEADDR</name></expr></argument>,
<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>flag</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>flag</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>error</name> <operator>=</operator> <name>SOCKERRNO</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"setsockopt(SO_REUSEADDR) failed with error: (%d) %s"</literal></expr></argument>,
<argument><expr><name>error</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>error</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>maxretr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>wait_ms</name><argument_list>(<argument><expr><name>delay</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>error</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"wait_ms() failed with error: (%d) %s"</literal></expr></argument>,
<argument><expr><name>error</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>error</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sclose</name><argument_list>(<argument><expr><name>sock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURL_SOCKET_BAD</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>got_exit_signal</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"signalled to die, exiting..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sclose</name><argument_list>(<argument><expr><name>sock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURL_SOCKET_BAD</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>totdelay</name> <operator>+=</operator> <name>delay</name></expr>;</expr_stmt>
<expr_stmt><expr><name>delay</name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block> while<condition>(<expr><name>rc</name> <operator>&amp;&amp;</operator> <name>maxretr</name><operator>--</operator></expr>)</condition>;</do>

<if_stmt><if>if<condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"setsockopt(SO_REUSEADDR) failed %d times in %d ms. Error: (%d) %s"</literal></expr></argument>,
<argument><expr><name>attempt</name></expr></argument>, <argument><expr><name>totdelay</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>error</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"Continuing anyway..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_IPV6</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>use_ipv6</name></expr>)</condition> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>listener</name><operator>.</operator><name>sa4</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>listener</name><operator>.</operator><name>sa4</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>listener</name><operator>.</operator><name>sa4</name><operator>.</operator><name>sin_family</name></name> <operator>=</operator> <name>AF_INET</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>listener</name><operator>.</operator><name>sa4</name><operator>.</operator><name>sin_addr</name><operator>.</operator><name>s_addr</name></name> <operator>=</operator> <name>INADDR_ANY</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>listener</name><operator>.</operator><name>sa4</name><operator>.</operator><name>sin_port</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><operator>*</operator><name>listenport</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>bind</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>listener</name><operator>.</operator><name>sa</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>listener</name><operator>.</operator><name>sa4</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_IPV6</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>listener</name><operator>.</operator><name>sa6</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>listener</name><operator>.</operator><name>sa6</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>listener</name><operator>.</operator><name>sa6</name><operator>.</operator><name>sin6_family</name></name> <operator>=</operator> <name>AF_INET6</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>listener</name><operator>.</operator><name>sa6</name><operator>.</operator><name>sin6_addr</name></name> <operator>=</operator> <name>in6addr_any</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>listener</name><operator>.</operator><name>sa6</name><operator>.</operator><name>sin6_port</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><operator>*</operator><name>listenport</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>bind</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>listener</name><operator>.</operator><name>sa</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>listener</name><operator>.</operator><name>sa6</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
<if_stmt><if>if<condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>error</name> <operator>=</operator> <name>SOCKERRNO</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"Error binding socket on port %hu: (%d) %s"</literal></expr></argument>,
<argument><expr><operator>*</operator><name>listenport</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>error</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sclose</name><argument_list>(<argument><expr><name>sock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURL_SOCKET_BAD</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>*</operator><name>listenport</name></expr>)</condition> <block>{<block_content>


<decl_stmt><decl><type><name>curl_socklen_t</name></type> <name>la_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>srvr_sockaddr_union_t</name></type> <name>localaddr</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_IPV6</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>use_ipv6</name></expr>)</condition><block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>la_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>localaddr</name><operator>.</operator><name>sa4</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt></block_content></block></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_IPV6</name></expr></argument>)</argument_list></call></expr></cpp:if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>la_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>localaddr</name><operator>.</operator><name>sa6</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>localaddr</name><operator>.</operator><name>sa</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>la_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><call><name>getsockname</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>localaddr</name><operator>.</operator><name>sa</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>la_size</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>error</name> <operator>=</operator> <name>SOCKERRNO</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"getsockname() failed with error: (%d) %s"</literal></expr></argument>,
<argument><expr><name>error</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>error</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sclose</name><argument_list>(<argument><expr><name>sock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURL_SOCKET_BAD</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<switch>switch<condition>(<expr><name><name>localaddr</name><operator>.</operator><name>sa</name><operator>.</operator><name>sa_family</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AF_INET</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>listenport</name> <operator>=</operator> <call><name>ntohs</name><argument_list>(<argument><expr><name><name>localaddr</name><operator>.</operator><name>sa4</name><operator>.</operator><name>sin_port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_IPV6</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>AF_INET6</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>listenport</name> <operator>=</operator> <call><name>ntohs</name><argument_list>(<argument><expr><name><name>localaddr</name><operator>.</operator><name>sa6</name><operator>.</operator><name>sin6_port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>*</operator><name>listenport</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"Apparently getsockname() succeeded, with listener port zero."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"A valid reason for this failure is a binary built without"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"proper network library linkage. This might not be the only"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"reason, but double check it before anything else."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sclose</name><argument_list>(<argument><expr><name>sock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURL_SOCKET_BAD</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>(<expr><name>bind_only</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"instructed to bind port without listening"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>sock</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>listen</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><literal type="number">0</literal> <operator>!=</operator> <name>rc</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>error</name> <operator>=</operator> <name>SOCKERRNO</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"listen(%d, 5) failed with error: (%d) %s"</literal></expr></argument>,
<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>error</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sclose</name><argument_list>(<argument><expr><name>sock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURL_SOCKET_BAD</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>sock</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>srvr_sockaddr_union_t</name></type> <name>me</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>curl_socket_t</name></type> <name>sock</name> <init>= <expr><name>CURL_SOCKET_BAD</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>curl_socket_t</name></type> <name>msgsock</name> <init>= <expr><name>CURL_SOCKET_BAD</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>wrotepidfile</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pidname</name> <init>= <expr><literal type="string">".sockfilt.pid"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>juggle_again</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>error</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>arg</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>sockmode</name></name></type> <name>mode</name> <init>= <expr><name>PASSIVE_LISTEN</name></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>addr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<while>while<condition>(<expr><name>argc</name><operator>&gt;</operator><name>arg</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"--version"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>arg</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"sockfilt IPv4%s\n"</literal></expr></argument>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_IPV6</name></expr></argument>)</argument_list></call></expr></cpp:if>
<argument><expr><literal type="string">"/IPv6"</literal>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<literal type="string">""</literal></expr></argument>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"--verbose"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>arg</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>verbose</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>arg</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"--pidfile"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>arg</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>arg</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>argc</name><operator>&gt;</operator><name>arg</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>pidname</name> <operator>=</operator> <name><name>argv</name><index>[<expr><name>arg</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"--logfile"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>arg</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>arg</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>argc</name><operator>&gt;</operator><name>arg</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>serverlogfile</name> <operator>=</operator> <name><name>argv</name><index>[<expr><name>arg</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"--ipv6"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>arg</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_IPV6</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>ipv_inuse</name> <operator>=</operator> <literal type="string">"IPv6"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>use_ipv6</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>arg</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"--ipv4"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>arg</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_IPV6</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>ipv_inuse</name> <operator>=</operator> <literal type="string">"IPv4"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>use_ipv6</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>arg</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"--bindonly"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>arg</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>bind_only</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>arg</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"--port"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>arg</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>arg</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>argc</name><operator>&gt;</operator><name>arg</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>endptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>ulnum</name> <init>= <expr><call><name>strtoul</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>arg</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>endptr</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><operator>(</operator><name>endptr</name> <operator>!=</operator> <name><name>argv</name><index>[<expr><name>arg</name></expr>]</index></name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>arg</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator>
<operator>(</operator><operator>(</operator><name>ulnum</name> <operator>!=</operator> <literal type="number">0UL</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>ulnum</name> <operator>&lt;</operator> <literal type="number">1025UL</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>ulnum</name> <operator>&gt;</operator> <literal type="number">65535UL</literal><operator>)</operator><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"sockfilt: invalid --port argument (%s)\n"</literal></expr></argument>,
<argument><expr><name><name>argv</name><index>[<expr><name>arg</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>port</name> <operator>=</operator> <call><name>curlx_ultous</name><argument_list>(<argument><expr><name>ulnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>arg</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"--connect"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>arg</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name>arg</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>argc</name><operator>&gt;</operator><name>arg</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>endptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>ulnum</name> <init>= <expr><call><name>strtoul</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>arg</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>endptr</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><operator>(</operator><name>endptr</name> <operator>!=</operator> <name><name>argv</name><index>[<expr><name>arg</name></expr>]</index></name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>arg</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator>
<operator>(</operator><name>ulnum</name> <operator>&lt;</operator> <literal type="number">1025UL</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>ulnum</name> <operator>&gt;</operator> <literal type="number">65535UL</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"sockfilt: invalid --connect argument (%s)\n"</literal></expr></argument>,
<argument><expr><name><name>argv</name><index>[<expr><name>arg</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>connectport</name> <operator>=</operator> <call><name>curlx_ultous</name><argument_list>(<argument><expr><name>ulnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>arg</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"--addr"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>arg</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>arg</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>argc</name><operator>&gt;</operator><name>arg</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>addr</name> <operator>=</operator> <name><name>argv</name><index>[<expr><name>arg</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>arg</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"Usage: sockfilt [option]\n"</literal>
<literal type="string">" --version\n"</literal>
<literal type="string">" --verbose\n"</literal>
<literal type="string">" --logfile [file]\n"</literal>
<literal type="string">" --pidfile [file]\n"</literal>
<literal type="string">" --ipv4\n"</literal>
<literal type="string">" --ipv6\n"</literal>
<literal type="string">" --bindonly\n"</literal>
<literal type="string">" --port [port]\n"</literal>
<literal type="string">" --connect [port]\n"</literal>
<literal type="string">" --addr [address]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>win32_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atexit</name><argument_list>(<argument><expr><name>win32_cleanup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>setmode</name><argument_list>(<argument><expr><call><name>fileno</name><argument_list>(<argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>O_BINARY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>setmode</name><argument_list>(<argument><expr><call><name>fileno</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>O_BINARY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>setmode</name><argument_list>(<argument><expr><call><name>fileno</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>O_BINARY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>install_signal_handlers</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_IPV6</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>use_ipv6</name></expr>)</condition><block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>sock</name> <operator>=</operator> <call><name>socket</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><name>SOCK_STREAM</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_IPV6</name></expr></argument>)</argument_list></call></expr></cpp:if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>sock</name> <operator>=</operator> <call><name>socket</name><argument_list>(<argument><expr><name>AF_INET6</name></expr></argument>, <argument><expr><name>SOCK_STREAM</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if<condition>(<expr><name>CURL_SOCKET_BAD</name> <operator>==</operator> <name>sock</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>error</name> <operator>=</operator> <name>SOCKERRNO</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"Error creating socket: (%d) %s"</literal></expr></argument>,
<argument><expr><name>error</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>error</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>write_stdout</name><argument_list>(<argument><expr><literal type="string">"FAIL\n"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>sockfilt_cleanup</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>connectport</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mode</name> <operator>=</operator> <name>ACTIVE</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_IPV6</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>use_ipv6</name></expr>)</condition> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>me</name><operator>.</operator><name>sa4</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>me</name><operator>.</operator><name>sa4</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>me</name><operator>.</operator><name>sa4</name><operator>.</operator><name>sin_family</name></name> <operator>=</operator> <name>AF_INET</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>me</name><operator>.</operator><name>sa4</name><operator>.</operator><name>sin_port</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name>connectport</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>me</name><operator>.</operator><name>sa4</name><operator>.</operator><name>sin_addr</name><operator>.</operator><name>s_addr</name></name> <operator>=</operator> <name>INADDR_ANY</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>addr</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>addr</name> <operator>=</operator> <literal type="string">"127.0.0.1"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>Curl_inet_pton</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>me</name><operator>.</operator><name>sa4</name><operator>.</operator><name>sin_addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>connect</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>me</name><operator>.</operator><name>sa</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>me</name><operator>.</operator><name>sa4</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_IPV6</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>me</name><operator>.</operator><name>sa6</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>me</name><operator>.</operator><name>sa6</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>me</name><operator>.</operator><name>sa6</name><operator>.</operator><name>sin6_family</name></name> <operator>=</operator> <name>AF_INET6</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>me</name><operator>.</operator><name>sa6</name><operator>.</operator><name>sin6_port</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name>connectport</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>addr</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>addr</name> <operator>=</operator> <literal type="string">"::1"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>Curl_inet_pton</name><argument_list>(<argument><expr><name>AF_INET6</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>me</name><operator>.</operator><name>sa6</name><operator>.</operator><name>sin6_addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>connect</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>me</name><operator>.</operator><name>sa</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>me</name><operator>.</operator><name>sa6</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
<if_stmt><if>if<condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>error</name> <operator>=</operator> <name>SOCKERRNO</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"Error connecting to port %hu: (%d) %s"</literal></expr></argument>,
<argument><expr><name>connectport</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>error</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>write_stdout</name><argument_list>(<argument><expr><literal type="string">"FAIL\n"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>sockfilt_cleanup</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"====&gt; Client connect"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>msgsock</name> <operator>=</operator> <name>sock</name></expr>;</expr_stmt> 
</block_content>}</block></if>
<else>else <block>{<block_content>

<expr_stmt><expr><name>sock</name> <operator>=</operator> <call><name>sockdaemon</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>CURL_SOCKET_BAD</name> <operator>==</operator> <name>sock</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>write_stdout</name><argument_list>(<argument><expr><literal type="string">"FAIL\n"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>sockfilt_cleanup</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>msgsock</name> <operator>=</operator> <name>CURL_SOCKET_BAD</name></expr>;</expr_stmt> 
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"Running %s version"</literal></expr></argument>, <argument><expr><name>ipv_inuse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>connectport</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"Connected to port %hu"</literal></expr></argument>, <argument><expr><name>connectport</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>(<expr><name>bind_only</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"Bound without listening on port %hu"</literal></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"Listening on port %hu"</literal></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>wrotepidfile</name> <operator>=</operator> <call><name>write_pidfile</name><argument_list>(<argument><expr><name>pidname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>wrotepidfile</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>write_stdout</name><argument_list>(<argument><expr><literal type="string">"FAIL\n"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>sockfilt_cleanup</name>;</goto>
</block_content>}</block></if></if_stmt>

<do>do <block>{<block_content>
<expr_stmt><expr><name>juggle_again</name> <operator>=</operator> <call><name>juggle</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msgsock</name></expr></argument>, <argument><expr><name>sock</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block> while<condition>(<expr><name>juggle_again</name></expr>)</condition>;</do>

<label><name>sockfilt_cleanup</name>:</label>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>msgsock</name> <operator>!=</operator> <name>sock</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>msgsock</name> <operator>!=</operator> <name>CURL_SOCKET_BAD</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>sclose</name><argument_list>(<argument><expr><name>msgsock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>sock</name> <operator>!=</operator> <name>CURL_SOCKET_BAD</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>sclose</name><argument_list>(<argument><expr><name>sock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>wrotepidfile</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>unlink</name><argument_list>(<argument><expr><name>pidname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>restore_signal_handlers</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>got_exit_signal</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"============&gt; sockfilt exits with signal (%d)"</literal></expr></argument>, <argument><expr><name>exit_signal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<expr_stmt><expr><call><name>raise</name><argument_list>(<argument><expr><name>exit_signal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>logmsg</name><argument_list>(<argument><expr><literal type="string">"============&gt; sockfilt quits"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
