<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\curl-analysis\_cppstats_featurelocations\curl\packages\vms\curl_crtl_init.c">























































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;descrip.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;lnmdef.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stsdef.h&gt;</cpp:file></cpp:include>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>member_alignment</name> <name>save</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>nomember_alignment</name> <name>longword</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>message</name> <name>save</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>message</name> <name>disable</name> <name>misalgndmem</name></cpp:pragma>
<struct>struct <name>itmlst_3</name> <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>short</name> <name>int</name></type> <name>buflen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>short</name> <name>int</name></type> <name>itmcode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>bufadr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>short</name> <name>int</name> <modifier>*</modifier></type><name>retlen</name></decl>;</decl_stmt>
}</block>;</struct>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>message</name> <name>restore</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>member_alignment</name> <name>restore</name></cpp:pragma>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VAX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENABLE</name></cpp:macro> <cpp:value>"ENABLE"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DISABLE</name></cpp:macro> <cpp:value>"DISABLE"</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENABLE</name></cpp:macro> <cpp:value>TRUE</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DISABLE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<function_decl><type><name>int</name></type> <name>decc$feature_get_index</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>decc$feature_set_value</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><name>int</name></type> <name>SYS$TRNLNM</name><parameter_list>(
<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>long</name> <modifier>*</modifier></type> <name>attr</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>dsc$descriptor_s</name></name> <modifier>*</modifier></type> <name>table_dsc</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>dsc$descriptor_s</name></name> <modifier>*</modifier></type> <name>name_dsc</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type> <name>acmode</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>itmlst_3</name></name> <modifier>*</modifier></type> <name>item_list</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>SYS$CRELNM</name><parameter_list>(
<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>long</name> <modifier>*</modifier></type> <name>attr</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>dsc$descriptor_s</name></name> <modifier>*</modifier></type> <name>table_dsc</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>dsc$descriptor_s</name></name> <modifier>*</modifier></type> <name>name_dsc</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type> <name>acmode</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>itmlst_3</name></name> <modifier>*</modifier></type> <name>item_list</name></decl></parameter>)</parameter_list>;</function_decl>



<function><type><specifier>static</specifier> <name>int</name></type> <name>sys_trnlnm</name>
<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>logname</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier></type> <name>value</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>value_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><specifier>const</specifier> <call><name>$DESCRIPTOR</name><argument_list>(<argument><expr><name>table_dsc</name></expr></argument>, <argument><expr><literal type="string">"LNM$FILE_DEV"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>long</name></type> <name>attr</name> <init>= <expr><name>LNM$M_CASE_BLIND</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>dsc$descriptor_s</name></name></type> <name>name_dsc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>itmlst_3</name></name></type> <name><name>itlst</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>itlst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>buflen</name> <operator>=</operator> <name>value_len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>itlst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>itmcode</name> <operator>=</operator> <name>LNM$_STRING</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>itlst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>bufadr</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>itlst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>retlen</name> <operator>=</operator> <operator>&amp;</operator><name>result</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>itlst</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>buflen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>itlst</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>itmcode</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>name_dsc</name><operator>.</operator><name>dsc$w_length</name></name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>logname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>name_dsc</name><operator>.</operator><name>dsc$a_pointer</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>logname</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>name_dsc</name><operator>.</operator><name>dsc$b_dtype</name></name> <operator>=</operator> <name>DSC$K_DTYPE_T</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>name_dsc</name><operator>.</operator><name>dsc$b_class</name></name> <operator>=</operator> <name>DSC$K_CLASS_S</name></expr>;</expr_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>SYS$TRNLNM</name><argument_list>(<argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>table_dsc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>name_dsc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>itlst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>$VMS_STATUS_SUCCESS</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><name><name>value</name><index>[<expr><name>result</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>sys_crelnm</name>
<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>logname</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret_val</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>proc_table</name> <init>= <expr><literal type="string">"LNM$PROCESS_TABLE"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>dsc$descriptor_s</name></name></type> <name>proc_table_dsc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>dsc$descriptor_s</name></name></type> <name>logname_dsc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>itmlst_3</name></name></type> <name><name>item_list</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>proc_table_dsc</name><operator>.</operator><name>dsc$a_pointer</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>proc_table</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>proc_table_dsc</name><operator>.</operator><name>dsc$w_length</name></name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>proc_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>proc_table_dsc</name><operator>.</operator><name>dsc$b_dtype</name></name> <operator>=</operator> <name>DSC$K_DTYPE_T</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>proc_table_dsc</name><operator>.</operator><name>dsc$b_class</name></name> <operator>=</operator> <name>DSC$K_CLASS_S</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>logname_dsc</name><operator>.</operator><name>dsc$a_pointer</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>logname</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>logname_dsc</name><operator>.</operator><name>dsc$w_length</name></name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>logname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>logname_dsc</name><operator>.</operator><name>dsc$b_dtype</name></name> <operator>=</operator> <name>DSC$K_DTYPE_T</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>logname_dsc</name><operator>.</operator><name>dsc$b_class</name></name> <operator>=</operator> <name>DSC$K_CLASS_S</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>item_list</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>buflen</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>item_list</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>itmcode</name> <operator>=</operator> <name>LNM$_STRING</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>item_list</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>bufadr</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>value</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>item_list</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>retlen</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>item_list</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>buflen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>item_list</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>itmcode</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ret_val</name> <operator>=</operator> <call><name>SYS$CRELNM</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>proc_table_dsc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>logname_dsc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>item_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret_val</name></expr>;</return>
</block_content>}</block></function>







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VAX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type> <name>set_feature_default</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>sys_crelnm</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function><type><specifier>static</specifier> <name>void</name></type> <name>set_feature_default</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>index</name></decl>;</decl_stmt>

<expr_stmt><expr><name>index</name> <operator>=</operator> <call><name>decc$feature_get_index</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>index</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>decc$feature_set_value</name> <argument_list>(<argument><expr><name>index</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type> <name>set_features</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>unix_shell_name</name><index>[<expr><literal type="number">255</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>use_unix_settings</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>sys_trnlnm</name><argument_list>(<argument><expr><literal type="string">"GNV$UNIX_SHELL"</literal></expr></argument>,
<argument><expr><name>unix_shell_name</name></expr></argument>, <argument><expr><sizeof>sizeof <name>unix_shell_name</name></sizeof> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>$VMS_STATUS_SUCCESS</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>use_unix_settings</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>set_feature_default</name><argument_list>(<argument><expr><literal type="string">"DECC$ACL_ACCESS_CHECK"</literal></expr></argument>, <argument><expr><name>ENABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>set_feature_default</name> <argument_list>(<argument><expr><literal type="string">"DECC$ARGV_PARSE_STYLE"</literal></expr></argument> , <argument><expr><name>ENABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<expr_stmt><expr><call><name>set_feature_default</name><argument_list>(<argument><expr><literal type="string">"DECC$DISABLE_POSIX_ROOT"</literal></expr></argument>, <argument><expr><name>DISABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><call><name>set_feature_default</name> <argument_list>(<argument><expr><literal type="string">"DECC$EFS_CHARSET"</literal></expr></argument>, <argument><expr><name>ENABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_feature_default</name> <argument_list>(<argument><expr><literal type="string">"DECC$EFS_CASE_PRESERVE"</literal></expr></argument>, <argument><expr><name>ENABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>set_feature_default</name> <argument_list>(<argument><expr><literal type="string">"DECC$EFS_FILE_TIMESTAMPS"</literal></expr></argument>, <argument><expr><name>ENABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>set_feature_default</name> <argument_list>(<argument><expr><literal type="string">"DECC$ENABLE_GETENV_CACHE"</literal></expr></argument>, <argument><expr><name>ENABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VAX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>set_feature_default</name> <argument_list>(<argument><expr><literal type="string">"DECC$EXEC_FILEATTR_INHERITANCE"</literal></expr></argument>, <argument><expr><literal type="string">"2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>set_feature_default</name> <argument_list>(<argument><expr><literal type="string">"DECC$EXEC_FILEATTR_INHERITANCE"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<expr_stmt><expr><call><name>set_feature_default</name> <argument_list>(<argument><expr><literal type="string">"DECC$READDIR_DROPDOTNOTYPE"</literal></expr></argument>, <argument><expr><name>ENABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><call><name>set_feature_default</name> <argument_list>(<argument><expr><literal type="string">"DECC$STDIO_CTX_EOL"</literal></expr></argument>, <argument><expr><name>ENABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>set_feature_default</name> <argument_list>(<argument><expr><literal type="string">"DECC$RENAME_NO_INHERIT"</literal></expr></argument>, <argument><expr><name>ENABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>use_unix_settings</name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><call><name>set_feature_default</name> <argument_list>(<argument><expr><literal type="string">"DECC$ALLOW_REMOVE_OPEN_FILES"</literal></expr></argument>, <argument><expr><name>ENABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>set_feature_default</name> <argument_list>(<argument><expr><literal type="string">"DECC$FILENAME_UNIX_ONLY"</literal></expr></argument>, <argument><expr><name>ENABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><call><name>set_feature_default</name> <argument_list>(<argument><expr><literal type="string">"DECC$FILE_PERMISSION_UNIX"</literal></expr></argument>, <argument><expr><name>ENABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_feature_default</name> <argument_list>(<argument><expr><literal type="string">"DECC$FILE_SHARING"</literal></expr></argument>, <argument><expr><name>ENABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_feature_default</name> <argument_list>(<argument><expr><literal type="string">"DECC$FILE_OWNER_UNIX"</literal></expr></argument>, <argument><expr><name>ENABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_feature_default</name> <argument_list>(<argument><expr><literal type="string">"DECC$POSIX_SEEK_STREAM_FILE"</literal></expr></argument>, <argument><expr><name>ENABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>set_feature_default</name><argument_list>(<argument><expr><literal type="string">"DECC$FILENAME_UNIX_REPORT"</literal></expr></argument>, <argument><expr><name>ENABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<expr_stmt><expr><call><name>set_feature_default</name> <argument_list>(<argument><expr><literal type="string">"DECC$GLOB_UNIX_STYLE"</literal></expr></argument>, <argument><expr><name>ENABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><call><name>set_feature_default</name><argument_list>(<argument><expr><literal type="string">"DECC$FILENAME_UNIX_NO_VERSION"</literal></expr></argument>, <argument><expr><name>ENABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><call><name>set_feature_default</name><argument_list>(<argument><expr><literal type="string">"DECC$UNIX_PATH_BEFORE_LOGNAME"</literal></expr></argument>, <argument><expr><name>ENABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>set_feature_default</name><argument_list>(<argument><expr><literal type="string">"DECC$STRTOL_ERANGE"</literal></expr></argument>, <argument><expr><name>ENABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





</block_content>}</block></function>




<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>nostandard</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>extern_model</name> <name>save</name></cpp:pragma>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VAX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>extern_model</name> <name>strict_refdef</name> <cpp:literal>"LIB$INITIALIZE"</cpp:literal> <name>nowrt</name><name>,</name> <name>long</name><name>,</name> <name>nopic</name></cpp:pragma>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>extern_model</name> <name>strict_refdef</name> <cpp:literal>"LIB$INITIALIZE"</cpp:literal> <name>nowrt</name><name>,</name> <name>long</name></cpp:pragma>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__INITIAL_POINTER_SIZE</name></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>__pointer_size</name> <name>__save</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>__pointer_size</name> <name>32</name></cpp:pragma>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>__required_pointer_size</name> <name>__save</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>__required_pointer_size</name> <name>32</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><call><name>void</name> <argument_list>(<argument><expr><operator>*</operator> <specifier>const</specifier> <name><name>iniarray</name><index>[]</index></name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call> <operator>=</operator> <block>{<expr><name>set_features</name></expr>, }</block></expr> ;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__VAX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__INITIAL_POINTER_SIZE</name></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>__pointer_size</name> <name>__restore</name></cpp:pragma>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>__required_pointer_size</name> <name>__restore</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>






<function_decl><type><name>int</name></type> <name>LIB$INITIALIZE</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__DECC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>extern_model</name> <name>strict_refdef</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>int</name></type> <name>lib_init_ref</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <name>LIB$INITIALIZE</name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__DECC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>extern_model</name> <name>restore</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>standard</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
