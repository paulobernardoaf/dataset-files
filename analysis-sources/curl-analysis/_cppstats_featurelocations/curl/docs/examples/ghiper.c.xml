<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\curl-analysis\_cppstats_featurelocations\curl\docs\examples\ghiper.c">























































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;glib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;curl/curl.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MSG_OUT</name></cpp:macro> <cpp:value>g_print</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHOW_VERBOSE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHOW_PROGRESS</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define> 


<typedef>typedef <type><struct>struct <name>_GlobalInfo</name> <block>{
<decl_stmt><decl><type><name>CURLM</name> <modifier>*</modifier></type><name>multi</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>guint</name></type> <name>timer_event</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>still_running</name></decl>;</decl_stmt>
}</block></struct></type> <name>GlobalInfo</name>;</typedef>


<typedef>typedef <type><struct>struct <name>_ConnInfo</name> <block>{
<decl_stmt><decl><type><name>CURL</name> <modifier>*</modifier></type><name>easy</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>url</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GlobalInfo</name> <modifier>*</modifier></type><name>global</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>error</name><index>[<expr><name>CURL_ERROR_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>ConnInfo</name>;</typedef>


<typedef>typedef <type><struct>struct <name>_SockInfo</name> <block>{
<decl_stmt><decl><type><name>curl_socket_t</name></type> <name>sockfd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CURL</name> <modifier>*</modifier></type><name>easy</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>action</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>timeout</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GIOChannel</name> <modifier>*</modifier></type><name>ch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>guint</name></type> <name>ev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GlobalInfo</name> <modifier>*</modifier></type><name>global</name></decl>;</decl_stmt>
}</block></struct></type> <name>SockInfo</name>;</typedef>


<function><type><specifier>static</specifier> <name>void</name></type> <name>mcode_or_die</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>where</name></decl></parameter>, <parameter><decl><type><name>CURLMcode</name></type> <name>code</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>CURLM_OK</name> <operator>!=</operator> <name>code</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<switch>switch<condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>CURLM_BAD_HANDLE</name></expr>:</case> <expr_stmt><expr><name>s</name> <operator>=</operator> <literal type="string">"CURLM_BAD_HANDLE"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>CURLM_BAD_EASY_HANDLE</name></expr>:</case> <expr_stmt><expr><name>s</name> <operator>=</operator> <literal type="string">"CURLM_BAD_EASY_HANDLE"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>CURLM_OUT_OF_MEMORY</name></expr>:</case> <expr_stmt><expr><name>s</name> <operator>=</operator> <literal type="string">"CURLM_OUT_OF_MEMORY"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>CURLM_INTERNAL_ERROR</name></expr>:</case> <expr_stmt><expr><name>s</name> <operator>=</operator> <literal type="string">"CURLM_INTERNAL_ERROR"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>CURLM_BAD_SOCKET</name></expr>:</case> <expr_stmt><expr><name>s</name> <operator>=</operator> <literal type="string">"CURLM_BAD_SOCKET"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>CURLM_UNKNOWN_OPTION</name></expr>:</case> <expr_stmt><expr><name>s</name> <operator>=</operator> <literal type="string">"CURLM_UNKNOWN_OPTION"</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>CURLM_LAST</name></expr>:</case> <expr_stmt><expr><name>s</name> <operator>=</operator> <literal type="string">"CURLM_LAST"</literal></expr>;</expr_stmt> <break>break;</break>
<default>default:</default> <expr_stmt><expr><name>s</name> <operator>=</operator> <literal type="string">"CURLM_unknown"</literal></expr>;</expr_stmt>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>MSG_OUT</name><argument_list>(<argument><expr><literal type="string">"ERROR: %s returns %s\n"</literal></expr></argument>, <argument><expr><name>where</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>check_multi_info</name><parameter_list>(<parameter><decl><type><name>GlobalInfo</name> <modifier>*</modifier></type><name>g</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>eff_url</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CURLMsg</name> <modifier>*</modifier></type><name>msg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>msgs_left</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ConnInfo</name> <modifier>*</modifier></type><name>conn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CURL</name> <modifier>*</modifier></type><name>easy</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>res</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>MSG_OUT</name><argument_list>(<argument><expr><literal type="string">"REMAINING: %d\n"</literal></expr></argument>, <argument><expr><name><name>g</name><operator>-&gt;</operator><name>still_running</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while<condition>(<expr><operator>(</operator><name>msg</name> <operator>=</operator> <call><name>curl_multi_info_read</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>multi</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>msgs_left</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>msg</name><operator>-&gt;</operator><name>msg</name></name> <operator>==</operator> <name>CURLMSG_DONE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>easy</name> <operator>=</operator> <name><name>msg</name><operator>-&gt;</operator><name>easy_handle</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <name><name>msg</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>result</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>curl_easy_getinfo</name><argument_list>(<argument><expr><name>easy</name></expr></argument>, <argument><expr><name>CURLINFO_PRIVATE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>curl_easy_getinfo</name><argument_list>(<argument><expr><name>easy</name></expr></argument>, <argument><expr><name>CURLINFO_EFFECTIVE_URL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>eff_url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MSG_OUT</name><argument_list>(<argument><expr><literal type="string">"DONE: %s =&gt; (%d) %s\n"</literal></expr></argument>, <argument><expr><name>eff_url</name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>error</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>curl_multi_remove_handle</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>multi</name></name></expr></argument>, <argument><expr><name>easy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>curl_easy_cleanup</name><argument_list>(<argument><expr><name>easy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>gboolean</name></type> <name>timer_cb</name><parameter_list>(<parameter><decl><type><name>gpointer</name></type> <name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>GlobalInfo</name> <modifier>*</modifier></type><name>g</name> <init>= <expr><operator>(</operator><name>GlobalInfo</name> <operator>*</operator><operator>)</operator><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CURLMcode</name></type> <name>rc</name></decl>;</decl_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>curl_multi_socket_action</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>multi</name></name></expr></argument>,
<argument><expr><name>CURL_SOCKET_TIMEOUT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>g</name><operator>-&gt;</operator><name>still_running</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mcode_or_die</name><argument_list>(<argument><expr><literal type="string">"timer_cb: curl_multi_socket_action"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>check_multi_info</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>update_timeout_cb</name><parameter_list>(<parameter><decl><type><name>CURLM</name> <modifier>*</modifier></type><name>multi</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>timeout_ms</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>timeout</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GlobalInfo</name> <modifier>*</modifier></type><name>g</name> <init>= <expr><operator>(</operator><name>GlobalInfo</name> <operator>*</operator><operator>)</operator><name>userp</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>timeout</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <name>timeout_ms</name><operator>/</operator><literal type="number">1000</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>timeout</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <operator>(</operator><name>timeout_ms</name><operator>%</operator><literal type="number">1000</literal><operator>)</operator><operator>*</operator><literal type="number">1000</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MSG_OUT</name><argument_list>(<argument><expr><literal type="string">"*** update_timeout_cb %ld =&gt; %ld:%ld ***\n"</literal></expr></argument>,
<argument><expr><name>timeout_ms</name></expr></argument>, <argument><expr><name><name>timeout</name><operator>.</operator><name>tv_sec</name></name></expr></argument>, <argument><expr><name><name>timeout</name><operator>.</operator><name>tv_usec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>







<if_stmt><if>if<condition>(<expr><name>timeout_ms</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>timer_event</name></name> <operator>=</operator> <call><name>g_timeout_add</name><argument_list>(<argument><expr><name>timeout_ms</name></expr></argument>, <argument><expr><name>timer_cb</name></expr></argument>, <argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>gboolean</name></type> <name>event_cb</name><parameter_list>(<parameter><decl><type><name>GIOChannel</name> <modifier>*</modifier></type><name>ch</name></decl></parameter>, <parameter><decl><type><name>GIOCondition</name></type> <name>condition</name></decl></parameter>, <parameter><decl><type><name>gpointer</name></type> <name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>GlobalInfo</name> <modifier>*</modifier></type><name>g</name> <init>= <expr><operator>(</operator><name>GlobalInfo</name><operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CURLMcode</name></type> <name>rc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fd</name> <init>= <expr><call><name>g_io_channel_unix_get_fd</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>action</name> <init>=
<expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name>condition</name> <operator>&amp;</operator> <name>G_IO_IN</name><operator>)</operator></expr> ?</condition><then> <expr><name>CURL_CSELECT_IN</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator> <operator>|</operator>
<operator>(</operator><ternary><condition><expr><operator>(</operator><name>condition</name> <operator>&amp;</operator> <name>G_IO_OUT</name><operator>)</operator></expr> ?</condition><then> <expr><name>CURL_CSELECT_OUT</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>curl_multi_socket_action</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>multi</name></name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>action</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>g</name><operator>-&gt;</operator><name>still_running</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mcode_or_die</name><argument_list>(<argument><expr><literal type="string">"event_cb: curl_multi_socket_action"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_multi_info</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>g</name><operator>-&gt;</operator><name>still_running</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>MSG_OUT</name><argument_list>(<argument><expr><literal type="string">"last transfer done, kill timeout\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>g</name><operator>-&gt;</operator><name>timer_event</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>g_source_remove</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>timer_event</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>remsock</name><parameter_list>(<parameter><decl><type><name>SockInfo</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>f</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>ev</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>g_source_remove</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>ev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>setsock</name><parameter_list>(<parameter><decl><type><name>SockInfo</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>curl_socket_t</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>CURL</name> <modifier>*</modifier></type><name>e</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>act</name></decl></parameter>,
<parameter><decl><type><name>GlobalInfo</name> <modifier>*</modifier></type><name>g</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>GIOCondition</name></type> <name>kind</name> <init>=
<expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name>act</name> <operator>&amp;</operator> <name>CURL_POLL_IN</name><operator>)</operator></expr> ?</condition><then> <expr><name>G_IO_IN</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator> <operator>|</operator>
<operator>(</operator><ternary><condition><expr><operator>(</operator><name>act</name> <operator>&amp;</operator> <name>CURL_POLL_OUT</name><operator>)</operator></expr> ?</condition><then> <expr><name>G_IO_OUT</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>sockfd</name></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>action</name></name> <operator>=</operator> <name>act</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>easy</name></name> <operator>=</operator> <name>e</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>ev</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>g_source_remove</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>ev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>ev</name></name> <operator>=</operator> <call><name>g_io_add_watch</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>ch</name></name></expr></argument>, <argument><expr><name>kind</name></expr></argument>, <argument><expr><name>event_cb</name></expr></argument>, <argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>addsock</name><parameter_list>(<parameter><decl><type><name>curl_socket_t</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>CURL</name> <modifier>*</modifier></type><name>easy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>action</name></decl></parameter>, <parameter><decl><type><name>GlobalInfo</name> <modifier>*</modifier></type><name>g</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>SockInfo</name> <modifier>*</modifier></type><name>fdp</name> <init>= <expr><call><name>g_malloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SockInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>global</name></name> <operator>=</operator> <name>g</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fdp</name><operator>-&gt;</operator><name>ch</name></name> <operator>=</operator> <call><name>g_io_channel_unix_new</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>setsock</name><argument_list>(<argument><expr><name>fdp</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>easy</name></expr></argument>, <argument><expr><name>action</name></expr></argument>, <argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>curl_multi_assign</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>multi</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>fdp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>sock_cb</name><parameter_list>(<parameter><decl><type><name>CURL</name> <modifier>*</modifier></type><name>e</name></decl></parameter>, <parameter><decl><type><name>curl_socket_t</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>what</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cbp</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>sockp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>GlobalInfo</name> <modifier>*</modifier></type><name>g</name> <init>= <expr><operator>(</operator><name>GlobalInfo</name><operator>*</operator><operator>)</operator> <name>cbp</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SockInfo</name> <modifier>*</modifier></type><name>fdp</name> <init>= <expr><operator>(</operator><name>SockInfo</name><operator>*</operator><operator>)</operator> <name>sockp</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>whatstr</name><index>[]</index></name><init>=<expr><block>{ <expr><literal type="string">"none"</literal></expr>, <expr><literal type="string">"IN"</literal></expr>, <expr><literal type="string">"OUT"</literal></expr>, <expr><literal type="string">"INOUT"</literal></expr>, <expr><literal type="string">"REMOVE"</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>MSG_OUT</name><argument_list>(<argument><expr><literal type="string">"socket callback: s=%d e=%p what=%s "</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name><name>whatstr</name><index>[<expr><name>what</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>what</name> <operator>==</operator> <name>CURL_POLL_REMOVE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>MSG_OUT</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>remsock</name><argument_list>(<argument><expr><name>fdp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>fdp</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>MSG_OUT</name><argument_list>(<argument><expr><literal type="string">"Adding data: %s%s\n"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name>what</name> <operator>&amp;</operator> <name>CURL_POLL_IN</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"READ"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name>what</name> <operator>&amp;</operator> <name>CURL_POLL_OUT</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"WRITE"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addsock</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>what</name></expr></argument>, <argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>MSG_OUT</name><argument_list>(
<argument><expr><literal type="string">"Changing action from %d to %d\n"</literal></expr></argument>, <argument><expr><name><name>fdp</name><operator>-&gt;</operator><name>action</name></name></expr></argument>, <argument><expr><name>what</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>setsock</name><argument_list>(<argument><expr><name>fdp</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>what</name></expr></argument>, <argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>size_t</name></type> <name>write_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>nmemb</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>realsize</name> <init>= <expr><name>size</name> <operator>*</operator> <name>nmemb</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ConnInfo</name> <modifier>*</modifier></type><name>conn</name> <init>= <expr><operator>(</operator><name>ConnInfo</name><operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>ptr</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>conn</name></expr>;</expr_stmt>
<return>return <expr><name>realsize</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>prog_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>dltotal</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>dlnow</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>ult</name></decl></parameter>,
<parameter><decl><type><name>double</name></type> <name>uln</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ConnInfo</name> <modifier>*</modifier></type><name>conn</name> <init>= <expr><operator>(</operator><name>ConnInfo</name> <operator>*</operator><operator>)</operator><name>p</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>MSG_OUT</name><argument_list>(<argument><expr><literal type="string">"Progress: %s (%g/%g)\n"</literal></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>url</name></name></expr></argument>, <argument><expr><name>dlnow</name></expr></argument>, <argument><expr><name>dltotal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>new_conn</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>url</name></decl></parameter>, <parameter><decl><type><name>GlobalInfo</name> <modifier>*</modifier></type><name>g</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ConnInfo</name> <modifier>*</modifier></type><name>conn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CURLMcode</name></type> <name>rc</name></decl>;</decl_stmt>

<expr_stmt><expr><name>conn</name> <operator>=</operator> <call><name>g_malloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ConnInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>error</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>easy</name></name> <operator>=</operator> <call><name>curl_easy_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>conn</name><operator>-&gt;</operator><name>easy</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>MSG_OUT</name><argument_list>(<argument><expr><literal type="string">"curl_easy_init() failed, exiting!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>global</name></name> <operator>=</operator> <name>g</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>url</name></name> <operator>=</operator> <call><name>g_strdup</name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>easy</name></name></expr></argument>, <argument><expr><name>CURLOPT_URL</name></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>easy</name></name></expr></argument>, <argument><expr><name>CURLOPT_WRITEFUNCTION</name></expr></argument>, <argument><expr><name>write_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>easy</name></name></expr></argument>, <argument><expr><name>CURLOPT_WRITEDATA</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>easy</name></name></expr></argument>, <argument><expr><name>CURLOPT_VERBOSE</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><name>SHOW_VERBOSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>easy</name></name></expr></argument>, <argument><expr><name>CURLOPT_ERRORBUFFER</name></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>error</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>easy</name></name></expr></argument>, <argument><expr><name>CURLOPT_PRIVATE</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>easy</name></name></expr></argument>, <argument><expr><name>CURLOPT_NOPROGRESS</name></expr></argument>, <argument><expr><ternary><condition><expr><name>SHOW_PROGRESS</name></expr>?</condition><then><expr><literal type="number">0L</literal></expr></then><else>:<expr><literal type="number">1L</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>easy</name></name></expr></argument>, <argument><expr><name>CURLOPT_PROGRESSFUNCTION</name></expr></argument>, <argument><expr><name>prog_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>easy</name></name></expr></argument>, <argument><expr><name>CURLOPT_PROGRESSDATA</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>easy</name></name></expr></argument>, <argument><expr><name>CURLOPT_FOLLOWLOCATION</name></expr></argument>, <argument><expr><literal type="number">1L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>easy</name></name></expr></argument>, <argument><expr><name>CURLOPT_CONNECTTIMEOUT</name></expr></argument>, <argument><expr><literal type="number">30L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>easy</name></name></expr></argument>, <argument><expr><name>CURLOPT_LOW_SPEED_LIMIT</name></expr></argument>, <argument><expr><literal type="number">1L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>easy</name></name></expr></argument>, <argument><expr><name>CURLOPT_LOW_SPEED_TIME</name></expr></argument>, <argument><expr><literal type="number">30L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MSG_OUT</name><argument_list>(<argument><expr><literal type="string">"Adding easy %p to multi %p (%s)\n"</literal></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>easy</name></name></expr></argument>, <argument><expr><name><name>g</name><operator>-&gt;</operator><name>multi</name></name></expr></argument>, <argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>curl_multi_add_handle</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>multi</name></name></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>easy</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mcode_or_die</name><argument_list>(<argument><expr><literal type="string">"new_conn: curl_multi_add_handle"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>gboolean</name></type> <name>fifo_cb</name><parameter_list>(<parameter><decl><type><name>GIOChannel</name> <modifier>*</modifier></type><name>ch</name></decl></parameter>, <parameter><decl><type><name>GIOCondition</name></type> <name>condition</name></decl></parameter>, <parameter><decl><type><name>gpointer</name></type> <name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUF_SIZE</name></cpp:macro> <cpp:value>1024</cpp:value></cpp:define>
<decl_stmt><decl><type><name>gsize</name></type> <name>len</name></decl>, <decl><type ref="prev"/><name>tp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>buf</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>tmp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>all</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GIOStatus</name></type> <name>rv</name></decl>;</decl_stmt>

<do>do <block>{<block_content>
<decl_stmt><decl><type><name>GError</name> <modifier>*</modifier></type><name>err</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>g_io_channel_read_line</name><argument_list>(<argument><expr><name>ch</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>buf</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>tp</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>tp</name></expr>]</index></name><operator>=</operator><literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>new_conn</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>GlobalInfo</name><operator>*</operator><operator>)</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>g_malloc</name><argument_list>(<argument><expr><name>BUF_SIZE</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while<condition>(<expr><name>TRUE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>BUF_SIZE</name></expr>]</index></name><operator>=</operator><literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>g_io_channel_read_chars</name><argument_list>(<argument><expr><name>ch</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>BUF_SIZE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>len</name></expr>]</index></name><operator>=</operator><literal type="char">'\0'</literal></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>all</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name>all</name></expr>;</expr_stmt>
<expr_stmt><expr><name>all</name> <operator>=</operator> <call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"%s%s"</literal></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>all</name> <operator>=</operator> <call><name>g_strdup</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<break>break;</break>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>
<if_stmt><if>if<condition>(<expr><name>all</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>new_conn</name><argument_list>(<argument><expr><name>all</name></expr></argument>, <argument><expr><operator>(</operator><name>GlobalInfo</name><operator>*</operator><operator>)</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>all</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if<condition>(<expr><name>err</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>g_error</name><argument_list>(<argument><expr><literal type="string">"fifo_cb: %s"</literal></expr></argument>, <argument><expr><name><name>err</name><operator>-&gt;</operator><name>message</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block> while<condition>(<expr><operator>(</operator><name>len</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>rv</name> <operator>==</operator> <name>G_IO_STATUS_NORMAL</name><operator>)</operator></expr>)</condition>;</do>
<return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>init_fifo</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>st</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fifo</name> <init>= <expr><literal type="string">"hiper.fifo"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>socket</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><call><name>lstat</name> <argument_list>(<argument><expr><name>fifo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>st</name><operator>.</operator><name>st_mode</name></name> <operator>&amp;</operator> <name>S_IFMT</name><operator>)</operator> <operator>==</operator> <name>S_IFREG</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EEXIST</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr><literal type="string">"lstat"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>unlink</name><argument_list>(<argument><expr><name>fifo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><call><name>mkfifo</name> <argument_list>(<argument><expr><name>fifo</name></expr></argument>, <argument><expr><literal type="number">0600</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr><literal type="string">"mkfifo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>socket</name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name>fifo</name></expr></argument>, <argument><expr><name>O_RDWR</name> <operator>|</operator> <name>O_NONBLOCK</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>socket</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr><literal type="string">"open"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>MSG_OUT</name><argument_list>(<argument><expr><literal type="string">"Now, pipe some URL's into &gt; %s\n"</literal></expr></argument>, <argument><expr><name>fifo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>socket</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>GlobalInfo</name> <modifier>*</modifier></type><name>g</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GMainLoop</name><modifier>*</modifier></type><name>gmain</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GIOChannel</name><modifier>*</modifier></type> <name>ch</name></decl>;</decl_stmt>
<expr_stmt><expr><name>g</name> <operator>=</operator> <call><name>g_malloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GlobalInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>init_fifo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ch</name> <operator>=</operator> <call><name>g_io_channel_unix_new</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>g_io_add_watch</name><argument_list>(<argument><expr><name>ch</name></expr></argument>, <argument><expr><name>G_IO_IN</name></expr></argument>, <argument><expr><name>fifo_cb</name></expr></argument>, <argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>gmain</name> <operator>=</operator> <call><name>g_main_loop_new</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>multi</name></name> <operator>=</operator> <call><name>curl_multi_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>curl_multi_setopt</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>multi</name></name></expr></argument>, <argument><expr><name>CURLMOPT_SOCKETFUNCTION</name></expr></argument>, <argument><expr><name>sock_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>curl_multi_setopt</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>multi</name></name></expr></argument>, <argument><expr><name>CURLMOPT_SOCKETDATA</name></expr></argument>, <argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>curl_multi_setopt</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>multi</name></name></expr></argument>, <argument><expr><name>CURLMOPT_TIMERFUNCTION</name></expr></argument>, <argument><expr><name>update_timeout_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>curl_multi_setopt</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>multi</name></name></expr></argument>, <argument><expr><name>CURLMOPT_TIMERDATA</name></expr></argument>, <argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><call><name>g_main_loop_run</name><argument_list>(<argument><expr><name>gmain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>curl_multi_cleanup</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>multi</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
