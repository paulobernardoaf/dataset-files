<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\curl-analysis\_cppstats_featurelocations\curl\docs\examples\crawler.c">





















<decl_stmt><decl><type><name>int</name></type> <name>max_con</name> <init>= <expr><literal type="number">200</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>max_total</name> <init>= <expr><literal type="number">20000</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>max_requests</name> <init>= <expr><literal type="number">500</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>max_link_per_page</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>follow_relative_links</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>start_page</name> <init>= <expr><literal type="string">"https://www.reuters.com"</literal></expr></init></decl>;</decl_stmt>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libxml/HTMLparser.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libxml/xpath.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libxml/uri.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;curl/curl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;signal.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>int</name></type> <name>pending_interrupt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>sighandler</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>dummy</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>pending_interrupt</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>


<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>;</decl_stmt>
}</block></struct></type> <name>memory</name>;</typedef>

<function><type><name>size_t</name></type> <name>grow_buffer</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>contents</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sz</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>nmemb</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>realsize</name> <init>= <expr><name>sz</name> <operator>*</operator> <name>nmemb</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>memory</name> <modifier>*</modifier></type><name>mem</name> <init>= <expr><operator>(</operator><name>memory</name><operator>*</operator><operator>)</operator> <name>ctx</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><call><name>realloc</name><argument_list>(<argument><expr><name><name>mem</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>mem</name><operator>-&gt;</operator><name>size</name></name> <operator>+</operator> <name>realsize</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>ptr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"not enough memory (realloc returned NULL)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>mem</name><operator>-&gt;</operator><name>buf</name></name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>mem</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name><name>mem</name><operator>-&gt;</operator><name>size</name></name></expr>]</index></name><operator>)</operator></expr></argument>, <argument><expr><name>contents</name></expr></argument>, <argument><expr><name>realsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mem</name><operator>-&gt;</operator><name>size</name></name> <operator>+=</operator> <name>realsize</name></expr>;</expr_stmt>
<return>return <expr><name>realsize</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>CURL</name> <modifier>*</modifier></type><name>make_handle</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>url</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CURL</name> <modifier>*</modifier></type><name>handle</name> <init>= <expr><call><name>curl_easy_init</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>CURLOPT_HTTP_VERSION</name></expr></argument>, <argument><expr><name>CURL_HTTP_VERSION_2TLS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>CURLOPT_URL</name></expr></argument>, <argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>memory</name> <modifier>*</modifier></type><name>mem</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>memory</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>mem</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mem</name><operator>-&gt;</operator><name>buf</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>CURLOPT_WRITEFUNCTION</name></expr></argument>, <argument><expr><name>grow_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>CURLOPT_WRITEDATA</name></expr></argument>, <argument><expr><name>mem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>CURLOPT_PRIVATE</name></expr></argument>, <argument><expr><name>mem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>CURLOPT_ACCEPT_ENCODING</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>CURLOPT_TIMEOUT</name></expr></argument>, <argument><expr><literal type="number">5L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>CURLOPT_FOLLOWLOCATION</name></expr></argument>, <argument><expr><literal type="number">1L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>CURLOPT_MAXREDIRS</name></expr></argument>, <argument><expr><literal type="number">10L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>CURLOPT_CONNECTTIMEOUT</name></expr></argument>, <argument><expr><literal type="number">2L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>CURLOPT_COOKIEFILE</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>CURLOPT_FILETIME</name></expr></argument>, <argument><expr><literal type="number">1L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>CURLOPT_USERAGENT</name></expr></argument>, <argument><expr><literal type="string">"mini crawler"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>CURLOPT_HTTPAUTH</name></expr></argument>, <argument><expr><name>CURLAUTH_ANY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>CURLOPT_UNRESTRICTED_AUTH</name></expr></argument>, <argument><expr><literal type="number">1L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>CURLOPT_PROXYAUTH</name></expr></argument>, <argument><expr><name>CURLAUTH_ANY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>CURLOPT_EXPECT_100_TIMEOUT_MS</name></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>handle</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>size_t</name></type> <name>follow_links</name><parameter_list>(<parameter><decl><type><name>CURLM</name> <modifier>*</modifier></type><name>multi_handle</name></decl></parameter>, <parameter><decl><type><name>memory</name> <modifier>*</modifier></type><name>mem</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>url</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>opts</name> <init>= <expr><name>HTML_PARSE_NOBLANKS</name> <operator>|</operator> <name>HTML_PARSE_NOERROR</name> <operator>|</operator> \
<name>HTML_PARSE_NOWARNING</name> <operator>|</operator> <name>HTML_PARSE_NONET</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>htmlDocPtr</name></type> <name>doc</name> <init>= <expr><call><name>htmlReadMemory</name><argument_list>(<argument><expr><name><name>mem</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>mem</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>opts</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>doc</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>xmlChar</name> <modifier>*</modifier></type><name>xpath</name> <init>= <expr><operator>(</operator><name>xmlChar</name><operator>*</operator><operator>)</operator> <literal type="string">"//a/@href"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xmlXPathContextPtr</name></type> <name>context</name> <init>= <expr><call><name>xmlXPathNewContext</name><argument_list>(<argument><expr><name>doc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xmlXPathObjectPtr</name></type> <name>result</name> <init>= <expr><call><name>xmlXPathEvalExpression</name><argument_list>(<argument><expr><name>xpath</name></expr></argument>, <argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>xmlXPathFreeContext</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>xmlNodeSetPtr</name></type> <name>nodeset</name> <init>= <expr><name><name>result</name><operator>-&gt;</operator><name>nodesetval</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><call><name>xmlXPathNodeSetIsEmpty</name><argument_list>(<argument><expr><name>nodeset</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xmlXPathFreeObject</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>nodeset</name><operator>-&gt;</operator><name>nodeNr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>r</name> <init>= <expr><call><name>rand</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><name>r</name> <operator>*</operator> <name><name>nodeset</name><operator>-&gt;</operator><name>nodeNr</name></name> <operator>/</operator> <name>RAND_MAX</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>xmlNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><name><name>nodeset</name><operator>-&gt;</operator><name>nodeTab</name><index>[<expr><name>x</name></expr>]</index></name><operator>-&gt;</operator><name>xmlChildrenNode</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xmlChar</name> <modifier>*</modifier></type><name>href</name> <init>= <expr><call><name>xmlNodeListGetString</name><argument_list>(<argument><expr><name>doc</name></expr></argument>, <argument><expr><name>node</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>follow_relative_links</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>xmlChar</name> <modifier>*</modifier></type><name>orig</name> <init>= <expr><name>href</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>href</name> <operator>=</operator> <call><name>xmlBuildURI</name><argument_list>(<argument><expr><name>href</name></expr></argument>, <argument><expr><operator>(</operator><name>xmlChar</name> <operator>*</operator><operator>)</operator> <name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xmlFree</name><argument_list>(<argument><expr><name>orig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>link</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>href</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>link</name> <operator>||</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>link</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">20</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>link</name></expr></argument>, <argument><expr><literal type="string">"http://"</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>link</name></expr></argument>, <argument><expr><literal type="string">"https://"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>curl_multi_add_handle</name><argument_list>(<argument><expr><name>multi_handle</name></expr></argument>, <argument><expr><call><name>make_handle</name><argument_list>(<argument><expr><name>link</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>count</name><operator>++</operator> <operator>==</operator> <name>max_link_per_page</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>xmlFree</name><argument_list>(<argument><expr><name>link</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>xmlXPathFreeObject</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>count</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>is_html</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>ctype</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>ctype</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>ctype</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">10</literal> <operator>&amp;&amp;</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>ctype</name></expr></argument>, <argument><expr><literal type="string">"text/html"</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGINT</name></expr></argument>, <argument><expr><name>sighandler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>LIBXML_TEST_VERSION</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>curl_global_init</name><argument_list>(<argument><expr><name>CURL_GLOBAL_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>CURLM</name> <modifier>*</modifier></type><name>multi_handle</name> <init>= <expr><call><name>curl_multi_init</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>curl_multi_setopt</name><argument_list>(<argument><expr><name>multi_handle</name></expr></argument>, <argument><expr><name>CURLMOPT_MAX_TOTAL_CONNECTIONS</name></expr></argument>, <argument><expr><name>max_con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>curl_multi_setopt</name><argument_list>(<argument><expr><name>multi_handle</name></expr></argument>, <argument><expr><name>CURLMOPT_MAX_HOST_CONNECTIONS</name></expr></argument>, <argument><expr><literal type="number">6L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CURLPIPE_MULTIPLEX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>curl_multi_setopt</name><argument_list>(<argument><expr><name>multi_handle</name></expr></argument>, <argument><expr><name>CURLMOPT_PIPELINING</name></expr></argument>, <argument><expr><name>CURLPIPE_MULTIPLEX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<expr_stmt><expr><call><name>curl_multi_add_handle</name><argument_list>(<argument><expr><name>multi_handle</name></expr></argument>, <argument><expr><call><name>make_handle</name><argument_list>(<argument><expr><name>start_page</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>msgs_left</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pending</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>complete</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>still_running</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<while>while<condition>(<expr><name>still_running</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>pending_interrupt</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>numfds</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>curl_multi_wait</name><argument_list>(<argument><expr><name>multi_handle</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1000</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>numfds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>curl_multi_perform</name><argument_list>(<argument><expr><name>multi_handle</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>still_running</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>CURLMsg</name> <modifier>*</modifier></type><name>m</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<while>while<condition>(<expr><operator>(</operator><name>m</name> <operator>=</operator> <call><name>curl_multi_info_read</name><argument_list>(<argument><expr><name>multi_handle</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>msgs_left</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>msg</name></name> <operator>==</operator> <name>CURLMSG_DONE</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>CURL</name> <modifier>*</modifier></type><name>handle</name> <init>= <expr><name><name>m</name><operator>-&gt;</operator><name>easy_handle</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>url</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>memory</name> <modifier>*</modifier></type><name>mem</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>curl_easy_getinfo</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>CURLINFO_PRIVATE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>curl_easy_getinfo</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>CURLINFO_EFFECTIVE_URL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>result</name></name> <operator>==</operator> <name>CURLE_OK</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>res_status</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>curl_easy_getinfo</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>CURLINFO_RESPONSE_CODE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>res_status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>res_status</name> <operator>==</operator> <literal type="number">200</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ctype</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>curl_easy_getinfo</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>CURLINFO_CONTENT_TYPE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ctype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"[%d] HTTP 200 (%s): %s\n"</literal></expr></argument>, <argument><expr><name>complete</name></expr></argument>, <argument><expr><name>ctype</name></expr></argument>, <argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><call><name>is_html</name><argument_list>(<argument><expr><name>ctype</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>mem</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;</operator> <literal type="number">100</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>pending</name> <operator>&lt;</operator> <name>max_requests</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>complete</name> <operator>+</operator> <name>pending</name><operator>)</operator> <operator>&lt;</operator> <name>max_total</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>pending</name> <operator>+=</operator> <call><name>follow_links</name><argument_list>(<argument><expr><name>multi_handle</name></expr></argument>, <argument><expr><name>mem</name></expr></argument>, <argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>still_running</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"[%d] HTTP %d: %s\n"</literal></expr></argument>, <argument><expr><name>complete</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>res_status</name></expr></argument>, <argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"[%d] Connection failure: %s\n"</literal></expr></argument>, <argument><expr><name>complete</name></expr></argument>, <argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>curl_multi_remove_handle</name><argument_list>(<argument><expr><name>multi_handle</name></expr></argument>, <argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>curl_easy_cleanup</name><argument_list>(<argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>mem</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>mem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>complete</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>pending</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block></while>
<expr_stmt><expr><call><name>curl_multi_cleanup</name><argument_list>(<argument><expr><name>multi_handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>curl_global_cleanup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
