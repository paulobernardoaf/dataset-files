<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\curl-analysis\_cppstats_featurelocations\curl\docs\examples\smooth-gtk-thread.c">


































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;gtk/gtk.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;glib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pthread.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;curl/curl.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUMT</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<decl_stmt><decl><type><name>pthread_mutex_t</name></type> <name>lock</name> <init>= <expr><name>PTHREAD_MUTEX_INITIALIZER</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gint</name></type> <name>num_urls</name> <init>= <expr><literal type="number">9</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name><name>urls</name><index>[]</index></name><init>= <expr><block>{
<expr><literal type="string">"90022"</literal></expr>,
<expr><literal type="string">"90023"</literal></expr>,
<expr><literal type="string">"90024"</literal></expr>,
<expr><literal type="string">"90025"</literal></expr>,
<expr><literal type="string">"90026"</literal></expr>,
<expr><literal type="string">"90027"</literal></expr>,
<expr><literal type="string">"90028"</literal></expr>,
<expr><literal type="string">"90029"</literal></expr>,
<expr><literal type="string">"90030"</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><name>size_t</name></type> <name>write_file</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>nmemb</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<return>return <expr><call><name>fwrite</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>nmemb</name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name> <modifier>*</modifier></type><name>pull_one_url</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>NaN</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while<condition>(<expr><name>j</name> <operator>&lt;</operator> <name>num_urls</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>CURL</name> <modifier>*</modifier></type><name>curl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier></type><name>http</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"j = %d\n"</literal></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>http</name> <operator>=</operator>
<call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"xoap.weather.com/weather/local/%s?cc=*&amp;dayf=5&amp;unit=i\n"</literal></expr></argument>,
<argument><expr><name><name>urls</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"http %s"</literal></expr></argument>, <argument><expr><name>http</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>curl</name> <operator>=</operator> <call><name>curl_easy_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>curl</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>outfile</name> <init>= <expr><call><name>fopen</name><argument_list>(<argument><expr><name><name>urls</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"wb"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_URL</name></expr></argument>, <argument><expr><name>http</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_WRITEDATA</name></expr></argument>, <argument><expr><name>outfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_WRITEFUNCTION</name></expr></argument>, <argument><expr><name>write_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>curl_easy_perform</name><argument_list>(<argument><expr><name>curl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>outfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"fclose\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>curl_easy_cleanup</name><argument_list>(<argument><expr><name>curl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>http</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>sleep</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while> 
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>gboolean</name></type> <name>pulse_bar</name><parameter_list>(<parameter><decl><type><name>gpointer</name></type> <name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>gdk_threads_enter</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gtk_progress_bar_pulse</name><argument_list>(<argument><expr><call><name>GTK_PROGRESS_BAR</name> <argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gdk_threads_leave</name><argument_list>()</argument_list></call></expr>;</expr_stmt>




<return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>create_thread</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>progress_bar</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>pthread_t</name></type> <name><name>tid</name><index>[<expr><name>NUMT</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>


<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NUMT</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name>num_urls</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>error</name> <init>= <expr><call><name>pthread_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tid</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, 
<argument><expr><name>pull_one_url</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><literal type="number">0</literal> <operator>!=</operator> <name>error</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Couldn't run thread number %d, errno %d\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Thread %d, gets %s\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>urls</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></for>


<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NUMT</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name>num_urls</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>pthread_join</name><argument_list>(<argument><expr><name><name>tid</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Thread %d terminated\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>



<expr_stmt><expr><call><name>g_source_remove</name><argument_list>(<argument><expr><call><name>GPOINTER_TO_INT</name><argument_list>(<argument><expr><call><name>g_object_get_data</name><argument_list>(<argument><expr><call><name>G_OBJECT</name><argument_list>(<argument><expr><name>progress_bar</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><literal type="string">"pulse_id"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>gtk_widget_destroy</name><argument_list>(<argument><expr><name>progress_bar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>gboolean</name></type> <name>cb_delete</name><parameter_list>(<parameter><decl><type><name>GtkWidget</name> <modifier>*</modifier></type><name>window</name></decl></parameter>, <parameter><decl><type><name>gpointer</name></type> <name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>gtk_main_quit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>GtkWidget</name> <modifier>*</modifier></type><name>top_window</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>outside_frame</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>inside_frame</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>progress_bar</name></decl>;</decl_stmt>


<expr_stmt><expr><call><name>curl_global_init</name><argument_list>(<argument><expr><name>CURL_GLOBAL_ALL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>g_thread_init</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gdk_threads_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gdk_threads_enter</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gtk_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>argc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>top_window</name> <operator>=</operator> <call><name>gtk_window_new</name><argument_list>(<argument><expr><name>GTK_WINDOW_TOPLEVEL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>outside_frame</name> <operator>=</operator> <call><name>gtk_frame_new</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gtk_frame_set_shadow_type</name><argument_list>(<argument><expr><call><name>GTK_FRAME</name><argument_list>(<argument><expr><name>outside_frame</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>GTK_SHADOW_OUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gtk_container_add</name><argument_list>(<argument><expr><call><name>GTK_CONTAINER</name><argument_list>(<argument><expr><name>top_window</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>outside_frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>inside_frame</name> <operator>=</operator> <call><name>gtk_frame_new</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gtk_frame_set_shadow_type</name><argument_list>(<argument><expr><call><name>GTK_FRAME</name><argument_list>(<argument><expr><name>inside_frame</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>GTK_SHADOW_IN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gtk_container_set_border_width</name><argument_list>(<argument><expr><call><name>GTK_CONTAINER</name><argument_list>(<argument><expr><name>inside_frame</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gtk_container_add</name><argument_list>(<argument><expr><call><name>GTK_CONTAINER</name><argument_list>(<argument><expr><name>outside_frame</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>inside_frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>progress_bar</name> <operator>=</operator> <call><name>gtk_progress_bar_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gtk_progress_bar_pulse</name><argument_list>(<argument><expr><call><name>GTK_PROGRESS_BAR</name> <argument_list>(<argument><expr><name>progress_bar</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>gint</name></type> <name>pulse_ref</name> <init>= <expr><call><name>g_timeout_add</name><argument_list>(<argument><expr><literal type="number">300</literal></expr></argument>, <argument><expr><name>pulse_bar</name></expr></argument>, <argument><expr><name>progress_bar</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>g_object_set_data</name><argument_list>(<argument><expr><call><name>G_OBJECT</name><argument_list>(<argument><expr><name>progress_bar</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"pulse_id"</literal></expr></argument>,
<argument><expr><call><name>GINT_TO_POINTER</name><argument_list>(<argument><expr><name>pulse_ref</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gtk_container_add</name><argument_list>(<argument><expr><call><name>GTK_CONTAINER</name><argument_list>(<argument><expr><name>inside_frame</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>progress_bar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gtk_widget_show_all</name><argument_list>(<argument><expr><name>top_window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"gtk_widget_show_all\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>g_signal_connect</name><argument_list>(<argument><expr><call><name>G_OBJECT</name> <argument_list>(<argument><expr><name>top_window</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"delete-event"</literal></expr></argument>,
<argument><expr><call><name>G_CALLBACK</name><argument_list>(<argument><expr><name>cb_delete</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>g_thread_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>create_thread</name></expr></argument>, <argument><expr><name>progress_bar</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"can't create the thread"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>gtk_main</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gdk_threads_leave</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"gdk_threads_leave\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
