<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\curl-analysis\_cppstats_featurelocations\curl\docs\examples\10-at-a-time.c">

























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;curl/curl.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>urls</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"https://www.microsoft.com"</literal></expr>,
<expr><literal type="string">"https://opensource.org"</literal></expr>,
<expr><literal type="string">"https://www.google.com"</literal></expr>,
<expr><literal type="string">"https://www.yahoo.com"</literal></expr>,
<expr><literal type="string">"https://www.ibm.com"</literal></expr>,
<expr><literal type="string">"https://www.mysql.com"</literal></expr>,
<expr><literal type="string">"https://www.oracle.com"</literal></expr>,
<expr><literal type="string">"https://www.ripe.net"</literal></expr>,
<expr><literal type="string">"https://www.iana.org"</literal></expr>,
<expr><literal type="string">"https://www.amazon.com"</literal></expr>,
<expr><literal type="string">"https://www.netcraft.com"</literal></expr>,
<expr><literal type="string">"https://www.heise.de"</literal></expr>,
<expr><literal type="string">"https://www.chip.de"</literal></expr>,
<expr><literal type="string">"https://www.ca.com"</literal></expr>,
<expr><literal type="string">"https://www.cnet.com"</literal></expr>,
<expr><literal type="string">"https://www.mozilla.org"</literal></expr>,
<expr><literal type="string">"https://www.cnn.com"</literal></expr>,
<expr><literal type="string">"https://www.wikipedia.org"</literal></expr>,
<expr><literal type="string">"https://www.dell.com"</literal></expr>,
<expr><literal type="string">"https://www.hp.com"</literal></expr>,
<expr><literal type="string">"https://www.cert.org"</literal></expr>,
<expr><literal type="string">"https://www.mit.edu"</literal></expr>,
<expr><literal type="string">"https://www.nist.gov"</literal></expr>,
<expr><literal type="string">"https://www.ebay.com"</literal></expr>,
<expr><literal type="string">"https://www.playstation.com"</literal></expr>,
<expr><literal type="string">"https://www.uefa.com"</literal></expr>,
<expr><literal type="string">"https://www.ieee.org"</literal></expr>,
<expr><literal type="string">"https://www.apple.com"</literal></expr>,
<expr><literal type="string">"https://www.symantec.com"</literal></expr>,
<expr><literal type="string">"https://www.zdnet.com"</literal></expr>,
<expr><literal type="string">"https://www.fujitsu.com/global/"</literal></expr>,
<expr><literal type="string">"https://www.supermicro.com"</literal></expr>,
<expr><literal type="string">"https://www.hotmail.com"</literal></expr>,
<expr><literal type="string">"https://www.ietf.org"</literal></expr>,
<expr><literal type="string">"https://www.bbc.co.uk"</literal></expr>,
<expr><literal type="string">"https://news.google.com"</literal></expr>,
<expr><literal type="string">"https://www.foxnews.com"</literal></expr>,
<expr><literal type="string">"https://www.msn.com"</literal></expr>,
<expr><literal type="string">"https://www.wired.com"</literal></expr>,
<expr><literal type="string">"https://www.sky.com"</literal></expr>,
<expr><literal type="string">"https://www.usatoday.com"</literal></expr>,
<expr><literal type="string">"https://www.cbs.com"</literal></expr>,
<expr><literal type="string">"https://www.nbc.com/"</literal></expr>,
<expr><literal type="string">"https://slashdot.org"</literal></expr>,
<expr><literal type="string">"https://www.informationweek.com"</literal></expr>,
<expr><literal type="string">"https://apache.org"</literal></expr>,
<expr><literal type="string">"https://www.un.org"</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_PARALLEL</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUM_URLS</name></cpp:macro> <cpp:value>sizeof(urls)/sizeof(char *)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>size_t</name></type> <name>write_cb</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>l</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userp</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>data</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>userp</name></expr>;</expr_stmt>
<return>return <expr><name>n</name><operator>*</operator><name>l</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>add_transfer</name><parameter_list>(<parameter><decl><type><name>CURLM</name> <modifier>*</modifier></type><name>cm</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CURL</name> <modifier>*</modifier></type><name>eh</name> <init>= <expr><call><name>curl_easy_init</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name>eh</name></expr></argument>, <argument><expr><name>CURLOPT_WRITEFUNCTION</name></expr></argument>, <argument><expr><name>write_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name>eh</name></expr></argument>, <argument><expr><name>CURLOPT_URL</name></expr></argument>, <argument><expr><name><name>urls</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name>eh</name></expr></argument>, <argument><expr><name>CURLOPT_PRIVATE</name></expr></argument>, <argument><expr><name><name>urls</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>curl_multi_add_handle</name><argument_list>(<argument><expr><name>cm</name></expr></argument>, <argument><expr><name>eh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CURLM</name> <modifier>*</modifier></type><name>cm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CURLMsg</name> <modifier>*</modifier></type><name>msg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>transfers</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>msgs_left</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>still_alive</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>curl_global_init</name><argument_list>(<argument><expr><name>CURL_GLOBAL_ALL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cm</name> <operator>=</operator> <call><name>curl_multi_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>curl_multi_setopt</name><argument_list>(<argument><expr><name>cm</name></expr></argument>, <argument><expr><name>CURLMOPT_MAXCONNECTS</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><name>MAX_PARALLEL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>transfers</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>transfers</name> <operator>&lt;</operator> <name>MAX_PARALLEL</name></expr>;</condition> <incr><expr><name>transfers</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>add_transfer</name><argument_list>(<argument><expr><name>cm</name></expr></argument>, <argument><expr><name>transfers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<do>do <block>{<block_content>
<expr_stmt><expr><call><name>curl_multi_perform</name><argument_list>(<argument><expr><name>cm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>still_alive</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while<condition>(<expr><operator>(</operator><name>msg</name> <operator>=</operator> <call><name>curl_multi_info_read</name><argument_list>(<argument><expr><name>cm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>msgs_left</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>msg</name><operator>-&gt;</operator><name>msg</name></name> <operator>==</operator> <name>CURLMSG_DONE</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>url</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CURL</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><name><name>msg</name><operator>-&gt;</operator><name>easy_handle</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>curl_easy_getinfo</name><argument_list>(<argument><expr><name><name>msg</name><operator>-&gt;</operator><name>easy_handle</name></name></expr></argument>, <argument><expr><name>CURLINFO_PRIVATE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"R: %d - %s &lt;%s&gt;\n"</literal></expr></argument>,
<argument><expr><name><name>msg</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>result</name></name></expr></argument>, <argument><expr><call><name>curl_easy_strerror</name><argument_list>(<argument><expr><name><name>msg</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>result</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>curl_multi_remove_handle</name><argument_list>(<argument><expr><name>cm</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>curl_easy_cleanup</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"E: CURLMsg (%d)\n"</literal></expr></argument>, <argument><expr><name><name>msg</name><operator>-&gt;</operator><name>msg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if<condition>(<expr><name>transfers</name> <operator>&lt;</operator> <name>NUM_URLS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>add_transfer</name><argument_list>(<argument><expr><name>cm</name></expr></argument>, <argument><expr><name>transfers</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></while>
<if_stmt><if>if<condition>(<expr><name>still_alive</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>curl_multi_wait</name><argument_list>(<argument><expr><name>cm</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1000</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block> while<condition>(<expr><name>still_alive</name> <operator>||</operator> <operator>(</operator><name>transfers</name> <operator>&lt;</operator> <name>NUM_URLS</name><operator>)</operator></expr>)</condition>;</do>

<expr_stmt><expr><call><name>curl_multi_cleanup</name><argument_list>(<argument><expr><name>cm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>curl_global_cleanup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>EXIT_SUCCESS</name></expr>;</return>
</block_content>}</block></function>
</unit>
