<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\curl-analysis\_cppstats_featurelocations\curl\docs\examples\curlx.c">



















































































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;curl/curl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;openssl/x509v3.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;openssl/x509_vfy.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;openssl/crypto.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;openssl/lhash.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;openssl/objects.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;openssl/err.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;openssl/evp.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;openssl/x509.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;openssl/pkcs12.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;openssl/bio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;openssl/ssl.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>curlx_usage</name><index>[]</index></name><init>=<expr><block>{
<expr><literal type="string">"usage: curlx args\n"</literal></expr>,
<expr><literal type="string">" -p12 arg - tia file "</literal></expr>,
<expr><literal type="string">" -envpass arg - environment variable which content the tia private"</literal>
<literal type="string">" key password"</literal></expr>,
<expr><literal type="string">" -out arg - output file (response)- default stdout"</literal></expr>,
<expr><literal type="string">" -in arg - input file (request)- default stdin"</literal></expr>,
<expr><literal type="string">" -connect arg - URL of the server for the connection ex:"</literal>
<literal type="string">" www.openevidence.org"</literal></expr>,
<expr><literal type="string">" -mimetype arg - MIME type for data in ex : application/timestamp-query"</literal>
<literal type="string">" or application/dvcs -default application/timestamp-query"</literal></expr>,
<expr><literal type="string">" -acceptmime arg - MIME type acceptable for the response ex : "</literal>
<literal type="string">"application/timestamp-response or application/dvcs -default none"</literal></expr>,
<expr><literal type="string">" -accesstype arg - an Object identifier in an AIA/SIA method, e.g."</literal>
<literal type="string">" AD_DVCS or ad_timestamping"</literal></expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>













<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ZERO_NULL</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>



<typedef>typedef <type><struct>struct <name>sslctxparm_st</name> <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p12file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pst</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PKCS12</name> <modifier>*</modifier></type><name>p12</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>EVP_PKEY</name> <modifier>*</modifier></type><name>pkey</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>X509</name> <modifier>*</modifier></type><name>usercert</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>STACK_OF</name><argument_list>(<argument><expr><name>X509</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>ca</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>CURL</name> <modifier>*</modifier></type><name>curl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BIO</name> <modifier>*</modifier></type><name>errorbio</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>accesstype</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>verbose</name></decl>;</decl_stmt>

}</block></struct></type> <name>sslctxparm</name>;</typedef>



<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>ia5string</name><parameter_list>(<parameter><decl><type><name>ASN1_IA5STRING</name> <modifier>*</modifier></type><name>ia5</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>ia5</name> <operator>||</operator> <operator>!</operator><name><name>ia5</name><operator>-&gt;</operator><name>length</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>OPENSSL_malloc</name><argument_list>(<argument><expr><name><name>ia5</name><operator>-&gt;</operator><name>length</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name><name>ia5</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>ia5</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp</name><index>[<expr><name><name>ia5</name><operator>-&gt;</operator><name>length</name></name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>tmp</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>my_get_ext</name><parameter_list>(<parameter><decl><type><name>X509</name> <modifier>*</modifier></type><name>cert</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>type</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>extensiontype</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>STACK_OF</name><argument_list>(<argument><expr><name>ACCESS_DESCRIPTION</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>accessinfo</name></expr>;</expr_stmt>
<expr_stmt><expr><name>accessinfo</name> <operator>=</operator> <call><name>X509_get_ext_d2i</name><argument_list>(<argument><expr><name>cert</name></expr></argument>, <argument><expr><name>extensiontype</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>sk_ACCESS_DESCRIPTION_num</name><argument_list>(<argument><expr><name>accessinfo</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>sk_ACCESS_DESCRIPTION_num</name><argument_list>(<argument><expr><name>accessinfo</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>ACCESS_DESCRIPTION</name> <modifier>*</modifier></type> <name>ad</name> <init>= <expr><call><name>sk_ACCESS_DESCRIPTION_value</name><argument_list>(<argument><expr><name>accessinfo</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><call><name>OBJ_obj2nid</name><argument_list>(<argument><expr><name><name>ad</name><operator>-&gt;</operator><name>method</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>type</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>ad</name><operator>-&gt;</operator><name>location</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>GEN_URI</name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>ia5string</name><argument_list>(<argument><expr><name><name>ad</name><operator>-&gt;</operator><name>location</name><operator>-&gt;</operator><name>d</name><operator>.</operator><name>ia5</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>int</name></type> <name>ssl_app_verify_callback</name><parameter_list>(<parameter><decl><type><name>X509_STORE_CTX</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>sslctxparm</name> <modifier>*</modifier></type> <name>p</name> <init>= <expr><operator>(</operator><name>sslctxparm</name> <operator>*</operator><operator>)</operator> <name>arg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ok</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>verbose</name></name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>BIO_printf</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>errorbio</name></name></expr></argument>, <argument><expr><literal type="string">"entering ssl_app_verify_callback\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ok</name> <operator>=</operator> <call><name>X509_verify_cert</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>ok</name> <operator>&amp;&amp;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>cert</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>accessinfo</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>verbose</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>X509_print_ex</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>errorbio</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cert</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>accessinfo</name> <operator>=</operator> <call><name>my_get_ext</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cert</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>accesstype</name></name></expr></argument>, <argument><expr><name>NID_sinfo_access</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>accessinfo</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>verbose</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>BIO_printf</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>errorbio</name></name></expr></argument>, <argument><expr><literal type="string">"Setting URL from SIA to: %s\n"</literal></expr></argument>, <argument><expr><name>accessinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>curl</name></name></expr></argument>, <argument><expr><name>CURLOPT_URL</name></expr></argument>, <argument><expr><name>accessinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><name>accessinfo</name> <operator>=</operator> <call><name>my_get_ext</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cert</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>accesstype</name></name></expr></argument>,
<argument><expr><name>NID_info_access</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>verbose</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>BIO_printf</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>errorbio</name></name></expr></argument>, <argument><expr><literal type="string">"Setting URL from AIA to: %s\n"</literal></expr></argument>, <argument><expr><name>accessinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>curl</name></name></expr></argument>, <argument><expr><name>CURLOPT_URL</name></expr></argument>, <argument><expr><name>accessinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>verbose</name></name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>BIO_printf</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>errorbio</name></name></expr></argument>, <argument><expr><literal type="string">"leaving ssl_app_verify_callback with %d\n"</literal></expr></argument>, <argument><expr><name>ok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>ok</name></expr>;</return>
</block_content>}</block></function>









<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>sslctxfun</name><parameter_list>(<parameter><decl><type><name>CURL</name> <modifier>*</modifier></type><name>curl</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>sslctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>parm</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>sslctxparm</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>sslctxparm</name> <operator>*</operator><operator>)</operator> <name>parm</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SSL_CTX</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><operator>(</operator><name>SSL_CTX</name> <operator>*</operator><operator>)</operator> <name>sslctx</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>SSL_CTX_use_certificate</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>usercert</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>BIO_printf</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>errorbio</name></name></expr></argument>, <argument><expr><literal type="string">"SSL_CTX_use_certificate problem\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>err</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>SSL_CTX_use_PrivateKey</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>pkey</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>BIO_printf</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>errorbio</name></name></expr></argument>, <argument><expr><literal type="string">"SSL_CTX_use_PrivateKey\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>err</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>SSL_CTX_check_private_key</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>BIO_printf</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>errorbio</name></name></expr></argument>, <argument><expr><literal type="string">"SSL_CTX_check_private_key\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>err</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>SSL_CTX_set_quiet_shutdown</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SSL_CTX_set_cipher_list</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="string">"RC4-MD5"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SSL_CTX_set_mode</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>SSL_MODE_AUTO_RETRY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>X509_STORE_add_cert</name><argument_list>(<argument><expr><call><name>SSL_CTX_get_cert_store</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>sk_X509_value</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>ca</name></name></expr></argument>, <argument><expr><call><name>sk_X509_num</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>ca</name></name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SSL_CTX_set_verify_depth</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SSL_CTX_set_verify</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>SSL_VERIFY_PEER</name></expr></argument>, <argument><expr><name>ZERO_NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SSL_CTX_set_cert_verify_callback</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>ssl_app_verify_callback</name></expr></argument>, <argument><expr><name>parm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>
<label><name>err</name>:</label>
<expr_stmt><expr><call><name>ERR_print_errors</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>errorbio</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_SSL_CERTPROBLEM</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>BIO</name><modifier>*</modifier></type> <name>in</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BIO</name><modifier>*</modifier></type> <name>out</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>outfile</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>infile</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>tabLength</name> <init>= <expr><literal type="number">100</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>binaryptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>mimetype</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>mimetypeaccept</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>contenttype</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>hostporturl</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BIO</name> <modifier>*</modifier></type><name>p12bio</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>args</name> <init>= <expr><name>argv</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>serverurl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sslctxparm</name></type> <name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>response</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CURLcode</name></type> <name>res</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>curl_slist</name></name> <modifier>*</modifier></type><name>headers</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>badarg</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>binaryptr</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>tabLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>.</operator><name>errorbio</name></name> <operator>=</operator> <call><name>BIO_new_fp</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><name>BIO_NOCLOSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>curl_global_init</name><argument_list>(<argument><expr><name>CURL_GLOBAL_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><call><name>OpenSSL_add_all_ciphers</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>OpenSSL_add_all_digests</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ERR_load_crypto_strings</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<while>while<condition>(<expr><operator>*</operator><name>args</name> <operator>&amp;&amp;</operator> <operator>*</operator><name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><operator>*</operator><name>args</name></expr></argument>, <argument><expr><literal type="string">"-in"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>args</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>infile</name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>++</operator><name>args</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>badarg</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><operator>*</operator><name>args</name></expr></argument>, <argument><expr><literal type="string">"-out"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>args</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>outfile</name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>++</operator><name>args</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>badarg</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><operator>!</operator><call><name>strcmp</name> <argument_list>(<argument><expr><operator>*</operator><name>args</name></expr></argument>, <argument><expr><literal type="string">"-p12"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>args</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>p</name><operator>.</operator><name>p12file</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>++</operator><name>args</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>badarg</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><operator>*</operator><name>args</name></expr></argument>, <argument><expr><literal type="string">"-envpass"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>args</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>p</name><operator>.</operator><name>pst</name></name> <operator>=</operator> <call><name>getenv</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><operator>++</operator><name>args</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>badarg</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><operator>*</operator><name>args</name></expr></argument>, <argument><expr><literal type="string">"-connect"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>args</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>hostporturl</name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>++</operator><name>args</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>badarg</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><operator>*</operator><name>args</name></expr></argument>, <argument><expr><literal type="string">"-mimetype"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>args</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>mimetype</name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>++</operator><name>args</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>badarg</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><operator>*</operator><name>args</name></expr></argument>, <argument><expr><literal type="string">"-acceptmime"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>args</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>mimetypeaccept</name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>++</operator><name>args</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>badarg</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><operator>*</operator><name>args</name></expr></argument>, <argument><expr><literal type="string">"-accesstype"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>args</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>p</name><operator>.</operator><name>accesstype</name></name> <operator>=</operator> <call><name>OBJ_obj2nid</name><argument_list>(<argument><expr><call><name>OBJ_txt2obj</name><argument_list>(<argument><expr><operator>*</operator><operator>++</operator><name>args</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>p</name><operator>.</operator><name>accesstype</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>badarg</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>badarg</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><operator>*</operator><name>args</name></expr></argument>, <argument><expr><literal type="string">"-verbose"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>p</name><operator>.</operator><name>verbose</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>badarg</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>args</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>

<if_stmt><if>if<condition>(<expr><name>mimetype</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>mimetypeaccept</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>p</name><operator>.</operator><name>p12file</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>badarg</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>badarg</name></expr>)</condition> <block>{<block_content>
<for>for<control>(<init><expr><name>pp</name> <operator>=</operator> <name>curlx_usage</name></expr>;</init> <condition><expr><operator>(</operator><operator>*</operator><name>pp</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>;</condition> <incr><expr><name>pp</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>BIO_printf</name><argument_list>(<argument><expr><name><name>p</name><operator>.</operator><name>errorbio</name></name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><operator>*</operator><name>pp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>BIO_printf</name><argument_list>(<argument><expr><name><name>p</name><operator>.</operator><name>errorbio</name></name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>err</name>;</goto>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><name>in</name> <operator>=</operator> <call><name>BIO_new</name><argument_list>(<argument><expr><call><name>BIO_s_file</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>in</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>BIO_printf</name><argument_list>(<argument><expr><name><name>p</name><operator>.</operator><name>errorbio</name></name></expr></argument>, <argument><expr><literal type="string">"Error setting input bio\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>err</name>;</goto>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><name>infile</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>BIO_set_fp</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>stdin</name></expr></argument>, <argument><expr><name>BIO_NOCLOSE</name><operator>|</operator><name>BIO_FP_TEXT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>(<expr><call><name>BIO_read_filename</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>infile</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>BIO_printf</name><argument_list>(<argument><expr><name><name>p</name><operator>.</operator><name>errorbio</name></name></expr></argument>, <argument><expr><literal type="string">"Error opening input file %s\n"</literal></expr></argument>, <argument><expr><name>infile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BIO_free</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>err</name>;</goto>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>BIO_new</name><argument_list>(<argument><expr><call><name>BIO_s_file</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>out</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>BIO_printf</name><argument_list>(<argument><expr><name><name>p</name><operator>.</operator><name>errorbio</name></name></expr></argument>, <argument><expr><literal type="string">"Error setting output bio.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>err</name>;</goto>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><name>outfile</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>BIO_set_fp</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>stdout</name></expr></argument>, <argument><expr><name>BIO_NOCLOSE</name><operator>|</operator><name>BIO_FP_TEXT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>(<expr><call><name>BIO_write_filename</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>outfile</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>BIO_printf</name><argument_list>(<argument><expr><name><name>p</name><operator>.</operator><name>errorbio</name></name></expr></argument>, <argument><expr><literal type="string">"Error opening output file %s\n"</literal></expr></argument>, <argument><expr><name>outfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BIO_free</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>err</name>;</goto>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>p</name><operator>.</operator><name>errorbio</name></name> <operator>=</operator> <call><name>BIO_new_fp</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><name>BIO_NOCLOSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>.</operator><name>curl</name></name> <operator>=</operator> <call><name>curl_easy_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>p</name><operator>.</operator><name>curl</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>BIO_printf</name><argument_list>(<argument><expr><name><name>p</name><operator>.</operator><name>errorbio</name></name></expr></argument>, <argument><expr><literal type="string">"Cannot init curl lib\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>err</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p12bio</name> <operator>=</operator> <call><name>BIO_new_file</name><argument_list>(<argument><expr><name><name>p</name><operator>.</operator><name>p12file</name></name></expr></argument>, <argument><expr><literal type="string">"rb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>p12bio</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>BIO_printf</name><argument_list>(<argument><expr><name><name>p</name><operator>.</operator><name>errorbio</name></name></expr></argument>, <argument><expr><literal type="string">"Error opening P12 file %s\n"</literal></expr></argument>, <argument><expr><name><name>p</name><operator>.</operator><name>p12file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>err</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>p</name><operator>.</operator><name>p12</name></name> <operator>=</operator> <call><name>d2i_PKCS12_bio</name><argument_list>(<argument><expr><name>p12bio</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>p</name><operator>.</operator><name>p12</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>BIO_printf</name><argument_list>(<argument><expr><name><name>p</name><operator>.</operator><name>errorbio</name></name></expr></argument>, <argument><expr><literal type="string">"Cannot decode P12 structure %s\n"</literal></expr></argument>, <argument><expr><name><name>p</name><operator>.</operator><name>p12file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>err</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p</name><operator>.</operator><name>ca</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><call><name>PKCS12_parse</name> <argument_list>(<argument><expr><name><name>p</name><operator>.</operator><name>p12</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>.</operator><name>pst</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>p</name><operator>.</operator><name>pkey</name></name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>p</name><operator>.</operator><name>usercert</name></name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>p</name><operator>.</operator><name>ca</name></name><operator>)</operator></expr></argument> )</argument_list></call> <operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>BIO_printf</name><argument_list>(<argument><expr><name><name>p</name><operator>.</operator><name>errorbio</name></name></expr></argument>, <argument><expr><literal type="string">"Invalid P12 structure in %s\n"</literal></expr></argument>, <argument><expr><name><name>p</name><operator>.</operator><name>p12file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>err</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>sk_X509_num</name><argument_list>(<argument><expr><name><name>p</name><operator>.</operator><name>ca</name></name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>BIO_printf</name><argument_list>(<argument><expr><name><name>p</name><operator>.</operator><name>errorbio</name></name></expr></argument>, <argument><expr><literal type="string">"No trustworthy CA given.%s\n"</literal></expr></argument>, <argument><expr><name><name>p</name><operator>.</operator><name>p12file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>err</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>p</name><operator>.</operator><name>verbose</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>X509_print_ex</name><argument_list>(<argument><expr><name><name>p</name><operator>.</operator><name>errorbio</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>.</operator><name>usercert</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



<if_stmt><if>if<condition>(<expr><name>hostporturl</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>hostporturl</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">9</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>serverurl</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>serverurl</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="string">"https://%s"</literal></expr></argument>, <argument><expr><name>hostporturl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><name><name>p</name><operator>.</operator><name>accesstype</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>serverurl</name> <operator>=</operator> <call><name>my_get_ext</name><argument_list>(<argument><expr><name><name>p</name><operator>.</operator><name>usercert</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>.</operator><name>accesstype</name></name></expr></argument>, <argument><expr><name>NID_info_access</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>serverurl</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>BIO_printf</name><argument_list>(<argument><expr><name><name>p</name><operator>.</operator><name>errorbio</name></name></expr></argument>, <argument><expr><literal type="string">"no service URL in user cert "</literal>
<literal type="string">"cherching in others certificats\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for<control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name><operator>&lt;</operator><call><name>sk_X509_num</name><argument_list>(<argument><expr><name><name>p</name><operator>.</operator><name>ca</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>serverurl</name> <operator>=</operator> <call><name>my_get_ext</name><argument_list>(<argument><expr><call><name>sk_X509_value</name><argument_list>(<argument><expr><name><name>p</name><operator>.</operator><name>ca</name></name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>p</name><operator>.</operator><name>accesstype</name></name></expr></argument>,
<argument><expr><name>NID_info_access</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>serverurl</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>serverurl</name> <operator>=</operator> <call><name>my_get_ext</name><argument_list>(<argument><expr><call><name>sk_X509_value</name><argument_list>(<argument><expr><name><name>p</name><operator>.</operator><name>ca</name></name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>p</name><operator>.</operator><name>accesstype</name></name></expr></argument>,
<argument><expr><name>NID_sinfo_access</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>serverurl</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>serverurl</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>BIO_printf</name><argument_list>(<argument><expr><name><name>p</name><operator>.</operator><name>errorbio</name></name></expr></argument>, <argument><expr><literal type="string">"no service URL in certificats,"</literal>
<literal type="string">" check '-accesstype (AD_DVCS | ad_timestamping)'"</literal>
<literal type="string">" or use '-connect'\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>err</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>p</name><operator>.</operator><name>verbose</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>BIO_printf</name><argument_list>(<argument><expr><name><name>p</name><operator>.</operator><name>errorbio</name></name></expr></argument>, <argument><expr><literal type="string">"Service URL: &lt;%s&gt;\n"</literal></expr></argument>, <argument><expr><name>serverurl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name><name>p</name><operator>.</operator><name>curl</name></name></expr></argument>, <argument><expr><name>CURLOPT_URL</name></expr></argument>, <argument><expr><name>serverurl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name><name>p</name><operator>.</operator><name>curl</name></name></expr></argument>, <argument><expr><name>CURLOPT_POSTFIELDS</name></expr></argument>, <argument><expr><name>binaryptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name><name>p</name><operator>.</operator><name>curl</name></name></expr></argument>, <argument><expr><name>CURLOPT_POSTFIELDSIZE</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><name>tabLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><name>contenttype</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><literal type="number">15</literal> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>mimetype</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>contenttype</name></expr></argument>, <argument><expr><literal type="number">15</literal> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>mimetype</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Content-type: %s"</literal></expr></argument>, <argument><expr><name>mimetype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>headers</name> <operator>=</operator> <call><name>curl_slist_append</name><argument_list>(<argument><expr><name>headers</name></expr></argument>, <argument><expr><name>contenttype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name><name>p</name><operator>.</operator><name>curl</name></name></expr></argument>, <argument><expr><name>CURLOPT_HTTPHEADER</name></expr></argument>, <argument><expr><name>headers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>p</name><operator>.</operator><name>verbose</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>BIO_printf</name><argument_list>(<argument><expr><name><name>p</name><operator>.</operator><name>errorbio</name></name></expr></argument>, <argument><expr><literal type="string">"Service URL: &lt;%s&gt;\n"</literal></expr></argument>, <argument><expr><name>serverurl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<block>{<block_content>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>outfp</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>BIO_get_fp</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>outfp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name><name>p</name><operator>.</operator><name>curl</name></name></expr></argument>, <argument><expr><name>CURLOPT_WRITEDATA</name></expr></argument>, <argument><expr><name>outfp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name><name>p</name><operator>.</operator><name>curl</name></name></expr></argument>, <argument><expr><name>CURLOPT_SSL_CTX_FUNCTION</name></expr></argument>, <argument><expr><name>sslctxfun</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>res</name> <operator>!=</operator> <name>CURLE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>BIO_printf</name><argument_list>(<argument><expr><name><name>p</name><operator>.</operator><name>errorbio</name></name></expr></argument>, <argument><expr><literal type="string">"%d %s=%d %d\n"</literal></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>,
<argument><expr><literal type="string">"CURLOPT_SSL_CTX_FUNCTION"</literal></expr></argument>, <argument><expr><name>CURLOPT_SSL_CTX_FUNCTION</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name><name>p</name><operator>.</operator><name>curl</name></name></expr></argument>, <argument><expr><name>CURLOPT_SSL_CTX_DATA</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>lu</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<while>while<condition>(<expr><operator>(</operator><name>lu</name> <operator>=</operator> <call><name>BIO_read</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>binaryptr</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>tabLength</name><operator>-</operator><name>i</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator><literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>+=</operator> <name>lu</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>i</name> <operator>==</operator> <name>tabLength</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>tabLength</name> <operator>+=</operator> <literal type="number">100</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>realloc</name><argument_list>(<argument><expr><name>binaryptr</name></expr></argument>, <argument><expr><name>tabLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>ptr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>BIO_printf</name><argument_list>(<argument><expr><name><name>p</name><operator>.</operator><name>errorbio</name></name></expr></argument>, <argument><expr><literal type="string">"out of memory (realloc returned NULL)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>binaryptr</name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>tabLength</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
</block_content>}</block>


<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name><name>p</name><operator>.</operator><name>curl</name></name></expr></argument>, <argument><expr><name>CURLOPT_POSTFIELDS</name></expr></argument>, <argument><expr><name>binaryptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name><name>p</name><operator>.</operator><name>curl</name></name></expr></argument>, <argument><expr><name>CURLOPT_POSTFIELDSIZE</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><name>tabLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><call><name>BIO_printf</name><argument_list>(<argument><expr><name><name>p</name><operator>.</operator><name>errorbio</name></name></expr></argument>, <argument><expr><literal type="string">"%d %s %d\n"</literal></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><literal type="string">"curl_easy_perform"</literal></expr></argument>,
<argument><expr><name>res</name> <operator>=</operator> <call><name>curl_easy_perform</name><argument_list>(<argument><expr><name><name>p</name><operator>.</operator><name>curl</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<block>{<block_content>
<expr_stmt><expr><call><name>curl_easy_getinfo</name><argument_list>(<argument><expr><name><name>p</name><operator>.</operator><name>curl</name></name></expr></argument>, <argument><expr><name>CURLINFO_CONTENT_TYPE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>response</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>mimetypeaccept</name> <operator>&amp;&amp;</operator> <name><name>p</name><operator>.</operator><name>verbose</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>mimetypeaccept</name></expr></argument>, <argument><expr><name>response</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>BIO_printf</name><argument_list>(<argument><expr><name><name>p</name><operator>.</operator><name>errorbio</name></name></expr></argument>, <argument><expr><literal type="string">"the response has a correct mimetype : %s\n"</literal></expr></argument>,
<argument><expr><name>response</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>BIO_printf</name><argument_list>(<argument><expr><name><name>p</name><operator>.</operator><name>errorbio</name></name></expr></argument>, <argument><expr><literal type="string">"the response doesn\'t have an acceptable "</literal>
<literal type="string">"mime type, it is %s instead of %s\n"</literal></expr></argument>,
<argument><expr><name>response</name></expr></argument>, <argument><expr><name>mimetypeaccept</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>




<label><name>fail</name>:</label>
<expr_stmt><expr><call><name>curl_slist_free_all</name><argument_list>(<argument><expr><name>headers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>curl_easy_cleanup</name><argument_list>(<argument><expr><name><name>p</name><operator>.</operator><name>curl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BIO_free</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BIO_free</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>EXIT_SUCCESS</name><operator>)</operator></expr>;</return>

<label><name>err</name>:</label> <expr_stmt><expr><call><name>BIO_printf</name><argument_list>(<argument><expr><name><name>p</name><operator>.</operator><name>errorbio</name></name></expr></argument>, <argument><expr><literal type="string">"error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
