<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\curl-analysis\_cppstats_featurelocations\curl\docs\examples\debug.c">
























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;curl/curl.h&gt;</cpp:file></cpp:include>

<struct>struct <name>data</name> <block>{
<decl_stmt><decl><type><name>char</name></type> <name>trace_ascii</name></decl>;</decl_stmt> 
}</block>;</struct>

<function><type><specifier>static</specifier>
<name>void</name></type> <name>dump</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>,
<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>,
<parameter><decl><type><name>char</name></type> <name>nohex</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>c</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>width</name> <init>= <expr><literal type="number">0x10</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>nohex</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>width</name> <operator>=</operator> <literal type="number">0x40</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">"%s, %10.10lu bytes (0x%8.8lx)\n"</literal></expr></argument>,
<argument><expr><name>text</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name>size</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>size</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <name>width</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">"%4.4lx: "</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>nohex</name></expr>)</condition> <block>{<block_content>

<for>for<control>(<init><expr><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if<condition>(<expr><name>i</name> <operator>+</operator> <name>c</name> <operator>&lt;</operator> <name>size</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">"%02x "</literal></expr></argument>, <argument><expr><name><name>ptr</name><index>[<expr><name>i</name> <operator>+</operator> <name>c</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>

<for>for<control>(<init><expr><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>(</operator><name>c</name> <operator>&lt;</operator> <name>width</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>i</name> <operator>+</operator> <name>c</name> <operator>&lt;</operator> <name>size</name><operator>)</operator></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>nohex</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>i</name> <operator>+</operator> <name>c</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>size</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>ptr</name><index>[<expr><name>i</name> <operator>+</operator> <name>c</name></expr>]</index></name> <operator>==</operator> <literal type="number">0x0D</literal> <operator>&amp;&amp;</operator>
<name><name>ptr</name><index>[<expr><name>i</name> <operator>+</operator> <name>c</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x0A</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>+=</operator> <operator>(</operator><name>c</name> <operator>+</operator> <literal type="number">2</literal> <operator>-</operator> <name>width</name><operator>)</operator></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">"%c"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name><name>ptr</name><index>[<expr><name>i</name> <operator>+</operator> <name>c</name></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">0x20</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>ptr</name><index>[<expr><name>i</name> <operator>+</operator> <name>c</name></expr>]</index></name><operator>&lt;</operator><literal type="number">0x80</literal><operator>)</operator></expr>?</condition><then><expr><name><name>ptr</name><index>[<expr><name>i</name> <operator>+</operator> <name>c</name></expr>]</index></name></expr></then><else>:<expr><literal type="char">'.'</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>nohex</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>i</name> <operator>+</operator> <name>c</name> <operator>+</operator> <literal type="number">2</literal> <operator>&lt;</operator> <name>size</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>ptr</name><index>[<expr><name>i</name> <operator>+</operator> <name>c</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x0D</literal> <operator>&amp;&amp;</operator>
<name><name>ptr</name><index>[<expr><name>i</name> <operator>+</operator> <name>c</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x0A</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>+=</operator> <operator>(</operator><name>c</name> <operator>+</operator> <literal type="number">3</literal> <operator>-</operator> <name>width</name><operator>)</operator></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>fputc</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></for>
<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier>
<name>int</name></type> <name>my_trace</name><parameter_list>(<parameter><decl><type><name>CURL</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>, <parameter><decl><type><name>curl_infotype</name></type> <name>type</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>data</name></name> <modifier>*</modifier></type><name>config</name> <init>= <expr><operator>(</operator>struct <name>data</name> <operator>*</operator><operator>)</operator><name>userp</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl>;</decl_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>handle</name></expr>;</expr_stmt> 

<switch>switch<condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>CURLINFO_TEXT</name></expr>:</case>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"== Info: %s"</literal></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<default>default:</default> 
<return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><name>CURLINFO_HEADER_OUT</name></expr>:</case>
<expr_stmt><expr><name>text</name> <operator>=</operator> <literal type="string">"=&gt; Send header"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CURLINFO_DATA_OUT</name></expr>:</case>
<expr_stmt><expr><name>text</name> <operator>=</operator> <literal type="string">"=&gt; Send data"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CURLINFO_SSL_DATA_OUT</name></expr>:</case>
<expr_stmt><expr><name>text</name> <operator>=</operator> <literal type="string">"=&gt; Send SSL data"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CURLINFO_HEADER_IN</name></expr>:</case>
<expr_stmt><expr><name>text</name> <operator>=</operator> <literal type="string">"&lt;= Recv header"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CURLINFO_DATA_IN</name></expr>:</case>
<expr_stmt><expr><name>text</name> <operator>=</operator> <literal type="string">"&lt;= Recv data"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CURLINFO_SSL_DATA_IN</name></expr>:</case>
<expr_stmt><expr><name>text</name> <operator>=</operator> <literal type="string">"&lt;= Recv SSL data"</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<expr_stmt><expr><call><name>dump</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><name>stderr</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>data</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name><name>config</name><operator>-&gt;</operator><name>trace_ascii</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CURL</name> <modifier>*</modifier></type><name>curl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>res</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>data</name></name></type> <name>config</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>config</name><operator>.</operator><name>trace_ascii</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name>curl</name> <operator>=</operator> <call><name>curl_easy_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>curl</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_DEBUGFUNCTION</name></expr></argument>, <argument><expr><name>my_trace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_DEBUGDATA</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>config</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_VERBOSE</name></expr></argument>, <argument><expr><literal type="number">1L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_FOLLOWLOCATION</name></expr></argument>, <argument><expr><literal type="number">1L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>curl_easy_setopt</name><argument_list>(<argument><expr><name>curl</name></expr></argument>, <argument><expr><name>CURLOPT_URL</name></expr></argument>, <argument><expr><literal type="string">"https://example.com/"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>curl_easy_perform</name><argument_list>(<argument><expr><name>curl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>res</name> <operator>!=</operator> <name>CURLE_OK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"curl_easy_perform() failed: %s\n"</literal></expr></argument>,
<argument><expr><call><name>curl_easy_strerror</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>curl_easy_cleanup</name><argument_list>(<argument><expr><name>curl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
