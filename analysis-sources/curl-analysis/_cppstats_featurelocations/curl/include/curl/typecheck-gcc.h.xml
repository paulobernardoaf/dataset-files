<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\curl-analysis\_cppstats_featurelocations\curl\include\curl\typecheck-gcc.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURLINC_TYPECHECK_GCC_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CURLINC_TYPECHECK_GCC_H</name></cpp:macro></cpp:define>






































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>curl_easy_setopt</name><parameter_list>(<parameter><type><name>handle</name></type></parameter>, <parameter><type><name>option</name></type></parameter>, <parameter><type><name>value</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__extension__({ __typeof__(option) _curl_opt = option; if(__builtin_constant_p(_curl_opt)) { if(curlcheck_long_option(_curl_opt)) if(!curlcheck_long(value)) _curl_easy_setopt_err_long(); if(curlcheck_off_t_option(_curl_opt)) if(!curlcheck_off_t(value)) _curl_easy_setopt_err_curl_off_t(); if(curlcheck_string_option(_curl_opt)) if(!curlcheck_string(value)) _curl_easy_setopt_err_string(); if(curlcheck_write_cb_option(_curl_opt)) if(!curlcheck_write_cb(value)) _curl_easy_setopt_err_write_callback(); if((_curl_opt) == CURLOPT_RESOLVER_START_FUNCTION) if(!curlcheck_resolver_start_callback(value)) _curl_easy_setopt_err_resolver_start_callback(); if((_curl_opt) == CURLOPT_READFUNCTION) if(!curlcheck_read_cb(value)) _curl_easy_setopt_err_read_cb(); if((_curl_opt) == CURLOPT_IOCTLFUNCTION) if(!curlcheck_ioctl_cb(value)) _curl_easy_setopt_err_ioctl_cb(); if((_curl_opt) == CURLOPT_SOCKOPTFUNCTION) if(!curlcheck_sockopt_cb(value)) _curl_easy_setopt_err_sockopt_cb(); if((_curl_opt) == CURLOPT_OPENSOCKETFUNCTION) if(!curlcheck_opensocket_cb(value)) _curl_easy_setopt_err_opensocket_cb(); if((_curl_opt) == CURLOPT_PROGRESSFUNCTION) if(!curlcheck_progress_cb(value)) _curl_easy_setopt_err_progress_cb(); if((_curl_opt) == CURLOPT_DEBUGFUNCTION) if(!curlcheck_debug_cb(value)) _curl_easy_setopt_err_debug_cb(); if((_curl_opt) == CURLOPT_SSL_CTX_FUNCTION) if(!curlcheck_ssl_ctx_cb(value)) _curl_easy_setopt_err_ssl_ctx_cb(); if(curlcheck_conv_cb_option(_curl_opt)) if(!curlcheck_conv_cb(value)) _curl_easy_setopt_err_conv_cb(); if((_curl_opt) == CURLOPT_SEEKFUNCTION) if(!curlcheck_seek_cb(value)) _curl_easy_setopt_err_seek_cb(); if(curlcheck_cb_data_option(_curl_opt)) if(!curlcheck_cb_data(value)) _curl_easy_setopt_err_cb_data(); if((_curl_opt) == CURLOPT_ERRORBUFFER) if(!curlcheck_error_buffer(value)) _curl_easy_setopt_err_error_buffer(); if((_curl_opt) == CURLOPT_STDERR) if(!curlcheck_FILE(value)) _curl_easy_setopt_err_FILE(); if(curlcheck_postfields_option(_curl_opt)) if(!curlcheck_postfields(value)) _curl_easy_setopt_err_postfields(); if((_curl_opt) == CURLOPT_HTTPPOST) if(!curlcheck_arr((value), struct curl_httppost)) _curl_easy_setopt_err_curl_httpost(); if((_curl_opt) == CURLOPT_MIMEPOST) if(!curlcheck_ptr((value), curl_mime)) _curl_easy_setopt_err_curl_mimepost(); if(curlcheck_slist_option(_curl_opt)) if(!curlcheck_arr((value), struct curl_slist)) _curl_easy_setopt_err_curl_slist(); if((_curl_opt) == CURLOPT_SHARE) if(!curlcheck_ptr((value), CURLSH)) _curl_easy_setopt_err_CURLSH(); } curl_easy_setopt(handle, _curl_opt, value); })</cpp:value></cpp:define>










































































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>curl_easy_getinfo</name><parameter_list>(<parameter><type><name>handle</name></type></parameter>, <parameter><type><name>info</name></type></parameter>, <parameter><type><name>arg</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__extension__({ __typeof__(info) _curl_info = info; if(__builtin_constant_p(_curl_info)) { if(curlcheck_string_info(_curl_info)) if(!curlcheck_arr((arg), char *)) _curl_easy_getinfo_err_string(); if(curlcheck_long_info(_curl_info)) if(!curlcheck_arr((arg), long)) _curl_easy_getinfo_err_long(); if(curlcheck_double_info(_curl_info)) if(!curlcheck_arr((arg), double)) _curl_easy_getinfo_err_double(); if(curlcheck_slist_info(_curl_info)) if(!curlcheck_arr((arg), struct curl_slist *)) _curl_easy_getinfo_err_curl_slist(); if(curlcheck_tlssessioninfo_info(_curl_info)) if(!curlcheck_arr((arg), struct curl_tlssessioninfo *)) _curl_easy_getinfo_err_curl_tlssesssioninfo(); if(curlcheck_certinfo_info(_curl_info)) if(!curlcheck_arr((arg), struct curl_certinfo *)) _curl_easy_getinfo_err_curl_certinfo(); if(curlcheck_socket_info(_curl_info)) if(!curlcheck_arr((arg), curl_socket_t)) _curl_easy_getinfo_err_curl_socket(); if(curlcheck_off_t_info(_curl_info)) if(!curlcheck_arr((arg), curl_off_t)) _curl_easy_getinfo_err_curl_off_t(); } curl_easy_getinfo(handle, _curl_info, arg); })</cpp:value></cpp:define>


































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>curl_share_setopt</name><parameter_list>(<parameter><type><name>share</name></type></parameter>,<parameter><type><name>opt</name></type></parameter>,<parameter><type><name>param</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>curl_share_setopt(share,opt,param)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>curl_multi_setopt</name><parameter_list>(<parameter><type><name>handle</name></type></parameter>,<parameter><type><name>opt</name></type></parameter>,<parameter><type><name>param</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>curl_multi_setopt(handle,opt,param)</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CURLWARNING</name><parameter_list>(<parameter><type><name>id</name></type></parameter>, <parameter><type><name>message</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static void __attribute__((__warning__(message))) __attribute__((__unused__)) __attribute__((__noinline__)) id(void) { __asm__(""); }</cpp:value></cpp:define>




<macro><name>CURLWARNING</name><argument_list>(<argument>_curl_easy_setopt_err_long</argument>,
<argument><literal type="string">"curl_easy_setopt expects a long argument for this option"</literal></argument>)</argument_list></macro>
<macro><name>CURLWARNING</name><argument_list>(<argument>_curl_easy_setopt_err_curl_off_t</argument>,
<argument><literal type="string">"curl_easy_setopt expects a curl_off_t argument for this option"</literal></argument>)</argument_list></macro>
<macro><name>CURLWARNING</name><argument_list>(<argument>_curl_easy_setopt_err_string</argument>,
<argument><literal type="string">"curl_easy_setopt expects a "</literal>
<literal type="string">"string ('char *' or char[]) argument for this option"</literal></argument>
)</argument_list></macro>
<macro><name>CURLWARNING</name><argument_list>(<argument>_curl_easy_setopt_err_write_callback</argument>,
<argument><literal type="string">"curl_easy_setopt expects a curl_write_callback argument for this option"</literal></argument>)</argument_list></macro>
<macro><name>CURLWARNING</name><argument_list>(<argument>_curl_easy_setopt_err_resolver_start_callback</argument>,
<argument><literal type="string">"curl_easy_setopt expects a "</literal>
<literal type="string">"curl_resolver_start_callback argument for this option"</literal></argument>
)</argument_list></macro>
<macro><name>CURLWARNING</name><argument_list>(<argument>_curl_easy_setopt_err_read_cb</argument>,
<argument><literal type="string">"curl_easy_setopt expects a curl_read_callback argument for this option"</literal></argument>)</argument_list></macro>
<macro><name>CURLWARNING</name><argument_list>(<argument>_curl_easy_setopt_err_ioctl_cb</argument>,
<argument><literal type="string">"curl_easy_setopt expects a curl_ioctl_callback argument for this option"</literal></argument>)</argument_list></macro>
<macro><name>CURLWARNING</name><argument_list>(<argument>_curl_easy_setopt_err_sockopt_cb</argument>,
<argument><literal type="string">"curl_easy_setopt expects a curl_sockopt_callback argument for this option"</literal></argument>)</argument_list></macro>
<macro><name>CURLWARNING</name><argument_list>(<argument>_curl_easy_setopt_err_opensocket_cb</argument>,
<argument><literal type="string">"curl_easy_setopt expects a "</literal>
<literal type="string">"curl_opensocket_callback argument for this option"</literal></argument>
)</argument_list></macro>
<macro><name>CURLWARNING</name><argument_list>(<argument>_curl_easy_setopt_err_progress_cb</argument>,
<argument><literal type="string">"curl_easy_setopt expects a curl_progress_callback argument for this option"</literal></argument>)</argument_list></macro>
<macro><name>CURLWARNING</name><argument_list>(<argument>_curl_easy_setopt_err_debug_cb</argument>,
<argument><literal type="string">"curl_easy_setopt expects a curl_debug_callback argument for this option"</literal></argument>)</argument_list></macro>
<macro><name>CURLWARNING</name><argument_list>(<argument>_curl_easy_setopt_err_ssl_ctx_cb</argument>,
<argument><literal type="string">"curl_easy_setopt expects a curl_ssl_ctx_callback argument for this option"</literal></argument>)</argument_list></macro>
<macro><name>CURLWARNING</name><argument_list>(<argument>_curl_easy_setopt_err_conv_cb</argument>,
<argument><literal type="string">"curl_easy_setopt expects a curl_conv_callback argument for this option"</literal></argument>)</argument_list></macro>
<macro><name>CURLWARNING</name><argument_list>(<argument>_curl_easy_setopt_err_seek_cb</argument>,
<argument><literal type="string">"curl_easy_setopt expects a curl_seek_callback argument for this option"</literal></argument>)</argument_list></macro>
<macro><name>CURLWARNING</name><argument_list>(<argument>_curl_easy_setopt_err_cb_data</argument>,
<argument><literal type="string">"curl_easy_setopt expects a "</literal>
<literal type="string">"private data pointer as argument for this option"</literal></argument>)</argument_list></macro>
<macro><name>CURLWARNING</name><argument_list>(<argument>_curl_easy_setopt_err_error_buffer</argument>,
<argument><literal type="string">"curl_easy_setopt expects a "</literal>
<literal type="string">"char buffer of CURL_ERROR_SIZE as argument for this option"</literal></argument>)</argument_list></macro>
<macro><name>CURLWARNING</name><argument_list>(<argument>_curl_easy_setopt_err_FILE</argument>,
<argument><literal type="string">"curl_easy_setopt expects a 'FILE *' argument for this option"</literal></argument>)</argument_list></macro>
<macro><name>CURLWARNING</name><argument_list>(<argument>_curl_easy_setopt_err_postfields</argument>,
<argument><literal type="string">"curl_easy_setopt expects a 'void *' or 'char *' argument for this option"</literal></argument>)</argument_list></macro>
<macro><name>CURLWARNING</name><argument_list>(<argument>_curl_easy_setopt_err_curl_httpost</argument>,
<argument><literal type="string">"curl_easy_setopt expects a 'struct curl_httppost *' "</literal>
<literal type="string">"argument for this option"</literal></argument>)</argument_list></macro>
<macro><name>CURLWARNING</name><argument_list>(<argument>_curl_easy_setopt_err_curl_mimepost</argument>,
<argument><literal type="string">"curl_easy_setopt expects a 'curl_mime *' "</literal>
<literal type="string">"argument for this option"</literal></argument>)</argument_list></macro>
<macro><name>CURLWARNING</name><argument_list>(<argument>_curl_easy_setopt_err_curl_slist</argument>,
<argument><literal type="string">"curl_easy_setopt expects a 'struct curl_slist *' argument for this option"</literal></argument>)</argument_list></macro>
<macro><name>CURLWARNING</name><argument_list>(<argument>_curl_easy_setopt_err_CURLSH</argument>,
<argument><literal type="string">"curl_easy_setopt expects a CURLSH* argument for this option"</literal></argument>)</argument_list></macro>

<macro><name>CURLWARNING</name><argument_list>(<argument>_curl_easy_getinfo_err_string</argument>,
<argument><literal type="string">"curl_easy_getinfo expects a pointer to 'char *' for this info"</literal></argument>)</argument_list></macro>
<macro><name>CURLWARNING</name><argument_list>(<argument>_curl_easy_getinfo_err_long</argument>,
<argument><literal type="string">"curl_easy_getinfo expects a pointer to long for this info"</literal></argument>)</argument_list></macro>
<macro><name>CURLWARNING</name><argument_list>(<argument>_curl_easy_getinfo_err_double</argument>,
<argument><literal type="string">"curl_easy_getinfo expects a pointer to double for this info"</literal></argument>)</argument_list></macro>
<macro><name>CURLWARNING</name><argument_list>(<argument>_curl_easy_getinfo_err_curl_slist</argument>,
<argument><literal type="string">"curl_easy_getinfo expects a pointer to 'struct curl_slist *' for this info"</literal></argument>)</argument_list></macro>
<macro><name>CURLWARNING</name><argument_list>(<argument>_curl_easy_getinfo_err_curl_tlssesssioninfo</argument>,
<argument><literal type="string">"curl_easy_getinfo expects a pointer to "</literal>
<literal type="string">"'struct curl_tlssessioninfo *' for this info"</literal></argument>)</argument_list></macro>
<macro><name>CURLWARNING</name><argument_list>(<argument>_curl_easy_getinfo_err_curl_certinfo</argument>,
<argument><literal type="string">"curl_easy_getinfo expects a pointer to "</literal>
<literal type="string">"'struct curl_certinfo *' for this info"</literal></argument>)</argument_list></macro>
<macro><name>CURLWARNING</name><argument_list>(<argument>_curl_easy_getinfo_err_curl_socket</argument>,
<argument><literal type="string">"curl_easy_getinfo expects a pointer to curl_socket_t for this info"</literal></argument>)</argument_list></macro>
<macro><name>CURLWARNING</name><argument_list>(<argument>_curl_easy_getinfo_err_curl_off_t</argument>,
<argument><literal type="string">"curl_easy_getinfo expects a pointer to curl_off_t for this info"</literal></argument>)</argument_list></macro>










<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>curlcheck_long_option</name><parameter_list>(<parameter><type><name>option</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(0 &lt; (option) &amp;&amp; (option) &lt; CURLOPTTYPE_OBJECTPOINT)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>curlcheck_off_t_option</name><parameter_list>(<parameter><type><name>option</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((option) &gt; CURLOPTTYPE_OFF_T)</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>curlcheck_string_option</name><parameter_list>(<parameter><type><name>option</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((option) == CURLOPT_ABSTRACT_UNIX_SOCKET || (option) == CURLOPT_ACCEPT_ENCODING || (option) == CURLOPT_ALTSVC || (option) == CURLOPT_CAINFO || (option) == CURLOPT_CAPATH || (option) == CURLOPT_COOKIE || (option) == CURLOPT_COOKIEFILE || (option) == CURLOPT_COOKIEJAR || (option) == CURLOPT_COOKIELIST || (option) == CURLOPT_CRLFILE || (option) == CURLOPT_CUSTOMREQUEST || (option) == CURLOPT_DEFAULT_PROTOCOL || (option) == CURLOPT_DNS_INTERFACE || (option) == CURLOPT_DNS_LOCAL_IP4 || (option) == CURLOPT_DNS_LOCAL_IP6 || (option) == CURLOPT_DNS_SERVERS || (option) == CURLOPT_DOH_URL || (option) == CURLOPT_EGDSOCKET || (option) == CURLOPT_FTPPORT || (option) == CURLOPT_FTP_ACCOUNT || (option) == CURLOPT_FTP_ALTERNATIVE_TO_USER || (option) == CURLOPT_INTERFACE || (option) == CURLOPT_ISSUERCERT || (option) == CURLOPT_KEYPASSWD || (option) == CURLOPT_KRBLEVEL || (option) == CURLOPT_LOGIN_OPTIONS || (option) == CURLOPT_MAIL_AUTH || (option) == CURLOPT_MAIL_FROM || (option) == CURLOPT_NETRC_FILE || (option) == CURLOPT_NOPROXY || (option) == CURLOPT_PASSWORD || (option) == CURLOPT_PINNEDPUBLICKEY || (option) == CURLOPT_PRE_PROXY || (option) == CURLOPT_PROXY || (option) == CURLOPT_PROXYPASSWORD || (option) == CURLOPT_PROXYUSERNAME || (option) == CURLOPT_PROXYUSERPWD || (option) == CURLOPT_PROXY_CAINFO || (option) == CURLOPT_PROXY_CAPATH || (option) == CURLOPT_PROXY_CRLFILE || (option) == CURLOPT_PROXY_KEYPASSWD || (option) == CURLOPT_PROXY_PINNEDPUBLICKEY || (option) == CURLOPT_PROXY_SERVICE_NAME || (option) == CURLOPT_PROXY_SSLCERT || (option) == CURLOPT_PROXY_SSLCERTTYPE || (option) == CURLOPT_PROXY_SSLKEY || (option) == CURLOPT_PROXY_SSLKEYTYPE || (option) == CURLOPT_PROXY_SSL_CIPHER_LIST || (option) == CURLOPT_PROXY_TLS13_CIPHERS || (option) == CURLOPT_PROXY_TLSAUTH_PASSWORD || (option) == CURLOPT_PROXY_TLSAUTH_TYPE || (option) == CURLOPT_PROXY_TLSAUTH_USERNAME || (option) == CURLOPT_RANDOM_FILE || (option) == CURLOPT_RANGE || (option) == CURLOPT_REFERER || (option) == CURLOPT_REQUEST_TARGET || (option) == CURLOPT_RTSP_SESSION_ID || (option) == CURLOPT_RTSP_STREAM_URI || (option) == CURLOPT_RTSP_TRANSPORT || (option) == CURLOPT_SASL_AUTHZID || (option) == CURLOPT_SERVICE_NAME || (option) == CURLOPT_SOCKS5_GSSAPI_SERVICE || (option) == CURLOPT_SSH_HOST_PUBLIC_KEY_MD5 || (option) == CURLOPT_SSH_KNOWNHOSTS || (option) == CURLOPT_SSH_PRIVATE_KEYFILE || (option) == CURLOPT_SSH_PUBLIC_KEYFILE || (option) == CURLOPT_SSLCERT || (option) == CURLOPT_SSLCERTTYPE || (option) == CURLOPT_SSLENGINE || (option) == CURLOPT_SSLKEY || (option) == CURLOPT_SSLKEYTYPE || (option) == CURLOPT_SSL_CIPHER_LIST || (option) == CURLOPT_TLS13_CIPHERS || (option) == CURLOPT_TLSAUTH_PASSWORD || (option) == CURLOPT_TLSAUTH_TYPE || (option) == CURLOPT_TLSAUTH_USERNAME || (option) == CURLOPT_UNIX_SOCKET_PATH || (option) == CURLOPT_URL || (option) == CURLOPT_USERAGENT || (option) == CURLOPT_USERNAME || (option) == CURLOPT_USERPWD || (option) == CURLOPT_XOAUTH2_BEARER || 0)</cpp:value></cpp:define>





















































































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>curlcheck_write_cb_option</name><parameter_list>(<parameter><type><name>option</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((option) == CURLOPT_HEADERFUNCTION || (option) == CURLOPT_WRITEFUNCTION)</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>curlcheck_conv_cb_option</name><parameter_list>(<parameter><type><name>option</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((option) == CURLOPT_CONV_TO_NETWORK_FUNCTION || (option) == CURLOPT_CONV_FROM_NETWORK_FUNCTION || (option) == CURLOPT_CONV_FROM_UTF8_FUNCTION)</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>curlcheck_cb_data_option</name><parameter_list>(<parameter><type><name>option</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((option) == CURLOPT_CHUNK_DATA || (option) == CURLOPT_CLOSESOCKETDATA || (option) == CURLOPT_DEBUGDATA || (option) == CURLOPT_FNMATCH_DATA || (option) == CURLOPT_HEADERDATA || (option) == CURLOPT_INTERLEAVEDATA || (option) == CURLOPT_IOCTLDATA || (option) == CURLOPT_OPENSOCKETDATA || (option) == CURLOPT_PRIVATE || (option) == CURLOPT_PROGRESSDATA || (option) == CURLOPT_READDATA || (option) == CURLOPT_SEEKDATA || (option) == CURLOPT_SOCKOPTDATA || (option) == CURLOPT_SSH_KEYDATA || (option) == CURLOPT_SSL_CTX_DATA || (option) == CURLOPT_WRITEDATA || (option) == CURLOPT_RESOLVER_START_DATA || (option) == CURLOPT_TRAILERDATA || 0)</cpp:value></cpp:define>





















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>curlcheck_postfields_option</name><parameter_list>(<parameter><type><name>option</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((option) == CURLOPT_POSTFIELDS || (option) == CURLOPT_COPYPOSTFIELDS || 0)</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>curlcheck_slist_option</name><parameter_list>(<parameter><type><name>option</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((option) == CURLOPT_HTTP200ALIASES || (option) == CURLOPT_HTTPHEADER || (option) == CURLOPT_MAIL_RCPT || (option) == CURLOPT_POSTQUOTE || (option) == CURLOPT_PREQUOTE || (option) == CURLOPT_PROXYHEADER || (option) == CURLOPT_QUOTE || (option) == CURLOPT_RESOLVE || (option) == CURLOPT_TELNETOPTIONS || (option) == CURLOPT_CONNECT_TO || 0)</cpp:value></cpp:define>















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>curlcheck_string_info</name><parameter_list>(<parameter><type><name>info</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(CURLINFO_STRING &lt; (info) &amp;&amp; (info) &lt; CURLINFO_LONG)</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>curlcheck_long_info</name><parameter_list>(<parameter><type><name>info</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(CURLINFO_LONG &lt; (info) &amp;&amp; (info) &lt; CURLINFO_DOUBLE)</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>curlcheck_double_info</name><parameter_list>(<parameter><type><name>info</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(CURLINFO_DOUBLE &lt; (info) &amp;&amp; (info) &lt; CURLINFO_SLIST)</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>curlcheck_slist_info</name><parameter_list>(<parameter><type><name>info</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((info) == CURLINFO_SSL_ENGINES) || ((info) == CURLINFO_COOKIELIST))</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>curlcheck_tlssessioninfo_info</name><parameter_list>(<parameter><type><name>info</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((info) == CURLINFO_TLS_SSL_PTR) || ((info) == CURLINFO_TLS_SESSION))</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>curlcheck_certinfo_info</name><parameter_list>(<parameter><type><name>info</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((info) == CURLINFO_CERTINFO)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>curlcheck_socket_info</name><parameter_list>(<parameter><type><name>info</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(CURLINFO_SOCKET &lt; (info) &amp;&amp; (info) &lt; CURLINFO_OFF_T)</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>curlcheck_off_t_info</name><parameter_list>(<parameter><type><name>info</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(CURLINFO_OFF_T &lt; (info))</cpp:value></cpp:define>















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>curlcheck_any_ptr</name><parameter_list>(<parameter><type><name>expr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(sizeof(expr) == sizeof(void *))</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>curlcheck_NULL</name><parameter_list>(<parameter><type><name>expr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(__builtin_types_compatible_p(__typeof__(expr), __typeof__(NULL)))</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>curlcheck_ptr</name><parameter_list>(<parameter><type><name>expr</name></type></parameter>, <parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(curlcheck_NULL(expr) || __builtin_types_compatible_p(__typeof__(expr), type *) || __builtin_types_compatible_p(__typeof__(expr), const type *))</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>curlcheck_arr</name><parameter_list>(<parameter><type><name>expr</name></type></parameter>, <parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(curlcheck_ptr((expr), type) || __builtin_types_compatible_p(__typeof__(expr), type []))</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>curlcheck_string</name><parameter_list>(<parameter><type><name>expr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(curlcheck_arr((expr), char) || curlcheck_arr((expr), signed char) || curlcheck_arr((expr), unsigned char))</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>curlcheck_long</name><parameter_list>(<parameter><type><name>expr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(__builtin_types_compatible_p(__typeof__(expr), long) || __builtin_types_compatible_p(__typeof__(expr), signed long) || __builtin_types_compatible_p(__typeof__(expr), unsigned long) || __builtin_types_compatible_p(__typeof__(expr), int) || __builtin_types_compatible_p(__typeof__(expr), signed int) || __builtin_types_compatible_p(__typeof__(expr), unsigned int) || __builtin_types_compatible_p(__typeof__(expr), short) || __builtin_types_compatible_p(__typeof__(expr), signed short) || __builtin_types_compatible_p(__typeof__(expr), unsigned short) || __builtin_types_compatible_p(__typeof__(expr), char) || __builtin_types_compatible_p(__typeof__(expr), signed char) || __builtin_types_compatible_p(__typeof__(expr), unsigned char))</cpp:value></cpp:define>














<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>curlcheck_off_t</name><parameter_list>(<parameter><type><name>expr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(__builtin_types_compatible_p(__typeof__(expr), curl_off_t))</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>curlcheck_error_buffer</name><parameter_list>(<parameter><type><name>expr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(curlcheck_NULL(expr) || __builtin_types_compatible_p(__typeof__(expr), char *) || __builtin_types_compatible_p(__typeof__(expr), char[]))</cpp:value></cpp:define>





<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>curlcheck_cb_data</name><parameter_list>(<parameter><type><name>expr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(curlcheck_ptr((expr), void) || curlcheck_ptr((expr), FILE))</cpp:value></cpp:define>


<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>curlcheck_cb_data</name><parameter_list>(<parameter><type><name>expr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>curlcheck_any_ptr(expr)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>curlcheck_FILE</name><parameter_list>(<parameter><type><name>expr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(curlcheck_NULL(expr) || (__builtin_types_compatible_p(__typeof__(expr), FILE *)))</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>curlcheck_postfields</name><parameter_list>(<parameter><type><name>expr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(curlcheck_ptr((expr), void) || curlcheck_arr((expr), char) || curlcheck_arr((expr), unsigned char))</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>curlcheck_cb_compatible</name><parameter_list>(<parameter><type><name>func</name></type></parameter>, <parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(__builtin_types_compatible_p(__typeof__(func), type) || __builtin_types_compatible_p(__typeof__(func) *, type))</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>curlcheck_resolver_start_callback</name><parameter_list>(<parameter><type><name>expr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(curlcheck_NULL(expr) || curlcheck_cb_compatible((expr), curl_resolver_start_callback))</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>curlcheck_read_cb</name><parameter_list>(<parameter><type><name>expr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(curlcheck_NULL(expr) || curlcheck_cb_compatible((expr), __typeof__(fread) *) || curlcheck_cb_compatible((expr), curl_read_callback) || curlcheck_cb_compatible((expr), _curl_read_callback1) || curlcheck_cb_compatible((expr), _curl_read_callback2) || curlcheck_cb_compatible((expr), _curl_read_callback3) || curlcheck_cb_compatible((expr), _curl_read_callback4) || curlcheck_cb_compatible((expr), _curl_read_callback5) || curlcheck_cb_compatible((expr), _curl_read_callback6))</cpp:value></cpp:define>









<typedef>typedef <function_decl><type><name>size_t</name></type> (<modifier>*</modifier><name>_curl_read_callback1</name>)<parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>size_t</name></type> (<modifier>*</modifier><name>_curl_read_callback2</name>)<parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>size_t</name></type> (<modifier>*</modifier><name>_curl_read_callback3</name>)<parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>size_t</name></type> (<modifier>*</modifier><name>_curl_read_callback4</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>size_t</name></type> (<modifier>*</modifier><name>_curl_read_callback5</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>size_t</name></type> (<modifier>*</modifier><name>_curl_read_callback6</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>curlcheck_write_cb</name><parameter_list>(<parameter><type><name>expr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(curlcheck_read_cb(expr) || curlcheck_cb_compatible((expr), __typeof__(fwrite) *) || curlcheck_cb_compatible((expr), curl_write_callback) || curlcheck_cb_compatible((expr), _curl_write_callback1) || curlcheck_cb_compatible((expr), _curl_write_callback2) || curlcheck_cb_compatible((expr), _curl_write_callback3) || curlcheck_cb_compatible((expr), _curl_write_callback4) || curlcheck_cb_compatible((expr), _curl_write_callback5) || curlcheck_cb_compatible((expr), _curl_write_callback6))</cpp:value></cpp:define>









<typedef>typedef <function_decl><type><name>size_t</name></type> (<modifier>*</modifier><name>_curl_write_callback1</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>size_t</name></type> (<modifier>*</modifier><name>_curl_write_callback2</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>size_t</name></type> (<modifier>*</modifier><name>_curl_write_callback3</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>size_t</name></type> (<modifier>*</modifier><name>_curl_write_callback4</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>size_t</name></type> (<modifier>*</modifier><name>_curl_write_callback5</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>size_t</name></type> (<modifier>*</modifier><name>_curl_write_callback6</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>curlcheck_ioctl_cb</name><parameter_list>(<parameter><type><name>expr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(curlcheck_NULL(expr) || curlcheck_cb_compatible((expr), curl_ioctl_callback) || curlcheck_cb_compatible((expr), _curl_ioctl_callback1) || curlcheck_cb_compatible((expr), _curl_ioctl_callback2) || curlcheck_cb_compatible((expr), _curl_ioctl_callback3) || curlcheck_cb_compatible((expr), _curl_ioctl_callback4))</cpp:value></cpp:define>






<typedef>typedef <function_decl><type><name>curlioerr</name></type> (<modifier>*</modifier><name>_curl_ioctl_callback1</name>)<parameter_list>(<parameter><decl><type><name>CURL</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>curlioerr</name></type> (<modifier>*</modifier><name>_curl_ioctl_callback2</name>)<parameter_list>(<parameter><decl><type><name>CURL</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>curlioerr</name></type> (<modifier>*</modifier><name>_curl_ioctl_callback3</name>)<parameter_list>(<parameter><decl><type><name>CURL</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>curliocmd</name></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>curlioerr</name></type> (<modifier>*</modifier><name>_curl_ioctl_callback4</name>)<parameter_list>(<parameter><decl><type><name>CURL</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>curliocmd</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>curlcheck_sockopt_cb</name><parameter_list>(<parameter><type><name>expr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(curlcheck_NULL(expr) || curlcheck_cb_compatible((expr), curl_sockopt_callback) || curlcheck_cb_compatible((expr), _curl_sockopt_callback1) || curlcheck_cb_compatible((expr), _curl_sockopt_callback2))</cpp:value></cpp:define>




<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>_curl_sockopt_callback1</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>curl_socket_t</name></type></decl></parameter>, <parameter><decl><type><name>curlsocktype</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>_curl_sockopt_callback2</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>curl_socket_t</name></type></decl></parameter>,
<parameter><decl><type><name>curlsocktype</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>curlcheck_opensocket_cb</name><parameter_list>(<parameter><type><name>expr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(curlcheck_NULL(expr) || curlcheck_cb_compatible((expr), curl_opensocket_callback) || curlcheck_cb_compatible((expr), _curl_opensocket_callback1) || curlcheck_cb_compatible((expr), _curl_opensocket_callback2) || curlcheck_cb_compatible((expr), _curl_opensocket_callback3) || curlcheck_cb_compatible((expr), _curl_opensocket_callback4))</cpp:value></cpp:define>






<typedef>typedef <function_decl><type><name>curl_socket_t</name></type> (<modifier>*</modifier><name>_curl_opensocket_callback1</name>)
<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>curlsocktype</name></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>curl_sockaddr</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>curl_socket_t</name></type> (<modifier>*</modifier><name>_curl_opensocket_callback2</name>)
<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>curlsocktype</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>curl_sockaddr</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>curl_socket_t</name></type> (<modifier>*</modifier><name>_curl_opensocket_callback3</name>)
<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>curlsocktype</name></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>curl_sockaddr</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>curl_socket_t</name></type> (<modifier>*</modifier><name>_curl_opensocket_callback4</name>)
<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>curlsocktype</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>curl_sockaddr</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>curlcheck_progress_cb</name><parameter_list>(<parameter><type><name>expr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(curlcheck_NULL(expr) || curlcheck_cb_compatible((expr), curl_progress_callback) || curlcheck_cb_compatible((expr), _curl_progress_callback1) || curlcheck_cb_compatible((expr), _curl_progress_callback2))</cpp:value></cpp:define>




<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>_curl_progress_callback1</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>double</name></type></decl></parameter>, <parameter><decl><type><name>double</name></type></decl></parameter>, <parameter><decl><type><name>double</name></type></decl></parameter>, <parameter><decl><type><name>double</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>_curl_progress_callback2</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>double</name></type></decl></parameter>, <parameter><decl><type><name>double</name></type></decl></parameter>, <parameter><decl><type><name>double</name></type></decl></parameter>, <parameter><decl><type><name>double</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>curlcheck_debug_cb</name><parameter_list>(<parameter><type><name>expr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(curlcheck_NULL(expr) || curlcheck_cb_compatible((expr), curl_debug_callback) || curlcheck_cb_compatible((expr), _curl_debug_callback1) || curlcheck_cb_compatible((expr), _curl_debug_callback2) || curlcheck_cb_compatible((expr), _curl_debug_callback3) || curlcheck_cb_compatible((expr), _curl_debug_callback4) || curlcheck_cb_compatible((expr), _curl_debug_callback5) || curlcheck_cb_compatible((expr), _curl_debug_callback6) || curlcheck_cb_compatible((expr), _curl_debug_callback7) || curlcheck_cb_compatible((expr), _curl_debug_callback8))</cpp:value></cpp:define>










<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>_curl_debug_callback1</name>) <parameter_list>(<parameter><decl><type><name>CURL</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>curl_infotype</name></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>_curl_debug_callback2</name>) <parameter_list>(<parameter><decl><type><name>CURL</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>curl_infotype</name></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>_curl_debug_callback3</name>) <parameter_list>(<parameter><decl><type><name>CURL</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>curl_infotype</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>_curl_debug_callback4</name>) <parameter_list>(<parameter><decl><type><name>CURL</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>curl_infotype</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>_curl_debug_callback5</name>) <parameter_list>(<parameter><decl><type><name>CURL</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>curl_infotype</name></type></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>_curl_debug_callback6</name>) <parameter_list>(<parameter><decl><type><name>CURL</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>curl_infotype</name></type></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>_curl_debug_callback7</name>) <parameter_list>(<parameter><decl><type><name>CURL</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>curl_infotype</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>_curl_debug_callback8</name>) <parameter_list>(<parameter><decl><type><name>CURL</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>curl_infotype</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>curlcheck_ssl_ctx_cb</name><parameter_list>(<parameter><type><name>expr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(curlcheck_NULL(expr) || curlcheck_cb_compatible((expr), curl_ssl_ctx_callback) || curlcheck_cb_compatible((expr), _curl_ssl_ctx_callback1) || curlcheck_cb_compatible((expr), _curl_ssl_ctx_callback2) || curlcheck_cb_compatible((expr), _curl_ssl_ctx_callback3) || curlcheck_cb_compatible((expr), _curl_ssl_ctx_callback4) || curlcheck_cb_compatible((expr), _curl_ssl_ctx_callback5) || curlcheck_cb_compatible((expr), _curl_ssl_ctx_callback6) || curlcheck_cb_compatible((expr), _curl_ssl_ctx_callback7) || curlcheck_cb_compatible((expr), _curl_ssl_ctx_callback8))</cpp:value></cpp:define>










<typedef>typedef <function_decl><type><name>CURLcode</name></type> (<modifier>*</modifier><name>_curl_ssl_ctx_callback1</name>)<parameter_list>(<parameter><decl><type><name>CURL</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>CURLcode</name></type> (<modifier>*</modifier><name>_curl_ssl_ctx_callback2</name>)<parameter_list>(<parameter><decl><type><name>CURL</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>CURLcode</name></type> (<modifier>*</modifier><name>_curl_ssl_ctx_callback3</name>)<parameter_list>(<parameter><decl><type><name>CURL</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>CURLcode</name></type> (<modifier>*</modifier><name>_curl_ssl_ctx_callback4</name>)<parameter_list>(<parameter><decl><type><name>CURL</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HEADER_SSL_H</name></expr></argument>)</argument_list></call></expr></cpp:if>



<typedef>typedef <function_decl><type><name>CURLcode</name></type> (<modifier>*</modifier><name>_curl_ssl_ctx_callback5</name>)<parameter_list>(<parameter><decl><type><name>CURL</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>SSL_CTX</name></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>CURLcode</name></type> (<modifier>*</modifier><name>_curl_ssl_ctx_callback6</name>)<parameter_list>(<parameter><decl><type><name>CURL</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>SSL_CTX</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>CURLcode</name></type> (<modifier>*</modifier><name>_curl_ssl_ctx_callback7</name>)<parameter_list>(<parameter><decl><type><name>CURL</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SSL_CTX</name></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>CURLcode</name></type> (<modifier>*</modifier><name>_curl_ssl_ctx_callback8</name>)<parameter_list>(<parameter><decl><type><name>CURL</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SSL_CTX</name></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<typedef>typedef <type><name>_curl_ssl_ctx_callback1</name></type> <name>_curl_ssl_ctx_callback5</name>;</typedef>
<typedef>typedef <type><name>_curl_ssl_ctx_callback1</name></type> <name>_curl_ssl_ctx_callback6</name>;</typedef>
<typedef>typedef <type><name>_curl_ssl_ctx_callback1</name></type> <name>_curl_ssl_ctx_callback7</name>;</typedef>
<typedef>typedef <type><name>_curl_ssl_ctx_callback1</name></type> <name>_curl_ssl_ctx_callback8</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>curlcheck_conv_cb</name><parameter_list>(<parameter><type><name>expr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(curlcheck_NULL(expr) || curlcheck_cb_compatible((expr), curl_conv_callback) || curlcheck_cb_compatible((expr), _curl_conv_callback1) || curlcheck_cb_compatible((expr), _curl_conv_callback2) || curlcheck_cb_compatible((expr), _curl_conv_callback3) || curlcheck_cb_compatible((expr), _curl_conv_callback4))</cpp:value></cpp:define>






<typedef>typedef <function_decl><type><name>CURLcode</name></type> (<modifier>*</modifier><name>_curl_conv_callback1</name>)<parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>length</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>CURLcode</name></type> (<modifier>*</modifier><name>_curl_conv_callback2</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>length</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>CURLcode</name></type> (<modifier>*</modifier><name>_curl_conv_callback3</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>length</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>CURLcode</name></type> (<modifier>*</modifier><name>_curl_conv_callback4</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>length</name></decl></parameter>)</parameter_list>;</function_decl></typedef>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>curlcheck_seek_cb</name><parameter_list>(<parameter><type><name>expr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(curlcheck_NULL(expr) || curlcheck_cb_compatible((expr), curl_seek_callback) || curlcheck_cb_compatible((expr), _curl_seek_callback1) || curlcheck_cb_compatible((expr), _curl_seek_callback2))</cpp:value></cpp:define>




<typedef>typedef <function_decl><type><name>CURLcode</name></type> (<modifier>*</modifier><name>_curl_seek_callback1</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>curl_off_t</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>CURLcode</name></type> (<modifier>*</modifier><name>_curl_seek_callback2</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>curl_off_t</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>


<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
