<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\curl-analysis\_cppstats_featurelocations\curl\lib\socks_sspi.c">






















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_setup.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_WINDOWS_SSPI</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_PROXY</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"urldata.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sendf.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"connect.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"strerror.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"timeval.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"socks.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_sspi.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_multibyte.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"warnless.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"strdup.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_printf.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_memory.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memdebug.h"</cpp:file></cpp:include>




<function><type><specifier>static</specifier> <name>int</name></type> <name>check_sspi_err</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,
<parameter><decl><type><name>SECURITY_STATUS</name></type> <name>status</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>function</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>status</name> <operator>!=</operator> <name>SEC_E_OK</name> <operator>&amp;&amp;</operator>
<name>status</name> <operator>!=</operator> <name>SEC_I_COMPLETE_AND_CONTINUE</name> <operator>&amp;&amp;</operator>
<name>status</name> <operator>!=</operator> <name>SEC_I_COMPLETE_NEEDED</name> <operator>&amp;&amp;</operator>
<name>status</name> <operator>!=</operator> <name>SEC_I_CONTINUE_NEEDED</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr><name>STRERROR_LEN</name></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"SSPI error: %s failed: %s"</literal></expr></argument>, <argument><expr><name>function</name></expr></argument>,
<argument><expr><call><name>Curl_sspi_strerror</name><argument_list>(<argument><expr><name>status</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><name>CURLcode</name></type> <name>Curl_SOCKS5_gssapi_negotiate</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>sockindex</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>curl_socket_t</name></type> <name>sock</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>sock</name><index>[<expr><name>sockindex</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>code</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>actualread</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>written</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SECURITY_STATUS</name></type> <name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>sspi_ret_flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>gss_enc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SecBuffer</name></type> <name>sspi_send_token</name></decl>, <decl><type ref="prev"/><name>sspi_recv_token</name></decl>, <decl><type ref="prev"/><name><name>sspi_w_token</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SecBufferDesc</name></type> <name>input_desc</name></decl>, <decl><type ref="prev"/><name>output_desc</name></decl>, <decl><type ref="prev"/><name>wrap_desc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SecPkgContext_Sizes</name></type> <name>sspi_sizes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CredHandle</name></type> <name>cred_handle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CtxtHandle</name></type> <name>sspi_context</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PCtxtHandle</name></type> <name>context_handle</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SecPkgCredentials_Names</name></type> <name>names</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TimeStamp</name></type> <name>expiry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>service_name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>us_length</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>qop</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>socksreq</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>service</name> <init>= <expr><ternary><condition><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_PROXY_SERVICE_NAME</name></expr>]</index></name></expr> ?</condition><then>
<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>str</name><index>[<expr><name>STRING_PROXY_SERVICE_NAME</name></expr>]</index></name></expr> </then><else>: <expr><literal type="string">"rcmd"</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>service_length</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>service</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>










<if_stmt><if>if<condition>(<expr><call><name>strchr</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>service_name</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>service</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>service_name</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>service_name</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>service_length</name> <operator>+</operator>
<call><name>strlen</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>socks_proxy</name><operator>.</operator><name>host</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>service_name</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>msnprintf</name><argument_list>(<argument><expr><name>service_name</name></expr></argument>, <argument><expr><name>service_length</name> <operator>+</operator>
<call><name>strlen</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>socks_proxy</name><operator>.</operator><name>host</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"%s/%s"</literal></expr></argument>,
<argument><expr><name>service</name></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>socks_proxy</name><operator>.</operator><name>host</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>input_desc</name><operator>.</operator><name>cBuffers</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>input_desc</name><operator>.</operator><name>pBuffers</name></name> <operator>=</operator> <operator>&amp;</operator><name>sspi_recv_token</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>input_desc</name><operator>.</operator><name>ulVersion</name></name> <operator>=</operator> <name>SECBUFFER_VERSION</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sspi_recv_token</name><operator>.</operator><name>BufferType</name></name> <operator>=</operator> <name>SECBUFFER_TOKEN</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sspi_recv_token</name><operator>.</operator><name>cbBuffer</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sspi_recv_token</name><operator>.</operator><name>pvBuffer</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>output_desc</name><operator>.</operator><name>cBuffers</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>output_desc</name><operator>.</operator><name>pBuffers</name></name> <operator>=</operator> <operator>&amp;</operator><name>sspi_send_token</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>output_desc</name><operator>.</operator><name>ulVersion</name></name> <operator>=</operator> <name>SECBUFFER_VERSION</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sspi_send_token</name><operator>.</operator><name>BufferType</name></name> <operator>=</operator> <name>SECBUFFER_TOKEN</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sspi_send_token</name><operator>.</operator><name>cbBuffer</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sspi_send_token</name><operator>.</operator><name>pvBuffer</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>wrap_desc</name><operator>.</operator><name>cBuffers</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wrap_desc</name><operator>.</operator><name>pBuffers</name></name> <operator>=</operator> <name>sspi_w_token</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wrap_desc</name><operator>.</operator><name>ulVersion</name></name> <operator>=</operator> <name>SECBUFFER_VERSION</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cred_handle</name><operator>.</operator><name>dwLower</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cred_handle</name><operator>.</operator><name>dwUpper</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name><name>s_pSecFn</name><operator>-&gt;</operator><name>AcquireCredentialsHandle</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>,
<argument><expr><operator>(</operator><name>TCHAR</name> <operator>*</operator><operator>)</operator> <call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"Kerberos"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>SECPKG_CRED_OUTBOUND</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>cred_handle</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>expiry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>check_sspi_err</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><literal type="string">"AcquireCredentialsHandle"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Failed to acquire credentials."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>service_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>s_pSecFn</name><operator>-&gt;</operator><name>FreeCredentialsHandle</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>cred_handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_COULDNT_CONNECT</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>curlx_nonblock</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<for>for<control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>TCHAR</name> <modifier>*</modifier></type><name>sname</name></decl>;</decl_stmt>

<expr_stmt><expr><name>sname</name> <operator>=</operator> <call><name>Curl_convert_UTF8_to_tchar</name><argument_list>(<argument><expr><name>service_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>sname</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name><name>s_pSecFn</name><operator>-&gt;</operator><name>InitializeSecurityContext</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>cred_handle</name></expr></argument>,
<argument><expr><name>context_handle</name></expr></argument>,
<argument><expr><name>sname</name></expr></argument>,
<argument><expr><name>ISC_REQ_MUTUAL_AUTH</name> <operator>|</operator>
<name>ISC_REQ_ALLOCATE_MEMORY</name> <operator>|</operator>
<name>ISC_REQ_CONFIDENTIALITY</name> <operator>|</operator>
<name>ISC_REQ_REPLAY_DETECT</name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>SECURITY_NATIVE_DREP</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>input_desc</name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name>sspi_context</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>output_desc</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>sspi_ret_flags</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>expiry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_unicodefree</name><argument_list>(<argument><expr><name>sname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>sspi_recv_token</name><operator>.</operator><name>pvBuffer</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>s_pSecFn</name><operator>-&gt;</operator><name>FreeContextBuffer</name></name><argument_list>(<argument><expr><name><name>sspi_recv_token</name><operator>.</operator><name>pvBuffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sspi_recv_token</name><operator>.</operator><name>pvBuffer</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sspi_recv_token</name><operator>.</operator><name>cbBuffer</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>check_sspi_err</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><literal type="string">"InitializeSecurityContext"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>service_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>s_pSecFn</name><operator>-&gt;</operator><name>FreeCredentialsHandle</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>cred_handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>s_pSecFn</name><operator>-&gt;</operator><name>DeleteSecurityContext</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>sspi_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>sspi_recv_token</name><operator>.</operator><name>pvBuffer</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>s_pSecFn</name><operator>-&gt;</operator><name>FreeContextBuffer</name></name><argument_list>(<argument><expr><name><name>sspi_recv_token</name><operator>.</operator><name>pvBuffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Failed to initialise security context."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_COULDNT_CONNECT</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>sspi_send_token</name><operator>.</operator><name>cbBuffer</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>socksreq</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>socksreq</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name>us_length</name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><operator>(</operator><name>short</name><operator>)</operator><name><name>sspi_send_token</name><operator>.</operator><name>cbBuffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>socksreq</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>us_length</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>short</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>Curl_write_plain</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>sock</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>socksreq</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>written</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>code</name> <operator>||</operator> <operator>(</operator><literal type="number">4</literal> <operator>!=</operator> <name>written</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Failed to send SSPI authentication request."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>service_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>sspi_send_token</name><operator>.</operator><name>pvBuffer</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>s_pSecFn</name><operator>-&gt;</operator><name>FreeContextBuffer</name></name><argument_list>(<argument><expr><name><name>sspi_send_token</name><operator>.</operator><name>pvBuffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name><name>sspi_recv_token</name><operator>.</operator><name>pvBuffer</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>s_pSecFn</name><operator>-&gt;</operator><name>FreeContextBuffer</name></name><argument_list>(<argument><expr><name><name>sspi_recv_token</name><operator>.</operator><name>pvBuffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name><name>s_pSecFn</name><operator>-&gt;</operator><name>FreeCredentialsHandle</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>cred_handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>s_pSecFn</name><operator>-&gt;</operator><name>DeleteSecurityContext</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>sspi_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_COULDNT_CONNECT</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>Curl_write_plain</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>sock</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>sspi_send_token</name><operator>.</operator><name>pvBuffer</name></name></expr></argument>,
<argument><expr><name><name>sspi_send_token</name><operator>.</operator><name>cbBuffer</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>written</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>code</name> <operator>||</operator> <operator>(</operator><name><name>sspi_send_token</name><operator>.</operator><name>cbBuffer</name></name> <operator>!=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>written</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Failed to send SSPI authentication token."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>service_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>sspi_send_token</name><operator>.</operator><name>pvBuffer</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>s_pSecFn</name><operator>-&gt;</operator><name>FreeContextBuffer</name></name><argument_list>(<argument><expr><name><name>sspi_send_token</name><operator>.</operator><name>pvBuffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name><name>sspi_recv_token</name><operator>.</operator><name>pvBuffer</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>s_pSecFn</name><operator>-&gt;</operator><name>FreeContextBuffer</name></name><argument_list>(<argument><expr><name><name>sspi_recv_token</name><operator>.</operator><name>pvBuffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name><name>s_pSecFn</name><operator>-&gt;</operator><name>FreeCredentialsHandle</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>cred_handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>s_pSecFn</name><operator>-&gt;</operator><name>DeleteSecurityContext</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>sspi_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_COULDNT_CONNECT</name></expr>;</return>
</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>sspi_send_token</name><operator>.</operator><name>pvBuffer</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>s_pSecFn</name><operator>-&gt;</operator><name>FreeContextBuffer</name></name><argument_list>(<argument><expr><name><name>sspi_send_token</name><operator>.</operator><name>pvBuffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sspi_send_token</name><operator>.</operator><name>pvBuffer</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>sspi_send_token</name><operator>.</operator><name>cbBuffer</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>sspi_recv_token</name><operator>.</operator><name>pvBuffer</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>s_pSecFn</name><operator>-&gt;</operator><name>FreeContextBuffer</name></name><argument_list>(<argument><expr><name><name>sspi_recv_token</name><operator>.</operator><name>pvBuffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sspi_recv_token</name><operator>.</operator><name>pvBuffer</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>sspi_recv_token</name><operator>.</operator><name>cbBuffer</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>status</name> <operator>!=</operator> <name>SEC_I_CONTINUE_NEEDED</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>











<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_blockread_all</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>sock</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>socksreq</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>actualread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name> <operator>||</operator> <operator>(</operator><name>actualread</name> <operator>!=</operator> <literal type="number">4</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Failed to receive SSPI authentication response."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>service_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>s_pSecFn</name><operator>-&gt;</operator><name>FreeCredentialsHandle</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>cred_handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>s_pSecFn</name><operator>-&gt;</operator><name>DeleteSecurityContext</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>sspi_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_COULDNT_CONNECT</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>(<expr><name><name>socksreq</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">255</literal></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"User was rejected by the SOCKS5 server (%u %u)."</literal></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name><name>socksreq</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name><name>socksreq</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>service_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>s_pSecFn</name><operator>-&gt;</operator><name>FreeCredentialsHandle</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>cred_handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>s_pSecFn</name><operator>-&gt;</operator><name>DeleteSecurityContext</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>sspi_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_COULDNT_CONNECT</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>socksreq</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Invalid SSPI authentication response type (%u %u)."</literal></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name><name>socksreq</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name><name>socksreq</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>service_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>s_pSecFn</name><operator>-&gt;</operator><name>FreeCredentialsHandle</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>cred_handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>s_pSecFn</name><operator>-&gt;</operator><name>DeleteSecurityContext</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>sspi_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_COULDNT_CONNECT</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>us_length</name></expr></argument>, <argument><expr><name>socksreq</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>short</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>us_length</name> <operator>=</operator> <call><name>ntohs</name><argument_list>(<argument><expr><name>us_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sspi_recv_token</name><operator>.</operator><name>cbBuffer</name></name> <operator>=</operator> <name>us_length</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sspi_recv_token</name><operator>.</operator><name>pvBuffer</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>us_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>sspi_recv_token</name><operator>.</operator><name>pvBuffer</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>service_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>s_pSecFn</name><operator>-&gt;</operator><name>FreeCredentialsHandle</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>cred_handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>s_pSecFn</name><operator>-&gt;</operator><name>DeleteSecurityContext</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>sspi_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_blockread_all</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>sock</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>sspi_recv_token</name><operator>.</operator><name>pvBuffer</name></name></expr></argument>,
<argument><expr><name><name>sspi_recv_token</name><operator>.</operator><name>cbBuffer</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>actualread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name> <operator>||</operator> <operator>(</operator><name>actualread</name> <operator>!=</operator> <name>us_length</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Failed to receive SSPI authentication token."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>service_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>sspi_recv_token</name><operator>.</operator><name>pvBuffer</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>s_pSecFn</name><operator>-&gt;</operator><name>FreeContextBuffer</name></name><argument_list>(<argument><expr><name><name>sspi_recv_token</name><operator>.</operator><name>pvBuffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name><name>s_pSecFn</name><operator>-&gt;</operator><name>FreeCredentialsHandle</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>cred_handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>s_pSecFn</name><operator>-&gt;</operator><name>DeleteSecurityContext</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>sspi_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_COULDNT_CONNECT</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>context_handle</name> <operator>=</operator> <operator>&amp;</operator><name>sspi_context</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>service_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name><name>s_pSecFn</name><operator>-&gt;</operator><name>QueryCredentialsAttributes</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>cred_handle</name></expr></argument>,
<argument><expr><name>SECPKG_CRED_ATTR_NAMES</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>names</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>s_pSecFn</name><operator>-&gt;</operator><name>FreeCredentialsHandle</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>cred_handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><call><name>check_sspi_err</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><literal type="string">"QueryCredentialAttributes"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>s_pSecFn</name><operator>-&gt;</operator><name>DeleteSecurityContext</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>sspi_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>s_pSecFn</name><operator>-&gt;</operator><name>FreeContextBuffer</name></name><argument_list>(<argument><expr><name><name>names</name><operator>.</operator><name>sUserName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Failed to determine user name."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_COULDNT_CONNECT</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"SOCKS5 server authencticated user %s with GSS-API.\n"</literal></expr></argument>,
<argument><expr><name><name>names</name><operator>.</operator><name>sUserName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>s_pSecFn</name><operator>-&gt;</operator><name>FreeContextBuffer</name></name><argument_list>(<argument><expr><name><name>names</name><operator>.</operator><name>sUserName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>socksreq</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>socksreq</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name>gss_enc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<if_stmt><if>if<condition>(<expr><name>sspi_ret_flags</name> <operator>&amp;</operator> <name>ISC_REQ_CONFIDENTIALITY</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>gss_enc</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>(<expr><name>sspi_ret_flags</name> <operator>&amp;</operator> <name>ISC_REQ_INTEGRITY</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>gss_enc</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"SOCKS5 server supports GSS-API %s data protection.\n"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name>gss_enc</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>?</condition><then><expr><literal type="string">"no"</literal></expr></then><else>:<expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name>gss_enc</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr>?</condition><then><expr><literal type="string">"integrity"</literal></expr></then><else>:<expr><literal type="string">"confidentiality"</literal></expr></else></ternary><operator>)</operator></expr></else></ternary></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>gss_enc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>































<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>socks5_gssapi_nec</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>us_length</name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><operator>(</operator><name>short</name><operator>)</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>socksreq</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>us_length</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>short</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name><name>s_pSecFn</name><operator>-&gt;</operator><name>QueryContextAttributes</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>sspi_context</name></expr></argument>,
<argument><expr><name>SECPKG_ATTR_SIZES</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>sspi_sizes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><call><name>check_sspi_err</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><literal type="string">"QueryContextAttributes"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>s_pSecFn</name><operator>-&gt;</operator><name>DeleteSecurityContext</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>sspi_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Failed to query security context attributes."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_COULDNT_CONNECT</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sspi_w_token</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>cbBuffer</name> <operator>=</operator> <name><name>sspi_sizes</name><operator>.</operator><name>cbSecurityTrailer</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sspi_w_token</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>BufferType</name> <operator>=</operator> <name>SECBUFFER_TOKEN</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sspi_w_token</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>pvBuffer</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name><name>sspi_sizes</name><operator>.</operator><name>cbSecurityTrailer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>sspi_w_token</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>pvBuffer</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>s_pSecFn</name><operator>-&gt;</operator><name>DeleteSecurityContext</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>sspi_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sspi_w_token</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>cbBuffer</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sspi_w_token</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>pvBuffer</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>sspi_w_token</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>pvBuffer</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>s_pSecFn</name><operator>-&gt;</operator><name>FreeContextBuffer</name></name><argument_list>(<argument><expr><name><name>sspi_w_token</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>pvBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>s_pSecFn</name><operator>-&gt;</operator><name>DeleteSecurityContext</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>sspi_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>sspi_w_token</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>pvBuffer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gss_enc</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sspi_w_token</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>BufferType</name> <operator>=</operator> <name>SECBUFFER_PADDING</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sspi_w_token</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>cbBuffer</name> <operator>=</operator> <name><name>sspi_sizes</name><operator>.</operator><name>cbBlockSize</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sspi_w_token</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>pvBuffer</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name><name>sspi_sizes</name><operator>.</operator><name>cbBlockSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>sspi_w_token</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>pvBuffer</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>s_pSecFn</name><operator>-&gt;</operator><name>FreeContextBuffer</name></name><argument_list>(<argument><expr><name><name>sspi_w_token</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>pvBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>s_pSecFn</name><operator>-&gt;</operator><name>FreeContextBuffer</name></name><argument_list>(<argument><expr><name><name>sspi_w_token</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>pvBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>s_pSecFn</name><operator>-&gt;</operator><name>DeleteSecurityContext</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>sspi_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name><name>s_pSecFn</name><operator>-&gt;</operator><name>EncryptMessage</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>sspi_context</name></expr></argument>,
<argument><expr><name>KERB_WRAP_NO_ENCRYPT</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>wrap_desc</name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><call><name>check_sspi_err</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><literal type="string">"EncryptMessage"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>s_pSecFn</name><operator>-&gt;</operator><name>FreeContextBuffer</name></name><argument_list>(<argument><expr><name><name>sspi_w_token</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>pvBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>s_pSecFn</name><operator>-&gt;</operator><name>FreeContextBuffer</name></name><argument_list>(<argument><expr><name><name>sspi_w_token</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>pvBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>s_pSecFn</name><operator>-&gt;</operator><name>FreeContextBuffer</name></name><argument_list>(<argument><expr><name><name>sspi_w_token</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>pvBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>s_pSecFn</name><operator>-&gt;</operator><name>DeleteSecurityContext</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>sspi_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Failed to query security context attributes."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_COULDNT_CONNECT</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>sspi_send_token</name><operator>.</operator><name>cbBuffer</name></name> <operator>=</operator> <name><name>sspi_w_token</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>cbBuffer</name>
<operator>+</operator> <name><name>sspi_w_token</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>cbBuffer</name>
<operator>+</operator> <name><name>sspi_w_token</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>cbBuffer</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sspi_send_token</name><operator>.</operator><name>pvBuffer</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name><name>sspi_send_token</name><operator>.</operator><name>cbBuffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>sspi_send_token</name><operator>.</operator><name>pvBuffer</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>s_pSecFn</name><operator>-&gt;</operator><name>FreeContextBuffer</name></name><argument_list>(<argument><expr><name><name>sspi_w_token</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>pvBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>s_pSecFn</name><operator>-&gt;</operator><name>FreeContextBuffer</name></name><argument_list>(<argument><expr><name><name>sspi_w_token</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>pvBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>s_pSecFn</name><operator>-&gt;</operator><name>FreeContextBuffer</name></name><argument_list>(<argument><expr><name><name>sspi_w_token</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>pvBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>s_pSecFn</name><operator>-&gt;</operator><name>DeleteSecurityContext</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>sspi_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>sspi_send_token</name><operator>.</operator><name>pvBuffer</name></name></expr></argument>, <argument><expr><name><name>sspi_w_token</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>pvBuffer</name></expr></argument>,
<argument><expr><name><name>sspi_w_token</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>cbBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>(</operator><name>PUCHAR</name><operator>)</operator> <name><name>sspi_send_token</name><operator>.</operator><name>pvBuffer</name></name> <operator>+</operator><operator>(</operator><name>int</name><operator>)</operator><name><name>sspi_w_token</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>cbBuffer</name></expr></argument>,
<argument><expr><name><name>sspi_w_token</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>pvBuffer</name></expr></argument>, <argument><expr><name><name>sspi_w_token</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>cbBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>(</operator><name>PUCHAR</name><operator>)</operator> <name><name>sspi_send_token</name><operator>.</operator><name>pvBuffer</name></name>
<operator>+</operator> <name><name>sspi_w_token</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>cbBuffer</name>
<operator>+</operator> <name><name>sspi_w_token</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>cbBuffer</name></expr></argument>,
<argument><expr><name><name>sspi_w_token</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>pvBuffer</name></expr></argument>, <argument><expr><name><name>sspi_w_token</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>cbBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>s_pSecFn</name><operator>-&gt;</operator><name>FreeContextBuffer</name></name><argument_list>(<argument><expr><name><name>sspi_w_token</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>pvBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sspi_w_token</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>pvBuffer</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sspi_w_token</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>cbBuffer</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>s_pSecFn</name><operator>-&gt;</operator><name>FreeContextBuffer</name></name><argument_list>(<argument><expr><name><name>sspi_w_token</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>pvBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sspi_w_token</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>pvBuffer</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sspi_w_token</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>cbBuffer</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>s_pSecFn</name><operator>-&gt;</operator><name>FreeContextBuffer</name></name><argument_list>(<argument><expr><name><name>sspi_w_token</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>pvBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sspi_w_token</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>pvBuffer</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sspi_w_token</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>cbBuffer</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>us_length</name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><operator>(</operator><name>short</name><operator>)</operator><name><name>sspi_send_token</name><operator>.</operator><name>cbBuffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>socksreq</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>us_length</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>short</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>Curl_write_plain</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>sock</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>socksreq</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>written</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>code</name> <operator>||</operator> <operator>(</operator><literal type="number">4</literal> <operator>!=</operator> <name>written</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Failed to send SSPI encryption request."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>sspi_send_token</name><operator>.</operator><name>pvBuffer</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>s_pSecFn</name><operator>-&gt;</operator><name>FreeContextBuffer</name></name><argument_list>(<argument><expr><name><name>sspi_send_token</name><operator>.</operator><name>pvBuffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name><name>s_pSecFn</name><operator>-&gt;</operator><name>DeleteSecurityContext</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>sspi_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_COULDNT_CONNECT</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>socks5_gssapi_nec</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>socksreq</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gss_enc</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>Curl_write_plain</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>sock</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>socksreq</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>written</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>code</name> <operator>||</operator> <operator>(</operator><literal type="number">1</literal> <operator>!=</operator> <name>written</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Failed to send SSPI encryption type."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>s_pSecFn</name><operator>-&gt;</operator><name>DeleteSecurityContext</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>sspi_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_COULDNT_CONNECT</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>Curl_write_plain</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>sock</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>sspi_send_token</name><operator>.</operator><name>pvBuffer</name></name></expr></argument>,
<argument><expr><name><name>sspi_send_token</name><operator>.</operator><name>cbBuffer</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>written</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>code</name> <operator>||</operator> <operator>(</operator><name><name>sspi_send_token</name><operator>.</operator><name>cbBuffer</name></name> <operator>!=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>written</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Failed to send SSPI encryption type."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>sspi_send_token</name><operator>.</operator><name>pvBuffer</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>s_pSecFn</name><operator>-&gt;</operator><name>FreeContextBuffer</name></name><argument_list>(<argument><expr><name><name>sspi_send_token</name><operator>.</operator><name>pvBuffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name><name>s_pSecFn</name><operator>-&gt;</operator><name>DeleteSecurityContext</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>sspi_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_COULDNT_CONNECT</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name><name>sspi_send_token</name><operator>.</operator><name>pvBuffer</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>s_pSecFn</name><operator>-&gt;</operator><name>FreeContextBuffer</name></name><argument_list>(<argument><expr><name><name>sspi_send_token</name><operator>.</operator><name>pvBuffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_blockread_all</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>sock</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>socksreq</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>actualread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name> <operator>||</operator> <operator>(</operator><name>actualread</name> <operator>!=</operator> <literal type="number">4</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Failed to receive SSPI encryption response."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>s_pSecFn</name><operator>-&gt;</operator><name>DeleteSecurityContext</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>sspi_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_COULDNT_CONNECT</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>(<expr><name><name>socksreq</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">255</literal></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"User was rejected by the SOCKS5 server (%u %u)."</literal></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name><name>socksreq</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name><name>socksreq</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>s_pSecFn</name><operator>-&gt;</operator><name>DeleteSecurityContext</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>sspi_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_COULDNT_CONNECT</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>socksreq</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Invalid SSPI encryption response type (%u %u)."</literal></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name><name>socksreq</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name><name>socksreq</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>s_pSecFn</name><operator>-&gt;</operator><name>DeleteSecurityContext</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>sspi_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_COULDNT_CONNECT</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>us_length</name></expr></argument>, <argument><expr><name>socksreq</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>short</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>us_length</name> <operator>=</operator> <call><name>ntohs</name><argument_list>(<argument><expr><name>us_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sspi_w_token</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>cbBuffer</name> <operator>=</operator> <name>us_length</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sspi_w_token</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>pvBuffer</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>us_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>sspi_w_token</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>pvBuffer</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>s_pSecFn</name><operator>-&gt;</operator><name>DeleteSecurityContext</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>sspi_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_blockread_all</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>sock</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>sspi_w_token</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>pvBuffer</name></expr></argument>,
<argument><expr><name><name>sspi_w_token</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>cbBuffer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>actualread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name> <operator>||</operator> <operator>(</operator><name>actualread</name> <operator>!=</operator> <name>us_length</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Failed to receive SSPI encryption type."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>s_pSecFn</name><operator>-&gt;</operator><name>FreeContextBuffer</name></name><argument_list>(<argument><expr><name><name>sspi_w_token</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>pvBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>s_pSecFn</name><operator>-&gt;</operator><name>DeleteSecurityContext</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>sspi_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_COULDNT_CONNECT</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>socks5_gssapi_nec</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>wrap_desc</name><operator>.</operator><name>cBuffers</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sspi_w_token</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>BufferType</name> <operator>=</operator> <name>SECBUFFER_STREAM</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sspi_w_token</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>BufferType</name> <operator>=</operator> <name>SECBUFFER_DATA</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sspi_w_token</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>cbBuffer</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sspi_w_token</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>pvBuffer</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name><name>s_pSecFn</name><operator>-&gt;</operator><name>DecryptMessage</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>sspi_context</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>wrap_desc</name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name>qop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>check_sspi_err</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><literal type="string">"DecryptMessage"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>sspi_w_token</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>pvBuffer</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>s_pSecFn</name><operator>-&gt;</operator><name>FreeContextBuffer</name></name><argument_list>(<argument><expr><name><name>sspi_w_token</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>pvBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name><name>sspi_w_token</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>pvBuffer</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>s_pSecFn</name><operator>-&gt;</operator><name>FreeContextBuffer</name></name><argument_list>(<argument><expr><name><name>sspi_w_token</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>pvBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name><name>s_pSecFn</name><operator>-&gt;</operator><name>DeleteSecurityContext</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>sspi_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Failed to query security context attributes."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_COULDNT_CONNECT</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>sspi_w_token</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>cbBuffer</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Invalid SSPI encryption response length (%lu)."</literal></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name><name>sspi_w_token</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>cbBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>sspi_w_token</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>pvBuffer</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>s_pSecFn</name><operator>-&gt;</operator><name>FreeContextBuffer</name></name><argument_list>(<argument><expr><name><name>sspi_w_token</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>pvBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name><name>sspi_w_token</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>pvBuffer</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>s_pSecFn</name><operator>-&gt;</operator><name>FreeContextBuffer</name></name><argument_list>(<argument><expr><name><name>sspi_w_token</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>pvBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name><name>s_pSecFn</name><operator>-&gt;</operator><name>DeleteSecurityContext</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>sspi_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_COULDNT_CONNECT</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>socksreq</name></expr></argument>, <argument><expr><name><name>sspi_w_token</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>pvBuffer</name></expr></argument>, <argument><expr><name><name>sspi_w_token</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>cbBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>s_pSecFn</name><operator>-&gt;</operator><name>FreeContextBuffer</name></name><argument_list>(<argument><expr><name><name>sspi_w_token</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>pvBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>s_pSecFn</name><operator>-&gt;</operator><name>FreeContextBuffer</name></name><argument_list>(<argument><expr><name><name>sspi_w_token</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>pvBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>sspi_w_token</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>cbBuffer</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Invalid SSPI encryption response length (%lu)."</literal></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name><name>sspi_w_token</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>cbBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>s_pSecFn</name><operator>-&gt;</operator><name>FreeContextBuffer</name></name><argument_list>(<argument><expr><name><name>sspi_w_token</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>pvBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>s_pSecFn</name><operator>-&gt;</operator><name>DeleteSecurityContext</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>sspi_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_COULDNT_CONNECT</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>socksreq</name></expr></argument>, <argument><expr><name><name>sspi_w_token</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>pvBuffer</name></expr></argument>, <argument><expr><name><name>sspi_w_token</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>cbBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>s_pSecFn</name><operator>-&gt;</operator><name>FreeContextBuffer</name></name><argument_list>(<argument><expr><name><name>sspi_w_token</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>pvBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>curlx_nonblock</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"SOCKS5 access with%s protection granted.\n"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name><name>socksreq</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>?</condition><then><expr><literal type="string">"out GSS-API data"</literal></expr></then><else>:
<expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name><name>socksreq</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr>?</condition><then><expr><literal type="string">" GSS-API integrity"</literal></expr></then><else>:<expr><literal type="string">" GSS-API confidentiality"</literal></expr></else></ternary><operator>)</operator></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>










<return>return <expr><name>CURLE_OK</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
