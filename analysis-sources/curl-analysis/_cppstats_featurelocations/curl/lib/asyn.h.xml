<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\curl-analysis\_cppstats_featurelocations\curl\lib\asyn.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HEADER_CURL_ASYN_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEADER_CURL_ASYN_H</name></cpp:macro></cpp:define>






















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_setup.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_addrinfo.h"</cpp:file></cpp:include>

<struct_decl>struct <name>addrinfo</name>;</struct_decl>
<struct_decl>struct <name>hostent</name>;</struct_decl>
<struct_decl>struct <name>Curl_easy</name>;</struct_decl>
<struct_decl>struct <name>connectdata</name>;</struct_decl>
<struct_decl>struct <name>Curl_dns_entry</name>;</struct_decl>














<function_decl><type><name>int</name></type> <name>Curl_resolver_global_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>void</name></type> <name>Curl_resolver_global_cleanup</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>









<function_decl><type><name>CURLcode</name></type> <name>Curl_resolver_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>easy</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>resolver</name></decl></parameter>)</parameter_list>;</function_decl>








<function_decl><type><name>void</name></type> <name>Curl_resolver_cleanup</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>resolver</name></decl></parameter>)</parameter_list>;</function_decl>









<function_decl><type><name>CURLcode</name></type> <name>Curl_resolver_duphandle</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>easy</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>to</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>;</function_decl>










<function_decl><type><name>void</name></type> <name>Curl_resolver_cancel</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>;</function_decl>












<function_decl><type><name>void</name></type> <name>Curl_resolver_kill</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>;</function_decl>









<function_decl><type><name>int</name></type> <name>Curl_resolver_getsock</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>curl_socket_t</name> <modifier>*</modifier></type><name>sock</name></decl></parameter>)</parameter_list>;</function_decl>










<function_decl><type><name>CURLcode</name></type> <name>Curl_resolver_is_resolved</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>Curl_dns_entry</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>dns</name></decl></parameter>)</parameter_list>;</function_decl>












<function_decl><type><name>CURLcode</name></type> <name>Curl_resolver_wait_resolv</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>Curl_dns_entry</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>dnsentry</name></decl></parameter>)</parameter_list>;</function_decl>












<function_decl><type><name>Curl_addrinfo</name> <modifier>*</modifier></type><name>Curl_resolver_getaddrinfo</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>hostname</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>port</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>waitp</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURLRES_ASYNCH</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Curl_resolver_cancel</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>Curl_nop_stmt</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Curl_resolver_kill</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>Curl_nop_stmt</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Curl_resolver_is_resolved</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>CURLE_COULDNT_RESOLVE_HOST</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Curl_resolver_wait_resolv</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>CURLE_COULDNT_RESOLVE_HOST</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Curl_resolver_getsock</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>,<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Curl_resolver_duphandle</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>,<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>CURLE_OK</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Curl_resolver_init</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>CURLE_OK</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Curl_resolver_global_init</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>CURLE_OK</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Curl_resolver_global_cleanup</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>Curl_nop_stmt</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Curl_resolver_cleanup</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>Curl_nop_stmt</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CURLRES_ASYNCH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Curl_resolver_asynch</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Curl_resolver_asynch</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
