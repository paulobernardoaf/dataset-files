<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\curl-analysis\_cppstats_featurelocations\curl\lib\vquic\quiche.c">





















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_setup.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_QUICHE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;quiche.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;openssl/err.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"urldata.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sendf.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"strdup.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rand.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"quic.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"strcase.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"multiif.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"connect.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"strerror.h"</cpp:file></cpp:include>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_printf.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_memory.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memdebug.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEBUG_HTTP3</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG_HTTP3</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>H3BUGF</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>x</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>H3BUGF</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { } while(0)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QUIC_MAX_STREAMS</name></cpp:macro> <cpp:value>(256*1024)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QUIC_MAX_DATA</name></cpp:macro> <cpp:value>(1*1024*1024)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QUIC_IDLE_TIMEOUT</name></cpp:macro> <cpp:value>(60 * 1000)</cpp:value></cpp:define> 

<function_decl><type><specifier>static</specifier> <name>CURLcode</name></type> <name>process_ingress</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,
<parameter><decl><type><name>curl_socket_t</name></type> <name>sockfd</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>quicsocket</name></name> <modifier>*</modifier></type><name>qs</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>CURLcode</name></type> <name>flush_egress</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>curl_socket_t</name></type> <name>sockfd</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>quicsocket</name></name> <modifier>*</modifier></type><name>qs</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>CURLcode</name></type> <name>http_request</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>mem</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><specifier>static</specifier> <name>Curl_recv</name></type> <name>h3_stream_recv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>Curl_send</name></type> <name>h3_stream_send</name></decl>;</decl_stmt>


<function><type><specifier>static</specifier> <name>int</name></type> <name>quiche_getsock</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>curl_socket_t</name> <modifier>*</modifier></type><name>socks</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>SingleRequest</name></name> <modifier>*</modifier></type><name>k</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>req</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bitmap</name> <init>= <expr><name>GETSOCK_BLANK</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>socks</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>sock</name><index>[<expr><name>FIRSTSOCKET</name></expr>]</index></name></expr>;</expr_stmt>



<expr_stmt><expr><name>bitmap</name> <operator>|=</operator> <call><name>GETSOCK_READSOCK</name><argument_list>(<argument><expr><name>FIRSTSOCKET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>k</name><operator>-&gt;</operator><name>keepon</name></name> <operator>&amp;</operator> <operator>(</operator><name>KEEP_SEND</name><operator>|</operator><name>KEEP_SEND_PAUSE</name><operator>)</operator><operator>)</operator> <operator>==</operator> <name>KEEP_SEND</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>bitmap</name> <operator>|=</operator> <call><name>GETSOCK_WRITESOCK</name><argument_list>(<argument><expr><name>FIRSTSOCKET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>bitmap</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>quiche_perform_getsock</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,
<parameter><decl><type><name>curl_socket_t</name> <modifier>*</modifier></type><name>socks</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>quiche_getsock</name><argument_list>(<argument><expr><operator>(</operator>struct <name>connectdata</name> <operator>*</operator><operator>)</operator><name>conn</name></expr></argument>, <argument><expr><name>socks</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>quiche_disconnect</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>dead_connection</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>quicsocket</name></name> <modifier>*</modifier></type><name>qs</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>quic</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>dead_connection</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>quiche_h3_config_free</name><argument_list>(<argument><expr><name><name>qs</name><operator>-&gt;</operator><name>h3config</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>quiche_h3_conn_free</name><argument_list>(<argument><expr><name><name>qs</name><operator>-&gt;</operator><name>h3c</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>quiche_config_free</name><argument_list>(<argument><expr><name><name>qs</name><operator>-&gt;</operator><name>cfg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>quiche_conn_free</name><argument_list>(<argument><expr><name><name>qs</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name>quiche_conncheck</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>checks_to_perform</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>conn</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>checks_to_perform</name></expr>;</expr_stmt>
<return>return <expr><name>CONNRESULT_NONE</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>quiche_do</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>done</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>HTTP</name></name> <modifier>*</modifier></type><name>stream</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>protop</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>h3req</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> 
<return>return <expr><call><name>Curl_http</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>done</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>Curl_handler</name></name></type> <name>Curl_handler_http3</name> <init>= <expr><block>{
<expr><literal type="string">"HTTPS"</literal></expr>, 
<expr><name>ZERO_NULL</name></expr>, 
<expr><name>quiche_do</name></expr>, 
<expr><name>Curl_http_done</name></expr>, 
<expr><name>ZERO_NULL</name></expr>, 
<expr><name>ZERO_NULL</name></expr>, 
<expr><name>ZERO_NULL</name></expr>, 
<expr><name>ZERO_NULL</name></expr>, 
<expr><name>quiche_getsock</name></expr>, 
<expr><name>quiche_getsock</name></expr>, 
<expr><name>ZERO_NULL</name></expr>, 
<expr><name>quiche_perform_getsock</name></expr>, 
<expr><name>quiche_disconnect</name></expr>, 
<expr><name>ZERO_NULL</name></expr>, 
<expr><name>quiche_conncheck</name></expr>, 
<expr><name>PORT_HTTP</name></expr>, 
<expr><name>CURLPROTO_HTTPS</name></expr>, 
<expr><name>PROTOPT_SSL</name> <operator>|</operator> <name>PROTOPT_STREAM</name></expr> 
}</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG_QUICHE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type> <name>quiche_debug_log</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>line</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>argp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>argp</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>CURLcode</name></type> <name>Curl_quic_connect</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>curl_socket_t</name></type> <name>sockfd</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sockindex</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>socklen_t</name></type> <name>addrlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>quicsocket</name></name> <modifier>*</modifier></type><name>qs</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>hequic</name><index>[<expr><name>sockindex</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG_QUICHE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>debug_log_init</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>debug_log_init</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>quiche_enable_debug_logging</name><argument_list>(<argument><expr><name>quiche_debug_log</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>debug_log_init</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>addr</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>addrlen</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>qs</name><operator>-&gt;</operator><name>cfg</name></name> <operator>=</operator> <call><name>quiche_config_new</name><argument_list>(<argument><expr><name>QUICHE_PROTOCOL_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>qs</name><operator>-&gt;</operator><name>cfg</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"can't create quiche config"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_FAILED_INIT</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>quiche_config_set_max_idle_timeout</name><argument_list>(<argument><expr><name><name>qs</name><operator>-&gt;</operator><name>cfg</name></name></expr></argument>, <argument><expr><name>QUIC_IDLE_TIMEOUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>quiche_config_set_initial_max_data</name><argument_list>(<argument><expr><name><name>qs</name><operator>-&gt;</operator><name>cfg</name></name></expr></argument>, <argument><expr><name>QUIC_MAX_DATA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>quiche_config_set_initial_max_stream_data_bidi_local</name><argument_list>(<argument><expr><name><name>qs</name><operator>-&gt;</operator><name>cfg</name></name></expr></argument>, <argument><expr><name>QUIC_MAX_DATA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>quiche_config_set_initial_max_stream_data_bidi_remote</name><argument_list>(<argument><expr><name><name>qs</name><operator>-&gt;</operator><name>cfg</name></name></expr></argument>,
<argument><expr><name>QUIC_MAX_DATA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>quiche_config_set_initial_max_stream_data_uni</name><argument_list>(<argument><expr><name><name>qs</name><operator>-&gt;</operator><name>cfg</name></name></expr></argument>, <argument><expr><name>QUIC_MAX_DATA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>quiche_config_set_initial_max_streams_bidi</name><argument_list>(<argument><expr><name><name>qs</name><operator>-&gt;</operator><name>cfg</name></name></expr></argument>, <argument><expr><name>QUIC_MAX_STREAMS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>quiche_config_set_initial_max_streams_uni</name><argument_list>(<argument><expr><name><name>qs</name><operator>-&gt;</operator><name>cfg</name></name></expr></argument>, <argument><expr><name>QUIC_MAX_STREAMS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>quiche_config_set_application_protos</name><argument_list>(<argument><expr><name><name>qs</name><operator>-&gt;</operator><name>cfg</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator>
<name>QUICHE_H3_APPLICATION_PROTOCOL</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>QUICHE_H3_APPLICATION_PROTOCOL</name></expr></argument>)</argument_list></sizeof>
<operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_rand</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>qs</name><operator>-&gt;</operator><name>scid</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>qs</name><operator>-&gt;</operator><name>scid</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"SSLKEYLOGFILE"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>quiche_config_log_keys</name><argument_list>(<argument><expr><name><name>qs</name><operator>-&gt;</operator><name>cfg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>qs</name><operator>-&gt;</operator><name>conn</name></name> <operator>=</operator> <call><name>quiche_connect</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>host</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>)</operator> <name><name>qs</name><operator>-&gt;</operator><name>scid</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>qs</name><operator>-&gt;</operator><name>scid</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>qs</name><operator>-&gt;</operator><name>cfg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>qs</name><operator>-&gt;</operator><name>conn</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"can't create quiche connection"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>flush_egress</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>sockfd</name></expr></argument>, <argument><expr><name>qs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>Curl_addr2string</name><argument_list>(<argument><expr><operator>(</operator>struct <name>sockaddr</name><operator>*</operator><operator>)</operator><name>addr</name></expr></argument>, <argument><expr><name>addrlen</name></expr></argument>,
<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>primary_ip</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>primary_port</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr><name>STRERROR_LEN</name></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"ssrem inet_ntop() failed with errno %d: %s"</literal></expr></argument>,
<argument><expr><name>SOCKERRNO</name></expr></argument>, <argument><expr><call><name>Curl_strerror</name><argument_list>(<argument><expr><name>SOCKERRNO</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_BAD_FUNCTION_ARGUMENT</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>ip_addr_str</name></name></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>primary_ip</name></name></expr></argument>, <argument><expr><name>MAX_IPADR_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_persistconninfo</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>ssl</name><index>[<expr><name>FIRSTSOCKET</name></expr>]</index></name><operator>.</operator><name>state</name> <operator>=</operator> <name>ssl_connection_complete</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Sent QUIC client Initial, ALPN: %s\n"</literal></expr></argument>,
<argument><expr><name>QUICHE_H3_APPLICATION_PROTOCOL</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>quiche_has_connected</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sockindex</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>tempindex</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>quicsocket</name></name> <modifier>*</modifier></type><name>qs</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>quic</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>hequic</name><index>[<expr><name>tempindex</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>recv</name><index>[<expr><name>sockindex</name></expr>]</index></name> <operator>=</operator> <name>h3_stream_recv</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>send</name><index>[<expr><name>sockindex</name></expr>]</index></name> <operator>=</operator> <name>h3_stream_send</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>handler</name></name> <operator>=</operator> <operator>&amp;</operator><name>Curl_handler_http3</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>multiplex</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>httpversion</name></name> <operator>=</operator> <literal type="number">30</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>bundle</name><operator>-&gt;</operator><name>multiuse</name></name> <operator>=</operator> <name>BUNDLE_MULTIPLEX</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>qs</name><operator>-&gt;</operator><name>h3config</name></name> <operator>=</operator> <call><name>quiche_h3_config_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>qs</name><operator>-&gt;</operator><name>h3config</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name><name>qs</name><operator>-&gt;</operator><name>h3c</name></name> <operator>=</operator> <call><name>quiche_h3_conn_new_with_transport</name><argument_list>(<argument><expr><name><name>qs</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>, <argument><expr><name><name>qs</name><operator>-&gt;</operator><name>h3config</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>qs</name><operator>-&gt;</operator><name>h3c</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>hequic</name><index>[<expr><literal type="number">1</literal><operator>-</operator><name>tempindex</name></expr>]</index></name><operator>.</operator><name>cfg</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>qs</name> <operator>=</operator> <operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>hequic</name><index>[<expr><literal type="number">1</literal><operator>-</operator><name>tempindex</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>quiche_config_free</name><argument_list>(<argument><expr><name><name>qs</name><operator>-&gt;</operator><name>cfg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>quiche_conn_free</name><argument_list>(<argument><expr><name><name>qs</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>qs</name><operator>-&gt;</operator><name>cfg</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>qs</name><operator>-&gt;</operator><name>conn</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>CURLE_OK</name></expr>;</return>
<label><name>fail</name>:</label>
<expr_stmt><expr><call><name>quiche_h3_config_free</name><argument_list>(<argument><expr><name><name>qs</name><operator>-&gt;</operator><name>h3config</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>quiche_h3_conn_free</name><argument_list>(<argument><expr><name><name>qs</name><operator>-&gt;</operator><name>h3c</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>CURLcode</name></type> <name>Curl_quic_is_connected</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sockindex</name></decl></parameter>,
<parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>done</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>quicsocket</name></name> <modifier>*</modifier></type><name>qs</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>hequic</name><index>[<expr><name>sockindex</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>curl_socket_t</name></type> <name>sockfd</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>tempsock</name><index>[<expr><name>sockindex</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>process_ingress</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>sockfd</name></expr></argument>, <argument><expr><name>qs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>flush_egress</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>sockfd</name></expr></argument>, <argument><expr><name>qs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>quiche_conn_is_established</name><argument_list>(<argument><expr><name><name>qs</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>done</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>quiche_has_connected</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>sockindex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DEBUGF</name><argument_list>(<argument><expr><call><name>infof</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"quiche established connection!\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>process_ingress</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sockfd</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>quicsocket</name></name> <modifier>*</modifier></type><name>qs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>recvd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>buffer</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>bufsize</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>buffer_size</name></name></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>quiche_conn_on_timeout</name><argument_list>(<argument><expr><name><name>qs</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<do>do <block>{<block_content>
<expr_stmt><expr><name>recvd</name> <operator>=</operator> <call><name>recv</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>bufsize</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>(</operator><name>recvd</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>SOCKERRNO</name> <operator>==</operator> <name>EAGAIN</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>SOCKERRNO</name> <operator>==</operator> <name>EWOULDBLOCK</name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>recvd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"quiche: recv() unexpectedly returned %d "</literal>
<literal type="string">"(errno: %d, socket %d)"</literal></expr></argument>, <argument><expr><name>recvd</name></expr></argument>, <argument><expr><name>SOCKERRNO</name></expr></argument>, <argument><expr><name>sockfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_RECV_ERROR</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>recvd</name> <operator>=</operator> <call><name>quiche_conn_recv</name><argument_list>(<argument><expr><name><name>qs</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>recvd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>recvd</name> <operator>==</operator> <name>QUICHE_ERR_DONE</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>recvd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"quiche_conn_recv() == %d"</literal></expr></argument>, <argument><expr><name>recvd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_RECV_ERROR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block> while<condition>(<expr><literal type="number">1</literal></expr>)</condition>;</do>

<return>return <expr><name>CURLE_OK</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>flush_egress</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sockfd</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>quicsocket</name></name> <modifier>*</modifier></type><name>qs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>sent</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>uint8_t</name></type> <name><name>out</name><index>[<expr><literal type="number">1200</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>timeout_ns</name></decl>;</decl_stmt>

<do>do <block>{<block_content>
<expr_stmt><expr><name>sent</name> <operator>=</operator> <call><name>quiche_conn_send</name><argument_list>(<argument><expr><name><name>qs</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>sent</name> <operator>==</operator> <name>QUICHE_ERR_DONE</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>sent</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"quiche_conn_send returned %zd\n"</literal></expr></argument>,
<argument><expr><name>sent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_SEND_ERROR</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>sent</name> <operator>=</operator> <call><name>send</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>sent</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>sent</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"send() returned %zd\n"</literal></expr></argument>, <argument><expr><name>sent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_SEND_ERROR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block> while<condition>(<expr><literal type="number">1</literal></expr>)</condition>;</do>


<expr_stmt><expr><name>timeout_ns</name> <operator>=</operator> <call><name>quiche_conn_timeout_as_nanos</name><argument_list>(<argument><expr><name><name>qs</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>timeout_ns</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>Curl_expire</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><operator>(</operator><name>timeout_ns</name> <operator>+</operator> <literal type="number">999999</literal><operator>)</operator> <operator>/</operator> <literal type="number">1000000</literal></expr></argument>, <argument><expr><name>EXPIRE_QUIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>
</block_content>}</block></function>

<struct>struct <name>h3h1header</name> <block>{
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>dest</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>destlen</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>size_t</name></type> <name>nlen</name></decl>;</decl_stmt> 
}</block>;</struct>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cb_each_header</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>name_len</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>value_len</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>argp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>h3h1header</name></name> <modifier>*</modifier></type><name>headers</name> <init>= <expr><operator>(</operator>struct <name>h3h1header</name> <operator>*</operator><operator>)</operator><name>argp</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>olen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>name_len</name> <operator>==</operator> <literal type="number">7</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><literal type="string">":status"</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>name</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msnprintf</name><argument_list>(<argument><expr><name><name>headers</name><operator>-&gt;</operator><name>dest</name></name></expr></argument>,
<argument><expr><name><name>headers</name><operator>-&gt;</operator><name>destlen</name></name></expr></argument>, <argument><expr><literal type="string">"HTTP/3 %.*s\n"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>value_len</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><operator>!</operator><name><name>headers</name><operator>-&gt;</operator><name>nlen</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>CURLE_HTTP3</name></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>msnprintf</name><argument_list>(<argument><expr><name><name>headers</name><operator>-&gt;</operator><name>dest</name></name></expr></argument>,
<argument><expr><name><name>headers</name><operator>-&gt;</operator><name>destlen</name></name></expr></argument>, <argument><expr><literal type="string">"%.*s: %.*s\n"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>name_len</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>value_len</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>olen</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>headers</name><operator>-&gt;</operator><name>dest</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>headers</name><operator>-&gt;</operator><name>destlen</name></name> <operator>-=</operator> <name>olen</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>headers</name><operator>-&gt;</operator><name>nlen</name></name> <operator>+=</operator> <name>olen</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>headers</name><operator>-&gt;</operator><name>dest</name></name> <operator>+=</operator> <name>olen</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ssize_t</name></type> <name>h3_stream_recv</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sockindex</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>buffersize</name></decl></parameter>,
<parameter><decl><type><name>CURLcode</name> <modifier>*</modifier></type><name>curlcode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>recvd</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>rcode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>quicsocket</name></name> <modifier>*</modifier></type><name>qs</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>quic</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>curl_socket_t</name></type> <name>sockfd</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>sock</name><index>[<expr><name>sockindex</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>quiche_h3_event</name> <modifier>*</modifier></type><name>ev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>h3h1header</name></name></type> <name>headers</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>HTTP</name></name> <modifier>*</modifier></type><name>stream</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>protop</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>headers</name><operator>.</operator><name>dest</name></name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>headers</name><operator>.</operator><name>destlen</name></name> <operator>=</operator> <name>buffersize</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>headers</name><operator>.</operator><name>nlen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>process_ingress</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>sockfd</name></expr></argument>, <argument><expr><name>qs</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"h3_stream_recv returns on ingress\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>curlcode</name> <operator>=</operator> <name>CURLE_RECV_ERROR</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<while>while<condition>(<expr><name>recvd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int64_t</name></type> <name>s</name> <init>= <expr><call><name>quiche_h3_conn_poll</name><argument_list>(<argument><expr><name><name>qs</name><operator>-&gt;</operator><name>h3c</name></name></expr></argument>, <argument><expr><name><name>qs</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>s</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>s</name> <operator>!=</operator> <name><name>stream</name><operator>-&gt;</operator><name>stream3_id</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Got h3 for stream %u, expects %u\n"</literal></expr></argument>,
<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>stream</name><operator>-&gt;</operator><name>stream3_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<switch>switch<condition>(<expr><call><name>quiche_h3_event_type</name><argument_list>(<argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>QUICHE_H3_EVENT_HEADERS</name></expr>:</case>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>quiche_h3_event_for_each_header</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>cb_each_header</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>headers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>curlcode</name> <operator>=</operator> <name>rc</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Error in HTTP/3 response header"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>recvd</name> <operator>=</operator> <name><name>headers</name><operator>.</operator><name>nlen</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>QUICHE_H3_EVENT_DATA</name></expr>:</case>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>stream</name><operator>-&gt;</operator><name>firstbody</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\r'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>buffersize</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>firstbody</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>recvd</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt> 
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>recvd</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>rcode</name> <operator>=</operator> <call><name>quiche_h3_recv_body</name><argument_list>(<argument><expr><name><name>qs</name><operator>-&gt;</operator><name>h3c</name></name></expr></argument>, <argument><expr><name><name>qs</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>buf</name></expr></argument>,
<argument><expr><name>buffersize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>rcode</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>recvd</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>recvd</name> <operator>+=</operator> <name>rcode</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>QUICHE_H3_EVENT_FINISHED</name></expr>:</case>
<expr_stmt><expr><call><name>streamclose</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><literal type="string">"End of stream"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>recvd</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
<break>break;</break>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>

<expr_stmt><expr><call><name>quiche_h3_event_free</name><argument_list>(<argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if<condition>(<expr><call><name>flush_egress</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>sockfd</name></expr></argument>, <argument><expr><name>qs</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>curlcode</name> <operator>=</operator> <name>CURLE_SEND_ERROR</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>curlcode</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><operator>-</operator><literal type="number">1</literal> <operator>==</operator> <name>recvd</name><operator>)</operator></expr>?</condition><then> <expr><name>CURLE_AGAIN</name></expr> </then><else>: <expr><name>CURLE_OK</name></expr></else></ternary></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>recvd</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>Curl_expire</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>EXPIRE_QUIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>drain</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>recvd</name> <operator>&gt;=</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<return>return <expr><name>recvd</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ssize_t</name></type> <name>h3_stream_send</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sockindex</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>mem</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>,
<parameter><decl><type><name>CURLcode</name> <modifier>*</modifier></type><name>curlcode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>sent</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>quicsocket</name></name> <modifier>*</modifier></type><name>qs</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>quic</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>curl_socket_t</name></type> <name>sockfd</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>sock</name><index>[<expr><name>sockindex</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>HTTP</name></name> <modifier>*</modifier></type><name>stream</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>protop</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>stream</name><operator>-&gt;</operator><name>h3req</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><call><name>http_request</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>mem</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>curlcode</name> <operator>=</operator> <name>CURLE_SEND_ERROR</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>sent</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>H3BUGF</name><argument_list>(<argument><expr><call><name>infof</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"Pass on %zd body bytes to quiche\n"</literal></expr></argument>,
<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sent</name> <operator>=</operator> <call><name>quiche_h3_send_body</name><argument_list>(<argument><expr><name><name>qs</name><operator>-&gt;</operator><name>h3c</name></name></expr></argument>, <argument><expr><name><name>qs</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>, <argument><expr><name><name>stream</name><operator>-&gt;</operator><name>stream3_id</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>mem</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>sent</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>curlcode</name> <operator>=</operator> <name>CURLE_SEND_ERROR</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>flush_egress</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>sockfd</name></expr></argument>, <argument><expr><name>qs</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>curlcode</name> <operator>=</operator> <name>CURLE_SEND_ERROR</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>curlcode</name> <operator>=</operator> <name>CURLE_OK</name></expr>;</expr_stmt>
<return>return <expr><name>sent</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>int</name></type> <name>Curl_quic_ver</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>msnprintf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="string">"quiche/%s"</literal></expr></argument>, <argument><expr><call><name>quiche_version</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AUTHORITY_DST_IDX</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>http_request</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>mem</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>


<decl_stmt><decl><type><name><name>struct</name> <name>HTTP</name></name> <modifier>*</modifier></type><name>stream</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>protop</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>nheader</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>authority_idx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>hdbuf</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>mem</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>end</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>line_end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>stream3_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>quiche_h3_header</name> <modifier>*</modifier></type><name>nva</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>quicsocket</name></name> <modifier>*</modifier></type><name>qs</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>quic</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>h3req</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt> 



<expr_stmt><expr><name>nheader</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>hdbuf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal> <operator>&amp;&amp;</operator> <name><name>hdbuf</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\r'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>nheader</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if<condition>(<expr><name>nheader</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>




<expr_stmt><expr><name>nheader</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>nva</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>quiche_h3_header</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>nheader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>nva</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><name>line_end</name> <operator>=</operator> <call><name>memchr</name><argument_list>(<argument><expr><name>hdbuf</name></expr></argument>, <argument><expr><literal type="char">'\r'</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>line_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_BAD_FUNCTION_ARGUMENT</name></expr>;</expr_stmt> 
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>end</name> <operator>=</operator> <call><name>memchr</name><argument_list>(<argument><expr><name>hdbuf</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><name>line_end</name> <operator>-</operator> <name>hdbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>end</name> <operator>||</operator> <name>end</name> <operator>==</operator> <name>hdbuf</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>nva</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>name</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><literal type="string">":method"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>nva</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>name_len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>nva</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>nva</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>hdbuf</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>nva</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>value_len</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>end</name> <operator>-</operator> <name>hdbuf</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>hdbuf</name> <operator>=</operator> <name>end</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>


<expr_stmt><expr><name>end</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>line_end</name> <operator>-</operator> <name>hdbuf</name><operator>)</operator></expr>;</init> <condition><expr><name>i</name></expr>;</condition> <incr><expr><operator>--</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>hdbuf</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>end</name> <operator>=</operator> <operator>&amp;</operator><name><name>hdbuf</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>end</name> <operator>||</operator> <name>end</name> <operator>==</operator> <name>hdbuf</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>nva</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>name</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><literal type="string">":path"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>nva</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>name_len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>nva</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>nva</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>hdbuf</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>nva</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>value_len</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>end</name> <operator>-</operator> <name>hdbuf</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>nva</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>name</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><literal type="string">":scheme"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>nva</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>name_len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>nva</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>handler</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>PROTOPT_SSL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>nva</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><literal type="string">"https"</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>nva</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><literal type="string">"http"</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name><name>nva</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>value_len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>nva</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>authority_idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<while>while<condition>(<expr><name>i</name> <operator>&lt;</operator> <name>nheader</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>hlen</name></decl>;</decl_stmt>

<expr_stmt><expr><name>hdbuf</name> <operator>=</operator> <name>line_end</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>



<expr_stmt><expr><name>line_end</name> <operator>=</operator> <call><name>memchr</name><argument_list>(<argument><expr><name>hdbuf</name></expr></argument>, <argument><expr><literal type="char">'\r'</literal></expr></argument>, <argument><expr><name>len</name> <operator>-</operator> <operator>(</operator><name>hdbuf</name> <operator>-</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>mem</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>line_end</name> <operator>||</operator> <operator>(</operator><name>line_end</name> <operator>==</operator> <name>hdbuf</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>


<if_stmt><if>if<condition>(<expr><operator>*</operator><name>hdbuf</name> <operator>==</operator> <literal type="char">' '</literal> <operator>||</operator> <operator>*</operator><name>hdbuf</name> <operator>==</operator> <literal type="char">'\t'</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<for>for<control>(<init><expr><name>end</name> <operator>=</operator> <name>hdbuf</name></expr>;</init> <condition><expr><name>end</name> <operator>&lt;</operator> <name>line_end</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>end</name> <operator>!=</operator> <literal type="char">':'</literal></expr>;</condition> <incr><expr><operator>++</operator><name>end</name></expr></incr>)</control><block type="pseudo"><block_content>
<empty_stmt>;</empty_stmt></block_content></block></for>
<if_stmt><if>if<condition>(<expr><name>end</name> <operator>==</operator> <name>hdbuf</name> <operator>||</operator> <name>end</name> <operator>==</operator> <name>line_end</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>hlen</name> <operator>=</operator> <name>end</name> <operator>-</operator> <name>hdbuf</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>hlen</name> <operator>==</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <call><name>strncasecompare</name><argument_list>(<argument><expr><literal type="string">"host"</literal></expr></argument>, <argument><expr><name>hdbuf</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>authority_idx</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>nva</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><literal type="string">":authority"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>nva</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name_len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>nva</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name><name>nva</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name_len</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>end</name> <operator>-</operator> <name>hdbuf</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_strntolower</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>hdbuf</name></expr></argument>, <argument><expr><name>hdbuf</name></expr></argument>, <argument><expr><name><name>nva</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>nva</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>hdbuf</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>hdbuf</name> <operator>=</operator> <name>end</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<while>while<condition>(<expr><operator>*</operator><name>hdbuf</name> <operator>==</operator> <literal type="char">' '</literal> <operator>||</operator> <operator>*</operator><name>hdbuf</name> <operator>==</operator> <literal type="char">'\t'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>hdbuf</name></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><name>end</name> <operator>=</operator> <name>line_end</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if> 
switch(inspect_header((const char *)nva[i].name, nva[i].namelen, hdbuf,
end - hdbuf)) {
case HEADERINST_IGNORE:

--nheader;
continue;
case HEADERINST_TE_TRAILERS:
nva[i].value = (uint8_t*)"trailers";
nva[i].value_len = sizeof("trailers") - 1;
break;
default:
nva[i].value = (unsigned char *)hdbuf;
nva[i].value_len = (size_t)(end - hdbuf);
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>nva</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>hdbuf</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>nva</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>value_len</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>end</name> <operator>-</operator> <name>hdbuf</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
</block_content>}</block></while>


<if_stmt><if>if<condition>(<expr><name>authority_idx</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>authority_idx</name> <operator>!=</operator> <name>AUTHORITY_DST_IDX</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>quiche_h3_header</name></type> <name>authority</name> <init>= <expr><name><name>nva</name><index>[<expr><name>authority_idx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <name>authority_idx</name></expr>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <name>AUTHORITY_DST_IDX</name></expr>;</condition> <incr><expr><operator>--</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>nva</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>nva</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>nva</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>authority</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_ACC</name></cpp:macro> <cpp:value>60000</cpp:value></cpp:define> 
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>acc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nheader</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>acc</name> <operator>+=</operator> <name><name>nva</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name_len</name> <operator>+</operator> <name><name>nva</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>value_len</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>H3BUGF</name><argument_list>(<argument><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"h3 [%.*s: %.*s]\n"</literal></expr></argument>,
<argument><expr><name><name>nva</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name_len</name></expr></argument>, <argument><expr><name><name>nva</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>,
<argument><expr><name><name>nva</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>value_len</name></expr></argument>, <argument><expr><name><name>nva</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if<condition>(<expr><name>acc</name> <operator>&gt;</operator> <name>MAX_ACC</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"http_request: Warning: The cumulative length of all "</literal>
<literal type="string">"headers exceeds %zu bytes and that could cause the "</literal>
<literal type="string">"stream to be rejected.\n"</literal></expr></argument>, <argument><expr><name>MAX_ACC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>

<switch>switch<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>httpreq</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>HTTPREQ_POST</name></expr>:</case>
<case>case <expr><name>HTTPREQ_POST_FORM</name></expr>:</case>
<case>case <expr><name>HTTPREQ_POST_MIME</name></expr>:</case>
<case>case <expr><name>HTTPREQ_PUT</name></expr>:</case>
<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>infilesize</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>upload_left</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>infilesize</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>upload_left</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt> 

<expr_stmt><expr><name>stream3_id</name> <operator>=</operator> <call><name>quiche_h3_send_request</name><argument_list>(<argument><expr><name><name>qs</name><operator>-&gt;</operator><name>h3c</name></name></expr></argument>, <argument><expr><name><name>qs</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>, <argument><expr><name>nva</name></expr></argument>, <argument><expr><name>nheader</name></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>stream</name><operator>-&gt;</operator><name>upload_left</name></name></expr> ?</condition><then> <expr><name>FALSE</name></expr></then><else>: <expr><name>TRUE</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>(</operator><name>stream3_id</name> <operator>&gt;=</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>postfields</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>sent</name> <init>= <expr><call><name>quiche_h3_send_body</name><argument_list>(<argument><expr><name><name>qs</name><operator>-&gt;</operator><name>h3c</name></name></expr></argument>, <argument><expr><name><name>qs</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>, <argument><expr><name>stream3_id</name></expr></argument>,
<argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>postfields</name></name></expr></argument>,
<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>upload_left</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>sent</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"quiche_h3_send_body failed!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_SEND_ERROR</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>upload_left</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name>stream3_id</name> <operator>=</operator> <call><name>quiche_h3_send_request</name><argument_list>(<argument><expr><name><name>qs</name><operator>-&gt;</operator><name>h3c</name></name></expr></argument>, <argument><expr><name><name>qs</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>, <argument><expr><name>nva</name></expr></argument>, <argument><expr><name>nheader</name></expr></argument>,
<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name>nva</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>stream3_id</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>H3BUGF</name><argument_list>(<argument><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"quiche_h3_send_request returned %d\n"</literal></expr></argument>,
<argument><expr><name>stream3_id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_SEND_ERROR</name></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Using HTTP/3 Stream ID: %x (easy handle %p)\n"</literal></expr></argument>,
<argument><expr><name>stream3_id</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>stream3_id</name></name> <operator>=</operator> <name>stream3_id</name></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>

<label><name>fail</name>:</label>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>nva</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>CURLcode</name></type> <name>Curl_quic_done_sending</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>handler</name></name> <operator>==</operator> <operator>&amp;</operator><name>Curl_handler_http3</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>sent</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>HTTP</name></name> <modifier>*</modifier></type><name>stream</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>protop</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>quicsocket</name></name> <modifier>*</modifier></type><name>qs</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>quic</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"!!! Curl_quic_done_sending\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>upload_done</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>sent</name> <operator>=</operator> <call><name>quiche_h3_send_body</name><argument_list>(<argument><expr><name><name>qs</name><operator>-&gt;</operator><name>h3c</name></name></expr></argument>, <argument><expr><name><name>qs</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>, <argument><expr><name><name>stream</name><operator>-&gt;</operator><name>stream3_id</name></name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>sent</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_SEND_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>Curl_quic_done</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>premature</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>data</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>premature</name></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><name>bool</name></type> <name>Curl_quic_data_pending</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>data</name></expr>;</expr_stmt>
<return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
