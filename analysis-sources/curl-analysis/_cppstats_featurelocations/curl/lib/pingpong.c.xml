<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\curl-analysis\_cppstats_featurelocations\curl\lib\pingpong.c">
























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_setup.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"urldata.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sendf.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"select.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"progress.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"speedcheck.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pingpong.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"multiif.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"non-ascii.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vtls/vtls.h"</cpp:file></cpp:include>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_printf.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_memory.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memdebug.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_PINGPONG</name></expr></argument>)</argument_list></call></expr></cpp:if>



<function><type><name>time_t</name></type> <name>Curl_pp_state_timeout</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>pingpong</name></name> <modifier>*</modifier></type><name>pp</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>disconnecting</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name> <init>= <expr><name><name>pp</name><operator>-&gt;</operator><name>conn</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>time_t</name></type> <name>timeout_ms</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>long</name></type> <name>response_time</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>server_response_timeout</name></name><operator>)</operator></expr>?</condition><then>
<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>server_response_timeout</name></name></expr></then><else>: <expr><name><name>pp</name><operator>-&gt;</operator><name>response_time</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>








<expr_stmt><expr><name>timeout_ms</name> <operator>=</operator> <name>response_time</name> <operator>-</operator>
<operator>(</operator><name>time_t</name><operator>)</operator><call><name>Curl_timediff</name><argument_list>(<argument><expr><call><name>Curl_now</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>pp</name><operator>-&gt;</operator><name>response</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>timeout</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>disconnecting</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>time_t</name></type> <name>timeout2_ms</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>timeout</name></name> <operator>-</operator> 
<operator>(</operator><name>time_t</name><operator>)</operator><call><name>Curl_timediff</name><argument_list>(<argument><expr><call><name>Curl_now</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>now</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 


<expr_stmt><expr><name>timeout_ms</name> <operator>=</operator> <call><name>CURLMIN</name><argument_list>(<argument><expr><name>timeout_ms</name></expr></argument>, <argument><expr><name>timeout2_ms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>timeout_ms</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>CURLcode</name></type> <name>Curl_pp_statemach</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>pingpong</name></name> <modifier>*</modifier></type><name>pp</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>block</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>disconnecting</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name> <init>= <expr><name><name>pp</name><operator>-&gt;</operator><name>conn</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>curl_socket_t</name></type> <name>sock</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>sock</name><index>[<expr><name>FIRSTSOCKET</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>time_t</name></type> <name>interval_ms</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>time_t</name></type> <name>timeout_ms</name> <init>= <expr><call><name>Curl_pp_state_timeout</name><argument_list>(<argument><expr><name>pp</name></expr></argument>, <argument><expr><name>disconnecting</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>timeout_ms</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"server response timeout"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_OPERATION_TIMEDOUT</name></expr>;</return> 
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>block</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>interval_ms</name> <operator>=</operator> <literal type="number">1000</literal></expr>;</expr_stmt> 
<if_stmt><if>if<condition>(<expr><name>timeout_ms</name> <operator>&lt;</operator> <name>interval_ms</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>interval_ms</name> <operator>=</operator> <name>timeout_ms</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>interval_ms</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt> 

<if_stmt><if>if<condition>(<expr><call><name>Curl_ssl_data_pending</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>FIRSTSOCKET</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>(<expr><call><name>Curl_pp_moredata</name><argument_list>(<argument><expr><name>pp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>(<expr><operator>!</operator><name><name>pp</name><operator>-&gt;</operator><name>sendleft</name></name> <operator>&amp;&amp;</operator> <call><name>Curl_ssl_data_pending</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>FIRSTSOCKET</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>Curl_socket_check</name><argument_list>(<argument><expr><ternary><condition><expr><name><name>pp</name><operator>-&gt;</operator><name>sendleft</name></name></expr>?</condition><then><expr><name>CURL_SOCKET_BAD</name></expr></then><else>:<expr><name>sock</name></expr></else></ternary></expr></argument>, 
<argument><expr><name>CURL_SOCKET_BAD</name></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>pp</name><operator>-&gt;</operator><name>sendleft</name></name></expr>?</condition><then><expr><name>sock</name></expr></then><else>:<expr><name>CURL_SOCKET_BAD</name></expr></else></ternary></expr></argument>, 
<argument><expr><name>interval_ms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name>block</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>Curl_pgrsUpdate</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_ABORTED_BY_CALLBACK</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_speedcheck</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><call><name>Curl_now</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"select/poll error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><name>rc</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name><name>pp</name><operator>-&gt;</operator><name>statemach_act</name></name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>Curl_pp_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>pingpong</name></name> <modifier>*</modifier></type><name>pp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name> <init>= <expr><name><name>pp</name><operator>-&gt;</operator><name>conn</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>nread_resp</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>linestart_resp</name></name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>buffer</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>pending_resp</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>response</name></name> <operator>=</operator> <call><name>Curl_now</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></function>













<function><type><name>CURLcode</name></type> <name>Curl_pp_vsendf</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>pingpong</name></name> <modifier>*</modifier></type><name>pp</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>,
<parameter><decl><type><name>va_list</name></type> <name>args</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>bytes_written</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>write_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>fmt_crlf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name> <init>= <expr><name><name>pp</name><operator>-&gt;</operator><name>conn</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_GSSAPI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name><name>enum</name> <name>protection_level</name></name></type> <name>data_sec</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>DEBUGASSERT</name><argument_list>(<argument><expr><name><name>pp</name><operator>-&gt;</operator><name>sendleft</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DEBUGASSERT</name><argument_list>(<argument><expr><name><name>pp</name><operator>-&gt;</operator><name>sendsize</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DEBUGASSERT</name><argument_list>(<argument><expr><name><name>pp</name><operator>-&gt;</operator><name>sendthis</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>conn</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CURLE_SEND_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>data</name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>fmt_crlf</name> <operator>=</operator> <call><name>aprintf</name><argument_list>(<argument><expr><literal type="string">"%s\r\n"</literal></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>fmt_crlf</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>vaprintf</name><argument_list>(<argument><expr><name>fmt_crlf</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>fmt_crlf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>s</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>bytes_written</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>write_len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_pp_init</name><argument_list>(<argument><expr><name>pp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_convert_to_network</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>write_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_GSSAPI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>data_prot</name></name> <operator>=</operator> <name>PROT_CMD</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_write</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>sock</name><index>[<expr><name>FIRSTSOCKET</name></expr>]</index></name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>write_len</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>bytes_written</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_GSSAPI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>data_sec</name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>data_prot</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DEBUGASSERT</name><argument_list>(<argument><expr><name>data_sec</name> <operator>&gt;</operator> <name>PROT_NONE</name> <operator>&amp;&amp;</operator> <name>data_sec</name> <operator>&lt;</operator> <name>PROT_LAST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>data_prot</name></name> <operator>=</operator> <name>data_sec</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>verbose</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>Curl_debug</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>CURLINFO_HEADER_OUT</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>bytes_written</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>bytes_written</name> <operator>!=</operator> <operator>(</operator><name>ssize_t</name><operator>)</operator><name>write_len</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>sendthis</name></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>sendsize</name></name> <operator>=</operator> <name>write_len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>sendleft</name></name> <operator>=</operator> <name>write_len</name> <operator>-</operator> <name>bytes_written</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>sendthis</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>sendleft</name></name> <operator>=</operator> <name><name>pp</name><operator>-&gt;</operator><name>sendsize</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>response</name></name> <operator>=</operator> <call><name>Curl_now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>
</block_content>}</block></function>












<function><type><name>CURLcode</name></type> <name>Curl_pp_sendf</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>pingpong</name></name> <modifier>*</modifier></type><name>pp</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_pp_vsendf</name><argument_list>(<argument><expr><name>pp</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>






<function><type><name>CURLcode</name></type> <name>Curl_pp_readresp</name><parameter_list>(<parameter><decl><type><name>curl_socket_t</name></type> <name>sockfd</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>pingpong</name></name> <modifier>*</modifier></type><name>pp</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>code</name></decl></parameter>, 
<parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>size</name></decl></parameter>)</parameter_list> 
<block>{<block_content>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>perline</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>bool</name></type> <name>keepon</name> <init>= <expr><name>TRUE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>gotbytes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name> <init>= <expr><name><name>pp</name><operator>-&gt;</operator><name>conn</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>buf</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>buffer</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>code</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
<expr_stmt><expr><operator>*</operator><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>buf</name> <operator>+</operator> <name><name>pp</name><operator>-&gt;</operator><name>nread_resp</name></name></expr>;</expr_stmt>


<expr_stmt><expr><name>perline</name> <operator>=</operator> <operator>(</operator><name>ssize_t</name><operator>)</operator><operator>(</operator><name>ptr</name><operator>-</operator><name><name>pp</name><operator>-&gt;</operator><name>linestart_resp</name></name><operator>)</operator></expr>;</expr_stmt>

<while>while<condition>(<expr><operator>(</operator><name><name>pp</name><operator>-&gt;</operator><name>nread_resp</name></name> <operator>&lt;</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>buffer_size</name></name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name>keepon</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>result</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>pp</name><operator>-&gt;</operator><name>cache</name></name></expr>)</condition> <block>{<block_content>







<if_stmt><if>if<condition>(<expr><operator>(</operator><name>ptr</name> <operator>+</operator> <name><name>pp</name><operator>-&gt;</operator><name>cache_size</name></name><operator>)</operator> <operator>&gt;</operator> <operator>(</operator><name>buf</name> <operator>+</operator> <name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>buffer_size</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"cached response data too big to handle"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_RECV_ERROR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name><name>pp</name><operator>-&gt;</operator><name>cache</name></name></expr></argument>, <argument><expr><name><name>pp</name><operator>-&gt;</operator><name>cache_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>gotbytes</name> <operator>=</operator> <operator>(</operator><name>ssize_t</name><operator>)</operator><name><name>pp</name><operator>-&gt;</operator><name>cache_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>pp</name><operator>-&gt;</operator><name>cache</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>cache</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>cache_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
</block_content>}</block></if>
<else>else <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_GSSAPI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name><name>enum</name> <name>protection_level</name></name></type> <name>prot</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data_prot</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>data_prot</name></name> <operator>=</operator> <name>PROT_CLEAR</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>DEBUGASSERT</name><argument_list>(<argument><expr><operator>(</operator><name>ptr</name> <operator>+</operator> <name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>buffer_size</name></name> <operator>-</operator> <name><name>pp</name><operator>-&gt;</operator><name>nread_resp</name></name><operator>)</operator> <operator>&lt;=</operator>
<operator>(</operator><name>buf</name> <operator>+</operator> <name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>buffer_size</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_read</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>sockfd</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>,
<argument><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>buffer_size</name></name> <operator>-</operator> <name><name>pp</name><operator>-&gt;</operator><name>nread_resp</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>gotbytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_GSSAPI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>DEBUGASSERT</name><argument_list>(<argument><expr><name>prot</name> <operator>&gt;</operator> <name>PROT_NONE</name> <operator>&amp;&amp;</operator> <name>prot</name> <operator>&lt;</operator> <name>PROT_LAST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>data_prot</name></name> <operator>=</operator> <name>prot</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if<condition>(<expr><name>result</name> <operator>==</operator> <name>CURLE_AGAIN</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_OK</name></expr>;</return></block_content></block></if></if_stmt> 

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>result</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>gotbytes</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_convert_from_network</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>gotbytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>keepon</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>keepon</name></expr>)</condition><block type="pseudo"><block_content>
<empty_stmt>;</empty_stmt></block_content></block></if>
<if type="elseif">else if<condition>(<expr><name>gotbytes</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>keepon</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_RECV_ERROR</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"response reading failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>



<decl_stmt><decl><type><name>ssize_t</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>clipamount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>restart</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>headerbytecount</name></name> <operator>+=</operator> <operator>(</operator><name>long</name><operator>)</operator><name>gotbytes</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>nread_resp</name></name> <operator>+=</operator> <name>gotbytes</name></expr>;</expr_stmt>
<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>gotbytes</name></expr>;</condition> <incr><expr><name>ptr</name><operator>++</operator></expr><operator>,</operator> <expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>perline</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_GSSAPI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>conn</name><operator>-&gt;</operator><name>sec_complete</name></name></expr>)</condition><block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>verbose</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>Curl_debug</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>CURLINFO_HEADER_IN</name></expr></argument>,
<argument><expr><name><name>pp</name><operator>-&gt;</operator><name>linestart_resp</name></name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>perline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>






<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_client_write</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>CLIENTWRITE_HEADER</name></expr></argument>,
<argument><expr><name><name>pp</name><operator>-&gt;</operator><name>linestart_resp</name></name></expr></argument>, <argument><expr><name>perline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name><name>pp</name><operator>-&gt;</operator><name>endofresp</name></name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>pp</name><operator>-&gt;</operator><name>linestart_resp</name></name></expr></argument>, <argument><expr><name>perline</name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>


<decl_stmt><decl><type><name>size_t</name></type> <name>n</name> <init>= <expr><name>ptr</name> <operator>-</operator> <name><name>pp</name><operator>-&gt;</operator><name>linestart_resp</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>pp</name><operator>-&gt;</operator><name>linestart_resp</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name>keepon</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>linestart_resp</name></name> <operator>=</operator> <name>ptr</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt> 

<expr_stmt><expr><operator>*</operator><name>size</name> <operator>=</operator> <name><name>pp</name><operator>-&gt;</operator><name>nread_resp</name></name></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>nread_resp</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>perline</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>linestart_resp</name></name> <operator>=</operator> <name>ptr</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>keepon</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>i</name> <operator>!=</operator> <name>gotbytes</name><operator>)</operator></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><name>clipamount</name> <operator>=</operator> <name>gotbytes</name> <operator>-</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name>restart</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DEBUGF</name><argument_list>(<argument><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Curl_pp_readresp_ %d bytes of trailing "</literal>
<literal type="string">"server response left\n"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>clipamount</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><name>keepon</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>perline</name> <operator>==</operator> <name>gotbytes</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>gotbytes</name> <operator>&gt;</operator> <name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>buffer_size</name></name><operator>/</operator><literal type="number">2</literal><operator>)</operator></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Excessive server response line length received, "</literal>
<literal type="string">"%zd bytes. Stripping\n"</literal></expr></argument>, <argument><expr><name>gotbytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>restart</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>



<expr_stmt><expr><name>clipamount</name> <operator>=</operator> <literal type="number">40</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><name><name>pp</name><operator>-&gt;</operator><name>nread_resp</name></name> <operator>&gt;</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>buffer_size</name></name><operator>/</operator><literal type="number">2</literal></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><name>clipamount</name> <operator>=</operator> <name>perline</name></expr>;</expr_stmt>
<expr_stmt><expr><name>restart</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><name>i</name> <operator>==</operator> <name>gotbytes</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>restart</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>clipamount</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>cache_size</name></name> <operator>=</operator> <name>clipamount</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>cache</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name><name>pp</name><operator>-&gt;</operator><name>cache_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>pp</name><operator>-&gt;</operator><name>cache</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pp</name><operator>-&gt;</operator><name>cache</name></name></expr></argument>, <argument><expr><name><name>pp</name><operator>-&gt;</operator><name>linestart_resp</name></name></expr></argument>, <argument><expr><name><name>pp</name><operator>-&gt;</operator><name>cache_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>restart</name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>nread_resp</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name><name>pp</name><operator>-&gt;</operator><name>linestart_resp</name></name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
<expr_stmt><expr><name>perline</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt> 

</block_content>}</block></while> 

<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>pending_resp</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>Curl_pp_getsock</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>pingpong</name></name> <modifier>*</modifier></type><name>pp</name></decl></parameter>,
<parameter><decl><type><name>curl_socket_t</name> <modifier>*</modifier></type><name>socks</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name> <init>= <expr><name><name>pp</name><operator>-&gt;</operator><name>conn</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>socks</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>sock</name><index>[<expr><name>FIRSTSOCKET</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>pp</name><operator>-&gt;</operator><name>sendleft</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>GETSOCK_WRITESOCK</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>


<return>return <expr><call><name>GETSOCK_READSOCK</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>CURLcode</name></type> <name>Curl_pp_flushsend</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>pingpong</name></name> <modifier>*</modifier></type><name>pp</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name> <init>= <expr><name><name>pp</name><operator>-&gt;</operator><name>conn</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>written</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>curl_socket_t</name></type> <name>sock</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>sock</name><index>[<expr><name>FIRSTSOCKET</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><call><name>Curl_write</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>sock</name></expr></argument>, <argument><expr><name><name>pp</name><operator>-&gt;</operator><name>sendthis</name></name> <operator>+</operator> <name><name>pp</name><operator>-&gt;</operator><name>sendsize</name></name> <operator>-</operator>
<name><name>pp</name><operator>-&gt;</operator><name>sendleft</name></name></expr></argument>, <argument><expr><name><name>pp</name><operator>-&gt;</operator><name>sendleft</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>written</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>written</name> <operator>!=</operator> <operator>(</operator><name>ssize_t</name><operator>)</operator><name><name>pp</name><operator>-&gt;</operator><name>sendleft</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>sendleft</name></name> <operator>-=</operator> <name>written</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>pp</name><operator>-&gt;</operator><name>sendthis</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>sendthis</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>sendleft</name></name> <operator>=</operator> <name><name>pp</name><operator>-&gt;</operator><name>sendsize</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>response</name></name> <operator>=</operator> <call><name>Curl_now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>CURLE_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>CURLcode</name></type> <name>Curl_pp_disconnect</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>pingpong</name></name> <modifier>*</modifier></type><name>pp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>pp</name><operator>-&gt;</operator><name>cache</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>cache</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>CURLE_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>Curl_pp_moredata</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>pingpong</name></name> <modifier>*</modifier></type><name>pp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><operator>(</operator><operator>!</operator><name><name>pp</name><operator>-&gt;</operator><name>sendleft</name></name> <operator>&amp;&amp;</operator> <name><name>pp</name><operator>-&gt;</operator><name>cache</name></name> <operator>&amp;&amp;</operator> <name><name>pp</name><operator>-&gt;</operator><name>nread_resp</name></name> <operator>&lt;</operator> <name><name>pp</name><operator>-&gt;</operator><name>cache_size</name></name><operator>)</operator></expr> ?</condition><then>
<expr><name>TRUE</name></expr> </then><else>: <expr><name>FALSE</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
