<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\curl-analysis\_cppstats_featurelocations\curl\lib\telnet.c">





















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_setup.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_TELNET</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_NETINET_IN_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet/in.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_NETDB_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netdb.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ARPA_INET_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;arpa/inet.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_NET_IF_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;net/if.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SYS_IOCTL_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/ioctl.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SYS_PARAM_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/param.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"urldata.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;curl/curl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"transfer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sendf.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"telnet.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"connect.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"progress.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"system_win32.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"arpa_telnet.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"select.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"strcase.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"warnless.h"</cpp:file></cpp:include>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_printf.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curl_memory.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memdebug.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SUBBUFSIZE</name></cpp:macro> <cpp:value>512</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CURL_SB_CLEAR</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>x-&gt;subpointer = x-&gt;subbuffer</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CURL_SB_TERM</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { x-&gt;subend = x-&gt;subpointer; CURL_SB_CLEAR(x); } while(0)</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CURL_SB_ACCUM</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if(x-&gt;subpointer &lt; (x-&gt;subbuffer + sizeof(x-&gt;subbuffer))) *x-&gt;subpointer++ = (c); } while(0)</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CURL_SB_GET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((*x-&gt;subpointer++)&amp;0xff)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CURL_SB_LEN</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x-&gt;subend - x-&gt;subpointer)</cpp:value></cpp:define>





<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_VERBOSE_STRINGS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>printoption</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>Curl_nop_stmt</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_WINSOCK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <function_decl><type><name>WSAEVENT</name></type> (<name>WINAPI</name> <modifier>*</modifier><name>WSOCK2_EVENT</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <type><name>FARPROC</name></type> <name>WSOCK2_FUNC</name>;</typedef>
<function_decl><type><specifier>static</specifier> <name>CURLcode</name></type> <name>check_wsock2</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><specifier>static</specifier>
<name>CURLcode</name></type> <name>telrcv</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>inbuf</name></decl></parameter>, 
<parameter><decl><type><name>ssize_t</name></type> <name>count</name></decl></parameter>)</parameter_list>;</function_decl> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_VERBOSE_STRINGS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>printoption</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>direction</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>cmd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>option</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>negotiate</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>send_negotiation</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cmd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>option</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>set_local_option</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>option</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>newstate</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>set_remote_option</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>option</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>newstate</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>printsub</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>direction</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pointer</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>length</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>suboption</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>sendsuboption</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>option</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>CURLcode</name></type> <name>telnet_do</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>done</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>CURLcode</name></type> <name>telnet_done</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,
<parameter><decl><type><name>CURLcode</name></type></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>premature</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>CURLcode</name></type> <name>send_telnet_data</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name></type> <name>nread</name></decl></parameter>)</parameter_list>;</function_decl>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CURL_NO</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CURL_YES</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CURL_WANTYES</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CURL_WANTNO</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CURL_EMPTY</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CURL_OPPOSITE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>




<typedef>typedef <type><enum>enum
<block>{
<decl><name>CURL_TS_DATA</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>CURL_TS_IAC</name></decl>,
<decl><name>CURL_TS_WILL</name></decl>,
<decl><name>CURL_TS_WONT</name></decl>,
<decl><name>CURL_TS_DO</name></decl>,
<decl><name>CURL_TS_DONT</name></decl>,
<decl><name>CURL_TS_CR</name></decl>,
<decl><name>CURL_TS_SB</name></decl>, 
<decl><name>CURL_TS_SE</name></decl> 
}</block></enum></type> <name>TelnetReceive</name>;</typedef>

<struct>struct <name>TELNET</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>please_negotiate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>already_negotiated</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>us</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>usq</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>us_preferred</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>him</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>himq</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>him_preferred</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>subnegotiation</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>subopt_ttype</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name></type> <name><name>subopt_xdisploc</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>subopt_wsx</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>subopt_wsy</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name><name>struct</name> <name>curl_slist</name></name> <modifier>*</modifier></type><name>telnet_vars</name></decl>;</decl_stmt> 


<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>subbuffer</name><index>[<expr><name>SUBBUFSIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>subpointer</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>subend</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>TelnetReceive</name></type> <name>telrcv_state</name></decl>;</decl_stmt>
}</block>;</struct>






<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>Curl_handler</name></name></type> <name>Curl_handler_telnet</name> <init>= <expr><block>{
<expr><literal type="string">"TELNET"</literal></expr>, 
<expr><name>ZERO_NULL</name></expr>, 
<expr><name>telnet_do</name></expr>, 
<expr><name>telnet_done</name></expr>, 
<expr><name>ZERO_NULL</name></expr>, 
<expr><name>ZERO_NULL</name></expr>, 
<expr><name>ZERO_NULL</name></expr>, 
<expr><name>ZERO_NULL</name></expr>, 
<expr><name>ZERO_NULL</name></expr>, 
<expr><name>ZERO_NULL</name></expr>, 
<expr><name>ZERO_NULL</name></expr>, 
<expr><name>ZERO_NULL</name></expr>, 
<expr><name>ZERO_NULL</name></expr>, 
<expr><name>ZERO_NULL</name></expr>, 
<expr><name>ZERO_NULL</name></expr>, 
<expr><name>PORT_TELNET</name></expr>, 
<expr><name>CURLPROTO_TELNET</name></expr>, 
<expr><name>PROTOPT_NONE</name> <operator>|</operator> <name>PROTOPT_NOURLQUERY</name></expr> 
}</block></expr></init></decl>;</decl_stmt>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_WINSOCK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>CURLcode</name></type>
<name>check_wsock2</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WORD</name></type> <name>wVersionRequested</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WSADATA</name></type> <name>wsaData</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DEBUGASSERT</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>wVersionRequested</name> <operator>=</operator> <call><name>MAKEWORD</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>WSAStartup</name><argument_list>(<argument><expr><name>wVersionRequested</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wsaData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if<condition>(<expr><name>err</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>,<argument><expr><literal type="string">"WSAStartup failed (%d)"</literal></expr></argument>,<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_FAILED_INIT</name></expr>;</return>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><call><name>WSACleanup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if<condition>(<expr><call><name>LOBYTE</name><argument_list>(<argument><expr><name><name>wsaData</name><operator>.</operator><name>wVersion</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>LOBYTE</name><argument_list>(<argument><expr><name>wVersionRequested</name></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>HIBYTE</name><argument_list>(<argument><expr><name><name>wsaData</name><operator>.</operator><name>wVersion</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>HIBYTE</name><argument_list>(<argument><expr><name>wVersionRequested</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"insufficient winsock version to support "</literal>
<literal type="string">"telnet"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_FAILED_INIT</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<return>return <expr><name>CURLE_OK</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier>
<name>CURLcode</name></type> <name>init_telnet</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>TELNET</name></name> <modifier>*</modifier></type><name>tn</name></decl>;</decl_stmt>

<expr_stmt><expr><name>tn</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>TELNET</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>tn</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>protop</name></name> <operator>=</operator> <name>tn</name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>tn</name><operator>-&gt;</operator><name>telrcv_state</name></name> <operator>=</operator> <name>CURL_TS_DATA</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>CURL_SB_CLEAR</name><argument_list>(<argument><expr><name>tn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>tn</name><operator>-&gt;</operator><name>us_preferred</name><index>[<expr><name>CURL_TELOPT_SGA</name></expr>]</index></name> <operator>=</operator> <name>CURL_YES</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tn</name><operator>-&gt;</operator><name>him_preferred</name><index>[<expr><name>CURL_TELOPT_SGA</name></expr>]</index></name> <operator>=</operator> <name>CURL_YES</name></expr>;</expr_stmt>






<expr_stmt><expr><name><name>tn</name><operator>-&gt;</operator><name>us_preferred</name><index>[<expr><name>CURL_TELOPT_BINARY</name></expr>]</index></name> <operator>=</operator> <name>CURL_YES</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tn</name><operator>-&gt;</operator><name>him_preferred</name><index>[<expr><name>CURL_TELOPT_BINARY</name></expr>]</index></name> <operator>=</operator> <name>CURL_YES</name></expr>;</expr_stmt>







<expr_stmt><expr><name><name>tn</name><operator>-&gt;</operator><name>him_preferred</name><index>[<expr><name>CURL_TELOPT_ECHO</name></expr>]</index></name> <operator>=</operator> <name>CURL_YES</name></expr>;</expr_stmt>












<expr_stmt><expr><name><name>tn</name><operator>-&gt;</operator><name>subnegotiation</name><index>[<expr><name>CURL_TELOPT_NAWS</name></expr>]</index></name> <operator>=</operator> <name>CURL_YES</name></expr>;</expr_stmt>
<return>return <expr><name>CURLE_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>negotiate</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>TELNET</name></name> <modifier>*</modifier></type><name>tn</name> <init>= <expr><operator>(</operator>struct <name>TELNET</name> <operator>*</operator><operator>)</operator> <name><name>conn</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>protop</name></name></expr></init></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>CURL_NTELOPTS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>i</name> <operator>==</operator> <name>CURL_TELOPT_ECHO</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>tn</name><operator>-&gt;</operator><name>us_preferred</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>CURL_YES</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_local_option</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>CURL_YES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>tn</name><operator>-&gt;</operator><name>him_preferred</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>CURL_YES</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_remote_option</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>CURL_YES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CURL_DISABLE_VERBOSE_STRINGS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type> <name>printoption</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>direction</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cmd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>option</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>verbose</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>cmd</name> <operator>==</operator> <name>CURL_IAC</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><call><name>CURL_TELCMD_OK</name><argument_list>(<argument><expr><name>option</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"%s IAC %s\n"</literal></expr></argument>, <argument><expr><name>direction</name></expr></argument>, <argument><expr><call><name>CURL_TELCMD</name><argument_list>(<argument><expr><name>option</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"%s IAC %d\n"</literal></expr></argument>, <argument><expr><name>direction</name></expr></argument>, <argument><expr><name>option</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>cmd</name> <operator>==</operator> <name>CURL_WILL</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"WILL"</literal></expr> </then><else>:
<expr><ternary><condition><expr><operator>(</operator><name>cmd</name> <operator>==</operator> <name>CURL_WONT</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"WONT"</literal></expr> </then><else>:
<expr><ternary><condition><expr><operator>(</operator><name>cmd</name> <operator>==</operator> <name>CURL_DO</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"DO"</literal></expr> </then><else>:
<expr><ternary><condition><expr><operator>(</operator><name>cmd</name> <operator>==</operator> <name>CURL_DONT</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"DONT"</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>fmt</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>opt</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><call><name>CURL_TELOPT_OK</name><argument_list>(<argument><expr><name>option</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>opt</name> <operator>=</operator> <call><name>CURL_TELOPT</name><argument_list>(<argument><expr><name>option</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>(<expr><name>option</name> <operator>==</operator> <name>CURL_TELOPT_EXOPL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>opt</name> <operator>=</operator> <literal type="string">"EXOPL"</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>opt</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name>opt</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"%s %s %s\n"</literal></expr></argument>, <argument><expr><name>direction</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"%s %s %d\n"</literal></expr></argument>, <argument><expr><name>direction</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>option</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"%s %d %d\n"</literal></expr></argument>, <argument><expr><name>direction</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>option</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type> <name>send_negotiation</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cmd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>option</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>bytes_written</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>CURL_IAC</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name>cmd</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name>option</name></expr>;</expr_stmt>

<expr_stmt><expr><name>bytes_written</name> <operator>=</operator> <call><name>swrite</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>sock</name><index>[<expr><name>FIRSTSOCKET</name></expr>]</index></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>bytes_written</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><name>SOCKERRNO</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>,<argument><expr><literal type="string">"Sending data failed (%d)"</literal></expr></argument>,<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>printoption</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"SENT"</literal></expr></argument>, <argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>option</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier>
<name>void</name></type> <name>set_remote_option</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>option</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>newstate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>TELNET</name></name> <modifier>*</modifier></type><name>tn</name> <init>= <expr><operator>(</operator>struct <name>TELNET</name> <operator>*</operator><operator>)</operator><name><name>conn</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>protop</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>newstate</name> <operator>==</operator> <name>CURL_YES</name></expr>)</condition> <block>{<block_content>
<switch>switch<condition>(<expr><name><name>tn</name><operator>-&gt;</operator><name>him</name><index>[<expr><name>option</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>CURL_NO</name></expr>:</case>
<expr_stmt><expr><name><name>tn</name><operator>-&gt;</operator><name>him</name><index>[<expr><name>option</name></expr>]</index></name> <operator>=</operator> <name>CURL_WANTYES</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>send_negotiation</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>CURL_DO</name></expr></argument>, <argument><expr><name>option</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>CURL_YES</name></expr>:</case>

<break>break;</break>

<case>case <expr><name>CURL_WANTNO</name></expr>:</case>
<switch>switch<condition>(<expr><name><name>tn</name><operator>-&gt;</operator><name>himq</name><index>[<expr><name>option</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>CURL_EMPTY</name></expr>:</case>

<expr_stmt><expr><name><name>tn</name><operator>-&gt;</operator><name>himq</name><index>[<expr><name>option</name></expr>]</index></name> <operator>=</operator> <name>CURL_OPPOSITE</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CURL_OPPOSITE</name></expr>:</case>

<break>break;</break>
</block_content>}</block></switch>
<break>break;</break>

<case>case <expr><name>CURL_WANTYES</name></expr>:</case>
<switch>switch<condition>(<expr><name><name>tn</name><operator>-&gt;</operator><name>himq</name><index>[<expr><name>option</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>CURL_EMPTY</name></expr>:</case>

<break>break;</break>
<case>case <expr><name>CURL_OPPOSITE</name></expr>:</case>
<expr_stmt><expr><name><name>tn</name><operator>-&gt;</operator><name>himq</name><index>[<expr><name>option</name></expr>]</index></name> <operator>=</operator> <name>CURL_EMPTY</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if>
<else>else <block>{<block_content> 
<switch>switch<condition>(<expr><name><name>tn</name><operator>-&gt;</operator><name>him</name><index>[<expr><name>option</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>CURL_NO</name></expr>:</case>

<break>break;</break>

<case>case <expr><name>CURL_YES</name></expr>:</case>
<expr_stmt><expr><name><name>tn</name><operator>-&gt;</operator><name>him</name><index>[<expr><name>option</name></expr>]</index></name> <operator>=</operator> <name>CURL_WANTNO</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>send_negotiation</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>CURL_DONT</name></expr></argument>, <argument><expr><name>option</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>CURL_WANTNO</name></expr>:</case>
<switch>switch<condition>(<expr><name><name>tn</name><operator>-&gt;</operator><name>himq</name><index>[<expr><name>option</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>CURL_EMPTY</name></expr>:</case>

<break>break;</break>
<case>case <expr><name>CURL_OPPOSITE</name></expr>:</case>
<expr_stmt><expr><name><name>tn</name><operator>-&gt;</operator><name>himq</name><index>[<expr><name>option</name></expr>]</index></name> <operator>=</operator> <name>CURL_EMPTY</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<break>break;</break>

<case>case <expr><name>CURL_WANTYES</name></expr>:</case>
<switch>switch<condition>(<expr><name><name>tn</name><operator>-&gt;</operator><name>himq</name><index>[<expr><name>option</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>CURL_EMPTY</name></expr>:</case>
<expr_stmt><expr><name><name>tn</name><operator>-&gt;</operator><name>himq</name><index>[<expr><name>option</name></expr>]</index></name> <operator>=</operator> <name>CURL_OPPOSITE</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CURL_OPPOSITE</name></expr>:</case>
<break>break;</break>
</block_content>}</block></switch>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier>
<name>void</name></type> <name>rec_will</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>option</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>TELNET</name></name> <modifier>*</modifier></type><name>tn</name> <init>= <expr><operator>(</operator>struct <name>TELNET</name> <operator>*</operator><operator>)</operator><name><name>conn</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>protop</name></name></expr></init></decl>;</decl_stmt>
<switch>switch<condition>(<expr><name><name>tn</name><operator>-&gt;</operator><name>him</name><index>[<expr><name>option</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>CURL_NO</name></expr>:</case>
<if_stmt><if>if<condition>(<expr><name><name>tn</name><operator>-&gt;</operator><name>him_preferred</name><index>[<expr><name>option</name></expr>]</index></name> <operator>==</operator> <name>CURL_YES</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>tn</name><operator>-&gt;</operator><name>him</name><index>[<expr><name>option</name></expr>]</index></name> <operator>=</operator> <name>CURL_YES</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>send_negotiation</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>CURL_DO</name></expr></argument>, <argument><expr><name>option</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>send_negotiation</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>CURL_DONT</name></expr></argument>, <argument><expr><name>option</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>CURL_YES</name></expr>:</case>

<break>break;</break>

<case>case <expr><name>CURL_WANTNO</name></expr>:</case>
<switch>switch<condition>(<expr><name><name>tn</name><operator>-&gt;</operator><name>himq</name><index>[<expr><name>option</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>CURL_EMPTY</name></expr>:</case>

<expr_stmt><expr><name><name>tn</name><operator>-&gt;</operator><name>him</name><index>[<expr><name>option</name></expr>]</index></name> <operator>=</operator> <name>CURL_NO</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CURL_OPPOSITE</name></expr>:</case>

<expr_stmt><expr><name><name>tn</name><operator>-&gt;</operator><name>him</name><index>[<expr><name>option</name></expr>]</index></name> <operator>=</operator> <name>CURL_YES</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tn</name><operator>-&gt;</operator><name>himq</name><index>[<expr><name>option</name></expr>]</index></name> <operator>=</operator> <name>CURL_EMPTY</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<break>break;</break>

<case>case <expr><name>CURL_WANTYES</name></expr>:</case>
<switch>switch<condition>(<expr><name><name>tn</name><operator>-&gt;</operator><name>himq</name><index>[<expr><name>option</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>CURL_EMPTY</name></expr>:</case>
<expr_stmt><expr><name><name>tn</name><operator>-&gt;</operator><name>him</name><index>[<expr><name>option</name></expr>]</index></name> <operator>=</operator> <name>CURL_YES</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CURL_OPPOSITE</name></expr>:</case>
<expr_stmt><expr><name><name>tn</name><operator>-&gt;</operator><name>him</name><index>[<expr><name>option</name></expr>]</index></name> <operator>=</operator> <name>CURL_WANTNO</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tn</name><operator>-&gt;</operator><name>himq</name><index>[<expr><name>option</name></expr>]</index></name> <operator>=</operator> <name>CURL_EMPTY</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>send_negotiation</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>CURL_DONT</name></expr></argument>, <argument><expr><name>option</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier>
<name>void</name></type> <name>rec_wont</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>option</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>TELNET</name></name> <modifier>*</modifier></type><name>tn</name> <init>= <expr><operator>(</operator>struct <name>TELNET</name> <operator>*</operator><operator>)</operator><name><name>conn</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>protop</name></name></expr></init></decl>;</decl_stmt>
<switch>switch<condition>(<expr><name><name>tn</name><operator>-&gt;</operator><name>him</name><index>[<expr><name>option</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>CURL_NO</name></expr>:</case>

<break>break;</break>

<case>case <expr><name>CURL_YES</name></expr>:</case>
<expr_stmt><expr><name><name>tn</name><operator>-&gt;</operator><name>him</name><index>[<expr><name>option</name></expr>]</index></name> <operator>=</operator> <name>CURL_NO</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>send_negotiation</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>CURL_DONT</name></expr></argument>, <argument><expr><name>option</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>CURL_WANTNO</name></expr>:</case>
<switch>switch<condition>(<expr><name><name>tn</name><operator>-&gt;</operator><name>himq</name><index>[<expr><name>option</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>CURL_EMPTY</name></expr>:</case>
<expr_stmt><expr><name><name>tn</name><operator>-&gt;</operator><name>him</name><index>[<expr><name>option</name></expr>]</index></name> <operator>=</operator> <name>CURL_NO</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>CURL_OPPOSITE</name></expr>:</case>
<expr_stmt><expr><name><name>tn</name><operator>-&gt;</operator><name>him</name><index>[<expr><name>option</name></expr>]</index></name> <operator>=</operator> <name>CURL_WANTYES</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tn</name><operator>-&gt;</operator><name>himq</name><index>[<expr><name>option</name></expr>]</index></name> <operator>=</operator> <name>CURL_EMPTY</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>send_negotiation</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>CURL_DO</name></expr></argument>, <argument><expr><name>option</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<break>break;</break>

<case>case <expr><name>CURL_WANTYES</name></expr>:</case>
<switch>switch<condition>(<expr><name><name>tn</name><operator>-&gt;</operator><name>himq</name><index>[<expr><name>option</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>CURL_EMPTY</name></expr>:</case>
<expr_stmt><expr><name><name>tn</name><operator>-&gt;</operator><name>him</name><index>[<expr><name>option</name></expr>]</index></name> <operator>=</operator> <name>CURL_NO</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CURL_OPPOSITE</name></expr>:</case>
<expr_stmt><expr><name><name>tn</name><operator>-&gt;</operator><name>him</name><index>[<expr><name>option</name></expr>]</index></name> <operator>=</operator> <name>CURL_NO</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tn</name><operator>-&gt;</operator><name>himq</name><index>[<expr><name>option</name></expr>]</index></name> <operator>=</operator> <name>CURL_EMPTY</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>set_local_option</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>option</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>newstate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>TELNET</name></name> <modifier>*</modifier></type><name>tn</name> <init>= <expr><operator>(</operator>struct <name>TELNET</name> <operator>*</operator><operator>)</operator><name><name>conn</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>protop</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>newstate</name> <operator>==</operator> <name>CURL_YES</name></expr>)</condition> <block>{<block_content>
<switch>switch<condition>(<expr><name><name>tn</name><operator>-&gt;</operator><name>us</name><index>[<expr><name>option</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>CURL_NO</name></expr>:</case>
<expr_stmt><expr><name><name>tn</name><operator>-&gt;</operator><name>us</name><index>[<expr><name>option</name></expr>]</index></name> <operator>=</operator> <name>CURL_WANTYES</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>send_negotiation</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>CURL_WILL</name></expr></argument>, <argument><expr><name>option</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>CURL_YES</name></expr>:</case>

<break>break;</break>

<case>case <expr><name>CURL_WANTNO</name></expr>:</case>
<switch>switch<condition>(<expr><name><name>tn</name><operator>-&gt;</operator><name>usq</name><index>[<expr><name>option</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>CURL_EMPTY</name></expr>:</case>

<expr_stmt><expr><name><name>tn</name><operator>-&gt;</operator><name>usq</name><index>[<expr><name>option</name></expr>]</index></name> <operator>=</operator> <name>CURL_OPPOSITE</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CURL_OPPOSITE</name></expr>:</case>

<break>break;</break>
</block_content>}</block></switch>
<break>break;</break>

<case>case <expr><name>CURL_WANTYES</name></expr>:</case>
<switch>switch<condition>(<expr><name><name>tn</name><operator>-&gt;</operator><name>usq</name><index>[<expr><name>option</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>CURL_EMPTY</name></expr>:</case>

<break>break;</break>
<case>case <expr><name>CURL_OPPOSITE</name></expr>:</case>
<expr_stmt><expr><name><name>tn</name><operator>-&gt;</operator><name>usq</name><index>[<expr><name>option</name></expr>]</index></name> <operator>=</operator> <name>CURL_EMPTY</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if>
<else>else <block>{<block_content> 
<switch>switch<condition>(<expr><name><name>tn</name><operator>-&gt;</operator><name>us</name><index>[<expr><name>option</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>CURL_NO</name></expr>:</case>

<break>break;</break>

<case>case <expr><name>CURL_YES</name></expr>:</case>
<expr_stmt><expr><name><name>tn</name><operator>-&gt;</operator><name>us</name><index>[<expr><name>option</name></expr>]</index></name> <operator>=</operator> <name>CURL_WANTNO</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>send_negotiation</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>CURL_WONT</name></expr></argument>, <argument><expr><name>option</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>CURL_WANTNO</name></expr>:</case>
<switch>switch<condition>(<expr><name><name>tn</name><operator>-&gt;</operator><name>usq</name><index>[<expr><name>option</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>CURL_EMPTY</name></expr>:</case>

<break>break;</break>
<case>case <expr><name>CURL_OPPOSITE</name></expr>:</case>
<expr_stmt><expr><name><name>tn</name><operator>-&gt;</operator><name>usq</name><index>[<expr><name>option</name></expr>]</index></name> <operator>=</operator> <name>CURL_EMPTY</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<break>break;</break>

<case>case <expr><name>CURL_WANTYES</name></expr>:</case>
<switch>switch<condition>(<expr><name><name>tn</name><operator>-&gt;</operator><name>usq</name><index>[<expr><name>option</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>CURL_EMPTY</name></expr>:</case>
<expr_stmt><expr><name><name>tn</name><operator>-&gt;</operator><name>usq</name><index>[<expr><name>option</name></expr>]</index></name> <operator>=</operator> <name>CURL_OPPOSITE</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CURL_OPPOSITE</name></expr>:</case>
<break>break;</break>
</block_content>}</block></switch>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier>
<name>void</name></type> <name>rec_do</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>option</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>TELNET</name></name> <modifier>*</modifier></type><name>tn</name> <init>= <expr><operator>(</operator>struct <name>TELNET</name> <operator>*</operator><operator>)</operator><name><name>conn</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>protop</name></name></expr></init></decl>;</decl_stmt>
<switch>switch<condition>(<expr><name><name>tn</name><operator>-&gt;</operator><name>us</name><index>[<expr><name>option</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>CURL_NO</name></expr>:</case>
<if_stmt><if>if<condition>(<expr><name><name>tn</name><operator>-&gt;</operator><name>us_preferred</name><index>[<expr><name>option</name></expr>]</index></name> <operator>==</operator> <name>CURL_YES</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>tn</name><operator>-&gt;</operator><name>us</name><index>[<expr><name>option</name></expr>]</index></name> <operator>=</operator> <name>CURL_YES</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>send_negotiation</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>CURL_WILL</name></expr></argument>, <argument><expr><name>option</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>tn</name><operator>-&gt;</operator><name>subnegotiation</name><index>[<expr><name>option</name></expr>]</index></name> <operator>==</operator> <name>CURL_YES</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>sendsuboption</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>option</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><name><name>tn</name><operator>-&gt;</operator><name>subnegotiation</name><index>[<expr><name>option</name></expr>]</index></name> <operator>==</operator> <name>CURL_YES</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>tn</name><operator>-&gt;</operator><name>us</name><index>[<expr><name>option</name></expr>]</index></name> <operator>=</operator> <name>CURL_YES</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>send_negotiation</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>CURL_WILL</name></expr></argument>, <argument><expr><name>option</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sendsuboption</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>option</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>send_negotiation</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>CURL_WONT</name></expr></argument>, <argument><expr><name>option</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>

<case>case <expr><name>CURL_YES</name></expr>:</case>

<break>break;</break>

<case>case <expr><name>CURL_WANTNO</name></expr>:</case>
<switch>switch<condition>(<expr><name><name>tn</name><operator>-&gt;</operator><name>usq</name><index>[<expr><name>option</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>CURL_EMPTY</name></expr>:</case>

<expr_stmt><expr><name><name>tn</name><operator>-&gt;</operator><name>us</name><index>[<expr><name>option</name></expr>]</index></name> <operator>=</operator> <name>CURL_NO</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CURL_OPPOSITE</name></expr>:</case>

<expr_stmt><expr><name><name>tn</name><operator>-&gt;</operator><name>us</name><index>[<expr><name>option</name></expr>]</index></name> <operator>=</operator> <name>CURL_YES</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tn</name><operator>-&gt;</operator><name>usq</name><index>[<expr><name>option</name></expr>]</index></name> <operator>=</operator> <name>CURL_EMPTY</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<break>break;</break>

<case>case <expr><name>CURL_WANTYES</name></expr>:</case>
<switch>switch<condition>(<expr><name><name>tn</name><operator>-&gt;</operator><name>usq</name><index>[<expr><name>option</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>CURL_EMPTY</name></expr>:</case>
<expr_stmt><expr><name><name>tn</name><operator>-&gt;</operator><name>us</name><index>[<expr><name>option</name></expr>]</index></name> <operator>=</operator> <name>CURL_YES</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>tn</name><operator>-&gt;</operator><name>subnegotiation</name><index>[<expr><name>option</name></expr>]</index></name> <operator>==</operator> <name>CURL_YES</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>sendsuboption</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>option</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>CURL_OPPOSITE</name></expr>:</case>
<expr_stmt><expr><name><name>tn</name><operator>-&gt;</operator><name>us</name><index>[<expr><name>option</name></expr>]</index></name> <operator>=</operator> <name>CURL_WANTNO</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tn</name><operator>-&gt;</operator><name>himq</name><index>[<expr><name>option</name></expr>]</index></name> <operator>=</operator> <name>CURL_EMPTY</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>send_negotiation</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>CURL_WONT</name></expr></argument>, <argument><expr><name>option</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier>
<name>void</name></type> <name>rec_dont</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>option</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>TELNET</name></name> <modifier>*</modifier></type><name>tn</name> <init>= <expr><operator>(</operator>struct <name>TELNET</name> <operator>*</operator><operator>)</operator><name><name>conn</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>protop</name></name></expr></init></decl>;</decl_stmt>
<switch>switch<condition>(<expr><name><name>tn</name><operator>-&gt;</operator><name>us</name><index>[<expr><name>option</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>CURL_NO</name></expr>:</case>

<break>break;</break>

<case>case <expr><name>CURL_YES</name></expr>:</case>
<expr_stmt><expr><name><name>tn</name><operator>-&gt;</operator><name>us</name><index>[<expr><name>option</name></expr>]</index></name> <operator>=</operator> <name>CURL_NO</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>send_negotiation</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>CURL_WONT</name></expr></argument>, <argument><expr><name>option</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>CURL_WANTNO</name></expr>:</case>
<switch>switch<condition>(<expr><name><name>tn</name><operator>-&gt;</operator><name>usq</name><index>[<expr><name>option</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>CURL_EMPTY</name></expr>:</case>
<expr_stmt><expr><name><name>tn</name><operator>-&gt;</operator><name>us</name><index>[<expr><name>option</name></expr>]</index></name> <operator>=</operator> <name>CURL_NO</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>CURL_OPPOSITE</name></expr>:</case>
<expr_stmt><expr><name><name>tn</name><operator>-&gt;</operator><name>us</name><index>[<expr><name>option</name></expr>]</index></name> <operator>=</operator> <name>CURL_WANTYES</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tn</name><operator>-&gt;</operator><name>usq</name><index>[<expr><name>option</name></expr>]</index></name> <operator>=</operator> <name>CURL_EMPTY</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>send_negotiation</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>CURL_WILL</name></expr></argument>, <argument><expr><name>option</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<break>break;</break>

<case>case <expr><name>CURL_WANTYES</name></expr>:</case>
<switch>switch<condition>(<expr><name><name>tn</name><operator>-&gt;</operator><name>usq</name><index>[<expr><name>option</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>CURL_EMPTY</name></expr>:</case>
<expr_stmt><expr><name><name>tn</name><operator>-&gt;</operator><name>us</name><index>[<expr><name>option</name></expr>]</index></name> <operator>=</operator> <name>CURL_NO</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CURL_OPPOSITE</name></expr>:</case>
<expr_stmt><expr><name><name>tn</name><operator>-&gt;</operator><name>us</name><index>[<expr><name>option</name></expr>]</index></name> <operator>=</operator> <name>CURL_NO</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tn</name><operator>-&gt;</operator><name>usq</name><index>[<expr><name>option</name></expr>]</index></name> <operator>=</operator> <name>CURL_EMPTY</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>printsub</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>direction</name></decl></parameter>, 
<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pointer</name></decl></parameter>, 
<parameter><decl><type><name>size_t</name></type> <name>length</name></decl></parameter>)</parameter_list> 
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>verbose</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>direction</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"%s IAC SB "</literal></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>direction</name> <operator>==</operator> <literal type="char">'&lt;'</literal><operator>)</operator></expr>?</condition><then> <expr><literal type="string">"RCVD"</literal></expr></then><else>:<expr><literal type="string">"SENT"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>length</name> <operator>&gt;=</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <name><name>pointer</name><index>[<expr><name>length</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>j</name> <operator>=</operator> <name><name>pointer</name><index>[<expr><name>length</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>i</name> <operator>!=</operator> <name>CURL_IAC</name> <operator>||</operator> <name>j</name> <operator>!=</operator> <name>CURL_SE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"(terminated by "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><call><name>CURL_TELOPT_OK</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"%s "</literal></expr></argument>, <argument><expr><call><name>CURL_TELOPT</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>(<expr><call><name>CURL_TELCMD_OK</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"%s "</literal></expr></argument>, <argument><expr><call><name>CURL_TELCMD</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"%u "</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if<condition>(<expr><call><name>CURL_TELOPT_OK</name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>CURL_TELOPT</name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>(<expr><call><name>CURL_TELCMD_OK</name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>CURL_TELCMD</name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">", not IAC SE!) "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>length</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>length</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"(Empty suboption?)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>CURL_TELOPT_OK</name><argument_list>(<argument><expr><name><name>pointer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<switch>switch<condition>(<expr><name><name>pointer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>CURL_TELOPT_TTYPE</name></expr>:</case>
<case>case <expr><name>CURL_TELOPT_XDISPLOC</name></expr>:</case>
<case>case <expr><name>CURL_TELOPT_NEW_ENVIRON</name></expr>:</case>
<case>case <expr><name>CURL_TELOPT_NAWS</name></expr>:</case>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>CURL_TELOPT</name><argument_list>(<argument><expr><name><name>pointer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"%s (unsupported)"</literal></expr></argument>, <argument><expr><call><name>CURL_TELOPT</name><argument_list>(<argument><expr><name><name>pointer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"%d (unknown)"</literal></expr></argument>, <argument><expr><name><name>pointer</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<switch>switch<condition>(<expr><name><name>pointer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>CURL_TELOPT_NAWS</name></expr>:</case>
<if_stmt><if>if<condition>(<expr><name>length</name> <operator>&gt;</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Width: %d ; Height: %d"</literal></expr></argument>, <argument><expr><operator>(</operator><name><name>pointer</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name><name>pointer</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>,
<argument><expr><operator>(</operator><name><name>pointer</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name><name>pointer</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<default>default:</default>
<switch>switch<condition>(<expr><name><name>pointer</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>CURL_TELQUAL_IS</name></expr>:</case>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">" IS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CURL_TELQUAL_SEND</name></expr>:</case>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">" SEND"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CURL_TELQUAL_INFO</name></expr>:</case>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">" INFO/REPLY"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CURL_TELQUAL_NAME</name></expr>:</case>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">" NAME"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<switch>switch<condition>(<expr><name><name>pointer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>CURL_TELOPT_TTYPE</name></expr>:</case>
<case>case <expr><name>CURL_TELOPT_XDISPLOC</name></expr>:</case>
<expr_stmt><expr><name><name>pointer</name><index>[<expr><name>length</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">" \"%s\""</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pointer</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CURL_TELOPT_NEW_ENVIRON</name></expr>:</case>
<if_stmt><if>if<condition>(<expr><name><name>pointer</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>CURL_TELQUAL_IS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">3</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>length</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<switch>switch<condition>(<expr><name><name>pointer</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>CURL_NEW_ENV_VAR</name></expr>:</case>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CURL_NEW_ENV_VALUE</name></expr>:</case>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">" = "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"%c"</literal></expr></argument>, <argument><expr><name><name>pointer</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<default>default:</default>
<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>length</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">" %.2x"</literal></expr></argument>, <argument><expr><name><name>pointer</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></switch>
<if_stmt><if>if<condition>(<expr><name>direction</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>check_telnet_options</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>curl_slist</name></name> <modifier>*</modifier></type><name>head</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>curl_slist</name></name> <modifier>*</modifier></type><name>beg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>option_keyword</name><index>[<expr><literal type="number">128</literal></expr>]</index></name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>option_arg</name><index>[<expr><literal type="number">256</literal></expr>]</index></name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>TELNET</name></name> <modifier>*</modifier></type><name>tn</name> <init>= <expr><operator>(</operator>struct <name>TELNET</name> <operator>*</operator><operator>)</operator><name><name>conn</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>protop</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>binary_option</name></decl>;</decl_stmt>



<if_stmt><if>if<condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>bits</name><operator>.</operator><name>user_passwd</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msnprintf</name><argument_list>(<argument><expr><name>option_arg</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>option_arg</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"USER,%s"</literal></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>user</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>beg</name> <operator>=</operator> <call><name>curl_slist_append</name><argument_list>(<argument><expr><name><name>tn</name><operator>-&gt;</operator><name>telnet_vars</name></name></expr></argument>, <argument><expr><name>option_arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>beg</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>curl_slist_free_all</name><argument_list>(<argument><expr><name><name>tn</name><operator>-&gt;</operator><name>telnet_vars</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tn</name><operator>-&gt;</operator><name>telnet_vars</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>tn</name><operator>-&gt;</operator><name>telnet_vars</name></name> <operator>=</operator> <name>beg</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tn</name><operator>-&gt;</operator><name>us_preferred</name><index>[<expr><name>CURL_TELOPT_NEW_ENVIRON</name></expr>]</index></name> <operator>=</operator> <name>CURL_YES</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<for>for<control>(<init><expr><name>head</name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>telnet_options</name></name></expr>;</init> <condition><expr><name>head</name></expr>;</condition> <incr><expr><name>head</name> <operator>=</operator> <name><name>head</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><call><name>sscanf</name><argument_list>(<argument><expr><name><name>head</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"%127[^= ]%*[ =]%255s"</literal></expr></argument>,
<argument><expr><name>option_keyword</name></expr></argument>, <argument><expr><name>option_arg</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>


<if_stmt><if>if<condition>(<expr><call><name>strcasecompare</name><argument_list>(<argument><expr><name>option_keyword</name></expr></argument>, <argument><expr><literal type="string">"TTYPE"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name><name>tn</name><operator>-&gt;</operator><name>subopt_ttype</name></name></expr></argument>, <argument><expr><name>option_arg</name></expr></argument>, <argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tn</name><operator>-&gt;</operator><name>subopt_ttype</name><index>[<expr><literal type="number">31</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>tn</name><operator>-&gt;</operator><name>us_preferred</name><index>[<expr><name>CURL_TELOPT_TTYPE</name></expr>]</index></name> <operator>=</operator> <name>CURL_YES</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>(<expr><call><name>strcasecompare</name><argument_list>(<argument><expr><name>option_keyword</name></expr></argument>, <argument><expr><literal type="string">"XDISPLOC"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name><name>tn</name><operator>-&gt;</operator><name>subopt_xdisploc</name></name></expr></argument>, <argument><expr><name>option_arg</name></expr></argument>, <argument><expr><literal type="number">127</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tn</name><operator>-&gt;</operator><name>subopt_xdisploc</name><index>[<expr><literal type="number">127</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>tn</name><operator>-&gt;</operator><name>us_preferred</name><index>[<expr><name>CURL_TELOPT_XDISPLOC</name></expr>]</index></name> <operator>=</operator> <name>CURL_YES</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>(<expr><call><name>strcasecompare</name><argument_list>(<argument><expr><name>option_keyword</name></expr></argument>, <argument><expr><literal type="string">"NEW_ENV"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>beg</name> <operator>=</operator> <call><name>curl_slist_append</name><argument_list>(<argument><expr><name><name>tn</name><operator>-&gt;</operator><name>telnet_vars</name></name></expr></argument>, <argument><expr><name>option_arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>beg</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>tn</name><operator>-&gt;</operator><name>telnet_vars</name></name> <operator>=</operator> <name>beg</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tn</name><operator>-&gt;</operator><name>us_preferred</name><index>[<expr><name>CURL_TELOPT_NEW_ENVIRON</name></expr>]</index></name> <operator>=</operator> <name>CURL_YES</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>(<expr><call><name>strcasecompare</name><argument_list>(<argument><expr><name>option_keyword</name></expr></argument>, <argument><expr><literal type="string">"WS"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><call><name>sscanf</name><argument_list>(<argument><expr><name>option_arg</name></expr></argument>, <argument><expr><literal type="string">"%hu%*[xX]%hu"</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>tn</name><operator>-&gt;</operator><name>subopt_wsx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tn</name><operator>-&gt;</operator><name>subopt_wsy</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>tn</name><operator>-&gt;</operator><name>us_preferred</name><index>[<expr><name>CURL_TELOPT_NAWS</name></expr>]</index></name> <operator>=</operator> <name>CURL_YES</name></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Syntax error in telnet option: %s"</literal></expr></argument>, <argument><expr><name><name>head</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_TELNET_OPTION_SYNTAX</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></else></if_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>(<expr><call><name>strcasecompare</name><argument_list>(<argument><expr><name>option_keyword</name></expr></argument>, <argument><expr><literal type="string">"BINARY"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>binary_option</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>option_arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>binary_option</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>tn</name><operator>-&gt;</operator><name>us_preferred</name><index>[<expr><name>CURL_TELOPT_BINARY</name></expr>]</index></name> <operator>=</operator> <name>CURL_NO</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tn</name><operator>-&gt;</operator><name>him_preferred</name><index>[<expr><name>CURL_TELOPT_BINARY</name></expr>]</index></name> <operator>=</operator> <name>CURL_NO</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Unknown telnet option %s"</literal></expr></argument>, <argument><expr><name><name>head</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_UNKNOWN_OPTION</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Syntax error in telnet option: %s"</literal></expr></argument>, <argument><expr><name><name>head</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_TELNET_OPTION_SYNTAX</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></for>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>curl_slist_free_all</name><argument_list>(<argument><expr><name><name>tn</name><operator>-&gt;</operator><name>telnet_vars</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tn</name><operator>-&gt;</operator><name>telnet_vars</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>void</name></type> <name>suboption</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>curl_slist</name></name> <modifier>*</modifier></type><name>v</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>temp</name><index>[<expr><literal type="number">2048</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>bytes_written</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>varname</name><index>[<expr><literal type="number">128</literal></expr>]</index></name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>varval</name><index>[<expr><literal type="number">128</literal></expr>]</index></name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>TELNET</name></name> <modifier>*</modifier></type><name>tn</name> <init>= <expr><operator>(</operator>struct <name>TELNET</name> <operator>*</operator><operator>)</operator><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>protop</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>printsub</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="char">'&lt;'</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>tn</name><operator>-&gt;</operator><name>subbuffer</name></name></expr></argument>, <argument><expr><call><name>CURL_SB_LEN</name><argument_list>(<argument><expr><name>tn</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch<condition>(<expr><call><name>CURL_SB_GET</name><argument_list>(<argument><expr><name>tn</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>CURL_TELOPT_TTYPE</name></expr>:</case>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>tn</name><operator>-&gt;</operator><name>subopt_ttype</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msnprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>temp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><literal type="string">"%c%c%c%c%s%c%c"</literal></expr></argument>, <argument><expr><name>CURL_IAC</name></expr></argument>, <argument><expr><name>CURL_SB</name></expr></argument>, <argument><expr><name>CURL_TELOPT_TTYPE</name></expr></argument>,
<argument><expr><name>CURL_TELQUAL_IS</name></expr></argument>, <argument><expr><name><name>tn</name><operator>-&gt;</operator><name>subopt_ttype</name></name></expr></argument>, <argument><expr><name>CURL_IAC</name></expr></argument>, <argument><expr><name>CURL_SE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bytes_written</name> <operator>=</operator> <call><name>swrite</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>sock</name><index>[<expr><name>FIRSTSOCKET</name></expr>]</index></name></expr></argument>, <argument><expr><name>temp</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>bytes_written</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <name>SOCKERRNO</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>,<argument><expr><literal type="string">"Sending data failed (%d)"</literal></expr></argument>,<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>printsub</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="char">'&gt;'</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>temp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>len</name><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CURL_TELOPT_XDISPLOC</name></expr>:</case>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>tn</name><operator>-&gt;</operator><name>subopt_xdisploc</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msnprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>temp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><literal type="string">"%c%c%c%c%s%c%c"</literal></expr></argument>, <argument><expr><name>CURL_IAC</name></expr></argument>, <argument><expr><name>CURL_SB</name></expr></argument>, <argument><expr><name>CURL_TELOPT_XDISPLOC</name></expr></argument>,
<argument><expr><name>CURL_TELQUAL_IS</name></expr></argument>, <argument><expr><name><name>tn</name><operator>-&gt;</operator><name>subopt_xdisploc</name></name></expr></argument>, <argument><expr><name>CURL_IAC</name></expr></argument>, <argument><expr><name>CURL_SE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bytes_written</name> <operator>=</operator> <call><name>swrite</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>sock</name><index>[<expr><name>FIRSTSOCKET</name></expr>]</index></name></expr></argument>, <argument><expr><name>temp</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>bytes_written</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <name>SOCKERRNO</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>,<argument><expr><literal type="string">"Sending data failed (%d)"</literal></expr></argument>,<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>printsub</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="char">'&gt;'</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>temp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>len</name><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CURL_TELOPT_NEW_ENVIRON</name></expr>:</case>
<expr_stmt><expr><call><name>msnprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>temp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><literal type="string">"%c%c%c%c"</literal></expr></argument>, <argument><expr><name>CURL_IAC</name></expr></argument>, <argument><expr><name>CURL_SB</name></expr></argument>, <argument><expr><name>CURL_TELOPT_NEW_ENVIRON</name></expr></argument>,
<argument><expr><name>CURL_TELQUAL_IS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>v</name> <operator>=</operator> <name><name>tn</name><operator>-&gt;</operator><name>telnet_vars</name></name></expr>;</init> <condition><expr><name>v</name></expr>;</condition> <incr><expr><name>v</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>tmplen</name> <init>= <expr><operator>(</operator><call><name>strlen</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>len</name> <operator>+</operator> <name>tmplen</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">6</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><call><name>sscanf</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"%127[^,],%127s"</literal></expr></argument>, <argument><expr><name>varname</name></expr></argument>, <argument><expr><name>varval</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msnprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>temp</name><index>[<expr><name>len</name></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <name>len</name></expr></argument>,
<argument><expr><literal type="string">"%c%s%c%s"</literal></expr></argument>, <argument><expr><name>CURL_NEW_ENV_VAR</name></expr></argument>, <argument><expr><name>varname</name></expr></argument>,
<argument><expr><name>CURL_NEW_ENV_VALUE</name></expr></argument>, <argument><expr><name>varval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>+=</operator> <name>tmplen</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>msnprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>temp</name><index>[<expr><name>len</name></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <name>len</name></expr></argument>,
<argument><expr><literal type="string">"%c%c"</literal></expr></argument>, <argument><expr><name>CURL_IAC</name></expr></argument>, <argument><expr><name>CURL_SE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>bytes_written</name> <operator>=</operator> <call><name>swrite</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>sock</name><index>[<expr><name>FIRSTSOCKET</name></expr>]</index></name></expr></argument>, <argument><expr><name>temp</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>bytes_written</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <name>SOCKERRNO</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>,<argument><expr><literal type="string">"Sending data failed (%d)"</literal></expr></argument>,<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>printsub</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="char">'&gt;'</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>temp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>len</name><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<return>return;</return>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>void</name></type> <name>sendsuboption</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>option</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>bytes_written</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>uc1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>uc2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>TELNET</name></name> <modifier>*</modifier></type><name>tn</name> <init>= <expr><operator>(</operator>struct <name>TELNET</name> <operator>*</operator><operator>)</operator><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>protop</name></name></expr></init></decl>;</decl_stmt>

<switch>switch<condition>(<expr><name>option</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>CURL_TELOPT_NAWS</name></expr>:</case>

<expr_stmt><expr><call><name>CURL_SB_CLEAR</name><argument_list>(<argument><expr><name>tn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CURL_SB_ACCUM</name><argument_list>(<argument><expr><name>tn</name></expr></argument>, <argument><expr><name>CURL_IAC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CURL_SB_ACCUM</name><argument_list>(<argument><expr><name>tn</name></expr></argument>, <argument><expr><name>CURL_SB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CURL_SB_ACCUM</name><argument_list>(<argument><expr><name>tn</name></expr></argument>, <argument><expr><name>CURL_TELOPT_NAWS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name><name>tn</name><operator>-&gt;</operator><name>subopt_wsx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name><name>tn</name><operator>-&gt;</operator><name>subopt_wsy</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>uc1</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name>uc2</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>y</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CURL_SB_ACCUM</name><argument_list>(<argument><expr><name>tn</name></expr></argument>, <argument><expr><name><name>uc1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CURL_SB_ACCUM</name><argument_list>(<argument><expr><name>tn</name></expr></argument>, <argument><expr><name><name>uc1</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CURL_SB_ACCUM</name><argument_list>(<argument><expr><name>tn</name></expr></argument>, <argument><expr><name><name>uc2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CURL_SB_ACCUM</name><argument_list>(<argument><expr><name>tn</name></expr></argument>, <argument><expr><name><name>uc2</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CURL_SB_ACCUM</name><argument_list>(<argument><expr><name>tn</name></expr></argument>, <argument><expr><name>CURL_IAC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CURL_SB_ACCUM</name><argument_list>(<argument><expr><name>tn</name></expr></argument>, <argument><expr><name>CURL_SE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CURL_SB_TERM</name><argument_list>(<argument><expr><name>tn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>printsub</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="char">'&gt;'</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>tn</name><operator>-&gt;</operator><name>subbuffer</name></name> <operator>+</operator> <literal type="number">2</literal></expr></argument>,
<argument><expr><call><name>CURL_SB_LEN</name><argument_list>(<argument><expr><name>tn</name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>bytes_written</name> <operator>=</operator> <call><name>swrite</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>sock</name><index>[<expr><name>FIRSTSOCKET</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>tn</name><operator>-&gt;</operator><name>subbuffer</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>bytes_written</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <name>SOCKERRNO</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Sending data failed (%d)"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>send_telnet_data</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>tn</name><operator>-&gt;</operator><name>subbuffer</name></name> <operator>+</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bytes_written</name> <operator>=</operator> <call><name>swrite</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>sock</name><index>[<expr><name>FIRSTSOCKET</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>tn</name><operator>-&gt;</operator><name>subbuffer</name></name> <operator>+</operator> <literal type="number">7</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>bytes_written</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <name>SOCKERRNO</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Sending data failed (%d)"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></function>


<function><type><specifier>static</specifier>
<name>CURLcode</name></type> <name>telrcv</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>inbuf</name></decl></parameter>, 
<parameter><decl><type><name>ssize_t</name></type> <name>count</name></decl></parameter>)</parameter_list> 
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>in</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>startwrite</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>TELNET</name></name> <modifier>*</modifier></type><name>tn</name> <init>= <expr><operator>(</operator>struct <name>TELNET</name> <operator>*</operator><operator>)</operator><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>protop</name></name></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>startskipping</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>if(startwrite &gt;= 0) { result = Curl_client_write(conn, CLIENTWRITE_BODY, (char *)&amp;inbuf[startwrite], in-startwrite); if(result) return result; } startwrite = -1</cpp:value></cpp:define>










<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>writebyte</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>if(startwrite &lt; 0) startwrite = in</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bufferflush</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>startskipping()</cpp:value></cpp:define>

<while>while<condition>(<expr><name>count</name><operator>--</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>inbuf</name><index>[<expr><name>in</name></expr>]</index></name></expr>;</expr_stmt>

<switch>switch<condition>(<expr><name><name>tn</name><operator>-&gt;</operator><name>telrcv_state</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>CURL_TS_CR</name></expr>:</case>
<expr_stmt><expr><name><name>tn</name><operator>-&gt;</operator><name>telrcv_state</name></name> <operator>=</operator> <name>CURL_TS_DATA</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>startskipping</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<break>break;</break> 
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>writebyte</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>CURL_TS_DATA</name></expr>:</case>
<if_stmt><if>if<condition>(<expr><name>c</name> <operator>==</operator> <name>CURL_IAC</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>tn</name><operator>-&gt;</operator><name>telrcv_state</name></name> <operator>=</operator> <name>CURL_TS_IAC</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>startskipping</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\r'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>tn</name><operator>-&gt;</operator><name>telrcv_state</name></name> <operator>=</operator> <name>CURL_TS_CR</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>writebyte</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>CURL_TS_IAC</name></expr>:</case>
<label><name>process_iac</name>:</label>
<expr_stmt><expr><call><name>DEBUGASSERT</name><argument_list>(<argument><expr><name>startwrite</name> <operator>&lt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch<condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>CURL_WILL</name></expr>:</case>
<expr_stmt><expr><name><name>tn</name><operator>-&gt;</operator><name>telrcv_state</name></name> <operator>=</operator> <name>CURL_TS_WILL</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CURL_WONT</name></expr>:</case>
<expr_stmt><expr><name><name>tn</name><operator>-&gt;</operator><name>telrcv_state</name></name> <operator>=</operator> <name>CURL_TS_WONT</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CURL_DO</name></expr>:</case>
<expr_stmt><expr><name><name>tn</name><operator>-&gt;</operator><name>telrcv_state</name></name> <operator>=</operator> <name>CURL_TS_DO</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CURL_DONT</name></expr>:</case>
<expr_stmt><expr><name><name>tn</name><operator>-&gt;</operator><name>telrcv_state</name></name> <operator>=</operator> <name>CURL_TS_DONT</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CURL_SB</name></expr>:</case>
<expr_stmt><expr><call><name>CURL_SB_CLEAR</name><argument_list>(<argument><expr><name>tn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tn</name><operator>-&gt;</operator><name>telrcv_state</name></name> <operator>=</operator> <name>CURL_TS_SB</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CURL_IAC</name></expr>:</case>
<expr_stmt><expr><name><name>tn</name><operator>-&gt;</operator><name>telrcv_state</name></name> <operator>=</operator> <name>CURL_TS_DATA</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>writebyte</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CURL_DM</name></expr>:</case>
<case>case <expr><name>CURL_NOP</name></expr>:</case>
<case>case <expr><name>CURL_GA</name></expr>:</case>
<default>default:</default>
<expr_stmt><expr><name><name>tn</name><operator>-&gt;</operator><name>telrcv_state</name></name> <operator>=</operator> <name>CURL_TS_DATA</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printoption</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"RCVD"</literal></expr></argument>, <argument><expr><name>CURL_IAC</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<break>break;</break>

<case>case <expr><name>CURL_TS_WILL</name></expr>:</case>
<expr_stmt><expr><call><name>printoption</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"RCVD"</literal></expr></argument>, <argument><expr><name>CURL_WILL</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tn</name><operator>-&gt;</operator><name>please_negotiate</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rec_will</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tn</name><operator>-&gt;</operator><name>telrcv_state</name></name> <operator>=</operator> <name>CURL_TS_DATA</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>CURL_TS_WONT</name></expr>:</case>
<expr_stmt><expr><call><name>printoption</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"RCVD"</literal></expr></argument>, <argument><expr><name>CURL_WONT</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tn</name><operator>-&gt;</operator><name>please_negotiate</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rec_wont</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tn</name><operator>-&gt;</operator><name>telrcv_state</name></name> <operator>=</operator> <name>CURL_TS_DATA</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>CURL_TS_DO</name></expr>:</case>
<expr_stmt><expr><call><name>printoption</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"RCVD"</literal></expr></argument>, <argument><expr><name>CURL_DO</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tn</name><operator>-&gt;</operator><name>please_negotiate</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rec_do</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tn</name><operator>-&gt;</operator><name>telrcv_state</name></name> <operator>=</operator> <name>CURL_TS_DATA</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>CURL_TS_DONT</name></expr>:</case>
<expr_stmt><expr><call><name>printoption</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"RCVD"</literal></expr></argument>, <argument><expr><name>CURL_DONT</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tn</name><operator>-&gt;</operator><name>please_negotiate</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rec_dont</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tn</name><operator>-&gt;</operator><name>telrcv_state</name></name> <operator>=</operator> <name>CURL_TS_DATA</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>CURL_TS_SB</name></expr>:</case>
<if_stmt><if>if<condition>(<expr><name>c</name> <operator>==</operator> <name>CURL_IAC</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>tn</name><operator>-&gt;</operator><name>telrcv_state</name></name> <operator>=</operator> <name>CURL_TS_SE</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>CURL_SB_ACCUM</name><argument_list>(<argument><expr><name>tn</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>

<case>case <expr><name>CURL_TS_SE</name></expr>:</case>
<if_stmt><if>if<condition>(<expr><name>c</name> <operator>!=</operator> <name>CURL_SE</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>c</name> <operator>!=</operator> <name>CURL_IAC</name></expr>)</condition> <block>{<block_content>









<expr_stmt><expr><call><name>CURL_SB_ACCUM</name><argument_list>(<argument><expr><name>tn</name></expr></argument>, <argument><expr><name>CURL_IAC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CURL_SB_ACCUM</name><argument_list>(<argument><expr><name>tn</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tn</name><operator>-&gt;</operator><name>subpointer</name></name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CURL_SB_TERM</name><argument_list>(<argument><expr><name>tn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printoption</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"In SUBOPTION processing, RCVD"</literal></expr></argument>, <argument><expr><name>CURL_IAC</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>suboption</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>tn</name><operator>-&gt;</operator><name>telrcv_state</name></name> <operator>=</operator> <name>CURL_TS_IAC</name></expr>;</expr_stmt>
<goto>goto <name>process_iac</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>CURL_SB_ACCUM</name><argument_list>(<argument><expr><name>tn</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tn</name><operator>-&gt;</operator><name>telrcv_state</name></name> <operator>=</operator> <name>CURL_TS_SB</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>CURL_SB_ACCUM</name><argument_list>(<argument><expr><name>tn</name></expr></argument>, <argument><expr><name>CURL_IAC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CURL_SB_ACCUM</name><argument_list>(<argument><expr><name>tn</name></expr></argument>, <argument><expr><name>CURL_SE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tn</name><operator>-&gt;</operator><name>subpointer</name></name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CURL_SB_TERM</name><argument_list>(<argument><expr><name>tn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>suboption</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>tn</name><operator>-&gt;</operator><name>telrcv_state</name></name> <operator>=</operator> <name>CURL_TS_DATA</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><operator>++</operator><name>in</name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>bufferflush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_OK</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>send_telnet_data</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name></type> <name>nread</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>escapes</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>outlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>outbuf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name> <init>= <expr><name>CURLE_OK</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>bytes_written</name></decl>, <decl><type ref="prev"/><name>total_written</name></decl>;</decl_stmt>


<expr_stmt><expr><name>escapes</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nread</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if<condition>(<expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name><name>buffer</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>CURL_IAC</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>escapes</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
<expr_stmt><expr><name>outlen</name> <operator>=</operator> <name>nread</name> <operator>+</operator> <name>escapes</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>outlen</name> <operator>==</operator> <name>nread</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>outbuf</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>buffer</name></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>j</name></decl>;</decl_stmt>
<expr_stmt><expr><name>outbuf</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>nread</name> <operator>+</operator> <name>escapes</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>outbuf</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nread</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>outbuf</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>buffer</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name><name>buffer</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>CURL_IAC</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>outbuf</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>CURL_IAC</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>outbuf</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>total_written</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while<condition>(<expr><operator>!</operator><name>result</name> <operator>&amp;&amp;</operator> <name>total_written</name> <operator>&lt;</operator> <name>outlen</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>pollfd</name></name></type> <name><name>pfd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>pfd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>fd</name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>sock</name><index>[<expr><name>FIRSTSOCKET</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pfd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>events</name> <operator>=</operator> <name>POLLOUT</name></expr>;</expr_stmt>
<switch>switch<condition>(<expr><call><name>Curl_poll</name><argument_list>(<argument><expr><name>pfd</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><operator>-</operator><literal type="number">1</literal></expr>:</case> 
<case>case <expr><literal type="number">0</literal></expr>:</case> 
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_SEND_ERROR</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default> 
<expr_stmt><expr><name>bytes_written</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_write</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>sock</name><index>[<expr><name>FIRSTSOCKET</name></expr>]</index></name></expr></argument>,
<argument><expr><name>outbuf</name> <operator>+</operator> <name>total_written</name></expr></argument>,
<argument><expr><name>outlen</name> <operator>-</operator> <name>total_written</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>bytes_written</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>total_written</name> <operator>+=</operator> <name>bytes_written</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></while>


<if_stmt><if>if<condition>(<expr><name>outbuf</name> <operator>!=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>buffer</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>outbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>telnet_done</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,
<parameter><decl><type><name>CURLcode</name></type> <name>status</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>premature</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>TELNET</name></name> <modifier>*</modifier></type><name>tn</name> <init>= <expr><operator>(</operator>struct <name>TELNET</name> <operator>*</operator><operator>)</operator><name><name>conn</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>protop</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>status</name></expr>;</expr_stmt> 
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>premature</name></expr>;</expr_stmt> 

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>tn</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CURLE_OK</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>curl_slist_free_all</name><argument_list>(<argument><expr><name><name>tn</name><operator>-&gt;</operator><name>telnet_vars</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tn</name><operator>-&gt;</operator><name>telnet_vars</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Curl_safefree</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>protop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CURLE_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CURLcode</name></type> <name>telnet_do</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connectdata</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>done</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CURLcode</name></type> <name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>Curl_easy</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>curl_socket_t</name></type> <name>sockfd</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>sock</name><index>[<expr><name>FIRSTSOCKET</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_WINSOCK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>HMODULE</name></type> <name>wsock2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WSOCK2_FUNC</name></type> <name>close_event_func</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WSOCK2_EVENT</name></type> <name>create_event_func</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WSOCK2_FUNC</name></type> <name>event_select_func</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WSOCK2_FUNC</name></type> <name>enum_netevents_func</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WSAEVENT</name></type> <name>event_handle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WSANETWORKEVENTS</name></type> <name>events</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HANDLE</name></type> <name>stdin_handle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HANDLE</name></type> <name><name>objs</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>obj_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>wait_timeout</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>readfile_read</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>int</name></type> <name>interval_ms</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>pollfd</name></name></type> <name><name>pfd</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>poll_cnt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>curl_off_t</name></type> <name>total_dl</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>curl_off_t</name></type> <name>total_ul</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>nread</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>curltime</name></name></type> <name>now</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>keepon</name> <init>= <expr><name>TRUE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>buffer</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>TELNET</name></name> <modifier>*</modifier></type><name>tn</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>done</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt> 

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>init_telnet</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>tn</name> <operator>=</operator> <operator>(</operator>struct <name>TELNET</name> <operator>*</operator><operator>)</operator><name><name>data</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>protop</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>check_telnet_options</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_WINSOCK</name></expr></argument>)</argument_list></call></expr></cpp:if>




<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>check_wsock2</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>



<expr_stmt><expr><name>wsock2</name> <operator>=</operator> <call><name>Curl_load_library</name><argument_list>(<argument><expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"WS2_32.DLL"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>wsock2</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"failed to load WS2_32.DLL (%u)"</literal></expr></argument>, <argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_FAILED_INIT</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>create_event_func</name> <operator>=</operator>
<call><name>CURLX_FUNCTION_CAST</name><argument_list>(<argument><expr><name>WSOCK2_EVENT</name></expr></argument>,
<argument><expr><operator>(</operator><call><name>GetProcAddress</name><argument_list>(<argument><expr><name>wsock2</name></expr></argument>, <argument><expr><literal type="string">"WSACreateEvent"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>create_event_func</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"failed to find WSACreateEvent function (%u)"</literal></expr></argument>, <argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FreeLibrary</name><argument_list>(<argument><expr><name>wsock2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_FAILED_INIT</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>close_event_func</name> <operator>=</operator> <call><name>GetProcAddress</name><argument_list>(<argument><expr><name>wsock2</name></expr></argument>, <argument><expr><literal type="string">"WSACloseEvent"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>close_event_func</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"failed to find WSACloseEvent function (%u)"</literal></expr></argument>, <argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FreeLibrary</name><argument_list>(<argument><expr><name>wsock2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_FAILED_INIT</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>event_select_func</name> <operator>=</operator> <call><name>GetProcAddress</name><argument_list>(<argument><expr><name>wsock2</name></expr></argument>, <argument><expr><literal type="string">"WSAEventSelect"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>event_select_func</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"failed to find WSAEventSelect function (%u)"</literal></expr></argument>, <argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FreeLibrary</name><argument_list>(<argument><expr><name>wsock2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_FAILED_INIT</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>enum_netevents_func</name> <operator>=</operator> <call><name>GetProcAddress</name><argument_list>(<argument><expr><name>wsock2</name></expr></argument>, <argument><expr><literal type="string">"WSAEnumNetworkEvents"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>enum_netevents_func</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"failed to find WSAEnumNetworkEvents function (%u)"</literal></expr></argument>,
<argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FreeLibrary</name><argument_list>(<argument><expr><name>wsock2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_FAILED_INIT</name></expr>;</return>
</block_content>}</block></if></if_stmt>







<expr_stmt><expr><name>event_handle</name> <operator>=</operator> <operator>(</operator><name>WSAEVENT</name><operator>)</operator><call><name>create_event_func</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>event_handle</name> <operator>==</operator> <name>WSA_INVALID_EVENT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"WSACreateEvent failed (%d)"</literal></expr></argument>, <argument><expr><name>SOCKERRNO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FreeLibrary</name><argument_list>(<argument><expr><name>wsock2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_FAILED_INIT</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>(<expr><call><name>event_select_func</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>, <argument><expr><name>event_handle</name></expr></argument>, <argument><expr><name>FD_READ</name><operator>|</operator><name>FD_CLOSE</name></expr></argument>)</argument_list></call> <operator>==</operator>
<name>SOCKET_ERROR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>close_event_func</name><argument_list>(<argument><expr><name>event_handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FreeLibrary</name><argument_list>(<argument><expr><name>wsock2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CURLE_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>stdin_handle</name> <operator>=</operator> <call><name>GetStdHandle</name><argument_list>(<argument><expr><name>STD_INPUT_HANDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>objs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>event_handle</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>objs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>stdin_handle</name></expr>;</expr_stmt>



<if_stmt><if>if<condition>(<expr><call><name>GetFileType</name><argument_list>(<argument><expr><name>stdin_handle</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FILE_TYPE_PIPE</name> <operator>||</operator>
<name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>is_fread_set</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>obj_count</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>wait_timeout</name> <operator>=</operator> <literal type="number">100</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>obj_count</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>wait_timeout</name> <operator>=</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<while>while<condition>(<expr><name>keepon</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>DWORD</name></type> <name>buf_size</name> <init>= <expr><operator>(</operator><name>DWORD</name><operator>)</operator><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>buffer_size</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>waitret</name> <init>= <expr><call><name>WaitForMultipleObjects</name><argument_list>(<argument><expr><name>obj_count</name></expr></argument>, <argument><expr><name>objs</name></expr></argument>,
<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>wait_timeout</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<switch>switch<condition>(<expr><name>waitret</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>WAIT_TIMEOUT</name></expr>:</case>
<block>{<block_content>
<for>for<control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>is_fread_set</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>n</name></decl>;</decl_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>fread_func</name></name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>in</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>n</name> <operator>==</operator> <name>CURL_READFUNC_ABORT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>keepon</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_READ_ERROR</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>n</name> <operator>==</operator> <name>CURL_READFUNC_PAUSE</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> 
<break>break;</break></block_content></block></if></if_stmt>


<expr_stmt><expr><name>readfile_read</name> <operator>=</operator> <operator>(</operator><name>DWORD</name><operator>)</operator><name>n</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>PeekNamedPipe</name><argument_list>(<argument><expr><name>stdin_handle</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>readfile_read</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>keepon</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_READ_ERROR</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>readfile_read</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>ReadFile</name><argument_list>(<argument><expr><name>stdin_handle</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>readfile_read</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>keepon</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_READ_ERROR</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>send_telnet_data</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>readfile_read</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>keepon</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block>
<break>break;</break>

<case>case <expr><name>WAIT_OBJECT_0</name> <operator>+</operator> <literal type="number">1</literal></expr>:</case>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>ReadFile</name><argument_list>(<argument><expr><name>stdin_handle</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>readfile_read</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>keepon</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_READ_ERROR</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>send_telnet_data</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>readfile_read</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>keepon</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<break>break;</break>

<case>case <expr><name>WAIT_OBJECT_0</name></expr>:</case>

<expr_stmt><expr><name><name>events</name><operator>.</operator><name>lNetworkEvents</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>SOCKET_ERROR</name> <operator>==</operator> <call><name>enum_netevents_func</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>, <argument><expr><name>event_handle</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>events</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <name>SOCKERRNO</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>err</name> <operator>!=</operator> <name>EINPROGRESS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"WSAEnumNetworkEvents failed (%d)"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>keepon</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_READ_ERROR</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name><name>events</name><operator>.</operator><name>lNetworkEvents</name></name> <operator>&amp;</operator> <name>FD_READ</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_read</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>sockfd</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>buffer_size</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name> <operator>==</operator> <name>CURLE_AGAIN</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if>

<if type="elseif">else if<condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>keepon</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if>


<if type="elseif">else if<condition>(<expr><name>nread</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>keepon</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>telrcv</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>buf</name></expr></argument>, <argument><expr><name>nread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>keepon</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if<condition>(<expr><name><name>tn</name><operator>-&gt;</operator><name>please_negotiate</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>tn</name><operator>-&gt;</operator><name>already_negotiated</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>negotiate</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tn</name><operator>-&gt;</operator><name>already_negotiated</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name><name>events</name><operator>.</operator><name>lNetworkEvents</name></name> <operator>&amp;</operator> <name>FD_CLOSE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>keepon</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>timeout</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>now</name> <operator>=</operator> <call><name>Curl_now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><call><name>Curl_timediff</name><argument_list>(<argument><expr><name>now</name></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>created</name></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>timeout</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Time-out"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_OPERATION_TIMEDOUT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>keepon</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>


<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>close_event_func</name><argument_list>(<argument><expr><name>event_handle</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"WSACloseEvent failed (%d)"</literal></expr></argument>, <argument><expr><name>SOCKERRNO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>create_event_func</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>close_event_func</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>event_select_func</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>enum_netevents_func</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>


<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>FreeLibrary</name><argument_list>(<argument><expr><name>wsock2</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>infof</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"FreeLibrary(wsock2) failed (%u)"</literal></expr></argument>, <argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>pfd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>fd</name> <operator>=</operator> <name>sockfd</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pfd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>events</name> <operator>=</operator> <name>POLLIN</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>is_fread_set</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>poll_cnt</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>interval_ms</name> <operator>=</operator> <literal type="number">100</literal></expr>;</expr_stmt> 
</block_content>}</block></if>
<else>else <block>{<block_content>

<expr_stmt><expr><name><name>pfd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>fd</name> <operator>=</operator> <call><name>fileno</name><argument_list>(<argument><expr><operator>(</operator><name>FILE</name> <operator>*</operator><operator>)</operator><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>in</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pfd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>events</name> <operator>=</operator> <name>POLLIN</name></expr>;</expr_stmt>
<expr_stmt><expr><name>poll_cnt</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>interval_ms</name> <operator>=</operator> <literal type="number">1</literal> <operator>*</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<while>while<condition>(<expr><name>keepon</name></expr>)</condition> <block>{<block_content>
<switch>switch<condition>(<expr><call><name>Curl_poll</name><argument_list>(<argument><expr><name>pfd</name></expr></argument>, <argument><expr><name>poll_cnt</name></expr></argument>, <argument><expr><name>interval_ms</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><operator>-</operator><literal type="number">1</literal></expr>:</case> 
<expr_stmt><expr><name>keepon</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<continue>continue;</continue>
<case>case <expr><literal type="number">0</literal></expr>:</case> 
<expr_stmt><expr><name><name>pfd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>revents</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pfd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>revents</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<default>default:</default> 
<if_stmt><if>if<condition>(<expr><name><name>pfd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>revents</name> <operator>&amp;</operator> <name>POLLIN</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>Curl_read</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>sockfd</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>buffer_size</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name> <operator>==</operator> <name>CURLE_AGAIN</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>keepon</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if>


<if type="elseif">else if<condition>(<expr><name>nread</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>keepon</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>total_dl</name> <operator>+=</operator> <name>nread</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_pgrsSetDownloadCounter</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>total_dl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>telrcv</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>buf</name></expr></argument>, <argument><expr><name>nread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>keepon</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if<condition>(<expr><name><name>tn</name><operator>-&gt;</operator><name>please_negotiate</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>tn</name><operator>-&gt;</operator><name>already_negotiated</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>negotiate</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tn</name><operator>-&gt;</operator><name>already_negotiated</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>nread</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>poll_cnt</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>pfd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>revents</name> <operator>&amp;</operator> <name>POLLIN</name></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name>nread</name> <operator>=</operator> <call><name>read</name><argument_list>(<argument><expr><name><name>pfd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>fd</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>buffer_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>

<expr_stmt><expr><name>nread</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>fread_func</name></name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>buffer_size</name></name></expr></argument>,
<argument><expr><name><name>data</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>in</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>nread</name> <operator>==</operator> <name>CURL_READFUNC_ABORT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>keepon</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>nread</name> <operator>==</operator> <name>CURL_READFUNC_PAUSE</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name>nread</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>send_telnet_data</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>nread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>keepon</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>total_ul</name> <operator>+=</operator> <name>nread</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Curl_pgrsSetUploadCounter</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>total_ul</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><name>nread</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>keepon</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>
</block_content>}</block></switch> 

<if_stmt><if>if<condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>timeout</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>now</name> <operator>=</operator> <call><name>Curl_now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><call><name>Curl_timediff</name><argument_list>(<argument><expr><name>now</name></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>created</name></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name><name>data</name><operator>-&gt;</operator><name>set</name><operator>.</operator><name>timeout</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>failf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"Time-out"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_OPERATION_TIMEDOUT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>keepon</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>Curl_pgrsUpdate</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CURLE_ABORTED_BY_CALLBACK</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>Curl_setup_transfer</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
